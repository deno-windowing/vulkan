import { anyBuffer, anyPointer, BUFFER, DATAVIEW, LE } from "./util.ts";
export const MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
export const UUID_SIZE = 16;
export const LUID_SIZE = 8;
export const LUID_SIZE_KHR = void 0;
export const MAX_EXTENSION_NAME_SIZE = 256;
export const MAX_DESCRIPTION_SIZE = 256;
export const MAX_MEMORY_TYPES = 32;
export const MAX_MEMORY_HEAPS = 16;
export const LOD_CLAMP_NONE = 1000.0;
export const REMAINING_MIP_LEVELS = -1;
export const REMAINING_ARRAY_LAYERS = -1;
export const WHOLE_SIZE = ~0n;
export const ATTACHMENT_UNUSED = -1;
export const TRUE = 1;
export const FALSE = 0;
export const QUEUE_FAMILY_IGNORED = -1;
export const QUEUE_FAMILY_EXTERNAL = -2;
export const QUEUE_FAMILY_EXTERNAL_KHR = void 0;
export const QUEUE_FAMILY_FOREIGN_EXT = -3;
export const SUBPASS_EXTERNAL = -1;
export const MAX_DEVICE_GROUP_SIZE = 32;
export const MAX_DEVICE_GROUP_SIZE_KHR = void 0;
export const MAX_DRIVER_NAME_SIZE = 256;
export const MAX_DRIVER_NAME_SIZE_KHR = void 0;
export const MAX_DRIVER_INFO_SIZE = 256;
export const MAX_DRIVER_INFO_SIZE_KHR = void 0;
export const SHADER_UNUSED_KHR = -1;
export const SHADER_UNUSED_NV = void 0;
export const MAX_GLOBAL_PRIORITY_SIZE_KHR = 16;
export const MAX_GLOBAL_PRIORITY_SIZE_EXT = void 0;
export const MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32;
export const STD_VIDEO_H264_CPB_CNT_LIST_SIZE = 32;
export const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = 6;
export const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = 16;
export const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = 6;
export const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = 64;
export const STD_VIDEO_H264_MAX_NUM_LIST_REF = 32;
export const STD_VIDEO_H264_MAX_CHROMA_PLANES = 2;
export const STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";
export const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = 2;
export const STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";
export const STD_VIDEO_H265_CPB_CNT_LIST_SIZE = 32;
export const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = 7;
export const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = 16;
export const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = 2;
export const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = 6;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = 19;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = 21;
export const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = 3;
export const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = 128;
export const STD_VIDEO_H265_MAX_NUM_LIST_REF = 15;
export const STD_VIDEO_H265_MAX_CHROMA_PLANES = 2;
export const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = 64;
export const STD_VIDEO_H265_MAX_DPB_SIZE = 16;
export const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = 32;
export const STD_VIDEO_H265_MAX_LONG_TERM_PICS = 16;
export const STD_VIDEO_H265_MAX_DELTA_POC = 48;
export const STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";
export const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = 8;
export const STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";
export const KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
export const KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
export const KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
export const KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
export const KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface";
export const KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface";
export const KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface";
export const KHR_MIR_SURFACE_EXTENSION_NAME = "VK_KHR_mir_surface";
export const KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface";
export const KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface";
export const ANDROID_NATIVE_BUFFER_NUMBER = 11;
export const ANDROID_NATIVE_BUFFER_EXTENSION_NAME = "VK_ANDROID_native_buffer";
export const EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
export const NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
export const EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
export const KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
export const IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
export const AMD_EXTENSION_17_EXTENSION_NAME = "VK_AMD_extension_17";
export const AMD_EXTENSION_18_EXTENSION_NAME = "VK_AMD_extension_18";
export const AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
export const AMD_EXTENSION_20_EXTENSION_NAME = "VK_AMD_extension_20";
export const AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
export const AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
export const EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
export const KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
export const KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
export const AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
export const NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
export const EXT_EXTENSION_28_EXTENSION_NAME = "VK_EXT_extension_28";
export const EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
export const NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
export const NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
export const AMD_EXTENSION_32_EXTENSION_NAME = "VK_AMD_extension_32";
export const AMD_EXTENSION_33_EXTENSION_NAME = "VK_AMD_extension_33";
export const AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
export const AMD_EXTENSION_35_EXTENSION_NAME = "VK_AMD_extension_35";
export const AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
export const AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
export const AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
export const EXT_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_EXT_video_encode_h264";
export const EXT_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_EXT_video_encode_h265";
export const EXT_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_EXT_video_decode_h264";
export const AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
export const AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
export const AMD_EXTENSION_44_EXTENSION_NAME = "VK_AMD_extension_44";
export const KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
export const AMD_EXTENSION_46_EXTENSION_NAME = "VK_AMD_extension_46";
export const AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
export const NVX_EXTENSION_48_EXTENSION_NAME = "VK_NVX_extension_48";
export const GOOGLE_EXTENSION_49_EXTENSION_NAME = "VK_GOOGLE_extension_49";
export const GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME = "VK_GGP_stream_descriptor_surface";
export const NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
export const NV_EXTENSION_52_EXTENSION_NAME = "VK_NV_extension_52";
export const NV_EXTENSION_53_EXTENSION_NAME = "VK_NV_extension_53";
export const KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
export const IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
export const NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
export const NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
export const NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32";
export const NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex";
export const KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
export const KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
export const EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
export const NN_VI_SURFACE_EXTENSION_NAME = "VK_NN_vi_surface";
export const KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
export const EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
export const EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
export const EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
export const EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
export const EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
export const KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
export const KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
export const KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
export const KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
export const KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHR_external_memory_win32";
export const KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
export const KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHR_win32_keyed_mutex";
export const KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
export const KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
export const KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHR_external_semaphore_win32";
export const KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
export const KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
export const EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
export const KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
export const KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
export const KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
export const KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
export const NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NVX_device_generated_commands";
export const NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
export const EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
export const EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_xlib_display";
export const EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
export const EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
export const GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
export const RESERVED_DO_NOT_USE_94_EXTENSION_NAME = "VK_RESERVED_do_not_use_94";
export const NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
export const NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
export const NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
export const NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
export const NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
export const EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
export const NV_EXTENSION_101_EXTENSION_NAME = "VK_NV_extension_101";
export const EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
export const EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
export const NV_EXTENSION_104_EXTENSION_NAME = "VK_NV_extension_104";
export const EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
export const EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
export const IMG_EXTENSION_107_EXTENSION_NAME = "VK_IMG_extension_107";
export const IMG_EXTENSION_108_EXTENSION_NAME = "VK_IMG_extension_108";
export const KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
export const KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
export const IMG_EXTENSION_111_EXTENSION_NAME = "VK_IMG_extension_111";
export const KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
export const KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
export const KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
export const KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME = "VK_KHR_external_fence_win32";
export const KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
export const KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
export const KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
export const KHR_EXTENSION_119_EXTENSION_NAME = "VK_KHR_extension_119";
export const KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
export const KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
export const KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
export const MVK_IOS_SURFACE_EXTENSION_NAME = "VK_MVK_ios_surface";
export const MVK_MACOS_SURFACE_EXTENSION_NAME = "VK_MVK_macos_surface";
export const MVK_MOLTENVK_EXTENSION_NAME = "VK_MVK_moltenvk";
export const EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
export const EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
export const KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
export const EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
export const ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME = "VK_ANDROID_external_memory_android_hardware_buffer";
export const EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
export const KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
export const AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
export const AMD_EXTENSION_134_EXTENSION_NAME = "VK_AMD_extension_134";
export const AMD_EXTENSION_135_EXTENSION_NAME = "VK_AMD_extension_135";
export const AMD_EXTENSION_136_EXTENSION_NAME = "VK_AMD_extension_136";
export const AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
export const AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
export const EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
export const AMD_EXTENSION_140_EXTENSION_NAME = "VK_AMD_extension_140";
export const EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
export const AMD_EXTENSION_142_EXTENSION_NAME = "VK_AMD_extension_142";
export const AMD_EXTENSION_143_EXTENSION_NAME = "VK_AMD_extension_143";
export const EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
export const KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
export const RESERVED_DO_NOT_USE_146_EXTENSION_NAME = "VK_RESERVED_do_not_use_146";
export const KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
export const KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
export const EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
export const NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
export const KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
export const KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
export const KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
export const NV_EXTENSION_152_EXTENSION_NAME = "VK_NV_extension_152";
export const NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
export const NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
export const NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
export const EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
export const KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
export const KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
export const EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
export const EXT_EXTENSION_160_EXTENSION_NAME = "VK_EXT_extension_160";
export const EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
export const EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
export const EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
export const KHR_PORTABILITY_SUBSET_EXTENSION_NAME = "VK_KHR_portability_subset";
export const NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
export const NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
export const NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
export const NV_EXTENSION_168_EXTENSION_NAME = "VK_NV_extension_168";
export const KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
export const KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
export const EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
export const QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
export const QCOM_EXTENSION_173_EXTENSION_NAME = "VK_QCOM_extension_173";
export const QCOM_EXTENSION_174_EXTENSION_NAME = "VK_QCOM_extension_174";
export const EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
export const KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
export const EXT_EXTENSION_177_EXTENSION_NAME = "VK_EXT_extension_177";
export const KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
export const EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
export const AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
export const KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
export const KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
export const AMD_EXTENSION_183_EXTENSION_NAME = "VK_AMD_extension_183";
export const AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
export const EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
export const AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
export const AMD_EXTENSION_187_EXTENSION_NAME = "VK_AMD_extension_187";
export const EXT_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_EXT_video_decode_h265";
export const KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
export const AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
export const EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
export const GGP_FRAME_TOKEN_EXTENSION_NAME = "VK_GGP_frame_token";
export const EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
export const GOOGLE_EXTENSION_194_EXTENSION_NAME = "VK_GOOGLE_extension_194";
export const GOOGLE_EXTENSION_195_EXTENSION_NAME = "VK_GOOGLE_extension_195";
export const GOOGLE_EXTENSION_196_EXTENSION_NAME = "VK_GOOGLE_extension_196";
export const KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
export const KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
export const NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
export const KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
export const KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
export const NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
export const NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
export const NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
export const NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
export const NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
export const NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
export const KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
export const KHR_EXTENSION_209_EXTENSION_NAME = "VK_KHR_extension_209";
export const INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
export const INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
export const KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
export const EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
export const AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
export const FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME = "VK_FUCHSIA_imagepipe_surface";
export const KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
export const GOOGLE_EXTENSION_217_EXTENSION_NAME = "VK_GOOGLE_extension_217";
export const EXT_METAL_SURFACE_EXTENSION_NAME = "VK_EXT_metal_surface";
export const EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
export const EXT_EXTENSION_220_EXTENSION_NAME = "VK_EXT_extension_220";
export const KHR_EXTENSION_221_EXTENSION_NAME = "VK_KHR_extension_221";
export const EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
export const EXT_EXTENSION_223_EXTENSION_NAME = "VK_EXT_extension_223";
export const GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
export const GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
export const EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
export const KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
export const AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
export const AMD_EXTENSION_229_EXTENSION_NAME = "VK_AMD_extension_229";
export const AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
export const AMD_EXTENSION_231_EXTENSION_NAME = "VK_AMD_extension_231";
export const AMD_EXTENSION_232_EXTENSION_NAME = "VK_AMD_extension_232";
export const AMD_EXTENSION_233_EXTENSION_NAME = "VK_AMD_extension_233";
export const AMD_EXTENSION_234_EXTENSION_NAME = "VK_AMD_extension_234";
export const EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
export const AMD_EXTENSION_236_EXTENSION_NAME = "VK_AMD_extension_236";
export const KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
export const EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
export const EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
export const KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
export const NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
export const KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
export const INTEL_EXTENSION_243_EXTENSION_NAME = "VK_INTEL_extension_243";
export const MESA_EXTENSION_244_EXTENSION_NAME = "VK_MESA_extension_244";
export const EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
export const EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
export const EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
export const EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
export const KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
export const NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
export const NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
export const EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
export const EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
export const KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
export const EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
export const EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME = "VK_EXT_full_screen_exclusive";
export const EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
export const KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
export const EXT_EXTENSION_259_EXTENSION_NAME = "VK_EXT_extension_259";
export const EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
export const EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
export const EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
export const GGP_EXTENSION_263_EXTENSION_NAME = "VK_GGP_extension_263";
export const BRCM_EXTENSION_264_EXTENSION_NAME = "VK_BRCM_extension_264";
export const BRCM_EXTENSION_265_EXTENSION_NAME = "VK_BRCM_extension_265";
export const EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
export const EXT_EXTENSION_267_EXTENSION_NAME = "VK_EXT_extension_267";
export const EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
export const KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
export const KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
export const INTEL_EXTENSION_271_EXTENSION_NAME = "VK_INTEL_extension_271";
export const INTEL_EXTENSION_272_EXTENSION_NAME = "VK_INTEL_extension_272";
export const INTEL_EXTENSION_273_EXTENSION_NAME = "VK_INTEL_extension_273";
export const EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
export const KHR_EXTENSION_275_EXTENSION_NAME = "VK_KHR_extension_275";
export const KHR_EXTENSION_276_EXTENSION_NAME = "VK_KHR_extension_276";
export const EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
export const NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
export const NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
export const KHR_EXTENSION_280_EXTENSION_NAME = "VK_KHR_extension_280";
export const KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
export const EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
export const QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
export const EXT_EXTENSION_284_EXTENSION_NAME = "VK_EXT_extension_284";
export const EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
export const EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
export const EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
export const EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
export const EXT_EXTENSION_289_EXTENSION_NAME = "VK_EXT_extension_289";
export const GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
export const KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
export const NV_EXTENSION_292_EXTENSION_NAME = "VK_NV_extension_292";
export const NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
export const KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
export const KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
export const EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
export const KHR_EXTENSION_297_EXTENSION_NAME = "VK_KHR_extension_297";
export const EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
export const KHR_EXTENSION_299_EXTENSION_NAME = "VK_KHR_extension_299";
export const KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";
export const NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
export const QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
export const QCOM_EXTENSION_303_EXTENSION_NAME = "VK_QCOM_extension_303";
export const QCOM_EXTENSION_304_EXTENSION_NAME = "VK_QCOM_extension_304";
export const QCOM_EXTENSION_305_EXTENSION_NAME = "VK_QCOM_extension_305";
export const QCOM_EXTENSION_306_EXTENSION_NAME = "VK_QCOM_extension_306";
export const QCOM_EXTENSION_307_EXTENSION_NAME = "VK_QCOM_extension_307";
export const NV_EXTENSION_308_EXTENSION_NAME = "VK_NV_extension_308";
export const KHR_EXTENSION_309_EXTENSION_NAME = "VK_KHR_extension_309";
export const QCOM_EXTENSION_310_EXTENSION_NAME = "VK_QCOM_extension_310";
export const NV_EXTENSION_311_EXTENSION_NAME = "VK_NV_extension_311";
export const EXT_METAL_OBJECTS_EXTENSION_NAME = "VK_EXT_metal_objects";
export const EXT_EXTENSION_313_EXTENSION_NAME = "VK_EXT_extension_313";
export const AMD_EXTENSION_314_EXTENSION_NAME = "VK_AMD_extension_314";
export const KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
export const AMD_EXTENSION_316_EXTENSION_NAME = "VK_AMD_extension_316";
export const EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
export const AMD_EXTENSION_318_EXTENSION_NAME = "VK_AMD_extension_318";
export const AMD_EXTENSION_319_EXTENSION_NAME = "VK_AMD_extension_319";
export const AMD_EXTENSION_320_EXTENSION_NAME = "VK_AMD_extension_320";
export const EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
export const AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
export const KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
export const KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
export const KHR_EXTENSION_325_EXTENSION_NAME = "VK_KHR_extension_325";
export const KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
export const NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
export const NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
export const EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
export const NV_EXTENSION_330_EXTENSION_NAME = "VK_NV_extension_330";
export const EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
export const NV_EXTENSION_332_EXTENSION_NAME = "VK_NV_extension_332";
export const EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
export const QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
export const KHR_EXTENSION_335_EXTENSION_NAME = "VK_KHR_extension_335";
export const EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
export const KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
export const KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
export const EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
export const EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
export const EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
export const EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
export const ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
export const ARM_EXTENSION_344_EXTENSION_NAME = "VK_ARM_extension_344";
export const EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
export const NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = "VK_NV_acquire_winrt_display";
export const EXT_DIRECTFB_SURFACE_EXTENSION_NAME = "VK_EXT_directfb_surface";
export const KHR_EXTENSION_350_EXTENSION_NAME = "VK_KHR_extension_350";
export const NV_EXTENSION_351_EXTENSION_NAME = "VK_NV_extension_351";
export const VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
export const EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
export const EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
export const EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
export const EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
export const EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
export const KHR_EXTENSION_358_EXTENSION_NAME = "VK_KHR_extension_358";
export const EXT_EXTENSION_359_EXTENSION_NAME = "VK_EXT_extension_359";
export const EXT_EXTENSION_360_EXTENSION_NAME = "VK_EXT_extension_360";
export const KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
export const EXT_EXTENSION_362_EXTENSION_NAME = "VK_EXT_extension_362";
export const EXT_EXTENSION_363_EXTENSION_NAME = "VK_EXT_extension_363";
export const FUCHSIA_EXTENSION_364_EXTENSION_NAME = "VK_FUCHSIA_extension_364";
export const FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_FUCHSIA_external_memory";
export const FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_FUCHSIA_external_semaphore";
export const FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME = "VK_FUCHSIA_buffer_collection";
export const FUCHSIA_EXTENSION_368_EXTENSION_NAME = "VK_FUCHSIA_extension_368";
export const QCOM_EXTENSION_369_EXTENSION_NAME = "VK_QCOM_extension_369";
export const HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
export const HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
export const NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
export const EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
export const NV_EXTENSION_374_EXTENSION_NAME = "VK_NV_extension_374";
export const NV_EXTENSION_375_EXTENSION_NAME = "VK_NV_extension_375";
export const EXT_EXTENSION_376_EXTENSION_NAME = "VK_EXT_extension_376";
export const EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
export const EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
export const QNX_SCREEN_SURFACE_EXTENSION_NAME = "VK_QNX_screen_surface";
export const KHR_EXTENSION_380_EXTENSION_NAME = "VK_KHR_extension_380";
export const KHR_EXTENSION_381_EXTENSION_NAME = "VK_KHR_extension_381";
export const EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
export const EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
export const EXT_EXTENSION_384_EXTENSION_NAME = "VK_EXT_extension_384";
export const MESA_EXTENSION_385_EXTENSION_NAME = "VK_MESA_extension_385";
export const GOOGLE_EXTENSION_386_EXTENSION_NAME = "VK_GOOGLE_extension_386";
export const KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
export const EXT_EXTENSION_388_EXTENSION_NAME = "VK_EXT_extension_388";
export const EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
export const EXT_EXTENSION_390_EXTENSION_NAME = "VK_EXT_extension_390";
export const EXT_EXTENSION_391_EXTENSION_NAME = "VK_EXT_extension_391";
export const EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
export const EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
export const EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
export const KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
export const KHR_EXTENSION_396_EXTENSION_NAME = "VK_KHR_extension_396";
export const EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
export const NV_EXTENSION_398_EXTENSION_NAME = "VK_NV_extension_398";
export const JUICE_EXTENSION_399_EXTENSION_NAME = "VK_JUICE_extension_399";
export const JUICE_EXTENSION_400_EXTENSION_NAME = "VK_JUICE_extension_400";
export const EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
export const FB_EXTENSION_402_EXTENSION_NAME = "VK_FB_extension_402";
export const FB_EXTENSION_403_EXTENSION_NAME = "VK_FB_extension_403";
export const FB_EXTENSION_404_EXTENSION_NAME = "VK_FB_extension_404";
export const HUAWEI_EXTENSION_405_EXTENSION_NAME = "VK_HUAWEI_extension_405";
export const HUAWEI_EXTENSION_406_EXTENSION_NAME = "VK_HUAWEI_extension_406";
export const GGP_EXTENSION_407_EXTENSION_NAME = "VK_GGP_extension_407";
export const GGP_EXTENSION_408_EXTENSION_NAME = "VK_GGP_extension_408";
export const GGP_EXTENSION_409_EXTENSION_NAME = "VK_GGP_extension_409";
export const GGP_EXTENSION_410_EXTENSION_NAME = "VK_GGP_extension_410";
export const GGP_EXTENSION_411_EXTENSION_NAME = "VK_GGP_extension_411";
export const EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
export const EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
export const KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
export const HUAWEI_EXTENSION_415_EXTENSION_NAME = "VK_HUAWEI_extension_415";
export const ARM_EXTENSION_416_EXTENSION_NAME = "VK_ARM_extension_416";
export const KHR_EXTENSION_417_EXTENSION_NAME = "VK_KHR_extension_417";
export const ARM_EXTENSION_418_EXTENSION_NAME = "VK_ARM_extension_418";
export const EXT_EXTENSION_419_EXTENSION_NAME = "VK_EXT_extension_419";
export const EXT_EXTENSION_420_EXTENSION_NAME = "VK_EXT_extension_420";
export const VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
export const EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
export const EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
export const ARM_EXTENSION_424_EXTENSION_NAME = "VK_ARM_extension_424";
export const ARM_EXTENSION_425_EXTENSION_NAME = "VK_ARM_extension_425";
export const QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
export const NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
export const NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
export const NV_EXTENSION_429_EXTENSION_NAME = "VK_NV_extension_429";
export const NV_EXTENSION_430_EXTENSION_NAME = "VK_NV_extension_430";
export const NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
export const NV_EXTENSION_432_EXTENSION_NAME = "VK_NV_extension_432";
export const NV_EXTENSION_433_EXTENSION_NAME = "VK_NV_extension_433";
export const GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
export const KHR_EXTENSION_435_EXTENSION_NAME = "VK_KHR_extension_435";
export const NV_EXTENSION_436_EXTENSION_NAME = "VK_NV_extension_436";
export const EXT_EXTENSION_437_EXTENSION_NAME = "VK_EXT_extension_437";
export const EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
export const SEC_EXTENSION_439_EXTENSION_NAME = "VK_SEC_extension_439";
export const QCOM_EXTENSION_440_EXTENSION_NAME = "VK_QCOM_extension_440";
export const QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
export const COREAVI_EXTENSION_442_EXTENSION_NAME = "VK_COREAVI_extension_442";
export const COREAVI_EXTENSION_443_EXTENSION_NAME = "VK_COREAVI_extension_443";
export const COREAVI_EXTENSION_444_EXTENSION_NAME = "VK_COREAVI_extension_444";
export const COREAVI_EXTENSION_445_EXTENSION_NAME = "VK_COREAVI_extension_445";
export const COREAVI_EXTENSION_446_EXTENSION_NAME = "VK_COREAVI_extension_446";
export const COREAVI_EXTENSION_447_EXTENSION_NAME = "VK_COREAVI_extension_447";
export const SEC_EXTENSION_448_EXTENSION_NAME = "VK_SEC_extension_448";
export const SEC_EXTENSION_449_EXTENSION_NAME = "VK_SEC_extension_449";
export const SEC_EXTENSION_450_EXTENSION_NAME = "VK_SEC_extension_450";
export const SEC_EXTENSION_451_EXTENSION_NAME = "VK_SEC_extension_451";
export const NV_EXTENSION_452_EXTENSION_NAME = "VK_NV_extension_452";
export const ARM_EXTENSION_453_EXTENSION_NAME = "VK_ARM_extension_453";
export const GOOGLE_EXTENSION_454_EXTENSION_NAME = "VK_GOOGLE_extension_454";
export const GOOGLE_EXTENSION_455_EXTENSION_NAME = "VK_GOOGLE_extension_455";
export const EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
export const EXT_EXTENSION_457_EXTENSION_NAME = "VK_EXT_extension_457";
export const EXT_EXTENSION_458_EXTENSION_NAME = "VK_EXT_extension_458";
export const EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
export const EXT_EXTENSION_460_EXTENSION_NAME = "VK_EXT_extension_460";
export const EXT_EXTENSION_461_EXTENSION_NAME = "VK_EXT_extension_461";
export const EXT_EXTENSION_462_EXTENSION_NAME = "VK_EXT_extension_462";
export const EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
export const EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
export const NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
export const EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
export const EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
export const EXT_EXTENSION_468_EXTENSION_NAME = "VK_EXT_extension_468";
export const ANDROID_EXTENSION_469_EXTENSION_NAME = "VK_ANDROID_extension_469";
export const AMD_EXTENSION_470_EXTENSION_NAME = "VK_AMD_extension_470";
export const AMD_EXTENSION_471_EXTENSION_NAME = "VK_AMD_extension_471";
export const AMD_EXTENSION_472_EXTENSION_NAME = "VK_AMD_extension_472";
export const AMD_EXTENSION_473_EXTENSION_NAME = "VK_AMD_extension_473";
export const AMD_EXTENSION_474_EXTENSION_NAME = "VK_AMD_extension_474";
export const AMD_EXTENSION_475_EXTENSION_NAME = "VK_AMD_extension_475";
export const AMD_EXTENSION_476_EXTENSION_NAME = "VK_AMD_extension_476";
export const AMD_EXTENSION_477_EXTENSION_NAME = "VK_AMD_extension_477";
export const AMD_EXTENSION_478_EXTENSION_NAME = "VK_AMD_extension_478";
export const AMD_EXTENSION_479_EXTENSION_NAME = "VK_AMD_extension_479";
export const EXT_EXTENSION_480_EXTENSION_NAME = "VK_EXT_extension_480";
export const EXT_EXTENSION_481_EXTENSION_NAME = "VK_EXT_extension_481";
export const EXT_EXTENSION_482_EXTENSION_NAME = "VK_EXT_extension_482";
export const EXT_EXTENSION_483_EXTENSION_NAME = "VK_EXT_extension_483";
export const EXT_EXTENSION_484_EXTENSION_NAME = "VK_EXT_extension_484";
export const QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
export const SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
export const EXT_EXTENSION_487_EXTENSION_NAME = "VK_EXT_extension_487";
export const EXT_EXTENSION_488_EXTENSION_NAME = "VK_EXT_extension_488";
export const QCOM_EXTENSION_489_EXTENSION_NAME = "VK_QCOM_extension_489";
export const NV_EXTENSION_490_EXTENSION_NAME = "VK_NV_extension_490";
export const NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
export const NV_EXTENSION_492_EXTENSION_NAME = "VK_NV_extension_492";
export const NV_EXTENSION_493_EXTENSION_NAME = "VK_NV_extension_493";
export const NV_EXTENSION_494_EXTENSION_NAME = "VK_NV_extension_494";
export const EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
export const EXT_EXTENSION_496_EXTENSION_NAME = "VK_EXT_extension_496";
export const EXT_EXTENSION_497_EXTENSION_NAME = "VK_EXT_extension_497";
export const ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
export const EXT_EXTENSION_499_EXTENSION_NAME = "VK_EXT_extension_499";
export const EXT_EXTENSION_500_EXTENSION_NAME = "VK_EXT_extension_500";
export const EXT_EXTENSION_501_EXTENSION_NAME = "VK_EXT_extension_501";
export const EXT_EXTENSION_502_EXTENSION_NAME = "VK_EXT_extension_502";
export const EXT_EXTENSION_503_EXTENSION_NAME = "VK_EXT_extension_503";
export const NV_EXTENSION_504_EXTENSION_NAME = "VK_NV_extension_504";
export var StdVideoH264ChromaFormatIdc;
!function(StdVideoH264ChromaFormatIdc) {
    StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.MONOCHROME = 0] = "MONOCHROME", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.VK_420 = 1] = "VK_420", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.VK_422 = 2] = "VK_422", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.VK_444 = 3] = "VK_444", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264ChromaFormatIdc || (StdVideoH264ChromaFormatIdc = {}));
export var StdVideoH264ProfileIdc;
!function(StdVideoH264ProfileIdc) {
    StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.BASELINE = 66] = "BASELINE", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.MAIN = 77] = "MAIN", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.HIGH = 100] = "HIGH", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.HIGH_444_PREDICTIVE = 244] = "HIGH_444_PREDICTIVE", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264ProfileIdc || (StdVideoH264ProfileIdc = {}));
export var StdVideoH264LevelIdc;
!function(StdVideoH264LevelIdc) {
    StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_1_0 = 0] = "VK_1_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_1_1 = 1] = "VK_1_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_1_2 = 2] = "VK_1_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_1_3 = 3] = "VK_1_3", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_2_0 = 4] = "VK_2_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_2_1 = 5] = "VK_2_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_2_2 = 6] = "VK_2_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_3_0 = 7] = "VK_3_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_3_1 = 8] = "VK_3_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_3_2 = 9] = "VK_3_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_4_0 = 10] = "VK_4_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_4_1 = 11] = "VK_4_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_4_2 = 12] = "VK_4_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_5_0 = 13] = "VK_5_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_5_1 = 14] = "VK_5_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_5_2 = 15] = "VK_5_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_6_0 = 16] = "VK_6_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_6_1 = 17] = "VK_6_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.VK_6_2 = 18] = "VK_6_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264LevelIdc || (StdVideoH264LevelIdc = {}));
export var StdVideoH264PocType;
!function(StdVideoH264PocType) {
    StdVideoH264PocType[StdVideoH264PocType.VK_0 = 0] = "VK_0", StdVideoH264PocType[StdVideoH264PocType.VK_1 = 1] = "VK_1", StdVideoH264PocType[StdVideoH264PocType.VK_2 = 2] = "VK_2", StdVideoH264PocType[StdVideoH264PocType.INVALID = 2147483647] = "INVALID";
}(StdVideoH264PocType || (StdVideoH264PocType = {}));
export var StdVideoH264AspectRatioIdc;
!function(StdVideoH264AspectRatioIdc) {
    StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.UNSPECIFIED = 0] = "UNSPECIFIED", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.SQUARE = 1] = "SQUARE", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_12_11 = 2] = "VK_12_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_10_11 = 3] = "VK_10_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_16_11 = 4] = "VK_16_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_40_33 = 5] = "VK_40_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_24_11 = 6] = "VK_24_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_20_11 = 7] = "VK_20_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_32_11 = 8] = "VK_32_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_80_33 = 9] = "VK_80_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_18_11 = 10] = "VK_18_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_15_11 = 11] = "VK_15_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_64_33 = 12] = "VK_64_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_160_99 = 13] = "VK_160_99", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_4_3 = 14] = "VK_4_3", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_3_2 = 15] = "VK_3_2", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.VK_2_1 = 16] = "VK_2_1", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.EXTENDED_SAR = 255] = "EXTENDED_SAR", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264AspectRatioIdc || (StdVideoH264AspectRatioIdc = {}));
export var StdVideoH264WeightedBipredIdc;
!function(StdVideoH264WeightedBipredIdc) {
    StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.DEFAULT = 0] = "DEFAULT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.EXPLICIT = 1] = "EXPLICIT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.IMPLICIT = 2] = "IMPLICIT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264WeightedBipredIdc || (StdVideoH264WeightedBipredIdc = {}));
export var StdVideoH264ModificationOfPicNumsIdc;
!function(StdVideoH264ModificationOfPicNumsIdc) {
    StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.SHORT_TERM_SUBTRACT = 0] = "SHORT_TERM_SUBTRACT", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.SHORT_TERM_ADD = 1] = "SHORT_TERM_ADD", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.LONG_TERM = 2] = "LONG_TERM", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.END = 3] = "END", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264ModificationOfPicNumsIdc || (StdVideoH264ModificationOfPicNumsIdc = {}));
export var StdVideoH264MemMgmtControlOp;
!function(StdVideoH264MemMgmtControlOp) {
    StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.END = 0] = "END", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.UNMARK_SHORT_TERM = 1] = "UNMARK_SHORT_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.UNMARK_LONG_TERM = 2] = "UNMARK_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.MARK_LONG_TERM = 3] = "MARK_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.SET_MAX_LONG_TERM_INDEX = 4] = "SET_MAX_LONG_TERM_INDEX", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.UNMARK_ALL = 5] = "UNMARK_ALL", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.MARK_CURRENT_AS_LONG_TERM = 6] = "MARK_CURRENT_AS_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.INVALID = 2147483647] = "INVALID";
}(StdVideoH264MemMgmtControlOp || (StdVideoH264MemMgmtControlOp = {}));
export var StdVideoH264CabacInitIdc;
!function(StdVideoH264CabacInitIdc) {
    StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.VK_0 = 0] = "VK_0", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.VK_1 = 1] = "VK_1", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.VK_2 = 2] = "VK_2", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264CabacInitIdc || (StdVideoH264CabacInitIdc = {}));
export var StdVideoH264DisableDeblockingFilterIdc;
!function(StdVideoH264DisableDeblockingFilterIdc) {
    StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.DISABLED = 0] = "DISABLED", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.ENABLED = 1] = "ENABLED", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.PARTIAL = 2] = "PARTIAL", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH264DisableDeblockingFilterIdc || (StdVideoH264DisableDeblockingFilterIdc = {}));
export var StdVideoH264SliceType;
!function(StdVideoH264SliceType) {
    StdVideoH264SliceType[StdVideoH264SliceType.P = 0] = "P", StdVideoH264SliceType[StdVideoH264SliceType.B = 1] = "B", StdVideoH264SliceType[StdVideoH264SliceType.I = 2] = "I", StdVideoH264SliceType[StdVideoH264SliceType.INVALID = 2147483647] = "INVALID";
}(StdVideoH264SliceType || (StdVideoH264SliceType = {}));
export var StdVideoH264PictureType;
!function(StdVideoH264PictureType) {
    StdVideoH264PictureType[StdVideoH264PictureType.P = 0] = "P", StdVideoH264PictureType[StdVideoH264PictureType.B = 1] = "B", StdVideoH264PictureType[StdVideoH264PictureType.I = 2] = "I", StdVideoH264PictureType[StdVideoH264PictureType.IDR = 5] = "IDR", StdVideoH264PictureType[StdVideoH264PictureType.INVALID = 2147483647] = "INVALID";
}(StdVideoH264PictureType || (StdVideoH264PictureType = {}));
export var StdVideoH264NonVclNaluType;
!function(StdVideoH264NonVclNaluType) {
    StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.SPS = 0] = "SPS", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.PPS = 1] = "PPS", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.AUD = 2] = "AUD", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.PREFIX = 3] = "PREFIX", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.END_OF_SEQUENCE = 4] = "END_OF_SEQUENCE", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.END_OF_STREAM = 5] = "END_OF_STREAM", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.PRECODED = 6] = "PRECODED", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.INVALID = 2147483647] = "INVALID";
}(StdVideoH264NonVclNaluType || (StdVideoH264NonVclNaluType = {}));
export var StdVideoDecodeH264FieldOrderCount;
!function(StdVideoDecodeH264FieldOrderCount) {
    StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.TOP = 0] = "TOP", StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.BOTTOM = 1] = "BOTTOM", StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.INVALID = 2147483647] = "INVALID";
}(StdVideoDecodeH264FieldOrderCount || (StdVideoDecodeH264FieldOrderCount = {}));
export var StdVideoH265ChromaFormatIdc;
!function(StdVideoH265ChromaFormatIdc) {
    StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.MONOCHROME = 0] = "MONOCHROME", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.VK_420 = 1] = "VK_420", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.VK_422 = 2] = "VK_422", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.VK_444 = 3] = "VK_444", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH265ChromaFormatIdc || (StdVideoH265ChromaFormatIdc = {}));
export var StdVideoH265ProfileIdc;
!function(StdVideoH265ProfileIdc) {
    StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.MAIN = 1] = "MAIN", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.MAIN_10 = 2] = "MAIN_10", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.MAIN_STILL_PICTURE = 3] = "MAIN_STILL_PICTURE", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.FORMAT_RANGE_EXTENSIONS = 4] = "FORMAT_RANGE_EXTENSIONS", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.SCC_EXTENSIONS = 9] = "SCC_EXTENSIONS", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH265ProfileIdc || (StdVideoH265ProfileIdc = {}));
export var StdVideoH265LevelIdc;
!function(StdVideoH265LevelIdc) {
    StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_1_0 = 0] = "VK_1_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_2_0 = 1] = "VK_2_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_2_1 = 2] = "VK_2_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_3_0 = 3] = "VK_3_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_3_1 = 4] = "VK_3_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_4_0 = 5] = "VK_4_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_4_1 = 6] = "VK_4_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_5_0 = 7] = "VK_5_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_5_1 = 8] = "VK_5_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_5_2 = 9] = "VK_5_2", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_6_0 = 10] = "VK_6_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_6_1 = 11] = "VK_6_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.VK_6_2 = 12] = "VK_6_2", StdVideoH265LevelIdc[StdVideoH265LevelIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH265LevelIdc || (StdVideoH265LevelIdc = {}));
export var StdVideoH265SliceType;
!function(StdVideoH265SliceType) {
    StdVideoH265SliceType[StdVideoH265SliceType.B = 0] = "B", StdVideoH265SliceType[StdVideoH265SliceType.P = 1] = "P", StdVideoH265SliceType[StdVideoH265SliceType.I = 2] = "I", StdVideoH265SliceType[StdVideoH265SliceType.INVALID = 2147483647] = "INVALID";
}(StdVideoH265SliceType || (StdVideoH265SliceType = {}));
export var StdVideoH265PictureType;
!function(StdVideoH265PictureType) {
    StdVideoH265PictureType[StdVideoH265PictureType.P = 0] = "P", StdVideoH265PictureType[StdVideoH265PictureType.B = 1] = "B", StdVideoH265PictureType[StdVideoH265PictureType.I = 2] = "I", StdVideoH265PictureType[StdVideoH265PictureType.IDR = 3] = "IDR", StdVideoH265PictureType[StdVideoH265PictureType.INVALID = 2147483647] = "INVALID";
}(StdVideoH265PictureType || (StdVideoH265PictureType = {}));
export var StdVideoH265AspectRatioIdc;
!function(StdVideoH265AspectRatioIdc) {
    StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.UNSPECIFIED = 0] = "UNSPECIFIED", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.SQUARE = 1] = "SQUARE", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_12_11 = 2] = "VK_12_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_10_11 = 3] = "VK_10_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_16_11 = 4] = "VK_16_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_40_33 = 5] = "VK_40_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_24_11 = 6] = "VK_24_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_20_11 = 7] = "VK_20_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_32_11 = 8] = "VK_32_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_80_33 = 9] = "VK_80_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_18_11 = 10] = "VK_18_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_15_11 = 11] = "VK_15_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_64_33 = 12] = "VK_64_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_160_99 = 13] = "VK_160_99", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_4_3 = 14] = "VK_4_3", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_3_2 = 15] = "VK_3_2", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.VK_2_1 = 16] = "VK_2_1", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.EXTENDED_SAR = 255] = "EXTENDED_SAR", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.INVALID = 2147483647] = "INVALID";
}(StdVideoH265AspectRatioIdc || (StdVideoH265AspectRatioIdc = {}));
export var ImageLayout;
!function(ImageLayout) {
    ImageLayout[ImageLayout.UNDEFINED = 0] = "UNDEFINED", ImageLayout[ImageLayout.GENERAL = 1] = "GENERAL", ImageLayout[ImageLayout.COLOR_ATTACHMENT_OPTIMAL = 2] = "COLOR_ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4] = "DEPTH_STENCIL_READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.SHADER_READ_ONLY_OPTIMAL = 5] = "SHADER_READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.TRANSFER_SRC_OPTIMAL = 6] = "TRANSFER_SRC_OPTIMAL", ImageLayout[ImageLayout.TRANSFER_DST_OPTIMAL = 7] = "TRANSFER_DST_OPTIMAL", ImageLayout[ImageLayout.PREINITIALIZED = 8] = "PREINITIALIZED", ImageLayout[ImageLayout.DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000] = "DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001] = "DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.DEPTH_ATTACHMENT_OPTIMAL = 1000241000] = "DEPTH_ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.DEPTH_READ_ONLY_OPTIMAL = 1000241001] = "DEPTH_READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.STENCIL_ATTACHMENT_OPTIMAL = 1000241002] = "STENCIL_ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.STENCIL_READ_ONLY_OPTIMAL = 1000241003] = "STENCIL_READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.READ_ONLY_OPTIMAL = 1000314000] = "READ_ONLY_OPTIMAL", ImageLayout[ImageLayout.ATTACHMENT_OPTIMAL = 1000314001] = "ATTACHMENT_OPTIMAL", ImageLayout[ImageLayout.PRESENT_SRC_KHR = 1000001002] = "PRESENT_SRC_KHR", ImageLayout[ImageLayout.VIDEO_DECODE_DST_KHR = 1000024000] = "VIDEO_DECODE_DST_KHR", ImageLayout[ImageLayout.VIDEO_DECODE_SRC_KHR = 1000024001] = "VIDEO_DECODE_SRC_KHR", ImageLayout[ImageLayout.VIDEO_DECODE_DPB_KHR = 1000024002] = "VIDEO_DECODE_DPB_KHR", ImageLayout[ImageLayout.SHARED_PRESENT_KHR = 1000111000] = "SHARED_PRESENT_KHR", ImageLayout[ImageLayout.DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000] = "DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR", ImageLayout[ImageLayout.DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001] = "DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR", ImageLayout[ImageLayout.SHADING_RATE_OPTIMAL_NV = 1000164003] = "SHADING_RATE_OPTIMAL_NV", ImageLayout[ImageLayout.FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000] = "FRAGMENT_DENSITY_MAP_OPTIMAL_EXT", ImageLayout[ImageLayout.FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003] = "FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR", ImageLayout[ImageLayout.DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000] = "DEPTH_ATTACHMENT_OPTIMAL_KHR", ImageLayout[ImageLayout.DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001] = "DEPTH_READ_ONLY_OPTIMAL_KHR", ImageLayout[ImageLayout.STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002] = "STENCIL_ATTACHMENT_OPTIMAL_KHR", ImageLayout[ImageLayout.STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003] = "STENCIL_READ_ONLY_OPTIMAL_KHR", ImageLayout[ImageLayout.VIDEO_ENCODE_DST_KHR = 1000299000] = "VIDEO_ENCODE_DST_KHR", ImageLayout[ImageLayout.VIDEO_ENCODE_SRC_KHR = 1000299001] = "VIDEO_ENCODE_SRC_KHR", ImageLayout[ImageLayout.VIDEO_ENCODE_DPB_KHR = 1000299002] = "VIDEO_ENCODE_DPB_KHR", ImageLayout[ImageLayout.READ_ONLY_OPTIMAL_KHR = 1000314000] = "READ_ONLY_OPTIMAL_KHR", ImageLayout[ImageLayout.ATTACHMENT_OPTIMAL_KHR = 1000314001] = "ATTACHMENT_OPTIMAL_KHR", ImageLayout[ImageLayout.ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000] = "ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT";
}(ImageLayout || (ImageLayout = {}));
export var AttachmentLoadOp;
!function(AttachmentLoadOp) {
    AttachmentLoadOp[AttachmentLoadOp.LOAD = 0] = "LOAD", AttachmentLoadOp[AttachmentLoadOp.CLEAR = 1] = "CLEAR", AttachmentLoadOp[AttachmentLoadOp.DONT_CARE = 2] = "DONT_CARE", AttachmentLoadOp[AttachmentLoadOp.NONE_EXT = 1000400000] = "NONE_EXT";
}(AttachmentLoadOp || (AttachmentLoadOp = {}));
export var AttachmentStoreOp;
!function(AttachmentStoreOp) {
    AttachmentStoreOp[AttachmentStoreOp.STORE = 0] = "STORE", AttachmentStoreOp[AttachmentStoreOp.DONT_CARE = 1] = "DONT_CARE", AttachmentStoreOp[AttachmentStoreOp.NONE = 1000301000] = "NONE", AttachmentStoreOp[AttachmentStoreOp.NONE_KHR = 1000301000] = "NONE_KHR", AttachmentStoreOp[AttachmentStoreOp.NONE_QCOM = 1000301000] = "NONE_QCOM", AttachmentStoreOp[AttachmentStoreOp.NONE_EXT = 1000301000] = "NONE_EXT";
}(AttachmentStoreOp || (AttachmentStoreOp = {}));
export var ImageType;
!function(ImageType) {
    ImageType[ImageType.VK_1D = 0] = "VK_1D", ImageType[ImageType.VK_2D = 1] = "VK_2D", ImageType[ImageType.VK_3D = 2] = "VK_3D";
}(ImageType || (ImageType = {}));
export var ImageTiling;
!function(ImageTiling) {
    ImageTiling[ImageTiling.OPTIMAL = 0] = "OPTIMAL", ImageTiling[ImageTiling.LINEAR = 1] = "LINEAR", ImageTiling[ImageTiling.DRM_FORMAT_MODIFIER_EXT = 1000158000] = "DRM_FORMAT_MODIFIER_EXT";
}(ImageTiling || (ImageTiling = {}));
export var ImageViewType;
!function(ImageViewType) {
    ImageViewType[ImageViewType.VK_1D = 0] = "VK_1D", ImageViewType[ImageViewType.VK_2D = 1] = "VK_2D", ImageViewType[ImageViewType.VK_3D = 2] = "VK_3D", ImageViewType[ImageViewType.CUBE = 3] = "CUBE", ImageViewType[ImageViewType.VK_1D_ARRAY = 4] = "VK_1D_ARRAY", ImageViewType[ImageViewType.VK_2D_ARRAY = 5] = "VK_2D_ARRAY", ImageViewType[ImageViewType.CUBE_ARRAY = 6] = "CUBE_ARRAY";
}(ImageViewType || (ImageViewType = {}));
export var CommandBufferLevel;
!function(CommandBufferLevel) {
    CommandBufferLevel[CommandBufferLevel.PRIMARY = 0] = "PRIMARY", CommandBufferLevel[CommandBufferLevel.SECONDARY = 1] = "SECONDARY";
}(CommandBufferLevel || (CommandBufferLevel = {}));
export var ComponentSwizzle;
!function(ComponentSwizzle) {
    ComponentSwizzle[ComponentSwizzle.IDENTITY = 0] = "IDENTITY", ComponentSwizzle[ComponentSwizzle.ZERO = 1] = "ZERO", ComponentSwizzle[ComponentSwizzle.ONE = 2] = "ONE", ComponentSwizzle[ComponentSwizzle.R = 3] = "R", ComponentSwizzle[ComponentSwizzle.G = 4] = "G", ComponentSwizzle[ComponentSwizzle.B = 5] = "B", ComponentSwizzle[ComponentSwizzle.A = 6] = "A";
}(ComponentSwizzle || (ComponentSwizzle = {}));
export var DescriptorType;
!function(DescriptorType) {
    DescriptorType[DescriptorType.SAMPLER = 0] = "SAMPLER", DescriptorType[DescriptorType.COMBINED_IMAGE_SAMPLER = 1] = "COMBINED_IMAGE_SAMPLER", DescriptorType[DescriptorType.SAMPLED_IMAGE = 2] = "SAMPLED_IMAGE", DescriptorType[DescriptorType.STORAGE_IMAGE = 3] = "STORAGE_IMAGE", DescriptorType[DescriptorType.UNIFORM_TEXEL_BUFFER = 4] = "UNIFORM_TEXEL_BUFFER", DescriptorType[DescriptorType.STORAGE_TEXEL_BUFFER = 5] = "STORAGE_TEXEL_BUFFER", DescriptorType[DescriptorType.UNIFORM_BUFFER = 6] = "UNIFORM_BUFFER", DescriptorType[DescriptorType.STORAGE_BUFFER = 7] = "STORAGE_BUFFER", DescriptorType[DescriptorType.UNIFORM_BUFFER_DYNAMIC = 8] = "UNIFORM_BUFFER_DYNAMIC", DescriptorType[DescriptorType.STORAGE_BUFFER_DYNAMIC = 9] = "STORAGE_BUFFER_DYNAMIC", DescriptorType[DescriptorType.INPUT_ATTACHMENT = 10] = "INPUT_ATTACHMENT", DescriptorType[DescriptorType.INLINE_UNIFORM_BLOCK = 1000138000] = "INLINE_UNIFORM_BLOCK", DescriptorType[DescriptorType.INLINE_UNIFORM_BLOCK_EXT = 1000138000] = "INLINE_UNIFORM_BLOCK_EXT", DescriptorType[DescriptorType.ACCELERATION_STRUCTURE_KHR = 1000150000] = "ACCELERATION_STRUCTURE_KHR", DescriptorType[DescriptorType.ACCELERATION_STRUCTURE_NV = 1000165000] = "ACCELERATION_STRUCTURE_NV", DescriptorType[DescriptorType.MUTABLE_VALVE = 1000351000] = "MUTABLE_VALVE", DescriptorType[DescriptorType.SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000] = "SAMPLE_WEIGHT_IMAGE_QCOM", DescriptorType[DescriptorType.BLOCK_MATCH_IMAGE_QCOM = 1000440001] = "BLOCK_MATCH_IMAGE_QCOM", DescriptorType[DescriptorType.MUTABLE_EXT = 1000351000] = "MUTABLE_EXT";
}(DescriptorType || (DescriptorType = {}));
export var QueryType;
!function(QueryType) {
    QueryType[QueryType.OCCLUSION = 0] = "OCCLUSION", QueryType[QueryType.PIPELINE_STATISTICS = 1] = "PIPELINE_STATISTICS", QueryType[QueryType.TIMESTAMP = 2] = "TIMESTAMP", QueryType[QueryType.RESULT_STATUS_ONLY_KHR = 1000023000] = "RESULT_STATUS_ONLY_KHR", QueryType[QueryType.TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004] = "TRANSFORM_FEEDBACK_STREAM_EXT", QueryType[QueryType.PERFORMANCE_QUERY_KHR = 1000116000] = "PERFORMANCE_QUERY_KHR", QueryType[QueryType.ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000] = "ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR", QueryType[QueryType.ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001] = "ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR", QueryType[QueryType.ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000] = "ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV", QueryType[QueryType.PERFORMANCE_QUERY_INTEL = 1000210000] = "PERFORMANCE_QUERY_INTEL", QueryType[QueryType.VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000] = "VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR", QueryType[QueryType.MESH_PRIMITIVES_GENERATED_EXT = 1000328000] = "MESH_PRIMITIVES_GENERATED_EXT", QueryType[QueryType.PRIMITIVES_GENERATED_EXT = 1000382000] = "PRIMITIVES_GENERATED_EXT", QueryType[QueryType.ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000] = "ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR", QueryType[QueryType.ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001] = "ACCELERATION_STRUCTURE_SIZE_KHR", QueryType[QueryType.MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000] = "MICROMAP_SERIALIZATION_SIZE_EXT", QueryType[QueryType.MICROMAP_COMPACTED_SIZE_EXT = 1000396001] = "MICROMAP_COMPACTED_SIZE_EXT";
}(QueryType || (QueryType = {}));
export var BorderColor;
!function(BorderColor) {
    BorderColor[BorderColor.FLOAT_TRANSPARENT_BLACK = 0] = "FLOAT_TRANSPARENT_BLACK", BorderColor[BorderColor.INT_TRANSPARENT_BLACK = 1] = "INT_TRANSPARENT_BLACK", BorderColor[BorderColor.FLOAT_OPAQUE_BLACK = 2] = "FLOAT_OPAQUE_BLACK", BorderColor[BorderColor.INT_OPAQUE_BLACK = 3] = "INT_OPAQUE_BLACK", BorderColor[BorderColor.FLOAT_OPAQUE_WHITE = 4] = "FLOAT_OPAQUE_WHITE", BorderColor[BorderColor.INT_OPAQUE_WHITE = 5] = "INT_OPAQUE_WHITE", BorderColor[BorderColor.FLOAT_CUSTOM_EXT = 1000287003] = "FLOAT_CUSTOM_EXT", BorderColor[BorderColor.INT_CUSTOM_EXT = 1000287004] = "INT_CUSTOM_EXT";
}(BorderColor || (BorderColor = {}));
export var PipelineBindPoint;
!function(PipelineBindPoint) {
    PipelineBindPoint[PipelineBindPoint.GRAPHICS = 0] = "GRAPHICS", PipelineBindPoint[PipelineBindPoint.COMPUTE = 1] = "COMPUTE", PipelineBindPoint[PipelineBindPoint.RAY_TRACING_KHR = 1000165000] = "RAY_TRACING_KHR", PipelineBindPoint[PipelineBindPoint.RAY_TRACING_NV = 1000165000] = "RAY_TRACING_NV", PipelineBindPoint[PipelineBindPoint.SUBPASS_SHADING_HUAWEI = 1000369003] = "SUBPASS_SHADING_HUAWEI";
}(PipelineBindPoint || (PipelineBindPoint = {}));
export var PipelineCacheHeaderVersion;
!function(PipelineCacheHeaderVersion) {
    PipelineCacheHeaderVersion[PipelineCacheHeaderVersion.ONE = 1] = "ONE";
}(PipelineCacheHeaderVersion || (PipelineCacheHeaderVersion = {}));
export var PipelineCacheCreateFlagBits;
!function(PipelineCacheCreateFlagBits) {
    PipelineCacheCreateFlagBits[PipelineCacheCreateFlagBits.EXTERNALLY_SYNCHRONIZED = 1] = "EXTERNALLY_SYNCHRONIZED", PipelineCacheCreateFlagBits[PipelineCacheCreateFlagBits.RESERVED_1_BIT_EXT = 2] = "RESERVED_1_BIT_EXT", PipelineCacheCreateFlagBits[PipelineCacheCreateFlagBits.EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1] = "EXTERNALLY_SYNCHRONIZED_BIT_EXT", PipelineCacheCreateFlagBits[PipelineCacheCreateFlagBits.RESERVED_1_BIT_KHR = 2] = "RESERVED_1_BIT_KHR", PipelineCacheCreateFlagBits[PipelineCacheCreateFlagBits.RESERVED_2_BIT_KHR = 4] = "RESERVED_2_BIT_KHR";
}(PipelineCacheCreateFlagBits || (PipelineCacheCreateFlagBits = {}));
export var PrimitiveTopology;
!function(PrimitiveTopology) {
    PrimitiveTopology[PrimitiveTopology.POINT_LIST = 0] = "POINT_LIST", PrimitiveTopology[PrimitiveTopology.LINE_LIST = 1] = "LINE_LIST", PrimitiveTopology[PrimitiveTopology.LINE_STRIP = 2] = "LINE_STRIP", PrimitiveTopology[PrimitiveTopology.TRIANGLE_LIST = 3] = "TRIANGLE_LIST", PrimitiveTopology[PrimitiveTopology.TRIANGLE_STRIP = 4] = "TRIANGLE_STRIP", PrimitiveTopology[PrimitiveTopology.TRIANGLE_FAN = 5] = "TRIANGLE_FAN", PrimitiveTopology[PrimitiveTopology.LINE_LIST_WITH_ADJACENCY = 6] = "LINE_LIST_WITH_ADJACENCY", PrimitiveTopology[PrimitiveTopology.LINE_STRIP_WITH_ADJACENCY = 7] = "LINE_STRIP_WITH_ADJACENCY", PrimitiveTopology[PrimitiveTopology.TRIANGLE_LIST_WITH_ADJACENCY = 8] = "TRIANGLE_LIST_WITH_ADJACENCY", PrimitiveTopology[PrimitiveTopology.TRIANGLE_STRIP_WITH_ADJACENCY = 9] = "TRIANGLE_STRIP_WITH_ADJACENCY", PrimitiveTopology[PrimitiveTopology.PATCH_LIST = 10] = "PATCH_LIST";
}(PrimitiveTopology || (PrimitiveTopology = {}));
export var SharingMode;
!function(SharingMode) {
    SharingMode[SharingMode.EXCLUSIVE = 0] = "EXCLUSIVE", SharingMode[SharingMode.CONCURRENT = 1] = "CONCURRENT";
}(SharingMode || (SharingMode = {}));
export var IndexType;
!function(IndexType) {
    IndexType[IndexType.UINT16 = 0] = "UINT16", IndexType[IndexType.UINT32 = 1] = "UINT32", IndexType[IndexType.NONE_KHR = 1000165000] = "NONE_KHR", IndexType[IndexType.NONE_NV = 1000165000] = "NONE_NV", IndexType[IndexType.UINT8_EXT = 1000265000] = "UINT8_EXT";
}(IndexType || (IndexType = {}));
export var Filter;
!function(Filter) {
    Filter[Filter.NEAREST = 0] = "NEAREST", Filter[Filter.LINEAR = 1] = "LINEAR", Filter[Filter.CUBIC_IMG = 1000015000] = "CUBIC_IMG", Filter[Filter.CUBIC_EXT = 1000015000] = "CUBIC_EXT";
}(Filter || (Filter = {}));
export var SamplerMipmapMode;
!function(SamplerMipmapMode) {
    SamplerMipmapMode[SamplerMipmapMode.NEAREST = 0] = "NEAREST", SamplerMipmapMode[SamplerMipmapMode.LINEAR = 1] = "LINEAR";
}(SamplerMipmapMode || (SamplerMipmapMode = {}));
export var SamplerAddressMode;
!function(SamplerAddressMode) {
    SamplerAddressMode[SamplerAddressMode.REPEAT = 0] = "REPEAT", SamplerAddressMode[SamplerAddressMode.MIRRORED_REPEAT = 1] = "MIRRORED_REPEAT", SamplerAddressMode[SamplerAddressMode.CLAMP_TO_EDGE = 2] = "CLAMP_TO_EDGE", SamplerAddressMode[SamplerAddressMode.CLAMP_TO_BORDER = 3] = "CLAMP_TO_BORDER", SamplerAddressMode[SamplerAddressMode.MIRROR_CLAMP_TO_EDGE = 4] = "MIRROR_CLAMP_TO_EDGE", SamplerAddressMode[SamplerAddressMode.MIRROR_CLAMP_TO_EDGE_KHR = 4] = "MIRROR_CLAMP_TO_EDGE_KHR";
}(SamplerAddressMode || (SamplerAddressMode = {}));
export var CompareOp;
!function(CompareOp) {
    CompareOp[CompareOp.NEVER = 0] = "NEVER", CompareOp[CompareOp.LESS = 1] = "LESS", CompareOp[CompareOp.EQUAL = 2] = "EQUAL", CompareOp[CompareOp.LESS_OR_EQUAL = 3] = "LESS_OR_EQUAL", CompareOp[CompareOp.GREATER = 4] = "GREATER", CompareOp[CompareOp.NOT_EQUAL = 5] = "NOT_EQUAL", CompareOp[CompareOp.GREATER_OR_EQUAL = 6] = "GREATER_OR_EQUAL", CompareOp[CompareOp.ALWAYS = 7] = "ALWAYS";
}(CompareOp || (CompareOp = {}));
export var PolygonMode;
!function(PolygonMode) {
    PolygonMode[PolygonMode.FILL = 0] = "FILL", PolygonMode[PolygonMode.LINE = 1] = "LINE", PolygonMode[PolygonMode.POINT = 2] = "POINT", PolygonMode[PolygonMode.FILL_RECTANGLE_NV = 1000153000] = "FILL_RECTANGLE_NV";
}(PolygonMode || (PolygonMode = {}));
export var FrontFace;
!function(FrontFace) {
    FrontFace[FrontFace.COUNTER_CLOCKWISE = 0] = "COUNTER_CLOCKWISE", FrontFace[FrontFace.CLOCKWISE = 1] = "CLOCKWISE";
}(FrontFace || (FrontFace = {}));
export var BlendFactor;
!function(BlendFactor) {
    BlendFactor[BlendFactor.ZERO = 0] = "ZERO", BlendFactor[BlendFactor.ONE = 1] = "ONE", BlendFactor[BlendFactor.SRC_COLOR = 2] = "SRC_COLOR", BlendFactor[BlendFactor.ONE_MINUS_SRC_COLOR = 3] = "ONE_MINUS_SRC_COLOR", BlendFactor[BlendFactor.DST_COLOR = 4] = "DST_COLOR", BlendFactor[BlendFactor.ONE_MINUS_DST_COLOR = 5] = "ONE_MINUS_DST_COLOR", BlendFactor[BlendFactor.SRC_ALPHA = 6] = "SRC_ALPHA", BlendFactor[BlendFactor.ONE_MINUS_SRC_ALPHA = 7] = "ONE_MINUS_SRC_ALPHA", BlendFactor[BlendFactor.DST_ALPHA = 8] = "DST_ALPHA", BlendFactor[BlendFactor.ONE_MINUS_DST_ALPHA = 9] = "ONE_MINUS_DST_ALPHA", BlendFactor[BlendFactor.CONSTANT_COLOR = 10] = "CONSTANT_COLOR", BlendFactor[BlendFactor.ONE_MINUS_CONSTANT_COLOR = 11] = "ONE_MINUS_CONSTANT_COLOR", BlendFactor[BlendFactor.CONSTANT_ALPHA = 12] = "CONSTANT_ALPHA", BlendFactor[BlendFactor.ONE_MINUS_CONSTANT_ALPHA = 13] = "ONE_MINUS_CONSTANT_ALPHA", BlendFactor[BlendFactor.SRC_ALPHA_SATURATE = 14] = "SRC_ALPHA_SATURATE", BlendFactor[BlendFactor.SRC1_COLOR = 15] = "SRC1_COLOR", BlendFactor[BlendFactor.ONE_MINUS_SRC1_COLOR = 16] = "ONE_MINUS_SRC1_COLOR", BlendFactor[BlendFactor.SRC1_ALPHA = 17] = "SRC1_ALPHA", BlendFactor[BlendFactor.ONE_MINUS_SRC1_ALPHA = 18] = "ONE_MINUS_SRC1_ALPHA";
}(BlendFactor || (BlendFactor = {}));
export var BlendOp;
!function(BlendOp) {
    BlendOp[BlendOp.ADD = 0] = "ADD", BlendOp[BlendOp.SUBTRACT = 1] = "SUBTRACT", BlendOp[BlendOp.REVERSE_SUBTRACT = 2] = "REVERSE_SUBTRACT", BlendOp[BlendOp.MIN = 3] = "MIN", BlendOp[BlendOp.MAX = 4] = "MAX", BlendOp[BlendOp.ZERO_EXT = 1000148000] = "ZERO_EXT", BlendOp[BlendOp.SRC_EXT = 1000148001] = "SRC_EXT", BlendOp[BlendOp.DST_EXT = 1000148002] = "DST_EXT", BlendOp[BlendOp.SRC_OVER_EXT = 1000148003] = "SRC_OVER_EXT", BlendOp[BlendOp.DST_OVER_EXT = 1000148004] = "DST_OVER_EXT", BlendOp[BlendOp.SRC_IN_EXT = 1000148005] = "SRC_IN_EXT", BlendOp[BlendOp.DST_IN_EXT = 1000148006] = "DST_IN_EXT", BlendOp[BlendOp.SRC_OUT_EXT = 1000148007] = "SRC_OUT_EXT", BlendOp[BlendOp.DST_OUT_EXT = 1000148008] = "DST_OUT_EXT", BlendOp[BlendOp.SRC_ATOP_EXT = 1000148009] = "SRC_ATOP_EXT", BlendOp[BlendOp.DST_ATOP_EXT = 1000148010] = "DST_ATOP_EXT", BlendOp[BlendOp.XOR_EXT = 1000148011] = "XOR_EXT", BlendOp[BlendOp.MULTIPLY_EXT = 1000148012] = "MULTIPLY_EXT", BlendOp[BlendOp.SCREEN_EXT = 1000148013] = "SCREEN_EXT", BlendOp[BlendOp.OVERLAY_EXT = 1000148014] = "OVERLAY_EXT", BlendOp[BlendOp.DARKEN_EXT = 1000148015] = "DARKEN_EXT", BlendOp[BlendOp.LIGHTEN_EXT = 1000148016] = "LIGHTEN_EXT", BlendOp[BlendOp.COLORDODGE_EXT = 1000148017] = "COLORDODGE_EXT", BlendOp[BlendOp.COLORBURN_EXT = 1000148018] = "COLORBURN_EXT", BlendOp[BlendOp.HARDLIGHT_EXT = 1000148019] = "HARDLIGHT_EXT", BlendOp[BlendOp.SOFTLIGHT_EXT = 1000148020] = "SOFTLIGHT_EXT", BlendOp[BlendOp.DIFFERENCE_EXT = 1000148021] = "DIFFERENCE_EXT", BlendOp[BlendOp.EXCLUSION_EXT = 1000148022] = "EXCLUSION_EXT", BlendOp[BlendOp.INVERT_EXT = 1000148023] = "INVERT_EXT", BlendOp[BlendOp.INVERT_RGB_EXT = 1000148024] = "INVERT_RGB_EXT", BlendOp[BlendOp.LINEARDODGE_EXT = 1000148025] = "LINEARDODGE_EXT", BlendOp[BlendOp.LINEARBURN_EXT = 1000148026] = "LINEARBURN_EXT", BlendOp[BlendOp.VIVIDLIGHT_EXT = 1000148027] = "VIVIDLIGHT_EXT", BlendOp[BlendOp.LINEARLIGHT_EXT = 1000148028] = "LINEARLIGHT_EXT", BlendOp[BlendOp.PINLIGHT_EXT = 1000148029] = "PINLIGHT_EXT", BlendOp[BlendOp.HARDMIX_EXT = 1000148030] = "HARDMIX_EXT", BlendOp[BlendOp.HSL_HUE_EXT = 1000148031] = "HSL_HUE_EXT", BlendOp[BlendOp.HSL_SATURATION_EXT = 1000148032] = "HSL_SATURATION_EXT", BlendOp[BlendOp.HSL_COLOR_EXT = 1000148033] = "HSL_COLOR_EXT", BlendOp[BlendOp.HSL_LUMINOSITY_EXT = 1000148034] = "HSL_LUMINOSITY_EXT", BlendOp[BlendOp.PLUS_EXT = 1000148035] = "PLUS_EXT", BlendOp[BlendOp.PLUS_CLAMPED_EXT = 1000148036] = "PLUS_CLAMPED_EXT", BlendOp[BlendOp.PLUS_CLAMPED_ALPHA_EXT = 1000148037] = "PLUS_CLAMPED_ALPHA_EXT", BlendOp[BlendOp.PLUS_DARKER_EXT = 1000148038] = "PLUS_DARKER_EXT", BlendOp[BlendOp.MINUS_EXT = 1000148039] = "MINUS_EXT", BlendOp[BlendOp.MINUS_CLAMPED_EXT = 1000148040] = "MINUS_CLAMPED_EXT", BlendOp[BlendOp.CONTRAST_EXT = 1000148041] = "CONTRAST_EXT", BlendOp[BlendOp.INVERT_OVG_EXT = 1000148042] = "INVERT_OVG_EXT", BlendOp[BlendOp.RED_EXT = 1000148043] = "RED_EXT", BlendOp[BlendOp.GREEN_EXT = 1000148044] = "GREEN_EXT", BlendOp[BlendOp.BLUE_EXT = 1000148045] = "BLUE_EXT";
}(BlendOp || (BlendOp = {}));
export var StencilOp;
!function(StencilOp) {
    StencilOp[StencilOp.KEEP = 0] = "KEEP", StencilOp[StencilOp.ZERO = 1] = "ZERO", StencilOp[StencilOp.REPLACE = 2] = "REPLACE", StencilOp[StencilOp.INCREMENT_AND_CLAMP = 3] = "INCREMENT_AND_CLAMP", StencilOp[StencilOp.DECREMENT_AND_CLAMP = 4] = "DECREMENT_AND_CLAMP", StencilOp[StencilOp.INVERT = 5] = "INVERT", StencilOp[StencilOp.INCREMENT_AND_WRAP = 6] = "INCREMENT_AND_WRAP", StencilOp[StencilOp.DECREMENT_AND_WRAP = 7] = "DECREMENT_AND_WRAP";
}(StencilOp || (StencilOp = {}));
export var LogicOp;
!function(LogicOp) {
    LogicOp[LogicOp.CLEAR = 0] = "CLEAR", LogicOp[LogicOp.AND = 1] = "AND", LogicOp[LogicOp.AND_REVERSE = 2] = "AND_REVERSE", LogicOp[LogicOp.COPY = 3] = "COPY", LogicOp[LogicOp.AND_INVERTED = 4] = "AND_INVERTED", LogicOp[LogicOp.NO_OP = 5] = "NO_OP", LogicOp[LogicOp.XOR = 6] = "XOR", LogicOp[LogicOp.OR = 7] = "OR", LogicOp[LogicOp.NOR = 8] = "NOR", LogicOp[LogicOp.EQUIVALENT = 9] = "EQUIVALENT", LogicOp[LogicOp.INVERT = 10] = "INVERT", LogicOp[LogicOp.OR_REVERSE = 11] = "OR_REVERSE", LogicOp[LogicOp.COPY_INVERTED = 12] = "COPY_INVERTED", LogicOp[LogicOp.OR_INVERTED = 13] = "OR_INVERTED", LogicOp[LogicOp.NAND = 14] = "NAND", LogicOp[LogicOp.SET = 15] = "SET";
}(LogicOp || (LogicOp = {}));
export var InternalAllocationType;
!function(InternalAllocationType) {
    InternalAllocationType[InternalAllocationType.EXECUTABLE = 0] = "EXECUTABLE";
}(InternalAllocationType || (InternalAllocationType = {}));
export var SystemAllocationScope;
!function(SystemAllocationScope) {
    SystemAllocationScope[SystemAllocationScope.COMMAND = 0] = "COMMAND", SystemAllocationScope[SystemAllocationScope.OBJECT = 1] = "OBJECT", SystemAllocationScope[SystemAllocationScope.CACHE = 2] = "CACHE", SystemAllocationScope[SystemAllocationScope.DEVICE = 3] = "DEVICE", SystemAllocationScope[SystemAllocationScope.INSTANCE = 4] = "INSTANCE";
}(SystemAllocationScope || (SystemAllocationScope = {}));
export var PhysicalDeviceType;
!function(PhysicalDeviceType) {
    PhysicalDeviceType[PhysicalDeviceType.OTHER = 0] = "OTHER", PhysicalDeviceType[PhysicalDeviceType.INTEGRATED_GPU = 1] = "INTEGRATED_GPU", PhysicalDeviceType[PhysicalDeviceType.DISCRETE_GPU = 2] = "DISCRETE_GPU", PhysicalDeviceType[PhysicalDeviceType.VIRTUAL_GPU = 3] = "VIRTUAL_GPU", PhysicalDeviceType[PhysicalDeviceType.CPU = 4] = "CPU";
}(PhysicalDeviceType || (PhysicalDeviceType = {}));
export var VertexInputRate;
!function(VertexInputRate) {
    VertexInputRate[VertexInputRate.VERTEX = 0] = "VERTEX", VertexInputRate[VertexInputRate.INSTANCE = 1] = "INSTANCE";
}(VertexInputRate || (VertexInputRate = {}));
export var Format;
!function(Format) {
    Format[Format.UNDEFINED = 0] = "UNDEFINED", Format[Format.R4G4_UNORM_PACK8 = 1] = "R4G4_UNORM_PACK8", Format[Format.R4G4B4A4_UNORM_PACK16 = 2] = "R4G4B4A4_UNORM_PACK16", Format[Format.B4G4R4A4_UNORM_PACK16 = 3] = "B4G4R4A4_UNORM_PACK16", Format[Format.R5G6B5_UNORM_PACK16 = 4] = "R5G6B5_UNORM_PACK16", Format[Format.B5G6R5_UNORM_PACK16 = 5] = "B5G6R5_UNORM_PACK16", Format[Format.R5G5B5A1_UNORM_PACK16 = 6] = "R5G5B5A1_UNORM_PACK16", Format[Format.B5G5R5A1_UNORM_PACK16 = 7] = "B5G5R5A1_UNORM_PACK16", Format[Format.A1R5G5B5_UNORM_PACK16 = 8] = "A1R5G5B5_UNORM_PACK16", Format[Format.R8_UNORM = 9] = "R8_UNORM", Format[Format.R8_SNORM = 10] = "R8_SNORM", Format[Format.R8_USCALED = 11] = "R8_USCALED", Format[Format.R8_SSCALED = 12] = "R8_SSCALED", Format[Format.R8_UINT = 13] = "R8_UINT", Format[Format.R8_SINT = 14] = "R8_SINT", Format[Format.R8_SRGB = 15] = "R8_SRGB", Format[Format.R8G8_UNORM = 16] = "R8G8_UNORM", Format[Format.R8G8_SNORM = 17] = "R8G8_SNORM", Format[Format.R8G8_USCALED = 18] = "R8G8_USCALED", Format[Format.R8G8_SSCALED = 19] = "R8G8_SSCALED", Format[Format.R8G8_UINT = 20] = "R8G8_UINT", Format[Format.R8G8_SINT = 21] = "R8G8_SINT", Format[Format.R8G8_SRGB = 22] = "R8G8_SRGB", Format[Format.R8G8B8_UNORM = 23] = "R8G8B8_UNORM", Format[Format.R8G8B8_SNORM = 24] = "R8G8B8_SNORM", Format[Format.R8G8B8_USCALED = 25] = "R8G8B8_USCALED", Format[Format.R8G8B8_SSCALED = 26] = "R8G8B8_SSCALED", Format[Format.R8G8B8_UINT = 27] = "R8G8B8_UINT", Format[Format.R8G8B8_SINT = 28] = "R8G8B8_SINT", Format[Format.R8G8B8_SRGB = 29] = "R8G8B8_SRGB", Format[Format.B8G8R8_UNORM = 30] = "B8G8R8_UNORM", Format[Format.B8G8R8_SNORM = 31] = "B8G8R8_SNORM", Format[Format.B8G8R8_USCALED = 32] = "B8G8R8_USCALED", Format[Format.B8G8R8_SSCALED = 33] = "B8G8R8_SSCALED", Format[Format.B8G8R8_UINT = 34] = "B8G8R8_UINT", Format[Format.B8G8R8_SINT = 35] = "B8G8R8_SINT", Format[Format.B8G8R8_SRGB = 36] = "B8G8R8_SRGB", Format[Format.R8G8B8A8_UNORM = 37] = "R8G8B8A8_UNORM", Format[Format.R8G8B8A8_SNORM = 38] = "R8G8B8A8_SNORM", Format[Format.R8G8B8A8_USCALED = 39] = "R8G8B8A8_USCALED", Format[Format.R8G8B8A8_SSCALED = 40] = "R8G8B8A8_SSCALED", Format[Format.R8G8B8A8_UINT = 41] = "R8G8B8A8_UINT", Format[Format.R8G8B8A8_SINT = 42] = "R8G8B8A8_SINT", Format[Format.R8G8B8A8_SRGB = 43] = "R8G8B8A8_SRGB", Format[Format.B8G8R8A8_UNORM = 44] = "B8G8R8A8_UNORM", Format[Format.B8G8R8A8_SNORM = 45] = "B8G8R8A8_SNORM", Format[Format.B8G8R8A8_USCALED = 46] = "B8G8R8A8_USCALED", Format[Format.B8G8R8A8_SSCALED = 47] = "B8G8R8A8_SSCALED", Format[Format.B8G8R8A8_UINT = 48] = "B8G8R8A8_UINT", Format[Format.B8G8R8A8_SINT = 49] = "B8G8R8A8_SINT", Format[Format.B8G8R8A8_SRGB = 50] = "B8G8R8A8_SRGB", Format[Format.A8B8G8R8_UNORM_PACK32 = 51] = "A8B8G8R8_UNORM_PACK32", Format[Format.A8B8G8R8_SNORM_PACK32 = 52] = "A8B8G8R8_SNORM_PACK32", Format[Format.A8B8G8R8_USCALED_PACK32 = 53] = "A8B8G8R8_USCALED_PACK32", Format[Format.A8B8G8R8_SSCALED_PACK32 = 54] = "A8B8G8R8_SSCALED_PACK32", Format[Format.A8B8G8R8_UINT_PACK32 = 55] = "A8B8G8R8_UINT_PACK32", Format[Format.A8B8G8R8_SINT_PACK32 = 56] = "A8B8G8R8_SINT_PACK32", Format[Format.A8B8G8R8_SRGB_PACK32 = 57] = "A8B8G8R8_SRGB_PACK32", Format[Format.A2R10G10B10_UNORM_PACK32 = 58] = "A2R10G10B10_UNORM_PACK32", Format[Format.A2R10G10B10_SNORM_PACK32 = 59] = "A2R10G10B10_SNORM_PACK32", Format[Format.A2R10G10B10_USCALED_PACK32 = 60] = "A2R10G10B10_USCALED_PACK32", Format[Format.A2R10G10B10_SSCALED_PACK32 = 61] = "A2R10G10B10_SSCALED_PACK32", Format[Format.A2R10G10B10_UINT_PACK32 = 62] = "A2R10G10B10_UINT_PACK32", Format[Format.A2R10G10B10_SINT_PACK32 = 63] = "A2R10G10B10_SINT_PACK32", Format[Format.A2B10G10R10_UNORM_PACK32 = 64] = "A2B10G10R10_UNORM_PACK32", Format[Format.A2B10G10R10_SNORM_PACK32 = 65] = "A2B10G10R10_SNORM_PACK32", Format[Format.A2B10G10R10_USCALED_PACK32 = 66] = "A2B10G10R10_USCALED_PACK32", Format[Format.A2B10G10R10_SSCALED_PACK32 = 67] = "A2B10G10R10_SSCALED_PACK32", Format[Format.A2B10G10R10_UINT_PACK32 = 68] = "A2B10G10R10_UINT_PACK32", Format[Format.A2B10G10R10_SINT_PACK32 = 69] = "A2B10G10R10_SINT_PACK32", Format[Format.R16_UNORM = 70] = "R16_UNORM", Format[Format.R16_SNORM = 71] = "R16_SNORM", Format[Format.R16_USCALED = 72] = "R16_USCALED", Format[Format.R16_SSCALED = 73] = "R16_SSCALED", Format[Format.R16_UINT = 74] = "R16_UINT", Format[Format.R16_SINT = 75] = "R16_SINT", Format[Format.R16_SFLOAT = 76] = "R16_SFLOAT", Format[Format.R16G16_UNORM = 77] = "R16G16_UNORM", Format[Format.R16G16_SNORM = 78] = "R16G16_SNORM", Format[Format.R16G16_USCALED = 79] = "R16G16_USCALED", Format[Format.R16G16_SSCALED = 80] = "R16G16_SSCALED", Format[Format.R16G16_UINT = 81] = "R16G16_UINT", Format[Format.R16G16_SINT = 82] = "R16G16_SINT", Format[Format.R16G16_SFLOAT = 83] = "R16G16_SFLOAT", Format[Format.R16G16B16_UNORM = 84] = "R16G16B16_UNORM", Format[Format.R16G16B16_SNORM = 85] = "R16G16B16_SNORM", Format[Format.R16G16B16_USCALED = 86] = "R16G16B16_USCALED", Format[Format.R16G16B16_SSCALED = 87] = "R16G16B16_SSCALED", Format[Format.R16G16B16_UINT = 88] = "R16G16B16_UINT", Format[Format.R16G16B16_SINT = 89] = "R16G16B16_SINT", Format[Format.R16G16B16_SFLOAT = 90] = "R16G16B16_SFLOAT", Format[Format.R16G16B16A16_UNORM = 91] = "R16G16B16A16_UNORM", Format[Format.R16G16B16A16_SNORM = 92] = "R16G16B16A16_SNORM", Format[Format.R16G16B16A16_USCALED = 93] = "R16G16B16A16_USCALED", Format[Format.R16G16B16A16_SSCALED = 94] = "R16G16B16A16_SSCALED", Format[Format.R16G16B16A16_UINT = 95] = "R16G16B16A16_UINT", Format[Format.R16G16B16A16_SINT = 96] = "R16G16B16A16_SINT", Format[Format.R16G16B16A16_SFLOAT = 97] = "R16G16B16A16_SFLOAT", Format[Format.R32_UINT = 98] = "R32_UINT", Format[Format.R32_SINT = 99] = "R32_SINT", Format[Format.R32_SFLOAT = 100] = "R32_SFLOAT", Format[Format.R32G32_UINT = 101] = "R32G32_UINT", Format[Format.R32G32_SINT = 102] = "R32G32_SINT", Format[Format.R32G32_SFLOAT = 103] = "R32G32_SFLOAT", Format[Format.R32G32B32_UINT = 104] = "R32G32B32_UINT", Format[Format.R32G32B32_SINT = 105] = "R32G32B32_SINT", Format[Format.R32G32B32_SFLOAT = 106] = "R32G32B32_SFLOAT", Format[Format.R32G32B32A32_UINT = 107] = "R32G32B32A32_UINT", Format[Format.R32G32B32A32_SINT = 108] = "R32G32B32A32_SINT", Format[Format.R32G32B32A32_SFLOAT = 109] = "R32G32B32A32_SFLOAT", Format[Format.R64_UINT = 110] = "R64_UINT", Format[Format.R64_SINT = 111] = "R64_SINT", Format[Format.R64_SFLOAT = 112] = "R64_SFLOAT", Format[Format.R64G64_UINT = 113] = "R64G64_UINT", Format[Format.R64G64_SINT = 114] = "R64G64_SINT", Format[Format.R64G64_SFLOAT = 115] = "R64G64_SFLOAT", Format[Format.R64G64B64_UINT = 116] = "R64G64B64_UINT", Format[Format.R64G64B64_SINT = 117] = "R64G64B64_SINT", Format[Format.R64G64B64_SFLOAT = 118] = "R64G64B64_SFLOAT", Format[Format.R64G64B64A64_UINT = 119] = "R64G64B64A64_UINT", Format[Format.R64G64B64A64_SINT = 120] = "R64G64B64A64_SINT", Format[Format.R64G64B64A64_SFLOAT = 121] = "R64G64B64A64_SFLOAT", Format[Format.B10G11R11_UFLOAT_PACK32 = 122] = "B10G11R11_UFLOAT_PACK32", Format[Format.E5B9G9R9_UFLOAT_PACK32 = 123] = "E5B9G9R9_UFLOAT_PACK32", Format[Format.D16_UNORM = 124] = "D16_UNORM", Format[Format.X8_D24_UNORM_PACK32 = 125] = "X8_D24_UNORM_PACK32", Format[Format.D32_SFLOAT = 126] = "D32_SFLOAT", Format[Format.S8_UINT = 127] = "S8_UINT", Format[Format.D16_UNORM_S8_UINT = 128] = "D16_UNORM_S8_UINT", Format[Format.D24_UNORM_S8_UINT = 129] = "D24_UNORM_S8_UINT", Format[Format.D32_SFLOAT_S8_UINT = 130] = "D32_SFLOAT_S8_UINT", Format[Format.BC1_RGB_UNORM_BLOCK = 131] = "BC1_RGB_UNORM_BLOCK", Format[Format.BC1_RGB_SRGB_BLOCK = 132] = "BC1_RGB_SRGB_BLOCK", Format[Format.BC1_RGBA_UNORM_BLOCK = 133] = "BC1_RGBA_UNORM_BLOCK", Format[Format.BC1_RGBA_SRGB_BLOCK = 134] = "BC1_RGBA_SRGB_BLOCK", Format[Format.BC2_UNORM_BLOCK = 135] = "BC2_UNORM_BLOCK", Format[Format.BC2_SRGB_BLOCK = 136] = "BC2_SRGB_BLOCK", Format[Format.BC3_UNORM_BLOCK = 137] = "BC3_UNORM_BLOCK", Format[Format.BC3_SRGB_BLOCK = 138] = "BC3_SRGB_BLOCK", Format[Format.BC4_UNORM_BLOCK = 139] = "BC4_UNORM_BLOCK", Format[Format.BC4_SNORM_BLOCK = 140] = "BC4_SNORM_BLOCK", Format[Format.BC5_UNORM_BLOCK = 141] = "BC5_UNORM_BLOCK", Format[Format.BC5_SNORM_BLOCK = 142] = "BC5_SNORM_BLOCK", Format[Format.BC6H_UFLOAT_BLOCK = 143] = "BC6H_UFLOAT_BLOCK", Format[Format.BC6H_SFLOAT_BLOCK = 144] = "BC6H_SFLOAT_BLOCK", Format[Format.BC7_UNORM_BLOCK = 145] = "BC7_UNORM_BLOCK", Format[Format.BC7_SRGB_BLOCK = 146] = "BC7_SRGB_BLOCK", Format[Format.ETC2_R8G8B8_UNORM_BLOCK = 147] = "ETC2_R8G8B8_UNORM_BLOCK", Format[Format.ETC2_R8G8B8_SRGB_BLOCK = 148] = "ETC2_R8G8B8_SRGB_BLOCK", Format[Format.ETC2_R8G8B8A1_UNORM_BLOCK = 149] = "ETC2_R8G8B8A1_UNORM_BLOCK", Format[Format.ETC2_R8G8B8A1_SRGB_BLOCK = 150] = "ETC2_R8G8B8A1_SRGB_BLOCK", Format[Format.ETC2_R8G8B8A8_UNORM_BLOCK = 151] = "ETC2_R8G8B8A8_UNORM_BLOCK", Format[Format.ETC2_R8G8B8A8_SRGB_BLOCK = 152] = "ETC2_R8G8B8A8_SRGB_BLOCK", Format[Format.EAC_R11_UNORM_BLOCK = 153] = "EAC_R11_UNORM_BLOCK", Format[Format.EAC_R11_SNORM_BLOCK = 154] = "EAC_R11_SNORM_BLOCK", Format[Format.EAC_R11G11_UNORM_BLOCK = 155] = "EAC_R11G11_UNORM_BLOCK", Format[Format.EAC_R11G11_SNORM_BLOCK = 156] = "EAC_R11G11_SNORM_BLOCK", Format[Format.ASTC_4x4_UNORM_BLOCK = 157] = "ASTC_4x4_UNORM_BLOCK", Format[Format.ASTC_4x4_SRGB_BLOCK = 158] = "ASTC_4x4_SRGB_BLOCK", Format[Format.ASTC_5x4_UNORM_BLOCK = 159] = "ASTC_5x4_UNORM_BLOCK", Format[Format.ASTC_5x4_SRGB_BLOCK = 160] = "ASTC_5x4_SRGB_BLOCK", Format[Format.ASTC_5x5_UNORM_BLOCK = 161] = "ASTC_5x5_UNORM_BLOCK", Format[Format.ASTC_5x5_SRGB_BLOCK = 162] = "ASTC_5x5_SRGB_BLOCK", Format[Format.ASTC_6x5_UNORM_BLOCK = 163] = "ASTC_6x5_UNORM_BLOCK", Format[Format.ASTC_6x5_SRGB_BLOCK = 164] = "ASTC_6x5_SRGB_BLOCK", Format[Format.ASTC_6x6_UNORM_BLOCK = 165] = "ASTC_6x6_UNORM_BLOCK", Format[Format.ASTC_6x6_SRGB_BLOCK = 166] = "ASTC_6x6_SRGB_BLOCK", Format[Format.ASTC_8x5_UNORM_BLOCK = 167] = "ASTC_8x5_UNORM_BLOCK", Format[Format.ASTC_8x5_SRGB_BLOCK = 168] = "ASTC_8x5_SRGB_BLOCK", Format[Format.ASTC_8x6_UNORM_BLOCK = 169] = "ASTC_8x6_UNORM_BLOCK", Format[Format.ASTC_8x6_SRGB_BLOCK = 170] = "ASTC_8x6_SRGB_BLOCK", Format[Format.ASTC_8x8_UNORM_BLOCK = 171] = "ASTC_8x8_UNORM_BLOCK", Format[Format.ASTC_8x8_SRGB_BLOCK = 172] = "ASTC_8x8_SRGB_BLOCK", Format[Format.ASTC_10x5_UNORM_BLOCK = 173] = "ASTC_10x5_UNORM_BLOCK", Format[Format.ASTC_10x5_SRGB_BLOCK = 174] = "ASTC_10x5_SRGB_BLOCK", Format[Format.ASTC_10x6_UNORM_BLOCK = 175] = "ASTC_10x6_UNORM_BLOCK", Format[Format.ASTC_10x6_SRGB_BLOCK = 176] = "ASTC_10x6_SRGB_BLOCK", Format[Format.ASTC_10x8_UNORM_BLOCK = 177] = "ASTC_10x8_UNORM_BLOCK", Format[Format.ASTC_10x8_SRGB_BLOCK = 178] = "ASTC_10x8_SRGB_BLOCK", Format[Format.ASTC_10x10_UNORM_BLOCK = 179] = "ASTC_10x10_UNORM_BLOCK", Format[Format.ASTC_10x10_SRGB_BLOCK = 180] = "ASTC_10x10_SRGB_BLOCK", Format[Format.ASTC_12x10_UNORM_BLOCK = 181] = "ASTC_12x10_UNORM_BLOCK", Format[Format.ASTC_12x10_SRGB_BLOCK = 182] = "ASTC_12x10_SRGB_BLOCK", Format[Format.ASTC_12x12_UNORM_BLOCK = 183] = "ASTC_12x12_UNORM_BLOCK", Format[Format.ASTC_12x12_SRGB_BLOCK = 184] = "ASTC_12x12_SRGB_BLOCK", Format[Format.G8B8G8R8_422_UNORM = 1000156000] = "G8B8G8R8_422_UNORM", Format[Format.B8G8R8G8_422_UNORM = 1000156001] = "B8G8R8G8_422_UNORM", Format[Format.G8_B8_R8_3PLANE_420_UNORM = 1000156002] = "G8_B8_R8_3PLANE_420_UNORM", Format[Format.G8_B8R8_2PLANE_420_UNORM = 1000156003] = "G8_B8R8_2PLANE_420_UNORM", Format[Format.G8_B8_R8_3PLANE_422_UNORM = 1000156004] = "G8_B8_R8_3PLANE_422_UNORM", Format[Format.G8_B8R8_2PLANE_422_UNORM = 1000156005] = "G8_B8R8_2PLANE_422_UNORM", Format[Format.G8_B8_R8_3PLANE_444_UNORM = 1000156006] = "G8_B8_R8_3PLANE_444_UNORM", Format[Format.R10X6_UNORM_PACK16 = 1000156007] = "R10X6_UNORM_PACK16", Format[Format.R10X6G10X6_UNORM_2PACK16 = 1000156008] = "R10X6G10X6_UNORM_2PACK16", Format[Format.R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009] = "R10X6G10X6B10X6A10X6_UNORM_4PACK16", Format[Format.G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010] = "G10X6B10X6G10X6R10X6_422_UNORM_4PACK16", Format[Format.B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011] = "B10X6G10X6R10X6G10X6_422_UNORM_4PACK16", Format[Format.G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012] = "G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16", Format[Format.G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013] = "G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16", Format[Format.G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014] = "G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16", Format[Format.G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015] = "G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16", Format[Format.G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016] = "G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16", Format[Format.R12X4_UNORM_PACK16 = 1000156017] = "R12X4_UNORM_PACK16", Format[Format.R12X4G12X4_UNORM_2PACK16 = 1000156018] = "R12X4G12X4_UNORM_2PACK16", Format[Format.R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019] = "R12X4G12X4B12X4A12X4_UNORM_4PACK16", Format[Format.G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020] = "G12X4B12X4G12X4R12X4_422_UNORM_4PACK16", Format[Format.B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021] = "B12X4G12X4R12X4G12X4_422_UNORM_4PACK16", Format[Format.G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022] = "G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16", Format[Format.G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023] = "G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16", Format[Format.G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024] = "G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16", Format[Format.G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025] = "G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16", Format[Format.G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026] = "G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16", Format[Format.G16B16G16R16_422_UNORM = 1000156027] = "G16B16G16R16_422_UNORM", Format[Format.B16G16R16G16_422_UNORM = 1000156028] = "B16G16R16G16_422_UNORM", Format[Format.G16_B16_R16_3PLANE_420_UNORM = 1000156029] = "G16_B16_R16_3PLANE_420_UNORM", Format[Format.G16_B16R16_2PLANE_420_UNORM = 1000156030] = "G16_B16R16_2PLANE_420_UNORM", Format[Format.G16_B16_R16_3PLANE_422_UNORM = 1000156031] = "G16_B16_R16_3PLANE_422_UNORM", Format[Format.G16_B16R16_2PLANE_422_UNORM = 1000156032] = "G16_B16R16_2PLANE_422_UNORM", Format[Format.G16_B16_R16_3PLANE_444_UNORM = 1000156033] = "G16_B16_R16_3PLANE_444_UNORM", Format[Format.G8_B8R8_2PLANE_444_UNORM = 1000330000] = "G8_B8R8_2PLANE_444_UNORM", Format[Format.G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001] = "G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16", Format[Format.G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002] = "G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16", Format[Format.G16_B16R16_2PLANE_444_UNORM = 1000330003] = "G16_B16R16_2PLANE_444_UNORM", Format[Format.A4R4G4B4_UNORM_PACK16 = 1000340000] = "A4R4G4B4_UNORM_PACK16", Format[Format.A4B4G4R4_UNORM_PACK16 = 1000340001] = "A4B4G4R4_UNORM_PACK16", Format[Format.ASTC_4x4_SFLOAT_BLOCK = 1000066000] = "ASTC_4x4_SFLOAT_BLOCK", Format[Format.ASTC_5x4_SFLOAT_BLOCK = 1000066001] = "ASTC_5x4_SFLOAT_BLOCK", Format[Format.ASTC_5x5_SFLOAT_BLOCK = 1000066002] = "ASTC_5x5_SFLOAT_BLOCK", Format[Format.ASTC_6x5_SFLOAT_BLOCK = 1000066003] = "ASTC_6x5_SFLOAT_BLOCK", Format[Format.ASTC_6x6_SFLOAT_BLOCK = 1000066004] = "ASTC_6x6_SFLOAT_BLOCK", Format[Format.ASTC_8x5_SFLOAT_BLOCK = 1000066005] = "ASTC_8x5_SFLOAT_BLOCK", Format[Format.ASTC_8x6_SFLOAT_BLOCK = 1000066006] = "ASTC_8x6_SFLOAT_BLOCK", Format[Format.ASTC_8x8_SFLOAT_BLOCK = 1000066007] = "ASTC_8x8_SFLOAT_BLOCK", Format[Format.ASTC_10x5_SFLOAT_BLOCK = 1000066008] = "ASTC_10x5_SFLOAT_BLOCK", Format[Format.ASTC_10x6_SFLOAT_BLOCK = 1000066009] = "ASTC_10x6_SFLOAT_BLOCK", Format[Format.ASTC_10x8_SFLOAT_BLOCK = 1000066010] = "ASTC_10x8_SFLOAT_BLOCK", Format[Format.ASTC_10x10_SFLOAT_BLOCK = 1000066011] = "ASTC_10x10_SFLOAT_BLOCK", Format[Format.ASTC_12x10_SFLOAT_BLOCK = 1000066012] = "ASTC_12x10_SFLOAT_BLOCK", Format[Format.ASTC_12x12_SFLOAT_BLOCK = 1000066013] = "ASTC_12x12_SFLOAT_BLOCK", Format[Format.PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000] = "PVRTC1_2BPP_UNORM_BLOCK_IMG", Format[Format.PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001] = "PVRTC1_4BPP_UNORM_BLOCK_IMG", Format[Format.PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002] = "PVRTC2_2BPP_UNORM_BLOCK_IMG", Format[Format.PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003] = "PVRTC2_4BPP_UNORM_BLOCK_IMG", Format[Format.PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004] = "PVRTC1_2BPP_SRGB_BLOCK_IMG", Format[Format.PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005] = "PVRTC1_4BPP_SRGB_BLOCK_IMG", Format[Format.PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006] = "PVRTC2_2BPP_SRGB_BLOCK_IMG", Format[Format.PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007] = "PVRTC2_4BPP_SRGB_BLOCK_IMG", Format[Format.ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000] = "ASTC_4x4_SFLOAT_BLOCK_EXT", Format[Format.ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001] = "ASTC_5x4_SFLOAT_BLOCK_EXT", Format[Format.ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002] = "ASTC_5x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003] = "ASTC_6x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004] = "ASTC_6x6_SFLOAT_BLOCK_EXT", Format[Format.ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005] = "ASTC_8x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006] = "ASTC_8x6_SFLOAT_BLOCK_EXT", Format[Format.ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007] = "ASTC_8x8_SFLOAT_BLOCK_EXT", Format[Format.ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008] = "ASTC_10x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009] = "ASTC_10x6_SFLOAT_BLOCK_EXT", Format[Format.ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010] = "ASTC_10x8_SFLOAT_BLOCK_EXT", Format[Format.ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011] = "ASTC_10x10_SFLOAT_BLOCK_EXT", Format[Format.ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012] = "ASTC_12x10_SFLOAT_BLOCK_EXT", Format[Format.ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013] = "ASTC_12x12_SFLOAT_BLOCK_EXT", Format[Format.G8B8G8R8_422_UNORM_KHR = 1000156000] = "G8B8G8R8_422_UNORM_KHR", Format[Format.B8G8R8G8_422_UNORM_KHR = 1000156001] = "B8G8R8G8_422_UNORM_KHR", Format[Format.G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002] = "G8_B8_R8_3PLANE_420_UNORM_KHR", Format[Format.G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003] = "G8_B8R8_2PLANE_420_UNORM_KHR", Format[Format.G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004] = "G8_B8_R8_3PLANE_422_UNORM_KHR", Format[Format.G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005] = "G8_B8R8_2PLANE_422_UNORM_KHR", Format[Format.G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006] = "G8_B8_R8_3PLANE_444_UNORM_KHR", Format[Format.R10X6_UNORM_PACK16_KHR = 1000156007] = "R10X6_UNORM_PACK16_KHR", Format[Format.R10X6G10X6_UNORM_2PACK16_KHR = 1000156008] = "R10X6G10X6_UNORM_2PACK16_KHR", Format[Format.R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009] = "R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR", Format[Format.G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010] = "G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR", Format[Format.B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011] = "B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR", Format[Format.G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012] = "G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR", Format[Format.G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013] = "G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR", Format[Format.G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014] = "G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR", Format[Format.G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015] = "G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR", Format[Format.G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016] = "G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR", Format[Format.R12X4_UNORM_PACK16_KHR = 1000156017] = "R12X4_UNORM_PACK16_KHR", Format[Format.R12X4G12X4_UNORM_2PACK16_KHR = 1000156018] = "R12X4G12X4_UNORM_2PACK16_KHR", Format[Format.R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019] = "R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR", Format[Format.G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020] = "G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR", Format[Format.B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021] = "B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR", Format[Format.G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022] = "G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR", Format[Format.G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023] = "G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR", Format[Format.G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024] = "G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR", Format[Format.G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025] = "G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR", Format[Format.G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026] = "G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR", Format[Format.G16B16G16R16_422_UNORM_KHR = 1000156027] = "G16B16G16R16_422_UNORM_KHR", Format[Format.B16G16R16G16_422_UNORM_KHR = 1000156028] = "B16G16R16G16_422_UNORM_KHR", Format[Format.G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029] = "G16_B16_R16_3PLANE_420_UNORM_KHR", Format[Format.G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030] = "G16_B16R16_2PLANE_420_UNORM_KHR", Format[Format.G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031] = "G16_B16_R16_3PLANE_422_UNORM_KHR", Format[Format.G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032] = "G16_B16R16_2PLANE_422_UNORM_KHR", Format[Format.G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033] = "G16_B16_R16_3PLANE_444_UNORM_KHR", Format[Format.ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000] = "ASTC_3x3x3_UNORM_BLOCK_EXT", Format[Format.ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001] = "ASTC_3x3x3_SRGB_BLOCK_EXT", Format[Format.ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002] = "ASTC_3x3x3_SFLOAT_BLOCK_EXT", Format[Format.ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003] = "ASTC_4x3x3_UNORM_BLOCK_EXT", Format[Format.ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004] = "ASTC_4x3x3_SRGB_BLOCK_EXT", Format[Format.ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005] = "ASTC_4x3x3_SFLOAT_BLOCK_EXT", Format[Format.ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006] = "ASTC_4x4x3_UNORM_BLOCK_EXT", Format[Format.ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007] = "ASTC_4x4x3_SRGB_BLOCK_EXT", Format[Format.ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008] = "ASTC_4x4x3_SFLOAT_BLOCK_EXT", Format[Format.ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009] = "ASTC_4x4x4_UNORM_BLOCK_EXT", Format[Format.ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010] = "ASTC_4x4x4_SRGB_BLOCK_EXT", Format[Format.ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011] = "ASTC_4x4x4_SFLOAT_BLOCK_EXT", Format[Format.ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012] = "ASTC_5x4x4_UNORM_BLOCK_EXT", Format[Format.ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013] = "ASTC_5x4x4_SRGB_BLOCK_EXT", Format[Format.ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014] = "ASTC_5x4x4_SFLOAT_BLOCK_EXT", Format[Format.ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015] = "ASTC_5x5x4_UNORM_BLOCK_EXT", Format[Format.ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016] = "ASTC_5x5x4_SRGB_BLOCK_EXT", Format[Format.ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017] = "ASTC_5x5x4_SFLOAT_BLOCK_EXT", Format[Format.ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018] = "ASTC_5x5x5_UNORM_BLOCK_EXT", Format[Format.ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019] = "ASTC_5x5x5_SRGB_BLOCK_EXT", Format[Format.ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020] = "ASTC_5x5x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021] = "ASTC_6x5x5_UNORM_BLOCK_EXT", Format[Format.ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022] = "ASTC_6x5x5_SRGB_BLOCK_EXT", Format[Format.ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023] = "ASTC_6x5x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024] = "ASTC_6x6x5_UNORM_BLOCK_EXT", Format[Format.ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025] = "ASTC_6x6x5_SRGB_BLOCK_EXT", Format[Format.ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026] = "ASTC_6x6x5_SFLOAT_BLOCK_EXT", Format[Format.ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027] = "ASTC_6x6x6_UNORM_BLOCK_EXT", Format[Format.ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028] = "ASTC_6x6x6_SRGB_BLOCK_EXT", Format[Format.ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029] = "ASTC_6x6x6_SFLOAT_BLOCK_EXT", Format[Format.G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000] = "G8_B8R8_2PLANE_444_UNORM_EXT", Format[Format.G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001] = "G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT", Format[Format.G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002] = "G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT", Format[Format.G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003] = "G16_B16R16_2PLANE_444_UNORM_EXT", Format[Format.A4R4G4B4_UNORM_PACK16_EXT = 1000340000] = "A4R4G4B4_UNORM_PACK16_EXT", Format[Format.A4B4G4R4_UNORM_PACK16_EXT = 1000340001] = "A4B4G4R4_UNORM_PACK16_EXT", Format[Format.R16G16_S10_5_NV = 1000464000] = "R16G16_S10_5_NV";
}(Format || (Format = {}));
export var StructureType;
!function(StructureType) {
    StructureType[StructureType.APPLICATION_INFO = 0] = "APPLICATION_INFO", StructureType[StructureType.INSTANCE_CREATE_INFO = 1] = "INSTANCE_CREATE_INFO", StructureType[StructureType.DEVICE_QUEUE_CREATE_INFO = 2] = "DEVICE_QUEUE_CREATE_INFO", StructureType[StructureType.DEVICE_CREATE_INFO = 3] = "DEVICE_CREATE_INFO", StructureType[StructureType.SUBMIT_INFO = 4] = "SUBMIT_INFO", StructureType[StructureType.MEMORY_ALLOCATE_INFO = 5] = "MEMORY_ALLOCATE_INFO", StructureType[StructureType.MAPPED_MEMORY_RANGE = 6] = "MAPPED_MEMORY_RANGE", StructureType[StructureType.BIND_SPARSE_INFO = 7] = "BIND_SPARSE_INFO", StructureType[StructureType.FENCE_CREATE_INFO = 8] = "FENCE_CREATE_INFO", StructureType[StructureType.SEMAPHORE_CREATE_INFO = 9] = "SEMAPHORE_CREATE_INFO", StructureType[StructureType.EVENT_CREATE_INFO = 10] = "EVENT_CREATE_INFO", StructureType[StructureType.QUERY_POOL_CREATE_INFO = 11] = "QUERY_POOL_CREATE_INFO", StructureType[StructureType.BUFFER_CREATE_INFO = 12] = "BUFFER_CREATE_INFO", StructureType[StructureType.BUFFER_VIEW_CREATE_INFO = 13] = "BUFFER_VIEW_CREATE_INFO", StructureType[StructureType.IMAGE_CREATE_INFO = 14] = "IMAGE_CREATE_INFO", StructureType[StructureType.IMAGE_VIEW_CREATE_INFO = 15] = "IMAGE_VIEW_CREATE_INFO", StructureType[StructureType.SHADER_MODULE_CREATE_INFO = 16] = "SHADER_MODULE_CREATE_INFO", StructureType[StructureType.PIPELINE_CACHE_CREATE_INFO = 17] = "PIPELINE_CACHE_CREATE_INFO", StructureType[StructureType.PIPELINE_SHADER_STAGE_CREATE_INFO = 18] = "PIPELINE_SHADER_STAGE_CREATE_INFO", StructureType[StructureType.PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19] = "PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20] = "PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21] = "PIPELINE_TESSELLATION_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22] = "PIPELINE_VIEWPORT_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23] = "PIPELINE_RASTERIZATION_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24] = "PIPELINE_MULTISAMPLE_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25] = "PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26] = "PIPELINE_COLOR_BLEND_STATE_CREATE_INFO", StructureType[StructureType.PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27] = "PIPELINE_DYNAMIC_STATE_CREATE_INFO", StructureType[StructureType.GRAPHICS_PIPELINE_CREATE_INFO = 28] = "GRAPHICS_PIPELINE_CREATE_INFO", StructureType[StructureType.COMPUTE_PIPELINE_CREATE_INFO = 29] = "COMPUTE_PIPELINE_CREATE_INFO", StructureType[StructureType.PIPELINE_LAYOUT_CREATE_INFO = 30] = "PIPELINE_LAYOUT_CREATE_INFO", StructureType[StructureType.SAMPLER_CREATE_INFO = 31] = "SAMPLER_CREATE_INFO", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32] = "DESCRIPTOR_SET_LAYOUT_CREATE_INFO", StructureType[StructureType.DESCRIPTOR_POOL_CREATE_INFO = 33] = "DESCRIPTOR_POOL_CREATE_INFO", StructureType[StructureType.DESCRIPTOR_SET_ALLOCATE_INFO = 34] = "DESCRIPTOR_SET_ALLOCATE_INFO", StructureType[StructureType.WRITE_DESCRIPTOR_SET = 35] = "WRITE_DESCRIPTOR_SET", StructureType[StructureType.COPY_DESCRIPTOR_SET = 36] = "COPY_DESCRIPTOR_SET", StructureType[StructureType.FRAMEBUFFER_CREATE_INFO = 37] = "FRAMEBUFFER_CREATE_INFO", StructureType[StructureType.RENDER_PASS_CREATE_INFO = 38] = "RENDER_PASS_CREATE_INFO", StructureType[StructureType.COMMAND_POOL_CREATE_INFO = 39] = "COMMAND_POOL_CREATE_INFO", StructureType[StructureType.COMMAND_BUFFER_ALLOCATE_INFO = 40] = "COMMAND_BUFFER_ALLOCATE_INFO", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_INFO = 41] = "COMMAND_BUFFER_INHERITANCE_INFO", StructureType[StructureType.COMMAND_BUFFER_BEGIN_INFO = 42] = "COMMAND_BUFFER_BEGIN_INFO", StructureType[StructureType.RENDER_PASS_BEGIN_INFO = 43] = "RENDER_PASS_BEGIN_INFO", StructureType[StructureType.BUFFER_MEMORY_BARRIER = 44] = "BUFFER_MEMORY_BARRIER", StructureType[StructureType.IMAGE_MEMORY_BARRIER = 45] = "IMAGE_MEMORY_BARRIER", StructureType[StructureType.MEMORY_BARRIER = 46] = "MEMORY_BARRIER", StructureType[StructureType.LOADER_INSTANCE_CREATE_INFO = 47] = "LOADER_INSTANCE_CREATE_INFO", StructureType[StructureType.LOADER_DEVICE_CREATE_INFO = 48] = "LOADER_DEVICE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000] = "PHYSICAL_DEVICE_SUBGROUP_PROPERTIES", StructureType[StructureType.BIND_BUFFER_MEMORY_INFO = 1000157000] = "BIND_BUFFER_MEMORY_INFO", StructureType[StructureType.BIND_IMAGE_MEMORY_INFO = 1000157001] = "BIND_IMAGE_MEMORY_INFO", StructureType[StructureType.PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000] = "PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES", StructureType[StructureType.MEMORY_DEDICATED_REQUIREMENTS = 1000127000] = "MEMORY_DEDICATED_REQUIREMENTS", StructureType[StructureType.MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001] = "MEMORY_DEDICATED_ALLOCATE_INFO", StructureType[StructureType.MEMORY_ALLOCATE_FLAGS_INFO = 1000060000] = "MEMORY_ALLOCATE_FLAGS_INFO", StructureType[StructureType.DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003] = "DEVICE_GROUP_RENDER_PASS_BEGIN_INFO", StructureType[StructureType.DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004] = "DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO", StructureType[StructureType.DEVICE_GROUP_SUBMIT_INFO = 1000060005] = "DEVICE_GROUP_SUBMIT_INFO", StructureType[StructureType.DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006] = "DEVICE_GROUP_BIND_SPARSE_INFO", StructureType[StructureType.BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013] = "BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO", StructureType[StructureType.BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014] = "BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO", StructureType[StructureType.PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000] = "PHYSICAL_DEVICE_GROUP_PROPERTIES", StructureType[StructureType.DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001] = "DEVICE_GROUP_DEVICE_CREATE_INFO", StructureType[StructureType.BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000] = "BUFFER_MEMORY_REQUIREMENTS_INFO_2", StructureType[StructureType.IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001] = "IMAGE_MEMORY_REQUIREMENTS_INFO_2", StructureType[StructureType.IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002] = "IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2", StructureType[StructureType.MEMORY_REQUIREMENTS_2 = 1000146003] = "MEMORY_REQUIREMENTS_2", StructureType[StructureType.SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004] = "SPARSE_IMAGE_MEMORY_REQUIREMENTS_2", StructureType[StructureType.PHYSICAL_DEVICE_FEATURES_2 = 1000059000] = "PHYSICAL_DEVICE_FEATURES_2", StructureType[StructureType.PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001] = "PHYSICAL_DEVICE_PROPERTIES_2", StructureType[StructureType.FORMAT_PROPERTIES_2 = 1000059002] = "FORMAT_PROPERTIES_2", StructureType[StructureType.IMAGE_FORMAT_PROPERTIES_2 = 1000059003] = "IMAGE_FORMAT_PROPERTIES_2", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004] = "PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2", StructureType[StructureType.QUEUE_FAMILY_PROPERTIES_2 = 1000059005] = "QUEUE_FAMILY_PROPERTIES_2", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006] = "PHYSICAL_DEVICE_MEMORY_PROPERTIES_2", StructureType[StructureType.SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007] = "SPARSE_IMAGE_FORMAT_PROPERTIES_2", StructureType[StructureType.PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008] = "PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2", StructureType[StructureType.PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000] = "PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES", StructureType[StructureType.RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001] = "RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO", StructureType[StructureType.IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002] = "IMAGE_VIEW_USAGE_CREATE_INFO", StructureType[StructureType.PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003] = "PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO", StructureType[StructureType.RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000] = "RENDER_PASS_MULTIVIEW_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001] = "PHYSICAL_DEVICE_MULTIVIEW_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002] = "PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000] = "PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000] = "PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES", StructureType[StructureType.PROTECTED_SUBMIT_INFO = 1000145000] = "PROTECTED_SUBMIT_INFO", StructureType[StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001] = "PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002] = "PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES", StructureType[StructureType.DEVICE_QUEUE_INFO_2 = 1000145003] = "DEVICE_QUEUE_INFO_2", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000] = "SAMPLER_YCBCR_CONVERSION_CREATE_INFO", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_INFO = 1000156001] = "SAMPLER_YCBCR_CONVERSION_INFO", StructureType[StructureType.BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002] = "BIND_IMAGE_PLANE_MEMORY_INFO", StructureType[StructureType.IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003] = "IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004] = "PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005] = "SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES", StructureType[StructureType.DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000] = "DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000] = "PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO", StructureType[StructureType.EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001] = "EXTERNAL_IMAGE_FORMAT_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002] = "PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO", StructureType[StructureType.EXTERNAL_BUFFER_PROPERTIES = 1000071003] = "EXTERNAL_BUFFER_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004] = "PHYSICAL_DEVICE_ID_PROPERTIES", StructureType[StructureType.EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000] = "EXTERNAL_MEMORY_BUFFER_CREATE_INFO", StructureType[StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001] = "EXTERNAL_MEMORY_IMAGE_CREATE_INFO", StructureType[StructureType.EXPORT_MEMORY_ALLOCATE_INFO = 1000072002] = "EXPORT_MEMORY_ALLOCATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000] = "PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO", StructureType[StructureType.EXTERNAL_FENCE_PROPERTIES = 1000112001] = "EXTERNAL_FENCE_PROPERTIES", StructureType[StructureType.EXPORT_FENCE_CREATE_INFO = 1000113000] = "EXPORT_FENCE_CREATE_INFO", StructureType[StructureType.EXPORT_SEMAPHORE_CREATE_INFO = 1000077000] = "EXPORT_SEMAPHORE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000] = "PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO", StructureType[StructureType.EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001] = "EXTERNAL_SEMAPHORE_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000] = "PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001] = "DESCRIPTOR_SET_LAYOUT_SUPPORT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000] = "PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000] = "PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49] = "PHYSICAL_DEVICE_VULKAN_1_1_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50] = "PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51] = "PHYSICAL_DEVICE_VULKAN_1_2_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52] = "PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES", StructureType[StructureType.IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000] = "IMAGE_FORMAT_LIST_CREATE_INFO", StructureType[StructureType.ATTACHMENT_DESCRIPTION_2 = 1000109000] = "ATTACHMENT_DESCRIPTION_2", StructureType[StructureType.ATTACHMENT_REFERENCE_2 = 1000109001] = "ATTACHMENT_REFERENCE_2", StructureType[StructureType.SUBPASS_DESCRIPTION_2 = 1000109002] = "SUBPASS_DESCRIPTION_2", StructureType[StructureType.SUBPASS_DEPENDENCY_2 = 1000109003] = "SUBPASS_DEPENDENCY_2", StructureType[StructureType.RENDER_PASS_CREATE_INFO_2 = 1000109004] = "RENDER_PASS_CREATE_INFO_2", StructureType[StructureType.SUBPASS_BEGIN_INFO = 1000109005] = "SUBPASS_BEGIN_INFO", StructureType[StructureType.SUBPASS_END_INFO = 1000109006] = "SUBPASS_END_INFO", StructureType[StructureType.PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000] = "PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000] = "PHYSICAL_DEVICE_DRIVER_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000] = "PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000] = "PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000] = "PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000] = "DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001] = "PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002] = "PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES", StructureType[StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003] = "DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO", StructureType[StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004] = "DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT", StructureType[StructureType.PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000] = "PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES", StructureType[StructureType.SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001] = "SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE", StructureType[StructureType.PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000] = "PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES", StructureType[StructureType.IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000] = "IMAGE_STENCIL_USAGE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000] = "PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES", StructureType[StructureType.SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001] = "SAMPLER_REDUCTION_MODE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000] = "PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000] = "PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES", StructureType[StructureType.FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001] = "FRAMEBUFFER_ATTACHMENTS_CREATE_INFO", StructureType[StructureType.FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002] = "FRAMEBUFFER_ATTACHMENT_IMAGE_INFO", StructureType[StructureType.RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003] = "RENDER_PASS_ATTACHMENT_BEGIN_INFO", StructureType[StructureType.PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000] = "PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000] = "PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000] = "PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES", StructureType[StructureType.ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001] = "ATTACHMENT_REFERENCE_STENCIL_LAYOUT", StructureType[StructureType.ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002] = "ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT", StructureType[StructureType.PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000] = "PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000] = "PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001] = "PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES", StructureType[StructureType.SEMAPHORE_TYPE_CREATE_INFO = 1000207002] = "SEMAPHORE_TYPE_CREATE_INFO", StructureType[StructureType.TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003] = "TIMELINE_SEMAPHORE_SUBMIT_INFO", StructureType[StructureType.SEMAPHORE_WAIT_INFO = 1000207004] = "SEMAPHORE_WAIT_INFO", StructureType[StructureType.SEMAPHORE_SIGNAL_INFO = 1000207005] = "SEMAPHORE_SIGNAL_INFO", StructureType[StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000] = "PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES", StructureType[StructureType.BUFFER_DEVICE_ADDRESS_INFO = 1000244001] = "BUFFER_DEVICE_ADDRESS_INFO", StructureType[StructureType.BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002] = "BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO", StructureType[StructureType.MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003] = "MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO", StructureType[StructureType.DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004] = "DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53] = "PHYSICAL_DEVICE_VULKAN_1_3_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54] = "PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES", StructureType[StructureType.PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000] = "PIPELINE_CREATION_FEEDBACK_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000] = "PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000] = "PHYSICAL_DEVICE_TOOL_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000] = "PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000] = "PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES", StructureType[StructureType.DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001] = "DEVICE_PRIVATE_DATA_CREATE_INFO", StructureType[StructureType.PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002] = "PRIVATE_DATA_SLOT_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000] = "PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES", StructureType[StructureType.MEMORY_BARRIER_2 = 1000314000] = "MEMORY_BARRIER_2", StructureType[StructureType.BUFFER_MEMORY_BARRIER_2 = 1000314001] = "BUFFER_MEMORY_BARRIER_2", StructureType[StructureType.IMAGE_MEMORY_BARRIER_2 = 1000314002] = "IMAGE_MEMORY_BARRIER_2", StructureType[StructureType.DEPENDENCY_INFO = 1000314003] = "DEPENDENCY_INFO", StructureType[StructureType.SUBMIT_INFO_2 = 1000314004] = "SUBMIT_INFO_2", StructureType[StructureType.SEMAPHORE_SUBMIT_INFO = 1000314005] = "SEMAPHORE_SUBMIT_INFO", StructureType[StructureType.COMMAND_BUFFER_SUBMIT_INFO = 1000314006] = "COMMAND_BUFFER_SUBMIT_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007] = "PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000] = "PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000] = "PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES", StructureType[StructureType.COPY_BUFFER_INFO_2 = 1000337000] = "COPY_BUFFER_INFO_2", StructureType[StructureType.COPY_IMAGE_INFO_2 = 1000337001] = "COPY_IMAGE_INFO_2", StructureType[StructureType.COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002] = "COPY_BUFFER_TO_IMAGE_INFO_2", StructureType[StructureType.COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003] = "COPY_IMAGE_TO_BUFFER_INFO_2", StructureType[StructureType.BLIT_IMAGE_INFO_2 = 1000337004] = "BLIT_IMAGE_INFO_2", StructureType[StructureType.RESOLVE_IMAGE_INFO_2 = 1000337005] = "RESOLVE_IMAGE_INFO_2", StructureType[StructureType.BUFFER_COPY_2 = 1000337006] = "BUFFER_COPY_2", StructureType[StructureType.IMAGE_COPY_2 = 1000337007] = "IMAGE_COPY_2", StructureType[StructureType.IMAGE_BLIT_2 = 1000337008] = "IMAGE_BLIT_2", StructureType[StructureType.BUFFER_IMAGE_COPY_2 = 1000337009] = "BUFFER_IMAGE_COPY_2", StructureType[StructureType.IMAGE_RESOLVE_2 = 1000337010] = "IMAGE_RESOLVE_2", StructureType[StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000] = "PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES", StructureType[StructureType.PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001] = "PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002] = "PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000] = "PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001] = "PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES", StructureType[StructureType.WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002] = "WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK", StructureType[StructureType.DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003] = "DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000] = "PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES", StructureType[StructureType.RENDERING_INFO = 1000044000] = "RENDERING_INFO", StructureType[StructureType.RENDERING_ATTACHMENT_INFO = 1000044001] = "RENDERING_ATTACHMENT_INFO", StructureType[StructureType.PIPELINE_RENDERING_CREATE_INFO = 1000044002] = "PIPELINE_RENDERING_CREATE_INFO", StructureType[StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003] = "PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004] = "COMMAND_BUFFER_INHERITANCE_RENDERING_INFO", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000] = "PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001] = "PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES", StructureType[StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001] = "PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES", StructureType[StructureType.FORMAT_PROPERTIES_3 = 1000360000] = "FORMAT_PROPERTIES_3", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000] = "PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001] = "PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES", StructureType[StructureType.DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002] = "DEVICE_BUFFER_MEMORY_REQUIREMENTS", StructureType[StructureType.DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003] = "DEVICE_IMAGE_MEMORY_REQUIREMENTS", StructureType[StructureType.SWAPCHAIN_CREATE_INFO_KHR = 1000001000] = "SWAPCHAIN_CREATE_INFO_KHR", StructureType[StructureType.PRESENT_INFO_KHR = 1000001001] = "PRESENT_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007] = "DEVICE_GROUP_PRESENT_CAPABILITIES_KHR", StructureType[StructureType.IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008] = "IMAGE_SWAPCHAIN_CREATE_INFO_KHR", StructureType[StructureType.BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009] = "BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR", StructureType[StructureType.ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010] = "ACQUIRE_NEXT_IMAGE_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011] = "DEVICE_GROUP_PRESENT_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012] = "DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR", StructureType[StructureType.DISPLAY_MODE_CREATE_INFO_KHR = 1000002000] = "DISPLAY_MODE_CREATE_INFO_KHR", StructureType[StructureType.DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001] = "DISPLAY_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.DISPLAY_PRESENT_INFO_KHR = 1000003000] = "DISPLAY_PRESENT_INFO_KHR", StructureType[StructureType.XLIB_SURFACE_CREATE_INFO_KHR = 1000004000] = "XLIB_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.XCB_SURFACE_CREATE_INFO_KHR = 1000005000] = "XCB_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000] = "WAYLAND_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000] = "ANDROID_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.WIN32_SURFACE_CREATE_INFO_KHR = 1000009000] = "WIN32_SURFACE_CREATE_INFO_KHR", StructureType[StructureType.NATIVE_BUFFER_ANDROID = 1000010000] = "NATIVE_BUFFER_ANDROID", StructureType[StructureType.SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001] = "SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID", StructureType[StructureType.PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002] = "PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID", StructureType[StructureType.DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000] = "DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT", StructureType[StructureType.DEBUG_REPORT_CREATE_INFO_EXT = 1000011000] = "DEBUG_REPORT_CREATE_INFO_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000] = "PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD", StructureType[StructureType.DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000] = "DEBUG_MARKER_OBJECT_NAME_INFO_EXT", StructureType[StructureType.DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001] = "DEBUG_MARKER_OBJECT_TAG_INFO_EXT", StructureType[StructureType.DEBUG_MARKER_MARKER_INFO_EXT = 1000022002] = "DEBUG_MARKER_MARKER_INFO_EXT", StructureType[StructureType.VIDEO_PROFILE_INFO_KHR = 1000023000] = "VIDEO_PROFILE_INFO_KHR", StructureType[StructureType.VIDEO_CAPABILITIES_KHR = 1000023001] = "VIDEO_CAPABILITIES_KHR", StructureType[StructureType.VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002] = "VIDEO_PICTURE_RESOURCE_INFO_KHR", StructureType[StructureType.VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003] = "VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR", StructureType[StructureType.BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004] = "BIND_VIDEO_SESSION_MEMORY_INFO_KHR", StructureType[StructureType.VIDEO_SESSION_CREATE_INFO_KHR = 1000023005] = "VIDEO_SESSION_CREATE_INFO_KHR", StructureType[StructureType.VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006] = "VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR", StructureType[StructureType.VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007] = "VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR", StructureType[StructureType.VIDEO_BEGIN_CODING_INFO_KHR = 1000023008] = "VIDEO_BEGIN_CODING_INFO_KHR", StructureType[StructureType.VIDEO_END_CODING_INFO_KHR = 1000023009] = "VIDEO_END_CODING_INFO_KHR", StructureType[StructureType.VIDEO_CODING_CONTROL_INFO_KHR = 1000023010] = "VIDEO_CODING_CONTROL_INFO_KHR", StructureType[StructureType.VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011] = "VIDEO_REFERENCE_SLOT_INFO_KHR", StructureType[StructureType.QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012] = "QUEUE_FAMILY_VIDEO_PROPERTIES_KHR", StructureType[StructureType.VIDEO_PROFILE_LIST_INFO_KHR = 1000023013] = "VIDEO_PROFILE_LIST_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014] = "PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR", StructureType[StructureType.VIDEO_FORMAT_PROPERTIES_KHR = 1000023015] = "VIDEO_FORMAT_PROPERTIES_KHR", StructureType[StructureType.QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016] = "QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR", StructureType[StructureType.VIDEO_DECODE_INFO_KHR = 1000024000] = "VIDEO_DECODE_INFO_KHR", StructureType[StructureType.VIDEO_DECODE_CAPABILITIES_KHR = 1000024001] = "VIDEO_DECODE_CAPABILITIES_KHR", StructureType[StructureType.VIDEO_DECODE_USAGE_INFO_KHR = 1000024002] = "VIDEO_DECODE_USAGE_INFO_KHR", StructureType[StructureType.DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000] = "DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV", StructureType[StructureType.DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001] = "DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV", StructureType[StructureType.DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002] = "DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000] = "PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001] = "PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002] = "PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT", StructureType[StructureType.CU_MODULE_CREATE_INFO_NVX = 1000029000] = "CU_MODULE_CREATE_INFO_NVX", StructureType[StructureType.CU_FUNCTION_CREATE_INFO_NVX = 1000029001] = "CU_FUNCTION_CREATE_INFO_NVX", StructureType[StructureType.CU_LAUNCH_INFO_NVX = 1000029002] = "CU_LAUNCH_INFO_NVX", StructureType[StructureType.IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000] = "IMAGE_VIEW_HANDLE_INFO_NVX", StructureType[StructureType.IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001] = "IMAGE_VIEW_ADDRESS_PROPERTIES_NVX", StructureType[StructureType.VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000] = "VIDEO_ENCODE_H264_CAPABILITIES_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038001] = "VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038002] = "VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038003] = "VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038004] = "VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT = 1000038005] = "VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT = 1000038006] = "VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_PROFILE_INFO_EXT = 1000038007] = "VIDEO_ENCODE_H264_PROFILE_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = 1000038008] = "VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = 1000038009] = "VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT = 1000038010] = "VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_CAPABILITIES_EXT = 1000039000] = "VIDEO_ENCODE_H265_CAPABILITIES_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000039001] = "VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000039002] = "VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT = 1000039003] = "VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = 1000039004] = "VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT = 1000039005] = "VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT = 1000039006] = "VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_PROFILE_INFO_EXT = 1000039007] = "VIDEO_ENCODE_H265_PROFILE_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT = 1000039008] = "VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = 1000039009] = "VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT", StructureType[StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = 1000039010] = "VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000] = "VIDEO_DECODE_H264_CAPABILITIES_EXT", StructureType[StructureType.VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040001] = "VIDEO_DECODE_H264_PICTURE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H264_PROFILE_INFO_EXT = 1000040003] = "VIDEO_DECODE_H264_PROFILE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040004] = "VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040005] = "VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040006] = "VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT", StructureType[StructureType.TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000] = "TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD", StructureType[StructureType.RENDERING_INFO_KHR = 1000044000] = "RENDERING_INFO_KHR", StructureType[StructureType.RENDERING_ATTACHMENT_INFO_KHR = 1000044001] = "RENDERING_ATTACHMENT_INFO_KHR", StructureType[StructureType.PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002] = "PIPELINE_RENDERING_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003] = "PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004] = "COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR", StructureType[StructureType.RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006] = "RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR", StructureType[StructureType.RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007] = "RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT", StructureType[StructureType.ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008] = "ATTACHMENT_SAMPLE_COUNT_INFO_AMD", StructureType[StructureType.ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008] = "ATTACHMENT_SAMPLE_COUNT_INFO_NV", StructureType[StructureType.MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009] = "MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX", StructureType[StructureType.STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000] = "STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP", StructureType[StructureType.PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000] = "PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV", StructureType[StructureType.RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000] = "RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001] = "PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002] = "PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR", StructureType[StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000] = "EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV", StructureType[StructureType.EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001] = "EXPORT_MEMORY_ALLOCATE_INFO_NV", StructureType[StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000] = "IMPORT_MEMORY_WIN32_HANDLE_INFO_NV", StructureType[StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001] = "EXPORT_MEMORY_WIN32_HANDLE_INFO_NV", StructureType[StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000] = "WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000] = "PHYSICAL_DEVICE_FEATURES_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001] = "PHYSICAL_DEVICE_PROPERTIES_2_KHR", StructureType[StructureType.FORMAT_PROPERTIES_2_KHR = 1000059002] = "FORMAT_PROPERTIES_2_KHR", StructureType[StructureType.IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003] = "IMAGE_FORMAT_PROPERTIES_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004] = "PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR", StructureType[StructureType.QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005] = "QUEUE_FAMILY_PROPERTIES_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006] = "PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR", StructureType[StructureType.SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007] = "SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008] = "PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR", StructureType[StructureType.MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000] = "MEMORY_ALLOCATE_FLAGS_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003] = "DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004] = "DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005] = "DEVICE_GROUP_SUBMIT_INFO_KHR", StructureType[StructureType.DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006] = "DEVICE_GROUP_BIND_SPARSE_INFO_KHR", StructureType[StructureType.BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013] = "BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR", StructureType[StructureType.BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014] = "BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR", StructureType[StructureType.VALIDATION_FLAGS_EXT = 1000061000] = "VALIDATION_FLAGS_EXT", StructureType[StructureType.VI_SURFACE_CREATE_INFO_NN = 1000062000] = "VI_SURFACE_CREATE_INFO_NN", StructureType[StructureType.PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000] = "PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT", StructureType[StructureType.IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000] = "IMAGE_VIEW_ASTC_DECODE_MODE_EXT", StructureType[StructureType.PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001] = "PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT", StructureType[StructureType.PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000] = "PIPELINE_ROBUSTNESS_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001] = "PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002] = "PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000] = "PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR", StructureType[StructureType.DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001] = "DEVICE_GROUP_DEVICE_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000] = "PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR", StructureType[StructureType.EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001] = "EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002] = "PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR", StructureType[StructureType.EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003] = "EXTERNAL_BUFFER_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004] = "PHYSICAL_DEVICE_ID_PROPERTIES_KHR", StructureType[StructureType.EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000] = "EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR", StructureType[StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001] = "EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR", StructureType[StructureType.EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002] = "EXPORT_MEMORY_ALLOCATE_INFO_KHR", StructureType[StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000] = "IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001] = "EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002] = "MEMORY_WIN32_HANDLE_PROPERTIES_KHR", StructureType[StructureType.MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003] = "MEMORY_GET_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.IMPORT_MEMORY_FD_INFO_KHR = 1000074000] = "IMPORT_MEMORY_FD_INFO_KHR", StructureType[StructureType.MEMORY_FD_PROPERTIES_KHR = 1000074001] = "MEMORY_FD_PROPERTIES_KHR", StructureType[StructureType.MEMORY_GET_FD_INFO_KHR = 1000074002] = "MEMORY_GET_FD_INFO_KHR", StructureType[StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000] = "WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000] = "PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR", StructureType[StructureType.EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001] = "EXTERNAL_SEMAPHORE_PROPERTIES_KHR", StructureType[StructureType.EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000] = "EXPORT_SEMAPHORE_CREATE_INFO_KHR", StructureType[StructureType.IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000] = "IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001] = "EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002] = "D3D12_FENCE_SUBMIT_INFO_KHR", StructureType[StructureType.SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003] = "SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000] = "IMPORT_SEMAPHORE_FD_INFO_KHR", StructureType[StructureType.SEMAPHORE_GET_FD_INFO_KHR = 1000079001] = "SEMAPHORE_GET_FD_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000] = "PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000] = "COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001] = "PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT", StructureType[StructureType.CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002] = "CONDITIONAL_RENDERING_BEGIN_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000] = "PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000] = "PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000] = "PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR", StructureType[StructureType.PRESENT_REGIONS_KHR = 1000084000] = "PRESENT_REGIONS_KHR", StructureType[StructureType.DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000] = "DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR", StructureType[StructureType.PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000] = "PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV", StructureType[StructureType.SURFACE_CAPABILITIES_2_EXT = 1000090000] = "SURFACE_CAPABILITIES_2_EXT", StructureType[StructureType.SURFACE_CAPABILITIES2_EXT = 1000090000] = "SURFACE_CAPABILITIES2_EXT", StructureType[StructureType.DISPLAY_POWER_INFO_EXT = 1000091000] = "DISPLAY_POWER_INFO_EXT", StructureType[StructureType.DEVICE_EVENT_INFO_EXT = 1000091001] = "DEVICE_EVENT_INFO_EXT", StructureType[StructureType.DISPLAY_EVENT_INFO_EXT = 1000091002] = "DISPLAY_EVENT_INFO_EXT", StructureType[StructureType.SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003] = "SWAPCHAIN_COUNTER_CREATE_INFO_EXT", StructureType[StructureType.PRESENT_TIMES_INFO_GOOGLE = 1000092000] = "PRESENT_TIMES_INFO_GOOGLE", StructureType[StructureType.PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000] = "PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX", StructureType[StructureType.PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000] = "PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000] = "PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001] = "PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000] = "PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001] = "PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000] = "PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001] = "PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT", StructureType[StructureType.HDR_METADATA_EXT = 1000105000] = "HDR_METADATA_EXT", StructureType[StructureType.PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000] = "PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR", StructureType[StructureType.FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001] = "FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR", StructureType[StructureType.FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002] = "FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR", StructureType[StructureType.RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003] = "RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR", StructureType[StructureType.ATTACHMENT_DESCRIPTION_2_KHR = 1000109000] = "ATTACHMENT_DESCRIPTION_2_KHR", StructureType[StructureType.ATTACHMENT_REFERENCE_2_KHR = 1000109001] = "ATTACHMENT_REFERENCE_2_KHR", StructureType[StructureType.SUBPASS_DESCRIPTION_2_KHR = 1000109002] = "SUBPASS_DESCRIPTION_2_KHR", StructureType[StructureType.SUBPASS_DEPENDENCY_2_KHR = 1000109003] = "SUBPASS_DEPENDENCY_2_KHR", StructureType[StructureType.RENDER_PASS_CREATE_INFO_2_KHR = 1000109004] = "RENDER_PASS_CREATE_INFO_2_KHR", StructureType[StructureType.SUBPASS_BEGIN_INFO_KHR = 1000109005] = "SUBPASS_BEGIN_INFO_KHR", StructureType[StructureType.SUBPASS_END_INFO_KHR = 1000109006] = "SUBPASS_END_INFO_KHR", StructureType[StructureType.SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000] = "SHARED_PRESENT_SURFACE_CAPABILITIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000] = "PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR", StructureType[StructureType.EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001] = "EXTERNAL_FENCE_PROPERTIES_KHR", StructureType[StructureType.EXPORT_FENCE_CREATE_INFO_KHR = 1000113000] = "EXPORT_FENCE_CREATE_INFO_KHR", StructureType[StructureType.IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000] = "IMPORT_FENCE_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001] = "EXPORT_FENCE_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002] = "FENCE_GET_WIN32_HANDLE_INFO_KHR", StructureType[StructureType.IMPORT_FENCE_FD_INFO_KHR = 1000115000] = "IMPORT_FENCE_FD_INFO_KHR", StructureType[StructureType.FENCE_GET_FD_INFO_KHR = 1000115001] = "FENCE_GET_FD_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000] = "PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001] = "PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR", StructureType[StructureType.QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002] = "QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR", StructureType[StructureType.PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003] = "PERFORMANCE_QUERY_SUBMIT_INFO_KHR", StructureType[StructureType.ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004] = "ACQUIRE_PROFILING_LOCK_INFO_KHR", StructureType[StructureType.PERFORMANCE_COUNTER_KHR = 1000116005] = "PERFORMANCE_COUNTER_KHR", StructureType[StructureType.PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006] = "PERFORMANCE_COUNTER_DESCRIPTION_KHR", StructureType[StructureType.PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000] = "PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR", StructureType[StructureType.RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001] = "RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR", StructureType[StructureType.IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002] = "IMAGE_VIEW_USAGE_CREATE_INFO_KHR", StructureType[StructureType.PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003] = "PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000] = "PHYSICAL_DEVICE_SURFACE_INFO_2_KHR", StructureType[StructureType.SURFACE_CAPABILITIES_2_KHR = 1000119001] = "SURFACE_CAPABILITIES_2_KHR", StructureType[StructureType.SURFACE_FORMAT_2_KHR = 1000119002] = "SURFACE_FORMAT_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000] = "PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000] = "PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR", StructureType[StructureType.DISPLAY_PROPERTIES_2_KHR = 1000121000] = "DISPLAY_PROPERTIES_2_KHR", StructureType[StructureType.DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001] = "DISPLAY_PLANE_PROPERTIES_2_KHR", StructureType[StructureType.DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002] = "DISPLAY_MODE_PROPERTIES_2_KHR", StructureType[StructureType.DISPLAY_PLANE_INFO_2_KHR = 1000121003] = "DISPLAY_PLANE_INFO_2_KHR", StructureType[StructureType.DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004] = "DISPLAY_PLANE_CAPABILITIES_2_KHR", StructureType[StructureType.IOS_SURFACE_CREATE_INFO_MVK = 1000122000] = "IOS_SURFACE_CREATE_INFO_MVK", StructureType[StructureType.MACOS_SURFACE_CREATE_INFO_MVK = 1000123000] = "MACOS_SURFACE_CREATE_INFO_MVK", StructureType[StructureType.MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000] = "MEMORY_DEDICATED_REQUIREMENTS_KHR", StructureType[StructureType.MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001] = "MEMORY_DEDICATED_ALLOCATE_INFO_KHR", StructureType[StructureType.DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000] = "DEBUG_UTILS_OBJECT_NAME_INFO_EXT", StructureType[StructureType.DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001] = "DEBUG_UTILS_OBJECT_TAG_INFO_EXT", StructureType[StructureType.DEBUG_UTILS_LABEL_EXT = 1000128002] = "DEBUG_UTILS_LABEL_EXT", StructureType[StructureType.DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003] = "DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT", StructureType[StructureType.DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004] = "DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT", StructureType[StructureType.ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000] = "ANDROID_HARDWARE_BUFFER_USAGE_ANDROID", StructureType[StructureType.ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001] = "ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID", StructureType[StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002] = "ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID", StructureType[StructureType.IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003] = "IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", StructureType[StructureType.MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004] = "MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", StructureType[StructureType.EXTERNAL_FORMAT_ANDROID = 1000129005] = "EXTERNAL_FORMAT_ANDROID", StructureType[StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006] = "ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID", StructureType[StructureType.PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000] = "PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT", StructureType[StructureType.SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001] = "SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000] = "PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001] = "PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT", StructureType[StructureType.WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002] = "WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT", StructureType[StructureType.DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003] = "DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT", StructureType[StructureType.SAMPLE_LOCATIONS_INFO_EXT = 1000143000] = "SAMPLE_LOCATIONS_INFO_EXT", StructureType[StructureType.RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001] = "RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT", StructureType[StructureType.PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002] = "PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003] = "PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT", StructureType[StructureType.MULTISAMPLE_PROPERTIES_EXT = 1000143004] = "MULTISAMPLE_PROPERTIES_EXT", StructureType[StructureType.BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000] = "BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR", StructureType[StructureType.IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001] = "IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR", StructureType[StructureType.IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002] = "IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR", StructureType[StructureType.MEMORY_REQUIREMENTS_2_KHR = 1000146003] = "MEMORY_REQUIREMENTS_2_KHR", StructureType[StructureType.SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004] = "SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR", StructureType[StructureType.IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000] = "IMAGE_FORMAT_LIST_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000] = "PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001] = "PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002] = "PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT", StructureType[StructureType.PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000] = "PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV", StructureType[StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007] = "WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000] = "ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002] = "ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003] = "ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004] = "ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005] = "ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006] = "ACCELERATION_STRUCTURE_GEOMETRY_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009] = "ACCELERATION_STRUCTURE_VERSION_INFO_KHR", StructureType[StructureType.COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010] = "COPY_ACCELERATION_STRUCTURE_INFO_KHR", StructureType[StructureType.COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011] = "COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR", StructureType[StructureType.COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012] = "COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013] = "PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014] = "PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017] = "ACCELERATION_STRUCTURE_CREATE_INFO_KHR", StructureType[StructureType.ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020] = "ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000] = "PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001] = "PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR", StructureType[StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015] = "RAY_TRACING_PIPELINE_CREATE_INFO_KHR", StructureType[StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016] = "RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR", StructureType[StructureType.RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018] = "RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013] = "PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR", StructureType[StructureType.PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000] = "PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000] = "PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001] = "PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000] = "SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001] = "SAMPLER_YCBCR_CONVERSION_INFO_KHR", StructureType[StructureType.BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002] = "BIND_IMAGE_PLANE_MEMORY_INFO_KHR", StructureType[StructureType.IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003] = "IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004] = "PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR", StructureType[StructureType.SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005] = "SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR", StructureType[StructureType.BIND_BUFFER_MEMORY_INFO_KHR = 1000157000] = "BIND_BUFFER_MEMORY_INFO_KHR", StructureType[StructureType.BIND_IMAGE_MEMORY_INFO_KHR = 1000157001] = "BIND_IMAGE_MEMORY_INFO_KHR", StructureType[StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000] = "DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002] = "PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT", StructureType[StructureType.IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003] = "IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT", StructureType[StructureType.IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004] = "IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT", StructureType[StructureType.IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005] = "IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT", StructureType[StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006] = "DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT", StructureType[StructureType.VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000] = "VALIDATION_CACHE_CREATE_INFO_EXT", StructureType[StructureType.SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001] = "SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000] = "DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001] = "PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002] = "PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT", StructureType[StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003] = "DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT", StructureType[StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004] = "DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000] = "PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001] = "PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR", StructureType[StructureType.PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000] = "PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001] = "PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002] = "PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV", StructureType[StructureType.PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005] = "PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV", StructureType[StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000] = "RAY_TRACING_PIPELINE_CREATE_INFO_NV", StructureType[StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001] = "ACCELERATION_STRUCTURE_CREATE_INFO_NV", StructureType[StructureType.GEOMETRY_NV = 1000165003] = "GEOMETRY_NV", StructureType[StructureType.GEOMETRY_TRIANGLES_NV = 1000165004] = "GEOMETRY_TRIANGLES_NV", StructureType[StructureType.GEOMETRY_AABB_NV = 1000165005] = "GEOMETRY_AABB_NV", StructureType[StructureType.BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006] = "BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV", StructureType[StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007] = "WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV", StructureType[StructureType.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008] = "ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009] = "PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV", StructureType[StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011] = "RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV", StructureType[StructureType.ACCELERATION_STRUCTURE_INFO_NV = 1000165012] = "ACCELERATION_STRUCTURE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000] = "PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV", StructureType[StructureType.PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001] = "PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000] = "PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001] = "DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000] = "PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT", StructureType[StructureType.FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001] = "FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT", StructureType[StructureType.DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000] = "DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000] = "PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000] = "PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR", StructureType[StructureType.IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000] = "IMPORT_MEMORY_HOST_POINTER_INFO_EXT", StructureType[StructureType.MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001] = "MEMORY_HOST_POINTER_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002] = "PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000] = "PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000] = "PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR", StructureType[StructureType.PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000] = "PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD", StructureType[StructureType.CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000] = "CALIBRATED_TIMESTAMP_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000] = "PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD", StructureType[StructureType.VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000] = "VIDEO_DECODE_H265_CAPABILITIES_EXT", StructureType[StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187001] = "VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187002] = "VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H265_PROFILE_INFO_EXT = 1000187003] = "VIDEO_DECODE_H265_PROFILE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187004] = "VIDEO_DECODE_H265_PICTURE_INFO_EXT", StructureType[StructureType.VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187005] = "VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT", StructureType[StructureType.DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000] = "DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000] = "PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR", StructureType[StructureType.QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001] = "QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR", StructureType[StructureType.DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000] = "DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD", StructureType[StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000] = "PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001] = "PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002] = "PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT", StructureType[StructureType.PRESENT_FRAME_TOKEN_GGP = 1000191000] = "PRESENT_FRAME_TOKEN_GGP", StructureType[StructureType.PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000] = "PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000] = "PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000] = "PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000] = "PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR", StructureType[StructureType.SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001] = "SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR", StructureType[StructureType.PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000] = "PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000] = "PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001] = "PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000] = "PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000] = "PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV", StructureType[StructureType.PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000] = "PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002] = "PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV", StructureType[StructureType.CHECKPOINT_DATA_NV = 1000206000] = "CHECKPOINT_DATA_NV", StructureType[StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001] = "QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000] = "PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001] = "PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR", StructureType[StructureType.SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002] = "SEMAPHORE_TYPE_CREATE_INFO_KHR", StructureType[StructureType.TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003] = "TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR", StructureType[StructureType.SEMAPHORE_WAIT_INFO_KHR = 1000207004] = "SEMAPHORE_WAIT_INFO_KHR", StructureType[StructureType.SEMAPHORE_SIGNAL_INFO_KHR = 1000207005] = "SEMAPHORE_SIGNAL_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000] = "PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL", StructureType[StructureType.QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000] = "QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL", StructureType[StructureType.QUERY_POOL_CREATE_INFO_INTEL = 1000210000] = "QUERY_POOL_CREATE_INFO_INTEL", StructureType[StructureType.INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001] = "INITIALIZE_PERFORMANCE_API_INFO_INTEL", StructureType[StructureType.PERFORMANCE_MARKER_INFO_INTEL = 1000210002] = "PERFORMANCE_MARKER_INFO_INTEL", StructureType[StructureType.PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003] = "PERFORMANCE_STREAM_MARKER_INFO_INTEL", StructureType[StructureType.PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004] = "PERFORMANCE_OVERRIDE_INFO_INTEL", StructureType[StructureType.PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005] = "PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL", StructureType[StructureType.PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000] = "PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000] = "PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT", StructureType[StructureType.DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000] = "DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD", StructureType[StructureType.SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001] = "SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD", StructureType[StructureType.IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000] = "IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000] = "PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR", StructureType[StructureType.METAL_SURFACE_CREATE_INFO_EXT = 1000217000] = "METAL_SURFACE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT", StructureType[StructureType.RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002] = "RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000] = "PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000] = "PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001] = "PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002] = "PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT", StructureType[StructureType.FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000] = "FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR", StructureType[StructureType.PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001] = "PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002] = "PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003] = "PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004] = "PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000] = "PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD", StructureType[StructureType.PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000] = "PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000] = "PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000] = "PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000] = "PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT", StructureType[StructureType.MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001] = "MEMORY_PRIORITY_ALLOCATE_INFO_EXT", StructureType[StructureType.SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000] = "SURFACE_PROTECTED_CAPABILITIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000] = "PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000] = "PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR", StructureType[StructureType.ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001] = "ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR", StructureType[StructureType.ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002] = "ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR", StructureType[StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000] = "PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000] = "PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT", StructureType[StructureType.BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001] = "BUFFER_DEVICE_ADDRESS_INFO_EXT", StructureType[StructureType.BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002] = "BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000] = "PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT", StructureType[StructureType.IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000] = "IMAGE_STENCIL_USAGE_CREATE_INFO_EXT", StructureType[StructureType.VALIDATION_FEATURES_EXT = 1000247000] = "VALIDATION_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000] = "PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000] = "PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV", StructureType[StructureType.COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001] = "COOPERATIVE_MATRIX_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002] = "PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000] = "PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV", StructureType[StructureType.PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001] = "PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV", StructureType[StructureType.FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002] = "FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000] = "PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000] = "PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000] = "PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000] = "PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001] = "PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002] = "PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT", StructureType[StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000] = "SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT", StructureType[StructureType.SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002] = "SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT", StructureType[StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001] = "SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT", StructureType[StructureType.HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000] = "HEADLESS_SURFACE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000] = "PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR", StructureType[StructureType.BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001] = "BUFFER_DEVICE_ADDRESS_INFO_KHR", StructureType[StructureType.BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002] = "BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR", StructureType[StructureType.MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003] = "MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR", StructureType[StructureType.DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004] = "DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000] = "PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT", StructureType[StructureType.PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001] = "PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002] = "PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000] = "PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000] = "PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000] = "PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000] = "PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000] = "PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR", StructureType[StructureType.PIPELINE_INFO_KHR = 1000269001] = "PIPELINE_INFO_KHR", StructureType[StructureType.PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002] = "PIPELINE_EXECUTABLE_PROPERTIES_KHR", StructureType[StructureType.PIPELINE_EXECUTABLE_INFO_KHR = 1000269003] = "PIPELINE_EXECUTABLE_INFO_KHR", StructureType[StructureType.PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004] = "PIPELINE_EXECUTABLE_STATISTIC_KHR", StructureType[StructureType.PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005] = "PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000] = "PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000] = "PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000] = "PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV", StructureType[StructureType.GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001] = "GRAPHICS_SHADER_GROUP_CREATE_INFO_NV", StructureType[StructureType.GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002] = "GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV", StructureType[StructureType.INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003] = "INDIRECT_COMMANDS_LAYOUT_TOKEN_NV", StructureType[StructureType.INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004] = "INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV", StructureType[StructureType.GENERATED_COMMANDS_INFO_NV = 1000277005] = "GENERATED_COMMANDS_INFO_NV", StructureType[StructureType.GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006] = "GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007] = "PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000] = "PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001] = "COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000] = "PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001] = "PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000] = "PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001] = "PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT", StructureType[StructureType.COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000] = "COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM", StructureType[StructureType.RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001] = "RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000] = "PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT", StructureType[StructureType.DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001] = "DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT", StructureType[StructureType.DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002] = "DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT", StructureType[StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000] = "PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001] = "PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT", StructureType[StructureType.SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000] = "SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001] = "PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002] = "PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT", StructureType[StructureType.PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000] = "PIPELINE_LIBRARY_CREATE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000] = "PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV", StructureType[StructureType.SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001] = "SURFACE_CAPABILITIES_PRESENT_BARRIER_NV", StructureType[StructureType.SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002] = "SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV", StructureType[StructureType.PRESENT_ID_KHR = 1000294000] = "PRESENT_ID_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001] = "PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000] = "PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT", StructureType[StructureType.DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001] = "DEVICE_PRIVATE_DATA_CREATE_INFO_EXT", StructureType[StructureType.PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002] = "PRIVATE_DATA_SLOT_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000] = "PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT", StructureType[StructureType.VIDEO_ENCODE_INFO_KHR = 1000299000] = "VIDEO_ENCODE_INFO_KHR", StructureType[StructureType.VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001] = "VIDEO_ENCODE_RATE_CONTROL_INFO_KHR", StructureType[StructureType.VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002] = "VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR", StructureType[StructureType.VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003] = "VIDEO_ENCODE_CAPABILITIES_KHR", StructureType[StructureType.VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004] = "VIDEO_ENCODE_USAGE_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000] = "PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV", StructureType[StructureType.DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001] = "DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV", StructureType[StructureType.RESERVED_QCOM = 1000309000] = "RESERVED_QCOM", StructureType[StructureType.EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000] = "EXPORT_METAL_OBJECT_CREATE_INFO_EXT", StructureType[StructureType.EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001] = "EXPORT_METAL_OBJECTS_INFO_EXT", StructureType[StructureType.EXPORT_METAL_DEVICE_INFO_EXT = 1000311002] = "EXPORT_METAL_DEVICE_INFO_EXT", StructureType[StructureType.EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003] = "EXPORT_METAL_COMMAND_QUEUE_INFO_EXT", StructureType[StructureType.EXPORT_METAL_BUFFER_INFO_EXT = 1000311004] = "EXPORT_METAL_BUFFER_INFO_EXT", StructureType[StructureType.IMPORT_METAL_BUFFER_INFO_EXT = 1000311005] = "IMPORT_METAL_BUFFER_INFO_EXT", StructureType[StructureType.EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006] = "EXPORT_METAL_TEXTURE_INFO_EXT", StructureType[StructureType.IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007] = "IMPORT_METAL_TEXTURE_INFO_EXT", StructureType[StructureType.EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008] = "EXPORT_METAL_IO_SURFACE_INFO_EXT", StructureType[StructureType.IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009] = "IMPORT_METAL_IO_SURFACE_INFO_EXT", StructureType[StructureType.EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010] = "EXPORT_METAL_SHARED_EVENT_INFO_EXT", StructureType[StructureType.IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011] = "IMPORT_METAL_SHARED_EVENT_INFO_EXT", StructureType[StructureType.MEMORY_BARRIER_2_KHR = 1000314000] = "MEMORY_BARRIER_2_KHR", StructureType[StructureType.BUFFER_MEMORY_BARRIER_2_KHR = 1000314001] = "BUFFER_MEMORY_BARRIER_2_KHR", StructureType[StructureType.IMAGE_MEMORY_BARRIER_2_KHR = 1000314002] = "IMAGE_MEMORY_BARRIER_2_KHR", StructureType[StructureType.DEPENDENCY_INFO_KHR = 1000314003] = "DEPENDENCY_INFO_KHR", StructureType[StructureType.SUBMIT_INFO_2_KHR = 1000314004] = "SUBMIT_INFO_2_KHR", StructureType[StructureType.SEMAPHORE_SUBMIT_INFO_KHR = 1000314005] = "SEMAPHORE_SUBMIT_INFO_KHR", StructureType[StructureType.COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006] = "COMMAND_BUFFER_SUBMIT_INFO_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007] = "PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR", StructureType[StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008] = "QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV", StructureType[StructureType.CHECKPOINT_DATA_2_NV = 1000314009] = "CHECKPOINT_DATA_2_NV", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000] = "PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001] = "PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002] = "PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT", StructureType[StructureType.DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003] = "DESCRIPTOR_ADDRESS_INFO_EXT", StructureType[StructureType.DESCRIPTOR_GET_INFO_EXT = 1000316004] = "DESCRIPTOR_GET_INFO_EXT", StructureType[StructureType.BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005] = "BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", StructureType[StructureType.IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006] = "IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", StructureType[StructureType.IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007] = "IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", StructureType[StructureType.SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008] = "SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", StructureType[StructureType.OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010] = "OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT", StructureType[StructureType.DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011] = "DESCRIPTOR_BUFFER_BINDING_INFO_EXT", StructureType[StructureType.DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012] = "DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT", StructureType[StructureType.ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009] = "ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000] = "PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001] = "PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT", StructureType[StructureType.GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002] = "GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000] = "PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000] = "PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000] = "PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000] = "PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000] = "PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000] = "PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001] = "PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV", StructureType[StructureType.PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002] = "PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV", StructureType[StructureType.ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000] = "ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001] = "PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV", StructureType[StructureType.ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002] = "ACCELERATION_STRUCTURE_MOTION_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000] = "PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001] = "PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000] = "PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT", StructureType[StructureType.COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000] = "COPY_COMMAND_TRANSFORM_INFO_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000] = "PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000] = "PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR", StructureType[StructureType.COPY_BUFFER_INFO_2_KHR = 1000337000] = "COPY_BUFFER_INFO_2_KHR", StructureType[StructureType.COPY_IMAGE_INFO_2_KHR = 1000337001] = "COPY_IMAGE_INFO_2_KHR", StructureType[StructureType.COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002] = "COPY_BUFFER_TO_IMAGE_INFO_2_KHR", StructureType[StructureType.COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003] = "COPY_IMAGE_TO_BUFFER_INFO_2_KHR", StructureType[StructureType.BLIT_IMAGE_INFO_2_KHR = 1000337004] = "BLIT_IMAGE_INFO_2_KHR", StructureType[StructureType.RESOLVE_IMAGE_INFO_2_KHR = 1000337005] = "RESOLVE_IMAGE_INFO_2_KHR", StructureType[StructureType.BUFFER_COPY_2_KHR = 1000337006] = "BUFFER_COPY_2_KHR", StructureType[StructureType.IMAGE_COPY_2_KHR = 1000337007] = "IMAGE_COPY_2_KHR", StructureType[StructureType.IMAGE_BLIT_2_KHR = 1000337008] = "IMAGE_BLIT_2_KHR", StructureType[StructureType.BUFFER_IMAGE_COPY_2_KHR = 1000337009] = "BUFFER_IMAGE_COPY_2_KHR", StructureType[StructureType.IMAGE_RESOLVE_2_KHR = 1000337010] = "IMAGE_RESOLVE_2_KHR", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000] = "PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT", StructureType[StructureType.IMAGE_COMPRESSION_CONTROL_EXT = 1000338001] = "IMAGE_COMPRESSION_CONTROL_EXT", StructureType[StructureType.SUBRESOURCE_LAYOUT_2_EXT = 1000338002] = "SUBRESOURCE_LAYOUT_2_EXT", StructureType[StructureType.IMAGE_SUBRESOURCE_2_EXT = 1000338003] = "IMAGE_SUBRESOURCE_2_EXT", StructureType[StructureType.IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004] = "IMAGE_COMPRESSION_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000] = "PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000] = "PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000] = "PHYSICAL_DEVICE_FAULT_FEATURES_EXT", StructureType[StructureType.DEVICE_FAULT_COUNTS_EXT = 1000341001] = "DEVICE_FAULT_COUNTS_EXT", StructureType[StructureType.DEVICE_FAULT_INFO_EXT = 1000341002] = "DEVICE_FAULT_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000] = "PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM", StructureType[StructureType.PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000] = "PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT", StructureType[StructureType.DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000] = "DIRECTFB_SURFACE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000] = "PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE", StructureType[StructureType.MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002] = "MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE", StructureType[StructureType.PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000] = "PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT", StructureType[StructureType.VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001] = "VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT", StructureType[StructureType.VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002] = "VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000] = "PHYSICAL_DEVICE_DRM_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000] = "PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT", StructureType[StructureType.DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001] = "DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT", StructureType[StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000] = "PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT", StructureType[StructureType.PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001] = "PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000] = "PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT", StructureType[StructureType.FORMAT_PROPERTIES_3_KHR = 1000360000] = "FORMAT_PROPERTIES_3_KHR", StructureType[StructureType.IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000] = "IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA", StructureType[StructureType.MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001] = "MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA", StructureType[StructureType.MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002] = "MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA", StructureType[StructureType.IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000] = "IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA", StructureType[StructureType.SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001] = "SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA", StructureType[StructureType.BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000] = "BUFFER_COLLECTION_CREATE_INFO_FUCHSIA", StructureType[StructureType.IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001] = "IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA", StructureType[StructureType.BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002] = "BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA", StructureType[StructureType.BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003] = "BUFFER_COLLECTION_PROPERTIES_FUCHSIA", StructureType[StructureType.BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004] = "BUFFER_CONSTRAINTS_INFO_FUCHSIA", StructureType[StructureType.BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005] = "BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA", StructureType[StructureType.IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006] = "IMAGE_CONSTRAINTS_INFO_FUCHSIA", StructureType[StructureType.IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007] = "IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA", StructureType[StructureType.SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008] = "SYSMEM_COLOR_SPACE_FUCHSIA", StructureType[StructureType.BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009] = "BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA", StructureType[StructureType.SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000] = "SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI", StructureType[StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001] = "PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI", StructureType[StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002] = "PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI", StructureType[StructureType.PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000] = "PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI", StructureType[StructureType.MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000] = "MEMORY_GET_REMOTE_ADDRESS_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001] = "PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV", StructureType[StructureType.PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000] = "PIPELINE_PROPERTIES_IDENTIFIER_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001] = "PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT", StructureType[StructureType.PIPELINE_INFO_EXT = 1000269001] = "PIPELINE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000] = "PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT", StructureType[StructureType.SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001] = "SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT", StructureType[StructureType.MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002] = "MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000] = "PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT", StructureType[StructureType.SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000] = "SCREEN_SURFACE_CREATE_INFO_QNX", StructureType[StructureType.PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000] = "PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT", StructureType[StructureType.PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001] = "PIPELINE_COLOR_WRITE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000] = "PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000] = "PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000] = "PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT", StructureType[StructureType.QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001] = "QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000] = "PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT", StructureType[StructureType.IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001] = "IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000] = "PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001] = "PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000] = "PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT", StructureType[StructureType.MICROMAP_BUILD_INFO_EXT = 1000396000] = "MICROMAP_BUILD_INFO_EXT", StructureType[StructureType.MICROMAP_VERSION_INFO_EXT = 1000396001] = "MICROMAP_VERSION_INFO_EXT", StructureType[StructureType.COPY_MICROMAP_INFO_EXT = 1000396002] = "COPY_MICROMAP_INFO_EXT", StructureType[StructureType.COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003] = "COPY_MICROMAP_TO_MEMORY_INFO_EXT", StructureType[StructureType.COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004] = "COPY_MEMORY_TO_MICROMAP_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005] = "PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006] = "PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT", StructureType[StructureType.MICROMAP_CREATE_INFO_EXT = 1000396007] = "MICROMAP_CREATE_INFO_EXT", StructureType[StructureType.MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008] = "MICROMAP_BUILD_SIZES_INFO_EXT", StructureType[StructureType.ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009] = "ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT", StructureType[StructureType.PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000] = "PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT", StructureType[StructureType.SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001] = "SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000] = "PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000] = "PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR", StructureType[StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001] = "PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR", StructureType[StructureType.DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002] = "DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR", StructureType[StructureType.DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003] = "DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR", StructureType[StructureType.PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000] = "PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE", StructureType[StructureType.DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001] = "DESCRIPTOR_SET_BINDING_REFERENCE_VALVE", StructureType[StructureType.DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002] = "DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE", StructureType[StructureType.PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000] = "PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000] = "PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001] = "PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM", StructureType[StructureType.SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002] = "SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000] = "PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001] = "PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000] = "PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001] = "PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000] = "PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000] = "PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000] = "PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001] = "PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM", StructureType[StructureType.IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002] = "IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000] = "PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001] = "PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000] = "PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT", StructureType[StructureType.RENDER_PASS_CREATION_CONTROL_EXT = 1000458001] = "RENDER_PASS_CREATION_CONTROL_EXT", StructureType[StructureType.RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002] = "RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT", StructureType[StructureType.RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003] = "RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000] = "PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001] = "PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT", StructureType[StructureType.PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002] = "PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT", StructureType[StructureType.SHADER_MODULE_IDENTIFIER_EXT = 1000462003] = "SHADER_MODULE_IDENTIFIER_EXT", StructureType[StructureType.PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000] = "PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000] = "PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001] = "PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV", StructureType[StructureType.OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002] = "OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV", StructureType[StructureType.OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003] = "OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV", StructureType[StructureType.OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004] = "OPTICAL_FLOW_SESSION_CREATE_INFO_NV", StructureType[StructureType.OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005] = "OPTICAL_FLOW_EXECUTE_INFO_NV", StructureType[StructureType.OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010] = "OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV", StructureType[StructureType.PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000] = "PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000] = "PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT", StructureType[StructureType.PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000] = "PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM", StructureType[StructureType.TILE_PROPERTIES_QCOM = 1000484001] = "TILE_PROPERTIES_QCOM", StructureType[StructureType.PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000] = "PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC", StructureType[StructureType.AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001] = "AMIGO_PROFILING_SUBMIT_INFO_SEC", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000] = "PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV", StructureType[StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001] = "PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV", StructureType[StructureType.PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000] = "PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT", StructureType[StructureType.MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002] = "MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000] = "PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM", StructureType[StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001] = "PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM";
}(StructureType || (StructureType = {}));
export var SubpassContents;
!function(SubpassContents) {
    SubpassContents[SubpassContents.INLINE = 0] = "INLINE", SubpassContents[SubpassContents.SECONDARY_COMMAND_BUFFERS = 1] = "SECONDARY_COMMAND_BUFFERS";
}(SubpassContents || (SubpassContents = {}));
export var Result;
!function(Result) {
    Result[Result.SUCCESS = 0] = "SUCCESS", Result[Result.NOT_READY = 1] = "NOT_READY", Result[Result.TIMEOUT = 2] = "TIMEOUT", Result[Result.EVENT_SET = 3] = "EVENT_SET", Result[Result.EVENT_RESET = 4] = "EVENT_RESET", Result[Result.INCOMPLETE = 5] = "INCOMPLETE", Result[Result.ERROR_OUT_OF_HOST_MEMORY = -1] = "ERROR_OUT_OF_HOST_MEMORY", Result[Result.ERROR_OUT_OF_DEVICE_MEMORY = -2] = "ERROR_OUT_OF_DEVICE_MEMORY", Result[Result.ERROR_INITIALIZATION_FAILED = -3] = "ERROR_INITIALIZATION_FAILED", Result[Result.ERROR_DEVICE_LOST = -4] = "ERROR_DEVICE_LOST", Result[Result.ERROR_MEMORY_MAP_FAILED = -5] = "ERROR_MEMORY_MAP_FAILED", Result[Result.ERROR_LAYER_NOT_PRESENT = -6] = "ERROR_LAYER_NOT_PRESENT", Result[Result.ERROR_EXTENSION_NOT_PRESENT = -7] = "ERROR_EXTENSION_NOT_PRESENT", Result[Result.ERROR_FEATURE_NOT_PRESENT = -8] = "ERROR_FEATURE_NOT_PRESENT", Result[Result.ERROR_INCOMPATIBLE_DRIVER = -9] = "ERROR_INCOMPATIBLE_DRIVER", Result[Result.ERROR_TOO_MANY_OBJECTS = -10] = "ERROR_TOO_MANY_OBJECTS", Result[Result.ERROR_FORMAT_NOT_SUPPORTED = -11] = "ERROR_FORMAT_NOT_SUPPORTED", Result[Result.ERROR_FRAGMENTED_POOL = -12] = "ERROR_FRAGMENTED_POOL", Result[Result.ERROR_UNKNOWN = -13] = "ERROR_UNKNOWN", Result[Result.ERROR_OUT_OF_POOL_MEMORY = 1000069000] = "ERROR_OUT_OF_POOL_MEMORY", Result[Result.ERROR_INVALID_EXTERNAL_HANDLE = 1000072003] = "ERROR_INVALID_EXTERNAL_HANDLE", Result[Result.ERROR_FRAGMENTATION = 1000161000] = "ERROR_FRAGMENTATION", Result[Result.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = 1000257000] = "ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS", Result[Result.PIPELINE_COMPILE_REQUIRED = 1000297000] = "PIPELINE_COMPILE_REQUIRED", Result[Result.ERROR_SURFACE_LOST_KHR = 1000000000] = "ERROR_SURFACE_LOST_KHR", Result[Result.ERROR_NATIVE_WINDOW_IN_USE_KHR = 1000000001] = "ERROR_NATIVE_WINDOW_IN_USE_KHR", Result[Result.SUBOPTIMAL_KHR = 1000001003] = "SUBOPTIMAL_KHR", Result[Result.ERROR_OUT_OF_DATE_KHR = 1000001004] = "ERROR_OUT_OF_DATE_KHR", Result[Result.ERROR_INCOMPATIBLE_DISPLAY_KHR = 1000003001] = "ERROR_INCOMPATIBLE_DISPLAY_KHR", Result[Result.ERROR_VALIDATION_FAILED_EXT = 1000011001] = "ERROR_VALIDATION_FAILED_EXT", Result[Result.ERROR_INVALID_SHADER_NV = 1000012000] = "ERROR_INVALID_SHADER_NV", Result[Result.ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = 1000023000] = "ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR", Result[Result.ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = 1000023001] = "ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR", Result[Result.ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = 1000023002] = "ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR", Result[Result.ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = 1000023003] = "ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR", Result[Result.ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = 1000023004] = "ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR", Result[Result.ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = 1000023005] = "ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR", Result[Result.ERROR_OUT_OF_POOL_MEMORY_KHR = 1000069000] = "ERROR_OUT_OF_POOL_MEMORY_KHR", Result[Result.ERROR_INVALID_EXTERNAL_HANDLE_KHR = 1000072003] = "ERROR_INVALID_EXTERNAL_HANDLE_KHR", Result[Result.ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 1000158000] = "ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT", Result[Result.ERROR_FRAGMENTATION_EXT = 1000161000] = "ERROR_FRAGMENTATION_EXT", Result[Result.ERROR_NOT_PERMITTED_EXT = 1000174001] = "ERROR_NOT_PERMITTED_EXT", Result[Result.ERROR_NOT_PERMITTED_KHR = 1000174001] = "ERROR_NOT_PERMITTED_KHR", Result[Result.ERROR_INVALID_DEVICE_ADDRESS_EXT = 1000257000] = "ERROR_INVALID_DEVICE_ADDRESS_EXT", Result[Result.ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 1000255000] = "ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT", Result[Result.ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = 1000257000] = "ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR", Result[Result.THREAD_IDLE_KHR = 1000268000] = "THREAD_IDLE_KHR", Result[Result.THREAD_DONE_KHR = 1000268001] = "THREAD_DONE_KHR", Result[Result.OPERATION_DEFERRED_KHR = 1000268002] = "OPERATION_DEFERRED_KHR", Result[Result.OPERATION_NOT_DEFERRED_KHR = 1000268003] = "OPERATION_NOT_DEFERRED_KHR", Result[Result.PIPELINE_COMPILE_REQUIRED_EXT = 1000297000] = "PIPELINE_COMPILE_REQUIRED_EXT", Result[Result.ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000] = "ERROR_PIPELINE_COMPILE_REQUIRED_EXT", Result[Result.ERROR_COMPRESSION_EXHAUSTED_EXT = 1000338000] = "ERROR_COMPRESSION_EXHAUSTED_EXT";
}(Result || (Result = {}));
export var DynamicState;
!function(DynamicState) {
    DynamicState[DynamicState.VIEWPORT = 0] = "VIEWPORT", DynamicState[DynamicState.SCISSOR = 1] = "SCISSOR", DynamicState[DynamicState.LINE_WIDTH = 2] = "LINE_WIDTH", DynamicState[DynamicState.DEPTH_BIAS = 3] = "DEPTH_BIAS", DynamicState[DynamicState.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS", DynamicState[DynamicState.DEPTH_BOUNDS = 5] = "DEPTH_BOUNDS", DynamicState[DynamicState.STENCIL_COMPARE_MASK = 6] = "STENCIL_COMPARE_MASK", DynamicState[DynamicState.STENCIL_WRITE_MASK = 7] = "STENCIL_WRITE_MASK", DynamicState[DynamicState.STENCIL_REFERENCE = 8] = "STENCIL_REFERENCE", DynamicState[DynamicState.CULL_MODE = 1000267000] = "CULL_MODE", DynamicState[DynamicState.FRONT_FACE = 1000267001] = "FRONT_FACE", DynamicState[DynamicState.PRIMITIVE_TOPOLOGY = 1000267002] = "PRIMITIVE_TOPOLOGY", DynamicState[DynamicState.VIEWPORT_WITH_COUNT = 1000267003] = "VIEWPORT_WITH_COUNT", DynamicState[DynamicState.SCISSOR_WITH_COUNT = 1000267004] = "SCISSOR_WITH_COUNT", DynamicState[DynamicState.VERTEX_INPUT_BINDING_STRIDE = 1000267005] = "VERTEX_INPUT_BINDING_STRIDE", DynamicState[DynamicState.DEPTH_TEST_ENABLE = 1000267006] = "DEPTH_TEST_ENABLE", DynamicState[DynamicState.DEPTH_WRITE_ENABLE = 1000267007] = "DEPTH_WRITE_ENABLE", DynamicState[DynamicState.DEPTH_COMPARE_OP = 1000267008] = "DEPTH_COMPARE_OP", DynamicState[DynamicState.DEPTH_BOUNDS_TEST_ENABLE = 1000267009] = "DEPTH_BOUNDS_TEST_ENABLE", DynamicState[DynamicState.STENCIL_TEST_ENABLE = 1000267010] = "STENCIL_TEST_ENABLE", DynamicState[DynamicState.STENCIL_OP = 1000267011] = "STENCIL_OP", DynamicState[DynamicState.RASTERIZER_DISCARD_ENABLE = 1000377001] = "RASTERIZER_DISCARD_ENABLE", DynamicState[DynamicState.DEPTH_BIAS_ENABLE = 1000377002] = "DEPTH_BIAS_ENABLE", DynamicState[DynamicState.PRIMITIVE_RESTART_ENABLE = 1000377004] = "PRIMITIVE_RESTART_ENABLE", DynamicState[DynamicState.VIEWPORT_W_SCALING_NV = 1000087000] = "VIEWPORT_W_SCALING_NV", DynamicState[DynamicState.DISCARD_RECTANGLE_EXT = 1000099000] = "DISCARD_RECTANGLE_EXT", DynamicState[DynamicState.SAMPLE_LOCATIONS_EXT = 1000143000] = "SAMPLE_LOCATIONS_EXT", DynamicState[DynamicState.RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000] = "RAY_TRACING_PIPELINE_STACK_SIZE_KHR", DynamicState[DynamicState.VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004] = "VIEWPORT_SHADING_RATE_PALETTE_NV", DynamicState[DynamicState.VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006] = "VIEWPORT_COARSE_SAMPLE_ORDER_NV", DynamicState[DynamicState.EXCLUSIVE_SCISSOR_NV = 1000205001] = "EXCLUSIVE_SCISSOR_NV", DynamicState[DynamicState.FRAGMENT_SHADING_RATE_KHR = 1000226000] = "FRAGMENT_SHADING_RATE_KHR", DynamicState[DynamicState.LINE_STIPPLE_EXT = 1000259000] = "LINE_STIPPLE_EXT", DynamicState[DynamicState.CULL_MODE_EXT = 1000267000] = "CULL_MODE_EXT", DynamicState[DynamicState.FRONT_FACE_EXT = 1000267001] = "FRONT_FACE_EXT", DynamicState[DynamicState.PRIMITIVE_TOPOLOGY_EXT = 1000267002] = "PRIMITIVE_TOPOLOGY_EXT", DynamicState[DynamicState.VIEWPORT_WITH_COUNT_EXT = 1000267003] = "VIEWPORT_WITH_COUNT_EXT", DynamicState[DynamicState.SCISSOR_WITH_COUNT_EXT = 1000267004] = "SCISSOR_WITH_COUNT_EXT", DynamicState[DynamicState.VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005] = "VERTEX_INPUT_BINDING_STRIDE_EXT", DynamicState[DynamicState.DEPTH_TEST_ENABLE_EXT = 1000267006] = "DEPTH_TEST_ENABLE_EXT", DynamicState[DynamicState.DEPTH_WRITE_ENABLE_EXT = 1000267007] = "DEPTH_WRITE_ENABLE_EXT", DynamicState[DynamicState.DEPTH_COMPARE_OP_EXT = 1000267008] = "DEPTH_COMPARE_OP_EXT", DynamicState[DynamicState.DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009] = "DEPTH_BOUNDS_TEST_ENABLE_EXT", DynamicState[DynamicState.STENCIL_TEST_ENABLE_EXT = 1000267010] = "STENCIL_TEST_ENABLE_EXT", DynamicState[DynamicState.STENCIL_OP_EXT = 1000267011] = "STENCIL_OP_EXT", DynamicState[DynamicState.VERTEX_INPUT_EXT = 1000352000] = "VERTEX_INPUT_EXT", DynamicState[DynamicState.PATCH_CONTROL_POINTS_EXT = 1000377000] = "PATCH_CONTROL_POINTS_EXT", DynamicState[DynamicState.RASTERIZER_DISCARD_ENABLE_EXT = 1000377001] = "RASTERIZER_DISCARD_ENABLE_EXT", DynamicState[DynamicState.DEPTH_BIAS_ENABLE_EXT = 1000377002] = "DEPTH_BIAS_ENABLE_EXT", DynamicState[DynamicState.LOGIC_OP_EXT = 1000377003] = "LOGIC_OP_EXT", DynamicState[DynamicState.PRIMITIVE_RESTART_ENABLE_EXT = 1000377004] = "PRIMITIVE_RESTART_ENABLE_EXT", DynamicState[DynamicState.COLOR_WRITE_ENABLE_EXT = 1000381000] = "COLOR_WRITE_ENABLE_EXT", DynamicState[DynamicState.TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002] = "TESSELLATION_DOMAIN_ORIGIN_EXT", DynamicState[DynamicState.DEPTH_CLAMP_ENABLE_EXT = 1000455003] = "DEPTH_CLAMP_ENABLE_EXT", DynamicState[DynamicState.POLYGON_MODE_EXT = 1000455004] = "POLYGON_MODE_EXT", DynamicState[DynamicState.RASTERIZATION_SAMPLES_EXT = 1000455005] = "RASTERIZATION_SAMPLES_EXT", DynamicState[DynamicState.SAMPLE_MASK_EXT = 1000455006] = "SAMPLE_MASK_EXT", DynamicState[DynamicState.ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007] = "ALPHA_TO_COVERAGE_ENABLE_EXT", DynamicState[DynamicState.ALPHA_TO_ONE_ENABLE_EXT = 1000455008] = "ALPHA_TO_ONE_ENABLE_EXT", DynamicState[DynamicState.LOGIC_OP_ENABLE_EXT = 1000455009] = "LOGIC_OP_ENABLE_EXT", DynamicState[DynamicState.COLOR_BLEND_ENABLE_EXT = 1000455010] = "COLOR_BLEND_ENABLE_EXT", DynamicState[DynamicState.COLOR_BLEND_EQUATION_EXT = 1000455011] = "COLOR_BLEND_EQUATION_EXT", DynamicState[DynamicState.COLOR_WRITE_MASK_EXT = 1000455012] = "COLOR_WRITE_MASK_EXT", DynamicState[DynamicState.RASTERIZATION_STREAM_EXT = 1000455013] = "RASTERIZATION_STREAM_EXT", DynamicState[DynamicState.CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014] = "CONSERVATIVE_RASTERIZATION_MODE_EXT", DynamicState[DynamicState.EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015] = "EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT", DynamicState[DynamicState.DEPTH_CLIP_ENABLE_EXT = 1000455016] = "DEPTH_CLIP_ENABLE_EXT", DynamicState[DynamicState.SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017] = "SAMPLE_LOCATIONS_ENABLE_EXT", DynamicState[DynamicState.COLOR_BLEND_ADVANCED_EXT = 1000455018] = "COLOR_BLEND_ADVANCED_EXT", DynamicState[DynamicState.PROVOKING_VERTEX_MODE_EXT = 1000455019] = "PROVOKING_VERTEX_MODE_EXT", DynamicState[DynamicState.LINE_RASTERIZATION_MODE_EXT = 1000455020] = "LINE_RASTERIZATION_MODE_EXT", DynamicState[DynamicState.LINE_STIPPLE_ENABLE_EXT = 1000455021] = "LINE_STIPPLE_ENABLE_EXT", DynamicState[DynamicState.DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022] = "DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT", DynamicState[DynamicState.VIEWPORT_W_SCALING_ENABLE_NV = 1000455023] = "VIEWPORT_W_SCALING_ENABLE_NV", DynamicState[DynamicState.VIEWPORT_SWIZZLE_NV = 1000455024] = "VIEWPORT_SWIZZLE_NV", DynamicState[DynamicState.COVERAGE_TO_COLOR_ENABLE_NV = 1000455025] = "COVERAGE_TO_COLOR_ENABLE_NV", DynamicState[DynamicState.COVERAGE_TO_COLOR_LOCATION_NV = 1000455026] = "COVERAGE_TO_COLOR_LOCATION_NV", DynamicState[DynamicState.COVERAGE_MODULATION_MODE_NV = 1000455027] = "COVERAGE_MODULATION_MODE_NV", DynamicState[DynamicState.COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028] = "COVERAGE_MODULATION_TABLE_ENABLE_NV", DynamicState[DynamicState.COVERAGE_MODULATION_TABLE_NV = 1000455029] = "COVERAGE_MODULATION_TABLE_NV", DynamicState[DynamicState.SHADING_RATE_IMAGE_ENABLE_NV = 1000455030] = "SHADING_RATE_IMAGE_ENABLE_NV", DynamicState[DynamicState.REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031] = "REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV", DynamicState[DynamicState.COVERAGE_REDUCTION_MODE_NV = 1000455032] = "COVERAGE_REDUCTION_MODE_NV";
}(DynamicState || (DynamicState = {}));
export var DescriptorUpdateTemplateType;
!function(DescriptorUpdateTemplateType) {
    DescriptorUpdateTemplateType[DescriptorUpdateTemplateType.DESCRIPTOR_SET = 0] = "DESCRIPTOR_SET", DescriptorUpdateTemplateType[DescriptorUpdateTemplateType.PUSH_DESCRIPTORS_KHR = 1] = "PUSH_DESCRIPTORS_KHR", DescriptorUpdateTemplateType[DescriptorUpdateTemplateType.DESCRIPTOR_SET_KHR = 0] = "DESCRIPTOR_SET_KHR";
}(DescriptorUpdateTemplateType || (DescriptorUpdateTemplateType = {}));
export var ObjectType;
!function(ObjectType) {
    ObjectType[ObjectType.UNKNOWN = 0] = "UNKNOWN", ObjectType[ObjectType.INSTANCE = 1] = "INSTANCE", ObjectType[ObjectType.PHYSICAL_DEVICE = 2] = "PHYSICAL_DEVICE", ObjectType[ObjectType.DEVICE = 3] = "DEVICE", ObjectType[ObjectType.QUEUE = 4] = "QUEUE", ObjectType[ObjectType.SEMAPHORE = 5] = "SEMAPHORE", ObjectType[ObjectType.COMMAND_BUFFER = 6] = "COMMAND_BUFFER", ObjectType[ObjectType.FENCE = 7] = "FENCE", ObjectType[ObjectType.DEVICE_MEMORY = 8] = "DEVICE_MEMORY", ObjectType[ObjectType.BUFFER = 9] = "BUFFER", ObjectType[ObjectType.IMAGE = 10] = "IMAGE", ObjectType[ObjectType.EVENT = 11] = "EVENT", ObjectType[ObjectType.QUERY_POOL = 12] = "QUERY_POOL", ObjectType[ObjectType.BUFFER_VIEW = 13] = "BUFFER_VIEW", ObjectType[ObjectType.IMAGE_VIEW = 14] = "IMAGE_VIEW", ObjectType[ObjectType.SHADER_MODULE = 15] = "SHADER_MODULE", ObjectType[ObjectType.PIPELINE_CACHE = 16] = "PIPELINE_CACHE", ObjectType[ObjectType.PIPELINE_LAYOUT = 17] = "PIPELINE_LAYOUT", ObjectType[ObjectType.RENDER_PASS = 18] = "RENDER_PASS", ObjectType[ObjectType.PIPELINE = 19] = "PIPELINE", ObjectType[ObjectType.DESCRIPTOR_SET_LAYOUT = 20] = "DESCRIPTOR_SET_LAYOUT", ObjectType[ObjectType.SAMPLER = 21] = "SAMPLER", ObjectType[ObjectType.DESCRIPTOR_POOL = 22] = "DESCRIPTOR_POOL", ObjectType[ObjectType.DESCRIPTOR_SET = 23] = "DESCRIPTOR_SET", ObjectType[ObjectType.FRAMEBUFFER = 24] = "FRAMEBUFFER", ObjectType[ObjectType.COMMAND_POOL = 25] = "COMMAND_POOL", ObjectType[ObjectType.SAMPLER_YCBCR_CONVERSION = 1000156000] = "SAMPLER_YCBCR_CONVERSION", ObjectType[ObjectType.DESCRIPTOR_UPDATE_TEMPLATE = 1000085000] = "DESCRIPTOR_UPDATE_TEMPLATE", ObjectType[ObjectType.PRIVATE_DATA_SLOT = 1000295000] = "PRIVATE_DATA_SLOT", ObjectType[ObjectType.SURFACE_KHR = 1000000000] = "SURFACE_KHR", ObjectType[ObjectType.SWAPCHAIN_KHR = 1000001000] = "SWAPCHAIN_KHR", ObjectType[ObjectType.DISPLAY_KHR = 1000002000] = "DISPLAY_KHR", ObjectType[ObjectType.DISPLAY_MODE_KHR = 1000002001] = "DISPLAY_MODE_KHR", ObjectType[ObjectType.DEBUG_REPORT_CALLBACK_EXT = 1000011000] = "DEBUG_REPORT_CALLBACK_EXT", ObjectType[ObjectType.VIDEO_SESSION_KHR = 1000023000] = "VIDEO_SESSION_KHR", ObjectType[ObjectType.VIDEO_SESSION_PARAMETERS_KHR = 1000023001] = "VIDEO_SESSION_PARAMETERS_KHR", ObjectType[ObjectType.CU_MODULE_NVX = 1000029000] = "CU_MODULE_NVX", ObjectType[ObjectType.CU_FUNCTION_NVX = 1000029001] = "CU_FUNCTION_NVX", ObjectType[ObjectType.DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000] = "DESCRIPTOR_UPDATE_TEMPLATE_KHR", ObjectType[ObjectType.DEBUG_UTILS_MESSENGER_EXT = 1000128000] = "DEBUG_UTILS_MESSENGER_EXT", ObjectType[ObjectType.ACCELERATION_STRUCTURE_KHR = 1000150000] = "ACCELERATION_STRUCTURE_KHR", ObjectType[ObjectType.SAMPLER_YCBCR_CONVERSION_KHR = 1000156000] = "SAMPLER_YCBCR_CONVERSION_KHR", ObjectType[ObjectType.VALIDATION_CACHE_EXT = 1000160000] = "VALIDATION_CACHE_EXT", ObjectType[ObjectType.ACCELERATION_STRUCTURE_NV = 1000165000] = "ACCELERATION_STRUCTURE_NV", ObjectType[ObjectType.PERFORMANCE_CONFIGURATION_INTEL = 1000210000] = "PERFORMANCE_CONFIGURATION_INTEL", ObjectType[ObjectType.DEFERRED_OPERATION_KHR = 1000268000] = "DEFERRED_OPERATION_KHR", ObjectType[ObjectType.INDIRECT_COMMANDS_LAYOUT_NV = 1000277000] = "INDIRECT_COMMANDS_LAYOUT_NV", ObjectType[ObjectType.PRIVATE_DATA_SLOT_EXT = 1000295000] = "PRIVATE_DATA_SLOT_EXT", ObjectType[ObjectType.BUFFER_COLLECTION_FUCHSIA = 1000366000] = "BUFFER_COLLECTION_FUCHSIA", ObjectType[ObjectType.MICROMAP_EXT = 1000396000] = "MICROMAP_EXT", ObjectType[ObjectType.OPTICAL_FLOW_SESSION_NV = 1000464000] = "OPTICAL_FLOW_SESSION_NV";
}(ObjectType || (ObjectType = {}));
export var RayTracingInvocationReorderModeNV;
!function(RayTracingInvocationReorderModeNV) {
    RayTracingInvocationReorderModeNV[RayTracingInvocationReorderModeNV.RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0] = "RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV", RayTracingInvocationReorderModeNV[RayTracingInvocationReorderModeNV.RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1] = "RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV";
}(RayTracingInvocationReorderModeNV || (RayTracingInvocationReorderModeNV = {}));
export var QueueFlagBits;
!function(QueueFlagBits) {
    QueueFlagBits[QueueFlagBits.GRAPHICS = 1] = "GRAPHICS", QueueFlagBits[QueueFlagBits.COMPUTE = 2] = "COMPUTE", QueueFlagBits[QueueFlagBits.TRANSFER = 4] = "TRANSFER", QueueFlagBits[QueueFlagBits.SPARSE_BINDING = 8] = "SPARSE_BINDING", QueueFlagBits[QueueFlagBits.PROTECTED = 16] = "PROTECTED", QueueFlagBits[QueueFlagBits.VIDEO_DECODE_BIT_KHR = 32] = "VIDEO_DECODE_BIT_KHR", QueueFlagBits[QueueFlagBits.RESERVED_9_BIT_EXT = 512] = "RESERVED_9_BIT_EXT", QueueFlagBits[QueueFlagBits.VIDEO_ENCODE_BIT_KHR = 64] = "VIDEO_ENCODE_BIT_KHR", QueueFlagBits[QueueFlagBits.RESERVED_7_BIT_QCOM = 128] = "RESERVED_7_BIT_QCOM", QueueFlagBits[QueueFlagBits.OPTICAL_FLOW_BIT_NV = 256] = "OPTICAL_FLOW_BIT_NV";
}(QueueFlagBits || (QueueFlagBits = {}));
export var CullModeFlagBits;
!function(CullModeFlagBits) {
    CullModeFlagBits[CullModeFlagBits.NONE = 0] = "NONE", CullModeFlagBits[CullModeFlagBits.FRONT = 1] = "FRONT", CullModeFlagBits[CullModeFlagBits.BACK = 2] = "BACK", CullModeFlagBits[CullModeFlagBits.FRONT_AND_BACK = 3] = "FRONT_AND_BACK";
}(CullModeFlagBits || (CullModeFlagBits = {}));
export var RenderPassCreateFlagBits;
!function(RenderPassCreateFlagBits) {
    RenderPassCreateFlagBits[RenderPassCreateFlagBits.RESERVED_0_BIT_KHR = 1] = "RESERVED_0_BIT_KHR", RenderPassCreateFlagBits[RenderPassCreateFlagBits.TRANSFORM_BIT_QCOM = 2] = "TRANSFORM_BIT_QCOM";
}(RenderPassCreateFlagBits || (RenderPassCreateFlagBits = {}));
export var DeviceQueueCreateFlagBits;
!function(DeviceQueueCreateFlagBits) {
    DeviceQueueCreateFlagBits[DeviceQueueCreateFlagBits.PROTECTED = 1] = "PROTECTED", DeviceQueueCreateFlagBits[DeviceQueueCreateFlagBits.RESERVED_1_BIT_QCOM = 2] = "RESERVED_1_BIT_QCOM";
}(DeviceQueueCreateFlagBits || (DeviceQueueCreateFlagBits = {}));
export var MemoryPropertyFlagBits;
!function(MemoryPropertyFlagBits) {
    MemoryPropertyFlagBits[MemoryPropertyFlagBits.DEVICE_LOCAL = 1] = "DEVICE_LOCAL", MemoryPropertyFlagBits[MemoryPropertyFlagBits.HOST_VISIBLE = 2] = "HOST_VISIBLE", MemoryPropertyFlagBits[MemoryPropertyFlagBits.HOST_COHERENT = 4] = "HOST_COHERENT", MemoryPropertyFlagBits[MemoryPropertyFlagBits.HOST_CACHED = 8] = "HOST_CACHED", MemoryPropertyFlagBits[MemoryPropertyFlagBits.LAZILY_ALLOCATED = 16] = "LAZILY_ALLOCATED", MemoryPropertyFlagBits[MemoryPropertyFlagBits.PROTECTED = 32] = "PROTECTED", MemoryPropertyFlagBits[MemoryPropertyFlagBits.DEVICE_COHERENT_BIT_AMD = 64] = "DEVICE_COHERENT_BIT_AMD", MemoryPropertyFlagBits[MemoryPropertyFlagBits.DEVICE_UNCACHED_BIT_AMD = 128] = "DEVICE_UNCACHED_BIT_AMD", MemoryPropertyFlagBits[MemoryPropertyFlagBits.RDMA_CAPABLE_BIT_NV = 256] = "RDMA_CAPABLE_BIT_NV";
}(MemoryPropertyFlagBits || (MemoryPropertyFlagBits = {}));
export var MemoryHeapFlagBits;
!function(MemoryHeapFlagBits) {
    MemoryHeapFlagBits[MemoryHeapFlagBits.DEVICE_LOCAL = 1] = "DEVICE_LOCAL", MemoryHeapFlagBits[MemoryHeapFlagBits.MULTI_INSTANCE = 2] = "MULTI_INSTANCE", MemoryHeapFlagBits[MemoryHeapFlagBits.MULTI_INSTANCE_BIT_KHR = 2] = "MULTI_INSTANCE_BIT_KHR", MemoryHeapFlagBits[MemoryHeapFlagBits.RESERVED_2_BIT_KHR = 4] = "RESERVED_2_BIT_KHR";
}(MemoryHeapFlagBits || (MemoryHeapFlagBits = {}));
export var AccessFlagBits;
!function(AccessFlagBits) {
    AccessFlagBits[AccessFlagBits.INDIRECT_COMMAND_READ = 1] = "INDIRECT_COMMAND_READ", AccessFlagBits[AccessFlagBits.INDEX_READ = 2] = "INDEX_READ", AccessFlagBits[AccessFlagBits.VERTEX_ATTRIBUTE_READ = 4] = "VERTEX_ATTRIBUTE_READ", AccessFlagBits[AccessFlagBits.UNIFORM_READ = 8] = "UNIFORM_READ", AccessFlagBits[AccessFlagBits.INPUT_ATTACHMENT_READ = 16] = "INPUT_ATTACHMENT_READ", AccessFlagBits[AccessFlagBits.SHADER_READ = 32] = "SHADER_READ", AccessFlagBits[AccessFlagBits.SHADER_WRITE = 64] = "SHADER_WRITE", AccessFlagBits[AccessFlagBits.COLOR_ATTACHMENT_READ = 128] = "COLOR_ATTACHMENT_READ", AccessFlagBits[AccessFlagBits.COLOR_ATTACHMENT_WRITE = 256] = "COLOR_ATTACHMENT_WRITE", AccessFlagBits[AccessFlagBits.DEPTH_STENCIL_ATTACHMENT_READ = 512] = "DEPTH_STENCIL_ATTACHMENT_READ", AccessFlagBits[AccessFlagBits.DEPTH_STENCIL_ATTACHMENT_WRITE = 1024] = "DEPTH_STENCIL_ATTACHMENT_WRITE", AccessFlagBits[AccessFlagBits.TRANSFER_READ = 2048] = "TRANSFER_READ", AccessFlagBits[AccessFlagBits.TRANSFER_WRITE = 4096] = "TRANSFER_WRITE", AccessFlagBits[AccessFlagBits.HOST_READ = 8192] = "HOST_READ", AccessFlagBits[AccessFlagBits.HOST_WRITE = 16384] = "HOST_WRITE", AccessFlagBits[AccessFlagBits.MEMORY_READ = 32768] = "MEMORY_READ", AccessFlagBits[AccessFlagBits.MEMORY_WRITE = 65536] = "MEMORY_WRITE", AccessFlagBits[AccessFlagBits.NONE = 0] = "NONE", AccessFlagBits[AccessFlagBits.TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432] = "TRANSFORM_FEEDBACK_WRITE_BIT_EXT", AccessFlagBits[AccessFlagBits.TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864] = "TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT", AccessFlagBits[AccessFlagBits.TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728] = "TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT", AccessFlagBits[AccessFlagBits.CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576] = "CONDITIONAL_RENDERING_READ_BIT_EXT", AccessFlagBits[AccessFlagBits.COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288] = "COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT", AccessFlagBits[AccessFlagBits.ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152] = "ACCELERATION_STRUCTURE_READ_BIT_KHR", AccessFlagBits[AccessFlagBits.ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304] = "ACCELERATION_STRUCTURE_WRITE_BIT_KHR", AccessFlagBits[AccessFlagBits.SHADING_RATE_IMAGE_READ_BIT_NV = 8388608] = "SHADING_RATE_IMAGE_READ_BIT_NV", AccessFlagBits[AccessFlagBits.ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152] = "ACCELERATION_STRUCTURE_READ_BIT_NV", AccessFlagBits[AccessFlagBits.ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304] = "ACCELERATION_STRUCTURE_WRITE_BIT_NV", AccessFlagBits[AccessFlagBits.FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216] = "FRAGMENT_DENSITY_MAP_READ_BIT_EXT", AccessFlagBits[AccessFlagBits.FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608] = "FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR", AccessFlagBits[AccessFlagBits.COMMAND_PREPROCESS_READ_BIT_NV = 131072] = "COMMAND_PREPROCESS_READ_BIT_NV", AccessFlagBits[AccessFlagBits.COMMAND_PREPROCESS_WRITE_BIT_NV = 262144] = "COMMAND_PREPROCESS_WRITE_BIT_NV", AccessFlagBits[AccessFlagBits.NONE_KHR = 0] = "NONE_KHR";
}(AccessFlagBits || (AccessFlagBits = {}));
export var BufferUsageFlagBits;
!function(BufferUsageFlagBits) {
    BufferUsageFlagBits[BufferUsageFlagBits.TRANSFER_SRC = 1] = "TRANSFER_SRC", BufferUsageFlagBits[BufferUsageFlagBits.TRANSFER_DST = 2] = "TRANSFER_DST", BufferUsageFlagBits[BufferUsageFlagBits.UNIFORM_TEXEL_BUFFER = 4] = "UNIFORM_TEXEL_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.STORAGE_TEXEL_BUFFER = 8] = "STORAGE_TEXEL_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.UNIFORM_BUFFER = 16] = "UNIFORM_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.STORAGE_BUFFER = 32] = "STORAGE_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.INDEX_BUFFER = 64] = "INDEX_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.VERTEX_BUFFER = 128] = "VERTEX_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.INDIRECT_BUFFER = 256] = "INDIRECT_BUFFER", BufferUsageFlagBits[BufferUsageFlagBits.SHADER_DEVICE_ADDRESS = 131072] = "SHADER_DEVICE_ADDRESS", BufferUsageFlagBits[BufferUsageFlagBits.VIDEO_DECODE_SRC_BIT_KHR = 8192] = "VIDEO_DECODE_SRC_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.VIDEO_DECODE_DST_BIT_KHR = 16384] = "VIDEO_DECODE_DST_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048] = "TRANSFORM_FEEDBACK_BUFFER_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096] = "TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.CONDITIONAL_RENDERING_BIT_EXT = 512] = "CONDITIONAL_RENDERING_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.RESERVED_25_BIT_AMD = 33554432] = "RESERVED_25_BIT_AMD", BufferUsageFlagBits[BufferUsageFlagBits.ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288] = "ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576] = "ACCELERATION_STRUCTURE_STORAGE_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.SHADER_BINDING_TABLE_BIT_KHR = 1024] = "SHADER_BINDING_TABLE_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.RAY_TRACING_BIT_NV = 1024] = "RAY_TRACING_BIT_NV", BufferUsageFlagBits[BufferUsageFlagBits.RESERVED_18_BIT_QCOM = 262144] = "RESERVED_18_BIT_QCOM", BufferUsageFlagBits[BufferUsageFlagBits.SHADER_DEVICE_ADDRESS_BIT_EXT = 131072] = "SHADER_DEVICE_ADDRESS_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.SHADER_DEVICE_ADDRESS_BIT_KHR = 131072] = "SHADER_DEVICE_ADDRESS_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.VIDEO_ENCODE_DST_BIT_KHR = 32768] = "VIDEO_ENCODE_DST_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.VIDEO_ENCODE_SRC_BIT_KHR = 65536] = "VIDEO_ENCODE_SRC_BIT_KHR", BufferUsageFlagBits[BufferUsageFlagBits.SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152] = "SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304] = "RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864] = "PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608] = "MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT", BufferUsageFlagBits[BufferUsageFlagBits.MICROMAP_STORAGE_BIT_EXT = 16777216] = "MICROMAP_STORAGE_BIT_EXT";
}(BufferUsageFlagBits || (BufferUsageFlagBits = {}));
export var BufferCreateFlagBits;
!function(BufferCreateFlagBits) {
    BufferCreateFlagBits[BufferCreateFlagBits.SPARSE_BINDING = 1] = "SPARSE_BINDING", BufferCreateFlagBits[BufferCreateFlagBits.SPARSE_RESIDENCY = 2] = "SPARSE_RESIDENCY", BufferCreateFlagBits[BufferCreateFlagBits.SPARSE_ALIASED = 4] = "SPARSE_ALIASED", BufferCreateFlagBits[BufferCreateFlagBits.PROTECTED = 8] = "PROTECTED", BufferCreateFlagBits[BufferCreateFlagBits.DEVICE_ADDRESS_CAPTURE_REPLAY = 16] = "DEVICE_ADDRESS_CAPTURE_REPLAY", BufferCreateFlagBits[BufferCreateFlagBits.DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16] = "DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT", BufferCreateFlagBits[BufferCreateFlagBits.DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16] = "DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", BufferCreateFlagBits[BufferCreateFlagBits.DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32] = "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT";
}(BufferCreateFlagBits || (BufferCreateFlagBits = {}));
export var ShaderStageFlagBits;
!function(ShaderStageFlagBits) {
    ShaderStageFlagBits[ShaderStageFlagBits.VERTEX = 1] = "VERTEX", ShaderStageFlagBits[ShaderStageFlagBits.TESSELLATION_CONTROL = 2] = "TESSELLATION_CONTROL", ShaderStageFlagBits[ShaderStageFlagBits.TESSELLATION_EVALUATION = 4] = "TESSELLATION_EVALUATION", ShaderStageFlagBits[ShaderStageFlagBits.GEOMETRY = 8] = "GEOMETRY", ShaderStageFlagBits[ShaderStageFlagBits.FRAGMENT = 16] = "FRAGMENT", ShaderStageFlagBits[ShaderStageFlagBits.COMPUTE = 32] = "COMPUTE", ShaderStageFlagBits[ShaderStageFlagBits.ALL_GRAPHICS = 31] = "ALL_GRAPHICS", ShaderStageFlagBits[ShaderStageFlagBits.ALL = 2147483647] = "ALL", ShaderStageFlagBits[ShaderStageFlagBits.RAYGEN_BIT_KHR = 256] = "RAYGEN_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.ANY_HIT_BIT_KHR = 512] = "ANY_HIT_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.CLOSEST_HIT_BIT_KHR = 1024] = "CLOSEST_HIT_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.MISS_BIT_KHR = 2048] = "MISS_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.INTERSECTION_BIT_KHR = 4096] = "INTERSECTION_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.CALLABLE_BIT_KHR = 8192] = "CALLABLE_BIT_KHR", ShaderStageFlagBits[ShaderStageFlagBits.RAYGEN_BIT_NV = 256] = "RAYGEN_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.ANY_HIT_BIT_NV = 512] = "ANY_HIT_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.CLOSEST_HIT_BIT_NV = 1024] = "CLOSEST_HIT_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.MISS_BIT_NV = 2048] = "MISS_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.INTERSECTION_BIT_NV = 4096] = "INTERSECTION_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.CALLABLE_BIT_NV = 8192] = "CALLABLE_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.TASK_BIT_NV = 64] = "TASK_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.MESH_BIT_NV = 128] = "MESH_BIT_NV", ShaderStageFlagBits[ShaderStageFlagBits.TASK_BIT_EXT = 64] = "TASK_BIT_EXT", ShaderStageFlagBits[ShaderStageFlagBits.MESH_BIT_EXT = 128] = "MESH_BIT_EXT", ShaderStageFlagBits[ShaderStageFlagBits.SUBPASS_SHADING_BIT_HUAWEI = 16384] = "SUBPASS_SHADING_BIT_HUAWEI", ShaderStageFlagBits[ShaderStageFlagBits.RESERVED_19_BIT_HUAWEI = 524288] = "RESERVED_19_BIT_HUAWEI", ShaderStageFlagBits[ShaderStageFlagBits.EXT_483_RESERVE_15 = 32768] = "EXT_483_RESERVE_15", ShaderStageFlagBits[ShaderStageFlagBits.EXT_483_RESERVE_16 = 65536] = "EXT_483_RESERVE_16", ShaderStageFlagBits[ShaderStageFlagBits.EXT_483_RESERVE_17 = 131072] = "EXT_483_RESERVE_17";
}(ShaderStageFlagBits || (ShaderStageFlagBits = {}));
export var ImageUsageFlagBits;
!function(ImageUsageFlagBits) {
    ImageUsageFlagBits[ImageUsageFlagBits.TRANSFER_SRC = 1] = "TRANSFER_SRC", ImageUsageFlagBits[ImageUsageFlagBits.TRANSFER_DST = 2] = "TRANSFER_DST", ImageUsageFlagBits[ImageUsageFlagBits.SAMPLED = 4] = "SAMPLED", ImageUsageFlagBits[ImageUsageFlagBits.STORAGE = 8] = "STORAGE", ImageUsageFlagBits[ImageUsageFlagBits.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT", ImageUsageFlagBits[ImageUsageFlagBits.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT", ImageUsageFlagBits[ImageUsageFlagBits.TRANSIENT_ATTACHMENT = 64] = "TRANSIENT_ATTACHMENT", ImageUsageFlagBits[ImageUsageFlagBits.INPUT_ATTACHMENT = 128] = "INPUT_ATTACHMENT", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_DECODE_DST_BIT_KHR = 1024] = "VIDEO_DECODE_DST_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_DECODE_SRC_BIT_KHR = 2048] = "VIDEO_DECODE_SRC_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_DECODE_DPB_BIT_KHR = 4096] = "VIDEO_DECODE_DPB_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.SHADING_RATE_IMAGE_BIT_NV = 256] = "SHADING_RATE_IMAGE_BIT_NV", ImageUsageFlagBits[ImageUsageFlagBits.RESERVED_16_BIT_QCOM = 65536] = "RESERVED_16_BIT_QCOM", ImageUsageFlagBits[ImageUsageFlagBits.RESERVED_17_BIT_QCOM = 131072] = "RESERVED_17_BIT_QCOM", ImageUsageFlagBits[ImageUsageFlagBits.FRAGMENT_DENSITY_MAP_BIT_EXT = 512] = "FRAGMENT_DENSITY_MAP_BIT_EXT", ImageUsageFlagBits[ImageUsageFlagBits.FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256] = "FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.RESERVED_22_BIT_EXT = 4194304] = "RESERVED_22_BIT_EXT", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_ENCODE_DST_BIT_KHR = 8192] = "VIDEO_ENCODE_DST_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_ENCODE_SRC_BIT_KHR = 16384] = "VIDEO_ENCODE_SRC_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.VIDEO_ENCODE_DPB_BIT_KHR = 32768] = "VIDEO_ENCODE_DPB_BIT_KHR", ImageUsageFlagBits[ImageUsageFlagBits.ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288] = "ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", ImageUsageFlagBits[ImageUsageFlagBits.INVOCATION_MASK_BIT_HUAWEI = 262144] = "INVOCATION_MASK_BIT_HUAWEI", ImageUsageFlagBits[ImageUsageFlagBits.SAMPLE_WEIGHT_BIT_QCOM = 1048576] = "SAMPLE_WEIGHT_BIT_QCOM", ImageUsageFlagBits[ImageUsageFlagBits.SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152] = "SAMPLE_BLOCK_MATCH_BIT_QCOM";
}(ImageUsageFlagBits || (ImageUsageFlagBits = {}));
export var ImageCreateFlagBits;
!function(ImageCreateFlagBits) {
    ImageCreateFlagBits[ImageCreateFlagBits.SPARSE_BINDING = 1] = "SPARSE_BINDING", ImageCreateFlagBits[ImageCreateFlagBits.SPARSE_RESIDENCY = 2] = "SPARSE_RESIDENCY", ImageCreateFlagBits[ImageCreateFlagBits.SPARSE_ALIASED = 4] = "SPARSE_ALIASED", ImageCreateFlagBits[ImageCreateFlagBits.MUTABLE_FORMAT = 8] = "MUTABLE_FORMAT", ImageCreateFlagBits[ImageCreateFlagBits.CUBE_COMPATIBLE = 16] = "CUBE_COMPATIBLE", ImageCreateFlagBits[ImageCreateFlagBits.ALIAS = 1024] = "ALIAS", ImageCreateFlagBits[ImageCreateFlagBits.SPLIT_INSTANCE_BIND_REGIONS = 64] = "SPLIT_INSTANCE_BIND_REGIONS", ImageCreateFlagBits[ImageCreateFlagBits.VK_2D_ARRAY_COMPATIBLE = 32] = "VK_2D_ARRAY_COMPATIBLE", ImageCreateFlagBits[ImageCreateFlagBits.BLOCK_TEXEL_VIEW_COMPATIBLE = 128] = "BLOCK_TEXEL_VIEW_COMPATIBLE", ImageCreateFlagBits[ImageCreateFlagBits.EXTENDED_USAGE = 256] = "EXTENDED_USAGE", ImageCreateFlagBits[ImageCreateFlagBits.PROTECTED = 2048] = "PROTECTED", ImageCreateFlagBits[ImageCreateFlagBits.DISJOINT = 512] = "DISJOINT", ImageCreateFlagBits[ImageCreateFlagBits.CORNER_SAMPLED_BIT_NV = 8192] = "CORNER_SAMPLED_BIT_NV", ImageCreateFlagBits[ImageCreateFlagBits.SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64] = "SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.VK_2D_ARRAY_COMPATIBLE_BIT_KHR = 32] = "VK_2D_ARRAY_COMPATIBLE_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128] = "BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.EXTENDED_USAGE_BIT_KHR = 256] = "EXTENDED_USAGE_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096] = "SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.DISJOINT_BIT_KHR = 512] = "DISJOINT_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.ALIAS_BIT_KHR = 1024] = "ALIAS_BIT_KHR", ImageCreateFlagBits[ImageCreateFlagBits.SUBSAMPLED_BIT_EXT = 16384] = "SUBSAMPLED_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.RESERVED_19_BIT_EXT = 524288] = "RESERVED_19_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536] = "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144] = "MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.VK_2D_VIEW_COMPATIBLE_BIT_EXT = 131072] = "VK_2D_VIEW_COMPATIBLE_BIT_EXT", ImageCreateFlagBits[ImageCreateFlagBits.FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768] = "FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM";
}(ImageCreateFlagBits || (ImageCreateFlagBits = {}));
export var ImageViewCreateFlagBits;
!function(ImageViewCreateFlagBits) {
    ImageViewCreateFlagBits[ImageViewCreateFlagBits.FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1] = "FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT", ImageViewCreateFlagBits[ImageViewCreateFlagBits.DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4] = "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", ImageViewCreateFlagBits[ImageViewCreateFlagBits.FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2] = "FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT", ImageViewCreateFlagBits[ImageViewCreateFlagBits.RESERVED_3_BIT_EXT = 8] = "RESERVED_3_BIT_EXT";
}(ImageViewCreateFlagBits || (ImageViewCreateFlagBits = {}));
export var SamplerCreateFlagBits;
!function(SamplerCreateFlagBits) {
    SamplerCreateFlagBits[SamplerCreateFlagBits.SUBSAMPLED_BIT_EXT = 1] = "SUBSAMPLED_BIT_EXT", SamplerCreateFlagBits[SamplerCreateFlagBits.SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2] = "SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT", SamplerCreateFlagBits[SamplerCreateFlagBits.DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8] = "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", SamplerCreateFlagBits[SamplerCreateFlagBits.NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4] = "NON_SEAMLESS_CUBE_MAP_BIT_EXT", SamplerCreateFlagBits[SamplerCreateFlagBits.IMAGE_PROCESSING_BIT_QCOM = 16] = "IMAGE_PROCESSING_BIT_QCOM";
}(SamplerCreateFlagBits || (SamplerCreateFlagBits = {}));
export var PipelineCreateFlagBits;
!function(PipelineCreateFlagBits) {
    PipelineCreateFlagBits[PipelineCreateFlagBits.DISABLE_OPTIMIZATION = 1] = "DISABLE_OPTIMIZATION", PipelineCreateFlagBits[PipelineCreateFlagBits.ALLOW_DERIVATIVES = 2] = "ALLOW_DERIVATIVES", PipelineCreateFlagBits[PipelineCreateFlagBits.DERIVATIVE = 4] = "DERIVATIVE", PipelineCreateFlagBits[PipelineCreateFlagBits.VIEW_INDEX_FROM_DEVICE_INDEX = 8] = "VIEW_INDEX_FROM_DEVICE_INDEX", PipelineCreateFlagBits[PipelineCreateFlagBits.DISPATCH_BASE = 16] = "DISPATCH_BASE", PipelineCreateFlagBits[PipelineCreateFlagBits.FAIL_ON_PIPELINE_COMPILE_REQUIRED = 256] = "FAIL_ON_PIPELINE_COMPILE_REQUIRED", PipelineCreateFlagBits[PipelineCreateFlagBits.EARLY_RETURN_ON_FAILURE = 512] = "EARLY_RETURN_ON_FAILURE", PipelineCreateFlagBits[PipelineCreateFlagBits.RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152] = "RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152] = "PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304] = "RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304] = "PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8] = "VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.DISPATCH_BASE_KHR = 16] = "DISPATCH_BASE_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384] = "RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768] = "RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536] = "RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072] = "RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096] = "RAY_TRACING_SKIP_TRIANGLES_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192] = "RAY_TRACING_SKIP_AABBS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288] = "RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.DEFER_COMPILE_BIT_NV = 32] = "DEFER_COMPILE_BIT_NV", PipelineCreateFlagBits[PipelineCreateFlagBits.CAPTURE_STATISTICS_BIT_KHR = 64] = "CAPTURE_STATISTICS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128] = "CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.INDIRECT_BINDABLE_BIT_NV = 262144] = "INDIRECT_BINDABLE_BIT_NV", PipelineCreateFlagBits[PipelineCreateFlagBits.LIBRARY_BIT_KHR = 2048] = "LIBRARY_BIT_KHR", PipelineCreateFlagBits[PipelineCreateFlagBits.FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256] = "FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.EARLY_RETURN_ON_FAILURE_BIT_EXT = 512] = "EARLY_RETURN_ON_FAILURE_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.DESCRIPTOR_BUFFER_BIT_EXT = 536870912] = "DESCRIPTOR_BUFFER_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608] = "RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.LINK_TIME_OPTIMIZATION_BIT_EXT = 1024] = "LINK_TIME_OPTIMIZATION_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576] = "RAY_TRACING_ALLOW_MOTION_BIT_NV", PipelineCreateFlagBits[PipelineCreateFlagBits.COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432] = "COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864] = "DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216] = "RAY_TRACING_OPACITY_MICROMAP_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.RESERVED_BIT_28_NV = 268435456] = "RESERVED_BIT_28_NV", PipelineCreateFlagBits[PipelineCreateFlagBits.NO_PROTECTED_ACCESS_BIT_EXT = 134217728] = "NO_PROTECTED_ACCESS_BIT_EXT", PipelineCreateFlagBits[PipelineCreateFlagBits.PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824] = "PROTECTED_ACCESS_ONLY_BIT_EXT";
}(PipelineCreateFlagBits || (PipelineCreateFlagBits = {}));
export var PipelineShaderStageCreateFlagBits;
!function(PipelineShaderStageCreateFlagBits) {
    PipelineShaderStageCreateFlagBits[PipelineShaderStageCreateFlagBits.ALLOW_VARYING_SUBGROUP_SIZE = 1] = "ALLOW_VARYING_SUBGROUP_SIZE", PipelineShaderStageCreateFlagBits[PipelineShaderStageCreateFlagBits.REQUIRE_FULL_SUBGROUPS = 2] = "REQUIRE_FULL_SUBGROUPS", PipelineShaderStageCreateFlagBits[PipelineShaderStageCreateFlagBits.ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1] = "ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT", PipelineShaderStageCreateFlagBits[PipelineShaderStageCreateFlagBits.REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2] = "REQUIRE_FULL_SUBGROUPS_BIT_EXT", PipelineShaderStageCreateFlagBits[PipelineShaderStageCreateFlagBits.RESERVED_3_BIT_KHR = 8] = "RESERVED_3_BIT_KHR";
}(PipelineShaderStageCreateFlagBits || (PipelineShaderStageCreateFlagBits = {}));
export var ColorComponentFlagBits;
!function(ColorComponentFlagBits) {
    ColorComponentFlagBits[ColorComponentFlagBits.R = 1] = "R", ColorComponentFlagBits[ColorComponentFlagBits.G = 2] = "G", ColorComponentFlagBits[ColorComponentFlagBits.B = 4] = "B", ColorComponentFlagBits[ColorComponentFlagBits.A = 8] = "A";
}(ColorComponentFlagBits || (ColorComponentFlagBits = {}));
export var FenceCreateFlagBits;
!function(FenceCreateFlagBits) {
    FenceCreateFlagBits[FenceCreateFlagBits.SIGNALED = 1] = "SIGNALED";
}(FenceCreateFlagBits || (FenceCreateFlagBits = {}));
export var SemaphoreCreateFlagBits;
SemaphoreCreateFlagBits || (SemaphoreCreateFlagBits = {});
export var FormatFeatureFlagBits;
!function(FormatFeatureFlagBits) {
    FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE = 1] = "SAMPLED_IMAGE", FormatFeatureFlagBits[FormatFeatureFlagBits.STORAGE_IMAGE = 2] = "STORAGE_IMAGE", FormatFeatureFlagBits[FormatFeatureFlagBits.STORAGE_IMAGE_ATOMIC = 4] = "STORAGE_IMAGE_ATOMIC", FormatFeatureFlagBits[FormatFeatureFlagBits.UNIFORM_TEXEL_BUFFER = 8] = "UNIFORM_TEXEL_BUFFER", FormatFeatureFlagBits[FormatFeatureFlagBits.STORAGE_TEXEL_BUFFER = 16] = "STORAGE_TEXEL_BUFFER", FormatFeatureFlagBits[FormatFeatureFlagBits.STORAGE_TEXEL_BUFFER_ATOMIC = 32] = "STORAGE_TEXEL_BUFFER_ATOMIC", FormatFeatureFlagBits[FormatFeatureFlagBits.VERTEX_BUFFER = 64] = "VERTEX_BUFFER", FormatFeatureFlagBits[FormatFeatureFlagBits.COLOR_ATTACHMENT = 128] = "COLOR_ATTACHMENT", FormatFeatureFlagBits[FormatFeatureFlagBits.COLOR_ATTACHMENT_BLEND = 256] = "COLOR_ATTACHMENT_BLEND", FormatFeatureFlagBits[FormatFeatureFlagBits.DEPTH_STENCIL_ATTACHMENT = 512] = "DEPTH_STENCIL_ATTACHMENT", FormatFeatureFlagBits[FormatFeatureFlagBits.BLIT_SRC = 1024] = "BLIT_SRC", FormatFeatureFlagBits[FormatFeatureFlagBits.BLIT_DST = 2048] = "BLIT_DST", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_FILTER_LINEAR = 4096] = "SAMPLED_IMAGE_FILTER_LINEAR", FormatFeatureFlagBits[FormatFeatureFlagBits.TRANSFER_SRC = 16384] = "TRANSFER_SRC", FormatFeatureFlagBits[FormatFeatureFlagBits.TRANSFER_DST = 32768] = "TRANSFER_DST", FormatFeatureFlagBits[FormatFeatureFlagBits.MIDPOINT_CHROMA_SAMPLES = 131072] = "MIDPOINT_CHROMA_SAMPLES", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER = 262144] = "SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER = 524288] = "SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT = 1048576] = "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE = 2097152] = "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE", FormatFeatureFlagBits[FormatFeatureFlagBits.DISJOINT = 4194304] = "DISJOINT", FormatFeatureFlagBits[FormatFeatureFlagBits.COSITED_CHROMA_SAMPLES = 8388608] = "COSITED_CHROMA_SAMPLES", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_FILTER_MINMAX = 65536] = "SAMPLED_IMAGE_FILTER_MINMAX", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192] = "SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG", FormatFeatureFlagBits[FormatFeatureFlagBits.VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432] = "VIDEO_DECODE_OUTPUT_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.VIDEO_DECODE_DPB_BIT_KHR = 67108864] = "VIDEO_DECODE_DPB_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.TRANSFER_SRC_BIT_KHR = 16384] = "TRANSFER_SRC_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.TRANSFER_DST_BIT_KHR = 32768] = "TRANSFER_DST_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536] = "SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT", FormatFeatureFlagBits[FormatFeatureFlagBits.ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912] = "ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072] = "MIDPOINT_CHROMA_SAMPLES_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144] = "SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288] = "SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576] = "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152] = "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.DISJOINT_BIT_KHR = 4194304] = "DISJOINT_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608] = "COSITED_CHROMA_SAMPLES_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192] = "SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT", FormatFeatureFlagBits[FormatFeatureFlagBits.FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216] = "FRAGMENT_DENSITY_MAP_BIT_EXT", FormatFeatureFlagBits[FormatFeatureFlagBits.FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824] = "FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.VIDEO_ENCODE_INPUT_BIT_KHR = 134217728] = "VIDEO_ENCODE_INPUT_BIT_KHR", FormatFeatureFlagBits[FormatFeatureFlagBits.VIDEO_ENCODE_DPB_BIT_KHR = 268435456] = "VIDEO_ENCODE_DPB_BIT_KHR";
}(FormatFeatureFlagBits || (FormatFeatureFlagBits = {}));
export var QueryControlFlagBits;
!function(QueryControlFlagBits) {
    QueryControlFlagBits[QueryControlFlagBits.PRECISE = 1] = "PRECISE";
}(QueryControlFlagBits || (QueryControlFlagBits = {}));
export var QueryResultFlagBits;
!function(QueryResultFlagBits) {
    QueryResultFlagBits[QueryResultFlagBits.VK_64 = 1] = "VK_64", QueryResultFlagBits[QueryResultFlagBits.WAIT = 2] = "WAIT", QueryResultFlagBits[QueryResultFlagBits.WITH_AVAILABILITY = 4] = "WITH_AVAILABILITY", QueryResultFlagBits[QueryResultFlagBits.PARTIAL = 8] = "PARTIAL", QueryResultFlagBits[QueryResultFlagBits.WITH_STATUS_BIT_KHR = 16] = "WITH_STATUS_BIT_KHR";
}(QueryResultFlagBits || (QueryResultFlagBits = {}));
export var CommandBufferUsageFlagBits;
!function(CommandBufferUsageFlagBits) {
    CommandBufferUsageFlagBits[CommandBufferUsageFlagBits.ONE_TIME_SUBMIT = 1] = "ONE_TIME_SUBMIT", CommandBufferUsageFlagBits[CommandBufferUsageFlagBits.RENDER_PASS_CONTINUE = 2] = "RENDER_PASS_CONTINUE", CommandBufferUsageFlagBits[CommandBufferUsageFlagBits.SIMULTANEOUS_USE = 4] = "SIMULTANEOUS_USE";
}(CommandBufferUsageFlagBits || (CommandBufferUsageFlagBits = {}));
export var QueryPipelineStatisticFlagBits;
!function(QueryPipelineStatisticFlagBits) {
    QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.INPUT_ASSEMBLY_VERTICES = 1] = "INPUT_ASSEMBLY_VERTICES", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.INPUT_ASSEMBLY_PRIMITIVES = 2] = "INPUT_ASSEMBLY_PRIMITIVES", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.VERTEX_SHADER_INVOCATIONS = 4] = "VERTEX_SHADER_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.GEOMETRY_SHADER_INVOCATIONS = 8] = "GEOMETRY_SHADER_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.GEOMETRY_SHADER_PRIMITIVES = 16] = "GEOMETRY_SHADER_PRIMITIVES", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.CLIPPING_INVOCATIONS = 32] = "CLIPPING_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.CLIPPING_PRIMITIVES = 64] = "CLIPPING_PRIMITIVES", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.FRAGMENT_SHADER_INVOCATIONS = 128] = "FRAGMENT_SHADER_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.TESSELLATION_CONTROL_SHADER_PATCHES = 256] = "TESSELLATION_CONTROL_SHADER_PATCHES", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.TESSELLATION_EVALUATION_SHADER_INVOCATIONS = 512] = "TESSELLATION_EVALUATION_SHADER_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.COMPUTE_SHADER_INVOCATIONS = 1024] = "COMPUTE_SHADER_INVOCATIONS", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.TASK_SHADER_INVOCATIONS_BIT_EXT = 2048] = "TASK_SHADER_INVOCATIONS_BIT_EXT", QueryPipelineStatisticFlagBits[QueryPipelineStatisticFlagBits.MESH_SHADER_INVOCATIONS_BIT_EXT = 4096] = "MESH_SHADER_INVOCATIONS_BIT_EXT";
}(QueryPipelineStatisticFlagBits || (QueryPipelineStatisticFlagBits = {}));
export var ImageAspectFlagBits;
!function(ImageAspectFlagBits) {
    ImageAspectFlagBits[ImageAspectFlagBits.COLOR = 1] = "COLOR", ImageAspectFlagBits[ImageAspectFlagBits.DEPTH = 2] = "DEPTH", ImageAspectFlagBits[ImageAspectFlagBits.STENCIL = 4] = "STENCIL", ImageAspectFlagBits[ImageAspectFlagBits.METADATA = 8] = "METADATA", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_0 = 16] = "PLANE_0", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_1 = 32] = "PLANE_1", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_2 = 64] = "PLANE_2", ImageAspectFlagBits[ImageAspectFlagBits.NONE = 0] = "NONE", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_0_BIT_KHR = 16] = "PLANE_0_BIT_KHR", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_1_BIT_KHR = 32] = "PLANE_1_BIT_KHR", ImageAspectFlagBits[ImageAspectFlagBits.PLANE_2_BIT_KHR = 64] = "PLANE_2_BIT_KHR", ImageAspectFlagBits[ImageAspectFlagBits.MEMORY_PLANE_0_BIT_EXT = 128] = "MEMORY_PLANE_0_BIT_EXT", ImageAspectFlagBits[ImageAspectFlagBits.MEMORY_PLANE_1_BIT_EXT = 256] = "MEMORY_PLANE_1_BIT_EXT", ImageAspectFlagBits[ImageAspectFlagBits.MEMORY_PLANE_2_BIT_EXT = 512] = "MEMORY_PLANE_2_BIT_EXT", ImageAspectFlagBits[ImageAspectFlagBits.MEMORY_PLANE_3_BIT_EXT = 1024] = "MEMORY_PLANE_3_BIT_EXT", ImageAspectFlagBits[ImageAspectFlagBits.NONE_KHR = 0] = "NONE_KHR";
}(ImageAspectFlagBits || (ImageAspectFlagBits = {}));
export var SparseImageFormatFlagBits;
!function(SparseImageFormatFlagBits) {
    SparseImageFormatFlagBits[SparseImageFormatFlagBits.SINGLE_MIPTAIL = 1] = "SINGLE_MIPTAIL", SparseImageFormatFlagBits[SparseImageFormatFlagBits.ALIGNED_MIP_SIZE = 2] = "ALIGNED_MIP_SIZE", SparseImageFormatFlagBits[SparseImageFormatFlagBits.NONSTANDARD_BLOCK_SIZE = 4] = "NONSTANDARD_BLOCK_SIZE";
}(SparseImageFormatFlagBits || (SparseImageFormatFlagBits = {}));
export var SparseMemoryBindFlagBits;
!function(SparseMemoryBindFlagBits) {
    SparseMemoryBindFlagBits[SparseMemoryBindFlagBits.METADATA = 1] = "METADATA";
}(SparseMemoryBindFlagBits || (SparseMemoryBindFlagBits = {}));
export var PipelineStageFlagBits;
!function(PipelineStageFlagBits) {
    PipelineStageFlagBits[PipelineStageFlagBits.TOP_OF_PIPE = 1] = "TOP_OF_PIPE", PipelineStageFlagBits[PipelineStageFlagBits.DRAW_INDIRECT = 2] = "DRAW_INDIRECT", PipelineStageFlagBits[PipelineStageFlagBits.VERTEX_INPUT = 4] = "VERTEX_INPUT", PipelineStageFlagBits[PipelineStageFlagBits.VERTEX_SHADER = 8] = "VERTEX_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.TESSELLATION_CONTROL_SHADER = 16] = "TESSELLATION_CONTROL_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.TESSELLATION_EVALUATION_SHADER = 32] = "TESSELLATION_EVALUATION_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.GEOMETRY_SHADER = 64] = "GEOMETRY_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.FRAGMENT_SHADER = 128] = "FRAGMENT_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.EARLY_FRAGMENT_TESTS = 256] = "EARLY_FRAGMENT_TESTS", PipelineStageFlagBits[PipelineStageFlagBits.LATE_FRAGMENT_TESTS = 512] = "LATE_FRAGMENT_TESTS", PipelineStageFlagBits[PipelineStageFlagBits.COLOR_ATTACHMENT_OUTPUT = 1024] = "COLOR_ATTACHMENT_OUTPUT", PipelineStageFlagBits[PipelineStageFlagBits.COMPUTE_SHADER = 2048] = "COMPUTE_SHADER", PipelineStageFlagBits[PipelineStageFlagBits.TRANSFER = 4096] = "TRANSFER", PipelineStageFlagBits[PipelineStageFlagBits.BOTTOM_OF_PIPE = 8192] = "BOTTOM_OF_PIPE", PipelineStageFlagBits[PipelineStageFlagBits.HOST = 16384] = "HOST", PipelineStageFlagBits[PipelineStageFlagBits.ALL_GRAPHICS = 32768] = "ALL_GRAPHICS", PipelineStageFlagBits[PipelineStageFlagBits.ALL_COMMANDS = 65536] = "ALL_COMMANDS", PipelineStageFlagBits[PipelineStageFlagBits.NONE = 0] = "NONE", PipelineStageFlagBits[PipelineStageFlagBits.TRANSFORM_FEEDBACK_BIT_EXT = 16777216] = "TRANSFORM_FEEDBACK_BIT_EXT", PipelineStageFlagBits[PipelineStageFlagBits.CONDITIONAL_RENDERING_BIT_EXT = 262144] = "CONDITIONAL_RENDERING_BIT_EXT", PipelineStageFlagBits[PipelineStageFlagBits.ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432] = "ACCELERATION_STRUCTURE_BUILD_BIT_KHR", PipelineStageFlagBits[PipelineStageFlagBits.RAY_TRACING_SHADER_BIT_KHR = 2097152] = "RAY_TRACING_SHADER_BIT_KHR", PipelineStageFlagBits[PipelineStageFlagBits.SHADING_RATE_IMAGE_BIT_NV = 4194304] = "SHADING_RATE_IMAGE_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.RAY_TRACING_SHADER_BIT_NV = 2097152] = "RAY_TRACING_SHADER_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432] = "ACCELERATION_STRUCTURE_BUILD_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.TASK_SHADER_BIT_NV = 524288] = "TASK_SHADER_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.MESH_SHADER_BIT_NV = 1048576] = "MESH_SHADER_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608] = "FRAGMENT_DENSITY_PROCESS_BIT_EXT", PipelineStageFlagBits[PipelineStageFlagBits.FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304] = "FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", PipelineStageFlagBits[PipelineStageFlagBits.COMMAND_PREPROCESS_BIT_NV = 131072] = "COMMAND_PREPROCESS_BIT_NV", PipelineStageFlagBits[PipelineStageFlagBits.NONE_KHR = 0] = "NONE_KHR", PipelineStageFlagBits[PipelineStageFlagBits.TASK_SHADER_BIT_EXT = 524288] = "TASK_SHADER_BIT_EXT", PipelineStageFlagBits[PipelineStageFlagBits.MESH_SHADER_BIT_EXT = 1048576] = "MESH_SHADER_BIT_EXT";
}(PipelineStageFlagBits || (PipelineStageFlagBits = {}));
export var CommandPoolCreateFlagBits;
!function(CommandPoolCreateFlagBits) {
    CommandPoolCreateFlagBits[CommandPoolCreateFlagBits.TRANSIENT = 1] = "TRANSIENT", CommandPoolCreateFlagBits[CommandPoolCreateFlagBits.RESET_COMMAND_BUFFER = 2] = "RESET_COMMAND_BUFFER", CommandPoolCreateFlagBits[CommandPoolCreateFlagBits.PROTECTED = 4] = "PROTECTED";
}(CommandPoolCreateFlagBits || (CommandPoolCreateFlagBits = {}));
export var CommandPoolResetFlagBits;
!function(CommandPoolResetFlagBits) {
    CommandPoolResetFlagBits[CommandPoolResetFlagBits.RELEASE_RESOURCES = 1] = "RELEASE_RESOURCES", CommandPoolResetFlagBits[CommandPoolResetFlagBits.RESERVED_1_BIT_COREAVI = 2] = "RESERVED_1_BIT_COREAVI";
}(CommandPoolResetFlagBits || (CommandPoolResetFlagBits = {}));
export var CommandBufferResetFlagBits;
!function(CommandBufferResetFlagBits) {
    CommandBufferResetFlagBits[CommandBufferResetFlagBits.RELEASE_RESOURCES = 1] = "RELEASE_RESOURCES";
}(CommandBufferResetFlagBits || (CommandBufferResetFlagBits = {}));
export var SampleCountFlagBits;
!function(SampleCountFlagBits) {
    SampleCountFlagBits[SampleCountFlagBits.VK_1 = 1] = "VK_1", SampleCountFlagBits[SampleCountFlagBits.VK_2 = 2] = "VK_2", SampleCountFlagBits[SampleCountFlagBits.VK_4 = 4] = "VK_4", SampleCountFlagBits[SampleCountFlagBits.VK_8 = 8] = "VK_8", SampleCountFlagBits[SampleCountFlagBits.VK_16 = 16] = "VK_16", SampleCountFlagBits[SampleCountFlagBits.VK_32 = 32] = "VK_32", SampleCountFlagBits[SampleCountFlagBits.VK_64 = 64] = "VK_64";
}(SampleCountFlagBits || (SampleCountFlagBits = {}));
export var AttachmentDescriptionFlagBits;
!function(AttachmentDescriptionFlagBits) {
    AttachmentDescriptionFlagBits[AttachmentDescriptionFlagBits.MAY_ALIAS = 1] = "MAY_ALIAS";
}(AttachmentDescriptionFlagBits || (AttachmentDescriptionFlagBits = {}));
export var StencilFaceFlagBits;
!function(StencilFaceFlagBits) {
    StencilFaceFlagBits[StencilFaceFlagBits.FRONT = 1] = "FRONT", StencilFaceFlagBits[StencilFaceFlagBits.BACK = 2] = "BACK", StencilFaceFlagBits[StencilFaceFlagBits.FRONT_AND_BACK = 3] = "FRONT_AND_BACK", StencilFaceFlagBits[StencilFaceFlagBits.STENCIL_FRONT_AND_BACK = 3] = "STENCIL_FRONT_AND_BACK";
}(StencilFaceFlagBits || (StencilFaceFlagBits = {}));
export var DescriptorPoolCreateFlagBits;
!function(DescriptorPoolCreateFlagBits) {
    DescriptorPoolCreateFlagBits[DescriptorPoolCreateFlagBits.FREE_DESCRIPTOR_SET = 1] = "FREE_DESCRIPTOR_SET", DescriptorPoolCreateFlagBits[DescriptorPoolCreateFlagBits.UPDATE_AFTER_BIND = 2] = "UPDATE_AFTER_BIND", DescriptorPoolCreateFlagBits[DescriptorPoolCreateFlagBits.UPDATE_AFTER_BIND_BIT_EXT = 2] = "UPDATE_AFTER_BIND_BIT_EXT", DescriptorPoolCreateFlagBits[DescriptorPoolCreateFlagBits.HOST_ONLY_BIT_VALVE = 4] = "HOST_ONLY_BIT_VALVE", DescriptorPoolCreateFlagBits[DescriptorPoolCreateFlagBits.HOST_ONLY_BIT_EXT = 4] = "HOST_ONLY_BIT_EXT";
}(DescriptorPoolCreateFlagBits || (DescriptorPoolCreateFlagBits = {}));
export var DependencyFlagBits;
!function(DependencyFlagBits) {
    DependencyFlagBits[DependencyFlagBits.BY_REGION = 1] = "BY_REGION", DependencyFlagBits[DependencyFlagBits.DEVICE_GROUP = 4] = "DEVICE_GROUP", DependencyFlagBits[DependencyFlagBits.VIEW_LOCAL = 2] = "VIEW_LOCAL", DependencyFlagBits[DependencyFlagBits.VIEW_LOCAL_BIT_KHR = 2] = "VIEW_LOCAL_BIT_KHR", DependencyFlagBits[DependencyFlagBits.DEVICE_GROUP_BIT_KHR = 4] = "DEVICE_GROUP_BIT_KHR", DependencyFlagBits[DependencyFlagBits.FEEDBACK_LOOP_BIT_EXT = 8] = "FEEDBACK_LOOP_BIT_EXT";
}(DependencyFlagBits || (DependencyFlagBits = {}));
export var SemaphoreType;
!function(SemaphoreType) {
    SemaphoreType[SemaphoreType.BINARY = 0] = "BINARY", SemaphoreType[SemaphoreType.TIMELINE = 1] = "TIMELINE", SemaphoreType[SemaphoreType.BINARY_KHR = 0] = "BINARY_KHR", SemaphoreType[SemaphoreType.TIMELINE_KHR = 1] = "TIMELINE_KHR";
}(SemaphoreType || (SemaphoreType = {}));
export var SemaphoreWaitFlagBits;
!function(SemaphoreWaitFlagBits) {
    SemaphoreWaitFlagBits[SemaphoreWaitFlagBits.ANY = 1] = "ANY", SemaphoreWaitFlagBits[SemaphoreWaitFlagBits.ANY_BIT_KHR = 1] = "ANY_BIT_KHR";
}(SemaphoreWaitFlagBits || (SemaphoreWaitFlagBits = {}));
export var PresentModeKHR;
!function(PresentModeKHR) {
    PresentModeKHR[PresentModeKHR.PRESENT_MODE_IMMEDIATE_KHR = 0] = "PRESENT_MODE_IMMEDIATE_KHR", PresentModeKHR[PresentModeKHR.PRESENT_MODE_MAILBOX_KHR = 1] = "PRESENT_MODE_MAILBOX_KHR", PresentModeKHR[PresentModeKHR.PRESENT_MODE_FIFO_KHR = 2] = "PRESENT_MODE_FIFO_KHR", PresentModeKHR[PresentModeKHR.PRESENT_MODE_FIFO_RELAXED_KHR = 3] = "PRESENT_MODE_FIFO_RELAXED_KHR", PresentModeKHR[PresentModeKHR.PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000] = "PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR", PresentModeKHR[PresentModeKHR.PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001] = "PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
}(PresentModeKHR || (PresentModeKHR = {}));
export var ColorSpaceKHR;
!function(ColorSpaceKHR) {
    ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_SRGB_NONLINEAR_KHR = 0] = "COLOR_SPACE_SRGB_NONLINEAR_KHR", ColorSpaceKHR[ColorSpaceKHR.COLORSPACE_SRGB_NONLINEAR_KHR = 0] = "COLORSPACE_SRGB_NONLINEAR_KHR", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001] = "COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002] = "COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003] = "COLOR_SPACE_DISPLAY_P3_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004] = "COLOR_SPACE_DCI_P3_NONLINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_BT709_LINEAR_EXT = 1000104005] = "COLOR_SPACE_BT709_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006] = "COLOR_SPACE_BT709_NONLINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007] = "COLOR_SPACE_BT2020_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_HDR10_ST2084_EXT = 1000104008] = "COLOR_SPACE_HDR10_ST2084_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DOLBYVISION_EXT = 1000104009] = "COLOR_SPACE_DOLBYVISION_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_HDR10_HLG_EXT = 1000104010] = "COLOR_SPACE_HDR10_HLG_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011] = "COLOR_SPACE_ADOBERGB_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012] = "COLOR_SPACE_ADOBERGB_NONLINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_PASS_THROUGH_EXT = 1000104013] = "COLOR_SPACE_PASS_THROUGH_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014] = "COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003] = "COLOR_SPACE_DCI_P3_LINEAR_EXT", ColorSpaceKHR[ColorSpaceKHR.COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000] = "COLOR_SPACE_DISPLAY_NATIVE_AMD";
}(ColorSpaceKHR || (ColorSpaceKHR = {}));
export var DisplayPlaneAlphaFlagBitsKHR;
!function(DisplayPlaneAlphaFlagBitsKHR) {
    DisplayPlaneAlphaFlagBitsKHR[DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1] = "DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR", DisplayPlaneAlphaFlagBitsKHR[DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2] = "DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR", DisplayPlaneAlphaFlagBitsKHR[DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4] = "DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR", DisplayPlaneAlphaFlagBitsKHR[DisplayPlaneAlphaFlagBitsKHR.DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8] = "DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR";
}(DisplayPlaneAlphaFlagBitsKHR || (DisplayPlaneAlphaFlagBitsKHR = {}));
export var CompositeAlphaFlagBitsKHR;
!function(CompositeAlphaFlagBitsKHR) {
    CompositeAlphaFlagBitsKHR[CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1] = "COMPOSITE_ALPHA_OPAQUE_BIT_KHR", CompositeAlphaFlagBitsKHR[CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2] = "COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR", CompositeAlphaFlagBitsKHR[CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4] = "COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR", CompositeAlphaFlagBitsKHR[CompositeAlphaFlagBitsKHR.COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8] = "COMPOSITE_ALPHA_INHERIT_BIT_KHR";
}(CompositeAlphaFlagBitsKHR || (CompositeAlphaFlagBitsKHR = {}));
export var SurfaceTransformFlagBitsKHR;
!function(SurfaceTransformFlagBitsKHR) {
    SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1] = "SURFACE_TRANSFORM_IDENTITY_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2] = "SURFACE_TRANSFORM_ROTATE_90_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4] = "SURFACE_TRANSFORM_ROTATE_180_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8] = "SURFACE_TRANSFORM_ROTATE_270_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16] = "SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32] = "SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64] = "SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128] = "SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR", SurfaceTransformFlagBitsKHR[SurfaceTransformFlagBitsKHR.SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256] = "SURFACE_TRANSFORM_INHERIT_BIT_KHR";
}(SurfaceTransformFlagBitsKHR || (SurfaceTransformFlagBitsKHR = {}));
export var SwapchainImageUsageFlagBitsANDROID;
!function(SwapchainImageUsageFlagBitsANDROID) {
    SwapchainImageUsageFlagBitsANDROID[SwapchainImageUsageFlagBitsANDROID.SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 1] = "SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID";
}(SwapchainImageUsageFlagBitsANDROID || (SwapchainImageUsageFlagBitsANDROID = {}));
export var TimeDomainEXT;
!function(TimeDomainEXT) {
    TimeDomainEXT[TimeDomainEXT.TIME_DOMAIN_DEVICE_EXT = 0] = "TIME_DOMAIN_DEVICE_EXT", TimeDomainEXT[TimeDomainEXT.TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1] = "TIME_DOMAIN_CLOCK_MONOTONIC_EXT", TimeDomainEXT[TimeDomainEXT.TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2] = "TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT", TimeDomainEXT[TimeDomainEXT.TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3] = "TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT";
}(TimeDomainEXT || (TimeDomainEXT = {}));
export var DebugReportFlagBitsEXT;
!function(DebugReportFlagBitsEXT) {
    DebugReportFlagBitsEXT[DebugReportFlagBitsEXT.DEBUG_REPORT_INFORMATION_BIT_EXT = 1] = "DEBUG_REPORT_INFORMATION_BIT_EXT", DebugReportFlagBitsEXT[DebugReportFlagBitsEXT.DEBUG_REPORT_WARNING_BIT_EXT = 2] = "DEBUG_REPORT_WARNING_BIT_EXT", DebugReportFlagBitsEXT[DebugReportFlagBitsEXT.DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4] = "DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT", DebugReportFlagBitsEXT[DebugReportFlagBitsEXT.DEBUG_REPORT_ERROR_BIT_EXT = 8] = "DEBUG_REPORT_ERROR_BIT_EXT", DebugReportFlagBitsEXT[DebugReportFlagBitsEXT.DEBUG_REPORT_DEBUG_BIT_EXT = 16] = "DEBUG_REPORT_DEBUG_BIT_EXT";
}(DebugReportFlagBitsEXT || (DebugReportFlagBitsEXT = {}));
export var DebugReportObjectTypeEXT;
!function(DebugReportObjectTypeEXT) {
    DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0] = "DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1] = "DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2] = "DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3] = "DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4] = "DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5] = "DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6] = "DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7] = "DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8] = "DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9] = "DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10] = "DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11] = "DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12] = "DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13] = "DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14] = "DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15] = "DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16] = "DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17] = "DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18] = "DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19] = "DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20] = "DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21] = "DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22] = "DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23] = "DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24] = "DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25] = "DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26] = "DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27] = "DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28] = "DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28] = "DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29] = "DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30] = "DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33] = "DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33] = "DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000] = "DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000] = "DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000] = "DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001] = "DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000] = "DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000] = "DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000] = "DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000] = "DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT", DebugReportObjectTypeEXT[DebugReportObjectTypeEXT.DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000] = "DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT";
}(DebugReportObjectTypeEXT || (DebugReportObjectTypeEXT = {}));
export var DeviceMemoryReportEventTypeEXT;
!function(DeviceMemoryReportEventTypeEXT) {
    DeviceMemoryReportEventTypeEXT[DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0] = "DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT", DeviceMemoryReportEventTypeEXT[DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1] = "DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT", DeviceMemoryReportEventTypeEXT[DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2] = "DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT", DeviceMemoryReportEventTypeEXT[DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3] = "DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT", DeviceMemoryReportEventTypeEXT[DeviceMemoryReportEventTypeEXT.DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4] = "DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT";
}(DeviceMemoryReportEventTypeEXT || (DeviceMemoryReportEventTypeEXT = {}));
export var RasterizationOrderAMD;
!function(RasterizationOrderAMD) {
    RasterizationOrderAMD[RasterizationOrderAMD.RASTERIZATION_ORDER_STRICT_AMD = 0] = "RASTERIZATION_ORDER_STRICT_AMD", RasterizationOrderAMD[RasterizationOrderAMD.RASTERIZATION_ORDER_RELAXED_AMD = 1] = "RASTERIZATION_ORDER_RELAXED_AMD";
}(RasterizationOrderAMD || (RasterizationOrderAMD = {}));
export var ExternalMemoryHandleTypeFlagBitsNV;
!function(ExternalMemoryHandleTypeFlagBitsNV) {
    ExternalMemoryHandleTypeFlagBitsNV[ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1] = "EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV", ExternalMemoryHandleTypeFlagBitsNV[ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2] = "EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV", ExternalMemoryHandleTypeFlagBitsNV[ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4] = "EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV", ExternalMemoryHandleTypeFlagBitsNV[ExternalMemoryHandleTypeFlagBitsNV.EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8] = "EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV";
}(ExternalMemoryHandleTypeFlagBitsNV || (ExternalMemoryHandleTypeFlagBitsNV = {}));
export var ExternalMemoryFeatureFlagBitsNV;
!function(ExternalMemoryFeatureFlagBitsNV) {
    ExternalMemoryFeatureFlagBitsNV[ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1] = "EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV", ExternalMemoryFeatureFlagBitsNV[ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2] = "EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV", ExternalMemoryFeatureFlagBitsNV[ExternalMemoryFeatureFlagBitsNV.EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4] = "EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV";
}(ExternalMemoryFeatureFlagBitsNV || (ExternalMemoryFeatureFlagBitsNV = {}));
export var ValidationCheckEXT;
!function(ValidationCheckEXT) {
    ValidationCheckEXT[ValidationCheckEXT.VALIDATION_CHECK_ALL_EXT = 0] = "VALIDATION_CHECK_ALL_EXT", ValidationCheckEXT[ValidationCheckEXT.VALIDATION_CHECK_SHADERS_EXT = 1] = "VALIDATION_CHECK_SHADERS_EXT";
}(ValidationCheckEXT || (ValidationCheckEXT = {}));
export var ValidationFeatureEnableEXT;
!function(ValidationFeatureEnableEXT) {
    ValidationFeatureEnableEXT[ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0] = "VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT", ValidationFeatureEnableEXT[ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1] = "VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT", ValidationFeatureEnableEXT[ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2] = "VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT", ValidationFeatureEnableEXT[ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3] = "VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT", ValidationFeatureEnableEXT[ValidationFeatureEnableEXT.VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4] = "VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT";
}(ValidationFeatureEnableEXT || (ValidationFeatureEnableEXT = {}));
export var ValidationFeatureDisableEXT;
!function(ValidationFeatureDisableEXT) {
    ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_ALL_EXT = 0] = "VALIDATION_FEATURE_DISABLE_ALL_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1] = "VALIDATION_FEATURE_DISABLE_SHADERS_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2] = "VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3] = "VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4] = "VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5] = "VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6] = "VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT", ValidationFeatureDisableEXT[ValidationFeatureDisableEXT.VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7] = "VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT";
}(ValidationFeatureDisableEXT || (ValidationFeatureDisableEXT = {}));
export var SubgroupFeatureFlagBits;
!function(SubgroupFeatureFlagBits) {
    SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.BASIC = 1] = "BASIC", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.VOTE = 2] = "VOTE", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.ARITHMETIC = 4] = "ARITHMETIC", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.BALLOT = 8] = "BALLOT", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.SHUFFLE = 16] = "SHUFFLE", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.SHUFFLE_RELATIVE = 32] = "SHUFFLE_RELATIVE", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.CLUSTERED = 64] = "CLUSTERED", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.QUAD = 128] = "QUAD", SubgroupFeatureFlagBits[SubgroupFeatureFlagBits.PARTITIONED_BIT_NV = 256] = "PARTITIONED_BIT_NV";
}(SubgroupFeatureFlagBits || (SubgroupFeatureFlagBits = {}));
export var IndirectCommandsLayoutUsageFlagBitsNV;
!function(IndirectCommandsLayoutUsageFlagBitsNV) {
    IndirectCommandsLayoutUsageFlagBitsNV[IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1] = "INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV", IndirectCommandsLayoutUsageFlagBitsNV[IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2] = "INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV", IndirectCommandsLayoutUsageFlagBitsNV[IndirectCommandsLayoutUsageFlagBitsNV.INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4] = "INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV";
}(IndirectCommandsLayoutUsageFlagBitsNV || (IndirectCommandsLayoutUsageFlagBitsNV = {}));
export var IndirectStateFlagBitsNV;
!function(IndirectStateFlagBitsNV) {
    IndirectStateFlagBitsNV[IndirectStateFlagBitsNV.INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1] = "INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV";
}(IndirectStateFlagBitsNV || (IndirectStateFlagBitsNV = {}));
export var IndirectCommandsTokenTypeNV;
!function(IndirectCommandsTokenTypeNV) {
    IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0] = "INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1] = "INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2] = "INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3] = "INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4] = "INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5] = "INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6] = "INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7] = "INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV", IndirectCommandsTokenTypeNV[IndirectCommandsTokenTypeNV.INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000] = "INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV";
}(IndirectCommandsTokenTypeNV || (IndirectCommandsTokenTypeNV = {}));
export var PrivateDataSlotCreateFlagBits;
PrivateDataSlotCreateFlagBits || (PrivateDataSlotCreateFlagBits = {});
export var DescriptorSetLayoutCreateFlagBits;
!function(DescriptorSetLayoutCreateFlagBits) {
    DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.UPDATE_AFTER_BIND_POOL = 2] = "UPDATE_AFTER_BIND_POOL", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.PUSH_DESCRIPTOR_BIT_KHR = 1] = "PUSH_DESCRIPTOR_BIT_KHR", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.UPDATE_AFTER_BIND_POOL_BIT_EXT = 2] = "UPDATE_AFTER_BIND_POOL_BIT_EXT", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.DESCRIPTOR_BUFFER_BIT_EXT = 16] = "DESCRIPTOR_BUFFER_BIT_EXT", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32] = "EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.RESERVED_3_BIT_AMD = 8] = "RESERVED_3_BIT_AMD", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.HOST_ONLY_POOL_BIT_VALVE = 4] = "HOST_ONLY_POOL_BIT_VALVE", DescriptorSetLayoutCreateFlagBits[DescriptorSetLayoutCreateFlagBits.HOST_ONLY_POOL_BIT_EXT = 4] = "HOST_ONLY_POOL_BIT_EXT";
}(DescriptorSetLayoutCreateFlagBits || (DescriptorSetLayoutCreateFlagBits = {}));
export var ExternalMemoryHandleTypeFlagBits;
!function(ExternalMemoryHandleTypeFlagBits) {
    ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_FD = 1] = "OPAQUE_FD", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_WIN32 = 2] = "OPAQUE_WIN32", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_WIN32_KMT = 4] = "OPAQUE_WIN32_KMT", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D11_TEXTURE = 8] = "D3D11_TEXTURE", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D11_TEXTURE_KMT = 16] = "D3D11_TEXTURE_KMT", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D12_HEAP = 32] = "D3D12_HEAP", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D12_RESOURCE = 64] = "D3D12_RESOURCE", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_FD_BIT_KHR = 1] = "OPAQUE_FD_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_WIN32_BIT_KHR = 2] = "OPAQUE_WIN32_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.OPAQUE_WIN32_KMT_BIT_KHR = 4] = "OPAQUE_WIN32_KMT_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D11_TEXTURE_BIT_KHR = 8] = "D3D11_TEXTURE_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D11_TEXTURE_KMT_BIT_KHR = 16] = "D3D11_TEXTURE_KMT_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D12_HEAP_BIT_KHR = 32] = "D3D12_HEAP_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.D3D12_RESOURCE_BIT_KHR = 64] = "D3D12_RESOURCE_BIT_KHR", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.DMA_BUF_BIT_EXT = 512] = "DMA_BUF_BIT_EXT", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024] = "ANDROID_HARDWARE_BUFFER_BIT_ANDROID", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.HOST_ALLOCATION_BIT_EXT = 128] = "HOST_ALLOCATION_BIT_EXT", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256] = "HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.ZIRCON_VMO_BIT_FUCHSIA = 2048] = "ZIRCON_VMO_BIT_FUCHSIA", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.RDMA_ADDRESS_BIT_NV = 4096] = "RDMA_ADDRESS_BIT_NV", ExternalMemoryHandleTypeFlagBits[ExternalMemoryHandleTypeFlagBits.RESERVED_13_BIT_NV = 8192] = "RESERVED_13_BIT_NV";
}(ExternalMemoryHandleTypeFlagBits || (ExternalMemoryHandleTypeFlagBits = {}));
export var ExternalMemoryFeatureFlagBits;
!function(ExternalMemoryFeatureFlagBits) {
    ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.DEDICATED_ONLY = 1] = "DEDICATED_ONLY", ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.EXPORTABLE = 2] = "EXPORTABLE", ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.IMPORTABLE = 4] = "IMPORTABLE", ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.DEDICATED_ONLY_BIT_KHR = 1] = "DEDICATED_ONLY_BIT_KHR", ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.EXPORTABLE_BIT_KHR = 2] = "EXPORTABLE_BIT_KHR", ExternalMemoryFeatureFlagBits[ExternalMemoryFeatureFlagBits.IMPORTABLE_BIT_KHR = 4] = "IMPORTABLE_BIT_KHR";
}(ExternalMemoryFeatureFlagBits || (ExternalMemoryFeatureFlagBits = {}));
export var ExternalSemaphoreHandleTypeFlagBits;
!function(ExternalSemaphoreHandleTypeFlagBits) {
    ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_FD = 1] = "OPAQUE_FD", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_WIN32 = 2] = "OPAQUE_WIN32", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_WIN32_KMT = 4] = "OPAQUE_WIN32_KMT", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.D3D12_FENCE = 8] = "D3D12_FENCE", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.D3D11_FENCE = 8] = "D3D11_FENCE", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.SYNC_FD = 16] = "SYNC_FD", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_FD_BIT_KHR = 1] = "OPAQUE_FD_BIT_KHR", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_WIN32_BIT_KHR = 2] = "OPAQUE_WIN32_BIT_KHR", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.OPAQUE_WIN32_KMT_BIT_KHR = 4] = "OPAQUE_WIN32_KMT_BIT_KHR", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.D3D12_FENCE_BIT_KHR = 8] = "D3D12_FENCE_BIT_KHR", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.SYNC_FD_BIT_KHR = 16] = "SYNC_FD_BIT_KHR", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.ZIRCON_EVENT_BIT_FUCHSIA = 128] = "ZIRCON_EVENT_BIT_FUCHSIA", ExternalSemaphoreHandleTypeFlagBits[ExternalSemaphoreHandleTypeFlagBits.RESERVED_5_BIT_NV = 32] = "RESERVED_5_BIT_NV";
}(ExternalSemaphoreHandleTypeFlagBits || (ExternalSemaphoreHandleTypeFlagBits = {}));
export var ExternalSemaphoreFeatureFlagBits;
!function(ExternalSemaphoreFeatureFlagBits) {
    ExternalSemaphoreFeatureFlagBits[ExternalSemaphoreFeatureFlagBits.EXPORTABLE = 1] = "EXPORTABLE", ExternalSemaphoreFeatureFlagBits[ExternalSemaphoreFeatureFlagBits.IMPORTABLE = 2] = "IMPORTABLE", ExternalSemaphoreFeatureFlagBits[ExternalSemaphoreFeatureFlagBits.EXPORTABLE_BIT_KHR = 1] = "EXPORTABLE_BIT_KHR", ExternalSemaphoreFeatureFlagBits[ExternalSemaphoreFeatureFlagBits.IMPORTABLE_BIT_KHR = 2] = "IMPORTABLE_BIT_KHR";
}(ExternalSemaphoreFeatureFlagBits || (ExternalSemaphoreFeatureFlagBits = {}));
export var SemaphoreImportFlagBits;
!function(SemaphoreImportFlagBits) {
    SemaphoreImportFlagBits[SemaphoreImportFlagBits.TEMPORARY = 1] = "TEMPORARY", SemaphoreImportFlagBits[SemaphoreImportFlagBits.TEMPORARY_BIT_KHR = 1] = "TEMPORARY_BIT_KHR";
}(SemaphoreImportFlagBits || (SemaphoreImportFlagBits = {}));
export var ExternalFenceHandleTypeFlagBits;
!function(ExternalFenceHandleTypeFlagBits) {
    ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_FD = 1] = "OPAQUE_FD", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_WIN32 = 2] = "OPAQUE_WIN32", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_WIN32_KMT = 4] = "OPAQUE_WIN32_KMT", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.SYNC_FD = 8] = "SYNC_FD", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_FD_BIT_KHR = 1] = "OPAQUE_FD_BIT_KHR", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_WIN32_BIT_KHR = 2] = "OPAQUE_WIN32_BIT_KHR", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.OPAQUE_WIN32_KMT_BIT_KHR = 4] = "OPAQUE_WIN32_KMT_BIT_KHR", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.SYNC_FD_BIT_KHR = 8] = "SYNC_FD_BIT_KHR", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.RESERVED_4_BIT_NV = 16] = "RESERVED_4_BIT_NV", ExternalFenceHandleTypeFlagBits[ExternalFenceHandleTypeFlagBits.RESERVED_5_BIT_NV = 32] = "RESERVED_5_BIT_NV";
}(ExternalFenceHandleTypeFlagBits || (ExternalFenceHandleTypeFlagBits = {}));
export var ExternalFenceFeatureFlagBits;
!function(ExternalFenceFeatureFlagBits) {
    ExternalFenceFeatureFlagBits[ExternalFenceFeatureFlagBits.EXPORTABLE = 1] = "EXPORTABLE", ExternalFenceFeatureFlagBits[ExternalFenceFeatureFlagBits.IMPORTABLE = 2] = "IMPORTABLE", ExternalFenceFeatureFlagBits[ExternalFenceFeatureFlagBits.EXPORTABLE_BIT_KHR = 1] = "EXPORTABLE_BIT_KHR", ExternalFenceFeatureFlagBits[ExternalFenceFeatureFlagBits.IMPORTABLE_BIT_KHR = 2] = "IMPORTABLE_BIT_KHR";
}(ExternalFenceFeatureFlagBits || (ExternalFenceFeatureFlagBits = {}));
export var FenceImportFlagBits;
!function(FenceImportFlagBits) {
    FenceImportFlagBits[FenceImportFlagBits.TEMPORARY = 1] = "TEMPORARY", FenceImportFlagBits[FenceImportFlagBits.TEMPORARY_BIT_KHR = 1] = "TEMPORARY_BIT_KHR";
}(FenceImportFlagBits || (FenceImportFlagBits = {}));
export var SurfaceCounterFlagBitsEXT;
!function(SurfaceCounterFlagBitsEXT) {
    SurfaceCounterFlagBitsEXT[SurfaceCounterFlagBitsEXT.SURFACE_COUNTER_VBLANK_BIT_EXT = 1] = "SURFACE_COUNTER_VBLANK_BIT_EXT", SurfaceCounterFlagBitsEXT[SurfaceCounterFlagBitsEXT.SURFACE_COUNTER_VBLANK_EXT = 1] = "SURFACE_COUNTER_VBLANK_EXT";
}(SurfaceCounterFlagBitsEXT || (SurfaceCounterFlagBitsEXT = {}));
export var DisplayPowerStateEXT;
!function(DisplayPowerStateEXT) {
    DisplayPowerStateEXT[DisplayPowerStateEXT.DISPLAY_POWER_STATE_OFF_EXT = 0] = "DISPLAY_POWER_STATE_OFF_EXT", DisplayPowerStateEXT[DisplayPowerStateEXT.DISPLAY_POWER_STATE_SUSPEND_EXT = 1] = "DISPLAY_POWER_STATE_SUSPEND_EXT", DisplayPowerStateEXT[DisplayPowerStateEXT.DISPLAY_POWER_STATE_ON_EXT = 2] = "DISPLAY_POWER_STATE_ON_EXT";
}(DisplayPowerStateEXT || (DisplayPowerStateEXT = {}));
export var DeviceEventTypeEXT;
!function(DeviceEventTypeEXT) {
    DeviceEventTypeEXT[DeviceEventTypeEXT.DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0] = "DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT";
}(DeviceEventTypeEXT || (DeviceEventTypeEXT = {}));
export var DisplayEventTypeEXT;
!function(DisplayEventTypeEXT) {
    DisplayEventTypeEXT[DisplayEventTypeEXT.DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0] = "DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT";
}(DisplayEventTypeEXT || (DisplayEventTypeEXT = {}));
export var PeerMemoryFeatureFlagBits;
!function(PeerMemoryFeatureFlagBits) {
    PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.COPY_SRC = 1] = "COPY_SRC", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.COPY_DST = 2] = "COPY_DST", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.GENERIC_SRC = 4] = "GENERIC_SRC", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.GENERIC_DST = 8] = "GENERIC_DST", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.COPY_SRC_BIT_KHR = 1] = "COPY_SRC_BIT_KHR", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.COPY_DST_BIT_KHR = 2] = "COPY_DST_BIT_KHR", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.GENERIC_SRC_BIT_KHR = 4] = "GENERIC_SRC_BIT_KHR", PeerMemoryFeatureFlagBits[PeerMemoryFeatureFlagBits.GENERIC_DST_BIT_KHR = 8] = "GENERIC_DST_BIT_KHR";
}(PeerMemoryFeatureFlagBits || (PeerMemoryFeatureFlagBits = {}));
export var MemoryAllocateFlagBits;
!function(MemoryAllocateFlagBits) {
    MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_MASK = 1] = "DEVICE_MASK", MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_ADDRESS = 2] = "DEVICE_ADDRESS", MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_ADDRESS_CAPTURE_REPLAY = 4] = "DEVICE_ADDRESS_CAPTURE_REPLAY", MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_MASK_BIT_KHR = 1] = "DEVICE_MASK_BIT_KHR", MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_ADDRESS_BIT_KHR = 2] = "DEVICE_ADDRESS_BIT_KHR", MemoryAllocateFlagBits[MemoryAllocateFlagBits.DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4] = "DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR";
}(MemoryAllocateFlagBits || (MemoryAllocateFlagBits = {}));
export var DeviceGroupPresentModeFlagBitsKHR;
!function(DeviceGroupPresentModeFlagBitsKHR) {
    DeviceGroupPresentModeFlagBitsKHR[DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1] = "DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR", DeviceGroupPresentModeFlagBitsKHR[DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2] = "DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR", DeviceGroupPresentModeFlagBitsKHR[DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4] = "DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR", DeviceGroupPresentModeFlagBitsKHR[DeviceGroupPresentModeFlagBitsKHR.DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8] = "DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR";
}(DeviceGroupPresentModeFlagBitsKHR || (DeviceGroupPresentModeFlagBitsKHR = {}));
export var SwapchainCreateFlagBitsKHR;
!function(SwapchainCreateFlagBitsKHR) {
    SwapchainCreateFlagBitsKHR[SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1] = "SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", SwapchainCreateFlagBitsKHR[SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2] = "SWAPCHAIN_CREATE_PROTECTED_BIT_KHR", SwapchainCreateFlagBitsKHR[SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4] = "SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR", SwapchainCreateFlagBitsKHR[SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT = 16] = "SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT", SwapchainCreateFlagBitsKHR[SwapchainCreateFlagBitsKHR.SWAPCHAIN_CREATE_RESERVED_3_BIT_SEC = 8] = "SWAPCHAIN_CREATE_RESERVED_3_BIT_SEC";
}(SwapchainCreateFlagBitsKHR || (SwapchainCreateFlagBitsKHR = {}));
export var ViewportCoordinateSwizzleNV;
!function(ViewportCoordinateSwizzleNV) {
    ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0] = "VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1] = "VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2] = "VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3] = "VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4] = "VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5] = "VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6] = "VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV", ViewportCoordinateSwizzleNV[ViewportCoordinateSwizzleNV.VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7] = "VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV";
}(ViewportCoordinateSwizzleNV || (ViewportCoordinateSwizzleNV = {}));
export var DiscardRectangleModeEXT;
!function(DiscardRectangleModeEXT) {
    DiscardRectangleModeEXT[DiscardRectangleModeEXT.DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0] = "DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT", DiscardRectangleModeEXT[DiscardRectangleModeEXT.DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1] = "DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT";
}(DiscardRectangleModeEXT || (DiscardRectangleModeEXT = {}));
export var SubpassDescriptionFlagBits;
!function(SubpassDescriptionFlagBits) {
    SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.PER_VIEW_ATTRIBUTES_BIT_NVX = 1] = "PER_VIEW_ATTRIBUTES_BIT_NVX", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2] = "PER_VIEW_POSITION_X_ONLY_BIT_NVX", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.FRAGMENT_REGION_BIT_QCOM = 4] = "FRAGMENT_REGION_BIT_QCOM", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.SHADER_RESOLVE_BIT_QCOM = 8] = "SHADER_RESOLVE_BIT_QCOM", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16] = "RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32] = "RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64] = "RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16] = "RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32] = "RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64] = "RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT", SubpassDescriptionFlagBits[SubpassDescriptionFlagBits.ENABLE_LEGACY_DITHERING_BIT_EXT = 128] = "ENABLE_LEGACY_DITHERING_BIT_EXT";
}(SubpassDescriptionFlagBits || (SubpassDescriptionFlagBits = {}));
export var PointClippingBehavior;
!function(PointClippingBehavior) {
    PointClippingBehavior[PointClippingBehavior.ALL_CLIP_PLANES = 0] = "ALL_CLIP_PLANES", PointClippingBehavior[PointClippingBehavior.USER_CLIP_PLANES_ONLY = 1] = "USER_CLIP_PLANES_ONLY", PointClippingBehavior[PointClippingBehavior.ALL_CLIP_PLANES_KHR = 0] = "ALL_CLIP_PLANES_KHR", PointClippingBehavior[PointClippingBehavior.USER_CLIP_PLANES_ONLY_KHR = 1] = "USER_CLIP_PLANES_ONLY_KHR";
}(PointClippingBehavior || (PointClippingBehavior = {}));
export var SamplerReductionMode;
!function(SamplerReductionMode) {
    SamplerReductionMode[SamplerReductionMode.WEIGHTED_AVERAGE = 0] = "WEIGHTED_AVERAGE", SamplerReductionMode[SamplerReductionMode.MIN = 1] = "MIN", SamplerReductionMode[SamplerReductionMode.MAX = 2] = "MAX", SamplerReductionMode[SamplerReductionMode.WEIGHTED_AVERAGE_EXT = 0] = "WEIGHTED_AVERAGE_EXT", SamplerReductionMode[SamplerReductionMode.MIN_EXT = 1] = "MIN_EXT", SamplerReductionMode[SamplerReductionMode.MAX_EXT = 2] = "MAX_EXT";
}(SamplerReductionMode || (SamplerReductionMode = {}));
export var TessellationDomainOrigin;
!function(TessellationDomainOrigin) {
    TessellationDomainOrigin[TessellationDomainOrigin.UPPER_LEFT = 0] = "UPPER_LEFT", TessellationDomainOrigin[TessellationDomainOrigin.LOWER_LEFT = 1] = "LOWER_LEFT", TessellationDomainOrigin[TessellationDomainOrigin.UPPER_LEFT_KHR = 0] = "UPPER_LEFT_KHR", TessellationDomainOrigin[TessellationDomainOrigin.LOWER_LEFT_KHR = 1] = "LOWER_LEFT_KHR";
}(TessellationDomainOrigin || (TessellationDomainOrigin = {}));
export var SamplerYcbcrModelConversion;
!function(SamplerYcbcrModelConversion) {
    SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.RGB_IDENTITY = 0] = "RGB_IDENTITY", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_IDENTITY = 1] = "YCBCR_IDENTITY", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_709 = 2] = "YCBCR_709", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_601 = 3] = "YCBCR_601", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_2020 = 4] = "YCBCR_2020", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.RGB_IDENTITY_KHR = 0] = "RGB_IDENTITY_KHR", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_IDENTITY_KHR = 1] = "YCBCR_IDENTITY_KHR", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_709_KHR = 2] = "YCBCR_709_KHR", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_601_KHR = 3] = "YCBCR_601_KHR", SamplerYcbcrModelConversion[SamplerYcbcrModelConversion.YCBCR_2020_KHR = 4] = "YCBCR_2020_KHR";
}(SamplerYcbcrModelConversion || (SamplerYcbcrModelConversion = {}));
export var SamplerYcbcrRange;
!function(SamplerYcbcrRange) {
    SamplerYcbcrRange[SamplerYcbcrRange.ITU_FULL = 0] = "ITU_FULL", SamplerYcbcrRange[SamplerYcbcrRange.ITU_NARROW = 1] = "ITU_NARROW", SamplerYcbcrRange[SamplerYcbcrRange.ITU_FULL_KHR = 0] = "ITU_FULL_KHR", SamplerYcbcrRange[SamplerYcbcrRange.ITU_NARROW_KHR = 1] = "ITU_NARROW_KHR";
}(SamplerYcbcrRange || (SamplerYcbcrRange = {}));
export var ChromaLocation;
!function(ChromaLocation) {
    ChromaLocation[ChromaLocation.COSITED_EVEN = 0] = "COSITED_EVEN", ChromaLocation[ChromaLocation.MIDPOINT = 1] = "MIDPOINT", ChromaLocation[ChromaLocation.COSITED_EVEN_KHR = 0] = "COSITED_EVEN_KHR", ChromaLocation[ChromaLocation.MIDPOINT_KHR = 1] = "MIDPOINT_KHR";
}(ChromaLocation || (ChromaLocation = {}));
export var BlendOverlapEXT;
!function(BlendOverlapEXT) {
    BlendOverlapEXT[BlendOverlapEXT.BLEND_OVERLAP_UNCORRELATED_EXT = 0] = "BLEND_OVERLAP_UNCORRELATED_EXT", BlendOverlapEXT[BlendOverlapEXT.BLEND_OVERLAP_DISJOINT_EXT = 1] = "BLEND_OVERLAP_DISJOINT_EXT", BlendOverlapEXT[BlendOverlapEXT.BLEND_OVERLAP_CONJOINT_EXT = 2] = "BLEND_OVERLAP_CONJOINT_EXT";
}(BlendOverlapEXT || (BlendOverlapEXT = {}));
export var CoverageModulationModeNV;
!function(CoverageModulationModeNV) {
    CoverageModulationModeNV[CoverageModulationModeNV.COVERAGE_MODULATION_MODE_NONE_NV = 0] = "COVERAGE_MODULATION_MODE_NONE_NV", CoverageModulationModeNV[CoverageModulationModeNV.COVERAGE_MODULATION_MODE_RGB_NV = 1] = "COVERAGE_MODULATION_MODE_RGB_NV", CoverageModulationModeNV[CoverageModulationModeNV.COVERAGE_MODULATION_MODE_ALPHA_NV = 2] = "COVERAGE_MODULATION_MODE_ALPHA_NV", CoverageModulationModeNV[CoverageModulationModeNV.COVERAGE_MODULATION_MODE_RGBA_NV = 3] = "COVERAGE_MODULATION_MODE_RGBA_NV";
}(CoverageModulationModeNV || (CoverageModulationModeNV = {}));
export var CoverageReductionModeNV;
!function(CoverageReductionModeNV) {
    CoverageReductionModeNV[CoverageReductionModeNV.COVERAGE_REDUCTION_MODE_MERGE_NV = 0] = "COVERAGE_REDUCTION_MODE_MERGE_NV", CoverageReductionModeNV[CoverageReductionModeNV.COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1] = "COVERAGE_REDUCTION_MODE_TRUNCATE_NV";
}(CoverageReductionModeNV || (CoverageReductionModeNV = {}));
export var ValidationCacheHeaderVersionEXT;
!function(ValidationCacheHeaderVersionEXT) {
    ValidationCacheHeaderVersionEXT[ValidationCacheHeaderVersionEXT.VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1] = "VALIDATION_CACHE_HEADER_VERSION_ONE_EXT";
}(ValidationCacheHeaderVersionEXT || (ValidationCacheHeaderVersionEXT = {}));
export var ShaderInfoTypeAMD;
!function(ShaderInfoTypeAMD) {
    ShaderInfoTypeAMD[ShaderInfoTypeAMD.SHADER_INFO_TYPE_STATISTICS_AMD = 0] = "SHADER_INFO_TYPE_STATISTICS_AMD", ShaderInfoTypeAMD[ShaderInfoTypeAMD.SHADER_INFO_TYPE_BINARY_AMD = 1] = "SHADER_INFO_TYPE_BINARY_AMD", ShaderInfoTypeAMD[ShaderInfoTypeAMD.SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2] = "SHADER_INFO_TYPE_DISASSEMBLY_AMD";
}(ShaderInfoTypeAMD || (ShaderInfoTypeAMD = {}));
export var QueueGlobalPriorityKHR;
!function(QueueGlobalPriorityKHR) {
    QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128] = "QUEUE_GLOBAL_PRIORITY_LOW_KHR", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256] = "QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512] = "QUEUE_GLOBAL_PRIORITY_HIGH_KHR", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024] = "QUEUE_GLOBAL_PRIORITY_REALTIME_KHR", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128] = "QUEUE_GLOBAL_PRIORITY_LOW_EXT", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256] = "QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512] = "QUEUE_GLOBAL_PRIORITY_HIGH_EXT", QueueGlobalPriorityKHR[QueueGlobalPriorityKHR.QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024] = "QUEUE_GLOBAL_PRIORITY_REALTIME_EXT";
}(QueueGlobalPriorityKHR || (QueueGlobalPriorityKHR = {}));
export var DebugUtilsMessageSeverityFlagBitsEXT;
!function(DebugUtilsMessageSeverityFlagBitsEXT) {
    DebugUtilsMessageSeverityFlagBitsEXT[DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1] = "DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT", DebugUtilsMessageSeverityFlagBitsEXT[DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16] = "DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT", DebugUtilsMessageSeverityFlagBitsEXT[DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256] = "DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT", DebugUtilsMessageSeverityFlagBitsEXT[DebugUtilsMessageSeverityFlagBitsEXT.DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096] = "DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT";
}(DebugUtilsMessageSeverityFlagBitsEXT || (DebugUtilsMessageSeverityFlagBitsEXT = {}));
export var DebugUtilsMessageTypeFlagBitsEXT;
!function(DebugUtilsMessageTypeFlagBitsEXT) {
    DebugUtilsMessageTypeFlagBitsEXT[DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1] = "DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT", DebugUtilsMessageTypeFlagBitsEXT[DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2] = "DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT", DebugUtilsMessageTypeFlagBitsEXT[DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4] = "DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT", DebugUtilsMessageTypeFlagBitsEXT[DebugUtilsMessageTypeFlagBitsEXT.DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8] = "DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT";
}(DebugUtilsMessageTypeFlagBitsEXT || (DebugUtilsMessageTypeFlagBitsEXT = {}));
export var ConservativeRasterizationModeEXT;
!function(ConservativeRasterizationModeEXT) {
    ConservativeRasterizationModeEXT[ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0] = "CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT", ConservativeRasterizationModeEXT[ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1] = "CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT", ConservativeRasterizationModeEXT[ConservativeRasterizationModeEXT.CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2] = "CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT";
}(ConservativeRasterizationModeEXT || (ConservativeRasterizationModeEXT = {}));
export var DescriptorBindingFlagBits;
!function(DescriptorBindingFlagBits) {
    DescriptorBindingFlagBits[DescriptorBindingFlagBits.UPDATE_AFTER_BIND = 1] = "UPDATE_AFTER_BIND", DescriptorBindingFlagBits[DescriptorBindingFlagBits.UPDATE_UNUSED_WHILE_PENDING = 2] = "UPDATE_UNUSED_WHILE_PENDING", DescriptorBindingFlagBits[DescriptorBindingFlagBits.PARTIALLY_BOUND = 4] = "PARTIALLY_BOUND", DescriptorBindingFlagBits[DescriptorBindingFlagBits.VARIABLE_DESCRIPTOR_COUNT = 8] = "VARIABLE_DESCRIPTOR_COUNT", DescriptorBindingFlagBits[DescriptorBindingFlagBits.UPDATE_AFTER_BIND_BIT_EXT = 1] = "UPDATE_AFTER_BIND_BIT_EXT", DescriptorBindingFlagBits[DescriptorBindingFlagBits.UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2] = "UPDATE_UNUSED_WHILE_PENDING_BIT_EXT", DescriptorBindingFlagBits[DescriptorBindingFlagBits.PARTIALLY_BOUND_BIT_EXT = 4] = "PARTIALLY_BOUND_BIT_EXT", DescriptorBindingFlagBits[DescriptorBindingFlagBits.VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8] = "VARIABLE_DESCRIPTOR_COUNT_BIT_EXT", DescriptorBindingFlagBits[DescriptorBindingFlagBits.RESERVED_4_BIT_QCOM = 16] = "RESERVED_4_BIT_QCOM";
}(DescriptorBindingFlagBits || (DescriptorBindingFlagBits = {}));
export var VendorId;
!function(VendorId) {
    VendorId[VendorId.VIV = 65537] = "VIV", VendorId[VendorId.VSI = 65538] = "VSI", VendorId[VendorId.KAZAN = 65539] = "KAZAN", VendorId[VendorId.CODEPLAY = 65540] = "CODEPLAY", VendorId[VendorId.MESA = 65541] = "MESA", VendorId[VendorId.POCL = 65542] = "POCL";
}(VendorId || (VendorId = {}));
export var DriverId;
!function(DriverId) {
    DriverId[DriverId.AMD_PROPRIETARY = 1] = "AMD_PROPRIETARY", DriverId[DriverId.AMD_OPEN_SOURCE = 2] = "AMD_OPEN_SOURCE", DriverId[DriverId.MESA_RADV = 3] = "MESA_RADV", DriverId[DriverId.NVIDIA_PROPRIETARY = 4] = "NVIDIA_PROPRIETARY", DriverId[DriverId.INTEL_PROPRIETARY_WINDOWS = 5] = "INTEL_PROPRIETARY_WINDOWS", DriverId[DriverId.INTEL_OPEN_SOURCE_MESA = 6] = "INTEL_OPEN_SOURCE_MESA", DriverId[DriverId.IMAGINATION_PROPRIETARY = 7] = "IMAGINATION_PROPRIETARY", DriverId[DriverId.QUALCOMM_PROPRIETARY = 8] = "QUALCOMM_PROPRIETARY", DriverId[DriverId.ARM_PROPRIETARY = 9] = "ARM_PROPRIETARY", DriverId[DriverId.GOOGLE_SWIFTSHADER = 10] = "GOOGLE_SWIFTSHADER", DriverId[DriverId.GGP_PROPRIETARY = 11] = "GGP_PROPRIETARY", DriverId[DriverId.BROADCOM_PROPRIETARY = 12] = "BROADCOM_PROPRIETARY", DriverId[DriverId.MESA_LLVMPIPE = 13] = "MESA_LLVMPIPE", DriverId[DriverId.MOLTENVK = 14] = "MOLTENVK", DriverId[DriverId.COREAVI_PROPRIETARY = 15] = "COREAVI_PROPRIETARY", DriverId[DriverId.JUICE_PROPRIETARY = 16] = "JUICE_PROPRIETARY", DriverId[DriverId.VERISILICON_PROPRIETARY = 17] = "VERISILICON_PROPRIETARY", DriverId[DriverId.MESA_TURNIP = 18] = "MESA_TURNIP", DriverId[DriverId.MESA_V3DV = 19] = "MESA_V3DV", DriverId[DriverId.MESA_PANVK = 20] = "MESA_PANVK", DriverId[DriverId.SAMSUNG_PROPRIETARY = 21] = "SAMSUNG_PROPRIETARY", DriverId[DriverId.MESA_VENUS = 22] = "MESA_VENUS", DriverId[DriverId.MESA_DOZEN = 23] = "MESA_DOZEN", DriverId[DriverId.MESA_NVK = 24] = "MESA_NVK", DriverId[DriverId.AMD_PROPRIETARY_KHR = 1] = "AMD_PROPRIETARY_KHR", DriverId[DriverId.AMD_OPEN_SOURCE_KHR = 2] = "AMD_OPEN_SOURCE_KHR", DriverId[DriverId.MESA_RADV_KHR = 3] = "MESA_RADV_KHR", DriverId[DriverId.NVIDIA_PROPRIETARY_KHR = 4] = "NVIDIA_PROPRIETARY_KHR", DriverId[DriverId.INTEL_PROPRIETARY_WINDOWS_KHR = 5] = "INTEL_PROPRIETARY_WINDOWS_KHR", DriverId[DriverId.INTEL_OPEN_SOURCE_MESA_KHR = 6] = "INTEL_OPEN_SOURCE_MESA_KHR", DriverId[DriverId.IMAGINATION_PROPRIETARY_KHR = 7] = "IMAGINATION_PROPRIETARY_KHR", DriverId[DriverId.QUALCOMM_PROPRIETARY_KHR = 8] = "QUALCOMM_PROPRIETARY_KHR", DriverId[DriverId.ARM_PROPRIETARY_KHR = 9] = "ARM_PROPRIETARY_KHR", DriverId[DriverId.GOOGLE_SWIFTSHADER_KHR = 10] = "GOOGLE_SWIFTSHADER_KHR", DriverId[DriverId.GGP_PROPRIETARY_KHR = 11] = "GGP_PROPRIETARY_KHR", DriverId[DriverId.BROADCOM_PROPRIETARY_KHR = 12] = "BROADCOM_PROPRIETARY_KHR";
}(DriverId || (DriverId = {}));
export var ConditionalRenderingFlagBitsEXT;
!function(ConditionalRenderingFlagBitsEXT) {
    ConditionalRenderingFlagBitsEXT[ConditionalRenderingFlagBitsEXT.CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1] = "CONDITIONAL_RENDERING_INVERTED_BIT_EXT";
}(ConditionalRenderingFlagBitsEXT || (ConditionalRenderingFlagBitsEXT = {}));
export var ResolveModeFlagBits;
!function(ResolveModeFlagBits) {
    ResolveModeFlagBits[ResolveModeFlagBits.NONE = 0] = "NONE", ResolveModeFlagBits[ResolveModeFlagBits.SAMPLE_ZERO = 1] = "SAMPLE_ZERO", ResolveModeFlagBits[ResolveModeFlagBits.AVERAGE = 2] = "AVERAGE", ResolveModeFlagBits[ResolveModeFlagBits.MIN = 4] = "MIN", ResolveModeFlagBits[ResolveModeFlagBits.MAX = 8] = "MAX", ResolveModeFlagBits[ResolveModeFlagBits.NONE_KHR = 0] = "NONE_KHR", ResolveModeFlagBits[ResolveModeFlagBits.SAMPLE_ZERO_BIT_KHR = 1] = "SAMPLE_ZERO_BIT_KHR", ResolveModeFlagBits[ResolveModeFlagBits.AVERAGE_BIT_KHR = 2] = "AVERAGE_BIT_KHR", ResolveModeFlagBits[ResolveModeFlagBits.MIN_BIT_KHR = 4] = "MIN_BIT_KHR", ResolveModeFlagBits[ResolveModeFlagBits.MAX_BIT_KHR = 8] = "MAX_BIT_KHR";
}(ResolveModeFlagBits || (ResolveModeFlagBits = {}));
export var ShadingRatePaletteEntryNV;
!function(ShadingRatePaletteEntryNV) {
    ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0] = "SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1] = "SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2] = "SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3] = "SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4] = "SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV", ShadingRatePaletteEntryNV[ShadingRatePaletteEntryNV.SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11] = "SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV";
}(ShadingRatePaletteEntryNV || (ShadingRatePaletteEntryNV = {}));
export var CoarseSampleOrderTypeNV;
!function(CoarseSampleOrderTypeNV) {
    CoarseSampleOrderTypeNV[CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0] = "COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV", CoarseSampleOrderTypeNV[CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1] = "COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV", CoarseSampleOrderTypeNV[CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2] = "COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV", CoarseSampleOrderTypeNV[CoarseSampleOrderTypeNV.COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3] = "COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV";
}(CoarseSampleOrderTypeNV || (CoarseSampleOrderTypeNV = {}));
export var GeometryInstanceFlagBitsKHR;
!function(GeometryInstanceFlagBitsKHR) {
    GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1] = "GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2] = "GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4] = "GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8] = "GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2] = "GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1] = "GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2] = "GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4] = "GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8] = "GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16] = "GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT", GeometryInstanceFlagBitsKHR[GeometryInstanceFlagBitsKHR.GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32] = "GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT";
}(GeometryInstanceFlagBitsKHR || (GeometryInstanceFlagBitsKHR = {}));
export var GeometryFlagBitsKHR;
!function(GeometryFlagBitsKHR) {
    GeometryFlagBitsKHR[GeometryFlagBitsKHR.GEOMETRY_OPAQUE_BIT_KHR = 1] = "GEOMETRY_OPAQUE_BIT_KHR", GeometryFlagBitsKHR[GeometryFlagBitsKHR.GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2] = "GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR", GeometryFlagBitsKHR[GeometryFlagBitsKHR.GEOMETRY_OPAQUE_BIT_NV = 1] = "GEOMETRY_OPAQUE_BIT_NV", GeometryFlagBitsKHR[GeometryFlagBitsKHR.GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2] = "GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV";
}(GeometryFlagBitsKHR || (GeometryFlagBitsKHR = {}));
export var BuildAccelerationStructureFlagBitsKHR;
!function(BuildAccelerationStructureFlagBitsKHR) {
    BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4] = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8] = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16] = "BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4] = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8] = "BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16] = "BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32] = "BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256] = "BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_9_NV = 512] = "BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_9_NV", BuildAccelerationStructureFlagBitsKHR[BuildAccelerationStructureFlagBitsKHR.BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_10_NV = 1024] = "BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_10_NV";
}(BuildAccelerationStructureFlagBitsKHR || (BuildAccelerationStructureFlagBitsKHR = {}));
export var AccelerationStructureCreateFlagBitsKHR;
!function(AccelerationStructureCreateFlagBitsKHR) {
    AccelerationStructureCreateFlagBitsKHR[AccelerationStructureCreateFlagBitsKHR.ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1] = "ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", AccelerationStructureCreateFlagBitsKHR[AccelerationStructureCreateFlagBitsKHR.ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8] = "ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", AccelerationStructureCreateFlagBitsKHR[AccelerationStructureCreateFlagBitsKHR.ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4] = "ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV";
}(AccelerationStructureCreateFlagBitsKHR || (AccelerationStructureCreateFlagBitsKHR = {}));
export var CopyAccelerationStructureModeKHR;
!function(CopyAccelerationStructureModeKHR) {
    CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0] = "COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR", CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1] = "COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR", CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2] = "COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR", CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3] = "COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR", CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0] = "COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV", CopyAccelerationStructureModeKHR[CopyAccelerationStructureModeKHR.COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1] = "COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV";
}(CopyAccelerationStructureModeKHR || (CopyAccelerationStructureModeKHR = {}));
export var BuildAccelerationStructureModeKHR;
!function(BuildAccelerationStructureModeKHR) {
    BuildAccelerationStructureModeKHR[BuildAccelerationStructureModeKHR.BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0] = "BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR", BuildAccelerationStructureModeKHR[BuildAccelerationStructureModeKHR.BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1] = "BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR";
}(BuildAccelerationStructureModeKHR || (BuildAccelerationStructureModeKHR = {}));
export var AccelerationStructureTypeKHR;
!function(AccelerationStructureTypeKHR) {
    AccelerationStructureTypeKHR[AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0] = "ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR", AccelerationStructureTypeKHR[AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1] = "ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR", AccelerationStructureTypeKHR[AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2] = "ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR", AccelerationStructureTypeKHR[AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0] = "ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV", AccelerationStructureTypeKHR[AccelerationStructureTypeKHR.ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1] = "ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV";
}(AccelerationStructureTypeKHR || (AccelerationStructureTypeKHR = {}));
export var GeometryTypeKHR;
!function(GeometryTypeKHR) {
    GeometryTypeKHR[GeometryTypeKHR.GEOMETRY_TYPE_TRIANGLES_KHR = 0] = "GEOMETRY_TYPE_TRIANGLES_KHR", GeometryTypeKHR[GeometryTypeKHR.GEOMETRY_TYPE_AABBS_KHR = 1] = "GEOMETRY_TYPE_AABBS_KHR", GeometryTypeKHR[GeometryTypeKHR.GEOMETRY_TYPE_INSTANCES_KHR = 2] = "GEOMETRY_TYPE_INSTANCES_KHR", GeometryTypeKHR[GeometryTypeKHR.GEOMETRY_TYPE_TRIANGLES_NV = 0] = "GEOMETRY_TYPE_TRIANGLES_NV", GeometryTypeKHR[GeometryTypeKHR.GEOMETRY_TYPE_AABBS_NV = 1] = "GEOMETRY_TYPE_AABBS_NV";
}(GeometryTypeKHR || (GeometryTypeKHR = {}));
export var AccelerationStructureMemoryRequirementsTypeNV;
!function(AccelerationStructureMemoryRequirementsTypeNV) {
    AccelerationStructureMemoryRequirementsTypeNV[AccelerationStructureMemoryRequirementsTypeNV.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0] = "ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV", AccelerationStructureMemoryRequirementsTypeNV[AccelerationStructureMemoryRequirementsTypeNV.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1] = "ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV", AccelerationStructureMemoryRequirementsTypeNV[AccelerationStructureMemoryRequirementsTypeNV.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2] = "ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV";
}(AccelerationStructureMemoryRequirementsTypeNV || (AccelerationStructureMemoryRequirementsTypeNV = {}));
export var AccelerationStructureBuildTypeKHR;
!function(AccelerationStructureBuildTypeKHR) {
    AccelerationStructureBuildTypeKHR[AccelerationStructureBuildTypeKHR.ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0] = "ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR", AccelerationStructureBuildTypeKHR[AccelerationStructureBuildTypeKHR.ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1] = "ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR", AccelerationStructureBuildTypeKHR[AccelerationStructureBuildTypeKHR.ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2] = "ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR";
}(AccelerationStructureBuildTypeKHR || (AccelerationStructureBuildTypeKHR = {}));
export var RayTracingShaderGroupTypeKHR;
!function(RayTracingShaderGroupTypeKHR) {
    RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0] = "RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR", RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1] = "RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR", RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2] = "RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR", RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0] = "RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV", RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1] = "RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV", RayTracingShaderGroupTypeKHR[RayTracingShaderGroupTypeKHR.RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2] = "RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV";
}(RayTracingShaderGroupTypeKHR || (RayTracingShaderGroupTypeKHR = {}));
export var AccelerationStructureCompatibilityKHR;
!function(AccelerationStructureCompatibilityKHR) {
    AccelerationStructureCompatibilityKHR[AccelerationStructureCompatibilityKHR.ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0] = "ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR", AccelerationStructureCompatibilityKHR[AccelerationStructureCompatibilityKHR.ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1] = "ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR";
}(AccelerationStructureCompatibilityKHR || (AccelerationStructureCompatibilityKHR = {}));
export var ShaderGroupShaderKHR;
!function(ShaderGroupShaderKHR) {
    ShaderGroupShaderKHR[ShaderGroupShaderKHR.SHADER_GROUP_SHADER_GENERAL_KHR = 0] = "SHADER_GROUP_SHADER_GENERAL_KHR", ShaderGroupShaderKHR[ShaderGroupShaderKHR.SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1] = "SHADER_GROUP_SHADER_CLOSEST_HIT_KHR", ShaderGroupShaderKHR[ShaderGroupShaderKHR.SHADER_GROUP_SHADER_ANY_HIT_KHR = 2] = "SHADER_GROUP_SHADER_ANY_HIT_KHR", ShaderGroupShaderKHR[ShaderGroupShaderKHR.SHADER_GROUP_SHADER_INTERSECTION_KHR = 3] = "SHADER_GROUP_SHADER_INTERSECTION_KHR";
}(ShaderGroupShaderKHR || (ShaderGroupShaderKHR = {}));
export var MemoryOverallocationBehaviorAMD;
!function(MemoryOverallocationBehaviorAMD) {
    MemoryOverallocationBehaviorAMD[MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0] = "MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD", MemoryOverallocationBehaviorAMD[MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1] = "MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD", MemoryOverallocationBehaviorAMD[MemoryOverallocationBehaviorAMD.MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2] = "MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD";
}(MemoryOverallocationBehaviorAMD || (MemoryOverallocationBehaviorAMD = {}));
export var FramebufferCreateFlagBits;
!function(FramebufferCreateFlagBits) {
    FramebufferCreateFlagBits[FramebufferCreateFlagBits.IMAGELESS = 1] = "IMAGELESS", FramebufferCreateFlagBits[FramebufferCreateFlagBits.IMAGELESS_BIT_KHR = 1] = "IMAGELESS_BIT_KHR";
}(FramebufferCreateFlagBits || (FramebufferCreateFlagBits = {}));
export var ScopeNV;
!function(ScopeNV) {
    ScopeNV[ScopeNV.SCOPE_DEVICE_NV = 1] = "SCOPE_DEVICE_NV", ScopeNV[ScopeNV.SCOPE_WORKGROUP_NV = 2] = "SCOPE_WORKGROUP_NV", ScopeNV[ScopeNV.SCOPE_SUBGROUP_NV = 3] = "SCOPE_SUBGROUP_NV", ScopeNV[ScopeNV.SCOPE_QUEUE_FAMILY_NV = 5] = "SCOPE_QUEUE_FAMILY_NV";
}(ScopeNV || (ScopeNV = {}));
export var ComponentTypeNV;
!function(ComponentTypeNV) {
    ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_FLOAT16_NV = 0] = "COMPONENT_TYPE_FLOAT16_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_FLOAT32_NV = 1] = "COMPONENT_TYPE_FLOAT32_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_FLOAT64_NV = 2] = "COMPONENT_TYPE_FLOAT64_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_SINT8_NV = 3] = "COMPONENT_TYPE_SINT8_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_SINT16_NV = 4] = "COMPONENT_TYPE_SINT16_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_SINT32_NV = 5] = "COMPONENT_TYPE_SINT32_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_SINT64_NV = 6] = "COMPONENT_TYPE_SINT64_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_UINT8_NV = 7] = "COMPONENT_TYPE_UINT8_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_UINT16_NV = 8] = "COMPONENT_TYPE_UINT16_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_UINT32_NV = 9] = "COMPONENT_TYPE_UINT32_NV", ComponentTypeNV[ComponentTypeNV.COMPONENT_TYPE_UINT64_NV = 10] = "COMPONENT_TYPE_UINT64_NV";
}(ComponentTypeNV || (ComponentTypeNV = {}));
export var DeviceDiagnosticsConfigFlagBitsNV;
!function(DeviceDiagnosticsConfigFlagBitsNV) {
    DeviceDiagnosticsConfigFlagBitsNV[DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1] = "DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV", DeviceDiagnosticsConfigFlagBitsNV[DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2] = "DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV", DeviceDiagnosticsConfigFlagBitsNV[DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4] = "DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV", DeviceDiagnosticsConfigFlagBitsNV[DeviceDiagnosticsConfigFlagBitsNV.DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8] = "DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV";
}(DeviceDiagnosticsConfigFlagBitsNV || (DeviceDiagnosticsConfigFlagBitsNV = {}));
export var PipelineCreationFeedbackFlagBits;
!function(PipelineCreationFeedbackFlagBits) {
    PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.VALID = 1] = "VALID", PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.VALID_BIT_EXT = 1] = "VALID_BIT_EXT", PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.APPLICATION_PIPELINE_CACHE_HIT = 2] = "APPLICATION_PIPELINE_CACHE_HIT", PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2] = "APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT", PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.BASE_PIPELINE_ACCELERATION = 4] = "BASE_PIPELINE_ACCELERATION", PipelineCreationFeedbackFlagBits[PipelineCreationFeedbackFlagBits.BASE_PIPELINE_ACCELERATION_BIT_EXT = 4] = "BASE_PIPELINE_ACCELERATION_BIT_EXT";
}(PipelineCreationFeedbackFlagBits || (PipelineCreationFeedbackFlagBits = {}));
export var FullScreenExclusiveEXT;
!function(FullScreenExclusiveEXT) {
    FullScreenExclusiveEXT[FullScreenExclusiveEXT.FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0] = "FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT", FullScreenExclusiveEXT[FullScreenExclusiveEXT.FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1] = "FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT", FullScreenExclusiveEXT[FullScreenExclusiveEXT.FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2] = "FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT", FullScreenExclusiveEXT[FullScreenExclusiveEXT.FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3] = "FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT";
}(FullScreenExclusiveEXT || (FullScreenExclusiveEXT = {}));
export var PerformanceCounterScopeKHR;
!function(PerformanceCounterScopeKHR) {
    PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0] = "PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR", PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1] = "PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR", PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2] = "PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR", PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.QUERY_SCOPE_COMMAND_BUFFER_KHR = 0] = "QUERY_SCOPE_COMMAND_BUFFER_KHR", PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.QUERY_SCOPE_RENDER_PASS_KHR = 1] = "QUERY_SCOPE_RENDER_PASS_KHR", PerformanceCounterScopeKHR[PerformanceCounterScopeKHR.QUERY_SCOPE_COMMAND_KHR = 2] = "QUERY_SCOPE_COMMAND_KHR";
}(PerformanceCounterScopeKHR || (PerformanceCounterScopeKHR = {}));
export var MemoryDecompressionMethodFlagBitsNV;
!function(MemoryDecompressionMethodFlagBitsNV) {
    MemoryDecompressionMethodFlagBitsNV[MemoryDecompressionMethodFlagBitsNV.MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 1] = "MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV";
}(MemoryDecompressionMethodFlagBitsNV || (MemoryDecompressionMethodFlagBitsNV = {}));
export var PerformanceCounterUnitKHR;
!function(PerformanceCounterUnitKHR) {
    PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0] = "PERFORMANCE_COUNTER_UNIT_GENERIC_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1] = "PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2] = "PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3] = "PERFORMANCE_COUNTER_UNIT_BYTES_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4] = "PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5] = "PERFORMANCE_COUNTER_UNIT_KELVIN_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6] = "PERFORMANCE_COUNTER_UNIT_WATTS_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7] = "PERFORMANCE_COUNTER_UNIT_VOLTS_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8] = "PERFORMANCE_COUNTER_UNIT_AMPS_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9] = "PERFORMANCE_COUNTER_UNIT_HERTZ_KHR", PerformanceCounterUnitKHR[PerformanceCounterUnitKHR.PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10] = "PERFORMANCE_COUNTER_UNIT_CYCLES_KHR";
}(PerformanceCounterUnitKHR || (PerformanceCounterUnitKHR = {}));
export var PerformanceCounterStorageKHR;
!function(PerformanceCounterStorageKHR) {
    PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0] = "PERFORMANCE_COUNTER_STORAGE_INT32_KHR", PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1] = "PERFORMANCE_COUNTER_STORAGE_INT64_KHR", PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2] = "PERFORMANCE_COUNTER_STORAGE_UINT32_KHR", PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3] = "PERFORMANCE_COUNTER_STORAGE_UINT64_KHR", PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4] = "PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR", PerformanceCounterStorageKHR[PerformanceCounterStorageKHR.PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5] = "PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR";
}(PerformanceCounterStorageKHR || (PerformanceCounterStorageKHR = {}));
export var PerformanceCounterDescriptionFlagBitsKHR;
!function(PerformanceCounterDescriptionFlagBitsKHR) {
    PerformanceCounterDescriptionFlagBitsKHR[PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1] = "PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR", PerformanceCounterDescriptionFlagBitsKHR[PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1] = "PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR", PerformanceCounterDescriptionFlagBitsKHR[PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2] = "PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR", PerformanceCounterDescriptionFlagBitsKHR[PerformanceCounterDescriptionFlagBitsKHR.PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2] = "PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR";
}(PerformanceCounterDescriptionFlagBitsKHR || (PerformanceCounterDescriptionFlagBitsKHR = {}));
export var AcquireProfilingLockFlagBitsKHR;
AcquireProfilingLockFlagBitsKHR || (AcquireProfilingLockFlagBitsKHR = {});
export var ShaderCorePropertiesFlagBitsAMD;
ShaderCorePropertiesFlagBitsAMD || (ShaderCorePropertiesFlagBitsAMD = {});
export var PerformanceConfigurationTypeINTEL;
!function(PerformanceConfigurationTypeINTEL) {
    PerformanceConfigurationTypeINTEL[PerformanceConfigurationTypeINTEL.PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0] = "PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL";
}(PerformanceConfigurationTypeINTEL || (PerformanceConfigurationTypeINTEL = {}));
export var QueryPoolSamplingModeINTEL;
!function(QueryPoolSamplingModeINTEL) {
    QueryPoolSamplingModeINTEL[QueryPoolSamplingModeINTEL.QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0] = "QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL";
}(QueryPoolSamplingModeINTEL || (QueryPoolSamplingModeINTEL = {}));
export var PerformanceOverrideTypeINTEL;
!function(PerformanceOverrideTypeINTEL) {
    PerformanceOverrideTypeINTEL[PerformanceOverrideTypeINTEL.PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0] = "PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL", PerformanceOverrideTypeINTEL[PerformanceOverrideTypeINTEL.PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1] = "PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL";
}(PerformanceOverrideTypeINTEL || (PerformanceOverrideTypeINTEL = {}));
export var PerformanceParameterTypeINTEL;
!function(PerformanceParameterTypeINTEL) {
    PerformanceParameterTypeINTEL[PerformanceParameterTypeINTEL.PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0] = "PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL", PerformanceParameterTypeINTEL[PerformanceParameterTypeINTEL.PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1] = "PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL";
}(PerformanceParameterTypeINTEL || (PerformanceParameterTypeINTEL = {}));
export var PerformanceValueTypeINTEL;
!function(PerformanceValueTypeINTEL) {
    PerformanceValueTypeINTEL[PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0] = "PERFORMANCE_VALUE_TYPE_UINT32_INTEL", PerformanceValueTypeINTEL[PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1] = "PERFORMANCE_VALUE_TYPE_UINT64_INTEL", PerformanceValueTypeINTEL[PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2] = "PERFORMANCE_VALUE_TYPE_FLOAT_INTEL", PerformanceValueTypeINTEL[PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3] = "PERFORMANCE_VALUE_TYPE_BOOL_INTEL", PerformanceValueTypeINTEL[PerformanceValueTypeINTEL.PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4] = "PERFORMANCE_VALUE_TYPE_STRING_INTEL";
}(PerformanceValueTypeINTEL || (PerformanceValueTypeINTEL = {}));
export var ShaderFloatControlsIndependence;
!function(ShaderFloatControlsIndependence) {
    ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.VK_32_BIT_ONLY = 0] = "VK_32_BIT_ONLY", ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.ALL = 1] = "ALL", ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.NONE = 2] = "NONE", ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.VK_32_BIT_ONLY_KHR = 0] = "VK_32_BIT_ONLY_KHR", ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.ALL_KHR = 1] = "ALL_KHR", ShaderFloatControlsIndependence[ShaderFloatControlsIndependence.NONE_KHR = 2] = "NONE_KHR";
}(ShaderFloatControlsIndependence || (ShaderFloatControlsIndependence = {}));
export var PipelineExecutableStatisticFormatKHR;
!function(PipelineExecutableStatisticFormatKHR) {
    PipelineExecutableStatisticFormatKHR[PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0] = "PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR", PipelineExecutableStatisticFormatKHR[PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1] = "PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR", PipelineExecutableStatisticFormatKHR[PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2] = "PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR", PipelineExecutableStatisticFormatKHR[PipelineExecutableStatisticFormatKHR.PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3] = "PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR";
}(PipelineExecutableStatisticFormatKHR || (PipelineExecutableStatisticFormatKHR = {}));
export var LineRasterizationModeEXT;
!function(LineRasterizationModeEXT) {
    LineRasterizationModeEXT[LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0] = "LINE_RASTERIZATION_MODE_DEFAULT_EXT", LineRasterizationModeEXT[LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1] = "LINE_RASTERIZATION_MODE_RECTANGULAR_EXT", LineRasterizationModeEXT[LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2] = "LINE_RASTERIZATION_MODE_BRESENHAM_EXT", LineRasterizationModeEXT[LineRasterizationModeEXT.LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3] = "LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT";
}(LineRasterizationModeEXT || (LineRasterizationModeEXT = {}));
export var ShaderModuleCreateFlagBits;
ShaderModuleCreateFlagBits || (ShaderModuleCreateFlagBits = {});
export var PipelineCompilerControlFlagBitsAMD;
PipelineCompilerControlFlagBitsAMD || (PipelineCompilerControlFlagBitsAMD = {});
export var ToolPurposeFlagBits;
!function(ToolPurposeFlagBits) {
    ToolPurposeFlagBits[ToolPurposeFlagBits.VALIDATION = 1] = "VALIDATION", ToolPurposeFlagBits[ToolPurposeFlagBits.VALIDATION_BIT_EXT = 1] = "VALIDATION_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.PROFILING = 2] = "PROFILING", ToolPurposeFlagBits[ToolPurposeFlagBits.PROFILING_BIT_EXT = 2] = "PROFILING_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.TRACING = 4] = "TRACING", ToolPurposeFlagBits[ToolPurposeFlagBits.TRACING_BIT_EXT = 4] = "TRACING_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.ADDITIONAL_FEATURES = 8] = "ADDITIONAL_FEATURES", ToolPurposeFlagBits[ToolPurposeFlagBits.ADDITIONAL_FEATURES_BIT_EXT = 8] = "ADDITIONAL_FEATURES_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.MODIFYING_FEATURES = 16] = "MODIFYING_FEATURES", ToolPurposeFlagBits[ToolPurposeFlagBits.MODIFYING_FEATURES_BIT_EXT = 16] = "MODIFYING_FEATURES_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.DEBUG_REPORTING_BIT_EXT = 32] = "DEBUG_REPORTING_BIT_EXT", ToolPurposeFlagBits[ToolPurposeFlagBits.DEBUG_MARKERS_BIT_EXT = 64] = "DEBUG_MARKERS_BIT_EXT";
}(ToolPurposeFlagBits || (ToolPurposeFlagBits = {}));
export var FragmentShadingRateCombinerOpKHR;
!function(FragmentShadingRateCombinerOpKHR) {
    FragmentShadingRateCombinerOpKHR[FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0] = "FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR", FragmentShadingRateCombinerOpKHR[FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1] = "FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR", FragmentShadingRateCombinerOpKHR[FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2] = "FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR", FragmentShadingRateCombinerOpKHR[FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3] = "FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR", FragmentShadingRateCombinerOpKHR[FragmentShadingRateCombinerOpKHR.FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4] = "FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR";
}(FragmentShadingRateCombinerOpKHR || (FragmentShadingRateCombinerOpKHR = {}));
export var FragmentShadingRateNV;
!function(FragmentShadingRateNV) {
    FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10] = "FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11] = "FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12] = "FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13] = "FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14] = "FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV", FragmentShadingRateNV[FragmentShadingRateNV.FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15] = "FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV";
}(FragmentShadingRateNV || (FragmentShadingRateNV = {}));
export var FragmentShadingRateTypeNV;
!function(FragmentShadingRateTypeNV) {
    FragmentShadingRateTypeNV[FragmentShadingRateTypeNV.FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0] = "FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV", FragmentShadingRateTypeNV[FragmentShadingRateTypeNV.FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1] = "FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV";
}(FragmentShadingRateTypeNV || (FragmentShadingRateTypeNV = {}));
export var SubpassMergeStatusEXT;
!function(SubpassMergeStatusEXT) {
    SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_MERGED_EXT = 0] = "SUBPASS_MERGE_STATUS_MERGED_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1] = "SUBPASS_MERGE_STATUS_DISALLOWED_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2] = "SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3] = "SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4] = "SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5] = "SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6] = "SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7] = "SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8] = "SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9] = "SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10] = "SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11] = "SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12] = "SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT", SubpassMergeStatusEXT[SubpassMergeStatusEXT.SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13] = "SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT";
}(SubpassMergeStatusEXT || (SubpassMergeStatusEXT = {}));
export var AccessFlagBits2;
!function(AccessFlagBits2) {
    AccessFlagBits2[AccessFlagBits2.ACCESS_2_NONE = 0] = "ACCESS_2_NONE", AccessFlagBits2[AccessFlagBits2.ACCESS_2_NONE_KHR = 0] = "ACCESS_2_NONE_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INDIRECT_COMMAND_READ_BIT = 1] = "ACCESS_2_INDIRECT_COMMAND_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1] = "ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INDEX_READ_BIT = 2] = "ACCESS_2_INDEX_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INDEX_READ_BIT_KHR = 2] = "ACCESS_2_INDEX_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 4] = "ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4] = "ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_UNIFORM_READ_BIT = 8] = "ACCESS_2_UNIFORM_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_UNIFORM_READ_BIT_KHR = 8] = "ACCESS_2_UNIFORM_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 16] = "ACCESS_2_INPUT_ATTACHMENT_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16] = "ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_READ_BIT = 32] = "ACCESS_2_SHADER_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_READ_BIT_KHR = 32] = "ACCESS_2_SHADER_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_WRITE_BIT = 64] = "ACCESS_2_SHADER_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_WRITE_BIT_KHR = 64] = "ACCESS_2_SHADER_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 128] = "ACCESS_2_COLOR_ATTACHMENT_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128] = "ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 256] = "ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256] = "ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512] = "ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512] = "ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024] = "ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024] = "ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFER_READ_BIT = 2048] = "ACCESS_2_TRANSFER_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFER_READ_BIT_KHR = 2048] = "ACCESS_2_TRANSFER_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFER_WRITE_BIT = 4096] = "ACCESS_2_TRANSFER_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096] = "ACCESS_2_TRANSFER_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_HOST_READ_BIT = 8192] = "ACCESS_2_HOST_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_HOST_READ_BIT_KHR = 8192] = "ACCESS_2_HOST_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_HOST_WRITE_BIT = 16384] = "ACCESS_2_HOST_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_HOST_WRITE_BIT_KHR = 16384] = "ACCESS_2_HOST_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MEMORY_READ_BIT = 32768] = "ACCESS_2_MEMORY_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MEMORY_READ_BIT_KHR = 32768] = "ACCESS_2_MEMORY_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MEMORY_WRITE_BIT = 65536] = "ACCESS_2_MEMORY_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536] = "ACCESS_2_MEMORY_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_SAMPLED_READ_BIT = 4294967296] = "ACCESS_2_SHADER_SAMPLED_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296] = "ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_STORAGE_READ_BIT = 8589934592] = "ACCESS_2_SHADER_STORAGE_READ_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592] = "ACCESS_2_SHADER_STORAGE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_STORAGE_WRITE_BIT = 17179869184] = "ACCESS_2_SHADER_STORAGE_WRITE_BIT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184] = "ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368] = "ACCESS_2_VIDEO_DECODE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736] = "ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_RESERVED_46_BIT_EXT = 70368744177664] = "ACCESS_2_RESERVED_46_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472] = "ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944] = "ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432] = "ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864] = "ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728] = "ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576] = "ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072] = "ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144] = "ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608] = "ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608] = "ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152] = "ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304] = "ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152] = "ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304] = "ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216] = "ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288] = "ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 2199023255552] = "ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 549755813888] = "ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI", AccessFlagBits2[AccessFlagBits2.ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 1099511627776] = "ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MICROMAP_READ_BIT_EXT = 17592186044416] = "ACCESS_2_MICROMAP_READ_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_MICROMAP_WRITE_BIT_EXT = 35184372088832] = "ACCESS_2_MICROMAP_WRITE_BIT_EXT", AccessFlagBits2[AccessFlagBits2.ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 4398046511104] = "ACCESS_2_OPTICAL_FLOW_READ_BIT_NV", AccessFlagBits2[AccessFlagBits2.ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 8796093022208] = "ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV";
}(AccessFlagBits2 || (AccessFlagBits2 = {}));
export var PipelineStageFlagBits2;
!function(PipelineStageFlagBits2) {
    PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_NONE = 0] = "PIPELINE_STAGE_2_NONE", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_NONE_KHR = 0] = "PIPELINE_STAGE_2_NONE_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 1] = "PIPELINE_STAGE_2_TOP_OF_PIPE_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1] = "PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 2] = "PIPELINE_STAGE_2_DRAW_INDIRECT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2] = "PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 4] = "PIPELINE_STAGE_2_VERTEX_INPUT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4] = "PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 8] = "PIPELINE_STAGE_2_VERTEX_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8] = "PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 16] = "PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16] = "PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 32] = "PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32] = "PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 64] = "PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64] = "PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 128] = "PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128] = "PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 256] = "PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256] = "PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 512] = "PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512] = "PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 1024] = "PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024] = "PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 2048] = "PIPELINE_STAGE_2_COMPUTE_SHADER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048] = "PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 4096] = "PIPELINE_STAGE_2_ALL_TRANSFER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096] = "PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TRANSFER_BIT = 4096] = "PIPELINE_STAGE_2_TRANSFER_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 4096] = "PIPELINE_STAGE_2_TRANSFER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 8192] = "PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192] = "PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_HOST_BIT = 16384] = "PIPELINE_STAGE_2_HOST_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_HOST_BIT_KHR = 16384] = "PIPELINE_STAGE_2_HOST_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 32768] = "PIPELINE_STAGE_2_ALL_GRAPHICS_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768] = "PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 65536] = "PIPELINE_STAGE_2_ALL_COMMANDS_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536] = "PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COPY_BIT = 4294967296] = "PIPELINE_STAGE_2_COPY_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296] = "PIPELINE_STAGE_2_COPY_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_RESOLVE_BIT = 8589934592] = "PIPELINE_STAGE_2_RESOLVE_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592] = "PIPELINE_STAGE_2_RESOLVE_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_BLIT_BIT = 17179869184] = "PIPELINE_STAGE_2_BLIT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184] = "PIPELINE_STAGE_2_BLIT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_CLEAR_BIT = 34359738368] = "PIPELINE_STAGE_2_CLEAR_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368] = "PIPELINE_STAGE_2_CLEAR_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_INDEX_INPUT_BIT = 68719476736] = "PIPELINE_STAGE_2_INDEX_INPUT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736] = "PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 137438953472] = "PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472] = "PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 274877906944] = "PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944] = "PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864] = "PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728] = "PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216] = "PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144] = "PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072] = "PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304] = "PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304] = "PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432] = "PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152] = "PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152] = "PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432] = "PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608] = "PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288] = "PIPELINE_STAGE_2_TASK_SHADER_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576] = "PIPELINE_STAGE_2_MESH_SHADER_BIT_NV", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 524288] = "PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 1048576] = "PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 549755813888] = "PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 1099511627776] = "PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 268435456] = "PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 1073741824] = "PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_RESEVED_41_BIT_HUAWEI = 2199023255552] = "PIPELINE_STAGE_2_RESEVED_41_BIT_HUAWEI", PipelineStageFlagBits2[PipelineStageFlagBits2.PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 536870912] = "PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV";
}(PipelineStageFlagBits2 || (PipelineStageFlagBits2 = {}));
export var SubmitFlagBits;
!function(SubmitFlagBits) {
    SubmitFlagBits[SubmitFlagBits.PROTECTED = 1] = "PROTECTED", SubmitFlagBits[SubmitFlagBits.PROTECTED_BIT_KHR = 1] = "PROTECTED_BIT_KHR";
}(SubmitFlagBits || (SubmitFlagBits = {}));
export var EventCreateFlagBits;
!function(EventCreateFlagBits) {
    EventCreateFlagBits[EventCreateFlagBits.DEVICE_ONLY = 1] = "DEVICE_ONLY", EventCreateFlagBits[EventCreateFlagBits.DEVICE_ONLY_BIT_KHR = 1] = "DEVICE_ONLY_BIT_KHR";
}(EventCreateFlagBits || (EventCreateFlagBits = {}));
export var PipelineLayoutCreateFlagBits;
!function(PipelineLayoutCreateFlagBits) {
    PipelineLayoutCreateFlagBits[PipelineLayoutCreateFlagBits.RESERVED_0_BIT_AMD = 1] = "RESERVED_0_BIT_AMD", PipelineLayoutCreateFlagBits[PipelineLayoutCreateFlagBits.INDEPENDENT_SETS_BIT_EXT = 2] = "INDEPENDENT_SETS_BIT_EXT";
}(PipelineLayoutCreateFlagBits || (PipelineLayoutCreateFlagBits = {}));
export var ProvokingVertexModeEXT;
!function(ProvokingVertexModeEXT) {
    ProvokingVertexModeEXT[ProvokingVertexModeEXT.PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0] = "PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT", ProvokingVertexModeEXT[ProvokingVertexModeEXT.PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1] = "PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT";
}(ProvokingVertexModeEXT || (ProvokingVertexModeEXT = {}));
export var AccelerationStructureMotionInstanceTypeNV;
!function(AccelerationStructureMotionInstanceTypeNV) {
    AccelerationStructureMotionInstanceTypeNV[AccelerationStructureMotionInstanceTypeNV.ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0] = "ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV", AccelerationStructureMotionInstanceTypeNV[AccelerationStructureMotionInstanceTypeNV.ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1] = "ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV", AccelerationStructureMotionInstanceTypeNV[AccelerationStructureMotionInstanceTypeNV.ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2] = "ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV";
}(AccelerationStructureMotionInstanceTypeNV || (AccelerationStructureMotionInstanceTypeNV = {}));
export var PipelineColorBlendStateCreateFlagBits;
!function(PipelineColorBlendStateCreateFlagBits) {
    PipelineColorBlendStateCreateFlagBits[PipelineColorBlendStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1] = "RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM", PipelineColorBlendStateCreateFlagBits[PipelineColorBlendStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1] = "RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT";
}(PipelineColorBlendStateCreateFlagBits || (PipelineColorBlendStateCreateFlagBits = {}));
export var PipelineDepthStencilStateCreateFlagBits;
!function(PipelineDepthStencilStateCreateFlagBits) {
    PipelineDepthStencilStateCreateFlagBits[PipelineDepthStencilStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1] = "RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM", PipelineDepthStencilStateCreateFlagBits[PipelineDepthStencilStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2] = "RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM", PipelineDepthStencilStateCreateFlagBits[PipelineDepthStencilStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1] = "RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT", PipelineDepthStencilStateCreateFlagBits[PipelineDepthStencilStateCreateFlagBits.RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2] = "RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT";
}(PipelineDepthStencilStateCreateFlagBits || (PipelineDepthStencilStateCreateFlagBits = {}));
export var GraphicsPipelineLibraryFlagBitsEXT;
!function(GraphicsPipelineLibraryFlagBitsEXT) {
    GraphicsPipelineLibraryFlagBitsEXT[GraphicsPipelineLibraryFlagBitsEXT.GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1] = "GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT", GraphicsPipelineLibraryFlagBitsEXT[GraphicsPipelineLibraryFlagBitsEXT.GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2] = "GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT", GraphicsPipelineLibraryFlagBitsEXT[GraphicsPipelineLibraryFlagBitsEXT.GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4] = "GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT", GraphicsPipelineLibraryFlagBitsEXT[GraphicsPipelineLibraryFlagBitsEXT.GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8] = "GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT";
}(GraphicsPipelineLibraryFlagBitsEXT || (GraphicsPipelineLibraryFlagBitsEXT = {}));
export var DeviceAddressBindingFlagBitsEXT;
!function(DeviceAddressBindingFlagBitsEXT) {
    DeviceAddressBindingFlagBitsEXT[DeviceAddressBindingFlagBitsEXT.DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1] = "DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT";
}(DeviceAddressBindingFlagBitsEXT || (DeviceAddressBindingFlagBitsEXT = {}));
export var DeviceAddressBindingTypeEXT;
!function(DeviceAddressBindingTypeEXT) {
    DeviceAddressBindingTypeEXT[DeviceAddressBindingTypeEXT.DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0] = "DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT", DeviceAddressBindingTypeEXT[DeviceAddressBindingTypeEXT.DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1] = "DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT";
}(DeviceAddressBindingTypeEXT || (DeviceAddressBindingTypeEXT = {}));
export var VideoCodecOperationFlagBitsKHR;
!function(VideoCodecOperationFlagBitsKHR) {
    VideoCodecOperationFlagBitsKHR[VideoCodecOperationFlagBitsKHR.VIDEO_CODEC_OPERATION_NONE_KHR = 0] = "VIDEO_CODEC_OPERATION_NONE_KHR", VideoCodecOperationFlagBitsKHR[VideoCodecOperationFlagBitsKHR.VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = 65536] = "VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT", VideoCodecOperationFlagBitsKHR[VideoCodecOperationFlagBitsKHR.VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT = 131072] = "VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT", VideoCodecOperationFlagBitsKHR[VideoCodecOperationFlagBitsKHR.VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT = 1] = "VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT", VideoCodecOperationFlagBitsKHR[VideoCodecOperationFlagBitsKHR.VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT = 2] = "VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT";
}(VideoCodecOperationFlagBitsKHR || (VideoCodecOperationFlagBitsKHR = {}));
export var VideoChromaSubsamplingFlagBitsKHR;
!function(VideoChromaSubsamplingFlagBitsKHR) {
    VideoChromaSubsamplingFlagBitsKHR[VideoChromaSubsamplingFlagBitsKHR.VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0] = "VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR", VideoChromaSubsamplingFlagBitsKHR[VideoChromaSubsamplingFlagBitsKHR.VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1] = "VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR", VideoChromaSubsamplingFlagBitsKHR[VideoChromaSubsamplingFlagBitsKHR.VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2] = "VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR", VideoChromaSubsamplingFlagBitsKHR[VideoChromaSubsamplingFlagBitsKHR.VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4] = "VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR", VideoChromaSubsamplingFlagBitsKHR[VideoChromaSubsamplingFlagBitsKHR.VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8] = "VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR";
}(VideoChromaSubsamplingFlagBitsKHR || (VideoChromaSubsamplingFlagBitsKHR = {}));
export var VideoComponentBitDepthFlagBitsKHR;
!function(VideoComponentBitDepthFlagBitsKHR) {
    VideoComponentBitDepthFlagBitsKHR[VideoComponentBitDepthFlagBitsKHR.VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0] = "VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR", VideoComponentBitDepthFlagBitsKHR[VideoComponentBitDepthFlagBitsKHR.VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1] = "VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR", VideoComponentBitDepthFlagBitsKHR[VideoComponentBitDepthFlagBitsKHR.VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4] = "VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR", VideoComponentBitDepthFlagBitsKHR[VideoComponentBitDepthFlagBitsKHR.VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16] = "VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR";
}(VideoComponentBitDepthFlagBitsKHR || (VideoComponentBitDepthFlagBitsKHR = {}));
export var VideoCapabilityFlagBitsKHR;
!function(VideoCapabilityFlagBitsKHR) {
    VideoCapabilityFlagBitsKHR[VideoCapabilityFlagBitsKHR.VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1] = "VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR", VideoCapabilityFlagBitsKHR[VideoCapabilityFlagBitsKHR.VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2] = "VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR";
}(VideoCapabilityFlagBitsKHR || (VideoCapabilityFlagBitsKHR = {}));
export var VideoSessionCreateFlagBitsKHR;
!function(VideoSessionCreateFlagBitsKHR) {
    VideoSessionCreateFlagBitsKHR[VideoSessionCreateFlagBitsKHR.VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1] = "VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR";
}(VideoSessionCreateFlagBitsKHR || (VideoSessionCreateFlagBitsKHR = {}));
export var VideoDecodeH264PictureLayoutFlagBitsEXT;
!function(VideoDecodeH264PictureLayoutFlagBitsEXT) {
    VideoDecodeH264PictureLayoutFlagBitsEXT[VideoDecodeH264PictureLayoutFlagBitsEXT.VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_EXT = 0] = "VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_EXT", VideoDecodeH264PictureLayoutFlagBitsEXT[VideoDecodeH264PictureLayoutFlagBitsEXT.VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_EXT = 1] = "VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_EXT", VideoDecodeH264PictureLayoutFlagBitsEXT[VideoDecodeH264PictureLayoutFlagBitsEXT.VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_EXT = 2] = "VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_EXT";
}(VideoDecodeH264PictureLayoutFlagBitsEXT || (VideoDecodeH264PictureLayoutFlagBitsEXT = {}));
export var VideoCodingControlFlagBitsKHR;
!function(VideoCodingControlFlagBitsKHR) {
    VideoCodingControlFlagBitsKHR[VideoCodingControlFlagBitsKHR.VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1] = "VIDEO_CODING_CONTROL_RESET_BIT_KHR", VideoCodingControlFlagBitsKHR[VideoCodingControlFlagBitsKHR.VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2] = "VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR", VideoCodingControlFlagBitsKHR[VideoCodingControlFlagBitsKHR.VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR = 4] = "VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR";
}(VideoCodingControlFlagBitsKHR || (VideoCodingControlFlagBitsKHR = {}));
export var QueryResultStatusKHR;
!function(QueryResultStatusKHR) {
    QueryResultStatusKHR[QueryResultStatusKHR.QUERY_RESULT_STATUS_ERROR_KHR = -1] = "QUERY_RESULT_STATUS_ERROR_KHR", QueryResultStatusKHR[QueryResultStatusKHR.QUERY_RESULT_STATUS_NOT_READY_KHR = 0] = "QUERY_RESULT_STATUS_NOT_READY_KHR", QueryResultStatusKHR[QueryResultStatusKHR.QUERY_RESULT_STATUS_COMPLETE_KHR = 1] = "QUERY_RESULT_STATUS_COMPLETE_KHR";
}(QueryResultStatusKHR || (QueryResultStatusKHR = {}));
export var VideoDecodeUsageFlagBitsKHR;
!function(VideoDecodeUsageFlagBitsKHR) {
    VideoDecodeUsageFlagBitsKHR[VideoDecodeUsageFlagBitsKHR.VIDEO_DECODE_USAGE_DEFAULT_KHR = 0] = "VIDEO_DECODE_USAGE_DEFAULT_KHR", VideoDecodeUsageFlagBitsKHR[VideoDecodeUsageFlagBitsKHR.VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1] = "VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR", VideoDecodeUsageFlagBitsKHR[VideoDecodeUsageFlagBitsKHR.VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2] = "VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR", VideoDecodeUsageFlagBitsKHR[VideoDecodeUsageFlagBitsKHR.VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4] = "VIDEO_DECODE_USAGE_STREAMING_BIT_KHR";
}(VideoDecodeUsageFlagBitsKHR || (VideoDecodeUsageFlagBitsKHR = {}));
export var VideoDecodeCapabilityFlagBitsKHR;
!function(VideoDecodeCapabilityFlagBitsKHR) {
    VideoDecodeCapabilityFlagBitsKHR[VideoDecodeCapabilityFlagBitsKHR.VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1] = "VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR", VideoDecodeCapabilityFlagBitsKHR[VideoDecodeCapabilityFlagBitsKHR.VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2] = "VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR";
}(VideoDecodeCapabilityFlagBitsKHR || (VideoDecodeCapabilityFlagBitsKHR = {}));
export var VideoEncodeUsageFlagBitsKHR;
!function(VideoEncodeUsageFlagBitsKHR) {
    VideoEncodeUsageFlagBitsKHR[VideoEncodeUsageFlagBitsKHR.VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0] = "VIDEO_ENCODE_USAGE_DEFAULT_KHR", VideoEncodeUsageFlagBitsKHR[VideoEncodeUsageFlagBitsKHR.VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1] = "VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR", VideoEncodeUsageFlagBitsKHR[VideoEncodeUsageFlagBitsKHR.VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2] = "VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR", VideoEncodeUsageFlagBitsKHR[VideoEncodeUsageFlagBitsKHR.VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4] = "VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR", VideoEncodeUsageFlagBitsKHR[VideoEncodeUsageFlagBitsKHR.VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8] = "VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR";
}(VideoEncodeUsageFlagBitsKHR || (VideoEncodeUsageFlagBitsKHR = {}));
export var VideoEncodeContentFlagBitsKHR;
!function(VideoEncodeContentFlagBitsKHR) {
    VideoEncodeContentFlagBitsKHR[VideoEncodeContentFlagBitsKHR.VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0] = "VIDEO_ENCODE_CONTENT_DEFAULT_KHR", VideoEncodeContentFlagBitsKHR[VideoEncodeContentFlagBitsKHR.VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1] = "VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR", VideoEncodeContentFlagBitsKHR[VideoEncodeContentFlagBitsKHR.VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2] = "VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR", VideoEncodeContentFlagBitsKHR[VideoEncodeContentFlagBitsKHR.VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4] = "VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR";
}(VideoEncodeContentFlagBitsKHR || (VideoEncodeContentFlagBitsKHR = {}));
export var VideoEncodeTuningModeKHR;
!function(VideoEncodeTuningModeKHR) {
    VideoEncodeTuningModeKHR[VideoEncodeTuningModeKHR.VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0] = "VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR", VideoEncodeTuningModeKHR[VideoEncodeTuningModeKHR.VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1] = "VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR", VideoEncodeTuningModeKHR[VideoEncodeTuningModeKHR.VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2] = "VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR", VideoEncodeTuningModeKHR[VideoEncodeTuningModeKHR.VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3] = "VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR", VideoEncodeTuningModeKHR[VideoEncodeTuningModeKHR.VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4] = "VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR";
}(VideoEncodeTuningModeKHR || (VideoEncodeTuningModeKHR = {}));
export var VideoEncodeCapabilityFlagBitsKHR;
!function(VideoEncodeCapabilityFlagBitsKHR) {
    VideoEncodeCapabilityFlagBitsKHR[VideoEncodeCapabilityFlagBitsKHR.VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1] = "VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR";
}(VideoEncodeCapabilityFlagBitsKHR || (VideoEncodeCapabilityFlagBitsKHR = {}));
export var VideoEncodeRateControlModeFlagBitsKHR;
!function(VideoEncodeRateControlModeFlagBitsKHR) {
    VideoEncodeRateControlModeFlagBitsKHR[VideoEncodeRateControlModeFlagBitsKHR.VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR = 0] = "VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR", VideoEncodeRateControlModeFlagBitsKHR[VideoEncodeRateControlModeFlagBitsKHR.VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 1] = "VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR", VideoEncodeRateControlModeFlagBitsKHR[VideoEncodeRateControlModeFlagBitsKHR.VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 2] = "VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR";
}(VideoEncodeRateControlModeFlagBitsKHR || (VideoEncodeRateControlModeFlagBitsKHR = {}));
export var VideoEncodeH264CapabilityFlagBitsEXT;
!function(VideoEncodeH264CapabilityFlagBitsEXT) {
    VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_ENABLED_BIT_EXT = 1] = "VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_ENABLED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_DISABLED_BIT_EXT = 2] = "VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_DISABLED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT = 4] = "VIDEO_ENCODE_H264_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_BIT_EXT = 8] = "VIDEO_ENCODE_H264_CAPABILITY_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_SCALING_LISTS_BIT_EXT = 16] = "VIDEO_ENCODE_H264_CAPABILITY_SCALING_LISTS_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 32] = "VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT = 64] = "VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT = 128] = "VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_PIC_INIT_QP_MINUS26_BIT_EXT = 256] = "VIDEO_ENCODE_H264_CAPABILITY_PIC_INIT_QP_MINUS26_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_BIT_EXT = 512] = "VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_EXPLICIT_BIT_EXT = 1024] = "VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_EXPLICIT_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_IMPLICIT_BIT_EXT = 2048] = "VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_IMPLICIT_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT = 4096] = "VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT = 8192] = "VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT = 16384] = "VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT = 32768] = "VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT = 65536] = "VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT = 131072] = "VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT = 262144] = "VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DISABLE_DIRECT_SPATIAL_MV_PRED_BIT_EXT = 524288] = "VIDEO_ENCODE_H264_CAPABILITY_DISABLE_DIRECT_SPATIAL_MV_PRED_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT = 1048576] = "VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_SLICE_MB_COUNT_BIT_EXT = 2097152] = "VIDEO_ENCODE_H264_CAPABILITY_SLICE_MB_COUNT_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT = 4194304] = "VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT = 8388608] = "VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT", VideoEncodeH264CapabilityFlagBitsEXT[VideoEncodeH264CapabilityFlagBitsEXT.VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 16777216] = "VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT";
}(VideoEncodeH264CapabilityFlagBitsEXT || (VideoEncodeH264CapabilityFlagBitsEXT = {}));
export var VideoEncodeH264InputModeFlagBitsEXT;
!function(VideoEncodeH264InputModeFlagBitsEXT) {
    VideoEncodeH264InputModeFlagBitsEXT[VideoEncodeH264InputModeFlagBitsEXT.VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT = 1] = "VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT", VideoEncodeH264InputModeFlagBitsEXT[VideoEncodeH264InputModeFlagBitsEXT.VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT = 2] = "VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT", VideoEncodeH264InputModeFlagBitsEXT[VideoEncodeH264InputModeFlagBitsEXT.VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT = 4] = "VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT";
}(VideoEncodeH264InputModeFlagBitsEXT || (VideoEncodeH264InputModeFlagBitsEXT = {}));
export var VideoEncodeH264OutputModeFlagBitsEXT;
!function(VideoEncodeH264OutputModeFlagBitsEXT) {
    VideoEncodeH264OutputModeFlagBitsEXT[VideoEncodeH264OutputModeFlagBitsEXT.VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT = 1] = "VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT", VideoEncodeH264OutputModeFlagBitsEXT[VideoEncodeH264OutputModeFlagBitsEXT.VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT = 2] = "VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT", VideoEncodeH264OutputModeFlagBitsEXT[VideoEncodeH264OutputModeFlagBitsEXT.VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT = 4] = "VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT";
}(VideoEncodeH264OutputModeFlagBitsEXT || (VideoEncodeH264OutputModeFlagBitsEXT = {}));
export var VideoEncodeH264RateControlStructureEXT;
!function(VideoEncodeH264RateControlStructureEXT) {
    VideoEncodeH264RateControlStructureEXT[VideoEncodeH264RateControlStructureEXT.VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0] = "VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT", VideoEncodeH264RateControlStructureEXT[VideoEncodeH264RateControlStructureEXT.VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1] = "VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT", VideoEncodeH264RateControlStructureEXT[VideoEncodeH264RateControlStructureEXT.VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2] = "VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT";
}(VideoEncodeH264RateControlStructureEXT || (VideoEncodeH264RateControlStructureEXT = {}));
export var ImageFormatConstraintsFlagBitsFUCHSIA;
ImageFormatConstraintsFlagBitsFUCHSIA || (ImageFormatConstraintsFlagBitsFUCHSIA = {});
export var ImageConstraintsInfoFlagBitsFUCHSIA;
!function(ImageConstraintsInfoFlagBitsFUCHSIA) {
    ImageConstraintsInfoFlagBitsFUCHSIA[ImageConstraintsInfoFlagBitsFUCHSIA.IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 1] = "IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA", ImageConstraintsInfoFlagBitsFUCHSIA[ImageConstraintsInfoFlagBitsFUCHSIA.IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 2] = "IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA", ImageConstraintsInfoFlagBitsFUCHSIA[ImageConstraintsInfoFlagBitsFUCHSIA.IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 4] = "IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA", ImageConstraintsInfoFlagBitsFUCHSIA[ImageConstraintsInfoFlagBitsFUCHSIA.IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 8] = "IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA", ImageConstraintsInfoFlagBitsFUCHSIA[ImageConstraintsInfoFlagBitsFUCHSIA.IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 16] = "IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA";
}(ImageConstraintsInfoFlagBitsFUCHSIA || (ImageConstraintsInfoFlagBitsFUCHSIA = {}));
export var FormatFeatureFlagBits2;
!function(FormatFeatureFlagBits2) {
    FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 1] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 1] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 2] = "FORMAT_FEATURE_2_STORAGE_IMAGE_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 2] = "FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 4] = "FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 4] = "FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 8] = "FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 8] = "FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 16] = "FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 16] = "FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32] = "FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 32] = "FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 64] = "FORMAT_FEATURE_2_VERTEX_BUFFER_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 64] = "FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 128] = "FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 128] = "FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 256] = "FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 256] = "FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 512] = "FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 512] = "FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BLIT_SRC_BIT = 1024] = "FORMAT_FEATURE_2_BLIT_SRC_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 1024] = "FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BLIT_DST_BIT = 2048] = "FORMAT_FEATURE_2_BLIT_DST_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 2048] = "FORMAT_FEATURE_2_BLIT_DST_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 4096] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 8192] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 16384] = "FORMAT_FEATURE_2_TRANSFER_SRC_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 16384] = "FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_TRANSFER_DST_BIT = 32768] = "FORMAT_FEATURE_2_TRANSFER_DST_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 32768] = "FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 65536] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 131072] = "FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072] = "FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_DISJOINT_BIT = 4194304] = "FORMAT_FEATURE_2_DISJOINT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 4194304] = "FORMAT_FEATURE_2_DISJOINT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 8388608] = "FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608] = "FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 2147483648] = "FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 2147483648] = "FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 4294967296] = "FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 4294967296] = "FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 8589934592] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 8589934592] = "FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432] = "FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 67108864] = "FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912] = "FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216] = "FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824] = "FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_RESERVED_44_BIT_EXT = 17592186044416] = "FORMAT_FEATURE_2_RESERVED_44_BIT_EXT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_RESERVED_45_BIT_EXT = 35184372088832] = "FORMAT_FEATURE_2_RESERVED_45_BIT_EXT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728] = "FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 268435456] = "FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 274877906944] = "FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 17179869184] = "FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 34359738368] = "FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 68719476736] = "FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 137438953472] = "FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_RESERVED_39_BIT_EXT = 549755813888] = "FORMAT_FEATURE_2_RESERVED_39_BIT_EXT", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 1099511627776] = "FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 2199023255552] = "FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV", FormatFeatureFlagBits2[FormatFeatureFlagBits2.FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 4398046511104] = "FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV";
}(FormatFeatureFlagBits2 || (FormatFeatureFlagBits2 = {}));
export var RenderingFlagBits;
!function(RenderingFlagBits) {
    RenderingFlagBits[RenderingFlagBits.CONTENTS_SECONDARY_COMMAND_BUFFERS = 1] = "CONTENTS_SECONDARY_COMMAND_BUFFERS", RenderingFlagBits[RenderingFlagBits.CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1] = "CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR", RenderingFlagBits[RenderingFlagBits.SUSPENDING = 2] = "SUSPENDING", RenderingFlagBits[RenderingFlagBits.SUSPENDING_BIT_KHR = 2] = "SUSPENDING_BIT_KHR", RenderingFlagBits[RenderingFlagBits.RESUMING = 4] = "RESUMING", RenderingFlagBits[RenderingFlagBits.RESUMING_BIT_KHR = 4] = "RESUMING_BIT_KHR", RenderingFlagBits[RenderingFlagBits.ENABLE_LEGACY_DITHERING_BIT_EXT = 8] = "ENABLE_LEGACY_DITHERING_BIT_EXT";
}(RenderingFlagBits || (RenderingFlagBits = {}));
export var VideoEncodeH265CapabilityFlagBitsEXT;
!function(VideoEncodeH265CapabilityFlagBitsEXT) {
    VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT = 1] = "VIDEO_ENCODE_H265_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SCALING_LISTS_BIT_EXT = 2] = "VIDEO_ENCODE_H265_CAPABILITY_SCALING_LISTS_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SAMPLE_ADAPTIVE_OFFSET_ENABLED_BIT_EXT = 4] = "VIDEO_ENCODE_H265_CAPABILITY_SAMPLE_ADAPTIVE_OFFSET_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_PCM_ENABLE_BIT_EXT = 8] = "VIDEO_ENCODE_H265_CAPABILITY_PCM_ENABLE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SPS_TEMPORAL_MVP_ENABLED_BIT_EXT = 16] = "VIDEO_ENCODE_H265_CAPABILITY_SPS_TEMPORAL_MVP_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 32] = "VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_INIT_QP_MINUS26_BIT_EXT = 64] = "VIDEO_ENCODE_H265_CAPABILITY_INIT_QP_MINUS26_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT = 128] = "VIDEO_ENCODE_H265_CAPABILITY_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SIGN_DATA_HIDING_ENABLED_BIT_EXT = 256] = "VIDEO_ENCODE_H265_CAPABILITY_SIGN_DATA_HIDING_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_ENABLED_BIT_EXT = 512] = "VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_DISABLED_BIT_EXT = 1024] = "VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_DISABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_BIT_EXT = 2048] = "VIDEO_ENCODE_H265_CAPABILITY_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_BIT_EXT = 4096] = "VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BIPRED_BIT_EXT = 8192] = "VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BIPRED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT = 16384] = "VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_TRANSQUANT_BYPASS_ENABLED_BIT_EXT = 32768] = "VIDEO_ENCODE_H265_CAPABILITY_TRANSQUANT_BYPASS_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_ENTROPY_CODING_SYNC_ENABLED_BIT_EXT = 65536] = "VIDEO_ENCODE_H265_CAPABILITY_ENTROPY_CODING_SYNC_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_OVERRIDE_ENABLED_BIT_EXT = 131072] = "VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_OVERRIDE_ENABLED_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_FRAME_BIT_EXT = 262144] = "VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_FRAME_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_TILE_BIT_EXT = 524288] = "VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_TILE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_SLICE_BIT_EXT = 1048576] = "VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_SLICE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_SLICE_SEGMENT_CTB_COUNT_BIT_EXT = 2097152] = "VIDEO_ENCODE_H265_CAPABILITY_SLICE_SEGMENT_CTB_COUNT_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT = 4194304] = "VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_DEPENDENT_SLICE_SEGMENT_BIT_EXT = 8388608] = "VIDEO_ENCODE_H265_CAPABILITY_DEPENDENT_SLICE_SEGMENT_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT = 16777216] = "VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT", VideoEncodeH265CapabilityFlagBitsEXT[VideoEncodeH265CapabilityFlagBitsEXT.VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 33554432] = "VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT";
}(VideoEncodeH265CapabilityFlagBitsEXT || (VideoEncodeH265CapabilityFlagBitsEXT = {}));
export var VideoEncodeH265InputModeFlagBitsEXT;
!function(VideoEncodeH265InputModeFlagBitsEXT) {
    VideoEncodeH265InputModeFlagBitsEXT[VideoEncodeH265InputModeFlagBitsEXT.VIDEO_ENCODE_H265_INPUT_MODE_FRAME_BIT_EXT = 1] = "VIDEO_ENCODE_H265_INPUT_MODE_FRAME_BIT_EXT", VideoEncodeH265InputModeFlagBitsEXT[VideoEncodeH265InputModeFlagBitsEXT.VIDEO_ENCODE_H265_INPUT_MODE_SLICE_SEGMENT_BIT_EXT = 2] = "VIDEO_ENCODE_H265_INPUT_MODE_SLICE_SEGMENT_BIT_EXT", VideoEncodeH265InputModeFlagBitsEXT[VideoEncodeH265InputModeFlagBitsEXT.VIDEO_ENCODE_H265_INPUT_MODE_NON_VCL_BIT_EXT = 4] = "VIDEO_ENCODE_H265_INPUT_MODE_NON_VCL_BIT_EXT";
}(VideoEncodeH265InputModeFlagBitsEXT || (VideoEncodeH265InputModeFlagBitsEXT = {}));
export var VideoEncodeH265OutputModeFlagBitsEXT;
!function(VideoEncodeH265OutputModeFlagBitsEXT) {
    VideoEncodeH265OutputModeFlagBitsEXT[VideoEncodeH265OutputModeFlagBitsEXT.VIDEO_ENCODE_H265_OUTPUT_MODE_FRAME_BIT_EXT = 1] = "VIDEO_ENCODE_H265_OUTPUT_MODE_FRAME_BIT_EXT", VideoEncodeH265OutputModeFlagBitsEXT[VideoEncodeH265OutputModeFlagBitsEXT.VIDEO_ENCODE_H265_OUTPUT_MODE_SLICE_SEGMENT_BIT_EXT = 2] = "VIDEO_ENCODE_H265_OUTPUT_MODE_SLICE_SEGMENT_BIT_EXT", VideoEncodeH265OutputModeFlagBitsEXT[VideoEncodeH265OutputModeFlagBitsEXT.VIDEO_ENCODE_H265_OUTPUT_MODE_NON_VCL_BIT_EXT = 4] = "VIDEO_ENCODE_H265_OUTPUT_MODE_NON_VCL_BIT_EXT";
}(VideoEncodeH265OutputModeFlagBitsEXT || (VideoEncodeH265OutputModeFlagBitsEXT = {}));
export var VideoEncodeH265RateControlStructureEXT;
!function(VideoEncodeH265RateControlStructureEXT) {
    VideoEncodeH265RateControlStructureEXT[VideoEncodeH265RateControlStructureEXT.VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0] = "VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT", VideoEncodeH265RateControlStructureEXT[VideoEncodeH265RateControlStructureEXT.VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1] = "VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT", VideoEncodeH265RateControlStructureEXT[VideoEncodeH265RateControlStructureEXT.VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2] = "VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT";
}(VideoEncodeH265RateControlStructureEXT || (VideoEncodeH265RateControlStructureEXT = {}));
export var VideoEncodeH265CtbSizeFlagBitsEXT;
!function(VideoEncodeH265CtbSizeFlagBitsEXT) {
    VideoEncodeH265CtbSizeFlagBitsEXT[VideoEncodeH265CtbSizeFlagBitsEXT.VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT = 1] = "VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT", VideoEncodeH265CtbSizeFlagBitsEXT[VideoEncodeH265CtbSizeFlagBitsEXT.VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT = 2] = "VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT", VideoEncodeH265CtbSizeFlagBitsEXT[VideoEncodeH265CtbSizeFlagBitsEXT.VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT = 4] = "VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT";
}(VideoEncodeH265CtbSizeFlagBitsEXT || (VideoEncodeH265CtbSizeFlagBitsEXT = {}));
export var VideoEncodeH265TransformBlockSizeFlagBitsEXT;
!function(VideoEncodeH265TransformBlockSizeFlagBitsEXT) {
    VideoEncodeH265TransformBlockSizeFlagBitsEXT[VideoEncodeH265TransformBlockSizeFlagBitsEXT.VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT = 1] = "VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT", VideoEncodeH265TransformBlockSizeFlagBitsEXT[VideoEncodeH265TransformBlockSizeFlagBitsEXT.VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT = 2] = "VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT", VideoEncodeH265TransformBlockSizeFlagBitsEXT[VideoEncodeH265TransformBlockSizeFlagBitsEXT.VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT = 4] = "VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT", VideoEncodeH265TransformBlockSizeFlagBitsEXT[VideoEncodeH265TransformBlockSizeFlagBitsEXT.VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT = 8] = "VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT";
}(VideoEncodeH265TransformBlockSizeFlagBitsEXT || (VideoEncodeH265TransformBlockSizeFlagBitsEXT = {}));
export var ExportMetalObjectTypeFlagBitsEXT;
!function(ExportMetalObjectTypeFlagBitsEXT) {
    ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT = 1] = "EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT", ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT = 2] = "EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT", ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT = 4] = "EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT", ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT = 8] = "EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT", ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT = 16] = "EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT", ExportMetalObjectTypeFlagBitsEXT[ExportMetalObjectTypeFlagBitsEXT.EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT = 32] = "EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT";
}(ExportMetalObjectTypeFlagBitsEXT || (ExportMetalObjectTypeFlagBitsEXT = {}));
export var InstanceCreateFlagBits;
!function(InstanceCreateFlagBits) {
    InstanceCreateFlagBits[InstanceCreateFlagBits.ENUMERATE_PORTABILITY_BIT_KHR = 1] = "ENUMERATE_PORTABILITY_BIT_KHR";
}(InstanceCreateFlagBits || (InstanceCreateFlagBits = {}));
export var ImageCompressionFlagBitsEXT;
!function(ImageCompressionFlagBitsEXT) {
    ImageCompressionFlagBitsEXT[ImageCompressionFlagBitsEXT.IMAGE_COMPRESSION_DEFAULT_EXT = 0] = "IMAGE_COMPRESSION_DEFAULT_EXT", ImageCompressionFlagBitsEXT[ImageCompressionFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1] = "IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT", ImageCompressionFlagBitsEXT[ImageCompressionFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2] = "IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT", ImageCompressionFlagBitsEXT[ImageCompressionFlagBitsEXT.IMAGE_COMPRESSION_DISABLED_EXT = 4] = "IMAGE_COMPRESSION_DISABLED_EXT";
}(ImageCompressionFlagBitsEXT || (ImageCompressionFlagBitsEXT = {}));
export var ImageCompressionFixedRateFlagBitsEXT;
!function(ImageCompressionFixedRateFlagBitsEXT) {
    ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0] = "IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1] = "IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2] = "IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4] = "IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8] = "IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16] = "IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32] = "IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64] = "IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128] = "IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256] = "IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512] = "IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024] = "IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048] = "IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096] = "IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192] = "IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384] = "IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768] = "IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536] = "IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072] = "IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144] = "IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288] = "IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576] = "IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152] = "IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304] = "IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT", ImageCompressionFixedRateFlagBitsEXT[ImageCompressionFixedRateFlagBitsEXT.IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608] = "IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT";
}(ImageCompressionFixedRateFlagBitsEXT || (ImageCompressionFixedRateFlagBitsEXT = {}));
export var PipelineRobustnessBufferBehaviorEXT;
!function(PipelineRobustnessBufferBehaviorEXT) {
    PipelineRobustnessBufferBehaviorEXT[PipelineRobustnessBufferBehaviorEXT.PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0] = "PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT", PipelineRobustnessBufferBehaviorEXT[PipelineRobustnessBufferBehaviorEXT.PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1] = "PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT", PipelineRobustnessBufferBehaviorEXT[PipelineRobustnessBufferBehaviorEXT.PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2] = "PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT", PipelineRobustnessBufferBehaviorEXT[PipelineRobustnessBufferBehaviorEXT.PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3] = "PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT";
}(PipelineRobustnessBufferBehaviorEXT || (PipelineRobustnessBufferBehaviorEXT = {}));
export var PipelineRobustnessImageBehaviorEXT;
!function(PipelineRobustnessImageBehaviorEXT) {
    PipelineRobustnessImageBehaviorEXT[PipelineRobustnessImageBehaviorEXT.PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0] = "PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT", PipelineRobustnessImageBehaviorEXT[PipelineRobustnessImageBehaviorEXT.PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1] = "PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT", PipelineRobustnessImageBehaviorEXT[PipelineRobustnessImageBehaviorEXT.PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2] = "PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT", PipelineRobustnessImageBehaviorEXT[PipelineRobustnessImageBehaviorEXT.PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3] = "PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT";
}(PipelineRobustnessImageBehaviorEXT || (PipelineRobustnessImageBehaviorEXT = {}));
export var OpticalFlowGridSizeFlagBitsNV;
!function(OpticalFlowGridSizeFlagBitsNV) {
    OpticalFlowGridSizeFlagBitsNV[OpticalFlowGridSizeFlagBitsNV.OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0] = "OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV", OpticalFlowGridSizeFlagBitsNV[OpticalFlowGridSizeFlagBitsNV.OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1] = "OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV", OpticalFlowGridSizeFlagBitsNV[OpticalFlowGridSizeFlagBitsNV.OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2] = "OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV", OpticalFlowGridSizeFlagBitsNV[OpticalFlowGridSizeFlagBitsNV.OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4] = "OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV", OpticalFlowGridSizeFlagBitsNV[OpticalFlowGridSizeFlagBitsNV.OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8] = "OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV";
}(OpticalFlowGridSizeFlagBitsNV || (OpticalFlowGridSizeFlagBitsNV = {}));
export var OpticalFlowUsageFlagBitsNV;
!function(OpticalFlowUsageFlagBitsNV) {
    OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0] = "OPTICAL_FLOW_USAGE_UNKNOWN_NV", OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1] = "OPTICAL_FLOW_USAGE_INPUT_BIT_NV", OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2] = "OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV", OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4] = "OPTICAL_FLOW_USAGE_HINT_BIT_NV", OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_COST_BIT_NV = 8] = "OPTICAL_FLOW_USAGE_COST_BIT_NV", OpticalFlowUsageFlagBitsNV[OpticalFlowUsageFlagBitsNV.OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16] = "OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV";
}(OpticalFlowUsageFlagBitsNV || (OpticalFlowUsageFlagBitsNV = {}));
export var OpticalFlowPerformanceLevelNV;
!function(OpticalFlowPerformanceLevelNV) {
    OpticalFlowPerformanceLevelNV[OpticalFlowPerformanceLevelNV.OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0] = "OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV", OpticalFlowPerformanceLevelNV[OpticalFlowPerformanceLevelNV.OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1] = "OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV", OpticalFlowPerformanceLevelNV[OpticalFlowPerformanceLevelNV.OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2] = "OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV", OpticalFlowPerformanceLevelNV[OpticalFlowPerformanceLevelNV.OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3] = "OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV";
}(OpticalFlowPerformanceLevelNV || (OpticalFlowPerformanceLevelNV = {}));
export var OpticalFlowSessionBindingPointNV;
!function(OpticalFlowSessionBindingPointNV) {
    OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0] = "OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1] = "OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2] = "OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3] = "OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4] = "OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5] = "OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6] = "OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7] = "OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV", OpticalFlowSessionBindingPointNV[OpticalFlowSessionBindingPointNV.OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8] = "OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV";
}(OpticalFlowSessionBindingPointNV || (OpticalFlowSessionBindingPointNV = {}));
export var OpticalFlowSessionCreateFlagBitsNV;
!function(OpticalFlowSessionCreateFlagBitsNV) {
    OpticalFlowSessionCreateFlagBitsNV[OpticalFlowSessionCreateFlagBitsNV.OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1] = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV", OpticalFlowSessionCreateFlagBitsNV[OpticalFlowSessionCreateFlagBitsNV.OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2] = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV", OpticalFlowSessionCreateFlagBitsNV[OpticalFlowSessionCreateFlagBitsNV.OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4] = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV", OpticalFlowSessionCreateFlagBitsNV[OpticalFlowSessionCreateFlagBitsNV.OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8] = "OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV", OpticalFlowSessionCreateFlagBitsNV[OpticalFlowSessionCreateFlagBitsNV.OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16] = "OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV";
}(OpticalFlowSessionCreateFlagBitsNV || (OpticalFlowSessionCreateFlagBitsNV = {}));
export var OpticalFlowExecuteFlagBitsNV;
!function(OpticalFlowExecuteFlagBitsNV) {
    OpticalFlowExecuteFlagBitsNV[OpticalFlowExecuteFlagBitsNV.OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1] = "OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV";
}(OpticalFlowExecuteFlagBitsNV || (OpticalFlowExecuteFlagBitsNV = {}));
export var MicromapTypeEXT;
!function(MicromapTypeEXT) {
    MicromapTypeEXT[MicromapTypeEXT.MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0] = "MICROMAP_TYPE_OPACITY_MICROMAP_EXT";
}(MicromapTypeEXT || (MicromapTypeEXT = {}));
export var BuildMicromapFlagBitsEXT;
!function(BuildMicromapFlagBitsEXT) {
    BuildMicromapFlagBitsEXT[BuildMicromapFlagBitsEXT.BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1] = "BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT", BuildMicromapFlagBitsEXT[BuildMicromapFlagBitsEXT.BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2] = "BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT", BuildMicromapFlagBitsEXT[BuildMicromapFlagBitsEXT.BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4] = "BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT";
}(BuildMicromapFlagBitsEXT || (BuildMicromapFlagBitsEXT = {}));
export var MicromapCreateFlagBitsEXT;
!function(MicromapCreateFlagBitsEXT) {
    MicromapCreateFlagBitsEXT[MicromapCreateFlagBitsEXT.MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1] = "MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT";
}(MicromapCreateFlagBitsEXT || (MicromapCreateFlagBitsEXT = {}));
export var CopyMicromapModeEXT;
!function(CopyMicromapModeEXT) {
    CopyMicromapModeEXT[CopyMicromapModeEXT.COPY_MICROMAP_MODE_CLONE_EXT = 0] = "COPY_MICROMAP_MODE_CLONE_EXT", CopyMicromapModeEXT[CopyMicromapModeEXT.COPY_MICROMAP_MODE_SERIALIZE_EXT = 1] = "COPY_MICROMAP_MODE_SERIALIZE_EXT", CopyMicromapModeEXT[CopyMicromapModeEXT.COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2] = "COPY_MICROMAP_MODE_DESERIALIZE_EXT", CopyMicromapModeEXT[CopyMicromapModeEXT.COPY_MICROMAP_MODE_COMPACT_EXT = 3] = "COPY_MICROMAP_MODE_COMPACT_EXT";
}(CopyMicromapModeEXT || (CopyMicromapModeEXT = {}));
export var BuildMicromapModeEXT;
!function(BuildMicromapModeEXT) {
    BuildMicromapModeEXT[BuildMicromapModeEXT.BUILD_MICROMAP_MODE_BUILD_EXT = 0] = "BUILD_MICROMAP_MODE_BUILD_EXT";
}(BuildMicromapModeEXT || (BuildMicromapModeEXT = {}));
export var OpacityMicromapFormatEXT;
!function(OpacityMicromapFormatEXT) {
    OpacityMicromapFormatEXT[OpacityMicromapFormatEXT.OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1] = "OPACITY_MICROMAP_FORMAT_2_STATE_EXT", OpacityMicromapFormatEXT[OpacityMicromapFormatEXT.OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2] = "OPACITY_MICROMAP_FORMAT_4_STATE_EXT";
}(OpacityMicromapFormatEXT || (OpacityMicromapFormatEXT = {}));
export var OpacityMicromapSpecialIndexEXT;
!function(OpacityMicromapSpecialIndexEXT) {
    OpacityMicromapSpecialIndexEXT[OpacityMicromapSpecialIndexEXT.OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1] = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT", OpacityMicromapSpecialIndexEXT[OpacityMicromapSpecialIndexEXT.OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2] = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT", OpacityMicromapSpecialIndexEXT[OpacityMicromapSpecialIndexEXT.OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3] = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT", OpacityMicromapSpecialIndexEXT[OpacityMicromapSpecialIndexEXT.OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4] = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT";
}(OpacityMicromapSpecialIndexEXT || (OpacityMicromapSpecialIndexEXT = {}));
export var DeviceFaultAddressTypeEXT;
!function(DeviceFaultAddressTypeEXT) {
    DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0] = "DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1] = "DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2] = "DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3] = "DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4] = "DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5] = "DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT", DeviceFaultAddressTypeEXT[DeviceFaultAddressTypeEXT.DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6] = "DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT";
}(DeviceFaultAddressTypeEXT || (DeviceFaultAddressTypeEXT = {}));
export var DeviceFaultVendorBinaryHeaderVersionEXT;
!function(DeviceFaultVendorBinaryHeaderVersionEXT) {
    DeviceFaultVendorBinaryHeaderVersionEXT[DeviceFaultVendorBinaryHeaderVersionEXT.DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1] = "DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT";
}(DeviceFaultVendorBinaryHeaderVersionEXT || (DeviceFaultVendorBinaryHeaderVersionEXT = {}));
export class StdVideoH264SpsVuiFlags {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264SpsVuiFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264SpsVuiFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264SpsVuiFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264SpsVuiFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspect_ratio_info_present_flag && (this.aspect_ratio_info_present_flag = data.aspect_ratio_info_present_flag), void 0 !== data.overscan_info_present_flag && (this.overscan_info_present_flag = data.overscan_info_present_flag), void 0 !== data.overscan_appropriate_flag && (this.overscan_appropriate_flag = data.overscan_appropriate_flag), void 0 !== data.video_signal_type_present_flag && (this.video_signal_type_present_flag = data.video_signal_type_present_flag), void 0 !== data.video_full_range_flag && (this.video_full_range_flag = data.video_full_range_flag), void 0 !== data.color_description_present_flag && (this.color_description_present_flag = data.color_description_present_flag), void 0 !== data.chroma_loc_info_present_flag && (this.chroma_loc_info_present_flag = data.chroma_loc_info_present_flag), void 0 !== data.timing_info_present_flag && (this.timing_info_present_flag = data.timing_info_present_flag), void 0 !== data.fixed_frame_rate_flag && (this.fixed_frame_rate_flag = data.fixed_frame_rate_flag), void 0 !== data.bitstream_restriction_flag && (this.bitstream_restriction_flag = data.bitstream_restriction_flag), void 0 !== data.nal_hrd_parameters_present_flag && (this.nal_hrd_parameters_present_flag = data.nal_hrd_parameters_present_flag), void 0 !== data.vcl_hrd_parameters_present_flag && (this.vcl_hrd_parameters_present_flag = data.vcl_hrd_parameters_present_flag);
    }
    get aspect_ratio_info_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set aspect_ratio_info_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get overscan_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set overscan_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get overscan_appropriate_flag() {
        return this.#view.getUint32(8, LE);
    }
    set overscan_appropriate_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get video_signal_type_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set video_signal_type_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get video_full_range_flag() {
        return this.#view.getUint32(16, LE);
    }
    set video_full_range_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get color_description_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set color_description_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get chroma_loc_info_present_flag() {
        return this.#view.getUint32(24, LE);
    }
    set chroma_loc_info_present_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get timing_info_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set timing_info_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fixed_frame_rate_flag() {
        return this.#view.getUint32(32, LE);
    }
    set fixed_frame_rate_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get bitstream_restriction_flag() {
        return this.#view.getUint32(36, LE);
    }
    set bitstream_restriction_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get nal_hrd_parameters_present_flag() {
        return this.#view.getUint32(40, LE);
    }
    set nal_hrd_parameters_present_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get vcl_hrd_parameters_present_flag() {
        return this.#view.getUint32(44, LE);
    }
    set vcl_hrd_parameters_present_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class StdVideoH264HrdParameters {
    static size = 308;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264HrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264HrdParameters.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264HrdParameters.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264HrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.cpb_cnt_minus1 && (this.cpb_cnt_minus1 = data.cpb_cnt_minus1), void 0 !== data.bit_rate_scale && (this.bit_rate_scale = data.bit_rate_scale), void 0 !== data.cpb_size_scale && (this.cpb_size_scale = data.cpb_size_scale), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.bit_rate_value_minus1 && (this.bit_rate_value_minus1 = data.bit_rate_value_minus1), void 0 !== data.cpb_size_value_minus1 && (this.cpb_size_value_minus1 = data.cpb_size_value_minus1), void 0 !== data.cbr_flag && (this.cbr_flag = data.cbr_flag), void 0 !== data.initial_cpb_removal_delay_length_minus1 && (this.initial_cpb_removal_delay_length_minus1 = data.initial_cpb_removal_delay_length_minus1), void 0 !== data.cpb_removal_delay_length_minus1 && (this.cpb_removal_delay_length_minus1 = data.cpb_removal_delay_length_minus1), void 0 !== data.dpb_output_delay_length_minus1 && (this.dpb_output_delay_length_minus1 = data.dpb_output_delay_length_minus1), void 0 !== data.time_offset_length && (this.time_offset_length = data.time_offset_length);
    }
    get cpb_cnt_minus1() {
        return this.#view.getUint8(0);
    }
    set cpb_cnt_minus1(value) {
        this.#view.setUint8(0, Number(value));
    }
    get bit_rate_scale() {
        return this.#view.getUint8(1);
    }
    set bit_rate_scale(value) {
        this.#view.setUint8(1, Number(value));
    }
    get cpb_size_scale() {
        return this.#view.getUint8(2);
    }
    set cpb_size_scale(value) {
        this.#view.setUint8(2, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(3);
    }
    set reserved1(value) {
        this.#view.setUint8(3, Number(value));
    }
    get bit_rate_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 4, 32);
    }
    set bit_rate_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 4);
    }
    get cpb_size_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 132, 32);
    }
    set cpb_size_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 132);
    }
    get cbr_flag() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 260, 32);
    }
    set cbr_flag(value) {
        this.#data.set(new Uint8Array(value.buffer), 260);
    }
    get initial_cpb_removal_delay_length_minus1() {
        return this.#view.getUint32(292, LE);
    }
    set initial_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint32(292, Number(value), LE);
    }
    get cpb_removal_delay_length_minus1() {
        return this.#view.getUint32(296, LE);
    }
    set cpb_removal_delay_length_minus1(value) {
        this.#view.setUint32(296, Number(value), LE);
    }
    get dpb_output_delay_length_minus1() {
        return this.#view.getUint32(300, LE);
    }
    set dpb_output_delay_length_minus1(value) {
        this.#view.setUint32(300, Number(value), LE);
    }
    get time_offset_length() {
        return this.#view.getUint32(304, LE);
    }
    set time_offset_length(value) {
        this.#view.setUint32(304, Number(value), LE);
    }
}
export class StdVideoH264SequenceParameterSetVui {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264SequenceParameterSetVui.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264SequenceParameterSetVui.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264SequenceParameterSetVui.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264SequenceParameterSetVui.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.aspect_ratio_idc && (this.aspect_ratio_idc = data.aspect_ratio_idc), void 0 !== data.sar_width && (this.sar_width = data.sar_width), void 0 !== data.sar_height && (this.sar_height = data.sar_height), void 0 !== data.video_format && (this.video_format = data.video_format), void 0 !== data.colour_primaries && (this.colour_primaries = data.colour_primaries), void 0 !== data.transfer_characteristics && (this.transfer_characteristics = data.transfer_characteristics), void 0 !== data.matrix_coefficients && (this.matrix_coefficients = data.matrix_coefficients), void 0 !== data.num_units_in_tick && (this.num_units_in_tick = data.num_units_in_tick), void 0 !== data.time_scale && (this.time_scale = data.time_scale), void 0 !== data.max_num_reorder_frames && (this.max_num_reorder_frames = data.max_num_reorder_frames), void 0 !== data.max_dec_frame_buffering && (this.max_dec_frame_buffering = data.max_dec_frame_buffering), void 0 !== data.chroma_sample_loc_type_top_field && (this.chroma_sample_loc_type_top_field = data.chroma_sample_loc_type_top_field), void 0 !== data.chroma_sample_loc_type_bottom_field && (this.chroma_sample_loc_type_bottom_field = data.chroma_sample_loc_type_bottom_field), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.pHrdParameters && (this.pHrdParameters = data.pHrdParameters);
    }
    get flags() {
        return new StdVideoH264SpsVuiFlags(this.#data.subarray(0, 0 + StdVideoH264SpsVuiFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aspect_ratio_idc() {
        return this.#view.getUint32(48, LE);
    }
    set aspect_ratio_idc(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get sar_width() {
        return this.#view.getUint16(52, LE);
    }
    set sar_width(value) {
        this.#view.setUint16(52, Number(value), LE);
    }
    get sar_height() {
        return this.#view.getUint16(54, LE);
    }
    set sar_height(value) {
        this.#view.setUint16(54, Number(value), LE);
    }
    get video_format() {
        return this.#view.getUint8(56);
    }
    set video_format(value) {
        this.#view.setUint8(56, Number(value));
    }
    get colour_primaries() {
        return this.#view.getUint8(57);
    }
    set colour_primaries(value) {
        this.#view.setUint8(57, Number(value));
    }
    get transfer_characteristics() {
        return this.#view.getUint8(58);
    }
    set transfer_characteristics(value) {
        this.#view.setUint8(58, Number(value));
    }
    get matrix_coefficients() {
        return this.#view.getUint8(59);
    }
    set matrix_coefficients(value) {
        this.#view.setUint8(59, Number(value));
    }
    get num_units_in_tick() {
        return this.#view.getUint32(60, LE);
    }
    set num_units_in_tick(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get time_scale() {
        return this.#view.getUint32(64, LE);
    }
    set time_scale(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get max_num_reorder_frames() {
        return this.#view.getUint8(68);
    }
    set max_num_reorder_frames(value) {
        this.#view.setUint8(68, Number(value));
    }
    get max_dec_frame_buffering() {
        return this.#view.getUint8(69);
    }
    set max_dec_frame_buffering(value) {
        this.#view.setUint8(69, Number(value));
    }
    get chroma_sample_loc_type_top_field() {
        return this.#view.getUint8(70);
    }
    set chroma_sample_loc_type_top_field(value) {
        this.#view.setUint8(70, Number(value));
    }
    get chroma_sample_loc_type_bottom_field() {
        return this.#view.getUint8(71);
    }
    set chroma_sample_loc_type_bottom_field(value) {
        this.#view.setUint8(71, Number(value));
    }
    get reserved1() {
        return this.#view.getUint32(72, LE);
    }
    set reserved1(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(80, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH264SpsFlags {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264SpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264SpsFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264SpsFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264SpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.constraint_set0_flag && (this.constraint_set0_flag = data.constraint_set0_flag), void 0 !== data.constraint_set1_flag && (this.constraint_set1_flag = data.constraint_set1_flag), void 0 !== data.constraint_set2_flag && (this.constraint_set2_flag = data.constraint_set2_flag), void 0 !== data.constraint_set3_flag && (this.constraint_set3_flag = data.constraint_set3_flag), void 0 !== data.constraint_set4_flag && (this.constraint_set4_flag = data.constraint_set4_flag), void 0 !== data.constraint_set5_flag && (this.constraint_set5_flag = data.constraint_set5_flag), void 0 !== data.direct_8x8_inference_flag && (this.direct_8x8_inference_flag = data.direct_8x8_inference_flag), void 0 !== data.mb_adaptive_frame_field_flag && (this.mb_adaptive_frame_field_flag = data.mb_adaptive_frame_field_flag), void 0 !== data.frame_mbs_only_flag && (this.frame_mbs_only_flag = data.frame_mbs_only_flag), void 0 !== data.delta_pic_order_always_zero_flag && (this.delta_pic_order_always_zero_flag = data.delta_pic_order_always_zero_flag), void 0 !== data.separate_colour_plane_flag && (this.separate_colour_plane_flag = data.separate_colour_plane_flag), void 0 !== data.gaps_in_frame_num_value_allowed_flag && (this.gaps_in_frame_num_value_allowed_flag = data.gaps_in_frame_num_value_allowed_flag), void 0 !== data.qpprime_y_zero_transform_bypass_flag && (this.qpprime_y_zero_transform_bypass_flag = data.qpprime_y_zero_transform_bypass_flag), void 0 !== data.frame_cropping_flag && (this.frame_cropping_flag = data.frame_cropping_flag), void 0 !== data.seq_scaling_matrix_present_flag && (this.seq_scaling_matrix_present_flag = data.seq_scaling_matrix_present_flag), void 0 !== data.vui_parameters_present_flag && (this.vui_parameters_present_flag = data.vui_parameters_present_flag);
    }
    get constraint_set0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set constraint_set0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get constraint_set1_flag() {
        return this.#view.getUint32(4, LE);
    }
    set constraint_set1_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get constraint_set2_flag() {
        return this.#view.getUint32(8, LE);
    }
    set constraint_set2_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get constraint_set3_flag() {
        return this.#view.getUint32(12, LE);
    }
    set constraint_set3_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get constraint_set4_flag() {
        return this.#view.getUint32(16, LE);
    }
    set constraint_set4_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get constraint_set5_flag() {
        return this.#view.getUint32(20, LE);
    }
    set constraint_set5_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get direct_8x8_inference_flag() {
        return this.#view.getUint32(24, LE);
    }
    set direct_8x8_inference_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get mb_adaptive_frame_field_flag() {
        return this.#view.getUint32(28, LE);
    }
    set mb_adaptive_frame_field_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get frame_mbs_only_flag() {
        return this.#view.getUint32(32, LE);
    }
    set frame_mbs_only_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get delta_pic_order_always_zero_flag() {
        return this.#view.getUint32(36, LE);
    }
    set delta_pic_order_always_zero_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get separate_colour_plane_flag() {
        return this.#view.getUint32(40, LE);
    }
    set separate_colour_plane_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get gaps_in_frame_num_value_allowed_flag() {
        return this.#view.getUint32(44, LE);
    }
    set gaps_in_frame_num_value_allowed_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get qpprime_y_zero_transform_bypass_flag() {
        return this.#view.getUint32(48, LE);
    }
    set qpprime_y_zero_transform_bypass_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get frame_cropping_flag() {
        return this.#view.getUint32(52, LE);
    }
    set frame_cropping_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get seq_scaling_matrix_present_flag() {
        return this.#view.getUint32(56, LE);
    }
    set seq_scaling_matrix_present_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get vui_parameters_present_flag() {
        return this.#view.getUint32(60, LE);
    }
    set vui_parameters_present_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class StdVideoH264ScalingLists {
    static size = 484;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264ScalingLists.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264ScalingLists.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264ScalingLists.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264ScalingLists.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.scaling_list_present_mask && (this.scaling_list_present_mask = data.scaling_list_present_mask), void 0 !== data.use_default_scaling_matrix_mask && (this.use_default_scaling_matrix_mask = data.use_default_scaling_matrix_mask), void 0 !== data.ScalingList4x4 && (this.ScalingList4x4 = data.ScalingList4x4), void 0 !== data.ScalingList8x8 && (this.ScalingList8x8 = data.ScalingList8x8);
    }
    get scaling_list_present_mask() {
        return this.#view.getUint16(0, LE);
    }
    set scaling_list_present_mask(value) {
        this.#view.setUint16(0, Number(value), LE);
    }
    get use_default_scaling_matrix_mask() {
        return this.#view.getUint16(2, LE);
    }
    set use_default_scaling_matrix_mask(value) {
        this.#view.setUint16(2, Number(value), LE);
    }
    get ScalingList4x4() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 4, 96);
    }
    set ScalingList4x4(value) {
        this.#data.set(new Uint8Array(value.buffer), 4);
    }
    get ScalingList8x8() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 100, 384);
    }
    set ScalingList8x8(value) {
        this.#data.set(new Uint8Array(value.buffer), 100);
    }
}
export class StdVideoH264SequenceParameterSet {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264SequenceParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264SequenceParameterSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264SequenceParameterSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264SequenceParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.profile_idc && (this.profile_idc = data.profile_idc), void 0 !== data.level_idc && (this.level_idc = data.level_idc), void 0 !== data.chroma_format_idc && (this.chroma_format_idc = data.chroma_format_idc), void 0 !== data.seq_parameter_set_id && (this.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.bit_depth_luma_minus8 && (this.bit_depth_luma_minus8 = data.bit_depth_luma_minus8), void 0 !== data.bit_depth_chroma_minus8 && (this.bit_depth_chroma_minus8 = data.bit_depth_chroma_minus8), void 0 !== data.log2_max_frame_num_minus4 && (this.log2_max_frame_num_minus4 = data.log2_max_frame_num_minus4), void 0 !== data.pic_order_cnt_type && (this.pic_order_cnt_type = data.pic_order_cnt_type), void 0 !== data.offset_for_non_ref_pic && (this.offset_for_non_ref_pic = data.offset_for_non_ref_pic), void 0 !== data.offset_for_top_to_bottom_field && (this.offset_for_top_to_bottom_field = data.offset_for_top_to_bottom_field), void 0 !== data.log2_max_pic_order_cnt_lsb_minus4 && (this.log2_max_pic_order_cnt_lsb_minus4 = data.log2_max_pic_order_cnt_lsb_minus4), void 0 !== data.num_ref_frames_in_pic_order_cnt_cycle && (this.num_ref_frames_in_pic_order_cnt_cycle = data.num_ref_frames_in_pic_order_cnt_cycle), void 0 !== data.max_num_ref_frames && (this.max_num_ref_frames = data.max_num_ref_frames), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.pic_width_in_mbs_minus1 && (this.pic_width_in_mbs_minus1 = data.pic_width_in_mbs_minus1), void 0 !== data.pic_height_in_map_units_minus1 && (this.pic_height_in_map_units_minus1 = data.pic_height_in_map_units_minus1), void 0 !== data.frame_crop_left_offset && (this.frame_crop_left_offset = data.frame_crop_left_offset), void 0 !== data.frame_crop_right_offset && (this.frame_crop_right_offset = data.frame_crop_right_offset), void 0 !== data.frame_crop_top_offset && (this.frame_crop_top_offset = data.frame_crop_top_offset), void 0 !== data.frame_crop_bottom_offset && (this.frame_crop_bottom_offset = data.frame_crop_bottom_offset), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.pOffsetForRefFrame && (this.pOffsetForRefFrame = data.pOffsetForRefFrame), void 0 !== data.pScalingLists && (this.pScalingLists = data.pScalingLists), void 0 !== data.pSequenceParameterSetVui && (this.pSequenceParameterSetVui = data.pSequenceParameterSetVui);
    }
    get flags() {
        return new StdVideoH264SpsFlags(this.#data.subarray(0, 0 + StdVideoH264SpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264SpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get profile_idc() {
        return this.#view.getUint32(64, LE);
    }
    set profile_idc(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get level_idc() {
        return this.#view.getUint32(68, LE);
    }
    set level_idc(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get chroma_format_idc() {
        return this.#view.getUint32(72, LE);
    }
    set chroma_format_idc(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(76);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(76, Number(value));
    }
    get bit_depth_luma_minus8() {
        return this.#view.getUint8(77);
    }
    set bit_depth_luma_minus8(value) {
        this.#view.setUint8(77, Number(value));
    }
    get bit_depth_chroma_minus8() {
        return this.#view.getUint8(78);
    }
    set bit_depth_chroma_minus8(value) {
        this.#view.setUint8(78, Number(value));
    }
    get log2_max_frame_num_minus4() {
        return this.#view.getUint8(79);
    }
    set log2_max_frame_num_minus4(value) {
        this.#view.setUint8(79, Number(value));
    }
    get pic_order_cnt_type() {
        return this.#view.getUint32(80, LE);
    }
    set pic_order_cnt_type(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get offset_for_non_ref_pic() {
        return this.#view.getInt32(84, LE);
    }
    set offset_for_non_ref_pic(value) {
        this.#view.setInt32(84, Number(value), LE);
    }
    get offset_for_top_to_bottom_field() {
        return this.#view.getInt32(88, LE);
    }
    set offset_for_top_to_bottom_field(value) {
        this.#view.setInt32(88, Number(value), LE);
    }
    get log2_max_pic_order_cnt_lsb_minus4() {
        return this.#view.getUint8(92);
    }
    set log2_max_pic_order_cnt_lsb_minus4(value) {
        this.#view.setUint8(92, Number(value));
    }
    get num_ref_frames_in_pic_order_cnt_cycle() {
        return this.#view.getUint8(93);
    }
    set num_ref_frames_in_pic_order_cnt_cycle(value) {
        this.#view.setUint8(93, Number(value));
    }
    get max_num_ref_frames() {
        return this.#view.getUint8(94);
    }
    set max_num_ref_frames(value) {
        this.#view.setUint8(94, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(95);
    }
    set reserved1(value) {
        this.#view.setUint8(95, Number(value));
    }
    get pic_width_in_mbs_minus1() {
        return this.#view.getUint32(96, LE);
    }
    set pic_width_in_mbs_minus1(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get pic_height_in_map_units_minus1() {
        return this.#view.getUint32(100, LE);
    }
    set pic_height_in_map_units_minus1(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get frame_crop_left_offset() {
        return this.#view.getUint32(104, LE);
    }
    set frame_crop_left_offset(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get frame_crop_right_offset() {
        return this.#view.getUint32(108, LE);
    }
    set frame_crop_right_offset(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get frame_crop_top_offset() {
        return this.#view.getUint32(112, LE);
    }
    set frame_crop_top_offset(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get frame_crop_bottom_offset() {
        return this.#view.getUint32(116, LE);
    }
    set frame_crop_bottom_offset(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get reserved2() {
        return this.#view.getUint32(120, LE);
    }
    set reserved2(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pOffsetForRefFrame() {
        return this.#view.getBigUint64(128, LE);
    }
    set pOffsetForRefFrame(value) {
        this.#view.setBigUint64(128, BigInt(anyPointer(value)), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(136, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(136, BigInt(anyPointer(value)), LE);
    }
    get pSequenceParameterSetVui() {
        return this.#view.getBigUint64(144, LE);
    }
    set pSequenceParameterSetVui(value) {
        this.#view.setBigUint64(144, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH264PpsFlags {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264PpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264PpsFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264PpsFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264PpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.transform_8x8_mode_flag && (this.transform_8x8_mode_flag = data.transform_8x8_mode_flag), void 0 !== data.redundant_pic_cnt_present_flag && (this.redundant_pic_cnt_present_flag = data.redundant_pic_cnt_present_flag), void 0 !== data.constrained_intra_pred_flag && (this.constrained_intra_pred_flag = data.constrained_intra_pred_flag), void 0 !== data.deblocking_filter_control_present_flag && (this.deblocking_filter_control_present_flag = data.deblocking_filter_control_present_flag), void 0 !== data.weighted_pred_flag && (this.weighted_pred_flag = data.weighted_pred_flag), void 0 !== data.bottom_field_pic_order_in_frame_present_flag && (this.bottom_field_pic_order_in_frame_present_flag = data.bottom_field_pic_order_in_frame_present_flag), void 0 !== data.entropy_coding_mode_flag && (this.entropy_coding_mode_flag = data.entropy_coding_mode_flag), void 0 !== data.pic_scaling_matrix_present_flag && (this.pic_scaling_matrix_present_flag = data.pic_scaling_matrix_present_flag);
    }
    get transform_8x8_mode_flag() {
        return this.#view.getUint32(0, LE);
    }
    set transform_8x8_mode_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get redundant_pic_cnt_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set redundant_pic_cnt_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get constrained_intra_pred_flag() {
        return this.#view.getUint32(8, LE);
    }
    set constrained_intra_pred_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deblocking_filter_control_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set deblocking_filter_control_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get weighted_pred_flag() {
        return this.#view.getUint32(16, LE);
    }
    set weighted_pred_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bottom_field_pic_order_in_frame_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set bottom_field_pic_order_in_frame_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get entropy_coding_mode_flag() {
        return this.#view.getUint32(24, LE);
    }
    set entropy_coding_mode_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pic_scaling_matrix_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set pic_scaling_matrix_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class StdVideoH264PictureParameterSet {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH264PictureParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH264PictureParameterSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH264PictureParameterSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH264PictureParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.seq_parameter_set_id && (this.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (this.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.num_ref_idx_l0_default_active_minus1 && (this.num_ref_idx_l0_default_active_minus1 = data.num_ref_idx_l0_default_active_minus1), void 0 !== data.num_ref_idx_l1_default_active_minus1 && (this.num_ref_idx_l1_default_active_minus1 = data.num_ref_idx_l1_default_active_minus1), void 0 !== data.weighted_bipred_idc && (this.weighted_bipred_idc = data.weighted_bipred_idc), void 0 !== data.pic_init_qp_minus26 && (this.pic_init_qp_minus26 = data.pic_init_qp_minus26), void 0 !== data.pic_init_qs_minus26 && (this.pic_init_qs_minus26 = data.pic_init_qs_minus26), void 0 !== data.chroma_qp_index_offset && (this.chroma_qp_index_offset = data.chroma_qp_index_offset), void 0 !== data.second_chroma_qp_index_offset && (this.second_chroma_qp_index_offset = data.second_chroma_qp_index_offset), void 0 !== data.pScalingLists && (this.pScalingLists = data.pScalingLists);
    }
    get flags() {
        return new StdVideoH264PpsFlags(this.#data.subarray(0, 0 + StdVideoH264PpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264PpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(32);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(33);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(33, Number(value));
    }
    get num_ref_idx_l0_default_active_minus1() {
        return this.#view.getUint8(34);
    }
    set num_ref_idx_l0_default_active_minus1(value) {
        this.#view.setUint8(34, Number(value));
    }
    get num_ref_idx_l1_default_active_minus1() {
        return this.#view.getUint8(35);
    }
    set num_ref_idx_l1_default_active_minus1(value) {
        this.#view.setUint8(35, Number(value));
    }
    get weighted_bipred_idc() {
        return this.#view.getUint32(36, LE);
    }
    set weighted_bipred_idc(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pic_init_qp_minus26() {
        return this.#view.getInt8(40);
    }
    set pic_init_qp_minus26(value) {
        this.#view.setInt8(40, Number(value));
    }
    get pic_init_qs_minus26() {
        return this.#view.getInt8(41);
    }
    set pic_init_qs_minus26(value) {
        this.#view.setInt8(41, Number(value));
    }
    get chroma_qp_index_offset() {
        return this.#view.getInt8(42);
    }
    set chroma_qp_index_offset(value) {
        this.#view.setInt8(42, Number(value));
    }
    get second_chroma_qp_index_offset() {
        return this.#view.getInt8(43);
    }
    set second_chroma_qp_index_offset(value) {
        this.#view.setInt8(43, Number(value));
    }
    get pScalingLists() {
        return this.#view.getBigUint64(48, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoDecodeH264PictureInfoFlags {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH264PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH264PictureInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH264PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.field_pic_flag && (this.field_pic_flag = data.field_pic_flag), void 0 !== data.is_intra && (this.is_intra = data.is_intra), void 0 !== data.IdrPicFlag && (this.IdrPicFlag = data.IdrPicFlag), void 0 !== data.bottom_field_flag && (this.bottom_field_flag = data.bottom_field_flag), void 0 !== data.is_reference && (this.is_reference = data.is_reference), void 0 !== data.complementary_field_pair && (this.complementary_field_pair = data.complementary_field_pair);
    }
    get field_pic_flag() {
        return this.#view.getUint32(0, LE);
    }
    set field_pic_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get is_intra() {
        return this.#view.getUint32(4, LE);
    }
    set is_intra(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get IdrPicFlag() {
        return this.#view.getUint32(8, LE);
    }
    set IdrPicFlag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bottom_field_flag() {
        return this.#view.getUint32(12, LE);
    }
    set bottom_field_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get is_reference() {
        return this.#view.getUint32(16, LE);
    }
    set is_reference(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get complementary_field_pair() {
        return this.#view.getUint32(20, LE);
    }
    set complementary_field_pair(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class StdVideoDecodeH264PictureInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH264PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH264PictureInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH264PictureInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH264PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.seq_parameter_set_id && (this.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (this.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.frame_num && (this.frame_num = data.frame_num), void 0 !== data.idr_pic_id && (this.idr_pic_id = data.idr_pic_id), void 0 !== data.PicOrderCnt && (this.PicOrderCnt = data.PicOrderCnt);
    }
    get flags() {
        return new StdVideoDecodeH264PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH264PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(24);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(25);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(25, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(26);
    }
    set reserved1(value) {
        this.#view.setUint8(26, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(27);
    }
    set reserved2(value) {
        this.#view.setUint8(27, Number(value));
    }
    get frame_num() {
        return this.#view.getUint16(28, LE);
    }
    set frame_num(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
    get idr_pic_id() {
        return this.#view.getUint16(30, LE);
    }
    set idr_pic_id(value) {
        this.#view.setUint16(30, Number(value), LE);
    }
    get PicOrderCnt() {
        return new Int32Array(this.#data.buffer, this.#data.byteOffset + 32, 2);
    }
    set PicOrderCnt(value) {
        this.#data.set(new Uint8Array(value.buffer), 32);
    }
}
export class StdVideoDecodeH264ReferenceInfoFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH264ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH264ReferenceInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH264ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.top_field_flag && (this.top_field_flag = data.top_field_flag), void 0 !== data.bottom_field_flag && (this.bottom_field_flag = data.bottom_field_flag), void 0 !== data.used_for_long_term_reference && (this.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.is_non_existing && (this.is_non_existing = data.is_non_existing);
    }
    get top_field_flag() {
        return this.#view.getUint32(0, LE);
    }
    set top_field_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get bottom_field_flag() {
        return this.#view.getUint32(4, LE);
    }
    set bottom_field_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(8, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get is_non_existing() {
        return this.#view.getUint32(12, LE);
    }
    set is_non_existing(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoDecodeH264ReferenceInfo {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH264ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH264ReferenceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH264ReferenceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH264ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.FrameNum && (this.FrameNum = data.FrameNum), void 0 !== data.reserved && (this.reserved = data.reserved), void 0 !== data.PicOrderCnt && (this.PicOrderCnt = data.PicOrderCnt);
    }
    get flags() {
        return new StdVideoDecodeH264ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH264ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get FrameNum() {
        return this.#view.getUint16(16, LE);
    }
    set FrameNum(value) {
        this.#view.setUint16(16, Number(value), LE);
    }
    get reserved() {
        return this.#view.getUint16(18, LE);
    }
    set reserved(value) {
        this.#view.setUint16(18, Number(value), LE);
    }
    get PicOrderCnt() {
        return new Int32Array(this.#data.buffer, this.#data.byteOffset + 20, 2);
    }
    set PicOrderCnt(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
}
export class StdVideoEncodeH264WeightTableFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264WeightTableFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264WeightTableFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264WeightTableFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264WeightTableFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.luma_weight_l0_flag && (this.luma_weight_l0_flag = data.luma_weight_l0_flag), void 0 !== data.chroma_weight_l0_flag && (this.chroma_weight_l0_flag = data.chroma_weight_l0_flag), void 0 !== data.luma_weight_l1_flag && (this.luma_weight_l1_flag = data.luma_weight_l1_flag), void 0 !== data.chroma_weight_l1_flag && (this.chroma_weight_l1_flag = data.chroma_weight_l1_flag);
    }
    get luma_weight_l0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set luma_weight_l0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get chroma_weight_l0_flag() {
        return this.#view.getUint32(4, LE);
    }
    set chroma_weight_l0_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get luma_weight_l1_flag() {
        return this.#view.getUint32(8, LE);
    }
    set luma_weight_l1_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get chroma_weight_l1_flag() {
        return this.#view.getUint32(12, LE);
    }
    set chroma_weight_l1_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoEncodeH264WeightTable {
    static size = 404;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264WeightTable.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264WeightTable.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264WeightTable.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264WeightTable.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.luma_log2_weight_denom && (this.luma_log2_weight_denom = data.luma_log2_weight_denom), void 0 !== data.chroma_log2_weight_denom && (this.chroma_log2_weight_denom = data.chroma_log2_weight_denom), void 0 !== data.luma_weight_l0 && (this.luma_weight_l0 = data.luma_weight_l0), void 0 !== data.luma_offset_l0 && (this.luma_offset_l0 = data.luma_offset_l0), void 0 !== data.chroma_weight_l0 && (this.chroma_weight_l0 = data.chroma_weight_l0), void 0 !== data.chroma_offset_l0 && (this.chroma_offset_l0 = data.chroma_offset_l0), void 0 !== data.luma_weight_l1 && (this.luma_weight_l1 = data.luma_weight_l1), void 0 !== data.luma_offset_l1 && (this.luma_offset_l1 = data.luma_offset_l1), void 0 !== data.chroma_weight_l1 && (this.chroma_weight_l1 = data.chroma_weight_l1), void 0 !== data.chroma_offset_l1 && (this.chroma_offset_l1 = data.chroma_offset_l1);
    }
    get flags() {
        return new StdVideoEncodeH264WeightTableFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264WeightTableFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get luma_log2_weight_denom() {
        return this.#view.getUint8(16);
    }
    set luma_log2_weight_denom(value) {
        this.#view.setUint8(16, Number(value));
    }
    get chroma_log2_weight_denom() {
        return this.#view.getUint8(17);
    }
    set chroma_log2_weight_denom(value) {
        this.#view.setUint8(17, Number(value));
    }
    get luma_weight_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 18, 32);
    }
    set luma_weight_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 18);
    }
    get luma_offset_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 50, 32);
    }
    set luma_offset_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 50);
    }
    get chroma_weight_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 82, 64);
    }
    set chroma_weight_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 82);
    }
    get chroma_offset_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 146, 64);
    }
    set chroma_offset_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 146);
    }
    get luma_weight_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 210, 32);
    }
    set luma_weight_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 210);
    }
    get luma_offset_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 242, 32);
    }
    set luma_offset_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 242);
    }
    get chroma_weight_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 274, 64);
    }
    set chroma_weight_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 274);
    }
    get chroma_offset_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 338, 64);
    }
    set chroma_offset_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 338);
    }
}
export class StdVideoEncodeH264SliceHeaderFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264SliceHeaderFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264SliceHeaderFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264SliceHeaderFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264SliceHeaderFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.direct_spatial_mv_pred_flag && (this.direct_spatial_mv_pred_flag = data.direct_spatial_mv_pred_flag), void 0 !== data.num_ref_idx_active_override_flag && (this.num_ref_idx_active_override_flag = data.num_ref_idx_active_override_flag), void 0 !== data.no_output_of_prior_pics_flag && (this.no_output_of_prior_pics_flag = data.no_output_of_prior_pics_flag), void 0 !== data.adaptive_ref_pic_marking_mode_flag && (this.adaptive_ref_pic_marking_mode_flag = data.adaptive_ref_pic_marking_mode_flag), void 0 !== data.no_prior_references_available_flag && (this.no_prior_references_available_flag = data.no_prior_references_available_flag);
    }
    get direct_spatial_mv_pred_flag() {
        return this.#view.getUint32(0, LE);
    }
    set direct_spatial_mv_pred_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get num_ref_idx_active_override_flag() {
        return this.#view.getUint32(4, LE);
    }
    set num_ref_idx_active_override_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get no_output_of_prior_pics_flag() {
        return this.#view.getUint32(8, LE);
    }
    set no_output_of_prior_pics_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get adaptive_ref_pic_marking_mode_flag() {
        return this.#view.getUint32(12, LE);
    }
    set adaptive_ref_pic_marking_mode_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get no_prior_references_available_flag() {
        return this.#view.getUint32(16, LE);
    }
    set no_prior_references_available_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoEncodeH264PictureInfoFlags {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264PictureInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.idr_flag && (this.idr_flag = data.idr_flag), void 0 !== data.is_reference_flag && (this.is_reference_flag = data.is_reference_flag), void 0 !== data.used_for_long_term_reference && (this.used_for_long_term_reference = data.used_for_long_term_reference);
    }
    get idr_flag() {
        return this.#view.getUint32(0, LE);
    }
    set idr_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get is_reference_flag() {
        return this.#view.getUint32(4, LE);
    }
    set is_reference_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(8, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class StdVideoEncodeH264ReferenceInfoFlags {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264ReferenceInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.used_for_long_term_reference && (this.used_for_long_term_reference = data.used_for_long_term_reference);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefMgmtFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264RefMgmtFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264RefMgmtFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264RefMgmtFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264RefMgmtFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.ref_pic_list_modification_l0_flag && (this.ref_pic_list_modification_l0_flag = data.ref_pic_list_modification_l0_flag), void 0 !== data.ref_pic_list_modification_l1_flag && (this.ref_pic_list_modification_l1_flag = data.ref_pic_list_modification_l1_flag);
    }
    get ref_pic_list_modification_l0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set ref_pic_list_modification_l0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get ref_pic_list_modification_l1_flag() {
        return this.#view.getUint32(4, LE);
    }
    set ref_pic_list_modification_l1_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefListModEntry {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264RefListModEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264RefListModEntry.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264RefListModEntry.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264RefListModEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.modification_of_pic_nums_idc && (this.modification_of_pic_nums_idc = data.modification_of_pic_nums_idc), void 0 !== data.abs_diff_pic_num_minus1 && (this.abs_diff_pic_num_minus1 = data.abs_diff_pic_num_minus1), void 0 !== data.long_term_pic_num && (this.long_term_pic_num = data.long_term_pic_num);
    }
    get modification_of_pic_nums_idc() {
        return this.#view.getUint32(0, LE);
    }
    set modification_of_pic_nums_idc(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get abs_diff_pic_num_minus1() {
        return this.#view.getUint16(4, LE);
    }
    set abs_diff_pic_num_minus1(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(6, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefPicMarkingEntry {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264RefPicMarkingEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264RefPicMarkingEntry.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264RefPicMarkingEntry.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264RefPicMarkingEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.operation && (this.operation = data.operation), void 0 !== data.difference_of_pic_nums_minus1 && (this.difference_of_pic_nums_minus1 = data.difference_of_pic_nums_minus1), void 0 !== data.long_term_pic_num && (this.long_term_pic_num = data.long_term_pic_num), void 0 !== data.long_term_frame_idx && (this.long_term_frame_idx = data.long_term_frame_idx), void 0 !== data.max_long_term_frame_idx_plus1 && (this.max_long_term_frame_idx_plus1 = data.max_long_term_frame_idx_plus1);
    }
    get operation() {
        return this.#view.getUint32(0, LE);
    }
    set operation(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get difference_of_pic_nums_minus1() {
        return this.#view.getUint16(4, LE);
    }
    set difference_of_pic_nums_minus1(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(6, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
    get long_term_frame_idx() {
        return this.#view.getUint16(8, LE);
    }
    set long_term_frame_idx(value) {
        this.#view.setUint16(8, Number(value), LE);
    }
    get max_long_term_frame_idx_plus1() {
        return this.#view.getUint16(10, LE);
    }
    set max_long_term_frame_idx_plus1(value) {
        this.#view.setUint16(10, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefMemMgmtCtrlOperations {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264RefMemMgmtCtrlOperations.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264RefMemMgmtCtrlOperations.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264RefMemMgmtCtrlOperations.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264RefMemMgmtCtrlOperations.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.refList0ModOpCount && (this.refList0ModOpCount = data.refList0ModOpCount), void 0 !== data.pRefList0ModOperations && (this.pRefList0ModOperations = data.pRefList0ModOperations), void 0 !== data.refList1ModOpCount && (this.refList1ModOpCount = data.refList1ModOpCount), void 0 !== data.pRefList1ModOperations && (this.pRefList1ModOperations = data.pRefList1ModOperations), void 0 !== data.refPicMarkingOpCount && (this.refPicMarkingOpCount = data.refPicMarkingOpCount), void 0 !== data.pRefPicMarkingOperations && (this.pRefPicMarkingOperations = data.pRefPicMarkingOperations);
    }
    get flags() {
        return new StdVideoEncodeH264RefMgmtFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264RefMgmtFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264RefMgmtFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get refList0ModOpCount() {
        return this.#view.getUint8(8);
    }
    set refList0ModOpCount(value) {
        this.#view.setUint8(8, Number(value));
    }
    get pRefList0ModOperations() {
        return this.#view.getBigUint64(16, LE);
    }
    set pRefList0ModOperations(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get refList1ModOpCount() {
        return this.#view.getUint8(24);
    }
    set refList1ModOpCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pRefList1ModOperations() {
        return this.#view.getBigUint64(32, LE);
    }
    set pRefList1ModOperations(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get refPicMarkingOpCount() {
        return this.#view.getUint8(40);
    }
    set refPicMarkingOpCount(value) {
        this.#view.setUint8(40, Number(value));
    }
    get pRefPicMarkingOperations() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRefPicMarkingOperations(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoEncodeH264PictureInfo {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264PictureInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264PictureInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.seq_parameter_set_id && (this.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (this.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.pictureType && (this.pictureType = data.pictureType), void 0 !== data.frame_num && (this.frame_num = data.frame_num), void 0 !== data.PicOrderCnt && (this.PicOrderCnt = data.PicOrderCnt);
    }
    get flags() {
        return new StdVideoEncodeH264PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(12);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(12, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(13);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(13, Number(value));
    }
    get pictureType() {
        return this.#view.getUint32(16, LE);
    }
    set pictureType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get frame_num() {
        return this.#view.getUint32(20, LE);
    }
    set frame_num(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get PicOrderCnt() {
        return this.#view.getInt32(24, LE);
    }
    set PicOrderCnt(value) {
        this.#view.setInt32(24, Number(value), LE);
    }
}
export class StdVideoEncodeH264ReferenceInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264ReferenceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264ReferenceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.FrameNum && (this.FrameNum = data.FrameNum), void 0 !== data.PicOrderCnt && (this.PicOrderCnt = data.PicOrderCnt), void 0 !== data.long_term_pic_num && (this.long_term_pic_num = data.long_term_pic_num), void 0 !== data.long_term_frame_idx && (this.long_term_frame_idx = data.long_term_frame_idx);
    }
    get flags() {
        return new StdVideoEncodeH264ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get FrameNum() {
        return this.#view.getUint32(4, LE);
    }
    set FrameNum(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get PicOrderCnt() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCnt(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(12, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(12, Number(value), LE);
    }
    get long_term_frame_idx() {
        return this.#view.getUint16(14, LE);
    }
    set long_term_frame_idx(value) {
        this.#view.setUint16(14, Number(value), LE);
    }
}
export class StdVideoEncodeH264SliceHeader {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH264SliceHeader.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH264SliceHeader.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH264SliceHeader.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH264SliceHeader.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.first_mb_in_slice && (this.first_mb_in_slice = data.first_mb_in_slice), void 0 !== data.slice_type && (this.slice_type = data.slice_type), void 0 !== data.idr_pic_id && (this.idr_pic_id = data.idr_pic_id), void 0 !== data.num_ref_idx_l0_active_minus1 && (this.num_ref_idx_l0_active_minus1 = data.num_ref_idx_l0_active_minus1), void 0 !== data.num_ref_idx_l1_active_minus1 && (this.num_ref_idx_l1_active_minus1 = data.num_ref_idx_l1_active_minus1), void 0 !== data.cabac_init_idc && (this.cabac_init_idc = data.cabac_init_idc), void 0 !== data.disable_deblocking_filter_idc && (this.disable_deblocking_filter_idc = data.disable_deblocking_filter_idc), void 0 !== data.slice_alpha_c0_offset_div2 && (this.slice_alpha_c0_offset_div2 = data.slice_alpha_c0_offset_div2), void 0 !== data.slice_beta_offset_div2 && (this.slice_beta_offset_div2 = data.slice_beta_offset_div2), void 0 !== data.pWeightTable && (this.pWeightTable = data.pWeightTable);
    }
    get flags() {
        return new StdVideoEncodeH264SliceHeaderFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264SliceHeaderFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264SliceHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get first_mb_in_slice() {
        return this.#view.getUint32(20, LE);
    }
    set first_mb_in_slice(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get slice_type() {
        return this.#view.getUint32(24, LE);
    }
    set slice_type(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get idr_pic_id() {
        return this.#view.getUint16(28, LE);
    }
    set idr_pic_id(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
    get num_ref_idx_l0_active_minus1() {
        return this.#view.getUint8(30);
    }
    set num_ref_idx_l0_active_minus1(value) {
        this.#view.setUint8(30, Number(value));
    }
    get num_ref_idx_l1_active_minus1() {
        return this.#view.getUint8(31);
    }
    set num_ref_idx_l1_active_minus1(value) {
        this.#view.setUint8(31, Number(value));
    }
    get cabac_init_idc() {
        return this.#view.getUint32(32, LE);
    }
    set cabac_init_idc(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get disable_deblocking_filter_idc() {
        return this.#view.getUint32(36, LE);
    }
    set disable_deblocking_filter_idc(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get slice_alpha_c0_offset_div2() {
        return this.#view.getInt8(40);
    }
    set slice_alpha_c0_offset_div2(value) {
        this.#view.setInt8(40, Number(value));
    }
    get slice_beta_offset_div2() {
        return this.#view.getInt8(41);
    }
    set slice_beta_offset_div2(value) {
        this.#view.setInt8(41, Number(value));
    }
    get pWeightTable() {
        return this.#view.getBigUint64(48, LE);
    }
    set pWeightTable(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH265ProfileTierLevelFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265ProfileTierLevelFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265ProfileTierLevelFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265ProfileTierLevelFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265ProfileTierLevelFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.general_tier_flag && (this.general_tier_flag = data.general_tier_flag), void 0 !== data.general_progressive_source_flag && (this.general_progressive_source_flag = data.general_progressive_source_flag), void 0 !== data.general_interlaced_source_flag && (this.general_interlaced_source_flag = data.general_interlaced_source_flag), void 0 !== data.general_non_packed_constraint_flag && (this.general_non_packed_constraint_flag = data.general_non_packed_constraint_flag), void 0 !== data.general_frame_only_constraint_flag && (this.general_frame_only_constraint_flag = data.general_frame_only_constraint_flag);
    }
    get general_tier_flag() {
        return this.#view.getUint32(0, LE);
    }
    set general_tier_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get general_progressive_source_flag() {
        return this.#view.getUint32(4, LE);
    }
    set general_progressive_source_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get general_interlaced_source_flag() {
        return this.#view.getUint32(8, LE);
    }
    set general_interlaced_source_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get general_non_packed_constraint_flag() {
        return this.#view.getUint32(12, LE);
    }
    set general_non_packed_constraint_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get general_frame_only_constraint_flag() {
        return this.#view.getUint32(16, LE);
    }
    set general_frame_only_constraint_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoH265ProfileTierLevel {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265ProfileTierLevel.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265ProfileTierLevel.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265ProfileTierLevel.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265ProfileTierLevel.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.general_profile_idc && (this.general_profile_idc = data.general_profile_idc), void 0 !== data.general_level_idc && (this.general_level_idc = data.general_level_idc);
    }
    get flags() {
        return new StdVideoH265ProfileTierLevelFlags(this.#data.subarray(0, 0 + StdVideoH265ProfileTierLevelFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265ProfileTierLevelFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get general_profile_idc() {
        return this.#view.getUint32(20, LE);
    }
    set general_profile_idc(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get general_level_idc() {
        return this.#view.getUint32(24, LE);
    }
    set general_level_idc(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class StdVideoH265DecPicBufMgr {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265DecPicBufMgr.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265DecPicBufMgr.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265DecPicBufMgr.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265DecPicBufMgr.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.max_latency_increase_plus1 && (this.max_latency_increase_plus1 = data.max_latency_increase_plus1), void 0 !== data.max_dec_pic_buffering_minus1 && (this.max_dec_pic_buffering_minus1 = data.max_dec_pic_buffering_minus1), void 0 !== data.max_num_reorder_pics && (this.max_num_reorder_pics = data.max_num_reorder_pics);
    }
    get max_latency_increase_plus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 0, 7);
    }
    set max_latency_increase_plus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get max_dec_pic_buffering_minus1() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 28, 7);
    }
    set max_dec_pic_buffering_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 28);
    }
    get max_num_reorder_pics() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 35, 7);
    }
    set max_num_reorder_pics(value) {
        this.#data.set(new Uint8Array(value.buffer), 35);
    }
}
export class StdVideoH265SubLayerHrdParameters {
    static size = 516;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265SubLayerHrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265SubLayerHrdParameters.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265SubLayerHrdParameters.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265SubLayerHrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.bit_rate_value_minus1 && (this.bit_rate_value_minus1 = data.bit_rate_value_minus1), void 0 !== data.cpb_size_value_minus1 && (this.cpb_size_value_minus1 = data.cpb_size_value_minus1), void 0 !== data.cpb_size_du_value_minus1 && (this.cpb_size_du_value_minus1 = data.cpb_size_du_value_minus1), void 0 !== data.bit_rate_du_value_minus1 && (this.bit_rate_du_value_minus1 = data.bit_rate_du_value_minus1), void 0 !== data.cbr_flag && (this.cbr_flag = data.cbr_flag);
    }
    get bit_rate_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 0, 32);
    }
    set bit_rate_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get cpb_size_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 128, 32);
    }
    set cpb_size_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 128);
    }
    get cpb_size_du_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 256, 32);
    }
    set cpb_size_du_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 256);
    }
    get bit_rate_du_value_minus1() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 384, 32);
    }
    set bit_rate_du_value_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 384);
    }
    get cbr_flag() {
        return this.#view.getUint32(512, LE);
    }
    set cbr_flag(value) {
        this.#view.setUint32(512, Number(value), LE);
    }
}
export class StdVideoH265HrdFlags {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265HrdFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265HrdFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265HrdFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265HrdFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.nal_hrd_parameters_present_flag && (this.nal_hrd_parameters_present_flag = data.nal_hrd_parameters_present_flag), void 0 !== data.vcl_hrd_parameters_present_flag && (this.vcl_hrd_parameters_present_flag = data.vcl_hrd_parameters_present_flag), void 0 !== data.sub_pic_hrd_params_present_flag && (this.sub_pic_hrd_params_present_flag = data.sub_pic_hrd_params_present_flag), void 0 !== data.sub_pic_cpb_params_in_pic_timing_sei_flag && (this.sub_pic_cpb_params_in_pic_timing_sei_flag = data.sub_pic_cpb_params_in_pic_timing_sei_flag), void 0 !== data.fixed_pic_rate_general_flag && (this.fixed_pic_rate_general_flag = data.fixed_pic_rate_general_flag), void 0 !== data.fixed_pic_rate_within_cvs_flag && (this.fixed_pic_rate_within_cvs_flag = data.fixed_pic_rate_within_cvs_flag), void 0 !== data.low_delay_hrd_flag && (this.low_delay_hrd_flag = data.low_delay_hrd_flag);
    }
    get nal_hrd_parameters_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set nal_hrd_parameters_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vcl_hrd_parameters_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set vcl_hrd_parameters_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sub_pic_hrd_params_present_flag() {
        return this.#view.getUint32(8, LE);
    }
    set sub_pic_hrd_params_present_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get sub_pic_cpb_params_in_pic_timing_sei_flag() {
        return this.#view.getUint32(12, LE);
    }
    set sub_pic_cpb_params_in_pic_timing_sei_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get fixed_pic_rate_general_flag() {
        return this.#view.getUint32(16, LE);
    }
    set fixed_pic_rate_general_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fixed_pic_rate_within_cvs_flag() {
        return this.#view.getUint32(20, LE);
    }
    set fixed_pic_rate_within_cvs_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get low_delay_hrd_flag() {
        return this.#view.getUint32(24, LE);
    }
    set low_delay_hrd_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class StdVideoH265HrdParameters {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265HrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265HrdParameters.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265HrdParameters.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265HrdParameters.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.tick_divisor_minus2 && (this.tick_divisor_minus2 = data.tick_divisor_minus2), void 0 !== data.du_cpb_removal_delay_increment_length_minus1 && (this.du_cpb_removal_delay_increment_length_minus1 = data.du_cpb_removal_delay_increment_length_minus1), void 0 !== data.dpb_output_delay_du_length_minus1 && (this.dpb_output_delay_du_length_minus1 = data.dpb_output_delay_du_length_minus1), void 0 !== data.bit_rate_scale && (this.bit_rate_scale = data.bit_rate_scale), void 0 !== data.cpb_size_scale && (this.cpb_size_scale = data.cpb_size_scale), void 0 !== data.cpb_size_du_scale && (this.cpb_size_du_scale = data.cpb_size_du_scale), void 0 !== data.initial_cpb_removal_delay_length_minus1 && (this.initial_cpb_removal_delay_length_minus1 = data.initial_cpb_removal_delay_length_minus1), void 0 !== data.au_cpb_removal_delay_length_minus1 && (this.au_cpb_removal_delay_length_minus1 = data.au_cpb_removal_delay_length_minus1), void 0 !== data.dpb_output_delay_length_minus1 && (this.dpb_output_delay_length_minus1 = data.dpb_output_delay_length_minus1), void 0 !== data.cpb_cnt_minus1 && (this.cpb_cnt_minus1 = data.cpb_cnt_minus1), void 0 !== data.elemental_duration_in_tc_minus1 && (this.elemental_duration_in_tc_minus1 = data.elemental_duration_in_tc_minus1), void 0 !== data.reserved && (this.reserved = data.reserved), void 0 !== data.pSubLayerHrdParametersNal && (this.pSubLayerHrdParametersNal = data.pSubLayerHrdParametersNal), void 0 !== data.pSubLayerHrdParametersVcl && (this.pSubLayerHrdParametersVcl = data.pSubLayerHrdParametersVcl);
    }
    get flags() {
        return new StdVideoH265HrdFlags(this.#data.subarray(0, 0 + StdVideoH265HrdFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265HrdFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get tick_divisor_minus2() {
        return this.#view.getUint8(28);
    }
    set tick_divisor_minus2(value) {
        this.#view.setUint8(28, Number(value));
    }
    get du_cpb_removal_delay_increment_length_minus1() {
        return this.#view.getUint8(29);
    }
    set du_cpb_removal_delay_increment_length_minus1(value) {
        this.#view.setUint8(29, Number(value));
    }
    get dpb_output_delay_du_length_minus1() {
        return this.#view.getUint8(30);
    }
    set dpb_output_delay_du_length_minus1(value) {
        this.#view.setUint8(30, Number(value));
    }
    get bit_rate_scale() {
        return this.#view.getUint8(31);
    }
    set bit_rate_scale(value) {
        this.#view.setUint8(31, Number(value));
    }
    get cpb_size_scale() {
        return this.#view.getUint8(32);
    }
    set cpb_size_scale(value) {
        this.#view.setUint8(32, Number(value));
    }
    get cpb_size_du_scale() {
        return this.#view.getUint8(33);
    }
    set cpb_size_du_scale(value) {
        this.#view.setUint8(33, Number(value));
    }
    get initial_cpb_removal_delay_length_minus1() {
        return this.#view.getUint8(34);
    }
    set initial_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint8(34, Number(value));
    }
    get au_cpb_removal_delay_length_minus1() {
        return this.#view.getUint8(35);
    }
    set au_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint8(35, Number(value));
    }
    get dpb_output_delay_length_minus1() {
        return this.#view.getUint8(36);
    }
    set dpb_output_delay_length_minus1(value) {
        this.#view.setUint8(36, Number(value));
    }
    get cpb_cnt_minus1() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 37, 7);
    }
    set cpb_cnt_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 37);
    }
    get elemental_duration_in_tc_minus1() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 44, 7);
    }
    set elemental_duration_in_tc_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 44);
    }
    get reserved() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 58, 3);
    }
    set reserved(value) {
        this.#data.set(new Uint8Array(value.buffer), 58);
    }
    get pSubLayerHrdParametersNal() {
        return this.#view.getBigUint64(64, LE);
    }
    set pSubLayerHrdParametersNal(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get pSubLayerHrdParametersVcl() {
        return this.#view.getBigUint64(72, LE);
    }
    set pSubLayerHrdParametersVcl(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH265VpsFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265VpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265VpsFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265VpsFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265VpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.vps_temporal_id_nesting_flag && (this.vps_temporal_id_nesting_flag = data.vps_temporal_id_nesting_flag), void 0 !== data.vps_sub_layer_ordering_info_present_flag && (this.vps_sub_layer_ordering_info_present_flag = data.vps_sub_layer_ordering_info_present_flag), void 0 !== data.vps_timing_info_present_flag && (this.vps_timing_info_present_flag = data.vps_timing_info_present_flag), void 0 !== data.vps_poc_proportional_to_timing_flag && (this.vps_poc_proportional_to_timing_flag = data.vps_poc_proportional_to_timing_flag);
    }
    get vps_temporal_id_nesting_flag() {
        return this.#view.getUint32(0, LE);
    }
    set vps_temporal_id_nesting_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vps_sub_layer_ordering_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set vps_sub_layer_ordering_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vps_timing_info_present_flag() {
        return this.#view.getUint32(8, LE);
    }
    set vps_timing_info_present_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get vps_poc_proportional_to_timing_flag() {
        return this.#view.getUint32(12, LE);
    }
    set vps_poc_proportional_to_timing_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoH265VideoParameterSet {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265VideoParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265VideoParameterSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265VideoParameterSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265VideoParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.vps_video_parameter_set_id && (this.vps_video_parameter_set_id = data.vps_video_parameter_set_id), void 0 !== data.vps_max_sub_layers_minus1 && (this.vps_max_sub_layers_minus1 = data.vps_max_sub_layers_minus1), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.vps_num_units_in_tick && (this.vps_num_units_in_tick = data.vps_num_units_in_tick), void 0 !== data.vps_time_scale && (this.vps_time_scale = data.vps_time_scale), void 0 !== data.vps_num_ticks_poc_diff_one_minus1 && (this.vps_num_ticks_poc_diff_one_minus1 = data.vps_num_ticks_poc_diff_one_minus1), void 0 !== data.reserved3 && (this.reserved3 = data.reserved3), void 0 !== data.pDecPicBufMgr && (this.pDecPicBufMgr = data.pDecPicBufMgr), void 0 !== data.pHrdParameters && (this.pHrdParameters = data.pHrdParameters), void 0 !== data.pProfileTierLevel && (this.pProfileTierLevel = data.pProfileTierLevel);
    }
    get flags() {
        return new StdVideoH265VpsFlags(this.#data.subarray(0, 0 + StdVideoH265VpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265VpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get vps_video_parameter_set_id() {
        return this.#view.getUint8(16);
    }
    set vps_video_parameter_set_id(value) {
        this.#view.setUint8(16, Number(value));
    }
    get vps_max_sub_layers_minus1() {
        return this.#view.getUint8(17);
    }
    set vps_max_sub_layers_minus1(value) {
        this.#view.setUint8(17, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(18);
    }
    set reserved1(value) {
        this.#view.setUint8(18, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(19);
    }
    set reserved2(value) {
        this.#view.setUint8(19, Number(value));
    }
    get vps_num_units_in_tick() {
        return this.#view.getUint32(20, LE);
    }
    set vps_num_units_in_tick(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vps_time_scale() {
        return this.#view.getUint32(24, LE);
    }
    set vps_time_scale(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get vps_num_ticks_poc_diff_one_minus1() {
        return this.#view.getUint32(28, LE);
    }
    set vps_num_ticks_poc_diff_one_minus1(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get reserved3() {
        return this.#view.getUint32(32, LE);
    }
    set reserved3(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pDecPicBufMgr() {
        return this.#view.getBigUint64(40, LE);
    }
    set pDecPicBufMgr(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(48, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pProfileTierLevel() {
        return this.#view.getBigUint64(56, LE);
    }
    set pProfileTierLevel(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH265ScalingLists {
    static size = 1000;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265ScalingLists.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265ScalingLists.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265ScalingLists.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265ScalingLists.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.ScalingList4x4 && (this.ScalingList4x4 = data.ScalingList4x4), void 0 !== data.ScalingList8x8 && (this.ScalingList8x8 = data.ScalingList8x8), void 0 !== data.ScalingList16x16 && (this.ScalingList16x16 = data.ScalingList16x16), void 0 !== data.ScalingList32x32 && (this.ScalingList32x32 = data.ScalingList32x32), void 0 !== data.ScalingListDCCoef16x16 && (this.ScalingListDCCoef16x16 = data.ScalingListDCCoef16x16), void 0 !== data.ScalingListDCCoef32x32 && (this.ScalingListDCCoef32x32 = data.ScalingListDCCoef32x32);
    }
    get ScalingList4x4() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 0, 96);
    }
    set ScalingList4x4(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get ScalingList8x8() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 96, 384);
    }
    set ScalingList8x8(value) {
        this.#data.set(new Uint8Array(value.buffer), 96);
    }
    get ScalingList16x16() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 480, 384);
    }
    set ScalingList16x16(value) {
        this.#data.set(new Uint8Array(value.buffer), 480);
    }
    get ScalingList32x32() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 864, 128);
    }
    set ScalingList32x32(value) {
        this.#data.set(new Uint8Array(value.buffer), 864);
    }
    get ScalingListDCCoef16x16() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 992, 6);
    }
    set ScalingListDCCoef16x16(value) {
        this.#data.set(new Uint8Array(value.buffer), 992);
    }
    get ScalingListDCCoef32x32() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 998, 2);
    }
    set ScalingListDCCoef32x32(value) {
        this.#data.set(new Uint8Array(value.buffer), 998);
    }
}
export class StdVideoH265ShortTermRefPicSetFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265ShortTermRefPicSetFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265ShortTermRefPicSetFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265ShortTermRefPicSetFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265ShortTermRefPicSetFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.inter_ref_pic_set_prediction_flag && (this.inter_ref_pic_set_prediction_flag = data.inter_ref_pic_set_prediction_flag), void 0 !== data.delta_rps_sign && (this.delta_rps_sign = data.delta_rps_sign);
    }
    get inter_ref_pic_set_prediction_flag() {
        return this.#view.getUint32(0, LE);
    }
    set inter_ref_pic_set_prediction_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get delta_rps_sign() {
        return this.#view.getUint32(4, LE);
    }
    set delta_rps_sign(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoH265ShortTermRefPicSet {
    static size = 92;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265ShortTermRefPicSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265ShortTermRefPicSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265ShortTermRefPicSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265ShortTermRefPicSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.delta_idx_minus1 && (this.delta_idx_minus1 = data.delta_idx_minus1), void 0 !== data.use_delta_flag && (this.use_delta_flag = data.use_delta_flag), void 0 !== data.abs_delta_rps_minus1 && (this.abs_delta_rps_minus1 = data.abs_delta_rps_minus1), void 0 !== data.used_by_curr_pic_flag && (this.used_by_curr_pic_flag = data.used_by_curr_pic_flag), void 0 !== data.used_by_curr_pic_s0_flag && (this.used_by_curr_pic_s0_flag = data.used_by_curr_pic_s0_flag), void 0 !== data.used_by_curr_pic_s1_flag && (this.used_by_curr_pic_s1_flag = data.used_by_curr_pic_s1_flag), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.reserved3 && (this.reserved3 = data.reserved3), void 0 !== data.num_negative_pics && (this.num_negative_pics = data.num_negative_pics), void 0 !== data.num_positive_pics && (this.num_positive_pics = data.num_positive_pics), void 0 !== data.delta_poc_s0_minus1 && (this.delta_poc_s0_minus1 = data.delta_poc_s0_minus1), void 0 !== data.delta_poc_s1_minus1 && (this.delta_poc_s1_minus1 = data.delta_poc_s1_minus1);
    }
    get flags() {
        return new StdVideoH265ShortTermRefPicSetFlags(this.#data.subarray(0, 0 + StdVideoH265ShortTermRefPicSetFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265ShortTermRefPicSetFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get delta_idx_minus1() {
        return this.#view.getUint32(8, LE);
    }
    set delta_idx_minus1(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get use_delta_flag() {
        return this.#view.getUint16(12, LE);
    }
    set use_delta_flag(value) {
        this.#view.setUint16(12, Number(value), LE);
    }
    get abs_delta_rps_minus1() {
        return this.#view.getUint16(14, LE);
    }
    set abs_delta_rps_minus1(value) {
        this.#view.setUint16(14, Number(value), LE);
    }
    get used_by_curr_pic_flag() {
        return this.#view.getUint16(16, LE);
    }
    set used_by_curr_pic_flag(value) {
        this.#view.setUint16(16, Number(value), LE);
    }
    get used_by_curr_pic_s0_flag() {
        return this.#view.getUint16(18, LE);
    }
    set used_by_curr_pic_s0_flag(value) {
        this.#view.setUint16(18, Number(value), LE);
    }
    get used_by_curr_pic_s1_flag() {
        return this.#view.getUint16(20, LE);
    }
    set used_by_curr_pic_s1_flag(value) {
        this.#view.setUint16(20, Number(value), LE);
    }
    get reserved1() {
        return this.#view.getUint16(22, LE);
    }
    set reserved1(value) {
        this.#view.setUint16(22, Number(value), LE);
    }
    get reserved2() {
        return this.#view.getUint8(24);
    }
    set reserved2(value) {
        this.#view.setUint8(24, Number(value));
    }
    get reserved3() {
        return this.#view.getUint8(25);
    }
    set reserved3(value) {
        this.#view.setUint8(25, Number(value));
    }
    get num_negative_pics() {
        return this.#view.getUint8(26);
    }
    set num_negative_pics(value) {
        this.#view.setUint8(26, Number(value));
    }
    get num_positive_pics() {
        return this.#view.getUint8(27);
    }
    set num_positive_pics(value) {
        this.#view.setUint8(27, Number(value));
    }
    get delta_poc_s0_minus1() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 28, 16);
    }
    set delta_poc_s0_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 28);
    }
    get delta_poc_s1_minus1() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 60, 16);
    }
    set delta_poc_s1_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 60);
    }
}
export class StdVideoH265LongTermRefPicsSps {
    static size = 132;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265LongTermRefPicsSps.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265LongTermRefPicsSps.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265LongTermRefPicsSps.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265LongTermRefPicsSps.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.used_by_curr_pic_lt_sps_flag && (this.used_by_curr_pic_lt_sps_flag = data.used_by_curr_pic_lt_sps_flag), void 0 !== data.lt_ref_pic_poc_lsb_sps && (this.lt_ref_pic_poc_lsb_sps = data.lt_ref_pic_poc_lsb_sps);
    }
    get used_by_curr_pic_lt_sps_flag() {
        return this.#view.getUint32(0, LE);
    }
    set used_by_curr_pic_lt_sps_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get lt_ref_pic_poc_lsb_sps() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 4, 32);
    }
    set lt_ref_pic_poc_lsb_sps(value) {
        this.#data.set(new Uint8Array(value.buffer), 4);
    }
}
export class StdVideoH265SpsVuiFlags {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265SpsVuiFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265SpsVuiFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265SpsVuiFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265SpsVuiFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspect_ratio_info_present_flag && (this.aspect_ratio_info_present_flag = data.aspect_ratio_info_present_flag), void 0 !== data.overscan_info_present_flag && (this.overscan_info_present_flag = data.overscan_info_present_flag), void 0 !== data.overscan_appropriate_flag && (this.overscan_appropriate_flag = data.overscan_appropriate_flag), void 0 !== data.video_signal_type_present_flag && (this.video_signal_type_present_flag = data.video_signal_type_present_flag), void 0 !== data.video_full_range_flag && (this.video_full_range_flag = data.video_full_range_flag), void 0 !== data.colour_description_present_flag && (this.colour_description_present_flag = data.colour_description_present_flag), void 0 !== data.chroma_loc_info_present_flag && (this.chroma_loc_info_present_flag = data.chroma_loc_info_present_flag), void 0 !== data.neutral_chroma_indication_flag && (this.neutral_chroma_indication_flag = data.neutral_chroma_indication_flag), void 0 !== data.field_seq_flag && (this.field_seq_flag = data.field_seq_flag), void 0 !== data.frame_field_info_present_flag && (this.frame_field_info_present_flag = data.frame_field_info_present_flag), void 0 !== data.default_display_window_flag && (this.default_display_window_flag = data.default_display_window_flag), void 0 !== data.vui_timing_info_present_flag && (this.vui_timing_info_present_flag = data.vui_timing_info_present_flag), void 0 !== data.vui_poc_proportional_to_timing_flag && (this.vui_poc_proportional_to_timing_flag = data.vui_poc_proportional_to_timing_flag), void 0 !== data.vui_hrd_parameters_present_flag && (this.vui_hrd_parameters_present_flag = data.vui_hrd_parameters_present_flag), void 0 !== data.bitstream_restriction_flag && (this.bitstream_restriction_flag = data.bitstream_restriction_flag), void 0 !== data.tiles_fixed_structure_flag && (this.tiles_fixed_structure_flag = data.tiles_fixed_structure_flag), void 0 !== data.motion_vectors_over_pic_boundaries_flag && (this.motion_vectors_over_pic_boundaries_flag = data.motion_vectors_over_pic_boundaries_flag), void 0 !== data.restricted_ref_pic_lists_flag && (this.restricted_ref_pic_lists_flag = data.restricted_ref_pic_lists_flag);
    }
    get aspect_ratio_info_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set aspect_ratio_info_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get overscan_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set overscan_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get overscan_appropriate_flag() {
        return this.#view.getUint32(8, LE);
    }
    set overscan_appropriate_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get video_signal_type_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set video_signal_type_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get video_full_range_flag() {
        return this.#view.getUint32(16, LE);
    }
    set video_full_range_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get colour_description_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set colour_description_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get chroma_loc_info_present_flag() {
        return this.#view.getUint32(24, LE);
    }
    set chroma_loc_info_present_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get neutral_chroma_indication_flag() {
        return this.#view.getUint32(28, LE);
    }
    set neutral_chroma_indication_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get field_seq_flag() {
        return this.#view.getUint32(32, LE);
    }
    set field_seq_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get frame_field_info_present_flag() {
        return this.#view.getUint32(36, LE);
    }
    set frame_field_info_present_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get default_display_window_flag() {
        return this.#view.getUint32(40, LE);
    }
    set default_display_window_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get vui_timing_info_present_flag() {
        return this.#view.getUint32(44, LE);
    }
    set vui_timing_info_present_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get vui_poc_proportional_to_timing_flag() {
        return this.#view.getUint32(48, LE);
    }
    set vui_poc_proportional_to_timing_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get vui_hrd_parameters_present_flag() {
        return this.#view.getUint32(52, LE);
    }
    set vui_hrd_parameters_present_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get bitstream_restriction_flag() {
        return this.#view.getUint32(56, LE);
    }
    set bitstream_restriction_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get tiles_fixed_structure_flag() {
        return this.#view.getUint32(60, LE);
    }
    set tiles_fixed_structure_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get motion_vectors_over_pic_boundaries_flag() {
        return this.#view.getUint32(64, LE);
    }
    set motion_vectors_over_pic_boundaries_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get restricted_ref_pic_lists_flag() {
        return this.#view.getUint32(68, LE);
    }
    set restricted_ref_pic_lists_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class StdVideoH265SequenceParameterSetVui {
    static size = 128;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265SequenceParameterSetVui.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265SequenceParameterSetVui.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265SequenceParameterSetVui.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265SequenceParameterSetVui.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.aspect_ratio_idc && (this.aspect_ratio_idc = data.aspect_ratio_idc), void 0 !== data.sar_width && (this.sar_width = data.sar_width), void 0 !== data.sar_height && (this.sar_height = data.sar_height), void 0 !== data.video_format && (this.video_format = data.video_format), void 0 !== data.colour_primaries && (this.colour_primaries = data.colour_primaries), void 0 !== data.transfer_characteristics && (this.transfer_characteristics = data.transfer_characteristics), void 0 !== data.matrix_coeffs && (this.matrix_coeffs = data.matrix_coeffs), void 0 !== data.chroma_sample_loc_type_top_field && (this.chroma_sample_loc_type_top_field = data.chroma_sample_loc_type_top_field), void 0 !== data.chroma_sample_loc_type_bottom_field && (this.chroma_sample_loc_type_bottom_field = data.chroma_sample_loc_type_bottom_field), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.def_disp_win_left_offset && (this.def_disp_win_left_offset = data.def_disp_win_left_offset), void 0 !== data.def_disp_win_right_offset && (this.def_disp_win_right_offset = data.def_disp_win_right_offset), void 0 !== data.def_disp_win_top_offset && (this.def_disp_win_top_offset = data.def_disp_win_top_offset), void 0 !== data.def_disp_win_bottom_offset && (this.def_disp_win_bottom_offset = data.def_disp_win_bottom_offset), void 0 !== data.vui_num_units_in_tick && (this.vui_num_units_in_tick = data.vui_num_units_in_tick), void 0 !== data.vui_time_scale && (this.vui_time_scale = data.vui_time_scale), void 0 !== data.vui_num_ticks_poc_diff_one_minus1 && (this.vui_num_ticks_poc_diff_one_minus1 = data.vui_num_ticks_poc_diff_one_minus1), void 0 !== data.min_spatial_segmentation_idc && (this.min_spatial_segmentation_idc = data.min_spatial_segmentation_idc), void 0 !== data.reserved3 && (this.reserved3 = data.reserved3), void 0 !== data.max_bytes_per_pic_denom && (this.max_bytes_per_pic_denom = data.max_bytes_per_pic_denom), void 0 !== data.max_bits_per_min_cu_denom && (this.max_bits_per_min_cu_denom = data.max_bits_per_min_cu_denom), void 0 !== data.log2_max_mv_length_horizontal && (this.log2_max_mv_length_horizontal = data.log2_max_mv_length_horizontal), void 0 !== data.log2_max_mv_length_vertical && (this.log2_max_mv_length_vertical = data.log2_max_mv_length_vertical), void 0 !== data.pHrdParameters && (this.pHrdParameters = data.pHrdParameters);
    }
    get flags() {
        return new StdVideoH265SpsVuiFlags(this.#data.subarray(0, 0 + StdVideoH265SpsVuiFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aspect_ratio_idc() {
        return this.#view.getUint32(72, LE);
    }
    set aspect_ratio_idc(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get sar_width() {
        return this.#view.getUint16(76, LE);
    }
    set sar_width(value) {
        this.#view.setUint16(76, Number(value), LE);
    }
    get sar_height() {
        return this.#view.getUint16(78, LE);
    }
    set sar_height(value) {
        this.#view.setUint16(78, Number(value), LE);
    }
    get video_format() {
        return this.#view.getUint8(80);
    }
    set video_format(value) {
        this.#view.setUint8(80, Number(value));
    }
    get colour_primaries() {
        return this.#view.getUint8(81);
    }
    set colour_primaries(value) {
        this.#view.setUint8(81, Number(value));
    }
    get transfer_characteristics() {
        return this.#view.getUint8(82);
    }
    set transfer_characteristics(value) {
        this.#view.setUint8(82, Number(value));
    }
    get matrix_coeffs() {
        return this.#view.getUint8(83);
    }
    set matrix_coeffs(value) {
        this.#view.setUint8(83, Number(value));
    }
    get chroma_sample_loc_type_top_field() {
        return this.#view.getUint8(84);
    }
    set chroma_sample_loc_type_top_field(value) {
        this.#view.setUint8(84, Number(value));
    }
    get chroma_sample_loc_type_bottom_field() {
        return this.#view.getUint8(85);
    }
    set chroma_sample_loc_type_bottom_field(value) {
        this.#view.setUint8(85, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(86);
    }
    set reserved1(value) {
        this.#view.setUint8(86, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(87);
    }
    set reserved2(value) {
        this.#view.setUint8(87, Number(value));
    }
    get def_disp_win_left_offset() {
        return this.#view.getUint16(88, LE);
    }
    set def_disp_win_left_offset(value) {
        this.#view.setUint16(88, Number(value), LE);
    }
    get def_disp_win_right_offset() {
        return this.#view.getUint16(90, LE);
    }
    set def_disp_win_right_offset(value) {
        this.#view.setUint16(90, Number(value), LE);
    }
    get def_disp_win_top_offset() {
        return this.#view.getUint16(92, LE);
    }
    set def_disp_win_top_offset(value) {
        this.#view.setUint16(92, Number(value), LE);
    }
    get def_disp_win_bottom_offset() {
        return this.#view.getUint16(94, LE);
    }
    set def_disp_win_bottom_offset(value) {
        this.#view.setUint16(94, Number(value), LE);
    }
    get vui_num_units_in_tick() {
        return this.#view.getUint32(96, LE);
    }
    set vui_num_units_in_tick(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get vui_time_scale() {
        return this.#view.getUint32(100, LE);
    }
    set vui_time_scale(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get vui_num_ticks_poc_diff_one_minus1() {
        return this.#view.getUint32(104, LE);
    }
    set vui_num_ticks_poc_diff_one_minus1(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get min_spatial_segmentation_idc() {
        return this.#view.getUint16(108, LE);
    }
    set min_spatial_segmentation_idc(value) {
        this.#view.setUint16(108, Number(value), LE);
    }
    get reserved3() {
        return this.#view.getUint16(110, LE);
    }
    set reserved3(value) {
        this.#view.setUint16(110, Number(value), LE);
    }
    get max_bytes_per_pic_denom() {
        return this.#view.getUint8(112);
    }
    set max_bytes_per_pic_denom(value) {
        this.#view.setUint8(112, Number(value));
    }
    get max_bits_per_min_cu_denom() {
        return this.#view.getUint8(113);
    }
    set max_bits_per_min_cu_denom(value) {
        this.#view.setUint8(113, Number(value));
    }
    get log2_max_mv_length_horizontal() {
        return this.#view.getUint8(114);
    }
    set log2_max_mv_length_horizontal(value) {
        this.#view.setUint8(114, Number(value));
    }
    get log2_max_mv_length_vertical() {
        return this.#view.getUint8(115);
    }
    set log2_max_mv_length_vertical(value) {
        this.#view.setUint8(115, Number(value));
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(120, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(120, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH265PredictorPaletteEntries {
    static size = 768;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265PredictorPaletteEntries.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265PredictorPaletteEntries.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265PredictorPaletteEntries.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265PredictorPaletteEntries.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.PredictorPaletteEntries && (this.PredictorPaletteEntries = data.PredictorPaletteEntries);
    }
    get PredictorPaletteEntries() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 0, 384);
    }
    set PredictorPaletteEntries(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
}
export class StdVideoH265SpsFlags {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265SpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265SpsFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265SpsFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265SpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.sps_temporal_id_nesting_flag && (this.sps_temporal_id_nesting_flag = data.sps_temporal_id_nesting_flag), void 0 !== data.separate_colour_plane_flag && (this.separate_colour_plane_flag = data.separate_colour_plane_flag), void 0 !== data.conformance_window_flag && (this.conformance_window_flag = data.conformance_window_flag), void 0 !== data.sps_sub_layer_ordering_info_present_flag && (this.sps_sub_layer_ordering_info_present_flag = data.sps_sub_layer_ordering_info_present_flag), void 0 !== data.scaling_list_enabled_flag && (this.scaling_list_enabled_flag = data.scaling_list_enabled_flag), void 0 !== data.sps_scaling_list_data_present_flag && (this.sps_scaling_list_data_present_flag = data.sps_scaling_list_data_present_flag), void 0 !== data.amp_enabled_flag && (this.amp_enabled_flag = data.amp_enabled_flag), void 0 !== data.sample_adaptive_offset_enabled_flag && (this.sample_adaptive_offset_enabled_flag = data.sample_adaptive_offset_enabled_flag), void 0 !== data.pcm_enabled_flag && (this.pcm_enabled_flag = data.pcm_enabled_flag), void 0 !== data.pcm_loop_filter_disabled_flag && (this.pcm_loop_filter_disabled_flag = data.pcm_loop_filter_disabled_flag), void 0 !== data.long_term_ref_pics_present_flag && (this.long_term_ref_pics_present_flag = data.long_term_ref_pics_present_flag), void 0 !== data.sps_temporal_mvp_enabled_flag && (this.sps_temporal_mvp_enabled_flag = data.sps_temporal_mvp_enabled_flag), void 0 !== data.strong_intra_smoothing_enabled_flag && (this.strong_intra_smoothing_enabled_flag = data.strong_intra_smoothing_enabled_flag), void 0 !== data.vui_parameters_present_flag && (this.vui_parameters_present_flag = data.vui_parameters_present_flag), void 0 !== data.sps_extension_present_flag && (this.sps_extension_present_flag = data.sps_extension_present_flag), void 0 !== data.sps_range_extension_flag && (this.sps_range_extension_flag = data.sps_range_extension_flag), void 0 !== data.transform_skip_rotation_enabled_flag && (this.transform_skip_rotation_enabled_flag = data.transform_skip_rotation_enabled_flag), void 0 !== data.transform_skip_context_enabled_flag && (this.transform_skip_context_enabled_flag = data.transform_skip_context_enabled_flag), void 0 !== data.implicit_rdpcm_enabled_flag && (this.implicit_rdpcm_enabled_flag = data.implicit_rdpcm_enabled_flag), void 0 !== data.explicit_rdpcm_enabled_flag && (this.explicit_rdpcm_enabled_flag = data.explicit_rdpcm_enabled_flag), void 0 !== data.extended_precision_processing_flag && (this.extended_precision_processing_flag = data.extended_precision_processing_flag), void 0 !== data.intra_smoothing_disabled_flag && (this.intra_smoothing_disabled_flag = data.intra_smoothing_disabled_flag), void 0 !== data.high_precision_offsets_enabled_flag && (this.high_precision_offsets_enabled_flag = data.high_precision_offsets_enabled_flag), void 0 !== data.persistent_rice_adaptation_enabled_flag && (this.persistent_rice_adaptation_enabled_flag = data.persistent_rice_adaptation_enabled_flag), void 0 !== data.cabac_bypass_alignment_enabled_flag && (this.cabac_bypass_alignment_enabled_flag = data.cabac_bypass_alignment_enabled_flag), void 0 !== data.sps_scc_extension_flag && (this.sps_scc_extension_flag = data.sps_scc_extension_flag), void 0 !== data.sps_curr_pic_ref_enabled_flag && (this.sps_curr_pic_ref_enabled_flag = data.sps_curr_pic_ref_enabled_flag), void 0 !== data.palette_mode_enabled_flag && (this.palette_mode_enabled_flag = data.palette_mode_enabled_flag), void 0 !== data.sps_palette_predictor_initializers_present_flag && (this.sps_palette_predictor_initializers_present_flag = data.sps_palette_predictor_initializers_present_flag), void 0 !== data.intra_boundary_filtering_disabled_flag && (this.intra_boundary_filtering_disabled_flag = data.intra_boundary_filtering_disabled_flag);
    }
    get sps_temporal_id_nesting_flag() {
        return this.#view.getUint32(0, LE);
    }
    set sps_temporal_id_nesting_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get separate_colour_plane_flag() {
        return this.#view.getUint32(4, LE);
    }
    set separate_colour_plane_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get conformance_window_flag() {
        return this.#view.getUint32(8, LE);
    }
    set conformance_window_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get sps_sub_layer_ordering_info_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set sps_sub_layer_ordering_info_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get scaling_list_enabled_flag() {
        return this.#view.getUint32(16, LE);
    }
    set scaling_list_enabled_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sps_scaling_list_data_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set sps_scaling_list_data_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get amp_enabled_flag() {
        return this.#view.getUint32(24, LE);
    }
    set amp_enabled_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sample_adaptive_offset_enabled_flag() {
        return this.#view.getUint32(28, LE);
    }
    set sample_adaptive_offset_enabled_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pcm_enabled_flag() {
        return this.#view.getUint32(32, LE);
    }
    set pcm_enabled_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pcm_loop_filter_disabled_flag() {
        return this.#view.getUint32(36, LE);
    }
    set pcm_loop_filter_disabled_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get long_term_ref_pics_present_flag() {
        return this.#view.getUint32(40, LE);
    }
    set long_term_ref_pics_present_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get sps_temporal_mvp_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set sps_temporal_mvp_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get strong_intra_smoothing_enabled_flag() {
        return this.#view.getUint32(48, LE);
    }
    set strong_intra_smoothing_enabled_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get vui_parameters_present_flag() {
        return this.#view.getUint32(52, LE);
    }
    set vui_parameters_present_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get sps_extension_present_flag() {
        return this.#view.getUint32(56, LE);
    }
    set sps_extension_present_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sps_range_extension_flag() {
        return this.#view.getUint32(60, LE);
    }
    set sps_range_extension_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get transform_skip_rotation_enabled_flag() {
        return this.#view.getUint32(64, LE);
    }
    set transform_skip_rotation_enabled_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get transform_skip_context_enabled_flag() {
        return this.#view.getUint32(68, LE);
    }
    set transform_skip_context_enabled_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get implicit_rdpcm_enabled_flag() {
        return this.#view.getUint32(72, LE);
    }
    set implicit_rdpcm_enabled_flag(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get explicit_rdpcm_enabled_flag() {
        return this.#view.getUint32(76, LE);
    }
    set explicit_rdpcm_enabled_flag(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get extended_precision_processing_flag() {
        return this.#view.getUint32(80, LE);
    }
    set extended_precision_processing_flag(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get intra_smoothing_disabled_flag() {
        return this.#view.getUint32(84, LE);
    }
    set intra_smoothing_disabled_flag(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get high_precision_offsets_enabled_flag() {
        return this.#view.getUint32(88, LE);
    }
    set high_precision_offsets_enabled_flag(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get persistent_rice_adaptation_enabled_flag() {
        return this.#view.getUint32(92, LE);
    }
    set persistent_rice_adaptation_enabled_flag(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get cabac_bypass_alignment_enabled_flag() {
        return this.#view.getUint32(96, LE);
    }
    set cabac_bypass_alignment_enabled_flag(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get sps_scc_extension_flag() {
        return this.#view.getUint32(100, LE);
    }
    set sps_scc_extension_flag(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get sps_curr_pic_ref_enabled_flag() {
        return this.#view.getUint32(104, LE);
    }
    set sps_curr_pic_ref_enabled_flag(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get palette_mode_enabled_flag() {
        return this.#view.getUint32(108, LE);
    }
    set palette_mode_enabled_flag(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get sps_palette_predictor_initializers_present_flag() {
        return this.#view.getUint32(112, LE);
    }
    set sps_palette_predictor_initializers_present_flag(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get intra_boundary_filtering_disabled_flag() {
        return this.#view.getUint32(116, LE);
    }
    set intra_boundary_filtering_disabled_flag(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
}
export class StdVideoH265SequenceParameterSet {
    static size = 232;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265SequenceParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265SequenceParameterSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265SequenceParameterSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265SequenceParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.chroma_format_idc && (this.chroma_format_idc = data.chroma_format_idc), void 0 !== data.pic_width_in_luma_samples && (this.pic_width_in_luma_samples = data.pic_width_in_luma_samples), void 0 !== data.pic_height_in_luma_samples && (this.pic_height_in_luma_samples = data.pic_height_in_luma_samples), void 0 !== data.sps_video_parameter_set_id && (this.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.sps_max_sub_layers_minus1 && (this.sps_max_sub_layers_minus1 = data.sps_max_sub_layers_minus1), void 0 !== data.sps_seq_parameter_set_id && (this.sps_seq_parameter_set_id = data.sps_seq_parameter_set_id), void 0 !== data.bit_depth_luma_minus8 && (this.bit_depth_luma_minus8 = data.bit_depth_luma_minus8), void 0 !== data.bit_depth_chroma_minus8 && (this.bit_depth_chroma_minus8 = data.bit_depth_chroma_minus8), void 0 !== data.log2_max_pic_order_cnt_lsb_minus4 && (this.log2_max_pic_order_cnt_lsb_minus4 = data.log2_max_pic_order_cnt_lsb_minus4), void 0 !== data.log2_min_luma_coding_block_size_minus3 && (this.log2_min_luma_coding_block_size_minus3 = data.log2_min_luma_coding_block_size_minus3), void 0 !== data.log2_diff_max_min_luma_coding_block_size && (this.log2_diff_max_min_luma_coding_block_size = data.log2_diff_max_min_luma_coding_block_size), void 0 !== data.log2_min_luma_transform_block_size_minus2 && (this.log2_min_luma_transform_block_size_minus2 = data.log2_min_luma_transform_block_size_minus2), void 0 !== data.log2_diff_max_min_luma_transform_block_size && (this.log2_diff_max_min_luma_transform_block_size = data.log2_diff_max_min_luma_transform_block_size), void 0 !== data.max_transform_hierarchy_depth_inter && (this.max_transform_hierarchy_depth_inter = data.max_transform_hierarchy_depth_inter), void 0 !== data.max_transform_hierarchy_depth_intra && (this.max_transform_hierarchy_depth_intra = data.max_transform_hierarchy_depth_intra), void 0 !== data.num_short_term_ref_pic_sets && (this.num_short_term_ref_pic_sets = data.num_short_term_ref_pic_sets), void 0 !== data.num_long_term_ref_pics_sps && (this.num_long_term_ref_pics_sps = data.num_long_term_ref_pics_sps), void 0 !== data.pcm_sample_bit_depth_luma_minus1 && (this.pcm_sample_bit_depth_luma_minus1 = data.pcm_sample_bit_depth_luma_minus1), void 0 !== data.pcm_sample_bit_depth_chroma_minus1 && (this.pcm_sample_bit_depth_chroma_minus1 = data.pcm_sample_bit_depth_chroma_minus1), void 0 !== data.log2_min_pcm_luma_coding_block_size_minus3 && (this.log2_min_pcm_luma_coding_block_size_minus3 = data.log2_min_pcm_luma_coding_block_size_minus3), void 0 !== data.log2_diff_max_min_pcm_luma_coding_block_size && (this.log2_diff_max_min_pcm_luma_coding_block_size = data.log2_diff_max_min_pcm_luma_coding_block_size), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.palette_max_size && (this.palette_max_size = data.palette_max_size), void 0 !== data.delta_palette_max_predictor_size && (this.delta_palette_max_predictor_size = data.delta_palette_max_predictor_size), void 0 !== data.motion_vector_resolution_control_idc && (this.motion_vector_resolution_control_idc = data.motion_vector_resolution_control_idc), void 0 !== data.sps_num_palette_predictor_initializers_minus1 && (this.sps_num_palette_predictor_initializers_minus1 = data.sps_num_palette_predictor_initializers_minus1), void 0 !== data.conf_win_left_offset && (this.conf_win_left_offset = data.conf_win_left_offset), void 0 !== data.conf_win_right_offset && (this.conf_win_right_offset = data.conf_win_right_offset), void 0 !== data.conf_win_top_offset && (this.conf_win_top_offset = data.conf_win_top_offset), void 0 !== data.conf_win_bottom_offset && (this.conf_win_bottom_offset = data.conf_win_bottom_offset), void 0 !== data.pProfileTierLevel && (this.pProfileTierLevel = data.pProfileTierLevel), void 0 !== data.pDecPicBufMgr && (this.pDecPicBufMgr = data.pDecPicBufMgr), void 0 !== data.pScalingLists && (this.pScalingLists = data.pScalingLists), void 0 !== data.pShortTermRefPicSet && (this.pShortTermRefPicSet = data.pShortTermRefPicSet), void 0 !== data.pLongTermRefPicsSps && (this.pLongTermRefPicsSps = data.pLongTermRefPicsSps), void 0 !== data.pSequenceParameterSetVui && (this.pSequenceParameterSetVui = data.pSequenceParameterSetVui), void 0 !== data.pPredictorPaletteEntries && (this.pPredictorPaletteEntries = data.pPredictorPaletteEntries);
    }
    get flags() {
        return new StdVideoH265SpsFlags(this.#data.subarray(0, 0 + StdVideoH265SpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265SpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get chroma_format_idc() {
        return this.#view.getUint32(120, LE);
    }
    set chroma_format_idc(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pic_width_in_luma_samples() {
        return this.#view.getUint32(124, LE);
    }
    set pic_width_in_luma_samples(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get pic_height_in_luma_samples() {
        return this.#view.getUint32(128, LE);
    }
    set pic_height_in_luma_samples(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(132);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(132, Number(value));
    }
    get sps_max_sub_layers_minus1() {
        return this.#view.getUint8(133);
    }
    set sps_max_sub_layers_minus1(value) {
        this.#view.setUint8(133, Number(value));
    }
    get sps_seq_parameter_set_id() {
        return this.#view.getUint8(134);
    }
    set sps_seq_parameter_set_id(value) {
        this.#view.setUint8(134, Number(value));
    }
    get bit_depth_luma_minus8() {
        return this.#view.getUint8(135);
    }
    set bit_depth_luma_minus8(value) {
        this.#view.setUint8(135, Number(value));
    }
    get bit_depth_chroma_minus8() {
        return this.#view.getUint8(136);
    }
    set bit_depth_chroma_minus8(value) {
        this.#view.setUint8(136, Number(value));
    }
    get log2_max_pic_order_cnt_lsb_minus4() {
        return this.#view.getUint8(137);
    }
    set log2_max_pic_order_cnt_lsb_minus4(value) {
        this.#view.setUint8(137, Number(value));
    }
    get log2_min_luma_coding_block_size_minus3() {
        return this.#view.getUint8(138);
    }
    set log2_min_luma_coding_block_size_minus3(value) {
        this.#view.setUint8(138, Number(value));
    }
    get log2_diff_max_min_luma_coding_block_size() {
        return this.#view.getUint8(139);
    }
    set log2_diff_max_min_luma_coding_block_size(value) {
        this.#view.setUint8(139, Number(value));
    }
    get log2_min_luma_transform_block_size_minus2() {
        return this.#view.getUint8(140);
    }
    set log2_min_luma_transform_block_size_minus2(value) {
        this.#view.setUint8(140, Number(value));
    }
    get log2_diff_max_min_luma_transform_block_size() {
        return this.#view.getUint8(141);
    }
    set log2_diff_max_min_luma_transform_block_size(value) {
        this.#view.setUint8(141, Number(value));
    }
    get max_transform_hierarchy_depth_inter() {
        return this.#view.getUint8(142);
    }
    set max_transform_hierarchy_depth_inter(value) {
        this.#view.setUint8(142, Number(value));
    }
    get max_transform_hierarchy_depth_intra() {
        return this.#view.getUint8(143);
    }
    set max_transform_hierarchy_depth_intra(value) {
        this.#view.setUint8(143, Number(value));
    }
    get num_short_term_ref_pic_sets() {
        return this.#view.getUint8(144);
    }
    set num_short_term_ref_pic_sets(value) {
        this.#view.setUint8(144, Number(value));
    }
    get num_long_term_ref_pics_sps() {
        return this.#view.getUint8(145);
    }
    set num_long_term_ref_pics_sps(value) {
        this.#view.setUint8(145, Number(value));
    }
    get pcm_sample_bit_depth_luma_minus1() {
        return this.#view.getUint8(146);
    }
    set pcm_sample_bit_depth_luma_minus1(value) {
        this.#view.setUint8(146, Number(value));
    }
    get pcm_sample_bit_depth_chroma_minus1() {
        return this.#view.getUint8(147);
    }
    set pcm_sample_bit_depth_chroma_minus1(value) {
        this.#view.setUint8(147, Number(value));
    }
    get log2_min_pcm_luma_coding_block_size_minus3() {
        return this.#view.getUint8(148);
    }
    set log2_min_pcm_luma_coding_block_size_minus3(value) {
        this.#view.setUint8(148, Number(value));
    }
    get log2_diff_max_min_pcm_luma_coding_block_size() {
        return this.#view.getUint8(149);
    }
    set log2_diff_max_min_pcm_luma_coding_block_size(value) {
        this.#view.setUint8(149, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(150);
    }
    set reserved1(value) {
        this.#view.setUint8(150, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(151);
    }
    set reserved2(value) {
        this.#view.setUint8(151, Number(value));
    }
    get palette_max_size() {
        return this.#view.getUint8(152);
    }
    set palette_max_size(value) {
        this.#view.setUint8(152, Number(value));
    }
    get delta_palette_max_predictor_size() {
        return this.#view.getUint8(153);
    }
    set delta_palette_max_predictor_size(value) {
        this.#view.setUint8(153, Number(value));
    }
    get motion_vector_resolution_control_idc() {
        return this.#view.getUint8(154);
    }
    set motion_vector_resolution_control_idc(value) {
        this.#view.setUint8(154, Number(value));
    }
    get sps_num_palette_predictor_initializers_minus1() {
        return this.#view.getUint8(155);
    }
    set sps_num_palette_predictor_initializers_minus1(value) {
        this.#view.setUint8(155, Number(value));
    }
    get conf_win_left_offset() {
        return this.#view.getUint32(156, LE);
    }
    set conf_win_left_offset(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get conf_win_right_offset() {
        return this.#view.getUint32(160, LE);
    }
    set conf_win_right_offset(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get conf_win_top_offset() {
        return this.#view.getUint32(164, LE);
    }
    set conf_win_top_offset(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get conf_win_bottom_offset() {
        return this.#view.getUint32(168, LE);
    }
    set conf_win_bottom_offset(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get pProfileTierLevel() {
        return this.#view.getBigUint64(176, LE);
    }
    set pProfileTierLevel(value) {
        this.#view.setBigUint64(176, BigInt(anyPointer(value)), LE);
    }
    get pDecPicBufMgr() {
        return this.#view.getBigUint64(184, LE);
    }
    set pDecPicBufMgr(value) {
        this.#view.setBigUint64(184, BigInt(anyPointer(value)), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(192, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(192, BigInt(anyPointer(value)), LE);
    }
    get pShortTermRefPicSet() {
        return this.#view.getBigUint64(200, LE);
    }
    set pShortTermRefPicSet(value) {
        this.#view.setBigUint64(200, BigInt(anyPointer(value)), LE);
    }
    get pLongTermRefPicsSps() {
        return this.#view.getBigUint64(208, LE);
    }
    set pLongTermRefPicsSps(value) {
        this.#view.setBigUint64(208, BigInt(anyPointer(value)), LE);
    }
    get pSequenceParameterSetVui() {
        return this.#view.getBigUint64(216, LE);
    }
    set pSequenceParameterSetVui(value) {
        this.#view.setBigUint64(216, BigInt(anyPointer(value)), LE);
    }
    get pPredictorPaletteEntries() {
        return this.#view.getBigUint64(224, LE);
    }
    set pPredictorPaletteEntries(value) {
        this.#view.setBigUint64(224, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoH265PpsFlags {
    static size = 124;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265PpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265PpsFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265PpsFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265PpsFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.dependent_slice_segments_enabled_flag && (this.dependent_slice_segments_enabled_flag = data.dependent_slice_segments_enabled_flag), void 0 !== data.output_flag_present_flag && (this.output_flag_present_flag = data.output_flag_present_flag), void 0 !== data.sign_data_hiding_enabled_flag && (this.sign_data_hiding_enabled_flag = data.sign_data_hiding_enabled_flag), void 0 !== data.cabac_init_present_flag && (this.cabac_init_present_flag = data.cabac_init_present_flag), void 0 !== data.constrained_intra_pred_flag && (this.constrained_intra_pred_flag = data.constrained_intra_pred_flag), void 0 !== data.transform_skip_enabled_flag && (this.transform_skip_enabled_flag = data.transform_skip_enabled_flag), void 0 !== data.cu_qp_delta_enabled_flag && (this.cu_qp_delta_enabled_flag = data.cu_qp_delta_enabled_flag), void 0 !== data.pps_slice_chroma_qp_offsets_present_flag && (this.pps_slice_chroma_qp_offsets_present_flag = data.pps_slice_chroma_qp_offsets_present_flag), void 0 !== data.weighted_pred_flag && (this.weighted_pred_flag = data.weighted_pred_flag), void 0 !== data.weighted_bipred_flag && (this.weighted_bipred_flag = data.weighted_bipred_flag), void 0 !== data.transquant_bypass_enabled_flag && (this.transquant_bypass_enabled_flag = data.transquant_bypass_enabled_flag), void 0 !== data.tiles_enabled_flag && (this.tiles_enabled_flag = data.tiles_enabled_flag), void 0 !== data.entropy_coding_sync_enabled_flag && (this.entropy_coding_sync_enabled_flag = data.entropy_coding_sync_enabled_flag), void 0 !== data.uniform_spacing_flag && (this.uniform_spacing_flag = data.uniform_spacing_flag), void 0 !== data.loop_filter_across_tiles_enabled_flag && (this.loop_filter_across_tiles_enabled_flag = data.loop_filter_across_tiles_enabled_flag), void 0 !== data.pps_loop_filter_across_slices_enabled_flag && (this.pps_loop_filter_across_slices_enabled_flag = data.pps_loop_filter_across_slices_enabled_flag), void 0 !== data.deblocking_filter_control_present_flag && (this.deblocking_filter_control_present_flag = data.deblocking_filter_control_present_flag), void 0 !== data.deblocking_filter_override_enabled_flag && (this.deblocking_filter_override_enabled_flag = data.deblocking_filter_override_enabled_flag), void 0 !== data.pps_deblocking_filter_disabled_flag && (this.pps_deblocking_filter_disabled_flag = data.pps_deblocking_filter_disabled_flag), void 0 !== data.pps_scaling_list_data_present_flag && (this.pps_scaling_list_data_present_flag = data.pps_scaling_list_data_present_flag), void 0 !== data.lists_modification_present_flag && (this.lists_modification_present_flag = data.lists_modification_present_flag), void 0 !== data.slice_segment_header_extension_present_flag && (this.slice_segment_header_extension_present_flag = data.slice_segment_header_extension_present_flag), void 0 !== data.pps_extension_present_flag && (this.pps_extension_present_flag = data.pps_extension_present_flag), void 0 !== data.cross_component_prediction_enabled_flag && (this.cross_component_prediction_enabled_flag = data.cross_component_prediction_enabled_flag), void 0 !== data.chroma_qp_offset_list_enabled_flag && (this.chroma_qp_offset_list_enabled_flag = data.chroma_qp_offset_list_enabled_flag), void 0 !== data.pps_curr_pic_ref_enabled_flag && (this.pps_curr_pic_ref_enabled_flag = data.pps_curr_pic_ref_enabled_flag), void 0 !== data.residual_adaptive_colour_transform_enabled_flag && (this.residual_adaptive_colour_transform_enabled_flag = data.residual_adaptive_colour_transform_enabled_flag), void 0 !== data.pps_slice_act_qp_offsets_present_flag && (this.pps_slice_act_qp_offsets_present_flag = data.pps_slice_act_qp_offsets_present_flag), void 0 !== data.pps_palette_predictor_initializers_present_flag && (this.pps_palette_predictor_initializers_present_flag = data.pps_palette_predictor_initializers_present_flag), void 0 !== data.monochrome_palette_flag && (this.monochrome_palette_flag = data.monochrome_palette_flag), void 0 !== data.pps_range_extension_flag && (this.pps_range_extension_flag = data.pps_range_extension_flag);
    }
    get dependent_slice_segments_enabled_flag() {
        return this.#view.getUint32(0, LE);
    }
    set dependent_slice_segments_enabled_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get output_flag_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set output_flag_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sign_data_hiding_enabled_flag() {
        return this.#view.getUint32(8, LE);
    }
    set sign_data_hiding_enabled_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get cabac_init_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set cabac_init_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get constrained_intra_pred_flag() {
        return this.#view.getUint32(16, LE);
    }
    set constrained_intra_pred_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transform_skip_enabled_flag() {
        return this.#view.getUint32(20, LE);
    }
    set transform_skip_enabled_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get cu_qp_delta_enabled_flag() {
        return this.#view.getUint32(24, LE);
    }
    set cu_qp_delta_enabled_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pps_slice_chroma_qp_offsets_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set pps_slice_chroma_qp_offsets_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get weighted_pred_flag() {
        return this.#view.getUint32(32, LE);
    }
    set weighted_pred_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get weighted_bipred_flag() {
        return this.#view.getUint32(36, LE);
    }
    set weighted_bipred_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get transquant_bypass_enabled_flag() {
        return this.#view.getUint32(40, LE);
    }
    set transquant_bypass_enabled_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get tiles_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set tiles_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get entropy_coding_sync_enabled_flag() {
        return this.#view.getUint32(48, LE);
    }
    set entropy_coding_sync_enabled_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get uniform_spacing_flag() {
        return this.#view.getUint32(52, LE);
    }
    set uniform_spacing_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get loop_filter_across_tiles_enabled_flag() {
        return this.#view.getUint32(56, LE);
    }
    set loop_filter_across_tiles_enabled_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pps_loop_filter_across_slices_enabled_flag() {
        return this.#view.getUint32(60, LE);
    }
    set pps_loop_filter_across_slices_enabled_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get deblocking_filter_control_present_flag() {
        return this.#view.getUint32(64, LE);
    }
    set deblocking_filter_control_present_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get deblocking_filter_override_enabled_flag() {
        return this.#view.getUint32(68, LE);
    }
    set deblocking_filter_override_enabled_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get pps_deblocking_filter_disabled_flag() {
        return this.#view.getUint32(72, LE);
    }
    set pps_deblocking_filter_disabled_flag(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pps_scaling_list_data_present_flag() {
        return this.#view.getUint32(76, LE);
    }
    set pps_scaling_list_data_present_flag(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get lists_modification_present_flag() {
        return this.#view.getUint32(80, LE);
    }
    set lists_modification_present_flag(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get slice_segment_header_extension_present_flag() {
        return this.#view.getUint32(84, LE);
    }
    set slice_segment_header_extension_present_flag(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get pps_extension_present_flag() {
        return this.#view.getUint32(88, LE);
    }
    set pps_extension_present_flag(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get cross_component_prediction_enabled_flag() {
        return this.#view.getUint32(92, LE);
    }
    set cross_component_prediction_enabled_flag(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get chroma_qp_offset_list_enabled_flag() {
        return this.#view.getUint32(96, LE);
    }
    set chroma_qp_offset_list_enabled_flag(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get pps_curr_pic_ref_enabled_flag() {
        return this.#view.getUint32(100, LE);
    }
    set pps_curr_pic_ref_enabled_flag(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get residual_adaptive_colour_transform_enabled_flag() {
        return this.#view.getUint32(104, LE);
    }
    set residual_adaptive_colour_transform_enabled_flag(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pps_slice_act_qp_offsets_present_flag() {
        return this.#view.getUint32(108, LE);
    }
    set pps_slice_act_qp_offsets_present_flag(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get pps_palette_predictor_initializers_present_flag() {
        return this.#view.getUint32(112, LE);
    }
    set pps_palette_predictor_initializers_present_flag(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get monochrome_palette_flag() {
        return this.#view.getUint32(116, LE);
    }
    set monochrome_palette_flag(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get pps_range_extension_flag() {
        return this.#view.getUint32(120, LE);
    }
    set pps_range_extension_flag(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
}
export class StdVideoH265PictureParameterSet {
    static size = 264;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoH265PictureParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoH265PictureParameterSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoH265PictureParameterSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoH265PictureParameterSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pps_pic_parameter_set_id && (this.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (this.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.sps_video_parameter_set_id && (this.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.num_extra_slice_header_bits && (this.num_extra_slice_header_bits = data.num_extra_slice_header_bits), void 0 !== data.num_ref_idx_l0_default_active_minus1 && (this.num_ref_idx_l0_default_active_minus1 = data.num_ref_idx_l0_default_active_minus1), void 0 !== data.num_ref_idx_l1_default_active_minus1 && (this.num_ref_idx_l1_default_active_minus1 = data.num_ref_idx_l1_default_active_minus1), void 0 !== data.init_qp_minus26 && (this.init_qp_minus26 = data.init_qp_minus26), void 0 !== data.diff_cu_qp_delta_depth && (this.diff_cu_qp_delta_depth = data.diff_cu_qp_delta_depth), void 0 !== data.pps_cb_qp_offset && (this.pps_cb_qp_offset = data.pps_cb_qp_offset), void 0 !== data.pps_cr_qp_offset && (this.pps_cr_qp_offset = data.pps_cr_qp_offset), void 0 !== data.pps_beta_offset_div2 && (this.pps_beta_offset_div2 = data.pps_beta_offset_div2), void 0 !== data.pps_tc_offset_div2 && (this.pps_tc_offset_div2 = data.pps_tc_offset_div2), void 0 !== data.log2_parallel_merge_level_minus2 && (this.log2_parallel_merge_level_minus2 = data.log2_parallel_merge_level_minus2), void 0 !== data.log2_max_transform_skip_block_size_minus2 && (this.log2_max_transform_skip_block_size_minus2 = data.log2_max_transform_skip_block_size_minus2), void 0 !== data.diff_cu_chroma_qp_offset_depth && (this.diff_cu_chroma_qp_offset_depth = data.diff_cu_chroma_qp_offset_depth), void 0 !== data.chroma_qp_offset_list_len_minus1 && (this.chroma_qp_offset_list_len_minus1 = data.chroma_qp_offset_list_len_minus1), void 0 !== data.cb_qp_offset_list && (this.cb_qp_offset_list = data.cb_qp_offset_list), void 0 !== data.cr_qp_offset_list && (this.cr_qp_offset_list = data.cr_qp_offset_list), void 0 !== data.log2_sao_offset_scale_luma && (this.log2_sao_offset_scale_luma = data.log2_sao_offset_scale_luma), void 0 !== data.log2_sao_offset_scale_chroma && (this.log2_sao_offset_scale_chroma = data.log2_sao_offset_scale_chroma), void 0 !== data.pps_act_y_qp_offset_plus5 && (this.pps_act_y_qp_offset_plus5 = data.pps_act_y_qp_offset_plus5), void 0 !== data.pps_act_cb_qp_offset_plus5 && (this.pps_act_cb_qp_offset_plus5 = data.pps_act_cb_qp_offset_plus5), void 0 !== data.pps_act_cr_qp_offset_plus3 && (this.pps_act_cr_qp_offset_plus3 = data.pps_act_cr_qp_offset_plus3), void 0 !== data.pps_num_palette_predictor_initializers && (this.pps_num_palette_predictor_initializers = data.pps_num_palette_predictor_initializers), void 0 !== data.luma_bit_depth_entry_minus8 && (this.luma_bit_depth_entry_minus8 = data.luma_bit_depth_entry_minus8), void 0 !== data.chroma_bit_depth_entry_minus8 && (this.chroma_bit_depth_entry_minus8 = data.chroma_bit_depth_entry_minus8), void 0 !== data.num_tile_columns_minus1 && (this.num_tile_columns_minus1 = data.num_tile_columns_minus1), void 0 !== data.num_tile_rows_minus1 && (this.num_tile_rows_minus1 = data.num_tile_rows_minus1), void 0 !== data.reserved1 && (this.reserved1 = data.reserved1), void 0 !== data.reserved2 && (this.reserved2 = data.reserved2), void 0 !== data.column_width_minus1 && (this.column_width_minus1 = data.column_width_minus1), void 0 !== data.row_height_minus1 && (this.row_height_minus1 = data.row_height_minus1), void 0 !== data.reserved3 && (this.reserved3 = data.reserved3), void 0 !== data.pScalingLists && (this.pScalingLists = data.pScalingLists), void 0 !== data.pPredictorPaletteEntries && (this.pPredictorPaletteEntries = data.pPredictorPaletteEntries);
    }
    get flags() {
        return new StdVideoH265PpsFlags(this.#data.subarray(0, 0 + StdVideoH265PpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265PpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(124);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(124, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(125);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(125, Number(value));
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(126);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(126, Number(value));
    }
    get num_extra_slice_header_bits() {
        return this.#view.getUint8(127);
    }
    set num_extra_slice_header_bits(value) {
        this.#view.setUint8(127, Number(value));
    }
    get num_ref_idx_l0_default_active_minus1() {
        return this.#view.getUint8(128);
    }
    set num_ref_idx_l0_default_active_minus1(value) {
        this.#view.setUint8(128, Number(value));
    }
    get num_ref_idx_l1_default_active_minus1() {
        return this.#view.getUint8(129);
    }
    set num_ref_idx_l1_default_active_minus1(value) {
        this.#view.setUint8(129, Number(value));
    }
    get init_qp_minus26() {
        return this.#view.getInt8(130);
    }
    set init_qp_minus26(value) {
        this.#view.setInt8(130, Number(value));
    }
    get diff_cu_qp_delta_depth() {
        return this.#view.getUint8(131);
    }
    set diff_cu_qp_delta_depth(value) {
        this.#view.setUint8(131, Number(value));
    }
    get pps_cb_qp_offset() {
        return this.#view.getInt8(132);
    }
    set pps_cb_qp_offset(value) {
        this.#view.setInt8(132, Number(value));
    }
    get pps_cr_qp_offset() {
        return this.#view.getInt8(133);
    }
    set pps_cr_qp_offset(value) {
        this.#view.setInt8(133, Number(value));
    }
    get pps_beta_offset_div2() {
        return this.#view.getInt8(134);
    }
    set pps_beta_offset_div2(value) {
        this.#view.setInt8(134, Number(value));
    }
    get pps_tc_offset_div2() {
        return this.#view.getInt8(135);
    }
    set pps_tc_offset_div2(value) {
        this.#view.setInt8(135, Number(value));
    }
    get log2_parallel_merge_level_minus2() {
        return this.#view.getUint8(136);
    }
    set log2_parallel_merge_level_minus2(value) {
        this.#view.setUint8(136, Number(value));
    }
    get log2_max_transform_skip_block_size_minus2() {
        return this.#view.getUint8(137);
    }
    set log2_max_transform_skip_block_size_minus2(value) {
        this.#view.setUint8(137, Number(value));
    }
    get diff_cu_chroma_qp_offset_depth() {
        return this.#view.getUint8(138);
    }
    set diff_cu_chroma_qp_offset_depth(value) {
        this.#view.setUint8(138, Number(value));
    }
    get chroma_qp_offset_list_len_minus1() {
        return this.#view.getUint8(139);
    }
    set chroma_qp_offset_list_len_minus1(value) {
        this.#view.setUint8(139, Number(value));
    }
    get cb_qp_offset_list() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 140, 6);
    }
    set cb_qp_offset_list(value) {
        this.#data.set(new Uint8Array(value.buffer), 140);
    }
    get cr_qp_offset_list() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 146, 6);
    }
    set cr_qp_offset_list(value) {
        this.#data.set(new Uint8Array(value.buffer), 146);
    }
    get log2_sao_offset_scale_luma() {
        return this.#view.getUint8(152);
    }
    set log2_sao_offset_scale_luma(value) {
        this.#view.setUint8(152, Number(value));
    }
    get log2_sao_offset_scale_chroma() {
        return this.#view.getUint8(153);
    }
    set log2_sao_offset_scale_chroma(value) {
        this.#view.setUint8(153, Number(value));
    }
    get pps_act_y_qp_offset_plus5() {
        return this.#view.getInt8(154);
    }
    set pps_act_y_qp_offset_plus5(value) {
        this.#view.setInt8(154, Number(value));
    }
    get pps_act_cb_qp_offset_plus5() {
        return this.#view.getInt8(155);
    }
    set pps_act_cb_qp_offset_plus5(value) {
        this.#view.setInt8(155, Number(value));
    }
    get pps_act_cr_qp_offset_plus3() {
        return this.#view.getInt8(156);
    }
    set pps_act_cr_qp_offset_plus3(value) {
        this.#view.setInt8(156, Number(value));
    }
    get pps_num_palette_predictor_initializers() {
        return this.#view.getUint8(157);
    }
    set pps_num_palette_predictor_initializers(value) {
        this.#view.setUint8(157, Number(value));
    }
    get luma_bit_depth_entry_minus8() {
        return this.#view.getUint8(158);
    }
    set luma_bit_depth_entry_minus8(value) {
        this.#view.setUint8(158, Number(value));
    }
    get chroma_bit_depth_entry_minus8() {
        return this.#view.getUint8(159);
    }
    set chroma_bit_depth_entry_minus8(value) {
        this.#view.setUint8(159, Number(value));
    }
    get num_tile_columns_minus1() {
        return this.#view.getUint8(160);
    }
    set num_tile_columns_minus1(value) {
        this.#view.setUint8(160, Number(value));
    }
    get num_tile_rows_minus1() {
        return this.#view.getUint8(161);
    }
    set num_tile_rows_minus1(value) {
        this.#view.setUint8(161, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(162);
    }
    set reserved1(value) {
        this.#view.setUint8(162, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(163);
    }
    set reserved2(value) {
        this.#view.setUint8(163, Number(value));
    }
    get column_width_minus1() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 164, 19);
    }
    set column_width_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 164);
    }
    get row_height_minus1() {
        return new Uint16Array(this.#data.buffer, this.#data.byteOffset + 202, 21);
    }
    set row_height_minus1(value) {
        this.#data.set(new Uint8Array(value.buffer), 202);
    }
    get reserved3() {
        return this.#view.getUint32(244, LE);
    }
    set reserved3(value) {
        this.#view.setUint32(244, Number(value), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(248, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(248, BigInt(anyPointer(value)), LE);
    }
    get pPredictorPaletteEntries() {
        return this.#view.getBigUint64(256, LE);
    }
    set pPredictorPaletteEntries(value) {
        this.#view.setBigUint64(256, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoDecodeH265PictureInfoFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH265PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH265PictureInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH265PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.IrapPicFlag && (this.IrapPicFlag = data.IrapPicFlag), void 0 !== data.IdrPicFlag && (this.IdrPicFlag = data.IdrPicFlag), void 0 !== data.IsReference && (this.IsReference = data.IsReference), void 0 !== data.short_term_ref_pic_set_sps_flag && (this.short_term_ref_pic_set_sps_flag = data.short_term_ref_pic_set_sps_flag);
    }
    get IrapPicFlag() {
        return this.#view.getUint32(0, LE);
    }
    set IrapPicFlag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get IdrPicFlag() {
        return this.#view.getUint32(4, LE);
    }
    set IdrPicFlag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get IsReference() {
        return this.#view.getUint32(8, LE);
    }
    set IsReference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get short_term_ref_pic_set_sps_flag() {
        return this.#view.getUint32(12, LE);
    }
    set short_term_ref_pic_set_sps_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoDecodeH265PictureInfo {
    static size = 52;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH265PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH265PictureInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH265PictureInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH265PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.sps_video_parameter_set_id && (this.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (this.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.pps_pic_parameter_set_id && (this.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.NumDeltaPocsOfRefRpsIdx && (this.NumDeltaPocsOfRefRpsIdx = data.NumDeltaPocsOfRefRpsIdx), void 0 !== data.PicOrderCntVal && (this.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.NumBitsForSTRefPicSetInSlice && (this.NumBitsForSTRefPicSetInSlice = data.NumBitsForSTRefPicSetInSlice), void 0 !== data.reserved && (this.reserved = data.reserved), void 0 !== data.RefPicSetStCurrBefore && (this.RefPicSetStCurrBefore = data.RefPicSetStCurrBefore), void 0 !== data.RefPicSetStCurrAfter && (this.RefPicSetStCurrAfter = data.RefPicSetStCurrAfter), void 0 !== data.RefPicSetLtCurr && (this.RefPicSetLtCurr = data.RefPicSetLtCurr);
    }
    get flags() {
        return new StdVideoDecodeH265PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH265PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(16);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(17);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(17, Number(value));
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(18);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(18, Number(value));
    }
    get NumDeltaPocsOfRefRpsIdx() {
        return this.#view.getUint8(19);
    }
    set NumDeltaPocsOfRefRpsIdx(value) {
        this.#view.setUint8(19, Number(value));
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(20, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(20, Number(value), LE);
    }
    get NumBitsForSTRefPicSetInSlice() {
        return this.#view.getUint16(24, LE);
    }
    set NumBitsForSTRefPicSetInSlice(value) {
        this.#view.setUint16(24, Number(value), LE);
    }
    get reserved() {
        return this.#view.getUint16(26, LE);
    }
    set reserved(value) {
        this.#view.setUint16(26, Number(value), LE);
    }
    get RefPicSetStCurrBefore() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 28, 8);
    }
    set RefPicSetStCurrBefore(value) {
        this.#data.set(new Uint8Array(value.buffer), 28);
    }
    get RefPicSetStCurrAfter() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 36, 8);
    }
    set RefPicSetStCurrAfter(value) {
        this.#data.set(new Uint8Array(value.buffer), 36);
    }
    get RefPicSetLtCurr() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 44, 8);
    }
    set RefPicSetLtCurr(value) {
        this.#data.set(new Uint8Array(value.buffer), 44);
    }
}
export class StdVideoDecodeH265ReferenceInfoFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH265ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH265ReferenceInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH265ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.used_for_long_term_reference && (this.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.unused_for_reference && (this.unused_for_reference = data.unused_for_reference);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get unused_for_reference() {
        return this.#view.getUint32(4, LE);
    }
    set unused_for_reference(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoDecodeH265ReferenceInfo {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoDecodeH265ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoDecodeH265ReferenceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoDecodeH265ReferenceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoDecodeH265ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.PicOrderCntVal && (this.PicOrderCntVal = data.PicOrderCntVal);
    }
    get flags() {
        return new StdVideoDecodeH265ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH265ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class StdVideoEncodeH265WeightTableFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265WeightTableFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265WeightTableFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265WeightTableFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265WeightTableFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.luma_weight_l0_flag && (this.luma_weight_l0_flag = data.luma_weight_l0_flag), void 0 !== data.chroma_weight_l0_flag && (this.chroma_weight_l0_flag = data.chroma_weight_l0_flag), void 0 !== data.luma_weight_l1_flag && (this.luma_weight_l1_flag = data.luma_weight_l1_flag), void 0 !== data.chroma_weight_l1_flag && (this.chroma_weight_l1_flag = data.chroma_weight_l1_flag);
    }
    get luma_weight_l0_flag() {
        return this.#view.getUint16(0, LE);
    }
    set luma_weight_l0_flag(value) {
        this.#view.setUint16(0, Number(value), LE);
    }
    get chroma_weight_l0_flag() {
        return this.#view.getUint16(2, LE);
    }
    set chroma_weight_l0_flag(value) {
        this.#view.setUint16(2, Number(value), LE);
    }
    get luma_weight_l1_flag() {
        return this.#view.getUint16(4, LE);
    }
    set luma_weight_l1_flag(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get chroma_weight_l1_flag() {
        return this.#view.getUint16(6, LE);
    }
    set chroma_weight_l1_flag(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class StdVideoEncodeH265WeightTable {
    static size = 190;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265WeightTable.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265WeightTable.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265WeightTable.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265WeightTable.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.luma_log2_weight_denom && (this.luma_log2_weight_denom = data.luma_log2_weight_denom), void 0 !== data.delta_chroma_log2_weight_denom && (this.delta_chroma_log2_weight_denom = data.delta_chroma_log2_weight_denom), void 0 !== data.delta_luma_weight_l0 && (this.delta_luma_weight_l0 = data.delta_luma_weight_l0), void 0 !== data.luma_offset_l0 && (this.luma_offset_l0 = data.luma_offset_l0), void 0 !== data.delta_chroma_weight_l0 && (this.delta_chroma_weight_l0 = data.delta_chroma_weight_l0), void 0 !== data.delta_chroma_offset_l0 && (this.delta_chroma_offset_l0 = data.delta_chroma_offset_l0), void 0 !== data.delta_luma_weight_l1 && (this.delta_luma_weight_l1 = data.delta_luma_weight_l1), void 0 !== data.luma_offset_l1 && (this.luma_offset_l1 = data.luma_offset_l1), void 0 !== data.delta_chroma_weight_l1 && (this.delta_chroma_weight_l1 = data.delta_chroma_weight_l1), void 0 !== data.delta_chroma_offset_l1 && (this.delta_chroma_offset_l1 = data.delta_chroma_offset_l1);
    }
    get flags() {
        return new StdVideoEncodeH265WeightTableFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265WeightTableFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get luma_log2_weight_denom() {
        return this.#view.getUint8(8);
    }
    set luma_log2_weight_denom(value) {
        this.#view.setUint8(8, Number(value));
    }
    get delta_chroma_log2_weight_denom() {
        return this.#view.getInt8(9);
    }
    set delta_chroma_log2_weight_denom(value) {
        this.#view.setInt8(9, Number(value));
    }
    get delta_luma_weight_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 10, 15);
    }
    set delta_luma_weight_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 10);
    }
    get luma_offset_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 25, 15);
    }
    set luma_offset_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 25);
    }
    get delta_chroma_weight_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 40, 30);
    }
    set delta_chroma_weight_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 40);
    }
    get delta_chroma_offset_l0() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 70, 30);
    }
    set delta_chroma_offset_l0(value) {
        this.#data.set(new Uint8Array(value.buffer), 70);
    }
    get delta_luma_weight_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 100, 15);
    }
    set delta_luma_weight_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 100);
    }
    get luma_offset_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 115, 15);
    }
    set luma_offset_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 115);
    }
    get delta_chroma_weight_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 130, 30);
    }
    set delta_chroma_weight_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 130);
    }
    get delta_chroma_offset_l1() {
        return new Int8Array(this.#data.buffer, this.#data.byteOffset + 160, 30);
    }
    set delta_chroma_offset_l1(value) {
        this.#data.set(new Uint8Array(value.buffer), 160);
    }
}
export class StdVideoEncodeH265SliceSegmentLongTermRefPics {
    static size = 148;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentLongTermRefPics.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265SliceSegmentLongTermRefPics.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265SliceSegmentLongTermRefPics.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentLongTermRefPics.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.num_long_term_sps && (this.num_long_term_sps = data.num_long_term_sps), void 0 !== data.num_long_term_pics && (this.num_long_term_pics = data.num_long_term_pics), void 0 !== data.lt_idx_sps && (this.lt_idx_sps = data.lt_idx_sps), void 0 !== data.poc_lsb_lt && (this.poc_lsb_lt = data.poc_lsb_lt), void 0 !== data.used_by_curr_pic_lt_flag && (this.used_by_curr_pic_lt_flag = data.used_by_curr_pic_lt_flag), void 0 !== data.delta_poc_msb_present_flag && (this.delta_poc_msb_present_flag = data.delta_poc_msb_present_flag), void 0 !== data.delta_poc_msb_cycle_lt && (this.delta_poc_msb_cycle_lt = data.delta_poc_msb_cycle_lt);
    }
    get num_long_term_sps() {
        return this.#view.getUint8(0);
    }
    set num_long_term_sps(value) {
        this.#view.setUint8(0, Number(value));
    }
    get num_long_term_pics() {
        return this.#view.getUint8(1);
    }
    set num_long_term_pics(value) {
        this.#view.setUint8(1, Number(value));
    }
    get lt_idx_sps() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 2, 32);
    }
    set lt_idx_sps(value) {
        this.#data.set(new Uint8Array(value.buffer), 2);
    }
    get poc_lsb_lt() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 34, 16);
    }
    set poc_lsb_lt(value) {
        this.#data.set(new Uint8Array(value.buffer), 34);
    }
    get used_by_curr_pic_lt_flag() {
        return this.#view.getUint16(50, LE);
    }
    set used_by_curr_pic_lt_flag(value) {
        this.#view.setUint16(50, Number(value), LE);
    }
    get delta_poc_msb_present_flag() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 52, 48);
    }
    set delta_poc_msb_present_flag(value) {
        this.#data.set(new Uint8Array(value.buffer), 52);
    }
    get delta_poc_msb_cycle_lt() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 100, 48);
    }
    set delta_poc_msb_cycle_lt(value) {
        this.#data.set(new Uint8Array(value.buffer), 100);
    }
}
export class StdVideoEncodeH265SliceSegmentHeaderFlags {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentHeaderFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265SliceSegmentHeaderFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265SliceSegmentHeaderFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentHeaderFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.first_slice_segment_in_pic_flag && (this.first_slice_segment_in_pic_flag = data.first_slice_segment_in_pic_flag), void 0 !== data.no_output_of_prior_pics_flag && (this.no_output_of_prior_pics_flag = data.no_output_of_prior_pics_flag), void 0 !== data.dependent_slice_segment_flag && (this.dependent_slice_segment_flag = data.dependent_slice_segment_flag), void 0 !== data.pic_output_flag && (this.pic_output_flag = data.pic_output_flag), void 0 !== data.short_term_ref_pic_set_sps_flag && (this.short_term_ref_pic_set_sps_flag = data.short_term_ref_pic_set_sps_flag), void 0 !== data.slice_temporal_mvp_enable_flag && (this.slice_temporal_mvp_enable_flag = data.slice_temporal_mvp_enable_flag), void 0 !== data.slice_sao_luma_flag && (this.slice_sao_luma_flag = data.slice_sao_luma_flag), void 0 !== data.slice_sao_chroma_flag && (this.slice_sao_chroma_flag = data.slice_sao_chroma_flag), void 0 !== data.num_ref_idx_active_override_flag && (this.num_ref_idx_active_override_flag = data.num_ref_idx_active_override_flag), void 0 !== data.mvd_l1_zero_flag && (this.mvd_l1_zero_flag = data.mvd_l1_zero_flag), void 0 !== data.cabac_init_flag && (this.cabac_init_flag = data.cabac_init_flag), void 0 !== data.cu_chroma_qp_offset_enabled_flag && (this.cu_chroma_qp_offset_enabled_flag = data.cu_chroma_qp_offset_enabled_flag), void 0 !== data.deblocking_filter_override_flag && (this.deblocking_filter_override_flag = data.deblocking_filter_override_flag), void 0 !== data.slice_deblocking_filter_disabled_flag && (this.slice_deblocking_filter_disabled_flag = data.slice_deblocking_filter_disabled_flag), void 0 !== data.collocated_from_l0_flag && (this.collocated_from_l0_flag = data.collocated_from_l0_flag), void 0 !== data.slice_loop_filter_across_slices_enabled_flag && (this.slice_loop_filter_across_slices_enabled_flag = data.slice_loop_filter_across_slices_enabled_flag);
    }
    get first_slice_segment_in_pic_flag() {
        return this.#view.getUint32(0, LE);
    }
    set first_slice_segment_in_pic_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get no_output_of_prior_pics_flag() {
        return this.#view.getUint32(4, LE);
    }
    set no_output_of_prior_pics_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dependent_slice_segment_flag() {
        return this.#view.getUint32(8, LE);
    }
    set dependent_slice_segment_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pic_output_flag() {
        return this.#view.getUint32(12, LE);
    }
    set pic_output_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get short_term_ref_pic_set_sps_flag() {
        return this.#view.getUint32(16, LE);
    }
    set short_term_ref_pic_set_sps_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get slice_temporal_mvp_enable_flag() {
        return this.#view.getUint32(20, LE);
    }
    set slice_temporal_mvp_enable_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get slice_sao_luma_flag() {
        return this.#view.getUint32(24, LE);
    }
    set slice_sao_luma_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get slice_sao_chroma_flag() {
        return this.#view.getUint32(28, LE);
    }
    set slice_sao_chroma_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get num_ref_idx_active_override_flag() {
        return this.#view.getUint32(32, LE);
    }
    set num_ref_idx_active_override_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get mvd_l1_zero_flag() {
        return this.#view.getUint32(36, LE);
    }
    set mvd_l1_zero_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get cabac_init_flag() {
        return this.#view.getUint32(40, LE);
    }
    set cabac_init_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get cu_chroma_qp_offset_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set cu_chroma_qp_offset_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get deblocking_filter_override_flag() {
        return this.#view.getUint32(48, LE);
    }
    set deblocking_filter_override_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get slice_deblocking_filter_disabled_flag() {
        return this.#view.getUint32(52, LE);
    }
    set slice_deblocking_filter_disabled_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get collocated_from_l0_flag() {
        return this.#view.getUint32(56, LE);
    }
    set collocated_from_l0_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get slice_loop_filter_across_slices_enabled_flag() {
        return this.#view.getUint32(60, LE);
    }
    set slice_loop_filter_across_slices_enabled_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class StdVideoEncodeH265SliceSegmentHeader {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentHeader.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265SliceSegmentHeader.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265SliceSegmentHeader.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265SliceSegmentHeader.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.slice_type && (this.slice_type = data.slice_type), void 0 !== data.slice_segment_address && (this.slice_segment_address = data.slice_segment_address), void 0 !== data.short_term_ref_pic_set_idx && (this.short_term_ref_pic_set_idx = data.short_term_ref_pic_set_idx), void 0 !== data.collocated_ref_idx && (this.collocated_ref_idx = data.collocated_ref_idx), void 0 !== data.num_ref_idx_l0_active_minus1 && (this.num_ref_idx_l0_active_minus1 = data.num_ref_idx_l0_active_minus1), void 0 !== data.num_ref_idx_l1_active_minus1 && (this.num_ref_idx_l1_active_minus1 = data.num_ref_idx_l1_active_minus1), void 0 !== data.MaxNumMergeCand && (this.MaxNumMergeCand = data.MaxNumMergeCand), void 0 !== data.slice_cb_qp_offset && (this.slice_cb_qp_offset = data.slice_cb_qp_offset), void 0 !== data.slice_cr_qp_offset && (this.slice_cr_qp_offset = data.slice_cr_qp_offset), void 0 !== data.slice_beta_offset_div2 && (this.slice_beta_offset_div2 = data.slice_beta_offset_div2), void 0 !== data.slice_tc_offset_div2 && (this.slice_tc_offset_div2 = data.slice_tc_offset_div2), void 0 !== data.slice_act_y_qp_offset && (this.slice_act_y_qp_offset = data.slice_act_y_qp_offset), void 0 !== data.slice_act_cb_qp_offset && (this.slice_act_cb_qp_offset = data.slice_act_cb_qp_offset), void 0 !== data.slice_act_cr_qp_offset && (this.slice_act_cr_qp_offset = data.slice_act_cr_qp_offset), void 0 !== data.pShortTermRefPicSet && (this.pShortTermRefPicSet = data.pShortTermRefPicSet), void 0 !== data.pLongTermRefPics && (this.pLongTermRefPics = data.pLongTermRefPics), void 0 !== data.pWeightTable && (this.pWeightTable = data.pWeightTable);
    }
    get flags() {
        return new StdVideoEncodeH265SliceSegmentHeaderFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265SliceSegmentHeaderFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265SliceSegmentHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get slice_type() {
        return this.#view.getUint32(64, LE);
    }
    set slice_type(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get slice_segment_address() {
        return this.#view.getUint32(68, LE);
    }
    set slice_segment_address(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get short_term_ref_pic_set_idx() {
        return this.#view.getUint8(72);
    }
    set short_term_ref_pic_set_idx(value) {
        this.#view.setUint8(72, Number(value));
    }
    get collocated_ref_idx() {
        return this.#view.getUint8(73);
    }
    set collocated_ref_idx(value) {
        this.#view.setUint8(73, Number(value));
    }
    get num_ref_idx_l0_active_minus1() {
        return this.#view.getUint8(74);
    }
    set num_ref_idx_l0_active_minus1(value) {
        this.#view.setUint8(74, Number(value));
    }
    get num_ref_idx_l1_active_minus1() {
        return this.#view.getUint8(75);
    }
    set num_ref_idx_l1_active_minus1(value) {
        this.#view.setUint8(75, Number(value));
    }
    get MaxNumMergeCand() {
        return this.#view.getUint8(76);
    }
    set MaxNumMergeCand(value) {
        this.#view.setUint8(76, Number(value));
    }
    get slice_cb_qp_offset() {
        return this.#view.getInt8(77);
    }
    set slice_cb_qp_offset(value) {
        this.#view.setInt8(77, Number(value));
    }
    get slice_cr_qp_offset() {
        return this.#view.getInt8(78);
    }
    set slice_cr_qp_offset(value) {
        this.#view.setInt8(78, Number(value));
    }
    get slice_beta_offset_div2() {
        return this.#view.getInt8(79);
    }
    set slice_beta_offset_div2(value) {
        this.#view.setInt8(79, Number(value));
    }
    get slice_tc_offset_div2() {
        return this.#view.getInt8(80);
    }
    set slice_tc_offset_div2(value) {
        this.#view.setInt8(80, Number(value));
    }
    get slice_act_y_qp_offset() {
        return this.#view.getInt8(81);
    }
    set slice_act_y_qp_offset(value) {
        this.#view.setInt8(81, Number(value));
    }
    get slice_act_cb_qp_offset() {
        return this.#view.getInt8(82);
    }
    set slice_act_cb_qp_offset(value) {
        this.#view.setInt8(82, Number(value));
    }
    get slice_act_cr_qp_offset() {
        return this.#view.getInt8(83);
    }
    set slice_act_cr_qp_offset(value) {
        this.#view.setInt8(83, Number(value));
    }
    get pShortTermRefPicSet() {
        return this.#view.getBigUint64(88, LE);
    }
    set pShortTermRefPicSet(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
    get pLongTermRefPics() {
        return this.#view.getBigUint64(96, LE);
    }
    set pLongTermRefPics(value) {
        this.#view.setBigUint64(96, BigInt(anyPointer(value)), LE);
    }
    get pWeightTable() {
        return this.#view.getBigUint64(104, LE);
    }
    set pWeightTable(value) {
        this.#view.setBigUint64(104, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoEncodeH265ReferenceModificationFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265ReferenceModificationFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265ReferenceModificationFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265ReferenceModificationFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265ReferenceModificationFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.ref_pic_list_modification_flag_l0 && (this.ref_pic_list_modification_flag_l0 = data.ref_pic_list_modification_flag_l0), void 0 !== data.ref_pic_list_modification_flag_l1 && (this.ref_pic_list_modification_flag_l1 = data.ref_pic_list_modification_flag_l1);
    }
    get ref_pic_list_modification_flag_l0() {
        return this.#view.getUint32(0, LE);
    }
    set ref_pic_list_modification_flag_l0(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get ref_pic_list_modification_flag_l1() {
        return this.#view.getUint32(4, LE);
    }
    set ref_pic_list_modification_flag_l1(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH265ReferenceModifications {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265ReferenceModifications.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265ReferenceModifications.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265ReferenceModifications.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265ReferenceModifications.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.referenceList0ModificationsCount && (this.referenceList0ModificationsCount = data.referenceList0ModificationsCount), void 0 !== data.pReferenceList0Modifications && (this.pReferenceList0Modifications = data.pReferenceList0Modifications), void 0 !== data.referenceList1ModificationsCount && (this.referenceList1ModificationsCount = data.referenceList1ModificationsCount), void 0 !== data.pReferenceList1Modifications && (this.pReferenceList1Modifications = data.pReferenceList1Modifications);
    }
    get flags() {
        return new StdVideoEncodeH265ReferenceModificationFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265ReferenceModificationFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265ReferenceModificationFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get referenceList0ModificationsCount() {
        return this.#view.getUint8(8);
    }
    set referenceList0ModificationsCount(value) {
        this.#view.setUint8(8, Number(value));
    }
    get pReferenceList0Modifications() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceList0Modifications(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get referenceList1ModificationsCount() {
        return this.#view.getUint8(24);
    }
    set referenceList1ModificationsCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pReferenceList1Modifications() {
        return this.#view.getBigUint64(32, LE);
    }
    set pReferenceList1Modifications(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class StdVideoEncodeH265PictureInfoFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265PictureInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265PictureInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.is_reference_flag && (this.is_reference_flag = data.is_reference_flag), void 0 !== data.IrapPicFlag && (this.IrapPicFlag = data.IrapPicFlag), void 0 !== data.long_term_flag && (this.long_term_flag = data.long_term_flag), void 0 !== data.discardable_flag && (this.discardable_flag = data.discardable_flag), void 0 !== data.cross_layer_bla_flag && (this.cross_layer_bla_flag = data.cross_layer_bla_flag);
    }
    get is_reference_flag() {
        return this.#view.getUint32(0, LE);
    }
    set is_reference_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get IrapPicFlag() {
        return this.#view.getUint32(4, LE);
    }
    set IrapPicFlag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get long_term_flag() {
        return this.#view.getUint32(8, LE);
    }
    set long_term_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get discardable_flag() {
        return this.#view.getUint32(12, LE);
    }
    set discardable_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get cross_layer_bla_flag() {
        return this.#view.getUint32(16, LE);
    }
    set cross_layer_bla_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoEncodeH265PictureInfo {
    static size = 36;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265PictureInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265PictureInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265PictureInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.PictureType && (this.PictureType = data.PictureType), void 0 !== data.sps_video_parameter_set_id && (this.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (this.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.pps_pic_parameter_set_id && (this.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.PicOrderCntVal && (this.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.TemporalId && (this.TemporalId = data.TemporalId);
    }
    get flags() {
        return new StdVideoEncodeH265PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PictureType() {
        return this.#view.getUint32(20, LE);
    }
    set PictureType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(24);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(25);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(25, Number(value));
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(26);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(26, Number(value));
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(28, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(28, Number(value), LE);
    }
    get TemporalId() {
        return this.#view.getUint8(32);
    }
    set TemporalId(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class StdVideoEncodeH265ReferenceInfoFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265ReferenceInfoFlags.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265ReferenceInfoFlags.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.used_for_long_term_reference && (this.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.unused_for_reference && (this.unused_for_reference = data.unused_for_reference);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get unused_for_reference() {
        return this.#view.getUint32(4, LE);
    }
    set unused_for_reference(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH265ReferenceInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StdVideoEncodeH265ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StdVideoEncodeH265ReferenceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StdVideoEncodeH265ReferenceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StdVideoEncodeH265ReferenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.PicOrderCntVal && (this.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.TemporalId && (this.TemporalId = data.TemporalId);
    }
    get flags() {
        return new StdVideoEncodeH265ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
    get TemporalId() {
        return this.#view.getUint8(12);
    }
    set TemporalId(value) {
        this.#view.setUint8(12, Number(value));
    }
}
export class BaseOutStructure {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BaseOutStructure.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BaseOutStructure.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BaseOutStructure.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BaseOutStructure.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.sType && (this.sType = data.sType), void 0 !== data.pNext && (this.pNext = data.pNext);
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class BaseInStructure {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BaseInStructure.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BaseInStructure.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BaseInStructure.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BaseInStructure.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.sType && (this.sType = data.sType), void 0 !== data.pNext && (this.pNext = data.pNext);
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class Offset2D {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Offset2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Offset2D.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Offset2D.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Offset2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y);
    }
    get x() {
        return this.#view.getInt32(0, LE);
    }
    set x(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getInt32(4, LE);
    }
    set y(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
}
export class Offset3D {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Offset3D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Offset3D.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Offset3D.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Offset3D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y), void 0 !== data.z && (this.z = data.z);
    }
    get x() {
        return this.#view.getInt32(0, LE);
    }
    set x(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getInt32(4, LE);
    }
    set y(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getInt32(8, LE);
    }
    set z(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class Extent2D {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Extent2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Extent2D.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Extent2D.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Extent2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height);
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class Extent3D {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Extent3D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Extent3D.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Extent3D.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Extent3D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.depth && (this.depth = data.depth);
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(8, LE);
    }
    set depth(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class Viewport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Viewport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Viewport.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Viewport.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Viewport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.minDepth && (this.minDepth = data.minDepth), void 0 !== data.maxDepth && (this.maxDepth = data.maxDepth);
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get width() {
        return this.#view.getFloat32(8, LE);
    }
    set width(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get height() {
        return this.#view.getFloat32(12, LE);
    }
    set height(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get minDepth() {
        return this.#view.getFloat32(16, LE);
    }
    set minDepth(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxDepth() {
        return this.#view.getFloat32(20, LE);
    }
    set maxDepth(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
}
export class Rect2D {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Rect2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Rect2D.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Rect2D.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Rect2D.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.extent && (this.extent = data.extent);
    }
    get offset() {
        return new Offset2D(this.#data.subarray(0, 0 + Offset2D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get extent() {
        return new Extent2D(this.#data.subarray(8, 8 + Extent2D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
}
export class ClearRect {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ClearRect.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ClearRect.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ClearRect.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ClearRect.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.rect && (this.rect = data.rect), void 0 !== data.baseArrayLayer && (this.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (this.layerCount = data.layerCount);
    }
    get rect() {
        return new Rect2D(this.#data.subarray(0, 0 + Rect2D.size));
    }
    set rect(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(16, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(20, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class ComponentMapping {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ComponentMapping.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ComponentMapping.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ComponentMapping.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.r && (this.r = data.r), void 0 !== data.g && (this.g = data.g), void 0 !== data.b && (this.b = data.b), void 0 !== data.a && (this.a = data.a);
    }
    get r() {
        return this.#view.getUint32(0, LE);
    }
    set r(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get g() {
        return this.#view.getUint32(4, LE);
    }
    set g(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get b() {
        return this.#view.getUint32(8, LE);
    }
    set b(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get a() {
        return this.#view.getUint32(12, LE);
    }
    set a(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class PhysicalDeviceProperties {
    static size = 784;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.apiVersion && (this.apiVersion = data.apiVersion), void 0 !== data.driverVersion && (this.driverVersion = data.driverVersion), void 0 !== data.vendorID && (this.vendorID = data.vendorID), void 0 !== data.deviceID && (this.deviceID = data.deviceID), void 0 !== data.deviceType && (this.deviceType = data.deviceType), void 0 !== data.deviceName && (this.deviceName = data.deviceName), void 0 !== data.pipelineCacheUUID && (this.pipelineCacheUUID = data.pipelineCacheUUID), void 0 !== data.limits && (this.limits = data.limits), void 0 !== data.sparseProperties && (this.sparseProperties = data.sparseProperties);
    }
    get apiVersion() {
        return this.#view.getUint32(0, LE);
    }
    set apiVersion(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get driverVersion() {
        return this.#view.getUint32(4, LE);
    }
    set driverVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get deviceType() {
        return this.#view.getUint32(16, LE);
    }
    set deviceType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceName() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 256);
    }
    set deviceName(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get pipelineCacheUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 276, 16);
    }
    set pipelineCacheUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 276);
    }
    get limits() {
        return new PhysicalDeviceLimits(this.#data.subarray(292, 292 + PhysicalDeviceLimits.size));
    }
    set limits(value) {
        if (value[BUFFER].byteLength < PhysicalDeviceLimits.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 292);
    }
    get sparseProperties() {
        return new PhysicalDeviceSparseProperties(this.#data.subarray(764, 764 + PhysicalDeviceSparseProperties.size));
    }
    set sparseProperties(value) {
        if (value[BUFFER].byteLength < PhysicalDeviceSparseProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 764);
    }
}
export class ExtensionProperties {
    static size = 260;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExtensionProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExtensionProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExtensionProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExtensionProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.extensionName && (this.extensionName = data.extensionName), void 0 !== data.specVersion && (this.specVersion = data.specVersion);
    }
    get extensionName() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 0, 256);
    }
    set extensionName(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get specVersion() {
        return this.#view.getUint32(256, LE);
    }
    set specVersion(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
}
export class LayerProperties {
    static size = 520;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(LayerProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, LayerProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < LayerProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(LayerProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.layerName && (this.layerName = data.layerName), void 0 !== data.specVersion && (this.specVersion = data.specVersion), void 0 !== data.implementationVersion && (this.implementationVersion = data.implementationVersion), void 0 !== data.description && (this.description = data.description);
    }
    get layerName() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 0, 256);
    }
    set layerName(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get specVersion() {
        return this.#view.getUint32(256, LE);
    }
    set specVersion(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
    get implementationVersion() {
        return this.#view.getUint32(260, LE);
    }
    set implementationVersion(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 264, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 264);
    }
}
export class ApplicationInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ApplicationInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ApplicationInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ApplicationInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ApplicationInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pApplicationName && (this.pApplicationName = data.pApplicationName), void 0 !== data.applicationVersion && (this.applicationVersion = data.applicationVersion), void 0 !== data.pEngineName && (this.pEngineName = data.pEngineName), void 0 !== data.engineVersion && (this.engineVersion = data.engineVersion), void 0 !== data.apiVersion && (this.apiVersion = data.apiVersion);
        this.sType = StructureType.APPLICATION_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pApplicationName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pApplicationName(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get applicationVersion() {
        return this.#view.getUint32(24, LE);
    }
    set applicationVersion(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pEngineName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pEngineName(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get engineVersion() {
        return this.#view.getUint32(40, LE);
    }
    set engineVersion(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get apiVersion() {
        return this.#view.getUint32(44, LE);
    }
    set apiVersion(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class AllocationCallbacks {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AllocationCallbacks.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AllocationCallbacks.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AllocationCallbacks.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AllocationCallbacks.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pUserData && (this.pUserData = data.pUserData), void 0 !== data.pfnAllocation && (this.pfnAllocation = data.pfnAllocation), void 0 !== data.pfnReallocation && (this.pfnReallocation = data.pfnReallocation), void 0 !== data.pfnFree && (this.pfnFree = data.pfnFree), void 0 !== data.pfnInternalAllocation && (this.pfnInternalAllocation = data.pfnInternalAllocation), void 0 !== data.pfnInternalFree && (this.pfnInternalFree = data.pfnInternalFree);
    }
    get pUserData() {
        return this.#view.getBigUint64(0, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get pfnAllocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnAllocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnReallocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnReallocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnFree() {
        throw new Error('Unknown type: "function"');
    }
    set pfnFree(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnInternalAllocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnInternalAllocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnInternalFree() {
        throw new Error('Unknown type: "function"');
    }
    set pfnInternalFree(value) {
        throw new Error('Unknown type: "function"');
    }
}
export class DeviceQueueCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceQueueCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceQueueCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceQueueCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceQueueCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.queueFamilyIndex && (this.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.queueCount && (this.queueCount = data.queueCount), void 0 !== data.pQueuePriorities && (this.pQueuePriorities = data.pQueuePriorities);
        this.sType = StructureType.DEVICE_QUEUE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queueCount() {
        return this.#view.getUint32(24, LE);
    }
    set queueCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pQueuePriorities() {
        return this.#view.getBigUint64(32, LE);
    }
    set pQueuePriorities(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceCreateInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.queueCreateInfoCount && (this.queueCreateInfoCount = data.queueCreateInfoCount), void 0 !== data.pQueueCreateInfos && (this.pQueueCreateInfos = data.pQueueCreateInfos), void 0 !== data.enabledLayerCount && (this.enabledLayerCount = data.enabledLayerCount), void 0 !== data.ppEnabledLayerNames && (this.ppEnabledLayerNames = data.ppEnabledLayerNames), void 0 !== data.enabledExtensionCount && (this.enabledExtensionCount = data.enabledExtensionCount), void 0 !== data.ppEnabledExtensionNames && (this.ppEnabledExtensionNames = data.ppEnabledExtensionNames), void 0 !== data.pEnabledFeatures && (this.pEnabledFeatures = data.pEnabledFeatures);
        this.sType = StructureType.DEVICE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueCreateInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set queueCreateInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pQueueCreateInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pQueueCreateInfos(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get enabledLayerCount() {
        return this.#view.getUint32(32, LE);
    }
    set enabledLayerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get ppEnabledLayerNames() {
        return this.#view.getBigUint64(40, LE);
    }
    set ppEnabledLayerNames(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get enabledExtensionCount() {
        return this.#view.getUint32(48, LE);
    }
    set enabledExtensionCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get ppEnabledExtensionNames() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppEnabledExtensionNames(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pEnabledFeatures() {
        return this.#view.getBigUint64(64, LE);
    }
    set pEnabledFeatures(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class InstanceCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(InstanceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, InstanceCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < InstanceCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(InstanceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pApplicationInfo && (this.pApplicationInfo = data.pApplicationInfo), void 0 !== data.enabledLayerCount && (this.enabledLayerCount = data.enabledLayerCount), void 0 !== data.ppEnabledLayerNames && (this.ppEnabledLayerNames = data.ppEnabledLayerNames), void 0 !== data.enabledExtensionCount && (this.enabledExtensionCount = data.enabledExtensionCount), void 0 !== data.ppEnabledExtensionNames && (this.ppEnabledExtensionNames = data.ppEnabledExtensionNames);
        this.sType = StructureType.INSTANCE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pApplicationInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pApplicationInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get enabledLayerCount() {
        return this.#view.getUint32(32, LE);
    }
    set enabledLayerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get ppEnabledLayerNames() {
        return this.#view.getBigUint64(40, LE);
    }
    set ppEnabledLayerNames(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get enabledExtensionCount() {
        return this.#view.getUint32(48, LE);
    }
    set enabledExtensionCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get ppEnabledExtensionNames() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppEnabledExtensionNames(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class QueueFamilyProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.queueFlags && (this.queueFlags = data.queueFlags), void 0 !== data.queueCount && (this.queueCount = data.queueCount), void 0 !== data.timestampValidBits && (this.timestampValidBits = data.timestampValidBits), void 0 !== data.minImageTransferGranularity && (this.minImageTransferGranularity = data.minImageTransferGranularity);
    }
    get queueFlags() {
        return this.#view.getUint32(0, LE);
    }
    set queueFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get queueCount() {
        return this.#view.getUint32(4, LE);
    }
    set queueCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get timestampValidBits() {
        return this.#view.getUint32(8, LE);
    }
    set timestampValidBits(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get minImageTransferGranularity() {
        return new Extent3D(this.#data.subarray(12, 12 + Extent3D.size));
    }
    set minImageTransferGranularity(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
}
export class PhysicalDeviceMemoryProperties {
    static size = 520;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.memoryTypeCount && (this.memoryTypeCount = data.memoryTypeCount), void 0 !== data.memoryTypes && (this.memoryTypes = data.memoryTypes), void 0 !== data.memoryHeapCount && (this.memoryHeapCount = data.memoryHeapCount), void 0 !== data.memoryHeaps && (this.memoryHeaps = data.memoryHeaps);
    }
    get memoryTypeCount() {
        return this.#view.getUint32(0, LE);
    }
    set memoryTypeCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get memoryTypes() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(new MemoryType(this.#data.subarray(4 + 8 * i, 4 + 8 * i + MemoryType.size)));
        return result;
    }
    set memoryTypes(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < MemoryType.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 4 + 8 * i);
        }
    }
    get memoryHeapCount() {
        return this.#view.getUint32(260, LE);
    }
    set memoryHeapCount(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get memoryHeaps() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(new MemoryHeap(this.#data.subarray(264 + 16 * i, 264 + 16 * i + MemoryHeap.size)));
        return result;
    }
    set memoryHeaps(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < MemoryHeap.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 264 + 16 * i);
        }
    }
}
export class MemoryAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.allocationSize && (this.allocationSize = data.allocationSize), void 0 !== data.memoryTypeIndex && (this.memoryTypeIndex = data.memoryTypeIndex);
        this.sType = StructureType.MEMORY_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get allocationSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set allocationSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memoryTypeIndex() {
        return this.#view.getUint32(24, LE);
    }
    set memoryTypeIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class MemoryRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryRequirements.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryRequirements.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.size && (this.size = data.size), void 0 !== data.alignment && (this.alignment = data.alignment), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
    }
    get size() {
        return this.#view.getBigUint64(0, LE);
    }
    set size(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get alignment() {
        return this.#view.getBigUint64(8, LE);
    }
    set alignment(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SparseImageFormatProperties {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageFormatProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageFormatProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask), void 0 !== data.imageGranularity && (this.imageGranularity = data.imageGranularity), void 0 !== data.flags && (this.flags = data.flags);
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get imageGranularity() {
        return new Extent3D(this.#data.subarray(4, 4 + Extent3D.size));
    }
    set imageGranularity(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SparseImageMemoryRequirements {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageMemoryRequirements.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageMemoryRequirements.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.formatProperties && (this.formatProperties = data.formatProperties), void 0 !== data.imageMipTailFirstLod && (this.imageMipTailFirstLod = data.imageMipTailFirstLod), void 0 !== data.imageMipTailSize && (this.imageMipTailSize = data.imageMipTailSize), void 0 !== data.imageMipTailOffset && (this.imageMipTailOffset = data.imageMipTailOffset), void 0 !== data.imageMipTailStride && (this.imageMipTailStride = data.imageMipTailStride);
    }
    get formatProperties() {
        return new SparseImageFormatProperties(this.#data.subarray(0, 0 + SparseImageFormatProperties.size));
    }
    set formatProperties(value) {
        if (value[BUFFER].byteLength < SparseImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get imageMipTailFirstLod() {
        return this.#view.getUint32(20, LE);
    }
    set imageMipTailFirstLod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageMipTailSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set imageMipTailSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get imageMipTailOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set imageMipTailOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get imageMipTailStride() {
        return this.#view.getBigUint64(40, LE);
    }
    set imageMipTailStride(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class MemoryType {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryType.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryType.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryType.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryType.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.propertyFlags && (this.propertyFlags = data.propertyFlags), void 0 !== data.heapIndex && (this.heapIndex = data.heapIndex);
    }
    get propertyFlags() {
        return this.#view.getUint32(0, LE);
    }
    set propertyFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get heapIndex() {
        return this.#view.getUint32(4, LE);
    }
    set heapIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class MemoryHeap {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryHeap.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryHeap.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryHeap.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryHeap.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.size && (this.size = data.size), void 0 !== data.flags && (this.flags = data.flags);
    }
    get size() {
        return this.#view.getBigUint64(0, LE);
    }
    set size(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(8, LE);
    }
    set flags(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class MappedMemoryRange {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MappedMemoryRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MappedMemoryRange.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MappedMemoryRange.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MappedMemoryRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size);
        this.sType = StructureType.MAPPED_MEMORY_RANGE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(24, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class FormatProperties {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FormatProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FormatProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.linearTilingFeatures && (this.linearTilingFeatures = data.linearTilingFeatures), void 0 !== data.optimalTilingFeatures && (this.optimalTilingFeatures = data.optimalTilingFeatures), void 0 !== data.bufferFeatures && (this.bufferFeatures = data.bufferFeatures);
    }
    get linearTilingFeatures() {
        return this.#view.getUint32(0, LE);
    }
    set linearTilingFeatures(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get optimalTilingFeatures() {
        return this.#view.getUint32(4, LE);
    }
    set optimalTilingFeatures(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get bufferFeatures() {
        return this.#view.getUint32(8, LE);
    }
    set bufferFeatures(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class ImageFormatProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageFormatProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageFormatProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.maxExtent && (this.maxExtent = data.maxExtent), void 0 !== data.maxMipLevels && (this.maxMipLevels = data.maxMipLevels), void 0 !== data.maxArrayLayers && (this.maxArrayLayers = data.maxArrayLayers), void 0 !== data.sampleCounts && (this.sampleCounts = data.sampleCounts), void 0 !== data.maxResourceSize && (this.maxResourceSize = data.maxResourceSize);
    }
    get maxExtent() {
        return new Extent3D(this.#data.subarray(0, 0 + Extent3D.size));
    }
    set maxExtent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get maxMipLevels() {
        return this.#view.getUint32(12, LE);
    }
    set maxMipLevels(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get maxArrayLayers() {
        return this.#view.getUint32(16, LE);
    }
    set maxArrayLayers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleCounts() {
        return this.#view.getUint32(20, LE);
    }
    set sampleCounts(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxResourceSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxResourceSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class DescriptorBufferInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorBufferInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorBufferInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorBufferInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorBufferInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.range && (this.range = data.range);
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(8, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(16, LE);
    }
    set range(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class DescriptorImageInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorImageInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorImageInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorImageInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorImageInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.sampler && (this.sampler = data.sampler), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.imageLayout && (this.imageLayout = data.imageLayout);
    }
    get sampler() {
        return this.#view.getBigUint64(0, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(8, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(16, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class WriteDescriptorSet {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(WriteDescriptorSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, WriteDescriptorSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < WriteDescriptorSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(WriteDescriptorSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dstSet && (this.dstSet = data.dstSet), void 0 !== data.dstBinding && (this.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (this.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (this.descriptorCount = data.descriptorCount), void 0 !== data.descriptorType && (this.descriptorType = data.descriptorType), void 0 !== data.pImageInfo && (this.pImageInfo = data.pImageInfo), void 0 !== data.pBufferInfo && (this.pBufferInfo = data.pBufferInfo), void 0 !== data.pTexelBufferView && (this.pTexelBufferView = data.pTexelBufferView);
        this.sType = StructureType.WRITE_DESCRIPTOR_SET;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dstSet() {
        return this.#view.getBigUint64(16, LE);
    }
    set dstSet(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dstBinding() {
        return this.#view.getUint32(24, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(28, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(32, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(36, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pImageInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pImageInfo(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pBufferInfo() {
        return this.#view.getBigUint64(48, LE);
    }
    set pBufferInfo(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pTexelBufferView() {
        return this.#view.getBigUint64(56, LE);
    }
    set pTexelBufferView(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class CopyDescriptorSet {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyDescriptorSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyDescriptorSet.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyDescriptorSet.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyDescriptorSet.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcSet && (this.srcSet = data.srcSet), void 0 !== data.srcBinding && (this.srcBinding = data.srcBinding), void 0 !== data.srcArrayElement && (this.srcArrayElement = data.srcArrayElement), void 0 !== data.dstSet && (this.dstSet = data.dstSet), void 0 !== data.dstBinding && (this.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (this.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (this.descriptorCount = data.descriptorCount);
        this.sType = StructureType.COPY_DESCRIPTOR_SET;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcSet() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcSet(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get srcBinding() {
        return this.#view.getUint32(24, LE);
    }
    set srcBinding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get srcArrayElement() {
        return this.#view.getUint32(28, LE);
    }
    set srcArrayElement(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get dstSet() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstSet(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get dstBinding() {
        return this.#view.getUint32(40, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(44, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(48, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class BufferCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.size && (this.size = data.size), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.sharingMode && (this.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (this.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (this.pQueueFamilyIndices = data.pQueueFamilyIndices);
        this.sType = StructureType.BUFFER_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(24, LE);
    }
    set size(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(32, LE);
    }
    set usage(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(36, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(40, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class BufferViewCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferViewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferViewCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferViewCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferViewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.format && (this.format = data.format), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.range && (this.range = data.range);
        this.sType = StructureType.BUFFER_VIEW_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(32, LE);
    }
    set format(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(40, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(48, LE);
    }
    set range(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class ImageSubresource {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSubresource.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSubresource.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSubresource.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSubresource.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask), void 0 !== data.mipLevel && (this.mipLevel = data.mipLevel), void 0 !== data.arrayLayer && (this.arrayLayer = data.arrayLayer);
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get mipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set mipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get arrayLayer() {
        return this.#view.getUint32(8, LE);
    }
    set arrayLayer(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class ImageSubresourceLayers {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSubresourceLayers.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSubresourceLayers.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSubresourceLayers.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask), void 0 !== data.mipLevel && (this.mipLevel = data.mipLevel), void 0 !== data.baseArrayLayer && (this.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (this.layerCount = data.layerCount);
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get mipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set mipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(8, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(12, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class ImageSubresourceRange {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSubresourceRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSubresourceRange.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSubresourceRange.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSubresourceRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask), void 0 !== data.baseMipLevel && (this.baseMipLevel = data.baseMipLevel), void 0 !== data.levelCount && (this.levelCount = data.levelCount), void 0 !== data.baseArrayLayer && (this.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (this.layerCount = data.layerCount);
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get baseMipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set baseMipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get levelCount() {
        return this.#view.getUint32(8, LE);
    }
    set levelCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(12, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(16, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryBarrier {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryBarrier.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryBarrier.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask);
        this.sType = StructureType.MEMORY_BARRIER;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class BufferMemoryBarrier {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferMemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferMemoryBarrier.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferMemoryBarrier.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferMemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.srcQueueFamilyIndex && (this.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (this.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size);
        this.sType = StructureType.BUFFER_MEMORY_BARRIER;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(24, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(28, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(40, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(48, LE);
    }
    set size(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class ImageMemoryBarrier {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageMemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageMemoryBarrier.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageMemoryBarrier.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageMemoryBarrier.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.oldLayout && (this.oldLayout = data.oldLayout), void 0 !== data.newLayout && (this.newLayout = data.newLayout), void 0 !== data.srcQueueFamilyIndex && (this.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (this.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.image && (this.image = data.image), void 0 !== data.subresourceRange && (this.subresourceRange = data.subresourceRange);
        this.sType = StructureType.IMAGE_MEMORY_BARRIER;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get oldLayout() {
        return this.#view.getUint32(24, LE);
    }
    set oldLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get newLayout() {
        return this.#view.getUint32(28, LE);
    }
    set newLayout(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(32, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(36, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(40, LE);
    }
    set image(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get subresourceRange() {
        return new ImageSubresourceRange(this.#data.subarray(48, 48 + ImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < ImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
}
export class ImageCreateInfo {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.imageType && (this.imageType = data.imageType), void 0 !== data.format && (this.format = data.format), void 0 !== data.extent && (this.extent = data.extent), void 0 !== data.mipLevels && (this.mipLevels = data.mipLevels), void 0 !== data.arrayLayers && (this.arrayLayers = data.arrayLayers), void 0 !== data.samples && (this.samples = data.samples), void 0 !== data.tiling && (this.tiling = data.tiling), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.sharingMode && (this.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (this.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (this.pQueueFamilyIndices = data.pQueueFamilyIndices), void 0 !== data.initialLayout && (this.initialLayout = data.initialLayout);
        this.sType = StructureType.IMAGE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imageType() {
        return this.#view.getUint32(20, LE);
    }
    set imageType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(24, LE);
    }
    set format(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(28, 28 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get mipLevels() {
        return this.#view.getUint32(40, LE);
    }
    set mipLevels(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get arrayLayers() {
        return this.#view.getUint32(44, LE);
    }
    set arrayLayers(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(48, LE);
    }
    set samples(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(52, LE);
    }
    set tiling(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(56, LE);
    }
    set usage(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(60, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(64, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(72, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(80, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class SubresourceLayout {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubresourceLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubresourceLayout.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubresourceLayout.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubresourceLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size), void 0 !== data.rowPitch && (this.rowPitch = data.rowPitch), void 0 !== data.arrayPitch && (this.arrayPitch = data.arrayPitch), void 0 !== data.depthPitch && (this.depthPitch = data.depthPitch);
    }
    get offset() {
        return this.#view.getBigUint64(0, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rowPitch() {
        return this.#view.getBigUint64(16, LE);
    }
    set rowPitch(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get arrayPitch() {
        return this.#view.getBigUint64(24, LE);
    }
    set arrayPitch(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get depthPitch() {
        return this.#view.getBigUint64(32, LE);
    }
    set depthPitch(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class ImageViewCreateInfo {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.image && (this.image = data.image), void 0 !== data.viewType && (this.viewType = data.viewType), void 0 !== data.format && (this.format = data.format), void 0 !== data.components && (this.components = data.components), void 0 !== data.subresourceRange && (this.subresourceRange = data.subresourceRange);
        this.sType = StructureType.IMAGE_VIEW_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(24, LE);
    }
    set image(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get viewType() {
        return this.#view.getUint32(32, LE);
    }
    set viewType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(36, LE);
    }
    set format(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get components() {
        return new ComponentMapping(this.#data.subarray(40, 40 + ComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get subresourceRange() {
        return new ImageSubresourceRange(this.#data.subarray(56, 56 + ImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < ImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class BufferCopy {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCopy.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCopy.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.size && (this.size = data.size);
    }
    get srcOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstOffset() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstOffset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class SparseMemoryBind {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseMemoryBind.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseMemoryBind.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseMemoryBind.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseMemoryBind.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.resourceOffset && (this.resourceOffset = data.resourceOffset), void 0 !== data.size && (this.size = data.size), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset), void 0 !== data.flags && (this.flags = data.flags);
    }
    get resourceOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set resourceOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class SparseImageMemoryBind {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageMemoryBind.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageMemoryBind.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageMemoryBind.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageMemoryBind.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.subresource && (this.subresource = data.subresource), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.extent && (this.extent = data.extent), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset), void 0 !== data.flags && (this.flags = data.flags);
    }
    get subresource() {
        return new ImageSubresource(this.#data.subarray(0, 0 + ImageSubresource.size));
    }
    set subresource(value) {
        if (value[BUFFER].byteLength < ImageSubresource.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get offset() {
        return new Offset3D(this.#data.subarray(12, 12 + Offset3D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(24, 24 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get memory() {
        return this.#view.getBigUint64(40, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(48, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(56, LE);
    }
    set flags(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class SparseBufferMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseBufferMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseBufferMemoryBindInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseBufferMemoryBindInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseBufferMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.bindCount && (this.bindCount = data.bindCount), void 0 !== data.pBinds && (this.pBinds = data.pBinds);
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SparseImageOpaqueMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageOpaqueMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageOpaqueMemoryBindInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageOpaqueMemoryBindInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageOpaqueMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.image && (this.image = data.image), void 0 !== data.bindCount && (this.bindCount = data.bindCount), void 0 !== data.pBinds && (this.pBinds = data.pBinds);
    }
    get image() {
        return this.#view.getBigUint64(0, LE);
    }
    set image(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SparseImageMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageMemoryBindInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageMemoryBindInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageMemoryBindInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.image && (this.image = data.image), void 0 !== data.bindCount && (this.bindCount = data.bindCount), void 0 !== data.pBinds && (this.pBinds = data.pBinds);
    }
    get image() {
        return this.#view.getBigUint64(0, LE);
    }
    set image(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class BindSparseInfo {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindSparseInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindSparseInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindSparseInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindSparseInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (this.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (this.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.bufferBindCount && (this.bufferBindCount = data.bufferBindCount), void 0 !== data.pBufferBinds && (this.pBufferBinds = data.pBufferBinds), void 0 !== data.imageOpaqueBindCount && (this.imageOpaqueBindCount = data.imageOpaqueBindCount), void 0 !== data.pImageOpaqueBinds && (this.pImageOpaqueBinds = data.pImageOpaqueBinds), void 0 !== data.imageBindCount && (this.imageBindCount = data.imageBindCount), void 0 !== data.pImageBinds && (this.pImageBinds = data.pImageBinds), void 0 !== data.signalSemaphoreCount && (this.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphores && (this.pSignalSemaphores = data.pSignalSemaphores);
        this.sType = StructureType.BIND_SPARSE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get bufferBindCount() {
        return this.#view.getUint32(32, LE);
    }
    set bufferBindCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pBufferBinds() {
        return this.#view.getBigUint64(40, LE);
    }
    set pBufferBinds(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get imageOpaqueBindCount() {
        return this.#view.getUint32(48, LE);
    }
    set imageOpaqueBindCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pImageOpaqueBinds() {
        return this.#view.getBigUint64(56, LE);
    }
    set pImageOpaqueBinds(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get imageBindCount() {
        return this.#view.getUint32(64, LE);
    }
    set imageBindCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pImageBinds() {
        return this.#view.getBigUint64(72, LE);
    }
    set pImageBinds(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(80, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get pSignalSemaphores() {
        return this.#view.getBigUint64(88, LE);
    }
    set pSignalSemaphores(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
}
export class ImageCopy {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCopy.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCopy.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.extent && (this.extent = data.extent);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(0, 0 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffset() {
        return new Offset3D(this.#data.subarray(16, 16 + Offset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(28, 28 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get dstOffset() {
        return new Offset3D(this.#data.subarray(44, 44 + Offset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(56, 56 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class ImageBlit {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageBlit.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageBlit.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageBlit.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageBlit.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffsets && (this.srcOffsets = data.srcOffsets), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffsets && (this.dstOffsets = data.dstOffsets);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(0, 0 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new Offset3D(this.#data.subarray(16 + 12 * i, 16 + 12 * i + Offset3D.size)));
        return result;
    }
    set srcOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 16 + 12 * i);
        }
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(40, 40 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get dstOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new Offset3D(this.#data.subarray(56 + 12 * i, 56 + 12 * i + Offset3D.size)));
        return result;
    }
    set dstOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 56 + 12 * i);
        }
    }
}
export class BufferImageCopy {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferImageCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferImageCopy.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferImageCopy.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferImageCopy.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.bufferOffset && (this.bufferOffset = data.bufferOffset), void 0 !== data.bufferRowLength && (this.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (this.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (this.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (this.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (this.imageExtent = data.imageExtent);
    }
    get bufferOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(8, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(12, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get imageSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(16, 16 + ImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get imageOffset() {
        return new Offset3D(this.#data.subarray(32, 32 + Offset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageExtent() {
        return new Extent3D(this.#data.subarray(44, 44 + Extent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
}
export class CopyMemoryIndirectCommandNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMemoryIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMemoryIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMemoryIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMemoryIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcAddress && (this.srcAddress = data.srcAddress), void 0 !== data.dstAddress && (this.dstAddress = data.dstAddress), void 0 !== data.size && (this.size = data.size);
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class CopyMemoryToImageIndirectCommandNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMemoryToImageIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMemoryToImageIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMemoryToImageIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMemoryToImageIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcAddress && (this.srcAddress = data.srcAddress), void 0 !== data.bufferRowLength && (this.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (this.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (this.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (this.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (this.imageExtent = data.imageExtent);
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(8, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(12, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get imageSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(16, 16 + ImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get imageOffset() {
        return new Offset3D(this.#data.subarray(32, 32 + Offset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageExtent() {
        return new Extent3D(this.#data.subarray(44, 44 + Extent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
}
export class ImageResolve {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageResolve.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageResolve.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageResolve.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageResolve.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.extent && (this.extent = data.extent);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(0, 0 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffset() {
        return new Offset3D(this.#data.subarray(16, 16 + Offset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(28, 28 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get dstOffset() {
        return new Offset3D(this.#data.subarray(44, 44 + Offset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(56, 56 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class ShaderModuleCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShaderModuleCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShaderModuleCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShaderModuleCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShaderModuleCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.codeSize && (this.codeSize = data.codeSize), void 0 !== data.pCode && (this.pCode = data.pCode);
        this.sType = StructureType.SHADER_MODULE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get codeSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set codeSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pCode() {
        return this.#view.getBigUint64(32, LE);
    }
    set pCode(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorSetLayoutBinding {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetLayoutBinding.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetLayoutBinding.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetLayoutBinding.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetLayoutBinding.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.descriptorType && (this.descriptorType = data.descriptorType), void 0 !== data.descriptorCount && (this.descriptorCount = data.descriptorCount), void 0 !== data.stageFlags && (this.stageFlags = data.stageFlags), void 0 !== data.pImmutableSamplers && (this.pImmutableSamplers = data.pImmutableSamplers);
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(4, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(8, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get stageFlags() {
        return this.#view.getUint32(12, LE);
    }
    set stageFlags(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get pImmutableSamplers() {
        return this.#view.getBigUint64(16, LE);
    }
    set pImmutableSamplers(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorSetLayoutCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetLayoutCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetLayoutCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetLayoutCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetLayoutCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.bindingCount && (this.bindingCount = data.bindingCount), void 0 !== data.pBindings && (this.pBindings = data.pBindings);
        this.sType = StructureType.DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bindingCount() {
        return this.#view.getUint32(20, LE);
    }
    set bindingCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pBindings() {
        return this.#view.getBigUint64(24, LE);
    }
    set pBindings(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorPoolSize {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorPoolSize.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorPoolSize.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorPoolSize.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorPoolSize.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.type && (this.type = data.type), void 0 !== data.descriptorCount && (this.descriptorCount = data.descriptorCount);
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(4, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class DescriptorPoolCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorPoolCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorPoolCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.maxSets && (this.maxSets = data.maxSets), void 0 !== data.poolSizeCount && (this.poolSizeCount = data.poolSizeCount), void 0 !== data.pPoolSizes && (this.pPoolSizes = data.pPoolSizes);
        this.sType = StructureType.DESCRIPTOR_POOL_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSets() {
        return this.#view.getUint32(20, LE);
    }
    set maxSets(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get poolSizeCount() {
        return this.#view.getUint32(24, LE);
    }
    set poolSizeCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPoolSizes() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPoolSizes(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorSetAllocateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorPool && (this.descriptorPool = data.descriptorPool), void 0 !== data.descriptorSetCount && (this.descriptorSetCount = data.descriptorSetCount), void 0 !== data.pSetLayouts && (this.pSetLayouts = data.pSetLayouts);
        this.sType = StructureType.DESCRIPTOR_SET_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorPool() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorPool(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get descriptorSetCount() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorSetCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSetLayouts() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSetLayouts(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class SpecializationMapEntry {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SpecializationMapEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SpecializationMapEntry.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SpecializationMapEntry.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SpecializationMapEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.constantID && (this.constantID = data.constantID), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size);
    }
    get constantID() {
        return this.#view.getUint32(0, LE);
    }
    set constantID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(4, LE);
    }
    set offset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class SpecializationInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SpecializationInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SpecializationInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SpecializationInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SpecializationInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.mapEntryCount && (this.mapEntryCount = data.mapEntryCount), void 0 !== data.pMapEntries && (this.pMapEntries = data.pMapEntries), void 0 !== data.dataSize && (this.dataSize = data.dataSize), void 0 !== data.pData && (this.pData = data.pData);
    }
    get mapEntryCount() {
        return this.#view.getUint32(0, LE);
    }
    set mapEntryCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pMapEntries() {
        return this.#view.getBigUint64(8, LE);
    }
    set pMapEntries(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineShaderStageCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineShaderStageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineShaderStageCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineShaderStageCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineShaderStageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.stage && (this.stage = data.stage), void 0 !== data.module && (this.module = data.module), void 0 !== data.pName && (this.pName = data.pName), void 0 !== data.pSpecializationInfo && (this.pSpecializationInfo = data.pSpecializationInfo);
        this.sType = StructureType.PIPELINE_SHADER_STAGE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stage() {
        return this.#view.getUint32(20, LE);
    }
    set stage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get module() {
        return this.#view.getBigUint64(24, LE);
    }
    set module(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pName(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pSpecializationInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSpecializationInfo(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class ComputePipelineCreateInfo {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ComputePipelineCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ComputePipelineCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ComputePipelineCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ComputePipelineCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.stage && (this.stage = data.stage), void 0 !== data.layout && (this.layout = data.layout), void 0 !== data.basePipelineHandle && (this.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (this.basePipelineIndex = data.basePipelineIndex);
        this.sType = StructureType.COMPUTE_PIPELINE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stage() {
        return new PipelineShaderStageCreateInfo(this.#data.subarray(20, 20 + PipelineShaderStageCreateInfo.size));
    }
    set stage(value) {
        if (value[BUFFER].byteLength < PipelineShaderStageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get layout() {
        return this.#view.getBigUint64(72, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(80, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(88, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(88, Number(value), LE);
    }
}
export class VertexInputBindingDescription {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VertexInputBindingDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VertexInputBindingDescription.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VertexInputBindingDescription.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VertexInputBindingDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.stride && (this.stride = data.stride), void 0 !== data.inputRate && (this.inputRate = data.inputRate);
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(4, LE);
    }
    set stride(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get inputRate() {
        return this.#view.getUint32(8, LE);
    }
    set inputRate(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VertexInputAttributeDescription {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VertexInputAttributeDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VertexInputAttributeDescription.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VertexInputAttributeDescription.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VertexInputAttributeDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.location && (this.location = data.location), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.format && (this.format = data.format), void 0 !== data.offset && (this.offset = data.offset);
    }
    get location() {
        return this.#view.getUint32(0, LE);
    }
    set location(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get binding() {
        return this.#view.getUint32(4, LE);
    }
    set binding(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(8, LE);
    }
    set format(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(12, LE);
    }
    set offset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class PipelineVertexInputStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineVertexInputStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineVertexInputStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineVertexInputStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineVertexInputStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.vertexBindingDescriptionCount && (this.vertexBindingDescriptionCount = data.vertexBindingDescriptionCount), void 0 !== data.pVertexBindingDescriptions && (this.pVertexBindingDescriptions = data.pVertexBindingDescriptions), void 0 !== data.vertexAttributeDescriptionCount && (this.vertexAttributeDescriptionCount = data.vertexAttributeDescriptionCount), void 0 !== data.pVertexAttributeDescriptions && (this.pVertexAttributeDescriptions = data.pVertexAttributeDescriptions);
        this.sType = StructureType.PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexBindingDescriptionCount() {
        return this.#view.getUint32(20, LE);
    }
    set vertexBindingDescriptionCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pVertexBindingDescriptions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVertexBindingDescriptions(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get vertexAttributeDescriptionCount() {
        return this.#view.getUint32(32, LE);
    }
    set vertexAttributeDescriptionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pVertexAttributeDescriptions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pVertexAttributeDescriptions(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineInputAssemblyStateCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineInputAssemblyStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineInputAssemblyStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineInputAssemblyStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineInputAssemblyStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.topology && (this.topology = data.topology), void 0 !== data.primitiveRestartEnable && (this.primitiveRestartEnable = data.primitiveRestartEnable);
        this.sType = StructureType.PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get topology() {
        return this.#view.getUint32(20, LE);
    }
    set topology(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primitiveRestartEnable() {
        return this.#view.getUint32(24, LE);
    }
    set primitiveRestartEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PipelineTessellationStateCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineTessellationStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineTessellationStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineTessellationStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineTessellationStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.patchControlPoints && (this.patchControlPoints = data.patchControlPoints);
        this.sType = StructureType.PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get patchControlPoints() {
        return this.#view.getUint32(20, LE);
    }
    set patchControlPoints(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PipelineViewportStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.viewportCount && (this.viewportCount = data.viewportCount), void 0 !== data.pViewports && (this.pViewports = data.pViewports), void 0 !== data.scissorCount && (this.scissorCount = data.scissorCount), void 0 !== data.pScissors && (this.pScissors = data.pScissors);
        this.sType = StructureType.PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewports() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewports(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get scissorCount() {
        return this.#view.getUint32(32, LE);
    }
    set scissorCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pScissors() {
        return this.#view.getBigUint64(40, LE);
    }
    set pScissors(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineRasterizationStateCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.depthClampEnable && (this.depthClampEnable = data.depthClampEnable), void 0 !== data.rasterizerDiscardEnable && (this.rasterizerDiscardEnable = data.rasterizerDiscardEnable), void 0 !== data.polygonMode && (this.polygonMode = data.polygonMode), void 0 !== data.cullMode && (this.cullMode = data.cullMode), void 0 !== data.frontFace && (this.frontFace = data.frontFace), void 0 !== data.depthBiasEnable && (this.depthBiasEnable = data.depthBiasEnable), void 0 !== data.depthBiasConstantFactor && (this.depthBiasConstantFactor = data.depthBiasConstantFactor), void 0 !== data.depthBiasClamp && (this.depthBiasClamp = data.depthBiasClamp), void 0 !== data.depthBiasSlopeFactor && (this.depthBiasSlopeFactor = data.depthBiasSlopeFactor), void 0 !== data.lineWidth && (this.lineWidth = data.lineWidth);
        this.sType = StructureType.PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthClampEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthClampEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rasterizerDiscardEnable() {
        return this.#view.getUint32(24, LE);
    }
    set rasterizerDiscardEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get polygonMode() {
        return this.#view.getUint32(28, LE);
    }
    set polygonMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get cullMode() {
        return this.#view.getUint32(32, LE);
    }
    set cullMode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get frontFace() {
        return this.#view.getUint32(36, LE);
    }
    set frontFace(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get depthBiasEnable() {
        return this.#view.getUint32(40, LE);
    }
    set depthBiasEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get depthBiasConstantFactor() {
        return this.#view.getFloat32(44, LE);
    }
    set depthBiasConstantFactor(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get depthBiasClamp() {
        return this.#view.getFloat32(48, LE);
    }
    set depthBiasClamp(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get depthBiasSlopeFactor() {
        return this.#view.getFloat32(52, LE);
    }
    set depthBiasSlopeFactor(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get lineWidth() {
        return this.#view.getFloat32(56, LE);
    }
    set lineWidth(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
}
export class PipelineMultisampleStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineMultisampleStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineMultisampleStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineMultisampleStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineMultisampleStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.rasterizationSamples && (this.rasterizationSamples = data.rasterizationSamples), void 0 !== data.sampleShadingEnable && (this.sampleShadingEnable = data.sampleShadingEnable), void 0 !== data.minSampleShading && (this.minSampleShading = data.minSampleShading), void 0 !== data.pSampleMask && (this.pSampleMask = data.pSampleMask), void 0 !== data.alphaToCoverageEnable && (this.alphaToCoverageEnable = data.alphaToCoverageEnable), void 0 !== data.alphaToOneEnable && (this.alphaToOneEnable = data.alphaToOneEnable);
        this.sType = StructureType.PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sampleShadingEnable() {
        return this.#view.getUint32(24, LE);
    }
    set sampleShadingEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get minSampleShading() {
        return this.#view.getFloat32(28, LE);
    }
    set minSampleShading(value) {
        this.#view.setFloat32(28, Number(value), LE);
    }
    get pSampleMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSampleMask(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get alphaToCoverageEnable() {
        return this.#view.getUint32(40, LE);
    }
    set alphaToCoverageEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get alphaToOneEnable() {
        return this.#view.getUint32(44, LE);
    }
    set alphaToOneEnable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class PipelineColorBlendAttachmentState {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineColorBlendAttachmentState.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineColorBlendAttachmentState.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineColorBlendAttachmentState.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineColorBlendAttachmentState.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.blendEnable && (this.blendEnable = data.blendEnable), void 0 !== data.srcColorBlendFactor && (this.srcColorBlendFactor = data.srcColorBlendFactor), void 0 !== data.dstColorBlendFactor && (this.dstColorBlendFactor = data.dstColorBlendFactor), void 0 !== data.colorBlendOp && (this.colorBlendOp = data.colorBlendOp), void 0 !== data.srcAlphaBlendFactor && (this.srcAlphaBlendFactor = data.srcAlphaBlendFactor), void 0 !== data.dstAlphaBlendFactor && (this.dstAlphaBlendFactor = data.dstAlphaBlendFactor), void 0 !== data.alphaBlendOp && (this.alphaBlendOp = data.alphaBlendOp), void 0 !== data.colorWriteMask && (this.colorWriteMask = data.colorWriteMask);
    }
    get blendEnable() {
        return this.#view.getUint32(0, LE);
    }
    set blendEnable(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get srcColorBlendFactor() {
        return this.#view.getUint32(4, LE);
    }
    set srcColorBlendFactor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dstColorBlendFactor() {
        return this.#view.getUint32(8, LE);
    }
    set dstColorBlendFactor(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get colorBlendOp() {
        return this.#view.getUint32(12, LE);
    }
    set colorBlendOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get srcAlphaBlendFactor() {
        return this.#view.getUint32(16, LE);
    }
    set srcAlphaBlendFactor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAlphaBlendFactor() {
        return this.#view.getUint32(20, LE);
    }
    set dstAlphaBlendFactor(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get alphaBlendOp() {
        return this.#view.getUint32(24, LE);
    }
    set alphaBlendOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get colorWriteMask() {
        return this.#view.getUint32(28, LE);
    }
    set colorWriteMask(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PipelineColorBlendStateCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineColorBlendStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineColorBlendStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineColorBlendStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineColorBlendStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.logicOpEnable && (this.logicOpEnable = data.logicOpEnable), void 0 !== data.logicOp && (this.logicOp = data.logicOp), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (this.pAttachments = data.pAttachments), void 0 !== data.blendConstants && (this.blendConstants = data.blendConstants);
        this.sType = StructureType.PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get logicOpEnable() {
        return this.#view.getUint32(20, LE);
    }
    set logicOpEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get logicOp() {
        return this.#view.getUint32(24, LE);
    }
    set logicOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(28, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get blendConstants() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 40, 4);
    }
    set blendConstants(value) {
        this.#data.set(new Uint8Array(value.buffer), 40);
    }
}
export class PipelineDynamicStateCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineDynamicStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineDynamicStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineDynamicStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineDynamicStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.dynamicStateCount && (this.dynamicStateCount = data.dynamicStateCount), void 0 !== data.pDynamicStates && (this.pDynamicStates = data.pDynamicStates);
        this.sType = StructureType.PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dynamicStateCount() {
        return this.#view.getUint32(20, LE);
    }
    set dynamicStateCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDynamicStates() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDynamicStates(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class StencilOpState {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StencilOpState.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StencilOpState.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StencilOpState.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StencilOpState.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.failOp && (this.failOp = data.failOp), void 0 !== data.passOp && (this.passOp = data.passOp), void 0 !== data.depthFailOp && (this.depthFailOp = data.depthFailOp), void 0 !== data.compareOp && (this.compareOp = data.compareOp), void 0 !== data.compareMask && (this.compareMask = data.compareMask), void 0 !== data.writeMask && (this.writeMask = data.writeMask), void 0 !== data.reference && (this.reference = data.reference);
    }
    get failOp() {
        return this.#view.getUint32(0, LE);
    }
    set failOp(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get passOp() {
        return this.#view.getUint32(4, LE);
    }
    set passOp(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depthFailOp() {
        return this.#view.getUint32(8, LE);
    }
    set depthFailOp(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get compareOp() {
        return this.#view.getUint32(12, LE);
    }
    set compareOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get compareMask() {
        return this.#view.getUint32(16, LE);
    }
    set compareMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get writeMask() {
        return this.#view.getUint32(20, LE);
    }
    set writeMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get reference() {
        return this.#view.getUint32(24, LE);
    }
    set reference(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PipelineDepthStencilStateCreateInfo {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineDepthStencilStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineDepthStencilStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineDepthStencilStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineDepthStencilStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.depthTestEnable && (this.depthTestEnable = data.depthTestEnable), void 0 !== data.depthWriteEnable && (this.depthWriteEnable = data.depthWriteEnable), void 0 !== data.depthCompareOp && (this.depthCompareOp = data.depthCompareOp), void 0 !== data.depthBoundsTestEnable && (this.depthBoundsTestEnable = data.depthBoundsTestEnable), void 0 !== data.stencilTestEnable && (this.stencilTestEnable = data.stencilTestEnable), void 0 !== data.front && (this.front = data.front), void 0 !== data.back && (this.back = data.back), void 0 !== data.minDepthBounds && (this.minDepthBounds = data.minDepthBounds), void 0 !== data.maxDepthBounds && (this.maxDepthBounds = data.maxDepthBounds);
        this.sType = StructureType.PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthTestEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthTestEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get depthWriteEnable() {
        return this.#view.getUint32(24, LE);
    }
    set depthWriteEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get depthCompareOp() {
        return this.#view.getUint32(28, LE);
    }
    set depthCompareOp(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get depthBoundsTestEnable() {
        return this.#view.getUint32(32, LE);
    }
    set depthBoundsTestEnable(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilTestEnable() {
        return this.#view.getUint32(36, LE);
    }
    set stencilTestEnable(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get front() {
        return new StencilOpState(this.#data.subarray(40, 40 + StencilOpState.size));
    }
    set front(value) {
        if (value[BUFFER].byteLength < StencilOpState.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get back() {
        return new StencilOpState(this.#data.subarray(68, 68 + StencilOpState.size));
    }
    set back(value) {
        if (value[BUFFER].byteLength < StencilOpState.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 68);
    }
    get minDepthBounds() {
        return this.#view.getFloat32(96, LE);
    }
    set minDepthBounds(value) {
        this.#view.setFloat32(96, Number(value), LE);
    }
    get maxDepthBounds() {
        return this.#view.getFloat32(100, LE);
    }
    set maxDepthBounds(value) {
        this.#view.setFloat32(100, Number(value), LE);
    }
}
export class GraphicsPipelineCreateInfo {
    static size = 144;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GraphicsPipelineCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GraphicsPipelineCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GraphicsPipelineCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GraphicsPipelineCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.stageCount && (this.stageCount = data.stageCount), void 0 !== data.pStages && (this.pStages = data.pStages), void 0 !== data.pVertexInputState && (this.pVertexInputState = data.pVertexInputState), void 0 !== data.pInputAssemblyState && (this.pInputAssemblyState = data.pInputAssemblyState), void 0 !== data.pTessellationState && (this.pTessellationState = data.pTessellationState), void 0 !== data.pViewportState && (this.pViewportState = data.pViewportState), void 0 !== data.pRasterizationState && (this.pRasterizationState = data.pRasterizationState), void 0 !== data.pMultisampleState && (this.pMultisampleState = data.pMultisampleState), void 0 !== data.pDepthStencilState && (this.pDepthStencilState = data.pDepthStencilState), void 0 !== data.pColorBlendState && (this.pColorBlendState = data.pColorBlendState), void 0 !== data.pDynamicState && (this.pDynamicState = data.pDynamicState), void 0 !== data.layout && (this.layout = data.layout), void 0 !== data.renderPass && (this.renderPass = data.renderPass), void 0 !== data.subpass && (this.subpass = data.subpass), void 0 !== data.basePipelineHandle && (this.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (this.basePipelineIndex = data.basePipelineIndex);
        this.sType = StructureType.GRAPHICS_PIPELINE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pVertexInputState() {
        return this.#view.getBigUint64(32, LE);
    }
    set pVertexInputState(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pInputAssemblyState() {
        return this.#view.getBigUint64(40, LE);
    }
    set pInputAssemblyState(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pTessellationState() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTessellationState(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pViewportState() {
        return this.#view.getBigUint64(56, LE);
    }
    set pViewportState(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pRasterizationState() {
        return this.#view.getBigUint64(64, LE);
    }
    set pRasterizationState(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get pMultisampleState() {
        return this.#view.getBigUint64(72, LE);
    }
    set pMultisampleState(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get pDepthStencilState() {
        return this.#view.getBigUint64(80, LE);
    }
    set pDepthStencilState(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
    get pColorBlendState() {
        return this.#view.getBigUint64(88, LE);
    }
    set pColorBlendState(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
    get pDynamicState() {
        return this.#view.getBigUint64(96, LE);
    }
    set pDynamicState(value) {
        this.#view.setBigUint64(96, BigInt(anyPointer(value)), LE);
    }
    get layout() {
        return this.#view.getBigUint64(104, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(104, BigInt(anyPointer(value)), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(112, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(112, BigInt(anyPointer(value)), LE);
    }
    get subpass() {
        return this.#view.getUint32(120, LE);
    }
    set subpass(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(128, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(128, BigInt(anyPointer(value)), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(136, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(136, Number(value), LE);
    }
}
export class PipelineCacheCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCacheCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCacheCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCacheCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCacheCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.initialDataSize && (this.initialDataSize = data.initialDataSize), void 0 !== data.pInitialData && (this.pInitialData = data.pInitialData);
        this.sType = StructureType.PIPELINE_CACHE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialDataSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialDataSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pInitialData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInitialData(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineCacheHeaderVersionOne {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCacheHeaderVersionOne.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCacheHeaderVersionOne.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCacheHeaderVersionOne.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCacheHeaderVersionOne.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.headerSize && (this.headerSize = data.headerSize), void 0 !== data.headerVersion && (this.headerVersion = data.headerVersion), void 0 !== data.vendorID && (this.vendorID = data.vendorID), void 0 !== data.deviceID && (this.deviceID = data.deviceID), void 0 !== data.pipelineCacheUUID && (this.pipelineCacheUUID = data.pipelineCacheUUID);
    }
    get headerSize() {
        return this.#view.getUint32(0, LE);
    }
    set headerSize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get headerVersion() {
        return this.#view.getUint32(4, LE);
    }
    set headerVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get pipelineCacheUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set pipelineCacheUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
}
export class PushConstantRange {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PushConstantRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PushConstantRange.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PushConstantRange.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PushConstantRange.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.stageFlags && (this.stageFlags = data.stageFlags), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size);
    }
    get stageFlags() {
        return this.#view.getUint32(0, LE);
    }
    set stageFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(4, LE);
    }
    set offset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class PipelineLayoutCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineLayoutCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineLayoutCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineLayoutCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineLayoutCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.setLayoutCount && (this.setLayoutCount = data.setLayoutCount), void 0 !== data.pSetLayouts && (this.pSetLayouts = data.pSetLayouts), void 0 !== data.pushConstantRangeCount && (this.pushConstantRangeCount = data.pushConstantRangeCount), void 0 !== data.pPushConstantRanges && (this.pPushConstantRanges = data.pPushConstantRanges);
        this.sType = StructureType.PIPELINE_LAYOUT_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get setLayoutCount() {
        return this.#view.getUint32(20, LE);
    }
    set setLayoutCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pSetLayouts() {
        return this.#view.getBigUint64(24, LE);
    }
    set pSetLayouts(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pushConstantRangeCount() {
        return this.#view.getUint32(32, LE);
    }
    set pushConstantRangeCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPushConstantRanges() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPushConstantRanges(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class SamplerCreateInfo {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.magFilter && (this.magFilter = data.magFilter), void 0 !== data.minFilter && (this.minFilter = data.minFilter), void 0 !== data.mipmapMode && (this.mipmapMode = data.mipmapMode), void 0 !== data.addressModeU && (this.addressModeU = data.addressModeU), void 0 !== data.addressModeV && (this.addressModeV = data.addressModeV), void 0 !== data.addressModeW && (this.addressModeW = data.addressModeW), void 0 !== data.mipLodBias && (this.mipLodBias = data.mipLodBias), void 0 !== data.anisotropyEnable && (this.anisotropyEnable = data.anisotropyEnable), void 0 !== data.maxAnisotropy && (this.maxAnisotropy = data.maxAnisotropy), void 0 !== data.compareEnable && (this.compareEnable = data.compareEnable), void 0 !== data.compareOp && (this.compareOp = data.compareOp), void 0 !== data.minLod && (this.minLod = data.minLod), void 0 !== data.maxLod && (this.maxLod = data.maxLod), void 0 !== data.borderColor && (this.borderColor = data.borderColor), void 0 !== data.unnormalizedCoordinates && (this.unnormalizedCoordinates = data.unnormalizedCoordinates);
        this.sType = StructureType.SAMPLER_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get magFilter() {
        return this.#view.getUint32(20, LE);
    }
    set magFilter(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get minFilter() {
        return this.#view.getUint32(24, LE);
    }
    set minFilter(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get mipmapMode() {
        return this.#view.getUint32(28, LE);
    }
    set mipmapMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get addressModeU() {
        return this.#view.getUint32(32, LE);
    }
    set addressModeU(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get addressModeV() {
        return this.#view.getUint32(36, LE);
    }
    set addressModeV(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get addressModeW() {
        return this.#view.getUint32(40, LE);
    }
    set addressModeW(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get mipLodBias() {
        return this.#view.getFloat32(44, LE);
    }
    set mipLodBias(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get anisotropyEnable() {
        return this.#view.getUint32(48, LE);
    }
    set anisotropyEnable(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxAnisotropy() {
        return this.#view.getFloat32(52, LE);
    }
    set maxAnisotropy(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get compareEnable() {
        return this.#view.getUint32(56, LE);
    }
    set compareEnable(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get compareOp() {
        return this.#view.getUint32(60, LE);
    }
    set compareOp(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get minLod() {
        return this.#view.getFloat32(64, LE);
    }
    set minLod(value) {
        this.#view.setFloat32(64, Number(value), LE);
    }
    get maxLod() {
        return this.#view.getFloat32(68, LE);
    }
    set maxLod(value) {
        this.#view.setFloat32(68, Number(value), LE);
    }
    get borderColor() {
        return this.#view.getUint32(72, LE);
    }
    set borderColor(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get unnormalizedCoordinates() {
        return this.#view.getUint32(76, LE);
    }
    set unnormalizedCoordinates(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
}
export class CommandPoolCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandPoolCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandPoolCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.queueFamilyIndex && (this.queueFamilyIndex = data.queueFamilyIndex);
        this.sType = StructureType.COMMAND_POOL_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class CommandBufferAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.commandPool && (this.commandPool = data.commandPool), void 0 !== data.level && (this.level = data.level), void 0 !== data.commandBufferCount && (this.commandBufferCount = data.commandBufferCount);
        this.sType = StructureType.COMMAND_BUFFER_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get commandPool() {
        return this.#view.getBigUint64(16, LE);
    }
    set commandPool(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get level() {
        return this.#view.getUint32(24, LE);
    }
    set level(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(28, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class CommandBufferInheritanceInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferInheritanceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferInheritanceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferInheritanceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferInheritanceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.renderPass && (this.renderPass = data.renderPass), void 0 !== data.subpass && (this.subpass = data.subpass), void 0 !== data.framebuffer && (this.framebuffer = data.framebuffer), void 0 !== data.occlusionQueryEnable && (this.occlusionQueryEnable = data.occlusionQueryEnable), void 0 !== data.queryFlags && (this.queryFlags = data.queryFlags), void 0 !== data.pipelineStatistics && (this.pipelineStatistics = data.pipelineStatistics);
        this.sType = StructureType.COMMAND_BUFFER_INHERITANCE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get subpass() {
        return this.#view.getUint32(24, LE);
    }
    set subpass(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get framebuffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set framebuffer(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get occlusionQueryEnable() {
        return this.#view.getUint32(40, LE);
    }
    set occlusionQueryEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get queryFlags() {
        return this.#view.getUint32(44, LE);
    }
    set queryFlags(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pipelineStatistics() {
        return this.#view.getUint32(48, LE);
    }
    set pipelineStatistics(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class CommandBufferBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pInheritanceInfo && (this.pInheritanceInfo = data.pInheritanceInfo);
        this.sType = StructureType.COMMAND_BUFFER_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pInheritanceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pInheritanceInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class RenderPassBeginInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.renderPass && (this.renderPass = data.renderPass), void 0 !== data.framebuffer && (this.framebuffer = data.framebuffer), void 0 !== data.renderArea && (this.renderArea = data.renderArea), void 0 !== data.clearValueCount && (this.clearValueCount = data.clearValueCount), void 0 !== data.pClearValues && (this.pClearValues = data.pClearValues);
        this.sType = StructureType.RENDER_PASS_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get framebuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set framebuffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get renderArea() {
        return new Rect2D(this.#data.subarray(32, 32 + Rect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get clearValueCount() {
        return this.#view.getUint32(48, LE);
    }
    set clearValueCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pClearValues() {
        return this.#view.getBigUint64(56, LE);
    }
    set pClearValues(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class ClearDepthStencilValue {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ClearDepthStencilValue.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ClearDepthStencilValue.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ClearDepthStencilValue.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ClearDepthStencilValue.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.depth && (this.depth = data.depth), void 0 !== data.stencil && (this.stencil = data.stencil);
    }
    get depth() {
        return this.#view.getFloat32(0, LE);
    }
    set depth(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get stencil() {
        return this.#view.getUint32(4, LE);
    }
    set stencil(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class ClearAttachment {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ClearAttachment.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ClearAttachment.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ClearAttachment.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ClearAttachment.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask), void 0 !== data.colorAttachment && (this.colorAttachment = data.colorAttachment), void 0 !== data.clearValue && (this.clearValue = data.clearValue);
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get colorAttachment() {
        return this.#view.getUint32(4, LE);
    }
    set colorAttachment(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get clearValue() {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
    set clearValue(value) {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
}
export class AttachmentDescription {
    static size = 36;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentDescription.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentDescription.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.format && (this.format = data.format), void 0 !== data.samples && (this.samples = data.samples), void 0 !== data.loadOp && (this.loadOp = data.loadOp), void 0 !== data.storeOp && (this.storeOp = data.storeOp), void 0 !== data.stencilLoadOp && (this.stencilLoadOp = data.stencilLoadOp), void 0 !== data.stencilStoreOp && (this.stencilStoreOp = data.stencilStoreOp), void 0 !== data.initialLayout && (this.initialLayout = data.initialLayout), void 0 !== data.finalLayout && (this.finalLayout = data.finalLayout);
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(4, LE);
    }
    set format(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(8, LE);
    }
    set samples(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(12, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(16, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilLoadOp() {
        return this.#view.getUint32(20, LE);
    }
    set stencilLoadOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get stencilStoreOp() {
        return this.#view.getUint32(24, LE);
    }
    set stencilStoreOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(28, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get finalLayout() {
        return this.#view.getUint32(32, LE);
    }
    set finalLayout(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class AttachmentReference {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentReference.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentReference.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentReference.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentReference.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.attachment && (this.attachment = data.attachment), void 0 !== data.layout && (this.layout = data.layout);
    }
    get attachment() {
        return this.#view.getUint32(0, LE);
    }
    set attachment(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get layout() {
        return this.#view.getUint32(4, LE);
    }
    set layout(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class SubpassDescription {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassDescription.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassDescription.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassDescription.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.inputAttachmentCount && (this.inputAttachmentCount = data.inputAttachmentCount), void 0 !== data.pInputAttachments && (this.pInputAttachments = data.pInputAttachments), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (this.pColorAttachments = data.pColorAttachments), void 0 !== data.pResolveAttachments && (this.pResolveAttachments = data.pResolveAttachments), void 0 !== data.pDepthStencilAttachment && (this.pDepthStencilAttachment = data.pDepthStencilAttachment), void 0 !== data.preserveAttachmentCount && (this.preserveAttachmentCount = data.preserveAttachmentCount), void 0 !== data.pPreserveAttachments && (this.pPreserveAttachments = data.pPreserveAttachments);
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(4, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get inputAttachmentCount() {
        return this.#view.getUint32(8, LE);
    }
    set inputAttachmentCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pInputAttachments() {
        return this.#view.getBigUint64(16, LE);
    }
    set pInputAttachments(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(24, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pResolveAttachments() {
        return this.#view.getBigUint64(40, LE);
    }
    set pResolveAttachments(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pDepthStencilAttachment() {
        return this.#view.getBigUint64(48, LE);
    }
    set pDepthStencilAttachment(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get preserveAttachmentCount() {
        return this.#view.getUint32(56, LE);
    }
    set preserveAttachmentCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pPreserveAttachments() {
        return this.#view.getBigUint64(64, LE);
    }
    set pPreserveAttachments(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class SubpassDependency {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassDependency.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassDependency.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassDependency.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassDependency.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcSubpass && (this.srcSubpass = data.srcSubpass), void 0 !== data.dstSubpass && (this.dstSubpass = data.dstSubpass), void 0 !== data.srcStageMask && (this.srcStageMask = data.srcStageMask), void 0 !== data.dstStageMask && (this.dstStageMask = data.dstStageMask), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.dependencyFlags && (this.dependencyFlags = data.dependencyFlags);
    }
    get srcSubpass() {
        return this.#view.getUint32(0, LE);
    }
    set srcSubpass(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstSubpass() {
        return this.#view.getUint32(4, LE);
    }
    set dstSubpass(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get srcStageMask() {
        return this.#view.getUint32(8, LE);
    }
    set srcStageMask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get dstStageMask() {
        return this.#view.getUint32(12, LE);
    }
    set dstStageMask(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(24, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class RenderPassCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (this.pAttachments = data.pAttachments), void 0 !== data.subpassCount && (this.subpassCount = data.subpassCount), void 0 !== data.pSubpasses && (this.pSubpasses = data.pSubpasses), void 0 !== data.dependencyCount && (this.dependencyCount = data.dependencyCount), void 0 !== data.pDependencies && (this.pDependencies = data.pDependencies);
        this.sType = StructureType.RENDER_PASS_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(32, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSubpasses() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSubpasses(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(48, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pDependencies() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDependencies(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class EventCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(EventCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, EventCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < EventCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(EventCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.EVENT_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class FenceCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FenceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FenceCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FenceCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FenceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.FENCE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFeatures {
    static size = 220;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.robustBufferAccess && (this.robustBufferAccess = data.robustBufferAccess), void 0 !== data.fullDrawIndexUint32 && (this.fullDrawIndexUint32 = data.fullDrawIndexUint32), void 0 !== data.imageCubeArray && (this.imageCubeArray = data.imageCubeArray), void 0 !== data.independentBlend && (this.independentBlend = data.independentBlend), void 0 !== data.geometryShader && (this.geometryShader = data.geometryShader), void 0 !== data.tessellationShader && (this.tessellationShader = data.tessellationShader), void 0 !== data.sampleRateShading && (this.sampleRateShading = data.sampleRateShading), void 0 !== data.dualSrcBlend && (this.dualSrcBlend = data.dualSrcBlend), void 0 !== data.logicOp && (this.logicOp = data.logicOp), void 0 !== data.multiDrawIndirect && (this.multiDrawIndirect = data.multiDrawIndirect), void 0 !== data.drawIndirectFirstInstance && (this.drawIndirectFirstInstance = data.drawIndirectFirstInstance), void 0 !== data.depthClamp && (this.depthClamp = data.depthClamp), void 0 !== data.depthBiasClamp && (this.depthBiasClamp = data.depthBiasClamp), void 0 !== data.fillModeNonSolid && (this.fillModeNonSolid = data.fillModeNonSolid), void 0 !== data.depthBounds && (this.depthBounds = data.depthBounds), void 0 !== data.wideLines && (this.wideLines = data.wideLines), void 0 !== data.largePoints && (this.largePoints = data.largePoints), void 0 !== data.alphaToOne && (this.alphaToOne = data.alphaToOne), void 0 !== data.multiViewport && (this.multiViewport = data.multiViewport), void 0 !== data.samplerAnisotropy && (this.samplerAnisotropy = data.samplerAnisotropy), void 0 !== data.textureCompressionETC2 && (this.textureCompressionETC2 = data.textureCompressionETC2), void 0 !== data.textureCompressionASTC_LDR && (this.textureCompressionASTC_LDR = data.textureCompressionASTC_LDR), void 0 !== data.textureCompressionBC && (this.textureCompressionBC = data.textureCompressionBC), void 0 !== data.occlusionQueryPrecise && (this.occlusionQueryPrecise = data.occlusionQueryPrecise), void 0 !== data.pipelineStatisticsQuery && (this.pipelineStatisticsQuery = data.pipelineStatisticsQuery), void 0 !== data.vertexPipelineStoresAndAtomics && (this.vertexPipelineStoresAndAtomics = data.vertexPipelineStoresAndAtomics), void 0 !== data.fragmentStoresAndAtomics && (this.fragmentStoresAndAtomics = data.fragmentStoresAndAtomics), void 0 !== data.shaderTessellationAndGeometryPointSize && (this.shaderTessellationAndGeometryPointSize = data.shaderTessellationAndGeometryPointSize), void 0 !== data.shaderImageGatherExtended && (this.shaderImageGatherExtended = data.shaderImageGatherExtended), void 0 !== data.shaderStorageImageExtendedFormats && (this.shaderStorageImageExtendedFormats = data.shaderStorageImageExtendedFormats), void 0 !== data.shaderStorageImageMultisample && (this.shaderStorageImageMultisample = data.shaderStorageImageMultisample), void 0 !== data.shaderStorageImageReadWithoutFormat && (this.shaderStorageImageReadWithoutFormat = data.shaderStorageImageReadWithoutFormat), void 0 !== data.shaderStorageImageWriteWithoutFormat && (this.shaderStorageImageWriteWithoutFormat = data.shaderStorageImageWriteWithoutFormat), void 0 !== data.shaderUniformBufferArrayDynamicIndexing && (this.shaderUniformBufferArrayDynamicIndexing = data.shaderUniformBufferArrayDynamicIndexing), void 0 !== data.shaderSampledImageArrayDynamicIndexing && (this.shaderSampledImageArrayDynamicIndexing = data.shaderSampledImageArrayDynamicIndexing), void 0 !== data.shaderStorageBufferArrayDynamicIndexing && (this.shaderStorageBufferArrayDynamicIndexing = data.shaderStorageBufferArrayDynamicIndexing), void 0 !== data.shaderStorageImageArrayDynamicIndexing && (this.shaderStorageImageArrayDynamicIndexing = data.shaderStorageImageArrayDynamicIndexing), void 0 !== data.shaderClipDistance && (this.shaderClipDistance = data.shaderClipDistance), void 0 !== data.shaderCullDistance && (this.shaderCullDistance = data.shaderCullDistance), void 0 !== data.shaderFloat64 && (this.shaderFloat64 = data.shaderFloat64), void 0 !== data.shaderInt64 && (this.shaderInt64 = data.shaderInt64), void 0 !== data.shaderInt16 && (this.shaderInt16 = data.shaderInt16), void 0 !== data.shaderResourceResidency && (this.shaderResourceResidency = data.shaderResourceResidency), void 0 !== data.shaderResourceMinLod && (this.shaderResourceMinLod = data.shaderResourceMinLod), void 0 !== data.sparseBinding && (this.sparseBinding = data.sparseBinding), void 0 !== data.sparseResidencyBuffer && (this.sparseResidencyBuffer = data.sparseResidencyBuffer), void 0 !== data.sparseResidencyImage2D && (this.sparseResidencyImage2D = data.sparseResidencyImage2D), void 0 !== data.sparseResidencyImage3D && (this.sparseResidencyImage3D = data.sparseResidencyImage3D), void 0 !== data.sparseResidency2Samples && (this.sparseResidency2Samples = data.sparseResidency2Samples), void 0 !== data.sparseResidency4Samples && (this.sparseResidency4Samples = data.sparseResidency4Samples), void 0 !== data.sparseResidency8Samples && (this.sparseResidency8Samples = data.sparseResidency8Samples), void 0 !== data.sparseResidency16Samples && (this.sparseResidency16Samples = data.sparseResidency16Samples), void 0 !== data.sparseResidencyAliased && (this.sparseResidencyAliased = data.sparseResidencyAliased), void 0 !== data.variableMultisampleRate && (this.variableMultisampleRate = data.variableMultisampleRate), void 0 !== data.inheritedQueries && (this.inheritedQueries = data.inheritedQueries);
    }
    get robustBufferAccess() {
        return this.#view.getUint32(0, LE);
    }
    set robustBufferAccess(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get fullDrawIndexUint32() {
        return this.#view.getUint32(4, LE);
    }
    set fullDrawIndexUint32(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get imageCubeArray() {
        return this.#view.getUint32(8, LE);
    }
    set imageCubeArray(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get independentBlend() {
        return this.#view.getUint32(12, LE);
    }
    set independentBlend(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get geometryShader() {
        return this.#view.getUint32(16, LE);
    }
    set geometryShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get tessellationShader() {
        return this.#view.getUint32(20, LE);
    }
    set tessellationShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sampleRateShading() {
        return this.#view.getUint32(24, LE);
    }
    set sampleRateShading(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dualSrcBlend() {
        return this.#view.getUint32(28, LE);
    }
    set dualSrcBlend(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get logicOp() {
        return this.#view.getUint32(32, LE);
    }
    set logicOp(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multiDrawIndirect() {
        return this.#view.getUint32(36, LE);
    }
    set multiDrawIndirect(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get drawIndirectFirstInstance() {
        return this.#view.getUint32(40, LE);
    }
    set drawIndirectFirstInstance(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get depthClamp() {
        return this.#view.getUint32(44, LE);
    }
    set depthClamp(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get depthBiasClamp() {
        return this.#view.getUint32(48, LE);
    }
    set depthBiasClamp(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get fillModeNonSolid() {
        return this.#view.getUint32(52, LE);
    }
    set fillModeNonSolid(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get depthBounds() {
        return this.#view.getUint32(56, LE);
    }
    set depthBounds(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get wideLines() {
        return this.#view.getUint32(60, LE);
    }
    set wideLines(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get largePoints() {
        return this.#view.getUint32(64, LE);
    }
    set largePoints(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get alphaToOne() {
        return this.#view.getUint32(68, LE);
    }
    set alphaToOne(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get multiViewport() {
        return this.#view.getUint32(72, LE);
    }
    set multiViewport(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get samplerAnisotropy() {
        return this.#view.getUint32(76, LE);
    }
    set samplerAnisotropy(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get textureCompressionETC2() {
        return this.#view.getUint32(80, LE);
    }
    set textureCompressionETC2(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get textureCompressionASTC_LDR() {
        return this.#view.getUint32(84, LE);
    }
    set textureCompressionASTC_LDR(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get textureCompressionBC() {
        return this.#view.getUint32(88, LE);
    }
    set textureCompressionBC(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get occlusionQueryPrecise() {
        return this.#view.getUint32(92, LE);
    }
    set occlusionQueryPrecise(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get pipelineStatisticsQuery() {
        return this.#view.getUint32(96, LE);
    }
    set pipelineStatisticsQuery(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get vertexPipelineStoresAndAtomics() {
        return this.#view.getUint32(100, LE);
    }
    set vertexPipelineStoresAndAtomics(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get fragmentStoresAndAtomics() {
        return this.#view.getUint32(104, LE);
    }
    set fragmentStoresAndAtomics(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get shaderTessellationAndGeometryPointSize() {
        return this.#view.getUint32(108, LE);
    }
    set shaderTessellationAndGeometryPointSize(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get shaderImageGatherExtended() {
        return this.#view.getUint32(112, LE);
    }
    set shaderImageGatherExtended(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get shaderStorageImageExtendedFormats() {
        return this.#view.getUint32(116, LE);
    }
    set shaderStorageImageExtendedFormats(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get shaderStorageImageMultisample() {
        return this.#view.getUint32(120, LE);
    }
    set shaderStorageImageMultisample(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get shaderStorageImageReadWithoutFormat() {
        return this.#view.getUint32(124, LE);
    }
    set shaderStorageImageReadWithoutFormat(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get shaderStorageImageWriteWithoutFormat() {
        return this.#view.getUint32(128, LE);
    }
    set shaderStorageImageWriteWithoutFormat(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get shaderUniformBufferArrayDynamicIndexing() {
        return this.#view.getUint32(132, LE);
    }
    set shaderUniformBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get shaderSampledImageArrayDynamicIndexing() {
        return this.#view.getUint32(136, LE);
    }
    set shaderSampledImageArrayDynamicIndexing(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get shaderStorageBufferArrayDynamicIndexing() {
        return this.#view.getUint32(140, LE);
    }
    set shaderStorageBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get shaderStorageImageArrayDynamicIndexing() {
        return this.#view.getUint32(144, LE);
    }
    set shaderStorageImageArrayDynamicIndexing(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get shaderClipDistance() {
        return this.#view.getUint32(148, LE);
    }
    set shaderClipDistance(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get shaderCullDistance() {
        return this.#view.getUint32(152, LE);
    }
    set shaderCullDistance(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get shaderFloat64() {
        return this.#view.getUint32(156, LE);
    }
    set shaderFloat64(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get shaderInt64() {
        return this.#view.getUint32(160, LE);
    }
    set shaderInt64(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get shaderInt16() {
        return this.#view.getUint32(164, LE);
    }
    set shaderInt16(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get shaderResourceResidency() {
        return this.#view.getUint32(168, LE);
    }
    set shaderResourceResidency(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get shaderResourceMinLod() {
        return this.#view.getUint32(172, LE);
    }
    set shaderResourceMinLod(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get sparseBinding() {
        return this.#view.getUint32(176, LE);
    }
    set sparseBinding(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get sparseResidencyBuffer() {
        return this.#view.getUint32(180, LE);
    }
    set sparseResidencyBuffer(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get sparseResidencyImage2D() {
        return this.#view.getUint32(184, LE);
    }
    set sparseResidencyImage2D(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get sparseResidencyImage3D() {
        return this.#view.getUint32(188, LE);
    }
    set sparseResidencyImage3D(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get sparseResidency2Samples() {
        return this.#view.getUint32(192, LE);
    }
    set sparseResidency2Samples(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get sparseResidency4Samples() {
        return this.#view.getUint32(196, LE);
    }
    set sparseResidency4Samples(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get sparseResidency8Samples() {
        return this.#view.getUint32(200, LE);
    }
    set sparseResidency8Samples(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get sparseResidency16Samples() {
        return this.#view.getUint32(204, LE);
    }
    set sparseResidency16Samples(value) {
        this.#view.setUint32(204, Number(value), LE);
    }
    get sparseResidencyAliased() {
        return this.#view.getUint32(208, LE);
    }
    set sparseResidencyAliased(value) {
        this.#view.setUint32(208, Number(value), LE);
    }
    get variableMultisampleRate() {
        return this.#view.getUint32(212, LE);
    }
    set variableMultisampleRate(value) {
        this.#view.setUint32(212, Number(value), LE);
    }
    get inheritedQueries() {
        return this.#view.getUint32(216, LE);
    }
    set inheritedQueries(value) {
        this.#view.setUint32(216, Number(value), LE);
    }
}
export class PhysicalDeviceSparseProperties {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSparseProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSparseProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSparseProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSparseProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.residencyStandard2DBlockShape && (this.residencyStandard2DBlockShape = data.residencyStandard2DBlockShape), void 0 !== data.residencyStandard2DMultisampleBlockShape && (this.residencyStandard2DMultisampleBlockShape = data.residencyStandard2DMultisampleBlockShape), void 0 !== data.residencyStandard3DBlockShape && (this.residencyStandard3DBlockShape = data.residencyStandard3DBlockShape), void 0 !== data.residencyAlignedMipSize && (this.residencyAlignedMipSize = data.residencyAlignedMipSize), void 0 !== data.residencyNonResidentStrict && (this.residencyNonResidentStrict = data.residencyNonResidentStrict);
    }
    get residencyStandard2DBlockShape() {
        return this.#view.getUint32(0, LE);
    }
    set residencyStandard2DBlockShape(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get residencyStandard2DMultisampleBlockShape() {
        return this.#view.getUint32(4, LE);
    }
    set residencyStandard2DMultisampleBlockShape(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get residencyStandard3DBlockShape() {
        return this.#view.getUint32(8, LE);
    }
    set residencyStandard3DBlockShape(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get residencyAlignedMipSize() {
        return this.#view.getUint32(12, LE);
    }
    set residencyAlignedMipSize(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get residencyNonResidentStrict() {
        return this.#view.getUint32(16, LE);
    }
    set residencyNonResidentStrict(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceLimits {
    static size = 504;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceLimits.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceLimits.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceLimits.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceLimits.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.maxImageDimension1D && (this.maxImageDimension1D = data.maxImageDimension1D), void 0 !== data.maxImageDimension2D && (this.maxImageDimension2D = data.maxImageDimension2D), void 0 !== data.maxImageDimension3D && (this.maxImageDimension3D = data.maxImageDimension3D), void 0 !== data.maxImageDimensionCube && (this.maxImageDimensionCube = data.maxImageDimensionCube), void 0 !== data.maxImageArrayLayers && (this.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.maxTexelBufferElements && (this.maxTexelBufferElements = data.maxTexelBufferElements), void 0 !== data.maxUniformBufferRange && (this.maxUniformBufferRange = data.maxUniformBufferRange), void 0 !== data.maxStorageBufferRange && (this.maxStorageBufferRange = data.maxStorageBufferRange), void 0 !== data.maxPushConstantsSize && (this.maxPushConstantsSize = data.maxPushConstantsSize), void 0 !== data.maxMemoryAllocationCount && (this.maxMemoryAllocationCount = data.maxMemoryAllocationCount), void 0 !== data.maxSamplerAllocationCount && (this.maxSamplerAllocationCount = data.maxSamplerAllocationCount), void 0 !== data.bufferImageGranularity && (this.bufferImageGranularity = data.bufferImageGranularity), void 0 !== data.sparseAddressSpaceSize && (this.sparseAddressSpaceSize = data.sparseAddressSpaceSize), void 0 !== data.maxBoundDescriptorSets && (this.maxBoundDescriptorSets = data.maxBoundDescriptorSets), void 0 !== data.maxPerStageDescriptorSamplers && (this.maxPerStageDescriptorSamplers = data.maxPerStageDescriptorSamplers), void 0 !== data.maxPerStageDescriptorUniformBuffers && (this.maxPerStageDescriptorUniformBuffers = data.maxPerStageDescriptorUniformBuffers), void 0 !== data.maxPerStageDescriptorStorageBuffers && (this.maxPerStageDescriptorStorageBuffers = data.maxPerStageDescriptorStorageBuffers), void 0 !== data.maxPerStageDescriptorSampledImages && (this.maxPerStageDescriptorSampledImages = data.maxPerStageDescriptorSampledImages), void 0 !== data.maxPerStageDescriptorStorageImages && (this.maxPerStageDescriptorStorageImages = data.maxPerStageDescriptorStorageImages), void 0 !== data.maxPerStageDescriptorInputAttachments && (this.maxPerStageDescriptorInputAttachments = data.maxPerStageDescriptorInputAttachments), void 0 !== data.maxPerStageResources && (this.maxPerStageResources = data.maxPerStageResources), void 0 !== data.maxDescriptorSetSamplers && (this.maxDescriptorSetSamplers = data.maxDescriptorSetSamplers), void 0 !== data.maxDescriptorSetUniformBuffers && (this.maxDescriptorSetUniformBuffers = data.maxDescriptorSetUniformBuffers), void 0 !== data.maxDescriptorSetUniformBuffersDynamic && (this.maxDescriptorSetUniformBuffersDynamic = data.maxDescriptorSetUniformBuffersDynamic), void 0 !== data.maxDescriptorSetStorageBuffers && (this.maxDescriptorSetStorageBuffers = data.maxDescriptorSetStorageBuffers), void 0 !== data.maxDescriptorSetStorageBuffersDynamic && (this.maxDescriptorSetStorageBuffersDynamic = data.maxDescriptorSetStorageBuffersDynamic), void 0 !== data.maxDescriptorSetSampledImages && (this.maxDescriptorSetSampledImages = data.maxDescriptorSetSampledImages), void 0 !== data.maxDescriptorSetStorageImages && (this.maxDescriptorSetStorageImages = data.maxDescriptorSetStorageImages), void 0 !== data.maxDescriptorSetInputAttachments && (this.maxDescriptorSetInputAttachments = data.maxDescriptorSetInputAttachments), void 0 !== data.maxVertexInputAttributes && (this.maxVertexInputAttributes = data.maxVertexInputAttributes), void 0 !== data.maxVertexInputBindings && (this.maxVertexInputBindings = data.maxVertexInputBindings), void 0 !== data.maxVertexInputAttributeOffset && (this.maxVertexInputAttributeOffset = data.maxVertexInputAttributeOffset), void 0 !== data.maxVertexInputBindingStride && (this.maxVertexInputBindingStride = data.maxVertexInputBindingStride), void 0 !== data.maxVertexOutputComponents && (this.maxVertexOutputComponents = data.maxVertexOutputComponents), void 0 !== data.maxTessellationGenerationLevel && (this.maxTessellationGenerationLevel = data.maxTessellationGenerationLevel), void 0 !== data.maxTessellationPatchSize && (this.maxTessellationPatchSize = data.maxTessellationPatchSize), void 0 !== data.maxTessellationControlPerVertexInputComponents && (this.maxTessellationControlPerVertexInputComponents = data.maxTessellationControlPerVertexInputComponents), void 0 !== data.maxTessellationControlPerVertexOutputComponents && (this.maxTessellationControlPerVertexOutputComponents = data.maxTessellationControlPerVertexOutputComponents), void 0 !== data.maxTessellationControlPerPatchOutputComponents && (this.maxTessellationControlPerPatchOutputComponents = data.maxTessellationControlPerPatchOutputComponents), void 0 !== data.maxTessellationControlTotalOutputComponents && (this.maxTessellationControlTotalOutputComponents = data.maxTessellationControlTotalOutputComponents), void 0 !== data.maxTessellationEvaluationInputComponents && (this.maxTessellationEvaluationInputComponents = data.maxTessellationEvaluationInputComponents), void 0 !== data.maxTessellationEvaluationOutputComponents && (this.maxTessellationEvaluationOutputComponents = data.maxTessellationEvaluationOutputComponents), void 0 !== data.maxGeometryShaderInvocations && (this.maxGeometryShaderInvocations = data.maxGeometryShaderInvocations), void 0 !== data.maxGeometryInputComponents && (this.maxGeometryInputComponents = data.maxGeometryInputComponents), void 0 !== data.maxGeometryOutputComponents && (this.maxGeometryOutputComponents = data.maxGeometryOutputComponents), void 0 !== data.maxGeometryOutputVertices && (this.maxGeometryOutputVertices = data.maxGeometryOutputVertices), void 0 !== data.maxGeometryTotalOutputComponents && (this.maxGeometryTotalOutputComponents = data.maxGeometryTotalOutputComponents), void 0 !== data.maxFragmentInputComponents && (this.maxFragmentInputComponents = data.maxFragmentInputComponents), void 0 !== data.maxFragmentOutputAttachments && (this.maxFragmentOutputAttachments = data.maxFragmentOutputAttachments), void 0 !== data.maxFragmentDualSrcAttachments && (this.maxFragmentDualSrcAttachments = data.maxFragmentDualSrcAttachments), void 0 !== data.maxFragmentCombinedOutputResources && (this.maxFragmentCombinedOutputResources = data.maxFragmentCombinedOutputResources), void 0 !== data.maxComputeSharedMemorySize && (this.maxComputeSharedMemorySize = data.maxComputeSharedMemorySize), void 0 !== data.maxComputeWorkGroupCount && (this.maxComputeWorkGroupCount = data.maxComputeWorkGroupCount), void 0 !== data.maxComputeWorkGroupInvocations && (this.maxComputeWorkGroupInvocations = data.maxComputeWorkGroupInvocations), void 0 !== data.maxComputeWorkGroupSize && (this.maxComputeWorkGroupSize = data.maxComputeWorkGroupSize), void 0 !== data.subPixelPrecisionBits && (this.subPixelPrecisionBits = data.subPixelPrecisionBits), void 0 !== data.subTexelPrecisionBits && (this.subTexelPrecisionBits = data.subTexelPrecisionBits), void 0 !== data.mipmapPrecisionBits && (this.mipmapPrecisionBits = data.mipmapPrecisionBits), void 0 !== data.maxDrawIndexedIndexValue && (this.maxDrawIndexedIndexValue = data.maxDrawIndexedIndexValue), void 0 !== data.maxDrawIndirectCount && (this.maxDrawIndirectCount = data.maxDrawIndirectCount), void 0 !== data.maxSamplerLodBias && (this.maxSamplerLodBias = data.maxSamplerLodBias), void 0 !== data.maxSamplerAnisotropy && (this.maxSamplerAnisotropy = data.maxSamplerAnisotropy), void 0 !== data.maxViewports && (this.maxViewports = data.maxViewports), void 0 !== data.maxViewportDimensions && (this.maxViewportDimensions = data.maxViewportDimensions), void 0 !== data.viewportBoundsRange && (this.viewportBoundsRange = data.viewportBoundsRange), void 0 !== data.viewportSubPixelBits && (this.viewportSubPixelBits = data.viewportSubPixelBits), void 0 !== data.minMemoryMapAlignment && (this.minMemoryMapAlignment = data.minMemoryMapAlignment), void 0 !== data.minTexelBufferOffsetAlignment && (this.minTexelBufferOffsetAlignment = data.minTexelBufferOffsetAlignment), void 0 !== data.minUniformBufferOffsetAlignment && (this.minUniformBufferOffsetAlignment = data.minUniformBufferOffsetAlignment), void 0 !== data.minStorageBufferOffsetAlignment && (this.minStorageBufferOffsetAlignment = data.minStorageBufferOffsetAlignment), void 0 !== data.minTexelOffset && (this.minTexelOffset = data.minTexelOffset), void 0 !== data.maxTexelOffset && (this.maxTexelOffset = data.maxTexelOffset), void 0 !== data.minTexelGatherOffset && (this.minTexelGatherOffset = data.minTexelGatherOffset), void 0 !== data.maxTexelGatherOffset && (this.maxTexelGatherOffset = data.maxTexelGatherOffset), void 0 !== data.minInterpolationOffset && (this.minInterpolationOffset = data.minInterpolationOffset), void 0 !== data.maxInterpolationOffset && (this.maxInterpolationOffset = data.maxInterpolationOffset), void 0 !== data.subPixelInterpolationOffsetBits && (this.subPixelInterpolationOffsetBits = data.subPixelInterpolationOffsetBits), void 0 !== data.maxFramebufferWidth && (this.maxFramebufferWidth = data.maxFramebufferWidth), void 0 !== data.maxFramebufferHeight && (this.maxFramebufferHeight = data.maxFramebufferHeight), void 0 !== data.maxFramebufferLayers && (this.maxFramebufferLayers = data.maxFramebufferLayers), void 0 !== data.framebufferColorSampleCounts && (this.framebufferColorSampleCounts = data.framebufferColorSampleCounts), void 0 !== data.framebufferDepthSampleCounts && (this.framebufferDepthSampleCounts = data.framebufferDepthSampleCounts), void 0 !== data.framebufferStencilSampleCounts && (this.framebufferStencilSampleCounts = data.framebufferStencilSampleCounts), void 0 !== data.framebufferNoAttachmentsSampleCounts && (this.framebufferNoAttachmentsSampleCounts = data.framebufferNoAttachmentsSampleCounts), void 0 !== data.maxColorAttachments && (this.maxColorAttachments = data.maxColorAttachments), void 0 !== data.sampledImageColorSampleCounts && (this.sampledImageColorSampleCounts = data.sampledImageColorSampleCounts), void 0 !== data.sampledImageIntegerSampleCounts && (this.sampledImageIntegerSampleCounts = data.sampledImageIntegerSampleCounts), void 0 !== data.sampledImageDepthSampleCounts && (this.sampledImageDepthSampleCounts = data.sampledImageDepthSampleCounts), void 0 !== data.sampledImageStencilSampleCounts && (this.sampledImageStencilSampleCounts = data.sampledImageStencilSampleCounts), void 0 !== data.storageImageSampleCounts && (this.storageImageSampleCounts = data.storageImageSampleCounts), void 0 !== data.maxSampleMaskWords && (this.maxSampleMaskWords = data.maxSampleMaskWords), void 0 !== data.timestampComputeAndGraphics && (this.timestampComputeAndGraphics = data.timestampComputeAndGraphics), void 0 !== data.timestampPeriod && (this.timestampPeriod = data.timestampPeriod), void 0 !== data.maxClipDistances && (this.maxClipDistances = data.maxClipDistances), void 0 !== data.maxCullDistances && (this.maxCullDistances = data.maxCullDistances), void 0 !== data.maxCombinedClipAndCullDistances && (this.maxCombinedClipAndCullDistances = data.maxCombinedClipAndCullDistances), void 0 !== data.discreteQueuePriorities && (this.discreteQueuePriorities = data.discreteQueuePriorities), void 0 !== data.pointSizeRange && (this.pointSizeRange = data.pointSizeRange), void 0 !== data.lineWidthRange && (this.lineWidthRange = data.lineWidthRange), void 0 !== data.pointSizeGranularity && (this.pointSizeGranularity = data.pointSizeGranularity), void 0 !== data.lineWidthGranularity && (this.lineWidthGranularity = data.lineWidthGranularity), void 0 !== data.strictLines && (this.strictLines = data.strictLines), void 0 !== data.standardSampleLocations && (this.standardSampleLocations = data.standardSampleLocations), void 0 !== data.optimalBufferCopyOffsetAlignment && (this.optimalBufferCopyOffsetAlignment = data.optimalBufferCopyOffsetAlignment), void 0 !== data.optimalBufferCopyRowPitchAlignment && (this.optimalBufferCopyRowPitchAlignment = data.optimalBufferCopyRowPitchAlignment), void 0 !== data.nonCoherentAtomSize && (this.nonCoherentAtomSize = data.nonCoherentAtomSize);
    }
    get maxImageDimension1D() {
        return this.#view.getUint32(0, LE);
    }
    set maxImageDimension1D(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get maxImageDimension2D() {
        return this.#view.getUint32(4, LE);
    }
    set maxImageDimension2D(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get maxImageDimension3D() {
        return this.#view.getUint32(8, LE);
    }
    set maxImageDimension3D(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get maxImageDimensionCube() {
        return this.#view.getUint32(12, LE);
    }
    set maxImageDimensionCube(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(16, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTexelBufferElements() {
        return this.#view.getUint32(20, LE);
    }
    set maxTexelBufferElements(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxUniformBufferRange() {
        return this.#view.getUint32(24, LE);
    }
    set maxUniformBufferRange(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxStorageBufferRange() {
        return this.#view.getUint32(28, LE);
    }
    set maxStorageBufferRange(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxPushConstantsSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxPushConstantsSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxMemoryAllocationCount() {
        return this.#view.getUint32(36, LE);
    }
    set maxMemoryAllocationCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxSamplerAllocationCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxSamplerAllocationCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get bufferImageGranularity() {
        return this.#view.getBigUint64(48, LE);
    }
    set bufferImageGranularity(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get sparseAddressSpaceSize() {
        return this.#view.getBigUint64(56, LE);
    }
    set sparseAddressSpaceSize(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get maxBoundDescriptorSets() {
        return this.#view.getUint32(64, LE);
    }
    set maxBoundDescriptorSets(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxPerStageDescriptorSamplers() {
        return this.#view.getUint32(68, LE);
    }
    set maxPerStageDescriptorSamplers(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxPerStageDescriptorUniformBuffers() {
        return this.#view.getUint32(72, LE);
    }
    set maxPerStageDescriptorUniformBuffers(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get maxPerStageDescriptorStorageBuffers() {
        return this.#view.getUint32(76, LE);
    }
    set maxPerStageDescriptorStorageBuffers(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxPerStageDescriptorSampledImages() {
        return this.#view.getUint32(80, LE);
    }
    set maxPerStageDescriptorSampledImages(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxPerStageDescriptorStorageImages() {
        return this.#view.getUint32(84, LE);
    }
    set maxPerStageDescriptorStorageImages(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxPerStageDescriptorInputAttachments() {
        return this.#view.getUint32(88, LE);
    }
    set maxPerStageDescriptorInputAttachments(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get maxPerStageResources() {
        return this.#view.getUint32(92, LE);
    }
    set maxPerStageResources(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxDescriptorSetSamplers() {
        return this.#view.getUint32(96, LE);
    }
    set maxDescriptorSetSamplers(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxDescriptorSetUniformBuffers() {
        return this.#view.getUint32(100, LE);
    }
    set maxDescriptorSetUniformBuffers(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxDescriptorSetUniformBuffersDynamic() {
        return this.#view.getUint32(104, LE);
    }
    set maxDescriptorSetUniformBuffersDynamic(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get maxDescriptorSetStorageBuffers() {
        return this.#view.getUint32(108, LE);
    }
    set maxDescriptorSetStorageBuffers(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get maxDescriptorSetStorageBuffersDynamic() {
        return this.#view.getUint32(112, LE);
    }
    set maxDescriptorSetStorageBuffersDynamic(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get maxDescriptorSetSampledImages() {
        return this.#view.getUint32(116, LE);
    }
    set maxDescriptorSetSampledImages(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get maxDescriptorSetStorageImages() {
        return this.#view.getUint32(120, LE);
    }
    set maxDescriptorSetStorageImages(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get maxDescriptorSetInputAttachments() {
        return this.#view.getUint32(124, LE);
    }
    set maxDescriptorSetInputAttachments(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get maxVertexInputAttributes() {
        return this.#view.getUint32(128, LE);
    }
    set maxVertexInputAttributes(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get maxVertexInputBindings() {
        return this.#view.getUint32(132, LE);
    }
    set maxVertexInputBindings(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get maxVertexInputAttributeOffset() {
        return this.#view.getUint32(136, LE);
    }
    set maxVertexInputAttributeOffset(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get maxVertexInputBindingStride() {
        return this.#view.getUint32(140, LE);
    }
    set maxVertexInputBindingStride(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get maxVertexOutputComponents() {
        return this.#view.getUint32(144, LE);
    }
    set maxVertexOutputComponents(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get maxTessellationGenerationLevel() {
        return this.#view.getUint32(148, LE);
    }
    set maxTessellationGenerationLevel(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get maxTessellationPatchSize() {
        return this.#view.getUint32(152, LE);
    }
    set maxTessellationPatchSize(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get maxTessellationControlPerVertexInputComponents() {
        return this.#view.getUint32(156, LE);
    }
    set maxTessellationControlPerVertexInputComponents(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get maxTessellationControlPerVertexOutputComponents() {
        return this.#view.getUint32(160, LE);
    }
    set maxTessellationControlPerVertexOutputComponents(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get maxTessellationControlPerPatchOutputComponents() {
        return this.#view.getUint32(164, LE);
    }
    set maxTessellationControlPerPatchOutputComponents(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get maxTessellationControlTotalOutputComponents() {
        return this.#view.getUint32(168, LE);
    }
    set maxTessellationControlTotalOutputComponents(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get maxTessellationEvaluationInputComponents() {
        return this.#view.getUint32(172, LE);
    }
    set maxTessellationEvaluationInputComponents(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get maxTessellationEvaluationOutputComponents() {
        return this.#view.getUint32(176, LE);
    }
    set maxTessellationEvaluationOutputComponents(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get maxGeometryShaderInvocations() {
        return this.#view.getUint32(180, LE);
    }
    set maxGeometryShaderInvocations(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get maxGeometryInputComponents() {
        return this.#view.getUint32(184, LE);
    }
    set maxGeometryInputComponents(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get maxGeometryOutputComponents() {
        return this.#view.getUint32(188, LE);
    }
    set maxGeometryOutputComponents(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get maxGeometryOutputVertices() {
        return this.#view.getUint32(192, LE);
    }
    set maxGeometryOutputVertices(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get maxGeometryTotalOutputComponents() {
        return this.#view.getUint32(196, LE);
    }
    set maxGeometryTotalOutputComponents(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get maxFragmentInputComponents() {
        return this.#view.getUint32(200, LE);
    }
    set maxFragmentInputComponents(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get maxFragmentOutputAttachments() {
        return this.#view.getUint32(204, LE);
    }
    set maxFragmentOutputAttachments(value) {
        this.#view.setUint32(204, Number(value), LE);
    }
    get maxFragmentDualSrcAttachments() {
        return this.#view.getUint32(208, LE);
    }
    set maxFragmentDualSrcAttachments(value) {
        this.#view.setUint32(208, Number(value), LE);
    }
    get maxFragmentCombinedOutputResources() {
        return this.#view.getUint32(212, LE);
    }
    set maxFragmentCombinedOutputResources(value) {
        this.#view.setUint32(212, Number(value), LE);
    }
    get maxComputeSharedMemorySize() {
        return this.#view.getUint32(216, LE);
    }
    set maxComputeSharedMemorySize(value) {
        this.#view.setUint32(216, Number(value), LE);
    }
    get maxComputeWorkGroupCount() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 220, 3);
    }
    set maxComputeWorkGroupCount(value) {
        this.#data.set(new Uint8Array(value.buffer), 220);
    }
    get maxComputeWorkGroupInvocations() {
        return this.#view.getUint32(232, LE);
    }
    set maxComputeWorkGroupInvocations(value) {
        this.#view.setUint32(232, Number(value), LE);
    }
    get maxComputeWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 236, 3);
    }
    set maxComputeWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 236);
    }
    get subPixelPrecisionBits() {
        return this.#view.getUint32(248, LE);
    }
    set subPixelPrecisionBits(value) {
        this.#view.setUint32(248, Number(value), LE);
    }
    get subTexelPrecisionBits() {
        return this.#view.getUint32(252, LE);
    }
    set subTexelPrecisionBits(value) {
        this.#view.setUint32(252, Number(value), LE);
    }
    get mipmapPrecisionBits() {
        return this.#view.getUint32(256, LE);
    }
    set mipmapPrecisionBits(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
    get maxDrawIndexedIndexValue() {
        return this.#view.getUint32(260, LE);
    }
    set maxDrawIndexedIndexValue(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get maxDrawIndirectCount() {
        return this.#view.getUint32(264, LE);
    }
    set maxDrawIndirectCount(value) {
        this.#view.setUint32(264, Number(value), LE);
    }
    get maxSamplerLodBias() {
        return this.#view.getFloat32(268, LE);
    }
    set maxSamplerLodBias(value) {
        this.#view.setFloat32(268, Number(value), LE);
    }
    get maxSamplerAnisotropy() {
        return this.#view.getFloat32(272, LE);
    }
    set maxSamplerAnisotropy(value) {
        this.#view.setFloat32(272, Number(value), LE);
    }
    get maxViewports() {
        return this.#view.getUint32(276, LE);
    }
    set maxViewports(value) {
        this.#view.setUint32(276, Number(value), LE);
    }
    get maxViewportDimensions() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 280, 2);
    }
    set maxViewportDimensions(value) {
        this.#data.set(new Uint8Array(value.buffer), 280);
    }
    get viewportBoundsRange() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 288, 2);
    }
    set viewportBoundsRange(value) {
        this.#data.set(new Uint8Array(value.buffer), 288);
    }
    get viewportSubPixelBits() {
        return this.#view.getUint32(296, LE);
    }
    set viewportSubPixelBits(value) {
        this.#view.setUint32(296, Number(value), LE);
    }
    get minMemoryMapAlignment() {
        return this.#view.getBigUint64(304, LE);
    }
    set minMemoryMapAlignment(value) {
        this.#view.setBigUint64(304, BigInt(value), LE);
    }
    get minTexelBufferOffsetAlignment() {
        return this.#view.getBigUint64(312, LE);
    }
    set minTexelBufferOffsetAlignment(value) {
        this.#view.setBigUint64(312, BigInt(value), LE);
    }
    get minUniformBufferOffsetAlignment() {
        return this.#view.getBigUint64(320, LE);
    }
    set minUniformBufferOffsetAlignment(value) {
        this.#view.setBigUint64(320, BigInt(value), LE);
    }
    get minStorageBufferOffsetAlignment() {
        return this.#view.getBigUint64(328, LE);
    }
    set minStorageBufferOffsetAlignment(value) {
        this.#view.setBigUint64(328, BigInt(value), LE);
    }
    get minTexelOffset() {
        return this.#view.getInt32(336, LE);
    }
    set minTexelOffset(value) {
        this.#view.setInt32(336, Number(value), LE);
    }
    get maxTexelOffset() {
        return this.#view.getUint32(340, LE);
    }
    set maxTexelOffset(value) {
        this.#view.setUint32(340, Number(value), LE);
    }
    get minTexelGatherOffset() {
        return this.#view.getInt32(344, LE);
    }
    set minTexelGatherOffset(value) {
        this.#view.setInt32(344, Number(value), LE);
    }
    get maxTexelGatherOffset() {
        return this.#view.getUint32(348, LE);
    }
    set maxTexelGatherOffset(value) {
        this.#view.setUint32(348, Number(value), LE);
    }
    get minInterpolationOffset() {
        return this.#view.getFloat32(352, LE);
    }
    set minInterpolationOffset(value) {
        this.#view.setFloat32(352, Number(value), LE);
    }
    get maxInterpolationOffset() {
        return this.#view.getFloat32(356, LE);
    }
    set maxInterpolationOffset(value) {
        this.#view.setFloat32(356, Number(value), LE);
    }
    get subPixelInterpolationOffsetBits() {
        return this.#view.getUint32(360, LE);
    }
    set subPixelInterpolationOffsetBits(value) {
        this.#view.setUint32(360, Number(value), LE);
    }
    get maxFramebufferWidth() {
        return this.#view.getUint32(364, LE);
    }
    set maxFramebufferWidth(value) {
        this.#view.setUint32(364, Number(value), LE);
    }
    get maxFramebufferHeight() {
        return this.#view.getUint32(368, LE);
    }
    set maxFramebufferHeight(value) {
        this.#view.setUint32(368, Number(value), LE);
    }
    get maxFramebufferLayers() {
        return this.#view.getUint32(372, LE);
    }
    set maxFramebufferLayers(value) {
        this.#view.setUint32(372, Number(value), LE);
    }
    get framebufferColorSampleCounts() {
        return this.#view.getUint32(376, LE);
    }
    set framebufferColorSampleCounts(value) {
        this.#view.setUint32(376, Number(value), LE);
    }
    get framebufferDepthSampleCounts() {
        return this.#view.getUint32(380, LE);
    }
    set framebufferDepthSampleCounts(value) {
        this.#view.setUint32(380, Number(value), LE);
    }
    get framebufferStencilSampleCounts() {
        return this.#view.getUint32(384, LE);
    }
    set framebufferStencilSampleCounts(value) {
        this.#view.setUint32(384, Number(value), LE);
    }
    get framebufferNoAttachmentsSampleCounts() {
        return this.#view.getUint32(388, LE);
    }
    set framebufferNoAttachmentsSampleCounts(value) {
        this.#view.setUint32(388, Number(value), LE);
    }
    get maxColorAttachments() {
        return this.#view.getUint32(392, LE);
    }
    set maxColorAttachments(value) {
        this.#view.setUint32(392, Number(value), LE);
    }
    get sampledImageColorSampleCounts() {
        return this.#view.getUint32(396, LE);
    }
    set sampledImageColorSampleCounts(value) {
        this.#view.setUint32(396, Number(value), LE);
    }
    get sampledImageIntegerSampleCounts() {
        return this.#view.getUint32(400, LE);
    }
    set sampledImageIntegerSampleCounts(value) {
        this.#view.setUint32(400, Number(value), LE);
    }
    get sampledImageDepthSampleCounts() {
        return this.#view.getUint32(404, LE);
    }
    set sampledImageDepthSampleCounts(value) {
        this.#view.setUint32(404, Number(value), LE);
    }
    get sampledImageStencilSampleCounts() {
        return this.#view.getUint32(408, LE);
    }
    set sampledImageStencilSampleCounts(value) {
        this.#view.setUint32(408, Number(value), LE);
    }
    get storageImageSampleCounts() {
        return this.#view.getUint32(412, LE);
    }
    set storageImageSampleCounts(value) {
        this.#view.setUint32(412, Number(value), LE);
    }
    get maxSampleMaskWords() {
        return this.#view.getUint32(416, LE);
    }
    set maxSampleMaskWords(value) {
        this.#view.setUint32(416, Number(value), LE);
    }
    get timestampComputeAndGraphics() {
        return this.#view.getUint32(420, LE);
    }
    set timestampComputeAndGraphics(value) {
        this.#view.setUint32(420, Number(value), LE);
    }
    get timestampPeriod() {
        return this.#view.getFloat32(424, LE);
    }
    set timestampPeriod(value) {
        this.#view.setFloat32(424, Number(value), LE);
    }
    get maxClipDistances() {
        return this.#view.getUint32(428, LE);
    }
    set maxClipDistances(value) {
        this.#view.setUint32(428, Number(value), LE);
    }
    get maxCullDistances() {
        return this.#view.getUint32(432, LE);
    }
    set maxCullDistances(value) {
        this.#view.setUint32(432, Number(value), LE);
    }
    get maxCombinedClipAndCullDistances() {
        return this.#view.getUint32(436, LE);
    }
    set maxCombinedClipAndCullDistances(value) {
        this.#view.setUint32(436, Number(value), LE);
    }
    get discreteQueuePriorities() {
        return this.#view.getUint32(440, LE);
    }
    set discreteQueuePriorities(value) {
        this.#view.setUint32(440, Number(value), LE);
    }
    get pointSizeRange() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 444, 2);
    }
    set pointSizeRange(value) {
        this.#data.set(new Uint8Array(value.buffer), 444);
    }
    get lineWidthRange() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 452, 2);
    }
    set lineWidthRange(value) {
        this.#data.set(new Uint8Array(value.buffer), 452);
    }
    get pointSizeGranularity() {
        return this.#view.getFloat32(460, LE);
    }
    set pointSizeGranularity(value) {
        this.#view.setFloat32(460, Number(value), LE);
    }
    get lineWidthGranularity() {
        return this.#view.getFloat32(464, LE);
    }
    set lineWidthGranularity(value) {
        this.#view.setFloat32(464, Number(value), LE);
    }
    get strictLines() {
        return this.#view.getUint32(468, LE);
    }
    set strictLines(value) {
        this.#view.setUint32(468, Number(value), LE);
    }
    get standardSampleLocations() {
        return this.#view.getUint32(472, LE);
    }
    set standardSampleLocations(value) {
        this.#view.setUint32(472, Number(value), LE);
    }
    get optimalBufferCopyOffsetAlignment() {
        return this.#view.getBigUint64(480, LE);
    }
    set optimalBufferCopyOffsetAlignment(value) {
        this.#view.setBigUint64(480, BigInt(value), LE);
    }
    get optimalBufferCopyRowPitchAlignment() {
        return this.#view.getBigUint64(488, LE);
    }
    set optimalBufferCopyRowPitchAlignment(value) {
        this.#view.setBigUint64(488, BigInt(value), LE);
    }
    get nonCoherentAtomSize() {
        return this.#view.getBigUint64(496, LE);
    }
    set nonCoherentAtomSize(value) {
        this.#view.setBigUint64(496, BigInt(value), LE);
    }
}
export class SemaphoreCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.SEMAPHORE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class QueryPoolCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueryPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueryPoolCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueryPoolCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueryPoolCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.queryType && (this.queryType = data.queryType), void 0 !== data.queryCount && (this.queryCount = data.queryCount), void 0 !== data.pipelineStatistics && (this.pipelineStatistics = data.pipelineStatistics);
        this.sType = StructureType.QUERY_POOL_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queryType() {
        return this.#view.getUint32(20, LE);
    }
    set queryType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queryCount() {
        return this.#view.getUint32(24, LE);
    }
    set queryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pipelineStatistics() {
        return this.#view.getUint32(28, LE);
    }
    set pipelineStatistics(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class FramebufferCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FramebufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FramebufferCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FramebufferCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FramebufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.renderPass && (this.renderPass = data.renderPass), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (this.pAttachments = data.pAttachments), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.layers && (this.layers = data.layers);
        this.sType = StructureType.FRAMEBUFFER_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(24, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(32, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get width() {
        return this.#view.getUint32(48, LE);
    }
    set width(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(52, LE);
    }
    set height(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get layers() {
        return this.#view.getUint32(56, LE);
    }
    set layers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class DrawIndirectCommand {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrawIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrawIndirectCommand.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrawIndirectCommand.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrawIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.vertexCount && (this.vertexCount = data.vertexCount), void 0 !== data.instanceCount && (this.instanceCount = data.instanceCount), void 0 !== data.firstVertex && (this.firstVertex = data.firstVertex), void 0 !== data.firstInstance && (this.firstInstance = data.firstInstance);
    }
    get vertexCount() {
        return this.#view.getUint32(0, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstVertex() {
        return this.#view.getUint32(8, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get firstInstance() {
        return this.#view.getUint32(12, LE);
    }
    set firstInstance(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class DrawIndexedIndirectCommand {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrawIndexedIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrawIndexedIndirectCommand.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrawIndexedIndirectCommand.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrawIndexedIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.indexCount && (this.indexCount = data.indexCount), void 0 !== data.instanceCount && (this.instanceCount = data.instanceCount), void 0 !== data.firstIndex && (this.firstIndex = data.firstIndex), void 0 !== data.vertexOffset && (this.vertexOffset = data.vertexOffset), void 0 !== data.firstInstance && (this.firstInstance = data.firstInstance);
    }
    get indexCount() {
        return this.#view.getUint32(0, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstIndex() {
        return this.#view.getUint32(8, LE);
    }
    set firstIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get vertexOffset() {
        return this.#view.getInt32(12, LE);
    }
    set vertexOffset(value) {
        this.#view.setInt32(12, Number(value), LE);
    }
    get firstInstance() {
        return this.#view.getUint32(16, LE);
    }
    set firstInstance(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DispatchIndirectCommand {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DispatchIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DispatchIndirectCommand.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DispatchIndirectCommand.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DispatchIndirectCommand.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y), void 0 !== data.z && (this.z = data.z);
    }
    get x() {
        return this.#view.getUint32(0, LE);
    }
    set x(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getUint32(4, LE);
    }
    set y(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getUint32(8, LE);
    }
    set z(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class MultiDrawInfoEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MultiDrawInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MultiDrawInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MultiDrawInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MultiDrawInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.firstVertex && (this.firstVertex = data.firstVertex), void 0 !== data.vertexCount && (this.vertexCount = data.vertexCount);
    }
    get firstVertex() {
        return this.#view.getUint32(0, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vertexCount() {
        return this.#view.getUint32(4, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class MultiDrawIndexedInfoEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MultiDrawIndexedInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MultiDrawIndexedInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MultiDrawIndexedInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MultiDrawIndexedInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.firstIndex && (this.firstIndex = data.firstIndex), void 0 !== data.indexCount && (this.indexCount = data.indexCount), void 0 !== data.vertexOffset && (this.vertexOffset = data.vertexOffset);
    }
    get firstIndex() {
        return this.#view.getUint32(0, LE);
    }
    set firstIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get indexCount() {
        return this.#view.getUint32(4, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vertexOffset() {
        return this.#view.getInt32(8, LE);
    }
    set vertexOffset(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class SubmitInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (this.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (this.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.pWaitDstStageMask && (this.pWaitDstStageMask = data.pWaitDstStageMask), void 0 !== data.commandBufferCount && (this.commandBufferCount = data.commandBufferCount), void 0 !== data.pCommandBuffers && (this.pCommandBuffers = data.pCommandBuffers), void 0 !== data.signalSemaphoreCount && (this.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphores && (this.pSignalSemaphores = data.pSignalSemaphores);
        this.sType = StructureType.SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pWaitDstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set pWaitDstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(40, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pCommandBuffers() {
        return this.#view.getBigUint64(48, LE);
    }
    set pCommandBuffers(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(56, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pSignalSemaphores() {
        return this.#view.getBigUint64(64, LE);
    }
    set pSignalSemaphores(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class DisplayPropertiesKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.display && (this.display = data.display), void 0 !== data.displayName && (this.displayName = data.displayName), void 0 !== data.physicalDimensions && (this.physicalDimensions = data.physicalDimensions), void 0 !== data.physicalResolution && (this.physicalResolution = data.physicalResolution), void 0 !== data.supportedTransforms && (this.supportedTransforms = data.supportedTransforms), void 0 !== data.planeReorderPossible && (this.planeReorderPossible = data.planeReorderPossible), void 0 !== data.persistentContent && (this.persistentContent = data.persistentContent);
    }
    get display() {
        return this.#view.getBigUint64(0, LE);
    }
    set display(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get displayName() {
        return this.#view.getBigUint64(8, LE);
    }
    set displayName(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get physicalDimensions() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set physicalDimensions(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get physicalResolution() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set physicalResolution(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get supportedTransforms() {
        return this.#view.getUint32(32, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get planeReorderPossible() {
        return this.#view.getUint32(36, LE);
    }
    set planeReorderPossible(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get persistentContent() {
        return this.#view.getUint32(40, LE);
    }
    set persistentContent(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class DisplayPlanePropertiesKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPlanePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPlanePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPlanePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPlanePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.currentDisplay && (this.currentDisplay = data.currentDisplay), void 0 !== data.currentStackIndex && (this.currentStackIndex = data.currentStackIndex);
    }
    get currentDisplay() {
        return this.#view.getBigUint64(0, LE);
    }
    set currentDisplay(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get currentStackIndex() {
        return this.#view.getUint32(8, LE);
    }
    set currentStackIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class DisplayModeParametersKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayModeParametersKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayModeParametersKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayModeParametersKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayModeParametersKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.visibleRegion && (this.visibleRegion = data.visibleRegion), void 0 !== data.refreshRate && (this.refreshRate = data.refreshRate);
    }
    get visibleRegion() {
        return new Extent2D(this.#data.subarray(0, 0 + Extent2D.size));
    }
    set visibleRegion(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get refreshRate() {
        return this.#view.getUint32(8, LE);
    }
    set refreshRate(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class DisplayModePropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayModePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayModePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayModePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayModePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.displayMode && (this.displayMode = data.displayMode), void 0 !== data.parameters && (this.parameters = data.parameters);
    }
    get displayMode() {
        return this.#view.getBigUint64(0, LE);
    }
    set displayMode(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get parameters() {
        return new DisplayModeParametersKHR(this.#data.subarray(8, 8 + DisplayModeParametersKHR.size));
    }
    set parameters(value) {
        if (value[BUFFER].byteLength < DisplayModeParametersKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
}
export class DisplayModeCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayModeCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayModeCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayModeCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayModeCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.parameters && (this.parameters = data.parameters);
        this.sType = StructureType.DISPLAY_MODE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get parameters() {
        return new DisplayModeParametersKHR(this.#data.subarray(20, 20 + DisplayModeParametersKHR.size));
    }
    set parameters(value) {
        if (value[BUFFER].byteLength < DisplayModeParametersKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class DisplayPlaneCapabilitiesKHR {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPlaneCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPlaneCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPlaneCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPlaneCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.supportedAlpha && (this.supportedAlpha = data.supportedAlpha), void 0 !== data.minSrcPosition && (this.minSrcPosition = data.minSrcPosition), void 0 !== data.maxSrcPosition && (this.maxSrcPosition = data.maxSrcPosition), void 0 !== data.minSrcExtent && (this.minSrcExtent = data.minSrcExtent), void 0 !== data.maxSrcExtent && (this.maxSrcExtent = data.maxSrcExtent), void 0 !== data.minDstPosition && (this.minDstPosition = data.minDstPosition), void 0 !== data.maxDstPosition && (this.maxDstPosition = data.maxDstPosition), void 0 !== data.minDstExtent && (this.minDstExtent = data.minDstExtent), void 0 !== data.maxDstExtent && (this.maxDstExtent = data.maxDstExtent);
    }
    get supportedAlpha() {
        return this.#view.getUint32(0, LE);
    }
    set supportedAlpha(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get minSrcPosition() {
        return new Offset2D(this.#data.subarray(4, 4 + Offset2D.size));
    }
    set minSrcPosition(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get maxSrcPosition() {
        return new Offset2D(this.#data.subarray(12, 12 + Offset2D.size));
    }
    set maxSrcPosition(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
    get minSrcExtent() {
        return new Extent2D(this.#data.subarray(20, 20 + Extent2D.size));
    }
    set minSrcExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get maxSrcExtent() {
        return new Extent2D(this.#data.subarray(28, 28 + Extent2D.size));
    }
    set maxSrcExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get minDstPosition() {
        return new Offset2D(this.#data.subarray(36, 36 + Offset2D.size));
    }
    set minDstPosition(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get maxDstPosition() {
        return new Offset2D(this.#data.subarray(44, 44 + Offset2D.size));
    }
    set maxDstPosition(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get minDstExtent() {
        return new Extent2D(this.#data.subarray(52, 52 + Extent2D.size));
    }
    set minDstExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 52);
    }
    get maxDstExtent() {
        return new Extent2D(this.#data.subarray(60, 60 + Extent2D.size));
    }
    set maxDstExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
}
export class DisplaySurfaceCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplaySurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplaySurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplaySurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplaySurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.displayMode && (this.displayMode = data.displayMode), void 0 !== data.planeIndex && (this.planeIndex = data.planeIndex), void 0 !== data.planeStackIndex && (this.planeStackIndex = data.planeStackIndex), void 0 !== data.transform && (this.transform = data.transform), void 0 !== data.globalAlpha && (this.globalAlpha = data.globalAlpha), void 0 !== data.alphaMode && (this.alphaMode = data.alphaMode), void 0 !== data.imageExtent && (this.imageExtent = data.imageExtent);
        this.sType = StructureType.DISPLAY_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get displayMode() {
        return this.#view.getBigUint64(24, LE);
    }
    set displayMode(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get planeIndex() {
        return this.#view.getUint32(32, LE);
    }
    set planeIndex(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get planeStackIndex() {
        return this.#view.getUint32(36, LE);
    }
    set planeStackIndex(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get transform() {
        return this.#view.getUint32(40, LE);
    }
    set transform(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get globalAlpha() {
        return this.#view.getFloat32(44, LE);
    }
    set globalAlpha(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get alphaMode() {
        return this.#view.getUint32(48, LE);
    }
    set alphaMode(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get imageExtent() {
        return new Extent2D(this.#data.subarray(52, 52 + Extent2D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 52);
    }
}
export class DisplayPresentInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPresentInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPresentInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcRect && (this.srcRect = data.srcRect), void 0 !== data.dstRect && (this.dstRect = data.dstRect), void 0 !== data.persistent && (this.persistent = data.persistent);
        this.sType = StructureType.DISPLAY_PRESENT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcRect() {
        return new Rect2D(this.#data.subarray(16, 16 + Rect2D.size));
    }
    set srcRect(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstRect() {
        return new Rect2D(this.#data.subarray(32, 32 + Rect2D.size));
    }
    set dstRect(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get persistent() {
        return this.#view.getUint32(48, LE);
    }
    set persistent(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class SurfaceCapabilitiesKHR {
    static size = 52;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.minImageCount && (this.minImageCount = data.minImageCount), void 0 !== data.maxImageCount && (this.maxImageCount = data.maxImageCount), void 0 !== data.currentExtent && (this.currentExtent = data.currentExtent), void 0 !== data.minImageExtent && (this.minImageExtent = data.minImageExtent), void 0 !== data.maxImageExtent && (this.maxImageExtent = data.maxImageExtent), void 0 !== data.maxImageArrayLayers && (this.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.supportedTransforms && (this.supportedTransforms = data.supportedTransforms), void 0 !== data.currentTransform && (this.currentTransform = data.currentTransform), void 0 !== data.supportedCompositeAlpha && (this.supportedCompositeAlpha = data.supportedCompositeAlpha), void 0 !== data.supportedUsageFlags && (this.supportedUsageFlags = data.supportedUsageFlags);
    }
    get minImageCount() {
        return this.#view.getUint32(0, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get maxImageCount() {
        return this.#view.getUint32(4, LE);
    }
    set maxImageCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get currentExtent() {
        return new Extent2D(this.#data.subarray(8, 8 + Extent2D.size));
    }
    set currentExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
    get minImageExtent() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set minImageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxImageExtent() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set maxImageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(32, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get supportedTransforms() {
        return this.#view.getUint32(36, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get currentTransform() {
        return this.#view.getUint32(40, LE);
    }
    set currentTransform(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get supportedCompositeAlpha() {
        return this.#view.getUint32(44, LE);
    }
    set supportedCompositeAlpha(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get supportedUsageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set supportedUsageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class AndroidSurfaceCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AndroidSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AndroidSurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AndroidSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AndroidSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.window && (this.window = data.window);
        this.sType = StructureType.ANDROID_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(24, LE);
    }
    set window(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ViSurfaceCreateInfoNN {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ViSurfaceCreateInfoNN.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ViSurfaceCreateInfoNN.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ViSurfaceCreateInfoNN.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ViSurfaceCreateInfoNN.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.window && (this.window = data.window);
        this.sType = StructureType.VI_SURFACE_CREATE_INFO_NN;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(24, LE);
    }
    set window(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class WaylandSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(WaylandSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, WaylandSurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < WaylandSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(WaylandSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.display && (this.display = data.display), void 0 !== data.surface && (this.surface = data.surface);
        this.sType = StructureType.WAYLAND_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get display() {
        return this.#view.getBigUint64(24, LE);
    }
    set display(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get surface() {
        return this.#view.getBigUint64(32, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class Win32SurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Win32SurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Win32SurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Win32SurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Win32SurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.hinstance && (this.hinstance = data.hinstance), void 0 !== data.hwnd && (this.hwnd = data.hwnd);
        this.sType = StructureType.WIN32_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get hinstance() {
        return this.#view.getBigUint64(24, LE);
    }
    set hinstance(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get hwnd() {
        return this.#view.getBigUint64(32, LE);
    }
    set hwnd(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class XlibSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(XlibSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, XlibSurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < XlibSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(XlibSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.dpy && (this.dpy = data.dpy), void 0 !== data.window && (this.window = data.window);
        this.sType = StructureType.XLIB_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dpy() {
        return this.#view.getBigUint64(24, LE);
    }
    set dpy(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class XcbSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(XcbSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, XcbSurfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < XcbSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(XcbSurfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.connection && (this.connection = data.connection), void 0 !== data.window && (this.window = data.window);
        this.sType = StructureType.XCB_SURFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get connection() {
        return this.#view.getBigUint64(24, LE);
    }
    set connection(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DirectFBSurfaceCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DirectFBSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DirectFBSurfaceCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DirectFBSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DirectFBSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.dfb && (this.dfb = data.dfb), void 0 !== data.surface && (this.surface = data.surface);
        this.sType = StructureType.DIRECTFB_SURFACE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dfb() {
        return this.#view.getBigUint64(24, LE);
    }
    set dfb(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get surface() {
        return this.#view.getBigUint64(32, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImagePipeSurfaceCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImagePipeSurfaceCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImagePipeSurfaceCreateInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImagePipeSurfaceCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImagePipeSurfaceCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.imagePipeHandle && (this.imagePipeHandle = data.imagePipeHandle);
        this.sType = StructureType.IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imagePipeHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set imagePipeHandle(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class StreamDescriptorSurfaceCreateInfoGGP {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StreamDescriptorSurfaceCreateInfoGGP.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StreamDescriptorSurfaceCreateInfoGGP.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StreamDescriptorSurfaceCreateInfoGGP.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StreamDescriptorSurfaceCreateInfoGGP.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.streamDescriptor && (this.streamDescriptor = data.streamDescriptor);
        this.sType = StructureType.STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get streamDescriptor() {
        return this.#view.getBigUint64(24, LE);
    }
    set streamDescriptor(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ScreenSurfaceCreateInfoQNX {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ScreenSurfaceCreateInfoQNX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ScreenSurfaceCreateInfoQNX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ScreenSurfaceCreateInfoQNX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ScreenSurfaceCreateInfoQNX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.context && (this.context = data.context), void 0 !== data.window && (this.window = data.window);
        this.sType = StructureType.SCREEN_SURFACE_CREATE_INFO_QNX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get context() {
        return this.#view.getBigUint64(24, LE);
    }
    set context(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class SurfaceFormatKHR {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceFormatKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceFormatKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceFormatKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceFormatKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.format && (this.format = data.format), void 0 !== data.colorSpace && (this.colorSpace = data.colorSpace);
    }
    get format() {
        return this.#view.getUint32(0, LE);
    }
    set format(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get colorSpace() {
        return this.#view.getUint32(4, LE);
    }
    set colorSpace(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class SwapchainCreateInfoKHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SwapchainCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.surface && (this.surface = data.surface), void 0 !== data.minImageCount && (this.minImageCount = data.minImageCount), void 0 !== data.imageFormat && (this.imageFormat = data.imageFormat), void 0 !== data.imageColorSpace && (this.imageColorSpace = data.imageColorSpace), void 0 !== data.imageExtent && (this.imageExtent = data.imageExtent), void 0 !== data.imageArrayLayers && (this.imageArrayLayers = data.imageArrayLayers), void 0 !== data.imageUsage && (this.imageUsage = data.imageUsage), void 0 !== data.imageSharingMode && (this.imageSharingMode = data.imageSharingMode), void 0 !== data.queueFamilyIndexCount && (this.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (this.pQueueFamilyIndices = data.pQueueFamilyIndices), void 0 !== data.preTransform && (this.preTransform = data.preTransform), void 0 !== data.compositeAlpha && (this.compositeAlpha = data.compositeAlpha), void 0 !== data.presentMode && (this.presentMode = data.presentMode), void 0 !== data.clipped && (this.clipped = data.clipped), void 0 !== data.oldSwapchain && (this.oldSwapchain = data.oldSwapchain);
        this.sType = StructureType.SWAPCHAIN_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get surface() {
        return this.#view.getBigUint64(24, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get minImageCount() {
        return this.#view.getUint32(32, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get imageFormat() {
        return this.#view.getUint32(36, LE);
    }
    set imageFormat(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get imageColorSpace() {
        return this.#view.getUint32(40, LE);
    }
    set imageColorSpace(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get imageExtent() {
        return new Extent2D(this.#data.subarray(44, 44 + Extent2D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get imageArrayLayers() {
        return this.#view.getUint32(52, LE);
    }
    set imageArrayLayers(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get imageUsage() {
        return this.#view.getUint32(56, LE);
    }
    set imageUsage(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get imageSharingMode() {
        return this.#view.getUint32(60, LE);
    }
    set imageSharingMode(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(64, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(72, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get preTransform() {
        return this.#view.getUint32(80, LE);
    }
    set preTransform(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get compositeAlpha() {
        return this.#view.getUint32(84, LE);
    }
    set compositeAlpha(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get presentMode() {
        return this.#view.getUint32(88, LE);
    }
    set presentMode(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get clipped() {
        return this.#view.getUint32(92, LE);
    }
    set clipped(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get oldSwapchain() {
        return this.#view.getBigUint64(96, LE);
    }
    set oldSwapchain(value) {
        this.#view.setBigUint64(96, BigInt(anyPointer(value)), LE);
    }
}
export class PresentInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (this.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (this.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.swapchainCount && (this.swapchainCount = data.swapchainCount), void 0 !== data.pSwapchains && (this.pSwapchains = data.pSwapchains), void 0 !== data.pImageIndices && (this.pImageIndices = data.pImageIndices), void 0 !== data.pResults && (this.pResults = data.pResults);
        this.sType = StructureType.PRESENT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(32, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSwapchains() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSwapchains(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pImageIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pImageIndices(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pResults() {
        return this.#view.getBigUint64(56, LE);
    }
    set pResults(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class DebugReportCallbackCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugReportCallbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugReportCallbackCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugReportCallbackCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugReportCallbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pfnCallback && (this.pfnCallback = data.pfnCallback), void 0 !== data.pUserData && (this.pUserData = data.pUserData);
        this.sType = StructureType.DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pfnCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ValidationFlagsEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ValidationFlagsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ValidationFlagsEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ValidationFlagsEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ValidationFlagsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.disabledValidationCheckCount && (this.disabledValidationCheckCount = data.disabledValidationCheckCount), void 0 !== data.pDisabledValidationChecks && (this.pDisabledValidationChecks = data.pDisabledValidationChecks);
        this.sType = StructureType.VALIDATION_FLAGS_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get disabledValidationCheckCount() {
        return this.#view.getUint32(16, LE);
    }
    set disabledValidationCheckCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDisabledValidationChecks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDisabledValidationChecks(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ValidationFeaturesEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ValidationFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ValidationFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ValidationFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ValidationFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.enabledValidationFeatureCount && (this.enabledValidationFeatureCount = data.enabledValidationFeatureCount), void 0 !== data.pEnabledValidationFeatures && (this.pEnabledValidationFeatures = data.pEnabledValidationFeatures), void 0 !== data.disabledValidationFeatureCount && (this.disabledValidationFeatureCount = data.disabledValidationFeatureCount), void 0 !== data.pDisabledValidationFeatures && (this.pDisabledValidationFeatures = data.pDisabledValidationFeatures);
        this.sType = StructureType.VALIDATION_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get enabledValidationFeatureCount() {
        return this.#view.getUint32(16, LE);
    }
    set enabledValidationFeatureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pEnabledValidationFeatures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pEnabledValidationFeatures(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get disabledValidationFeatureCount() {
        return this.#view.getUint32(32, LE);
    }
    set disabledValidationFeatureCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pDisabledValidationFeatures() {
        return this.#view.getBigUint64(40, LE);
    }
    set pDisabledValidationFeatures(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineRasterizationStateRasterizationOrderAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationStateRasterizationOrderAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationStateRasterizationOrderAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationStateRasterizationOrderAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationStateRasterizationOrderAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rasterizationOrder && (this.rasterizationOrder = data.rasterizationOrder);
        this.sType = StructureType.PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rasterizationOrder() {
        return this.#view.getUint32(16, LE);
    }
    set rasterizationOrder(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DebugMarkerObjectNameInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugMarkerObjectNameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugMarkerObjectNameInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugMarkerObjectNameInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugMarkerObjectNameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.objectType && (this.objectType = data.objectType), void 0 !== data.object && (this.object = data.object), void 0 !== data.pObjectName && (this.pObjectName = data.pObjectName);
        this.sType = StructureType.DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get object() {
        return this.#view.getBigUint64(24, LE);
    }
    set object(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pObjectName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pObjectName(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DebugMarkerObjectTagInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugMarkerObjectTagInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugMarkerObjectTagInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugMarkerObjectTagInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugMarkerObjectTagInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.objectType && (this.objectType = data.objectType), void 0 !== data.object && (this.object = data.object), void 0 !== data.tagName && (this.tagName = data.tagName), void 0 !== data.tagSize && (this.tagSize = data.tagSize), void 0 !== data.pTag && (this.pTag = data.pTag);
        this.sType = StructureType.DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get object() {
        return this.#view.getBigUint64(24, LE);
    }
    set object(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get tagName() {
        return this.#view.getBigUint64(32, LE);
    }
    set tagName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get tagSize() {
        return this.#view.getBigUint64(40, LE);
    }
    set tagSize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pTag() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTag(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class DebugMarkerMarkerInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugMarkerMarkerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugMarkerMarkerInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugMarkerMarkerInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugMarkerMarkerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pMarkerName && (this.pMarkerName = data.pMarkerName), void 0 !== data.color && (this.color = data.color);
        this.sType = StructureType.DEBUG_MARKER_MARKER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pMarkerName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pMarkerName(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get color() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 24, 4);
    }
    set color(value) {
        this.#data.set(new Uint8Array(value.buffer), 24);
    }
}
export class DedicatedAllocationImageCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DedicatedAllocationImageCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DedicatedAllocationImageCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DedicatedAllocationImageCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DedicatedAllocationImageCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dedicatedAllocation && (this.dedicatedAllocation = data.dedicatedAllocation);
        this.sType = StructureType.DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DedicatedAllocationBufferCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DedicatedAllocationBufferCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DedicatedAllocationBufferCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DedicatedAllocationBufferCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DedicatedAllocationBufferCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dedicatedAllocation && (this.dedicatedAllocation = data.dedicatedAllocation);
        this.sType = StructureType.DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DedicatedAllocationMemoryAllocateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DedicatedAllocationMemoryAllocateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DedicatedAllocationMemoryAllocateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DedicatedAllocationMemoryAllocateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DedicatedAllocationMemoryAllocateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ExternalImageFormatPropertiesNV {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalImageFormatPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalImageFormatPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalImageFormatPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalImageFormatPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.imageFormatProperties && (this.imageFormatProperties = data.imageFormatProperties), void 0 !== data.externalMemoryFeatures && (this.externalMemoryFeatures = data.externalMemoryFeatures), void 0 !== data.exportFromImportedHandleTypes && (this.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (this.compatibleHandleTypes = data.compatibleHandleTypes);
    }
    get imageFormatProperties() {
        return new ImageFormatProperties(this.#data.subarray(0, 0 + ImageFormatProperties.size));
    }
    set imageFormatProperties(value) {
        if (value[BUFFER].byteLength < ImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get externalMemoryFeatures() {
        return this.#view.getUint32(32, LE);
    }
    set externalMemoryFeatures(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(36, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(40, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class ExternalMemoryImageCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalMemoryImageCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalMemoryImageCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalMemoryImageCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalMemoryImageCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExportMemoryAllocateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMemoryAllocateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMemoryAllocateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMemoryAllocateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMemoryAllocateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXPORT_MEMORY_ALLOCATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImportMemoryWin32HandleInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryWin32HandleInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryWin32HandleInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryWin32HandleInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryWin32HandleInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.handle && (this.handle = data.handle);
        this.sType = StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMemoryWin32HandleInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMemoryWin32HandleInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMemoryWin32HandleInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMemoryWin32HandleInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMemoryWin32HandleInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pAttributes && (this.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (this.dwAccess = data.dwAccess);
        this.sType = StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class Win32KeyedMutexAcquireReleaseInfoNV {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Win32KeyedMutexAcquireReleaseInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Win32KeyedMutexAcquireReleaseInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Win32KeyedMutexAcquireReleaseInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Win32KeyedMutexAcquireReleaseInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.acquireCount && (this.acquireCount = data.acquireCount), void 0 !== data.pAcquireSyncs && (this.pAcquireSyncs = data.pAcquireSyncs), void 0 !== data.pAcquireKeys && (this.pAcquireKeys = data.pAcquireKeys), void 0 !== data.pAcquireTimeoutMilliseconds && (this.pAcquireTimeoutMilliseconds = data.pAcquireTimeoutMilliseconds), void 0 !== data.releaseCount && (this.releaseCount = data.releaseCount), void 0 !== data.pReleaseSyncs && (this.pReleaseSyncs = data.pReleaseSyncs), void 0 !== data.pReleaseKeys && (this.pReleaseKeys = data.pReleaseKeys);
        this.sType = StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get acquireCount() {
        return this.#view.getUint32(16, LE);
    }
    set acquireCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAcquireSyncs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAcquireSyncs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pAcquireKeys() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAcquireKeys(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pAcquireTimeoutMilliseconds() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAcquireTimeoutMilliseconds(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get releaseCount() {
        return this.#view.getUint32(48, LE);
    }
    set releaseCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pReleaseSyncs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pReleaseSyncs(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pReleaseKeys() {
        return this.#view.getBigUint64(64, LE);
    }
    set pReleaseKeys(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceGeneratedCommands && (this.deviceGeneratedCommands = data.deviceGeneratedCommands);
        this.sType = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceGeneratedCommands() {
        return this.#view.getUint32(16, LE);
    }
    set deviceGeneratedCommands(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DevicePrivateDataCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DevicePrivateDataCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DevicePrivateDataCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DevicePrivateDataCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DevicePrivateDataCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.privateDataSlotRequestCount && (this.privateDataSlotRequestCount = data.privateDataSlotRequestCount);
        this.sType = StructureType.DEVICE_PRIVATE_DATA_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get privateDataSlotRequestCount() {
        return this.#view.getUint32(16, LE);
    }
    set privateDataSlotRequestCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PrivateDataSlotCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PrivateDataSlotCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PrivateDataSlotCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PrivateDataSlotCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PrivateDataSlotCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.PRIVATE_DATA_SLOT_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePrivateDataFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePrivateDataFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePrivateDataFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePrivateDataFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePrivateDataFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.privateData && (this.privateData = data.privateData);
        this.sType = StructureType.PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get privateData() {
        return this.#view.getUint32(16, LE);
    }
    set privateData(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxGraphicsShaderGroupCount && (this.maxGraphicsShaderGroupCount = data.maxGraphicsShaderGroupCount), void 0 !== data.maxIndirectSequenceCount && (this.maxIndirectSequenceCount = data.maxIndirectSequenceCount), void 0 !== data.maxIndirectCommandsTokenCount && (this.maxIndirectCommandsTokenCount = data.maxIndirectCommandsTokenCount), void 0 !== data.maxIndirectCommandsStreamCount && (this.maxIndirectCommandsStreamCount = data.maxIndirectCommandsStreamCount), void 0 !== data.maxIndirectCommandsTokenOffset && (this.maxIndirectCommandsTokenOffset = data.maxIndirectCommandsTokenOffset), void 0 !== data.maxIndirectCommandsStreamStride && (this.maxIndirectCommandsStreamStride = data.maxIndirectCommandsStreamStride), void 0 !== data.minSequencesCountBufferOffsetAlignment && (this.minSequencesCountBufferOffsetAlignment = data.minSequencesCountBufferOffsetAlignment), void 0 !== data.minSequencesIndexBufferOffsetAlignment && (this.minSequencesIndexBufferOffsetAlignment = data.minSequencesIndexBufferOffsetAlignment), void 0 !== data.minIndirectCommandsBufferOffsetAlignment && (this.minIndirectCommandsBufferOffsetAlignment = data.minIndirectCommandsBufferOffsetAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxGraphicsShaderGroupCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxGraphicsShaderGroupCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxIndirectSequenceCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxIndirectSequenceCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxIndirectCommandsTokenCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxIndirectCommandsTokenCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxIndirectCommandsStreamCount() {
        return this.#view.getUint32(28, LE);
    }
    set maxIndirectCommandsStreamCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxIndirectCommandsTokenOffset() {
        return this.#view.getUint32(32, LE);
    }
    set maxIndirectCommandsTokenOffset(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxIndirectCommandsStreamStride() {
        return this.#view.getUint32(36, LE);
    }
    set maxIndirectCommandsStreamStride(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minSequencesCountBufferOffsetAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set minSequencesCountBufferOffsetAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minSequencesIndexBufferOffsetAlignment() {
        return this.#view.getUint32(44, LE);
    }
    set minSequencesIndexBufferOffsetAlignment(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get minIndirectCommandsBufferOffsetAlignment() {
        return this.#view.getUint32(48, LE);
    }
    set minIndirectCommandsBufferOffsetAlignment(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class PhysicalDeviceMultiDrawPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultiDrawPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultiDrawPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultiDrawPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultiDrawPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxMultiDrawCount && (this.maxMultiDrawCount = data.maxMultiDrawCount);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxMultiDrawCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxMultiDrawCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class GraphicsShaderGroupCreateInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GraphicsShaderGroupCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GraphicsShaderGroupCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GraphicsShaderGroupCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GraphicsShaderGroupCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stageCount && (this.stageCount = data.stageCount), void 0 !== data.pStages && (this.pStages = data.pStages), void 0 !== data.pVertexInputState && (this.pVertexInputState = data.pVertexInputState), void 0 !== data.pTessellationState && (this.pTessellationState = data.pTessellationState);
        this.sType = StructureType.GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stageCount() {
        return this.#view.getUint32(16, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pVertexInputState() {
        return this.#view.getBigUint64(32, LE);
    }
    set pVertexInputState(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pTessellationState() {
        return this.#view.getBigUint64(40, LE);
    }
    set pTessellationState(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class GraphicsPipelineShaderGroupsCreateInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GraphicsPipelineShaderGroupsCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GraphicsPipelineShaderGroupsCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GraphicsPipelineShaderGroupsCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GraphicsPipelineShaderGroupsCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.groupCount && (this.groupCount = data.groupCount), void 0 !== data.pGroups && (this.pGroups = data.pGroups), void 0 !== data.pipelineCount && (this.pipelineCount = data.pipelineCount), void 0 !== data.pPipelines && (this.pPipelines = data.pPipelines);
        this.sType = StructureType.GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get groupCount() {
        return this.#view.getUint32(16, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(24, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pipelineCount() {
        return this.#view.getUint32(32, LE);
    }
    set pipelineCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPipelines() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPipelines(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class BindShaderGroupIndirectCommandNV {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindShaderGroupIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindShaderGroupIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindShaderGroupIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindShaderGroupIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.groupIndex && (this.groupIndex = data.groupIndex);
    }
    get groupIndex() {
        return this.#view.getUint32(0, LE);
    }
    set groupIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class BindIndexBufferIndirectCommandNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindIndexBufferIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindIndexBufferIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindIndexBufferIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindIndexBufferIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.bufferAddress && (this.bufferAddress = data.bufferAddress), void 0 !== data.size && (this.size = data.size), void 0 !== data.indexType && (this.indexType = data.indexType);
    }
    get bufferAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(12, LE);
    }
    set indexType(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class BindVertexBufferIndirectCommandNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindVertexBufferIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindVertexBufferIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindVertexBufferIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindVertexBufferIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.bufferAddress && (this.bufferAddress = data.bufferAddress), void 0 !== data.size && (this.size = data.size), void 0 !== data.stride && (this.stride = data.stride);
    }
    get bufferAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(12, LE);
    }
    set stride(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class SetStateFlagsIndirectCommandNV {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SetStateFlagsIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SetStateFlagsIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SetStateFlagsIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SetStateFlagsIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.data && (this.data = data.data);
    }
    get data() {
        return this.#view.getUint32(0, LE);
    }
    set data(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class IndirectCommandsStreamNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(IndirectCommandsStreamNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, IndirectCommandsStreamNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < IndirectCommandsStreamNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(IndirectCommandsStreamNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset);
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(8, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class IndirectCommandsLayoutTokenNV {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(IndirectCommandsLayoutTokenNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, IndirectCommandsLayoutTokenNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < IndirectCommandsLayoutTokenNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(IndirectCommandsLayoutTokenNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.tokenType && (this.tokenType = data.tokenType), void 0 !== data.stream && (this.stream = data.stream), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.vertexBindingUnit && (this.vertexBindingUnit = data.vertexBindingUnit), void 0 !== data.vertexDynamicStride && (this.vertexDynamicStride = data.vertexDynamicStride), void 0 !== data.pushconstantPipelineLayout && (this.pushconstantPipelineLayout = data.pushconstantPipelineLayout), void 0 !== data.pushconstantShaderStageFlags && (this.pushconstantShaderStageFlags = data.pushconstantShaderStageFlags), void 0 !== data.pushconstantOffset && (this.pushconstantOffset = data.pushconstantOffset), void 0 !== data.pushconstantSize && (this.pushconstantSize = data.pushconstantSize), void 0 !== data.indirectStateFlags && (this.indirectStateFlags = data.indirectStateFlags), void 0 !== data.indexTypeCount && (this.indexTypeCount = data.indexTypeCount), void 0 !== data.pIndexTypes && (this.pIndexTypes = data.pIndexTypes), void 0 !== data.pIndexTypeValues && (this.pIndexTypeValues = data.pIndexTypeValues);
        this.sType = StructureType.INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get tokenType() {
        return this.#view.getUint32(16, LE);
    }
    set tokenType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stream() {
        return this.#view.getUint32(20, LE);
    }
    set stream(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(24, LE);
    }
    set offset(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get vertexBindingUnit() {
        return this.#view.getUint32(28, LE);
    }
    set vertexBindingUnit(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get vertexDynamicStride() {
        return this.#view.getUint32(32, LE);
    }
    set vertexDynamicStride(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pushconstantPipelineLayout() {
        return this.#view.getBigUint64(40, LE);
    }
    set pushconstantPipelineLayout(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pushconstantShaderStageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set pushconstantShaderStageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pushconstantOffset() {
        return this.#view.getUint32(52, LE);
    }
    set pushconstantOffset(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get pushconstantSize() {
        return this.#view.getUint32(56, LE);
    }
    set pushconstantSize(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get indirectStateFlags() {
        return this.#view.getUint32(60, LE);
    }
    set indirectStateFlags(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get indexTypeCount() {
        return this.#view.getUint32(64, LE);
    }
    set indexTypeCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pIndexTypes() {
        return this.#view.getBigUint64(72, LE);
    }
    set pIndexTypes(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get pIndexTypeValues() {
        return this.#view.getBigUint64(80, LE);
    }
    set pIndexTypeValues(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
}
export class IndirectCommandsLayoutCreateInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(IndirectCommandsLayoutCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, IndirectCommandsLayoutCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < IndirectCommandsLayoutCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(IndirectCommandsLayoutCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.tokenCount && (this.tokenCount = data.tokenCount), void 0 !== data.pTokens && (this.pTokens = data.pTokens), void 0 !== data.streamCount && (this.streamCount = data.streamCount), void 0 !== data.pStreamStrides && (this.pStreamStrides = data.pStreamStrides);
        this.sType = StructureType.INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(20, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tokenCount() {
        return this.#view.getUint32(24, LE);
    }
    set tokenCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pTokens() {
        return this.#view.getBigUint64(32, LE);
    }
    set pTokens(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get streamCount() {
        return this.#view.getUint32(40, LE);
    }
    set streamCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pStreamStrides() {
        return this.#view.getBigUint64(48, LE);
    }
    set pStreamStrides(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class GeneratedCommandsInfoNV {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeneratedCommandsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeneratedCommandsInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeneratedCommandsInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeneratedCommandsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipeline && (this.pipeline = data.pipeline), void 0 !== data.indirectCommandsLayout && (this.indirectCommandsLayout = data.indirectCommandsLayout), void 0 !== data.streamCount && (this.streamCount = data.streamCount), void 0 !== data.pStreams && (this.pStreams = data.pStreams), void 0 !== data.sequencesCount && (this.sequencesCount = data.sequencesCount), void 0 !== data.preprocessBuffer && (this.preprocessBuffer = data.preprocessBuffer), void 0 !== data.preprocessOffset && (this.preprocessOffset = data.preprocessOffset), void 0 !== data.preprocessSize && (this.preprocessSize = data.preprocessSize), void 0 !== data.sequencesCountBuffer && (this.sequencesCountBuffer = data.sequencesCountBuffer), void 0 !== data.sequencesCountOffset && (this.sequencesCountOffset = data.sequencesCountOffset), void 0 !== data.sequencesIndexBuffer && (this.sequencesIndexBuffer = data.sequencesIndexBuffer), void 0 !== data.sequencesIndexOffset && (this.sequencesIndexOffset = data.sequencesIndexOffset);
        this.sType = StructureType.GENERATED_COMMANDS_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(24, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get indirectCommandsLayout() {
        return this.#view.getBigUint64(32, LE);
    }
    set indirectCommandsLayout(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get streamCount() {
        return this.#view.getUint32(40, LE);
    }
    set streamCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pStreams() {
        return this.#view.getBigUint64(48, LE);
    }
    set pStreams(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get sequencesCount() {
        return this.#view.getUint32(56, LE);
    }
    set sequencesCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get preprocessBuffer() {
        return this.#view.getBigUint64(64, LE);
    }
    set preprocessBuffer(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get preprocessOffset() {
        return this.#view.getBigUint64(72, LE);
    }
    set preprocessOffset(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get preprocessSize() {
        return this.#view.getBigUint64(80, LE);
    }
    set preprocessSize(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get sequencesCountBuffer() {
        return this.#view.getBigUint64(88, LE);
    }
    set sequencesCountBuffer(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
    get sequencesCountOffset() {
        return this.#view.getBigUint64(96, LE);
    }
    set sequencesCountOffset(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get sequencesIndexBuffer() {
        return this.#view.getBigUint64(104, LE);
    }
    set sequencesIndexBuffer(value) {
        this.#view.setBigUint64(104, BigInt(anyPointer(value)), LE);
    }
    get sequencesIndexOffset() {
        return this.#view.getBigUint64(112, LE);
    }
    set sequencesIndexOffset(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
}
export class GeneratedCommandsMemoryRequirementsInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeneratedCommandsMemoryRequirementsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeneratedCommandsMemoryRequirementsInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeneratedCommandsMemoryRequirementsInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeneratedCommandsMemoryRequirementsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipeline && (this.pipeline = data.pipeline), void 0 !== data.indirectCommandsLayout && (this.indirectCommandsLayout = data.indirectCommandsLayout), void 0 !== data.maxSequencesCount && (this.maxSequencesCount = data.maxSequencesCount);
        this.sType = StructureType.GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(24, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get indirectCommandsLayout() {
        return this.#view.getBigUint64(32, LE);
    }
    set indirectCommandsLayout(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get maxSequencesCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxSequencesCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class PhysicalDeviceFeatures2 {
    static size = 240;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFeatures2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFeatures2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFeatures2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFeatures2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.features && (this.features = data.features);
        this.sType = StructureType.PHYSICAL_DEVICE_FEATURES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get features() {
        return new PhysicalDeviceFeatures(this.#data.subarray(16, 16 + PhysicalDeviceFeatures.size));
    }
    set features(value) {
        if (value[BUFFER].byteLength < PhysicalDeviceFeatures.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceProperties2 {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.properties && (this.properties = data.properties);
        this.sType = StructureType.PHYSICAL_DEVICE_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get properties() {
        return new PhysicalDeviceProperties(this.#data.subarray(16, 16 + PhysicalDeviceProperties.size));
    }
    set properties(value) {
        if (value[BUFFER].byteLength < PhysicalDeviceProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class FormatProperties2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FormatProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FormatProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.formatProperties && (this.formatProperties = data.formatProperties);
        this.sType = StructureType.FORMAT_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get formatProperties() {
        return new FormatProperties(this.#data.subarray(16, 16 + FormatProperties.size));
    }
    set formatProperties(value) {
        if (value[BUFFER].byteLength < FormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class ImageFormatProperties2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageFormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageFormatProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageFormatProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageFormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageFormatProperties && (this.imageFormatProperties = data.imageFormatProperties);
        this.sType = StructureType.IMAGE_FORMAT_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageFormatProperties() {
        return new ImageFormatProperties(this.#data.subarray(16, 16 + ImageFormatProperties.size));
    }
    set imageFormatProperties(value) {
        if (value[BUFFER].byteLength < ImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceImageFormatInfo2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageFormatInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageFormatInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageFormatInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageFormatInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.type && (this.type = data.type), void 0 !== data.tiling && (this.tiling = data.tiling), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(24, LE);
    }
    set tiling(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(28, LE);
    }
    set usage(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class QueueFamilyProperties2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.queueFamilyProperties && (this.queueFamilyProperties = data.queueFamilyProperties);
        this.sType = StructureType.QUEUE_FAMILY_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get queueFamilyProperties() {
        return new QueueFamilyProperties(this.#data.subarray(16, 16 + QueueFamilyProperties.size));
    }
    set queueFamilyProperties(value) {
        if (value[BUFFER].byteLength < QueueFamilyProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceMemoryProperties2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryProperties && (this.memoryProperties = data.memoryProperties);
        this.sType = StructureType.PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryProperties() {
        return new PhysicalDeviceMemoryProperties(this.#data.subarray(16, 16 + PhysicalDeviceMemoryProperties.size));
    }
    set memoryProperties(value) {
        if (value[BUFFER].byteLength < PhysicalDeviceMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SparseImageFormatProperties2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageFormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageFormatProperties2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageFormatProperties2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageFormatProperties2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.properties && (this.properties = data.properties);
        this.sType = StructureType.SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get properties() {
        return new SparseImageFormatProperties(this.#data.subarray(16, 16 + SparseImageFormatProperties.size));
    }
    set properties(value) {
        if (value[BUFFER].byteLength < SparseImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceSparseImageFormatInfo2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSparseImageFormatInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSparseImageFormatInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSparseImageFormatInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSparseImageFormatInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.type && (this.type = data.type), void 0 !== data.samples && (this.samples = data.samples), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.tiling && (this.tiling = data.tiling);
        this.sType = StructureType.PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(24, LE);
    }
    set samples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(28, LE);
    }
    set usage(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(32, LE);
    }
    set tiling(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDevicePushDescriptorPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePushDescriptorPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePushDescriptorPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePushDescriptorPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePushDescriptorPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxPushDescriptors && (this.maxPushDescriptors = data.maxPushDescriptors);
        this.sType = StructureType.PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxPushDescriptors() {
        return this.#view.getUint32(16, LE);
    }
    set maxPushDescriptors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ConformanceVersion {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ConformanceVersion.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ConformanceVersion.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ConformanceVersion.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ConformanceVersion.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.major && (this.major = data.major), void 0 !== data.minor && (this.minor = data.minor), void 0 !== data.subminor && (this.subminor = data.subminor), void 0 !== data.patch && (this.patch = data.patch);
    }
    get major() {
        return this.#view.getUint8(0);
    }
    set major(value) {
        this.#view.setUint8(0, Number(value));
    }
    get minor() {
        return this.#view.getUint8(1);
    }
    set minor(value) {
        this.#view.setUint8(1, Number(value));
    }
    get subminor() {
        return this.#view.getUint8(2);
    }
    set subminor(value) {
        this.#view.setUint8(2, Number(value));
    }
    get patch() {
        return this.#view.getUint8(3);
    }
    set patch(value) {
        this.#view.setUint8(3, Number(value));
    }
}
export class PhysicalDeviceDriverProperties {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDriverProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDriverProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDriverProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDriverProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.driverID && (this.driverID = data.driverID), void 0 !== data.driverName && (this.driverName = data.driverName), void 0 !== data.driverInfo && (this.driverInfo = data.driverInfo), void 0 !== data.conformanceVersion && (this.conformanceVersion = data.conformanceVersion);
        this.sType = StructureType.PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get driverID() {
        return this.#view.getUint32(16, LE);
    }
    set driverID(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get driverName() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 256);
    }
    set driverName(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get driverInfo() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 276, 256);
    }
    set driverInfo(value) {
        this.#data.set(new Uint8Array(value.buffer), 276);
    }
    get conformanceVersion() {
        return new ConformanceVersion(this.#data.subarray(532, 532 + ConformanceVersion.size));
    }
    set conformanceVersion(value) {
        if (value[BUFFER].byteLength < ConformanceVersion.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 532);
    }
}
export class PresentRegionsKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentRegionsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentRegionsKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentRegionsKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentRegionsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchainCount && (this.swapchainCount = data.swapchainCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.PRESENT_REGIONS_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PresentRegionKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentRegionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentRegionKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentRegionKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentRegionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.rectangleCount && (this.rectangleCount = data.rectangleCount), void 0 !== data.pRectangles && (this.pRectangles = data.pRectangles);
    }
    get rectangleCount() {
        return this.#view.getUint32(0, LE);
    }
    set rectangleCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pRectangles() {
        return this.#view.getBigUint64(8, LE);
    }
    set pRectangles(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class RectLayerKHR {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RectLayerKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RectLayerKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RectLayerKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RectLayerKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.extent && (this.extent = data.extent), void 0 !== data.layer && (this.layer = data.layer);
    }
    get offset() {
        return new Offset2D(this.#data.subarray(0, 0 + Offset2D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get extent() {
        return new Extent2D(this.#data.subarray(8, 8 + Extent2D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
    get layer() {
        return this.#view.getUint32(16, LE);
    }
    set layer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceVariablePointersFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVariablePointersFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVariablePointersFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVariablePointersFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVariablePointersFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.variablePointersStorageBuffer && (this.variablePointersStorageBuffer = data.variablePointersStorageBuffer), void 0 !== data.variablePointers && (this.variablePointers = data.variablePointers);
        this.sType = StructureType.PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get variablePointersStorageBuffer() {
        return this.#view.getUint32(16, LE);
    }
    set variablePointersStorageBuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get variablePointers() {
        return this.#view.getUint32(20, LE);
    }
    set variablePointers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class ExternalMemoryProperties {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalMemoryProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalMemoryProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.externalMemoryFeatures && (this.externalMemoryFeatures = data.externalMemoryFeatures), void 0 !== data.exportFromImportedHandleTypes && (this.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (this.compatibleHandleTypes = data.compatibleHandleTypes);
    }
    get externalMemoryFeatures() {
        return this.#view.getUint32(0, LE);
    }
    set externalMemoryFeatures(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(4, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(8, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class PhysicalDeviceExternalImageFormatInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalImageFormatInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalImageFormatInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalImageFormatInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalImageFormatInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExternalImageFormatProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalImageFormatProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalImageFormatProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.externalMemoryProperties && (this.externalMemoryProperties = data.externalMemoryProperties);
        this.sType = StructureType.EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get externalMemoryProperties() {
        return new ExternalMemoryProperties(this.#data.subarray(16, 16 + ExternalMemoryProperties.size));
    }
    set externalMemoryProperties(value) {
        if (value[BUFFER].byteLength < ExternalMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceExternalBufferInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalBufferInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalBufferInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalBufferInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalBufferInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(20, LE);
    }
    set usage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ExternalBufferProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalBufferProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalBufferProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalBufferProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalBufferProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.externalMemoryProperties && (this.externalMemoryProperties = data.externalMemoryProperties);
        this.sType = StructureType.EXTERNAL_BUFFER_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get externalMemoryProperties() {
        return new ExternalMemoryProperties(this.#data.subarray(16, 16 + ExternalMemoryProperties.size));
    }
    set externalMemoryProperties(value) {
        if (value[BUFFER].byteLength < ExternalMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDeviceIDProperties {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceIDProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceIDProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceIDProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceIDProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceUUID && (this.deviceUUID = data.deviceUUID), void 0 !== data.driverUUID && (this.driverUUID = data.driverUUID), void 0 !== data.deviceLUID && (this.deviceLUID = data.deviceLUID), void 0 !== data.deviceNodeMask && (this.deviceNodeMask = data.deviceNodeMask), void 0 !== data.deviceLUIDValid && (this.deviceLUIDValid = data.deviceLUIDValid);
        this.sType = StructureType.PHYSICAL_DEVICE_ID_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set deviceUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get driverUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 32, 16);
    }
    set driverUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 32);
    }
    get deviceLUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 48, 8);
    }
    set deviceLUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 48);
    }
    get deviceNodeMask() {
        return this.#view.getUint32(56, LE);
    }
    set deviceNodeMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get deviceLUIDValid() {
        return this.#view.getUint32(60, LE);
    }
    set deviceLUIDValid(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class ExternalMemoryImageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalMemoryImageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalMemoryImageCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalMemoryImageCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalMemoryImageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExternalMemoryBufferCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalMemoryBufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalMemoryBufferCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalMemoryBufferCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalMemoryBufferCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExportMemoryAllocateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMemoryAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMemoryAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMemoryAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMemoryAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXPORT_MEMORY_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImportMemoryWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.handle && (this.handle = data.handle), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMemoryWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMemoryWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMemoryWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMemoryWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMemoryWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pAttributes && (this.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (this.dwAccess = data.dwAccess), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImportMemoryZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryZirconHandleInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.handle && (this.handle = data.handle);
        this.sType = StructureType.IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class MemoryZirconHandlePropertiesFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryZirconHandlePropertiesFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryZirconHandlePropertiesFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryZirconHandlePropertiesFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryZirconHandlePropertiesFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
        this.sType = StructureType.MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryGetZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryGetZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryGetZirconHandleInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryGetZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryGetZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class MemoryWin32HandlePropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryWin32HandlePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryWin32HandlePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryWin32HandlePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryWin32HandlePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
        this.sType = StructureType.MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryGetWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.MEMORY_GET_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ImportMemoryFdInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.fd && (this.fd = data.fd);
        this.sType = StructureType.IMPORT_MEMORY_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(20, LE);
    }
    set fd(value) {
        this.#view.setInt32(20, Number(value), LE);
    }
}
export class MemoryFdPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryFdPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryFdPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryFdPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryFdPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
        this.sType = StructureType.MEMORY_FD_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryGetFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryGetFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.MEMORY_GET_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class Win32KeyedMutexAcquireReleaseInfoKHR {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(Win32KeyedMutexAcquireReleaseInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, Win32KeyedMutexAcquireReleaseInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < Win32KeyedMutexAcquireReleaseInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(Win32KeyedMutexAcquireReleaseInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.acquireCount && (this.acquireCount = data.acquireCount), void 0 !== data.pAcquireSyncs && (this.pAcquireSyncs = data.pAcquireSyncs), void 0 !== data.pAcquireKeys && (this.pAcquireKeys = data.pAcquireKeys), void 0 !== data.pAcquireTimeouts && (this.pAcquireTimeouts = data.pAcquireTimeouts), void 0 !== data.releaseCount && (this.releaseCount = data.releaseCount), void 0 !== data.pReleaseSyncs && (this.pReleaseSyncs = data.pReleaseSyncs), void 0 !== data.pReleaseKeys && (this.pReleaseKeys = data.pReleaseKeys);
        this.sType = StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get acquireCount() {
        return this.#view.getUint32(16, LE);
    }
    set acquireCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAcquireSyncs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAcquireSyncs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pAcquireKeys() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAcquireKeys(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pAcquireTimeouts() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAcquireTimeouts(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get releaseCount() {
        return this.#view.getUint32(48, LE);
    }
    set releaseCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pReleaseSyncs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pReleaseSyncs(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pReleaseKeys() {
        return this.#view.getBigUint64(64, LE);
    }
    set pReleaseKeys(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceExternalSemaphoreInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalSemaphoreInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalSemaphoreInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalSemaphoreInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalSemaphoreInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExternalSemaphoreProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalSemaphoreProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalSemaphoreProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalSemaphoreProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalSemaphoreProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.exportFromImportedHandleTypes && (this.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (this.compatibleHandleTypes = data.compatibleHandleTypes), void 0 !== data.externalSemaphoreFeatures && (this.externalSemaphoreFeatures = data.externalSemaphoreFeatures);
        this.sType = StructureType.EXTERNAL_SEMAPHORE_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(20, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get externalSemaphoreFeatures() {
        return this.#view.getUint32(24, LE);
    }
    set externalSemaphoreFeatures(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ExportSemaphoreCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportSemaphoreCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportSemaphoreCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportSemaphoreCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportSemaphoreCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXPORT_SEMAPHORE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImportSemaphoreWin32HandleInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportSemaphoreWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportSemaphoreWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportSemaphoreWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportSemaphoreWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.handle && (this.handle = data.handle), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(32, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return this.#view.getBigUint64(40, LE);
    }
    set name(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class ExportSemaphoreWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportSemaphoreWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportSemaphoreWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportSemaphoreWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportSemaphoreWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pAttributes && (this.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (this.dwAccess = data.dwAccess), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class D3D12FenceSubmitInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(D3D12FenceSubmitInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, D3D12FenceSubmitInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < D3D12FenceSubmitInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(D3D12FenceSubmitInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreValuesCount && (this.waitSemaphoreValuesCount = data.waitSemaphoreValuesCount), void 0 !== data.pWaitSemaphoreValues && (this.pWaitSemaphoreValues = data.pWaitSemaphoreValues), void 0 !== data.signalSemaphoreValuesCount && (this.signalSemaphoreValuesCount = data.signalSemaphoreValuesCount), void 0 !== data.pSignalSemaphoreValues && (this.pSignalSemaphoreValues = data.pSignalSemaphoreValues);
        this.sType = StructureType.D3D12_FENCE_SUBMIT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreValuesCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreValuesCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreValues() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreValues(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreValuesCount() {
        return this.#view.getUint32(32, LE);
    }
    set signalSemaphoreValuesCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSignalSemaphoreValues() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSignalSemaphoreValues(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class SemaphoreGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreGetWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ImportSemaphoreFdInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportSemaphoreFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportSemaphoreFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportSemaphoreFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportSemaphoreFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.fd && (this.fd = data.fd);
        this.sType = StructureType.IMPORT_SEMAPHORE_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(32, LE);
    }
    set fd(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
}
export class SemaphoreGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreGetFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreGetFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.SEMAPHORE_GET_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ImportSemaphoreZirconHandleInfoFUCHSIA {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportSemaphoreZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportSemaphoreZirconHandleInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportSemaphoreZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportSemaphoreZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.zirconHandle && (this.zirconHandle = data.zirconHandle);
        this.sType = StructureType.IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get zirconHandle() {
        return this.#view.getBigUint64(32, LE);
    }
    set zirconHandle(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class SemaphoreGetZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreGetZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreGetZirconHandleInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreGetZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreGetZirconHandleInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceExternalFenceInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalFenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalFenceInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalFenceInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalFenceInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExternalFenceProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalFenceProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalFenceProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalFenceProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalFenceProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.exportFromImportedHandleTypes && (this.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (this.compatibleHandleTypes = data.compatibleHandleTypes), void 0 !== data.externalFenceFeatures && (this.externalFenceFeatures = data.externalFenceFeatures);
        this.sType = StructureType.EXTERNAL_FENCE_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(20, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get externalFenceFeatures() {
        return this.#view.getUint32(24, LE);
    }
    set externalFenceFeatures(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ExportFenceCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportFenceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportFenceCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportFenceCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportFenceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleTypes && (this.handleTypes = data.handleTypes);
        this.sType = StructureType.EXPORT_FENCE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImportFenceWin32HandleInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportFenceWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportFenceWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportFenceWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportFenceWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fence && (this.fence = data.fence), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.handle && (this.handle = data.handle), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(32, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return this.#view.getBigUint64(40, LE);
    }
    set name(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class ExportFenceWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportFenceWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportFenceWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportFenceWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportFenceWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pAttributes && (this.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (this.dwAccess = data.dwAccess), void 0 !== data.name && (this.name = data.name);
        this.sType = StructureType.EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class FenceGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FenceGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FenceGetWin32HandleInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FenceGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FenceGetWin32HandleInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fence && (this.fence = data.fence), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.FENCE_GET_WIN32_HANDLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ImportFenceFdInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportFenceFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportFenceFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportFenceFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportFenceFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fence && (this.fence = data.fence), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.fd && (this.fd = data.fd);
        this.sType = StructureType.IMPORT_FENCE_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(32, LE);
    }
    set fd(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
}
export class FenceGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FenceGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FenceGetFdInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FenceGetFdInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FenceGetFdInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fence && (this.fence = data.fence), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.FENCE_GET_FD_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceMultiviewFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultiviewFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultiviewFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultiviewFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultiviewFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.multiview && (this.multiview = data.multiview), void 0 !== data.multiviewGeometryShader && (this.multiviewGeometryShader = data.multiviewGeometryShader), void 0 !== data.multiviewTessellationShader && (this.multiviewTessellationShader = data.multiviewTessellationShader);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get multiview() {
        return this.#view.getUint32(16, LE);
    }
    set multiview(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get multiviewGeometryShader() {
        return this.#view.getUint32(20, LE);
    }
    set multiviewGeometryShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get multiviewTessellationShader() {
        return this.#view.getUint32(24, LE);
    }
    set multiviewTessellationShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceMultiviewProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultiviewProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultiviewProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultiviewProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultiviewProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxMultiviewViewCount && (this.maxMultiviewViewCount = data.maxMultiviewViewCount), void 0 !== data.maxMultiviewInstanceIndex && (this.maxMultiviewInstanceIndex = data.maxMultiviewInstanceIndex);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxMultiviewViewCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxMultiviewViewCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxMultiviewInstanceIndex() {
        return this.#view.getUint32(20, LE);
    }
    set maxMultiviewInstanceIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class RenderPassMultiviewCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassMultiviewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassMultiviewCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassMultiviewCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassMultiviewCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subpassCount && (this.subpassCount = data.subpassCount), void 0 !== data.pViewMasks && (this.pViewMasks = data.pViewMasks), void 0 !== data.dependencyCount && (this.dependencyCount = data.dependencyCount), void 0 !== data.pViewOffsets && (this.pViewOffsets = data.pViewOffsets), void 0 !== data.correlationMaskCount && (this.correlationMaskCount = data.correlationMaskCount), void 0 !== data.pCorrelationMasks && (this.pCorrelationMasks = data.pCorrelationMasks);
        this.sType = StructureType.RENDER_PASS_MULTIVIEW_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(16, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pViewMasks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewMasks(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(32, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pViewOffsets() {
        return this.#view.getBigUint64(40, LE);
    }
    set pViewOffsets(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get correlationMaskCount() {
        return this.#view.getUint32(48, LE);
    }
    set correlationMaskCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pCorrelationMasks() {
        return this.#view.getBigUint64(56, LE);
    }
    set pCorrelationMasks(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class SurfaceCapabilities2EXT {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceCapabilities2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceCapabilities2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceCapabilities2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceCapabilities2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minImageCount && (this.minImageCount = data.minImageCount), void 0 !== data.maxImageCount && (this.maxImageCount = data.maxImageCount), void 0 !== data.currentExtent && (this.currentExtent = data.currentExtent), void 0 !== data.minImageExtent && (this.minImageExtent = data.minImageExtent), void 0 !== data.maxImageExtent && (this.maxImageExtent = data.maxImageExtent), void 0 !== data.maxImageArrayLayers && (this.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.supportedTransforms && (this.supportedTransforms = data.supportedTransforms), void 0 !== data.currentTransform && (this.currentTransform = data.currentTransform), void 0 !== data.supportedCompositeAlpha && (this.supportedCompositeAlpha = data.supportedCompositeAlpha), void 0 !== data.supportedUsageFlags && (this.supportedUsageFlags = data.supportedUsageFlags), void 0 !== data.supportedSurfaceCounters && (this.supportedSurfaceCounters = data.supportedSurfaceCounters);
        this.sType = StructureType.SURFACE_CAPABILITIES_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minImageCount() {
        return this.#view.getUint32(16, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxImageCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxImageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get currentExtent() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set currentExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get minImageExtent() {
        return new Extent2D(this.#data.subarray(32, 32 + Extent2D.size));
    }
    set minImageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get maxImageExtent() {
        return new Extent2D(this.#data.subarray(40, 40 + Extent2D.size));
    }
    set maxImageExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(48, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get supportedTransforms() {
        return this.#view.getUint32(52, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get currentTransform() {
        return this.#view.getUint32(56, LE);
    }
    set currentTransform(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get supportedCompositeAlpha() {
        return this.#view.getUint32(60, LE);
    }
    set supportedCompositeAlpha(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get supportedUsageFlags() {
        return this.#view.getUint32(64, LE);
    }
    set supportedUsageFlags(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get supportedSurfaceCounters() {
        return this.#view.getUint32(68, LE);
    }
    set supportedSurfaceCounters(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class DisplayPowerInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPowerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPowerInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPowerInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPowerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.powerState && (this.powerState = data.powerState);
        this.sType = StructureType.DISPLAY_POWER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get powerState() {
        return this.#view.getUint32(16, LE);
    }
    set powerState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceEventInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceEventInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceEvent && (this.deviceEvent = data.deviceEvent);
        this.sType = StructureType.DEVICE_EVENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceEvent() {
        return this.#view.getUint32(16, LE);
    }
    set deviceEvent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DisplayEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayEventInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayEventInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.displayEvent && (this.displayEvent = data.displayEvent);
        this.sType = StructureType.DISPLAY_EVENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get displayEvent() {
        return this.#view.getUint32(16, LE);
    }
    set displayEvent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SwapchainCounterCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SwapchainCounterCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SwapchainCounterCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SwapchainCounterCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SwapchainCounterCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.surfaceCounters && (this.surfaceCounters = data.surfaceCounters);
        this.sType = StructureType.SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get surfaceCounters() {
        return this.#view.getUint32(16, LE);
    }
    set surfaceCounters(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceGroupProperties {
    static size = 288;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceGroupProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceGroupProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceGroupProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceGroupProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.physicalDeviceCount && (this.physicalDeviceCount = data.physicalDeviceCount), void 0 !== data.physicalDevices && (this.physicalDevices = data.physicalDevices), void 0 !== data.subsetAllocation && (this.subsetAllocation = data.subsetAllocation);
        this.sType = StructureType.PHYSICAL_DEVICE_GROUP_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get physicalDeviceCount() {
        return this.#view.getUint32(16, LE);
    }
    set physicalDeviceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get physicalDevices() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getBigUint64(24 + 8 * i, LE));
        return result;
    }
    set physicalDevices(value) {
        for(let i = 0; i < value.length; i++)this.#view.setBigUint64(24 + 8 * i, BigInt(anyPointer(value[i])), LE);
    }
    get subsetAllocation() {
        return this.#view.getUint32(280, LE);
    }
    set subsetAllocation(value) {
        this.#view.setUint32(280, Number(value), LE);
    }
}
export class MemoryAllocateFlagsInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryAllocateFlagsInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryAllocateFlagsInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryAllocateFlagsInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryAllocateFlagsInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.deviceMask && (this.deviceMask = data.deviceMask);
        this.sType = StructureType.MEMORY_ALLOCATE_FLAGS_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(20, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class BindBufferMemoryInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindBufferMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindBufferMemoryInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindBufferMemoryInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindBufferMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset);
        this.sType = StructureType.BIND_BUFFER_MEMORY_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class BindBufferMemoryDeviceGroupInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindBufferMemoryDeviceGroupInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindBufferMemoryDeviceGroupInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindBufferMemoryDeviceGroupInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindBufferMemoryDeviceGroupInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceIndexCount && (this.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (this.pDeviceIndices = data.pDeviceIndices);
        this.sType = StructureType.BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(16, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class BindImageMemoryInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindImageMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindImageMemoryInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindImageMemoryInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindImageMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset);
        this.sType = StructureType.BIND_IMAGE_MEMORY_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class BindImageMemoryDeviceGroupInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindImageMemoryDeviceGroupInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindImageMemoryDeviceGroupInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindImageMemoryDeviceGroupInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindImageMemoryDeviceGroupInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceIndexCount && (this.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (this.pDeviceIndices = data.pDeviceIndices), void 0 !== data.splitInstanceBindRegionCount && (this.splitInstanceBindRegionCount = data.splitInstanceBindRegionCount), void 0 !== data.pSplitInstanceBindRegions && (this.pSplitInstanceBindRegions = data.pSplitInstanceBindRegions);
        this.sType = StructureType.BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(16, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get splitInstanceBindRegionCount() {
        return this.#view.getUint32(32, LE);
    }
    set splitInstanceBindRegionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSplitInstanceBindRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSplitInstanceBindRegions(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceGroupRenderPassBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupRenderPassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupRenderPassBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupRenderPassBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupRenderPassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceMask && (this.deviceMask = data.deviceMask), void 0 !== data.deviceRenderAreaCount && (this.deviceRenderAreaCount = data.deviceRenderAreaCount), void 0 !== data.pDeviceRenderAreas && (this.pDeviceRenderAreas = data.pDeviceRenderAreas);
        this.sType = StructureType.DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceRenderAreaCount() {
        return this.#view.getUint32(20, LE);
    }
    set deviceRenderAreaCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDeviceRenderAreas() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceRenderAreas(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceGroupCommandBufferBeginInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupCommandBufferBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupCommandBufferBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupCommandBufferBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupCommandBufferBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceMask && (this.deviceMask = data.deviceMask);
        this.sType = StructureType.DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceGroupSubmitInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupSubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupSubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (this.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphoreDeviceIndices && (this.pWaitSemaphoreDeviceIndices = data.pWaitSemaphoreDeviceIndices), void 0 !== data.commandBufferCount && (this.commandBufferCount = data.commandBufferCount), void 0 !== data.pCommandBufferDeviceMasks && (this.pCommandBufferDeviceMasks = data.pCommandBufferDeviceMasks), void 0 !== data.signalSemaphoreCount && (this.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphoreDeviceIndices && (this.pSignalSemaphoreDeviceIndices = data.pSignalSemaphoreDeviceIndices);
        this.sType = StructureType.DEVICE_GROUP_SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(32, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pCommandBufferDeviceMasks() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCommandBufferDeviceMasks(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(48, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pSignalSemaphoreDeviceIndices() {
        return this.#view.getBigUint64(56, LE);
    }
    set pSignalSemaphoreDeviceIndices(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceGroupBindSparseInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupBindSparseInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupBindSparseInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupBindSparseInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupBindSparseInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.resourceDeviceIndex && (this.resourceDeviceIndex = data.resourceDeviceIndex), void 0 !== data.memoryDeviceIndex && (this.memoryDeviceIndex = data.memoryDeviceIndex);
        this.sType = StructureType.DEVICE_GROUP_BIND_SPARSE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get resourceDeviceIndex() {
        return this.#view.getUint32(16, LE);
    }
    set resourceDeviceIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryDeviceIndex() {
        return this.#view.getUint32(20, LE);
    }
    set memoryDeviceIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class DeviceGroupPresentCapabilitiesKHR {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupPresentCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupPresentCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupPresentCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupPresentCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentMask && (this.presentMask = data.presentMask), void 0 !== data.modes && (this.modes = data.modes);
        this.sType = StructureType.DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentMask() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 16, 32);
    }
    set presentMask(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get modes() {
        return this.#view.getUint32(144, LE);
    }
    set modes(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
}
export class ImageSwapchainCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSwapchainCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchain && (this.swapchain = data.swapchain);
        this.sType = StructureType.IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class BindImageMemorySwapchainInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindImageMemorySwapchainInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindImageMemorySwapchainInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindImageMemorySwapchainInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindImageMemorySwapchainInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchain && (this.swapchain = data.swapchain), void 0 !== data.imageIndex && (this.imageIndex = data.imageIndex);
        this.sType = StructureType.BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get imageIndex() {
        return this.#view.getUint32(24, LE);
    }
    set imageIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class AcquireNextImageInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AcquireNextImageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AcquireNextImageInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AcquireNextImageInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AcquireNextImageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchain && (this.swapchain = data.swapchain), void 0 !== data.timeout && (this.timeout = data.timeout), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.fence && (this.fence = data.fence), void 0 !== data.deviceMask && (this.deviceMask = data.deviceMask);
        this.sType = StructureType.ACQUIRE_NEXT_IMAGE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get timeout() {
        return this.#view.getBigUint64(24, LE);
    }
    set timeout(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(32, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get fence() {
        return this.#view.getBigUint64(40, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(48, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class DeviceGroupPresentInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupPresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupPresentInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupPresentInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupPresentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchainCount && (this.swapchainCount = data.swapchainCount), void 0 !== data.pDeviceMasks && (this.pDeviceMasks = data.pDeviceMasks), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.DEVICE_GROUP_PRESENT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceMasks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceMasks(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class DeviceGroupDeviceCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupDeviceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupDeviceCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupDeviceCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupDeviceCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.physicalDeviceCount && (this.physicalDeviceCount = data.physicalDeviceCount), void 0 !== data.pPhysicalDevices && (this.pPhysicalDevices = data.pPhysicalDevices);
        this.sType = StructureType.DEVICE_GROUP_DEVICE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get physicalDeviceCount() {
        return this.#view.getUint32(16, LE);
    }
    set physicalDeviceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pPhysicalDevices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPhysicalDevices(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceGroupSwapchainCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceGroupSwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceGroupSwapchainCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceGroupSwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceGroupSwapchainCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.modes && (this.modes = data.modes);
        this.sType = StructureType.DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get modes() {
        return this.#view.getUint32(16, LE);
    }
    set modes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DescriptorUpdateTemplateEntry {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorUpdateTemplateEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorUpdateTemplateEntry.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorUpdateTemplateEntry.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorUpdateTemplateEntry.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.dstBinding && (this.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (this.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (this.descriptorCount = data.descriptorCount), void 0 !== data.descriptorType && (this.descriptorType = data.descriptorType), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.stride && (this.stride = data.stride);
    }
    get dstBinding() {
        return this.#view.getUint32(0, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(4, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(8, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(12, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(16, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get stride() {
        return this.#view.getBigUint64(24, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class DescriptorUpdateTemplateCreateInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorUpdateTemplateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorUpdateTemplateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorUpdateTemplateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorUpdateTemplateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.descriptorUpdateEntryCount && (this.descriptorUpdateEntryCount = data.descriptorUpdateEntryCount), void 0 !== data.pDescriptorUpdateEntries && (this.pDescriptorUpdateEntries = data.pDescriptorUpdateEntries), void 0 !== data.templateType && (this.templateType = data.templateType), void 0 !== data.descriptorSetLayout && (this.descriptorSetLayout = data.descriptorSetLayout), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipelineLayout && (this.pipelineLayout = data.pipelineLayout), void 0 !== data.set && (this.set = data.set);
        this.sType = StructureType.DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorUpdateEntryCount() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorUpdateEntryCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDescriptorUpdateEntries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDescriptorUpdateEntries(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get templateType() {
        return this.#view.getUint32(32, LE);
    }
    set templateType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get descriptorSetLayout() {
        return this.#view.getBigUint64(40, LE);
    }
    set descriptorSetLayout(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(48, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pipelineLayout() {
        return this.#view.getBigUint64(56, LE);
    }
    set pipelineLayout(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get set() {
        return this.#view.getUint32(64, LE);
    }
    set set(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
}
export class XYColorEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(XYColorEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, XYColorEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < XYColorEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(XYColorEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y);
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class PhysicalDevicePresentIdFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePresentIdFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePresentIdFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePresentIdFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePresentIdFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentId && (this.presentId = data.presentId);
        this.sType = StructureType.PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentId() {
        return this.#view.getUint32(16, LE);
    }
    set presentId(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PresentIdKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentIdKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentIdKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentIdKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentIdKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchainCount && (this.swapchainCount = data.swapchainCount), void 0 !== data.pPresentIds && (this.pPresentIds = data.pPresentIds);
        this.sType = StructureType.PRESENT_ID_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pPresentIds() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPresentIds(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDevicePresentWaitFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePresentWaitFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePresentWaitFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePresentWaitFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePresentWaitFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentWait && (this.presentWait = data.presentWait);
        this.sType = StructureType.PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentWait() {
        return this.#view.getUint32(16, LE);
    }
    set presentWait(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class HdrMetadataEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(HdrMetadataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, HdrMetadataEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < HdrMetadataEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(HdrMetadataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.displayPrimaryRed && (this.displayPrimaryRed = data.displayPrimaryRed), void 0 !== data.displayPrimaryGreen && (this.displayPrimaryGreen = data.displayPrimaryGreen), void 0 !== data.displayPrimaryBlue && (this.displayPrimaryBlue = data.displayPrimaryBlue), void 0 !== data.whitePoint && (this.whitePoint = data.whitePoint), void 0 !== data.maxLuminance && (this.maxLuminance = data.maxLuminance), void 0 !== data.minLuminance && (this.minLuminance = data.minLuminance), void 0 !== data.maxContentLightLevel && (this.maxContentLightLevel = data.maxContentLightLevel), void 0 !== data.maxFrameAverageLightLevel && (this.maxFrameAverageLightLevel = data.maxFrameAverageLightLevel);
        this.sType = StructureType.HDR_METADATA_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get displayPrimaryRed() {
        return new XYColorEXT(this.#data.subarray(16, 16 + XYColorEXT.size));
    }
    set displayPrimaryRed(value) {
        if (value[BUFFER].byteLength < XYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get displayPrimaryGreen() {
        return new XYColorEXT(this.#data.subarray(24, 24 + XYColorEXT.size));
    }
    set displayPrimaryGreen(value) {
        if (value[BUFFER].byteLength < XYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get displayPrimaryBlue() {
        return new XYColorEXT(this.#data.subarray(32, 32 + XYColorEXT.size));
    }
    set displayPrimaryBlue(value) {
        if (value[BUFFER].byteLength < XYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get whitePoint() {
        return new XYColorEXT(this.#data.subarray(40, 40 + XYColorEXT.size));
    }
    set whitePoint(value) {
        if (value[BUFFER].byteLength < XYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get maxLuminance() {
        return this.#view.getFloat32(48, LE);
    }
    set maxLuminance(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get minLuminance() {
        return this.#view.getFloat32(52, LE);
    }
    set minLuminance(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get maxContentLightLevel() {
        return this.#view.getFloat32(56, LE);
    }
    set maxContentLightLevel(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
    get maxFrameAverageLightLevel() {
        return this.#view.getFloat32(60, LE);
    }
    set maxFrameAverageLightLevel(value) {
        this.#view.setFloat32(60, Number(value), LE);
    }
}
export class DisplayNativeHdrSurfaceCapabilitiesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayNativeHdrSurfaceCapabilitiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayNativeHdrSurfaceCapabilitiesAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayNativeHdrSurfaceCapabilitiesAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayNativeHdrSurfaceCapabilitiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.localDimmingSupport && (this.localDimmingSupport = data.localDimmingSupport);
        this.sType = StructureType.DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get localDimmingSupport() {
        return this.#view.getUint32(16, LE);
    }
    set localDimmingSupport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SwapchainDisplayNativeHdrCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SwapchainDisplayNativeHdrCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SwapchainDisplayNativeHdrCreateInfoAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SwapchainDisplayNativeHdrCreateInfoAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SwapchainDisplayNativeHdrCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.localDimmingEnable && (this.localDimmingEnable = data.localDimmingEnable);
        this.sType = StructureType.SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get localDimmingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set localDimmingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class RefreshCycleDurationGOOGLE {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RefreshCycleDurationGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RefreshCycleDurationGOOGLE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RefreshCycleDurationGOOGLE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RefreshCycleDurationGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.refreshDuration && (this.refreshDuration = data.refreshDuration);
    }
    get refreshDuration() {
        return this.#view.getBigUint64(0, LE);
    }
    set refreshDuration(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
}
export class PastPresentationTimingGOOGLE {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PastPresentationTimingGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PastPresentationTimingGOOGLE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PastPresentationTimingGOOGLE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PastPresentationTimingGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.presentID && (this.presentID = data.presentID), void 0 !== data.desiredPresentTime && (this.desiredPresentTime = data.desiredPresentTime), void 0 !== data.actualPresentTime && (this.actualPresentTime = data.actualPresentTime), void 0 !== data.earliestPresentTime && (this.earliestPresentTime = data.earliestPresentTime), void 0 !== data.presentMargin && (this.presentMargin = data.presentMargin);
    }
    get presentID() {
        return this.#view.getUint32(0, LE);
    }
    set presentID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get desiredPresentTime() {
        return this.#view.getBigUint64(8, LE);
    }
    set desiredPresentTime(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get actualPresentTime() {
        return this.#view.getBigUint64(16, LE);
    }
    set actualPresentTime(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get earliestPresentTime() {
        return this.#view.getBigUint64(24, LE);
    }
    set earliestPresentTime(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get presentMargin() {
        return this.#view.getBigUint64(32, LE);
    }
    set presentMargin(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class PresentTimesInfoGOOGLE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentTimesInfoGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentTimesInfoGOOGLE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentTimesInfoGOOGLE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentTimesInfoGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.swapchainCount && (this.swapchainCount = data.swapchainCount), void 0 !== data.pTimes && (this.pTimes = data.pTimes);
        this.sType = StructureType.PRESENT_TIMES_INFO_GOOGLE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pTimes() {
        return this.#view.getBigUint64(24, LE);
    }
    set pTimes(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PresentTimeGOOGLE {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentTimeGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentTimeGOOGLE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentTimeGOOGLE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentTimeGOOGLE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.presentID && (this.presentID = data.presentID), void 0 !== data.desiredPresentTime && (this.desiredPresentTime = data.desiredPresentTime);
    }
    get presentID() {
        return this.#view.getUint32(0, LE);
    }
    set presentID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get desiredPresentTime() {
        return this.#view.getBigUint64(8, LE);
    }
    set desiredPresentTime(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class IOSSurfaceCreateInfoMVK {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(IOSSurfaceCreateInfoMVK.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, IOSSurfaceCreateInfoMVK.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < IOSSurfaceCreateInfoMVK.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(IOSSurfaceCreateInfoMVK.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pView && (this.pView = data.pView);
        this.sType = StructureType.IOS_SURFACE_CREATE_INFO_MVK;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pView() {
        return this.#view.getBigUint64(24, LE);
    }
    set pView(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class MacOSSurfaceCreateInfoMVK {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MacOSSurfaceCreateInfoMVK.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MacOSSurfaceCreateInfoMVK.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MacOSSurfaceCreateInfoMVK.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MacOSSurfaceCreateInfoMVK.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pView && (this.pView = data.pView);
        this.sType = StructureType.MACOS_SURFACE_CREATE_INFO_MVK;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pView() {
        return this.#view.getBigUint64(24, LE);
    }
    set pView(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class MetalSurfaceCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MetalSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MetalSurfaceCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MetalSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MetalSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pLayer && (this.pLayer = data.pLayer);
        this.sType = StructureType.METAL_SURFACE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pLayer() {
        return this.#view.getBigUint64(24, LE);
    }
    set pLayer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ViewportWScalingNV {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ViewportWScalingNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ViewportWScalingNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ViewportWScalingNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ViewportWScalingNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.xcoeff && (this.xcoeff = data.xcoeff), void 0 !== data.ycoeff && (this.ycoeff = data.ycoeff);
    }
    get xcoeff() {
        return this.#view.getFloat32(0, LE);
    }
    set xcoeff(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get ycoeff() {
        return this.#view.getFloat32(4, LE);
    }
    set ycoeff(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class PipelineViewportWScalingStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportWScalingStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportWScalingStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportWScalingStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportWScalingStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.viewportWScalingEnable && (this.viewportWScalingEnable = data.viewportWScalingEnable), void 0 !== data.viewportCount && (this.viewportCount = data.viewportCount), void 0 !== data.pViewportWScalings && (this.pViewportWScalings = data.pViewportWScalings);
        this.sType = StructureType.PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get viewportWScalingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set viewportWScalingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportWScalings() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportWScalings(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ViewportSwizzleNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ViewportSwizzleNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ViewportSwizzleNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ViewportSwizzleNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ViewportSwizzleNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y), void 0 !== data.z && (this.z = data.z), void 0 !== data.w && (this.w = data.w);
    }
    get x() {
        return this.#view.getUint32(0, LE);
    }
    set x(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getUint32(4, LE);
    }
    set y(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getUint32(8, LE);
    }
    set z(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get w() {
        return this.#view.getUint32(12, LE);
    }
    set w(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class PipelineViewportSwizzleStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportSwizzleStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportSwizzleStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportSwizzleStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportSwizzleStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.viewportCount && (this.viewportCount = data.viewportCount), void 0 !== data.pViewportSwizzles && (this.pViewportSwizzles = data.pViewportSwizzles);
        this.sType = StructureType.PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportSwizzles() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportSwizzles(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDiscardRectanglePropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDiscardRectanglePropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDiscardRectanglePropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDiscardRectanglePropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDiscardRectanglePropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxDiscardRectangles && (this.maxDiscardRectangles = data.maxDiscardRectangles);
        this.sType = StructureType.PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxDiscardRectangles() {
        return this.#view.getUint32(16, LE);
    }
    set maxDiscardRectangles(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineDiscardRectangleStateCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineDiscardRectangleStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineDiscardRectangleStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineDiscardRectangleStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineDiscardRectangleStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.discardRectangleMode && (this.discardRectangleMode = data.discardRectangleMode), void 0 !== data.discardRectangleCount && (this.discardRectangleCount = data.discardRectangleCount), void 0 !== data.pDiscardRectangles && (this.pDiscardRectangles = data.pDiscardRectangles);
        this.sType = StructureType.PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get discardRectangleMode() {
        return this.#view.getUint32(20, LE);
    }
    set discardRectangleMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get discardRectangleCount() {
        return this.#view.getUint32(24, LE);
    }
    set discardRectangleCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pDiscardRectangles() {
        return this.#view.getBigUint64(32, LE);
    }
    set pDiscardRectangles(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.perViewPositionAllComponents && (this.perViewPositionAllComponents = data.perViewPositionAllComponents);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get perViewPositionAllComponents() {
        return this.#view.getUint32(16, LE);
    }
    set perViewPositionAllComponents(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class InputAttachmentAspectReference {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(InputAttachmentAspectReference.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, InputAttachmentAspectReference.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < InputAttachmentAspectReference.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(InputAttachmentAspectReference.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.subpass && (this.subpass = data.subpass), void 0 !== data.inputAttachmentIndex && (this.inputAttachmentIndex = data.inputAttachmentIndex), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask);
    }
    get subpass() {
        return this.#view.getUint32(0, LE);
    }
    set subpass(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get inputAttachmentIndex() {
        return this.#view.getUint32(4, LE);
    }
    set inputAttachmentIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get aspectMask() {
        return this.#view.getUint32(8, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class RenderPassInputAttachmentAspectCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassInputAttachmentAspectCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassInputAttachmentAspectCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassInputAttachmentAspectCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassInputAttachmentAspectCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.aspectReferenceCount && (this.aspectReferenceCount = data.aspectReferenceCount), void 0 !== data.pAspectReferences && (this.pAspectReferences = data.pAspectReferences);
        this.sType = StructureType.RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get aspectReferenceCount() {
        return this.#view.getUint32(16, LE);
    }
    set aspectReferenceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAspectReferences() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAspectReferences(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceSurfaceInfo2KHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSurfaceInfo2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSurfaceInfo2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSurfaceInfo2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSurfaceInfo2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.surface && (this.surface = data.surface);
        this.sType = StructureType.PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get surface() {
        return this.#view.getBigUint64(16, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SurfaceCapabilities2KHR {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceCapabilities2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceCapabilities2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceCapabilities2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceCapabilities2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.surfaceCapabilities && (this.surfaceCapabilities = data.surfaceCapabilities);
        this.sType = StructureType.SURFACE_CAPABILITIES_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get surfaceCapabilities() {
        return new SurfaceCapabilitiesKHR(this.#data.subarray(16, 16 + SurfaceCapabilitiesKHR.size));
    }
    set surfaceCapabilities(value) {
        if (value[BUFFER].byteLength < SurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SurfaceFormat2KHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceFormat2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceFormat2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceFormat2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceFormat2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.surfaceFormat && (this.surfaceFormat = data.surfaceFormat);
        this.sType = StructureType.SURFACE_FORMAT_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get surfaceFormat() {
        return new SurfaceFormatKHR(this.#data.subarray(16, 16 + SurfaceFormatKHR.size));
    }
    set surfaceFormat(value) {
        if (value[BUFFER].byteLength < SurfaceFormatKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class DisplayProperties2KHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayProperties2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayProperties2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.displayProperties && (this.displayProperties = data.displayProperties);
        this.sType = StructureType.DISPLAY_PROPERTIES_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get displayProperties() {
        return new DisplayPropertiesKHR(this.#data.subarray(16, 16 + DisplayPropertiesKHR.size));
    }
    set displayProperties(value) {
        if (value[BUFFER].byteLength < DisplayPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class DisplayPlaneProperties2KHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPlaneProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPlaneProperties2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPlaneProperties2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPlaneProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.displayPlaneProperties && (this.displayPlaneProperties = data.displayPlaneProperties);
        this.sType = StructureType.DISPLAY_PLANE_PROPERTIES_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get displayPlaneProperties() {
        return new DisplayPlanePropertiesKHR(this.#data.subarray(16, 16 + DisplayPlanePropertiesKHR.size));
    }
    set displayPlaneProperties(value) {
        if (value[BUFFER].byteLength < DisplayPlanePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class DisplayModeProperties2KHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayModeProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayModeProperties2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayModeProperties2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayModeProperties2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.displayModeProperties && (this.displayModeProperties = data.displayModeProperties);
        this.sType = StructureType.DISPLAY_MODE_PROPERTIES_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get displayModeProperties() {
        return new DisplayModePropertiesKHR(this.#data.subarray(16, 16 + DisplayModePropertiesKHR.size));
    }
    set displayModeProperties(value) {
        if (value[BUFFER].byteLength < DisplayModePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class DisplayPlaneInfo2KHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPlaneInfo2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPlaneInfo2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPlaneInfo2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPlaneInfo2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mode && (this.mode = data.mode), void 0 !== data.planeIndex && (this.planeIndex = data.planeIndex);
        this.sType = StructureType.DISPLAY_PLANE_INFO_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getBigUint64(16, LE);
    }
    set mode(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get planeIndex() {
        return this.#view.getUint32(24, LE);
    }
    set planeIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class DisplayPlaneCapabilities2KHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DisplayPlaneCapabilities2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DisplayPlaneCapabilities2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DisplayPlaneCapabilities2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DisplayPlaneCapabilities2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.capabilities && (this.capabilities = data.capabilities);
        this.sType = StructureType.DISPLAY_PLANE_CAPABILITIES_2_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get capabilities() {
        return new DisplayPlaneCapabilitiesKHR(this.#data.subarray(16, 16 + DisplayPlaneCapabilitiesKHR.size));
    }
    set capabilities(value) {
        if (value[BUFFER].byteLength < DisplayPlaneCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SharedPresentSurfaceCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SharedPresentSurfaceCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SharedPresentSurfaceCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SharedPresentSurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SharedPresentSurfaceCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sharedPresentSupportedUsageFlags && (this.sharedPresentSupportedUsageFlags = data.sharedPresentSupportedUsageFlags);
        this.sType = StructureType.SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sharedPresentSupportedUsageFlags() {
        return this.#view.getUint32(16, LE);
    }
    set sharedPresentSupportedUsageFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevice16BitStorageFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevice16BitStorageFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevice16BitStorageFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevice16BitStorageFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevice16BitStorageFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.storageBuffer16BitAccess && (this.storageBuffer16BitAccess = data.storageBuffer16BitAccess), void 0 !== data.uniformAndStorageBuffer16BitAccess && (this.uniformAndStorageBuffer16BitAccess = data.uniformAndStorageBuffer16BitAccess), void 0 !== data.storagePushConstant16 && (this.storagePushConstant16 = data.storagePushConstant16), void 0 !== data.storageInputOutput16 && (this.storageInputOutput16 = data.storageInputOutput16);
        this.sType = StructureType.PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get storageBuffer16BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer16BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer16BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer16BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant16() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get storageInputOutput16() {
        return this.#view.getUint32(28, LE);
    }
    set storageInputOutput16(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceSubgroupProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubgroupProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubgroupProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubgroupProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubgroupProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subgroupSize && (this.subgroupSize = data.subgroupSize), void 0 !== data.supportedStages && (this.supportedStages = data.supportedStages), void 0 !== data.supportedOperations && (this.supportedOperations = data.supportedOperations), void 0 !== data.quadOperationsInAllStages && (this.quadOperationsInAllStages = data.quadOperationsInAllStages);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedStages() {
        return this.#view.getUint32(20, LE);
    }
    set supportedStages(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get supportedOperations() {
        return this.#view.getUint32(24, LE);
    }
    set supportedOperations(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get quadOperationsInAllStages() {
        return this.#view.getUint32(28, LE);
    }
    set quadOperationsInAllStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderSubgroupExtendedTypesFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderSubgroupExtendedTypesFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderSubgroupExtendedTypesFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderSubgroupExtendedTypesFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderSubgroupExtendedTypes && (this.shaderSubgroupExtendedTypes = data.shaderSubgroupExtendedTypes);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderSubgroupExtendedTypes() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupExtendedTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class BufferMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferMemoryRequirementsInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceBufferMemoryRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceBufferMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceBufferMemoryRequirements.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceBufferMemoryRequirements.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceBufferMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pCreateInfo && (this.pCreateInfo = data.pCreateInfo);
        this.sType = StructureType.DEVICE_BUFFER_MEMORY_REQUIREMENTS;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pCreateInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pCreateInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ImageMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageMemoryRequirementsInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image);
        this.sType = StructureType.IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ImageSparseMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSparseMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSparseMemoryRequirementsInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSparseMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSparseMemoryRequirementsInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image);
        this.sType = StructureType.IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceImageMemoryRequirements {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceImageMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceImageMemoryRequirements.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceImageMemoryRequirements.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceImageMemoryRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pCreateInfo && (this.pCreateInfo = data.pCreateInfo), void 0 !== data.planeAspect && (this.planeAspect = data.planeAspect);
        this.sType = StructureType.DEVICE_IMAGE_MEMORY_REQUIREMENTS;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pCreateInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pCreateInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(24, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class MemoryRequirements2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryRequirements2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryRequirements2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryRequirements2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryRequirements2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryRequirements && (this.memoryRequirements = data.memoryRequirements);
        this.sType = StructureType.MEMORY_REQUIREMENTS_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryRequirements() {
        return new MemoryRequirements(this.#data.subarray(16, 16 + MemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < MemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SparseImageMemoryRequirements2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SparseImageMemoryRequirements2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SparseImageMemoryRequirements2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SparseImageMemoryRequirements2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SparseImageMemoryRequirements2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryRequirements && (this.memoryRequirements = data.memoryRequirements);
        this.sType = StructureType.SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryRequirements() {
        return new SparseImageMemoryRequirements(this.#data.subarray(16, 16 + SparseImageMemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < SparseImageMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class PhysicalDevicePointClippingProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePointClippingProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePointClippingProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePointClippingProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePointClippingProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pointClippingBehavior && (this.pointClippingBehavior = data.pointClippingBehavior);
        this.sType = StructureType.PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pointClippingBehavior() {
        return this.#view.getUint32(16, LE);
    }
    set pointClippingBehavior(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryDedicatedRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryDedicatedRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryDedicatedRequirements.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryDedicatedRequirements.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryDedicatedRequirements.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.prefersDedicatedAllocation && (this.prefersDedicatedAllocation = data.prefersDedicatedAllocation), void 0 !== data.requiresDedicatedAllocation && (this.requiresDedicatedAllocation = data.requiresDedicatedAllocation);
        this.sType = StructureType.MEMORY_DEDICATED_REQUIREMENTS;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get prefersDedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set prefersDedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get requiresDedicatedAllocation() {
        return this.#view.getUint32(20, LE);
    }
    set requiresDedicatedAllocation(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class MemoryDedicatedAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryDedicatedAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryDedicatedAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryDedicatedAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryDedicatedAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.MEMORY_DEDICATED_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ImageViewUsageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewUsageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewUsageCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewUsageCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewUsageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.usage && (this.usage = data.usage);
        this.sType = StructureType.IMAGE_VIEW_USAGE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineTessellationDomainOriginStateCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineTessellationDomainOriginStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineTessellationDomainOriginStateCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineTessellationDomainOriginStateCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineTessellationDomainOriginStateCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.domainOrigin && (this.domainOrigin = data.domainOrigin);
        this.sType = StructureType.PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get domainOrigin() {
        return this.#view.getUint32(16, LE);
    }
    set domainOrigin(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SamplerYcbcrConversionInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerYcbcrConversionInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerYcbcrConversionInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerYcbcrConversionInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerYcbcrConversionInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.conversion && (this.conversion = data.conversion);
        this.sType = StructureType.SAMPLER_YCBCR_CONVERSION_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get conversion() {
        return this.#view.getBigUint64(16, LE);
    }
    set conversion(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SamplerYcbcrConversionCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerYcbcrConversionCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerYcbcrConversionCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerYcbcrConversionCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerYcbcrConversionCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.ycbcrModel && (this.ycbcrModel = data.ycbcrModel), void 0 !== data.ycbcrRange && (this.ycbcrRange = data.ycbcrRange), void 0 !== data.components && (this.components = data.components), void 0 !== data.xChromaOffset && (this.xChromaOffset = data.xChromaOffset), void 0 !== data.yChromaOffset && (this.yChromaOffset = data.yChromaOffset), void 0 !== data.chromaFilter && (this.chromaFilter = data.chromaFilter), void 0 !== data.forceExplicitReconstruction && (this.forceExplicitReconstruction = data.forceExplicitReconstruction);
        this.sType = StructureType.SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get ycbcrModel() {
        return this.#view.getUint32(20, LE);
    }
    set ycbcrModel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get ycbcrRange() {
        return this.#view.getUint32(24, LE);
    }
    set ycbcrRange(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get components() {
        return new ComponentMapping(this.#data.subarray(28, 28 + ComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get xChromaOffset() {
        return this.#view.getUint32(44, LE);
    }
    set xChromaOffset(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get yChromaOffset() {
        return this.#view.getUint32(48, LE);
    }
    set yChromaOffset(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get chromaFilter() {
        return this.#view.getUint32(52, LE);
    }
    set chromaFilter(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get forceExplicitReconstruction() {
        return this.#view.getUint32(56, LE);
    }
    set forceExplicitReconstruction(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class BindImagePlaneMemoryInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindImagePlaneMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindImagePlaneMemoryInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindImagePlaneMemoryInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindImagePlaneMemoryInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.planeAspect && (this.planeAspect = data.planeAspect);
        this.sType = StructureType.BIND_IMAGE_PLANE_MEMORY_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(16, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImagePlaneMemoryRequirementsInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImagePlaneMemoryRequirementsInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImagePlaneMemoryRequirementsInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImagePlaneMemoryRequirementsInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImagePlaneMemoryRequirementsInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.planeAspect && (this.planeAspect = data.planeAspect);
        this.sType = StructureType.IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(16, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceSamplerYcbcrConversionFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSamplerYcbcrConversionFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSamplerYcbcrConversionFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSamplerYcbcrConversionFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSamplerYcbcrConversionFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.samplerYcbcrConversion && (this.samplerYcbcrConversion = data.samplerYcbcrConversion);
        this.sType = StructureType.PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get samplerYcbcrConversion() {
        return this.#view.getUint32(16, LE);
    }
    set samplerYcbcrConversion(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SamplerYcbcrConversionImageFormatProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerYcbcrConversionImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerYcbcrConversionImageFormatProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerYcbcrConversionImageFormatProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerYcbcrConversionImageFormatProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.combinedImageSamplerDescriptorCount && (this.combinedImageSamplerDescriptorCount = data.combinedImageSamplerDescriptorCount);
        this.sType = StructureType.SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get combinedImageSamplerDescriptorCount() {
        return this.#view.getUint32(16, LE);
    }
    set combinedImageSamplerDescriptorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class TextureLODGatherFormatPropertiesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TextureLODGatherFormatPropertiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TextureLODGatherFormatPropertiesAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TextureLODGatherFormatPropertiesAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TextureLODGatherFormatPropertiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supportsTextureGatherLODBiasAMD && (this.supportsTextureGatherLODBiasAMD = data.supportsTextureGatherLODBiasAMD);
        this.sType = StructureType.TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supportsTextureGatherLODBiasAMD() {
        return this.#view.getUint32(16, LE);
    }
    set supportsTextureGatherLODBiasAMD(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ConditionalRenderingBeginInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ConditionalRenderingBeginInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ConditionalRenderingBeginInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ConditionalRenderingBeginInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ConditionalRenderingBeginInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(24, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class ProtectedSubmitInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ProtectedSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ProtectedSubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ProtectedSubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ProtectedSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.protectedSubmit && (this.protectedSubmit = data.protectedSubmit);
        this.sType = StructureType.PROTECTED_SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get protectedSubmit() {
        return this.#view.getUint32(16, LE);
    }
    set protectedSubmit(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceProtectedMemoryFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProtectedMemoryFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProtectedMemoryFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProtectedMemoryFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProtectedMemoryFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.protectedMemory && (this.protectedMemory = data.protectedMemory);
        this.sType = StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get protectedMemory() {
        return this.#view.getUint32(16, LE);
    }
    set protectedMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceProtectedMemoryProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProtectedMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProtectedMemoryProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProtectedMemoryProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProtectedMemoryProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.protectedNoFault && (this.protectedNoFault = data.protectedNoFault);
        this.sType = StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get protectedNoFault() {
        return this.#view.getUint32(16, LE);
    }
    set protectedNoFault(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceQueueInfo2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceQueueInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceQueueInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceQueueInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceQueueInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.queueFamilyIndex && (this.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.queueIndex && (this.queueIndex = data.queueIndex);
        this.sType = StructureType.DEVICE_QUEUE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queueIndex() {
        return this.#view.getUint32(24, LE);
    }
    set queueIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PipelineCoverageToColorStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCoverageToColorStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCoverageToColorStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCoverageToColorStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCoverageToColorStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.coverageToColorEnable && (this.coverageToColorEnable = data.coverageToColorEnable), void 0 !== data.coverageToColorLocation && (this.coverageToColorLocation = data.coverageToColorLocation);
        this.sType = StructureType.PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageToColorEnable() {
        return this.#view.getUint32(20, LE);
    }
    set coverageToColorEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get coverageToColorLocation() {
        return this.#view.getUint32(24, LE);
    }
    set coverageToColorLocation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceSamplerFilterMinmaxProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSamplerFilterMinmaxProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSamplerFilterMinmaxProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSamplerFilterMinmaxProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSamplerFilterMinmaxProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.filterMinmaxSingleComponentFormats && (this.filterMinmaxSingleComponentFormats = data.filterMinmaxSingleComponentFormats), void 0 !== data.filterMinmaxImageComponentMapping && (this.filterMinmaxImageComponentMapping = data.filterMinmaxImageComponentMapping);
        this.sType = StructureType.PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get filterMinmaxSingleComponentFormats() {
        return this.#view.getUint32(16, LE);
    }
    set filterMinmaxSingleComponentFormats(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get filterMinmaxImageComponentMapping() {
        return this.#view.getUint32(20, LE);
    }
    set filterMinmaxImageComponentMapping(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class SampleLocationEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SampleLocationEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SampleLocationEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SampleLocationEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SampleLocationEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.x && (this.x = data.x), void 0 !== data.y && (this.y = data.y);
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class SampleLocationsInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SampleLocationsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SampleLocationsInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SampleLocationsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampleLocationsPerPixel && (this.sampleLocationsPerPixel = data.sampleLocationsPerPixel), void 0 !== data.sampleLocationGridSize && (this.sampleLocationGridSize = data.sampleLocationGridSize), void 0 !== data.sampleLocationsCount && (this.sampleLocationsCount = data.sampleLocationsCount), void 0 !== data.pSampleLocations && (this.pSampleLocations = data.pSampleLocations);
        this.sType = StructureType.SAMPLE_LOCATIONS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampleLocationsPerPixel() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationsPerPixel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleLocationGridSize() {
        return new Extent2D(this.#data.subarray(20, 20 + Extent2D.size));
    }
    set sampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get sampleLocationsCount() {
        return this.#view.getUint32(28, LE);
    }
    set sampleLocationsCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pSampleLocations() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSampleLocations(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class AttachmentSampleLocationsEXT {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentSampleLocationsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentSampleLocationsEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentSampleLocationsEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentSampleLocationsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.attachmentIndex && (this.attachmentIndex = data.attachmentIndex), void 0 !== data.sampleLocationsInfo && (this.sampleLocationsInfo = data.sampleLocationsInfo);
    }
    get attachmentIndex() {
        return this.#view.getUint32(0, LE);
    }
    set attachmentIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new SampleLocationsInfoEXT(this.#data.subarray(4, 4 + SampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < SampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
}
export class SubpassSampleLocationsEXT {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassSampleLocationsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassSampleLocationsEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassSampleLocationsEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassSampleLocationsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.subpassIndex && (this.subpassIndex = data.subpassIndex), void 0 !== data.sampleLocationsInfo && (this.sampleLocationsInfo = data.sampleLocationsInfo);
    }
    get subpassIndex() {
        return this.#view.getUint32(0, LE);
    }
    set subpassIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new SampleLocationsInfoEXT(this.#data.subarray(4, 4 + SampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < SampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
}
export class RenderPassSampleLocationsBeginInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassSampleLocationsBeginInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassSampleLocationsBeginInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassSampleLocationsBeginInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassSampleLocationsBeginInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachmentInitialSampleLocationsCount && (this.attachmentInitialSampleLocationsCount = data.attachmentInitialSampleLocationsCount), void 0 !== data.pAttachmentInitialSampleLocations && (this.pAttachmentInitialSampleLocations = data.pAttachmentInitialSampleLocations), void 0 !== data.postSubpassSampleLocationsCount && (this.postSubpassSampleLocationsCount = data.postSubpassSampleLocationsCount), void 0 !== data.pPostSubpassSampleLocations && (this.pPostSubpassSampleLocations = data.pPostSubpassSampleLocations);
        this.sType = StructureType.RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachmentInitialSampleLocationsCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentInitialSampleLocationsCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachmentInitialSampleLocations() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachmentInitialSampleLocations(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get postSubpassSampleLocationsCount() {
        return this.#view.getUint32(32, LE);
    }
    set postSubpassSampleLocationsCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPostSubpassSampleLocations() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPostSubpassSampleLocations(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineSampleLocationsStateCreateInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineSampleLocationsStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineSampleLocationsStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineSampleLocationsStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineSampleLocationsStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampleLocationsEnable && (this.sampleLocationsEnable = data.sampleLocationsEnable), void 0 !== data.sampleLocationsInfo && (this.sampleLocationsInfo = data.sampleLocationsInfo);
        this.sType = StructureType.PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampleLocationsEnable() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationsEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new SampleLocationsInfoEXT(this.#data.subarray(20, 20 + SampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < SampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class PhysicalDeviceSampleLocationsPropertiesEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSampleLocationsPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSampleLocationsPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSampleLocationsPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSampleLocationsPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampleLocationSampleCounts && (this.sampleLocationSampleCounts = data.sampleLocationSampleCounts), void 0 !== data.maxSampleLocationGridSize && (this.maxSampleLocationGridSize = data.maxSampleLocationGridSize), void 0 !== data.sampleLocationCoordinateRange && (this.sampleLocationCoordinateRange = data.sampleLocationCoordinateRange), void 0 !== data.sampleLocationSubPixelBits && (this.sampleLocationSubPixelBits = data.sampleLocationSubPixelBits), void 0 !== data.variableSampleLocations && (this.variableSampleLocations = data.variableSampleLocations);
        this.sType = StructureType.PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampleLocationSampleCounts() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationSampleCounts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSampleLocationGridSize() {
        return new Extent2D(this.#data.subarray(20, 20 + Extent2D.size));
    }
    set maxSampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get sampleLocationCoordinateRange() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 28, 2);
    }
    set sampleLocationCoordinateRange(value) {
        this.#data.set(new Uint8Array(value.buffer), 28);
    }
    get sampleLocationSubPixelBits() {
        return this.#view.getUint32(36, LE);
    }
    set sampleLocationSubPixelBits(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get variableSampleLocations() {
        return this.#view.getUint32(40, LE);
    }
    set variableSampleLocations(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class MultisamplePropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MultisamplePropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MultisamplePropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MultisamplePropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MultisamplePropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxSampleLocationGridSize && (this.maxSampleLocationGridSize = data.maxSampleLocationGridSize);
        this.sType = StructureType.MULTISAMPLE_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxSampleLocationGridSize() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set maxSampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SamplerReductionModeCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerReductionModeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerReductionModeCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerReductionModeCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerReductionModeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.reductionMode && (this.reductionMode = data.reductionMode);
        this.sType = StructureType.SAMPLER_REDUCTION_MODE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get reductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set reductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceBlendOperationAdvancedFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceBlendOperationAdvancedFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceBlendOperationAdvancedFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceBlendOperationAdvancedFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.advancedBlendCoherentOperations && (this.advancedBlendCoherentOperations = data.advancedBlendCoherentOperations);
        this.sType = StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get advancedBlendCoherentOperations() {
        return this.#view.getUint32(16, LE);
    }
    set advancedBlendCoherentOperations(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceMultiDrawFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultiDrawFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultiDrawFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultiDrawFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultiDrawFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.multiDraw && (this.multiDraw = data.multiDraw);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get multiDraw() {
        return this.#view.getUint32(16, LE);
    }
    set multiDraw(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceBlendOperationAdvancedPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceBlendOperationAdvancedPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceBlendOperationAdvancedPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceBlendOperationAdvancedPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.advancedBlendMaxColorAttachments && (this.advancedBlendMaxColorAttachments = data.advancedBlendMaxColorAttachments), void 0 !== data.advancedBlendIndependentBlend && (this.advancedBlendIndependentBlend = data.advancedBlendIndependentBlend), void 0 !== data.advancedBlendNonPremultipliedSrcColor && (this.advancedBlendNonPremultipliedSrcColor = data.advancedBlendNonPremultipliedSrcColor), void 0 !== data.advancedBlendNonPremultipliedDstColor && (this.advancedBlendNonPremultipliedDstColor = data.advancedBlendNonPremultipliedDstColor), void 0 !== data.advancedBlendCorrelatedOverlap && (this.advancedBlendCorrelatedOverlap = data.advancedBlendCorrelatedOverlap), void 0 !== data.advancedBlendAllOperations && (this.advancedBlendAllOperations = data.advancedBlendAllOperations);
        this.sType = StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get advancedBlendMaxColorAttachments() {
        return this.#view.getUint32(16, LE);
    }
    set advancedBlendMaxColorAttachments(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get advancedBlendIndependentBlend() {
        return this.#view.getUint32(20, LE);
    }
    set advancedBlendIndependentBlend(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get advancedBlendNonPremultipliedSrcColor() {
        return this.#view.getUint32(24, LE);
    }
    set advancedBlendNonPremultipliedSrcColor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get advancedBlendNonPremultipliedDstColor() {
        return this.#view.getUint32(28, LE);
    }
    set advancedBlendNonPremultipliedDstColor(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get advancedBlendCorrelatedOverlap() {
        return this.#view.getUint32(32, LE);
    }
    set advancedBlendCorrelatedOverlap(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get advancedBlendAllOperations() {
        return this.#view.getUint32(36, LE);
    }
    set advancedBlendAllOperations(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class PipelineColorBlendAdvancedStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineColorBlendAdvancedStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineColorBlendAdvancedStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineColorBlendAdvancedStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineColorBlendAdvancedStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcPremultiplied && (this.srcPremultiplied = data.srcPremultiplied), void 0 !== data.dstPremultiplied && (this.dstPremultiplied = data.dstPremultiplied), void 0 !== data.blendOverlap && (this.blendOverlap = data.blendOverlap);
        this.sType = StructureType.PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcPremultiplied() {
        return this.#view.getUint32(16, LE);
    }
    set srcPremultiplied(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstPremultiplied() {
        return this.#view.getUint32(20, LE);
    }
    set dstPremultiplied(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get blendOverlap() {
        return this.#view.getUint32(24, LE);
    }
    set blendOverlap(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceInlineUniformBlockFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceInlineUniformBlockFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceInlineUniformBlockFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceInlineUniformBlockFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceInlineUniformBlockFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.inlineUniformBlock && (this.inlineUniformBlock = data.inlineUniformBlock), void 0 !== data.descriptorBindingInlineUniformBlockUpdateAfterBind && (this.descriptorBindingInlineUniformBlockUpdateAfterBind = data.descriptorBindingInlineUniformBlockUpdateAfterBind);
        this.sType = StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get inlineUniformBlock() {
        return this.#view.getUint32(16, LE);
    }
    set inlineUniformBlock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorBindingInlineUniformBlockUpdateAfterBind() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceInlineUniformBlockProperties {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceInlineUniformBlockProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceInlineUniformBlockProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceInlineUniformBlockProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceInlineUniformBlockProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxInlineUniformBlockSize && (this.maxInlineUniformBlockSize = data.maxInlineUniformBlockSize), void 0 !== data.maxPerStageDescriptorInlineUniformBlocks && (this.maxPerStageDescriptorInlineUniformBlocks = data.maxPerStageDescriptorInlineUniformBlocks), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks && (this.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxDescriptorSetInlineUniformBlocks && (this.maxDescriptorSetInlineUniformBlocks = data.maxDescriptorSetInlineUniformBlocks), void 0 !== data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks && (this.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks);
        this.sType = StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxInlineUniformBlockSize() {
        return this.#view.getUint32(16, LE);
    }
    set maxInlineUniformBlockSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxPerStageDescriptorInlineUniformBlocks() {
        return this.#view.getUint32(20, LE);
    }
    set maxPerStageDescriptorInlineUniformBlocks(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(24, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxDescriptorSetInlineUniformBlocks() {
        return this.#view.getUint32(28, LE);
    }
    set maxDescriptorSetInlineUniformBlocks(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(32, LE);
    }
    set maxDescriptorSetUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class WriteDescriptorSetInlineUniformBlock {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(WriteDescriptorSetInlineUniformBlock.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, WriteDescriptorSetInlineUniformBlock.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < WriteDescriptorSetInlineUniformBlock.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(WriteDescriptorSetInlineUniformBlock.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dataSize && (this.dataSize = data.dataSize), void 0 !== data.pData && (this.pData = data.pData);
        this.sType = StructureType.WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dataSize() {
        return this.#view.getUint32(16, LE);
    }
    set dataSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorPoolInlineUniformBlockCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorPoolInlineUniformBlockCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorPoolInlineUniformBlockCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorPoolInlineUniformBlockCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorPoolInlineUniformBlockCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxInlineUniformBlockBindings && (this.maxInlineUniformBlockBindings = data.maxInlineUniformBlockBindings);
        this.sType = StructureType.DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxInlineUniformBlockBindings() {
        return this.#view.getUint32(16, LE);
    }
    set maxInlineUniformBlockBindings(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineCoverageModulationStateCreateInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCoverageModulationStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCoverageModulationStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCoverageModulationStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCoverageModulationStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.coverageModulationMode && (this.coverageModulationMode = data.coverageModulationMode), void 0 !== data.coverageModulationTableEnable && (this.coverageModulationTableEnable = data.coverageModulationTableEnable), void 0 !== data.coverageModulationTableCount && (this.coverageModulationTableCount = data.coverageModulationTableCount), void 0 !== data.pCoverageModulationTable && (this.pCoverageModulationTable = data.pCoverageModulationTable);
        this.sType = StructureType.PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageModulationMode() {
        return this.#view.getUint32(20, LE);
    }
    set coverageModulationMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get coverageModulationTableEnable() {
        return this.#view.getUint32(24, LE);
    }
    set coverageModulationTableEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get coverageModulationTableCount() {
        return this.#view.getUint32(28, LE);
    }
    set coverageModulationTableCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pCoverageModulationTable() {
        return this.#view.getBigUint64(32, LE);
    }
    set pCoverageModulationTable(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImageFormatListCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageFormatListCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageFormatListCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageFormatListCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageFormatListCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.viewFormatCount && (this.viewFormatCount = data.viewFormatCount), void 0 !== data.pViewFormats && (this.pViewFormats = data.pViewFormats);
        this.sType = StructureType.IMAGE_FORMAT_LIST_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get viewFormatCount() {
        return this.#view.getUint32(16, LE);
    }
    set viewFormatCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pViewFormats() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewFormats(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ValidationCacheCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ValidationCacheCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ValidationCacheCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ValidationCacheCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ValidationCacheCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.initialDataSize && (this.initialDataSize = data.initialDataSize), void 0 !== data.pInitialData && (this.pInitialData = data.pInitialData);
        this.sType = StructureType.VALIDATION_CACHE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialDataSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialDataSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pInitialData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInitialData(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ShaderModuleValidationCacheCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShaderModuleValidationCacheCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShaderModuleValidationCacheCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShaderModuleValidationCacheCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShaderModuleValidationCacheCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.validationCache && (this.validationCache = data.validationCache);
        this.sType = StructureType.SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get validationCache() {
        return this.#view.getBigUint64(16, LE);
    }
    set validationCache(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceMaintenance3Properties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMaintenance3Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMaintenance3Properties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMaintenance3Properties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMaintenance3Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxPerSetDescriptors && (this.maxPerSetDescriptors = data.maxPerSetDescriptors), void 0 !== data.maxMemoryAllocationSize && (this.maxMemoryAllocationSize = data.maxMemoryAllocationSize);
        this.sType = StructureType.PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxPerSetDescriptors() {
        return this.#view.getUint32(16, LE);
    }
    set maxPerSetDescriptors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxMemoryAllocationSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxMemoryAllocationSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PhysicalDeviceMaintenance4Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMaintenance4Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMaintenance4Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMaintenance4Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMaintenance4Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maintenance4 && (this.maintenance4 = data.maintenance4);
        this.sType = StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maintenance4() {
        return this.#view.getUint32(16, LE);
    }
    set maintenance4(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceMaintenance4Properties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMaintenance4Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMaintenance4Properties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMaintenance4Properties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMaintenance4Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxBufferSize && (this.maxBufferSize = data.maxBufferSize);
        this.sType = StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxBufferSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxBufferSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class DescriptorSetLayoutSupport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetLayoutSupport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetLayoutSupport.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetLayoutSupport.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetLayoutSupport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supported && (this.supported = data.supported);
        this.sType = StructureType.DESCRIPTOR_SET_LAYOUT_SUPPORT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supported() {
        return this.#view.getUint32(16, LE);
    }
    set supported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderDrawParametersFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderDrawParametersFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderDrawParametersFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderDrawParametersFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderDrawParametersFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderDrawParameters && (this.shaderDrawParameters = data.shaderDrawParameters);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderDrawParameters() {
        return this.#view.getUint32(16, LE);
    }
    set shaderDrawParameters(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderFloat16Int8Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderFloat16Int8Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderFloat16Int8Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderFloat16Int8Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderFloat16Int8Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderFloat16 && (this.shaderFloat16 = data.shaderFloat16), void 0 !== data.shaderInt8 && (this.shaderInt8 = data.shaderInt8);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderFloat16() {
        return this.#view.getUint32(16, LE);
    }
    set shaderFloat16(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderInt8() {
        return this.#view.getUint32(20, LE);
    }
    set shaderInt8(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceFloatControlsProperties {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFloatControlsProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFloatControlsProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFloatControlsProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFloatControlsProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.denormBehaviorIndependence && (this.denormBehaviorIndependence = data.denormBehaviorIndependence), void 0 !== data.roundingModeIndependence && (this.roundingModeIndependence = data.roundingModeIndependence), void 0 !== data.shaderSignedZeroInfNanPreserveFloat16 && (this.shaderSignedZeroInfNanPreserveFloat16 = data.shaderSignedZeroInfNanPreserveFloat16), void 0 !== data.shaderSignedZeroInfNanPreserveFloat32 && (this.shaderSignedZeroInfNanPreserveFloat32 = data.shaderSignedZeroInfNanPreserveFloat32), void 0 !== data.shaderSignedZeroInfNanPreserveFloat64 && (this.shaderSignedZeroInfNanPreserveFloat64 = data.shaderSignedZeroInfNanPreserveFloat64), void 0 !== data.shaderDenormPreserveFloat16 && (this.shaderDenormPreserveFloat16 = data.shaderDenormPreserveFloat16), void 0 !== data.shaderDenormPreserveFloat32 && (this.shaderDenormPreserveFloat32 = data.shaderDenormPreserveFloat32), void 0 !== data.shaderDenormPreserveFloat64 && (this.shaderDenormPreserveFloat64 = data.shaderDenormPreserveFloat64), void 0 !== data.shaderDenormFlushToZeroFloat16 && (this.shaderDenormFlushToZeroFloat16 = data.shaderDenormFlushToZeroFloat16), void 0 !== data.shaderDenormFlushToZeroFloat32 && (this.shaderDenormFlushToZeroFloat32 = data.shaderDenormFlushToZeroFloat32), void 0 !== data.shaderDenormFlushToZeroFloat64 && (this.shaderDenormFlushToZeroFloat64 = data.shaderDenormFlushToZeroFloat64), void 0 !== data.shaderRoundingModeRTEFloat16 && (this.shaderRoundingModeRTEFloat16 = data.shaderRoundingModeRTEFloat16), void 0 !== data.shaderRoundingModeRTEFloat32 && (this.shaderRoundingModeRTEFloat32 = data.shaderRoundingModeRTEFloat32), void 0 !== data.shaderRoundingModeRTEFloat64 && (this.shaderRoundingModeRTEFloat64 = data.shaderRoundingModeRTEFloat64), void 0 !== data.shaderRoundingModeRTZFloat16 && (this.shaderRoundingModeRTZFloat16 = data.shaderRoundingModeRTZFloat16), void 0 !== data.shaderRoundingModeRTZFloat32 && (this.shaderRoundingModeRTZFloat32 = data.shaderRoundingModeRTZFloat32), void 0 !== data.shaderRoundingModeRTZFloat64 && (this.shaderRoundingModeRTZFloat64 = data.shaderRoundingModeRTZFloat64);
        this.sType = StructureType.PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get denormBehaviorIndependence() {
        return this.#view.getUint32(16, LE);
    }
    set denormBehaviorIndependence(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get roundingModeIndependence() {
        return this.#view.getUint32(20, LE);
    }
    set roundingModeIndependence(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat16() {
        return this.#view.getUint32(24, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat32() {
        return this.#view.getUint32(28, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat32(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat64() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat64(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderDenormPreserveFloat16() {
        return this.#view.getUint32(36, LE);
    }
    set shaderDenormPreserveFloat16(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderDenormPreserveFloat32() {
        return this.#view.getUint32(40, LE);
    }
    set shaderDenormPreserveFloat32(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderDenormPreserveFloat64() {
        return this.#view.getUint32(44, LE);
    }
    set shaderDenormPreserveFloat64(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat16() {
        return this.#view.getUint32(48, LE);
    }
    set shaderDenormFlushToZeroFloat16(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat32() {
        return this.#view.getUint32(52, LE);
    }
    set shaderDenormFlushToZeroFloat32(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat64() {
        return this.#view.getUint32(56, LE);
    }
    set shaderDenormFlushToZeroFloat64(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat16() {
        return this.#view.getUint32(60, LE);
    }
    set shaderRoundingModeRTEFloat16(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat32() {
        return this.#view.getUint32(64, LE);
    }
    set shaderRoundingModeRTEFloat32(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat64() {
        return this.#view.getUint32(68, LE);
    }
    set shaderRoundingModeRTEFloat64(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat16() {
        return this.#view.getUint32(72, LE);
    }
    set shaderRoundingModeRTZFloat16(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat32() {
        return this.#view.getUint32(76, LE);
    }
    set shaderRoundingModeRTZFloat32(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat64() {
        return this.#view.getUint32(80, LE);
    }
    set shaderRoundingModeRTZFloat64(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class PhysicalDeviceHostQueryResetFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceHostQueryResetFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceHostQueryResetFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceHostQueryResetFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceHostQueryResetFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.hostQueryReset && (this.hostQueryReset = data.hostQueryReset);
        this.sType = StructureType.PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get hostQueryReset() {
        return this.#view.getUint32(16, LE);
    }
    set hostQueryReset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class NativeBufferUsage2ANDROID {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(NativeBufferUsage2ANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, NativeBufferUsage2ANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < NativeBufferUsage2ANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(NativeBufferUsage2ANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.consumer && (this.consumer = data.consumer), void 0 !== data.producer && (this.producer = data.producer);
    }
    get consumer() {
        return this.#view.getBigUint64(0, LE);
    }
    set consumer(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get producer() {
        return this.#view.getBigUint64(8, LE);
    }
    set producer(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class NativeBufferANDROID {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(NativeBufferANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, NativeBufferANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < NativeBufferANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(NativeBufferANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handle && (this.handle = data.handle), void 0 !== data.stride && (this.stride = data.stride), void 0 !== data.format && (this.format = data.format), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.usage2 && (this.usage2 = data.usage2);
        this.sType = StructureType.NATIVE_BUFFER_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handle() {
        return this.#view.getBigUint64(16, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get stride() {
        return this.#view.getInt32(24, LE);
    }
    set stride(value) {
        this.#view.setInt32(24, Number(value), LE);
    }
    get format() {
        return this.#view.getInt32(28, LE);
    }
    set format(value) {
        this.#view.setInt32(28, Number(value), LE);
    }
    get usage() {
        return this.#view.getInt32(32, LE);
    }
    set usage(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
    get usage2() {
        return new NativeBufferUsage2ANDROID(this.#data.subarray(40, 40 + NativeBufferUsage2ANDROID.size));
    }
    set usage2(value) {
        if (value[BUFFER].byteLength < NativeBufferUsage2ANDROID.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
}
export class SwapchainImageCreateInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SwapchainImageCreateInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SwapchainImageCreateInfoANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SwapchainImageCreateInfoANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SwapchainImageCreateInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.usage && (this.usage = data.usage);
        this.sType = StructureType.SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePresentationPropertiesANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePresentationPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePresentationPropertiesANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePresentationPropertiesANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePresentationPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sharedImage && (this.sharedImage = data.sharedImage);
        this.sType = StructureType.PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sharedImage() {
        return this.#view.getUint32(16, LE);
    }
    set sharedImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ShaderResourceUsageAMD {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShaderResourceUsageAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShaderResourceUsageAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShaderResourceUsageAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShaderResourceUsageAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.numUsedVgprs && (this.numUsedVgprs = data.numUsedVgprs), void 0 !== data.numUsedSgprs && (this.numUsedSgprs = data.numUsedSgprs), void 0 !== data.ldsSizePerLocalWorkGroup && (this.ldsSizePerLocalWorkGroup = data.ldsSizePerLocalWorkGroup), void 0 !== data.ldsUsageSizeInBytes && (this.ldsUsageSizeInBytes = data.ldsUsageSizeInBytes), void 0 !== data.scratchMemUsageInBytes && (this.scratchMemUsageInBytes = data.scratchMemUsageInBytes);
    }
    get numUsedVgprs() {
        return this.#view.getUint32(0, LE);
    }
    set numUsedVgprs(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get numUsedSgprs() {
        return this.#view.getUint32(4, LE);
    }
    set numUsedSgprs(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get ldsSizePerLocalWorkGroup() {
        return this.#view.getUint32(8, LE);
    }
    set ldsSizePerLocalWorkGroup(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get ldsUsageSizeInBytes() {
        return this.#view.getBigUint64(16, LE);
    }
    set ldsUsageSizeInBytes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get scratchMemUsageInBytes() {
        return this.#view.getBigUint64(24, LE);
    }
    set scratchMemUsageInBytes(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class ShaderStatisticsInfoAMD {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShaderStatisticsInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShaderStatisticsInfoAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShaderStatisticsInfoAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShaderStatisticsInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.shaderStageMask && (this.shaderStageMask = data.shaderStageMask), void 0 !== data.resourceUsage && (this.resourceUsage = data.resourceUsage), void 0 !== data.numPhysicalVgprs && (this.numPhysicalVgprs = data.numPhysicalVgprs), void 0 !== data.numPhysicalSgprs && (this.numPhysicalSgprs = data.numPhysicalSgprs), void 0 !== data.numAvailableVgprs && (this.numAvailableVgprs = data.numAvailableVgprs), void 0 !== data.numAvailableSgprs && (this.numAvailableSgprs = data.numAvailableSgprs), void 0 !== data.computeWorkGroupSize && (this.computeWorkGroupSize = data.computeWorkGroupSize);
    }
    get shaderStageMask() {
        return this.#view.getUint32(0, LE);
    }
    set shaderStageMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get resourceUsage() {
        return new ShaderResourceUsageAMD(this.#data.subarray(4, 4 + ShaderResourceUsageAMD.size));
    }
    set resourceUsage(value) {
        if (value[BUFFER].byteLength < ShaderResourceUsageAMD.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get numPhysicalVgprs() {
        return this.#view.getUint32(36, LE);
    }
    set numPhysicalVgprs(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get numPhysicalSgprs() {
        return this.#view.getUint32(40, LE);
    }
    set numPhysicalSgprs(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get numAvailableVgprs() {
        return this.#view.getUint32(44, LE);
    }
    set numAvailableVgprs(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get numAvailableSgprs() {
        return this.#view.getUint32(48, LE);
    }
    set numAvailableSgprs(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get computeWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 52, 3);
    }
    set computeWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 52);
    }
}
export class DeviceQueueGlobalPriorityCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceQueueGlobalPriorityCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceQueueGlobalPriorityCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceQueueGlobalPriorityCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceQueueGlobalPriorityCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.globalPriority && (this.globalPriority = data.globalPriority);
        this.sType = StructureType.DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get globalPriority() {
        return this.#view.getUint32(16, LE);
    }
    set globalPriority(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceGlobalPriorityQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceGlobalPriorityQueryFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceGlobalPriorityQueryFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceGlobalPriorityQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.globalPriorityQuery && (this.globalPriorityQuery = data.globalPriorityQuery);
        this.sType = StructureType.PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get globalPriorityQuery() {
        return this.#view.getUint32(16, LE);
    }
    set globalPriorityQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class QueueFamilyGlobalPriorityPropertiesKHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyGlobalPriorityPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyGlobalPriorityPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyGlobalPriorityPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyGlobalPriorityPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.priorityCount && (this.priorityCount = data.priorityCount), void 0 !== data.priorities && (this.priorities = data.priorities);
        this.sType = StructureType.QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get priorityCount() {
        return this.#view.getUint32(16, LE);
    }
    set priorityCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get priorities() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 20, 16);
    }
    set priorities(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
}
export class DebugUtilsObjectNameInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugUtilsObjectNameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugUtilsObjectNameInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugUtilsObjectNameInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugUtilsObjectNameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.objectType && (this.objectType = data.objectType), void 0 !== data.objectHandle && (this.objectHandle = data.objectHandle), void 0 !== data.pObjectName && (this.pObjectName = data.pObjectName);
        this.sType = StructureType.DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pObjectName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pObjectName(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DebugUtilsObjectTagInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugUtilsObjectTagInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugUtilsObjectTagInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugUtilsObjectTagInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugUtilsObjectTagInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.objectType && (this.objectType = data.objectType), void 0 !== data.objectHandle && (this.objectHandle = data.objectHandle), void 0 !== data.tagName && (this.tagName = data.tagName), void 0 !== data.tagSize && (this.tagSize = data.tagSize), void 0 !== data.pTag && (this.pTag = data.pTag);
        this.sType = StructureType.DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get tagName() {
        return this.#view.getBigUint64(32, LE);
    }
    set tagName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get tagSize() {
        return this.#view.getBigUint64(40, LE);
    }
    set tagSize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pTag() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTag(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class DebugUtilsLabelEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugUtilsLabelEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugUtilsLabelEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugUtilsLabelEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugUtilsLabelEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pLabelName && (this.pLabelName = data.pLabelName), void 0 !== data.color && (this.color = data.color);
        this.sType = StructureType.DEBUG_UTILS_LABEL_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pLabelName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pLabelName(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get color() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 24, 4);
    }
    set color(value) {
        this.#data.set(new Uint8Array(value.buffer), 24);
    }
}
export class DebugUtilsMessengerCreateInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugUtilsMessengerCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugUtilsMessengerCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugUtilsMessengerCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugUtilsMessengerCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.messageSeverity && (this.messageSeverity = data.messageSeverity), void 0 !== data.messageType && (this.messageType = data.messageType), void 0 !== data.pfnUserCallback && (this.pfnUserCallback = data.pfnUserCallback), void 0 !== data.pUserData && (this.pUserData = data.pUserData);
        this.sType = StructureType.DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get messageSeverity() {
        return this.#view.getUint32(20, LE);
    }
    set messageSeverity(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get messageType() {
        return this.#view.getUint32(24, LE);
    }
    set messageType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pfnUserCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnUserCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(40, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class DebugUtilsMessengerCallbackDataEXT {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DebugUtilsMessengerCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DebugUtilsMessengerCallbackDataEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DebugUtilsMessengerCallbackDataEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DebugUtilsMessengerCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pMessageIdName && (this.pMessageIdName = data.pMessageIdName), void 0 !== data.messageIdNumber && (this.messageIdNumber = data.messageIdNumber), void 0 !== data.pMessage && (this.pMessage = data.pMessage), void 0 !== data.queueLabelCount && (this.queueLabelCount = data.queueLabelCount), void 0 !== data.pQueueLabels && (this.pQueueLabels = data.pQueueLabels), void 0 !== data.cmdBufLabelCount && (this.cmdBufLabelCount = data.cmdBufLabelCount), void 0 !== data.pCmdBufLabels && (this.pCmdBufLabels = data.pCmdBufLabels), void 0 !== data.objectCount && (this.objectCount = data.objectCount), void 0 !== data.pObjects && (this.pObjects = data.pObjects);
        this.sType = StructureType.DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pMessageIdName() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMessageIdName(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get messageIdNumber() {
        return this.#view.getInt32(32, LE);
    }
    set messageIdNumber(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
    get pMessage() {
        return this.#view.getBigUint64(40, LE);
    }
    set pMessage(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get queueLabelCount() {
        return this.#view.getUint32(48, LE);
    }
    set queueLabelCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pQueueLabels() {
        return this.#view.getBigUint64(56, LE);
    }
    set pQueueLabels(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get cmdBufLabelCount() {
        return this.#view.getUint32(64, LE);
    }
    set cmdBufLabelCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pCmdBufLabels() {
        return this.#view.getBigUint64(72, LE);
    }
    set pCmdBufLabels(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get objectCount() {
        return this.#view.getUint32(80, LE);
    }
    set objectCount(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get pObjects() {
        return this.#view.getBigUint64(88, LE);
    }
    set pObjects(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDeviceMemoryReportFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDeviceMemoryReportFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDeviceMemoryReportFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDeviceMemoryReportFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDeviceMemoryReportFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceMemoryReport && (this.deviceMemoryReport = data.deviceMemoryReport);
        this.sType = StructureType.PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceMemoryReport() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMemoryReport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceDeviceMemoryReportCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceDeviceMemoryReportCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceDeviceMemoryReportCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceDeviceMemoryReportCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceDeviceMemoryReportCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pfnUserCallback && (this.pfnUserCallback = data.pfnUserCallback), void 0 !== data.pUserData && (this.pUserData = data.pUserData);
        this.sType = StructureType.DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pfnUserCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnUserCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceMemoryReportCallbackDataEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceMemoryReportCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceMemoryReportCallbackDataEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceMemoryReportCallbackDataEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceMemoryReportCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.type && (this.type = data.type), void 0 !== data.memoryObjectId && (this.memoryObjectId = data.memoryObjectId), void 0 !== data.size && (this.size = data.size), void 0 !== data.objectType && (this.objectType = data.objectType), void 0 !== data.objectHandle && (this.objectHandle = data.objectHandle), void 0 !== data.heapIndex && (this.heapIndex = data.heapIndex);
        this.sType = StructureType.DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get memoryObjectId() {
        return this.#view.getBigUint64(24, LE);
    }
    set memoryObjectId(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(40, LE);
    }
    set objectType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(48, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get heapIndex() {
        return this.#view.getUint32(56, LE);
    }
    set heapIndex(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class ImportMemoryHostPointerInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryHostPointerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryHostPointerInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryHostPointerInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryHostPointerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.handleType && (this.handleType = data.handleType), void 0 !== data.pHostPointer && (this.pHostPointer = data.pHostPointer);
        this.sType = StructureType.IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pHostPointer() {
        return this.#view.getBigUint64(24, LE);
    }
    set pHostPointer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class MemoryHostPointerPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryHostPointerPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryHostPointerPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryHostPointerPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryHostPointerPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
        this.sType = StructureType.MEMORY_HOST_POINTER_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceExternalMemoryHostPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalMemoryHostPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalMemoryHostPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalMemoryHostPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalMemoryHostPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minImportedHostPointerAlignment && (this.minImportedHostPointerAlignment = data.minImportedHostPointerAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minImportedHostPointerAlignment() {
        return this.#view.getBigUint64(16, LE);
    }
    set minImportedHostPointerAlignment(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class PhysicalDeviceConservativeRasterizationPropertiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceConservativeRasterizationPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceConservativeRasterizationPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceConservativeRasterizationPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceConservativeRasterizationPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.primitiveOverestimationSize && (this.primitiveOverestimationSize = data.primitiveOverestimationSize), void 0 !== data.maxExtraPrimitiveOverestimationSize && (this.maxExtraPrimitiveOverestimationSize = data.maxExtraPrimitiveOverestimationSize), void 0 !== data.extraPrimitiveOverestimationSizeGranularity && (this.extraPrimitiveOverestimationSizeGranularity = data.extraPrimitiveOverestimationSizeGranularity), void 0 !== data.primitiveUnderestimation && (this.primitiveUnderestimation = data.primitiveUnderestimation), void 0 !== data.conservativePointAndLineRasterization && (this.conservativePointAndLineRasterization = data.conservativePointAndLineRasterization), void 0 !== data.degenerateTrianglesRasterized && (this.degenerateTrianglesRasterized = data.degenerateTrianglesRasterized), void 0 !== data.degenerateLinesRasterized && (this.degenerateLinesRasterized = data.degenerateLinesRasterized), void 0 !== data.fullyCoveredFragmentShaderInputVariable && (this.fullyCoveredFragmentShaderInputVariable = data.fullyCoveredFragmentShaderInputVariable), void 0 !== data.conservativeRasterizationPostDepthCoverage && (this.conservativeRasterizationPostDepthCoverage = data.conservativeRasterizationPostDepthCoverage);
        this.sType = StructureType.PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get primitiveOverestimationSize() {
        return this.#view.getFloat32(16, LE);
    }
    set primitiveOverestimationSize(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxExtraPrimitiveOverestimationSize() {
        return this.#view.getFloat32(20, LE);
    }
    set maxExtraPrimitiveOverestimationSize(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
    get extraPrimitiveOverestimationSizeGranularity() {
        return this.#view.getFloat32(24, LE);
    }
    set extraPrimitiveOverestimationSizeGranularity(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
    get primitiveUnderestimation() {
        return this.#view.getUint32(28, LE);
    }
    set primitiveUnderestimation(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get conservativePointAndLineRasterization() {
        return this.#view.getUint32(32, LE);
    }
    set conservativePointAndLineRasterization(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get degenerateTrianglesRasterized() {
        return this.#view.getUint32(36, LE);
    }
    set degenerateTrianglesRasterized(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get degenerateLinesRasterized() {
        return this.#view.getUint32(40, LE);
    }
    set degenerateLinesRasterized(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get fullyCoveredFragmentShaderInputVariable() {
        return this.#view.getUint32(44, LE);
    }
    set fullyCoveredFragmentShaderInputVariable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get conservativeRasterizationPostDepthCoverage() {
        return this.#view.getUint32(48, LE);
    }
    set conservativeRasterizationPostDepthCoverage(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class CalibratedTimestampInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CalibratedTimestampInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CalibratedTimestampInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CalibratedTimestampInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CalibratedTimestampInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.timeDomain && (this.timeDomain = data.timeDomain);
        this.sType = StructureType.CALIBRATED_TIMESTAMP_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get timeDomain() {
        return this.#view.getUint32(16, LE);
    }
    set timeDomain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderCorePropertiesAMD {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderCorePropertiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderCorePropertiesAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderCorePropertiesAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderCorePropertiesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderEngineCount && (this.shaderEngineCount = data.shaderEngineCount), void 0 !== data.shaderArraysPerEngineCount && (this.shaderArraysPerEngineCount = data.shaderArraysPerEngineCount), void 0 !== data.computeUnitsPerShaderArray && (this.computeUnitsPerShaderArray = data.computeUnitsPerShaderArray), void 0 !== data.simdPerComputeUnit && (this.simdPerComputeUnit = data.simdPerComputeUnit), void 0 !== data.wavefrontsPerSimd && (this.wavefrontsPerSimd = data.wavefrontsPerSimd), void 0 !== data.wavefrontSize && (this.wavefrontSize = data.wavefrontSize), void 0 !== data.sgprsPerSimd && (this.sgprsPerSimd = data.sgprsPerSimd), void 0 !== data.minSgprAllocation && (this.minSgprAllocation = data.minSgprAllocation), void 0 !== data.maxSgprAllocation && (this.maxSgprAllocation = data.maxSgprAllocation), void 0 !== data.sgprAllocationGranularity && (this.sgprAllocationGranularity = data.sgprAllocationGranularity), void 0 !== data.vgprsPerSimd && (this.vgprsPerSimd = data.vgprsPerSimd), void 0 !== data.minVgprAllocation && (this.minVgprAllocation = data.minVgprAllocation), void 0 !== data.maxVgprAllocation && (this.maxVgprAllocation = data.maxVgprAllocation), void 0 !== data.vgprAllocationGranularity && (this.vgprAllocationGranularity = data.vgprAllocationGranularity);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderEngineCount() {
        return this.#view.getUint32(16, LE);
    }
    set shaderEngineCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderArraysPerEngineCount() {
        return this.#view.getUint32(20, LE);
    }
    set shaderArraysPerEngineCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get computeUnitsPerShaderArray() {
        return this.#view.getUint32(24, LE);
    }
    set computeUnitsPerShaderArray(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get simdPerComputeUnit() {
        return this.#view.getUint32(28, LE);
    }
    set simdPerComputeUnit(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get wavefrontsPerSimd() {
        return this.#view.getUint32(32, LE);
    }
    set wavefrontsPerSimd(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get wavefrontSize() {
        return this.#view.getUint32(36, LE);
    }
    set wavefrontSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get sgprsPerSimd() {
        return this.#view.getUint32(40, LE);
    }
    set sgprsPerSimd(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minSgprAllocation() {
        return this.#view.getUint32(44, LE);
    }
    set minSgprAllocation(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxSgprAllocation() {
        return this.#view.getUint32(48, LE);
    }
    set maxSgprAllocation(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get sgprAllocationGranularity() {
        return this.#view.getUint32(52, LE);
    }
    set sgprAllocationGranularity(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get vgprsPerSimd() {
        return this.#view.getUint32(56, LE);
    }
    set vgprsPerSimd(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get minVgprAllocation() {
        return this.#view.getUint32(60, LE);
    }
    set minVgprAllocation(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxVgprAllocation() {
        return this.#view.getUint32(64, LE);
    }
    set maxVgprAllocation(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get vgprAllocationGranularity() {
        return this.#view.getUint32(68, LE);
    }
    set vgprAllocationGranularity(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class PhysicalDeviceShaderCoreProperties2AMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderCoreProperties2AMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderCoreProperties2AMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderCoreProperties2AMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderCoreProperties2AMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderCoreFeatures && (this.shaderCoreFeatures = data.shaderCoreFeatures), void 0 !== data.activeComputeUnitCount && (this.activeComputeUnitCount = data.activeComputeUnitCount);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderCoreFeatures() {
        return this.#view.getUint32(16, LE);
    }
    set shaderCoreFeatures(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get activeComputeUnitCount() {
        return this.#view.getUint32(20, LE);
    }
    set activeComputeUnitCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PipelineRasterizationConservativeStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationConservativeStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationConservativeStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationConservativeStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationConservativeStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.conservativeRasterizationMode && (this.conservativeRasterizationMode = data.conservativeRasterizationMode), void 0 !== data.extraPrimitiveOverestimationSize && (this.extraPrimitiveOverestimationSize = data.extraPrimitiveOverestimationSize);
        this.sType = StructureType.PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get conservativeRasterizationMode() {
        return this.#view.getUint32(20, LE);
    }
    set conservativeRasterizationMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extraPrimitiveOverestimationSize() {
        return this.#view.getFloat32(24, LE);
    }
    set extraPrimitiveOverestimationSize(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
}
export class PhysicalDeviceDescriptorIndexingFeatures {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorIndexingFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorIndexingFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorIndexingFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorIndexingFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderInputAttachmentArrayDynamicIndexing && (this.shaderInputAttachmentArrayDynamicIndexing = data.shaderInputAttachmentArrayDynamicIndexing), void 0 !== data.shaderUniformTexelBufferArrayDynamicIndexing && (this.shaderUniformTexelBufferArrayDynamicIndexing = data.shaderUniformTexelBufferArrayDynamicIndexing), void 0 !== data.shaderStorageTexelBufferArrayDynamicIndexing && (this.shaderStorageTexelBufferArrayDynamicIndexing = data.shaderStorageTexelBufferArrayDynamicIndexing), void 0 !== data.shaderUniformBufferArrayNonUniformIndexing && (this.shaderUniformBufferArrayNonUniformIndexing = data.shaderUniformBufferArrayNonUniformIndexing), void 0 !== data.shaderSampledImageArrayNonUniformIndexing && (this.shaderSampledImageArrayNonUniformIndexing = data.shaderSampledImageArrayNonUniformIndexing), void 0 !== data.shaderStorageBufferArrayNonUniformIndexing && (this.shaderStorageBufferArrayNonUniformIndexing = data.shaderStorageBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageImageArrayNonUniformIndexing && (this.shaderStorageImageArrayNonUniformIndexing = data.shaderStorageImageArrayNonUniformIndexing), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexing && (this.shaderInputAttachmentArrayNonUniformIndexing = data.shaderInputAttachmentArrayNonUniformIndexing), void 0 !== data.shaderUniformTexelBufferArrayNonUniformIndexing && (this.shaderUniformTexelBufferArrayNonUniformIndexing = data.shaderUniformTexelBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageTexelBufferArrayNonUniformIndexing && (this.shaderStorageTexelBufferArrayNonUniformIndexing = data.shaderStorageTexelBufferArrayNonUniformIndexing), void 0 !== data.descriptorBindingUniformBufferUpdateAfterBind && (this.descriptorBindingUniformBufferUpdateAfterBind = data.descriptorBindingUniformBufferUpdateAfterBind), void 0 !== data.descriptorBindingSampledImageUpdateAfterBind && (this.descriptorBindingSampledImageUpdateAfterBind = data.descriptorBindingSampledImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageImageUpdateAfterBind && (this.descriptorBindingStorageImageUpdateAfterBind = data.descriptorBindingStorageImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageBufferUpdateAfterBind && (this.descriptorBindingStorageBufferUpdateAfterBind = data.descriptorBindingStorageBufferUpdateAfterBind), void 0 !== data.descriptorBindingUniformTexelBufferUpdateAfterBind && (this.descriptorBindingUniformTexelBufferUpdateAfterBind = data.descriptorBindingUniformTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingStorageTexelBufferUpdateAfterBind && (this.descriptorBindingStorageTexelBufferUpdateAfterBind = data.descriptorBindingStorageTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingUpdateUnusedWhilePending && (this.descriptorBindingUpdateUnusedWhilePending = data.descriptorBindingUpdateUnusedWhilePending), void 0 !== data.descriptorBindingPartiallyBound && (this.descriptorBindingPartiallyBound = data.descriptorBindingPartiallyBound), void 0 !== data.descriptorBindingVariableDescriptorCount && (this.descriptorBindingVariableDescriptorCount = data.descriptorBindingVariableDescriptorCount), void 0 !== data.runtimeDescriptorArray && (this.runtimeDescriptorArray = data.runtimeDescriptorArray);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderInputAttachmentArrayDynamicIndexing() {
        return this.#view.getUint32(16, LE);
    }
    set shaderInputAttachmentArrayDynamicIndexing(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(20, LE);
    }
    set shaderUniformTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(24, LE);
    }
    set shaderStorageTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(28, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexing() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSampledImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(36, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexing() {
        return this.#view.getUint32(40, LE);
    }
    set shaderStorageImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexing() {
        return this.#view.getUint32(44, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexing(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(48, LE);
    }
    set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(52, LE);
    }
    set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get descriptorBindingUniformBufferUpdateAfterBind() {
        return this.#view.getUint32(56, LE);
    }
    set descriptorBindingUniformBufferUpdateAfterBind(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get descriptorBindingSampledImageUpdateAfterBind() {
        return this.#view.getUint32(60, LE);
    }
    set descriptorBindingSampledImageUpdateAfterBind(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get descriptorBindingStorageImageUpdateAfterBind() {
        return this.#view.getUint32(64, LE);
    }
    set descriptorBindingStorageImageUpdateAfterBind(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get descriptorBindingStorageBufferUpdateAfterBind() {
        return this.#view.getUint32(68, LE);
    }
    set descriptorBindingStorageBufferUpdateAfterBind(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get descriptorBindingUniformTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(72, LE);
    }
    set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get descriptorBindingStorageTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(76, LE);
    }
    set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get descriptorBindingUpdateUnusedWhilePending() {
        return this.#view.getUint32(80, LE);
    }
    set descriptorBindingUpdateUnusedWhilePending(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get descriptorBindingPartiallyBound() {
        return this.#view.getUint32(84, LE);
    }
    set descriptorBindingPartiallyBound(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get descriptorBindingVariableDescriptorCount() {
        return this.#view.getUint32(88, LE);
    }
    set descriptorBindingVariableDescriptorCount(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get runtimeDescriptorArray() {
        return this.#view.getUint32(92, LE);
    }
    set runtimeDescriptorArray(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
}
export class PhysicalDeviceDescriptorIndexingProperties {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorIndexingProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorIndexingProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorIndexingProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorIndexingProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxUpdateAfterBindDescriptorsInAllPools && (this.maxUpdateAfterBindDescriptorsInAllPools = data.maxUpdateAfterBindDescriptorsInAllPools), void 0 !== data.shaderUniformBufferArrayNonUniformIndexingNative && (this.shaderUniformBufferArrayNonUniformIndexingNative = data.shaderUniformBufferArrayNonUniformIndexingNative), void 0 !== data.shaderSampledImageArrayNonUniformIndexingNative && (this.shaderSampledImageArrayNonUniformIndexingNative = data.shaderSampledImageArrayNonUniformIndexingNative), void 0 !== data.shaderStorageBufferArrayNonUniformIndexingNative && (this.shaderStorageBufferArrayNonUniformIndexingNative = data.shaderStorageBufferArrayNonUniformIndexingNative), void 0 !== data.shaderStorageImageArrayNonUniformIndexingNative && (this.shaderStorageImageArrayNonUniformIndexingNative = data.shaderStorageImageArrayNonUniformIndexingNative), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexingNative && (this.shaderInputAttachmentArrayNonUniformIndexingNative = data.shaderInputAttachmentArrayNonUniformIndexingNative), void 0 !== data.robustBufferAccessUpdateAfterBind && (this.robustBufferAccessUpdateAfterBind = data.robustBufferAccessUpdateAfterBind), void 0 !== data.quadDivergentImplicitLod && (this.quadDivergentImplicitLod = data.quadDivergentImplicitLod), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSamplers && (this.maxPerStageDescriptorUpdateAfterBindSamplers = data.maxPerStageDescriptorUpdateAfterBindSamplers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindUniformBuffers && (this.maxPerStageDescriptorUpdateAfterBindUniformBuffers = data.maxPerStageDescriptorUpdateAfterBindUniformBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageBuffers && (this.maxPerStageDescriptorUpdateAfterBindStorageBuffers = data.maxPerStageDescriptorUpdateAfterBindStorageBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSampledImages && (this.maxPerStageDescriptorUpdateAfterBindSampledImages = data.maxPerStageDescriptorUpdateAfterBindSampledImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageImages && (this.maxPerStageDescriptorUpdateAfterBindStorageImages = data.maxPerStageDescriptorUpdateAfterBindStorageImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInputAttachments && (this.maxPerStageDescriptorUpdateAfterBindInputAttachments = data.maxPerStageDescriptorUpdateAfterBindInputAttachments), void 0 !== data.maxPerStageUpdateAfterBindResources && (this.maxPerStageUpdateAfterBindResources = data.maxPerStageUpdateAfterBindResources), void 0 !== data.maxDescriptorSetUpdateAfterBindSamplers && (this.maxDescriptorSetUpdateAfterBindSamplers = data.maxDescriptorSetUpdateAfterBindSamplers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffers && (this.maxDescriptorSetUpdateAfterBindUniformBuffers = data.maxDescriptorSetUpdateAfterBindUniformBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic && (this.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffers && (this.maxDescriptorSetUpdateAfterBindStorageBuffers = data.maxDescriptorSetUpdateAfterBindStorageBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic && (this.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindSampledImages && (this.maxDescriptorSetUpdateAfterBindSampledImages = data.maxDescriptorSetUpdateAfterBindSampledImages), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageImages && (this.maxDescriptorSetUpdateAfterBindStorageImages = data.maxDescriptorSetUpdateAfterBindStorageImages), void 0 !== data.maxDescriptorSetUpdateAfterBindInputAttachments && (this.maxDescriptorSetUpdateAfterBindInputAttachments = data.maxDescriptorSetUpdateAfterBindInputAttachments);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxUpdateAfterBindDescriptorsInAllPools() {
        return this.#view.getUint32(16, LE);
    }
    set maxUpdateAfterBindDescriptorsInAllPools(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(20, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(24, LE);
    }
    set shaderSampledImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(28, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(32, LE);
    }
    set shaderStorageImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexingNative() {
        return this.#view.getUint32(36, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get robustBufferAccessUpdateAfterBind() {
        return this.#view.getUint32(40, LE);
    }
    set robustBufferAccessUpdateAfterBind(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get quadDivergentImplicitLod() {
        return this.#view.getUint32(44, LE);
    }
    set quadDivergentImplicitLod(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSamplers() {
        return this.#view.getUint32(48, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSamplers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(52, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(56, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSampledImages() {
        return this.#view.getUint32(60, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageImages() {
        return this.#view.getUint32(64, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(68, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxPerStageUpdateAfterBindResources() {
        return this.#view.getUint32(72, LE);
    }
    set maxPerStageUpdateAfterBindResources(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSamplers() {
        return this.#view.getUint32(76, LE);
    }
    set maxDescriptorSetUpdateAfterBindSamplers(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(80, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
        return this.#view.getUint32(84, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(88, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
        return this.#view.getUint32(92, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSampledImages() {
        return this.#view.getUint32(96, LE);
    }
    set maxDescriptorSetUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageImages() {
        return this.#view.getUint32(100, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(104, LE);
    }
    set maxDescriptorSetUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
}
export class DescriptorSetLayoutBindingFlagsCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetLayoutBindingFlagsCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetLayoutBindingFlagsCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetLayoutBindingFlagsCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetLayoutBindingFlagsCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.bindingCount && (this.bindingCount = data.bindingCount), void 0 !== data.pBindingFlags && (this.pBindingFlags = data.pBindingFlags);
        this.sType = StructureType.DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get bindingCount() {
        return this.#view.getUint32(16, LE);
    }
    set bindingCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pBindingFlags() {
        return this.#view.getBigUint64(24, LE);
    }
    set pBindingFlags(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorSetVariableDescriptorCountAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetVariableDescriptorCountAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetVariableDescriptorCountAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetVariableDescriptorCountAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetVariableDescriptorCountAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorSetCount && (this.descriptorSetCount = data.descriptorSetCount), void 0 !== data.pDescriptorCounts && (this.pDescriptorCounts = data.pDescriptorCounts);
        this.sType = StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorSetCount() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorSetCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDescriptorCounts() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDescriptorCounts(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorSetVariableDescriptorCountLayoutSupport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetVariableDescriptorCountLayoutSupport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetVariableDescriptorCountLayoutSupport.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetVariableDescriptorCountLayoutSupport.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetVariableDescriptorCountLayoutSupport.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxVariableDescriptorCount && (this.maxVariableDescriptorCount = data.maxVariableDescriptorCount);
        this.sType = StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxVariableDescriptorCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxVariableDescriptorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class AttachmentDescription2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentDescription2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentDescription2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentDescription2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentDescription2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.format && (this.format = data.format), void 0 !== data.samples && (this.samples = data.samples), void 0 !== data.loadOp && (this.loadOp = data.loadOp), void 0 !== data.storeOp && (this.storeOp = data.storeOp), void 0 !== data.stencilLoadOp && (this.stencilLoadOp = data.stencilLoadOp), void 0 !== data.stencilStoreOp && (this.stencilStoreOp = data.stencilStoreOp), void 0 !== data.initialLayout && (this.initialLayout = data.initialLayout), void 0 !== data.finalLayout && (this.finalLayout = data.finalLayout);
        this.sType = StructureType.ATTACHMENT_DESCRIPTION_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(20, LE);
    }
    set format(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(24, LE);
    }
    set samples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(28, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(32, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilLoadOp() {
        return this.#view.getUint32(36, LE);
    }
    set stencilLoadOp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get stencilStoreOp() {
        return this.#view.getUint32(40, LE);
    }
    set stencilStoreOp(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(44, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get finalLayout() {
        return this.#view.getUint32(48, LE);
    }
    set finalLayout(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class AttachmentReference2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentReference2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentReference2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentReference2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentReference2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachment && (this.attachment = data.attachment), void 0 !== data.layout && (this.layout = data.layout), void 0 !== data.aspectMask && (this.aspectMask = data.aspectMask);
        this.sType = StructureType.ATTACHMENT_REFERENCE_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachment() {
        return this.#view.getUint32(16, LE);
    }
    set attachment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get layout() {
        return this.#view.getUint32(20, LE);
    }
    set layout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get aspectMask() {
        return this.#view.getUint32(24, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class SubpassDescription2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassDescription2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassDescription2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassDescription2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassDescription2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pipelineBindPoint && (this.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.viewMask && (this.viewMask = data.viewMask), void 0 !== data.inputAttachmentCount && (this.inputAttachmentCount = data.inputAttachmentCount), void 0 !== data.pInputAttachments && (this.pInputAttachments = data.pInputAttachments), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (this.pColorAttachments = data.pColorAttachments), void 0 !== data.pResolveAttachments && (this.pResolveAttachments = data.pResolveAttachments), void 0 !== data.pDepthStencilAttachment && (this.pDepthStencilAttachment = data.pDepthStencilAttachment), void 0 !== data.preserveAttachmentCount && (this.preserveAttachmentCount = data.preserveAttachmentCount), void 0 !== data.pPreserveAttachments && (this.pPreserveAttachments = data.pPreserveAttachments);
        this.sType = StructureType.SUBPASS_DESCRIPTION_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(20, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(24, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get inputAttachmentCount() {
        return this.#view.getUint32(28, LE);
    }
    set inputAttachmentCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pInputAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInputAttachments(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(40, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(48, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pResolveAttachments() {
        return this.#view.getBigUint64(56, LE);
    }
    set pResolveAttachments(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pDepthStencilAttachment() {
        return this.#view.getBigUint64(64, LE);
    }
    set pDepthStencilAttachment(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get preserveAttachmentCount() {
        return this.#view.getUint32(72, LE);
    }
    set preserveAttachmentCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pPreserveAttachments() {
        return this.#view.getBigUint64(80, LE);
    }
    set pPreserveAttachments(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
}
export class SubpassDependency2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassDependency2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassDependency2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassDependency2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassDependency2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcSubpass && (this.srcSubpass = data.srcSubpass), void 0 !== data.dstSubpass && (this.dstSubpass = data.dstSubpass), void 0 !== data.srcStageMask && (this.srcStageMask = data.srcStageMask), void 0 !== data.dstStageMask && (this.dstStageMask = data.dstStageMask), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.dependencyFlags && (this.dependencyFlags = data.dependencyFlags), void 0 !== data.viewOffset && (this.viewOffset = data.viewOffset);
        this.sType = StructureType.SUBPASS_DEPENDENCY_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcSubpass() {
        return this.#view.getUint32(16, LE);
    }
    set srcSubpass(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstSubpass() {
        return this.#view.getUint32(20, LE);
    }
    set dstSubpass(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get srcStageMask() {
        return this.#view.getUint32(24, LE);
    }
    set srcStageMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstStageMask() {
        return this.#view.getUint32(28, LE);
    }
    set dstStageMask(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(32, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(36, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(40, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get viewOffset() {
        return this.#view.getInt32(44, LE);
    }
    set viewOffset(value) {
        this.#view.setInt32(44, Number(value), LE);
    }
}
export class RenderPassCreateInfo2 {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassCreateInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassCreateInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassCreateInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassCreateInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (this.pAttachments = data.pAttachments), void 0 !== data.subpassCount && (this.subpassCount = data.subpassCount), void 0 !== data.pSubpasses && (this.pSubpasses = data.pSubpasses), void 0 !== data.dependencyCount && (this.dependencyCount = data.dependencyCount), void 0 !== data.pDependencies && (this.pDependencies = data.pDependencies), void 0 !== data.correlatedViewMaskCount && (this.correlatedViewMaskCount = data.correlatedViewMaskCount), void 0 !== data.pCorrelatedViewMasks && (this.pCorrelatedViewMasks = data.pCorrelatedViewMasks);
        this.sType = StructureType.RENDER_PASS_CREATE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(32, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSubpasses() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSubpasses(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(48, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pDependencies() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDependencies(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get correlatedViewMaskCount() {
        return this.#view.getUint32(64, LE);
    }
    set correlatedViewMaskCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pCorrelatedViewMasks() {
        return this.#view.getBigUint64(72, LE);
    }
    set pCorrelatedViewMasks(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
}
export class SubpassBeginInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.contents && (this.contents = data.contents);
        this.sType = StructureType.SUBPASS_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get contents() {
        return this.#view.getUint32(16, LE);
    }
    set contents(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SubpassEndInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassEndInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassEndInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassEndInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassEndInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext);
        this.sType = StructureType.SUBPASS_END_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceTimelineSemaphoreFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTimelineSemaphoreFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTimelineSemaphoreFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTimelineSemaphoreFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTimelineSemaphoreFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.timelineSemaphore && (this.timelineSemaphore = data.timelineSemaphore);
        this.sType = StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get timelineSemaphore() {
        return this.#view.getUint32(16, LE);
    }
    set timelineSemaphore(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceTimelineSemaphoreProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTimelineSemaphoreProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTimelineSemaphoreProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTimelineSemaphoreProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTimelineSemaphoreProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxTimelineSemaphoreValueDifference && (this.maxTimelineSemaphoreValueDifference = data.maxTimelineSemaphoreValueDifference);
        this.sType = StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxTimelineSemaphoreValueDifference() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxTimelineSemaphoreValueDifference(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class SemaphoreTypeCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreTypeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreTypeCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreTypeCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreTypeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphoreType && (this.semaphoreType = data.semaphoreType), void 0 !== data.initialValue && (this.initialValue = data.initialValue);
        this.sType = StructureType.SEMAPHORE_TYPE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphoreType() {
        return this.#view.getUint32(16, LE);
    }
    set semaphoreType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialValue() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialValue(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class TimelineSemaphoreSubmitInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TimelineSemaphoreSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TimelineSemaphoreSubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TimelineSemaphoreSubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TimelineSemaphoreSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.waitSemaphoreValueCount && (this.waitSemaphoreValueCount = data.waitSemaphoreValueCount), void 0 !== data.pWaitSemaphoreValues && (this.pWaitSemaphoreValues = data.pWaitSemaphoreValues), void 0 !== data.signalSemaphoreValueCount && (this.signalSemaphoreValueCount = data.signalSemaphoreValueCount), void 0 !== data.pSignalSemaphoreValues && (this.pSignalSemaphoreValues = data.pSignalSemaphoreValues);
        this.sType = StructureType.TIMELINE_SEMAPHORE_SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get waitSemaphoreValueCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreValueCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreValues() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreValues(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreValueCount() {
        return this.#view.getUint32(32, LE);
    }
    set signalSemaphoreValueCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSignalSemaphoreValues() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSignalSemaphoreValues(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class SemaphoreWaitInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreWaitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreWaitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreWaitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreWaitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.semaphoreCount && (this.semaphoreCount = data.semaphoreCount), void 0 !== data.pSemaphores && (this.pSemaphores = data.pSemaphores), void 0 !== data.pValues && (this.pValues = data.pValues);
        this.sType = StructureType.SEMAPHORE_WAIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get semaphoreCount() {
        return this.#view.getUint32(20, LE);
    }
    set semaphoreCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pValues() {
        return this.#view.getBigUint64(32, LE);
    }
    set pValues(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class SemaphoreSignalInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreSignalInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreSignalInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreSignalInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreSignalInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.value && (this.value = data.value);
        this.sType = StructureType.SEMAPHORE_SIGNAL_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get value() {
        return this.#view.getBigUint64(24, LE);
    }
    set value(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VertexInputBindingDivisorDescriptionEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VertexInputBindingDivisorDescriptionEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VertexInputBindingDivisorDescriptionEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VertexInputBindingDivisorDescriptionEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VertexInputBindingDivisorDescriptionEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.divisor && (this.divisor = data.divisor);
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get divisor() {
        return this.#view.getUint32(4, LE);
    }
    set divisor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class PipelineVertexInputDivisorStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineVertexInputDivisorStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineVertexInputDivisorStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineVertexInputDivisorStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineVertexInputDivisorStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexBindingDivisorCount && (this.vertexBindingDivisorCount = data.vertexBindingDivisorCount), void 0 !== data.pVertexBindingDivisors && (this.pVertexBindingDivisors = data.pVertexBindingDivisors);
        this.sType = StructureType.PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexBindingDivisorCount() {
        return this.#view.getUint32(16, LE);
    }
    set vertexBindingDivisorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pVertexBindingDivisors() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVertexBindingDivisors(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVertexAttributeDivisorPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVertexAttributeDivisorPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVertexAttributeDivisorPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVertexAttributeDivisorPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxVertexAttribDivisor && (this.maxVertexAttribDivisor = data.maxVertexAttribDivisor);
        this.sType = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxVertexAttribDivisor() {
        return this.#view.getUint32(16, LE);
    }
    set maxVertexAttribDivisor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePCIBusInfoPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePCIBusInfoPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePCIBusInfoPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePCIBusInfoPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePCIBusInfoPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pciDomain && (this.pciDomain = data.pciDomain), void 0 !== data.pciBus && (this.pciBus = data.pciBus), void 0 !== data.pciDevice && (this.pciDevice = data.pciDevice), void 0 !== data.pciFunction && (this.pciFunction = data.pciFunction);
        this.sType = StructureType.PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pciDomain() {
        return this.#view.getUint32(16, LE);
    }
    set pciDomain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pciBus() {
        return this.#view.getUint32(20, LE);
    }
    set pciBus(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pciDevice() {
        return this.#view.getUint32(24, LE);
    }
    set pciDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pciFunction() {
        return this.#view.getUint32(28, LE);
    }
    set pciFunction(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class ImportAndroidHardwareBufferInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportAndroidHardwareBufferInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportAndroidHardwareBufferInfoANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportAndroidHardwareBufferInfoANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportAndroidHardwareBufferInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class AndroidHardwareBufferUsageANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AndroidHardwareBufferUsageANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AndroidHardwareBufferUsageANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AndroidHardwareBufferUsageANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AndroidHardwareBufferUsageANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.androidHardwareBufferUsage && (this.androidHardwareBufferUsage = data.androidHardwareBufferUsage);
        this.sType = StructureType.ANDROID_HARDWARE_BUFFER_USAGE_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get androidHardwareBufferUsage() {
        return this.#view.getBigUint64(16, LE);
    }
    set androidHardwareBufferUsage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class AndroidHardwareBufferPropertiesANDROID {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AndroidHardwareBufferPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AndroidHardwareBufferPropertiesANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AndroidHardwareBufferPropertiesANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AndroidHardwareBufferPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.allocationSize && (this.allocationSize = data.allocationSize), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits);
        this.sType = StructureType.ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get allocationSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set allocationSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(24, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class MemoryGetAndroidHardwareBufferInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryGetAndroidHardwareBufferInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryGetAndroidHardwareBufferInfoANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryGetAndroidHardwareBufferInfoANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryGetAndroidHardwareBufferInfoANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory);
        this.sType = StructureType.MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class AndroidHardwareBufferFormatPropertiesANDROID {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AndroidHardwareBufferFormatPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AndroidHardwareBufferFormatPropertiesANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AndroidHardwareBufferFormatPropertiesANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AndroidHardwareBufferFormatPropertiesANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.externalFormat && (this.externalFormat = data.externalFormat), void 0 !== data.formatFeatures && (this.formatFeatures = data.formatFeatures), void 0 !== data.samplerYcbcrConversionComponents && (this.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (this.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (this.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (this.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (this.suggestedYChromaOffset = data.suggestedYChromaOffset);
        this.sType = StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(24, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getUint32(32, LE);
    }
    set formatFeatures(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get samplerYcbcrConversionComponents() {
        return new ComponentMapping(this.#data.subarray(36, 36 + ComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(52, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(56, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(60, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(64, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
}
export class CommandBufferInheritanceConditionalRenderingInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferInheritanceConditionalRenderingInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferInheritanceConditionalRenderingInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferInheritanceConditionalRenderingInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferInheritanceConditionalRenderingInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.conditionalRenderingEnable && (this.conditionalRenderingEnable = data.conditionalRenderingEnable);
        this.sType = StructureType.COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get conditionalRenderingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set conditionalRenderingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExternalFormatANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExternalFormatANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExternalFormatANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExternalFormatANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExternalFormatANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.externalFormat && (this.externalFormat = data.externalFormat);
        this.sType = StructureType.EXTERNAL_FORMAT_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(16, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class PhysicalDevice8BitStorageFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevice8BitStorageFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevice8BitStorageFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevice8BitStorageFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevice8BitStorageFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.storageBuffer8BitAccess && (this.storageBuffer8BitAccess = data.storageBuffer8BitAccess), void 0 !== data.uniformAndStorageBuffer8BitAccess && (this.uniformAndStorageBuffer8BitAccess = data.uniformAndStorageBuffer8BitAccess), void 0 !== data.storagePushConstant8 && (this.storagePushConstant8 = data.storagePushConstant8);
        this.sType = StructureType.PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get storageBuffer8BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer8BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer8BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer8BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant8() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant8(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceConditionalRenderingFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceConditionalRenderingFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceConditionalRenderingFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceConditionalRenderingFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceConditionalRenderingFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.conditionalRendering && (this.conditionalRendering = data.conditionalRendering), void 0 !== data.inheritedConditionalRendering && (this.inheritedConditionalRendering = data.inheritedConditionalRendering);
        this.sType = StructureType.PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get conditionalRendering() {
        return this.#view.getUint32(16, LE);
    }
    set conditionalRendering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inheritedConditionalRendering() {
        return this.#view.getUint32(20, LE);
    }
    set inheritedConditionalRendering(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceVulkanMemoryModelFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkanMemoryModelFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkanMemoryModelFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkanMemoryModelFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkanMemoryModelFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vulkanMemoryModel && (this.vulkanMemoryModel = data.vulkanMemoryModel), void 0 !== data.vulkanMemoryModelDeviceScope && (this.vulkanMemoryModelDeviceScope = data.vulkanMemoryModelDeviceScope), void 0 !== data.vulkanMemoryModelAvailabilityVisibilityChains && (this.vulkanMemoryModelAvailabilityVisibilityChains = data.vulkanMemoryModelAvailabilityVisibilityChains);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vulkanMemoryModel() {
        return this.#view.getUint32(16, LE);
    }
    set vulkanMemoryModel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vulkanMemoryModelDeviceScope() {
        return this.#view.getUint32(20, LE);
    }
    set vulkanMemoryModelDeviceScope(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vulkanMemoryModelAvailabilityVisibilityChains() {
        return this.#view.getUint32(24, LE);
    }
    set vulkanMemoryModelAvailabilityVisibilityChains(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceShaderAtomicInt64Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderAtomicInt64Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderAtomicInt64Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderAtomicInt64Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderAtomicInt64Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderBufferInt64Atomics && (this.shaderBufferInt64Atomics = data.shaderBufferInt64Atomics), void 0 !== data.shaderSharedInt64Atomics && (this.shaderSharedInt64Atomics = data.shaderSharedInt64Atomics);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderBufferInt64Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferInt64Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderSharedInt64Atomics() {
        return this.#view.getUint32(20, LE);
    }
    set shaderSharedInt64Atomics(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceShaderAtomicFloatFeaturesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderAtomicFloatFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderAtomicFloatFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderAtomicFloatFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderAtomicFloatFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderBufferFloat32Atomics && (this.shaderBufferFloat32Atomics = data.shaderBufferFloat32Atomics), void 0 !== data.shaderBufferFloat32AtomicAdd && (this.shaderBufferFloat32AtomicAdd = data.shaderBufferFloat32AtomicAdd), void 0 !== data.shaderBufferFloat64Atomics && (this.shaderBufferFloat64Atomics = data.shaderBufferFloat64Atomics), void 0 !== data.shaderBufferFloat64AtomicAdd && (this.shaderBufferFloat64AtomicAdd = data.shaderBufferFloat64AtomicAdd), void 0 !== data.shaderSharedFloat32Atomics && (this.shaderSharedFloat32Atomics = data.shaderSharedFloat32Atomics), void 0 !== data.shaderSharedFloat32AtomicAdd && (this.shaderSharedFloat32AtomicAdd = data.shaderSharedFloat32AtomicAdd), void 0 !== data.shaderSharedFloat64Atomics && (this.shaderSharedFloat64Atomics = data.shaderSharedFloat64Atomics), void 0 !== data.shaderSharedFloat64AtomicAdd && (this.shaderSharedFloat64AtomicAdd = data.shaderSharedFloat64AtomicAdd), void 0 !== data.shaderImageFloat32Atomics && (this.shaderImageFloat32Atomics = data.shaderImageFloat32Atomics), void 0 !== data.shaderImageFloat32AtomicAdd && (this.shaderImageFloat32AtomicAdd = data.shaderImageFloat32AtomicAdd), void 0 !== data.sparseImageFloat32Atomics && (this.sparseImageFloat32Atomics = data.sparseImageFloat32Atomics), void 0 !== data.sparseImageFloat32AtomicAdd && (this.sparseImageFloat32AtomicAdd = data.sparseImageFloat32AtomicAdd);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderBufferFloat32Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferFloat32Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderBufferFloat32AtomicAdd() {
        return this.#view.getUint32(20, LE);
    }
    set shaderBufferFloat32AtomicAdd(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderBufferFloat64Atomics() {
        return this.#view.getUint32(24, LE);
    }
    set shaderBufferFloat64Atomics(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderBufferFloat64AtomicAdd() {
        return this.#view.getUint32(28, LE);
    }
    set shaderBufferFloat64AtomicAdd(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSharedFloat32Atomics() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSharedFloat32Atomics(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderSharedFloat32AtomicAdd() {
        return this.#view.getUint32(36, LE);
    }
    set shaderSharedFloat32AtomicAdd(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedFloat64Atomics() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedFloat64Atomics(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderSharedFloat64AtomicAdd() {
        return this.#view.getUint32(44, LE);
    }
    set shaderSharedFloat64AtomicAdd(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderImageFloat32Atomics() {
        return this.#view.getUint32(48, LE);
    }
    set shaderImageFloat32Atomics(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderImageFloat32AtomicAdd() {
        return this.#view.getUint32(52, LE);
    }
    set shaderImageFloat32AtomicAdd(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get sparseImageFloat32Atomics() {
        return this.#view.getUint32(56, LE);
    }
    set sparseImageFloat32Atomics(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sparseImageFloat32AtomicAdd() {
        return this.#view.getUint32(60, LE);
    }
    set sparseImageFloat32AtomicAdd(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderAtomicFloat2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderAtomicFloat2FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderAtomicFloat2FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderAtomicFloat2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderBufferFloat16Atomics && (this.shaderBufferFloat16Atomics = data.shaderBufferFloat16Atomics), void 0 !== data.shaderBufferFloat16AtomicAdd && (this.shaderBufferFloat16AtomicAdd = data.shaderBufferFloat16AtomicAdd), void 0 !== data.shaderBufferFloat16AtomicMinMax && (this.shaderBufferFloat16AtomicMinMax = data.shaderBufferFloat16AtomicMinMax), void 0 !== data.shaderBufferFloat32AtomicMinMax && (this.shaderBufferFloat32AtomicMinMax = data.shaderBufferFloat32AtomicMinMax), void 0 !== data.shaderBufferFloat64AtomicMinMax && (this.shaderBufferFloat64AtomicMinMax = data.shaderBufferFloat64AtomicMinMax), void 0 !== data.shaderSharedFloat16Atomics && (this.shaderSharedFloat16Atomics = data.shaderSharedFloat16Atomics), void 0 !== data.shaderSharedFloat16AtomicAdd && (this.shaderSharedFloat16AtomicAdd = data.shaderSharedFloat16AtomicAdd), void 0 !== data.shaderSharedFloat16AtomicMinMax && (this.shaderSharedFloat16AtomicMinMax = data.shaderSharedFloat16AtomicMinMax), void 0 !== data.shaderSharedFloat32AtomicMinMax && (this.shaderSharedFloat32AtomicMinMax = data.shaderSharedFloat32AtomicMinMax), void 0 !== data.shaderSharedFloat64AtomicMinMax && (this.shaderSharedFloat64AtomicMinMax = data.shaderSharedFloat64AtomicMinMax), void 0 !== data.shaderImageFloat32AtomicMinMax && (this.shaderImageFloat32AtomicMinMax = data.shaderImageFloat32AtomicMinMax), void 0 !== data.sparseImageFloat32AtomicMinMax && (this.sparseImageFloat32AtomicMinMax = data.sparseImageFloat32AtomicMinMax);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderBufferFloat16Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferFloat16Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderBufferFloat16AtomicAdd() {
        return this.#view.getUint32(20, LE);
    }
    set shaderBufferFloat16AtomicAdd(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderBufferFloat16AtomicMinMax() {
        return this.#view.getUint32(24, LE);
    }
    set shaderBufferFloat16AtomicMinMax(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderBufferFloat32AtomicMinMax() {
        return this.#view.getUint32(28, LE);
    }
    set shaderBufferFloat32AtomicMinMax(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderBufferFloat64AtomicMinMax() {
        return this.#view.getUint32(32, LE);
    }
    set shaderBufferFloat64AtomicMinMax(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderSharedFloat16Atomics() {
        return this.#view.getUint32(36, LE);
    }
    set shaderSharedFloat16Atomics(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedFloat16AtomicAdd() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedFloat16AtomicAdd(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderSharedFloat16AtomicMinMax() {
        return this.#view.getUint32(44, LE);
    }
    set shaderSharedFloat16AtomicMinMax(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderSharedFloat32AtomicMinMax() {
        return this.#view.getUint32(48, LE);
    }
    set shaderSharedFloat32AtomicMinMax(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderSharedFloat64AtomicMinMax() {
        return this.#view.getUint32(52, LE);
    }
    set shaderSharedFloat64AtomicMinMax(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderImageFloat32AtomicMinMax() {
        return this.#view.getUint32(56, LE);
    }
    set shaderImageFloat32AtomicMinMax(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sparseImageFloat32AtomicMinMax() {
        return this.#view.getUint32(60, LE);
    }
    set sparseImageFloat32AtomicMinMax(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVertexAttributeDivisorFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVertexAttributeDivisorFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVertexAttributeDivisorFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVertexAttributeDivisorFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexAttributeInstanceRateDivisor && (this.vertexAttributeInstanceRateDivisor = data.vertexAttributeInstanceRateDivisor), void 0 !== data.vertexAttributeInstanceRateZeroDivisor && (this.vertexAttributeInstanceRateZeroDivisor = data.vertexAttributeInstanceRateZeroDivisor);
        this.sType = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexAttributeInstanceRateDivisor() {
        return this.#view.getUint32(16, LE);
    }
    set vertexAttributeInstanceRateDivisor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexAttributeInstanceRateZeroDivisor() {
        return this.#view.getUint32(20, LE);
    }
    set vertexAttributeInstanceRateZeroDivisor(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class QueueFamilyCheckpointPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyCheckpointPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyCheckpointPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyCheckpointPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyCheckpointPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.checkpointExecutionStageMask && (this.checkpointExecutionStageMask = data.checkpointExecutionStageMask);
        this.sType = StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get checkpointExecutionStageMask() {
        return this.#view.getUint32(16, LE);
    }
    set checkpointExecutionStageMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CheckpointDataNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CheckpointDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CheckpointDataNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CheckpointDataNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CheckpointDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stage && (this.stage = data.stage), void 0 !== data.pCheckpointMarker && (this.pCheckpointMarker = data.pCheckpointMarker);
        this.sType = StructureType.CHECKPOINT_DATA_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stage() {
        return this.#view.getUint32(16, LE);
    }
    set stage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pCheckpointMarker() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCheckpointMarker(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDepthStencilResolveProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDepthStencilResolveProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDepthStencilResolveProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDepthStencilResolveProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDepthStencilResolveProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supportedDepthResolveModes && (this.supportedDepthResolveModes = data.supportedDepthResolveModes), void 0 !== data.supportedStencilResolveModes && (this.supportedStencilResolveModes = data.supportedStencilResolveModes), void 0 !== data.independentResolveNone && (this.independentResolveNone = data.independentResolveNone), void 0 !== data.independentResolve && (this.independentResolve = data.independentResolve);
        this.sType = StructureType.PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supportedDepthResolveModes() {
        return this.#view.getUint32(16, LE);
    }
    set supportedDepthResolveModes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedStencilResolveModes() {
        return this.#view.getUint32(20, LE);
    }
    set supportedStencilResolveModes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get independentResolveNone() {
        return this.#view.getUint32(24, LE);
    }
    set independentResolveNone(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get independentResolve() {
        return this.#view.getUint32(28, LE);
    }
    set independentResolve(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class SubpassDescriptionDepthStencilResolve {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassDescriptionDepthStencilResolve.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassDescriptionDepthStencilResolve.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassDescriptionDepthStencilResolve.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassDescriptionDepthStencilResolve.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.depthResolveMode && (this.depthResolveMode = data.depthResolveMode), void 0 !== data.stencilResolveMode && (this.stencilResolveMode = data.stencilResolveMode), void 0 !== data.pDepthStencilResolveAttachment && (this.pDepthStencilResolveAttachment = data.pDepthStencilResolveAttachment);
        this.sType = StructureType.SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get depthResolveMode() {
        return this.#view.getUint32(16, LE);
    }
    set depthResolveMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilResolveMode() {
        return this.#view.getUint32(20, LE);
    }
    set stencilResolveMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDepthStencilResolveAttachment() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDepthStencilResolveAttachment(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ImageViewASTCDecodeModeEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewASTCDecodeModeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewASTCDecodeModeEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewASTCDecodeModeEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewASTCDecodeModeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.decodeMode && (this.decodeMode = data.decodeMode);
        this.sType = StructureType.IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get decodeMode() {
        return this.#view.getUint32(16, LE);
    }
    set decodeMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceASTCDecodeFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceASTCDecodeFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceASTCDecodeFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceASTCDecodeFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceASTCDecodeFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.decodeModeSharedExponent && (this.decodeModeSharedExponent = data.decodeModeSharedExponent);
        this.sType = StructureType.PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get decodeModeSharedExponent() {
        return this.#view.getUint32(16, LE);
    }
    set decodeModeSharedExponent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceTransformFeedbackFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTransformFeedbackFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTransformFeedbackFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTransformFeedbackFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTransformFeedbackFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.transformFeedback && (this.transformFeedback = data.transformFeedback), void 0 !== data.geometryStreams && (this.geometryStreams = data.geometryStreams);
        this.sType = StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get transformFeedback() {
        return this.#view.getUint32(16, LE);
    }
    set transformFeedback(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometryStreams() {
        return this.#view.getUint32(20, LE);
    }
    set geometryStreams(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceTransformFeedbackPropertiesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTransformFeedbackPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTransformFeedbackPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTransformFeedbackPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTransformFeedbackPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxTransformFeedbackStreams && (this.maxTransformFeedbackStreams = data.maxTransformFeedbackStreams), void 0 !== data.maxTransformFeedbackBuffers && (this.maxTransformFeedbackBuffers = data.maxTransformFeedbackBuffers), void 0 !== data.maxTransformFeedbackBufferSize && (this.maxTransformFeedbackBufferSize = data.maxTransformFeedbackBufferSize), void 0 !== data.maxTransformFeedbackStreamDataSize && (this.maxTransformFeedbackStreamDataSize = data.maxTransformFeedbackStreamDataSize), void 0 !== data.maxTransformFeedbackBufferDataSize && (this.maxTransformFeedbackBufferDataSize = data.maxTransformFeedbackBufferDataSize), void 0 !== data.maxTransformFeedbackBufferDataStride && (this.maxTransformFeedbackBufferDataStride = data.maxTransformFeedbackBufferDataStride), void 0 !== data.transformFeedbackQueries && (this.transformFeedbackQueries = data.transformFeedbackQueries), void 0 !== data.transformFeedbackStreamsLinesTriangles && (this.transformFeedbackStreamsLinesTriangles = data.transformFeedbackStreamsLinesTriangles), void 0 !== data.transformFeedbackRasterizationStreamSelect && (this.transformFeedbackRasterizationStreamSelect = data.transformFeedbackRasterizationStreamSelect), void 0 !== data.transformFeedbackDraw && (this.transformFeedbackDraw = data.transformFeedbackDraw);
        this.sType = StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxTransformFeedbackStreams() {
        return this.#view.getUint32(16, LE);
    }
    set maxTransformFeedbackStreams(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTransformFeedbackBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set maxTransformFeedbackBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxTransformFeedbackBufferSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxTransformFeedbackBufferSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get maxTransformFeedbackStreamDataSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxTransformFeedbackStreamDataSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxTransformFeedbackBufferDataSize() {
        return this.#view.getUint32(36, LE);
    }
    set maxTransformFeedbackBufferDataSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxTransformFeedbackBufferDataStride() {
        return this.#view.getUint32(40, LE);
    }
    set maxTransformFeedbackBufferDataStride(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get transformFeedbackQueries() {
        return this.#view.getUint32(44, LE);
    }
    set transformFeedbackQueries(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get transformFeedbackStreamsLinesTriangles() {
        return this.#view.getUint32(48, LE);
    }
    set transformFeedbackStreamsLinesTriangles(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get transformFeedbackRasterizationStreamSelect() {
        return this.#view.getUint32(52, LE);
    }
    set transformFeedbackRasterizationStreamSelect(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get transformFeedbackDraw() {
        return this.#view.getUint32(56, LE);
    }
    set transformFeedbackDraw(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class PipelineRasterizationStateStreamCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationStateStreamCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationStateStreamCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationStateStreamCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationStateStreamCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.rasterizationStream && (this.rasterizationStream = data.rasterizationStream);
        this.sType = StructureType.PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationStream() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationStream(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRepresentativeFragmentTestFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRepresentativeFragmentTestFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRepresentativeFragmentTestFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRepresentativeFragmentTestFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.representativeFragmentTest && (this.representativeFragmentTest = data.representativeFragmentTest);
        this.sType = StructureType.PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get representativeFragmentTest() {
        return this.#view.getUint32(16, LE);
    }
    set representativeFragmentTest(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineRepresentativeFragmentTestStateCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRepresentativeFragmentTestStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRepresentativeFragmentTestStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRepresentativeFragmentTestStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRepresentativeFragmentTestStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.representativeFragmentTestEnable && (this.representativeFragmentTestEnable = data.representativeFragmentTestEnable);
        this.sType = StructureType.PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get representativeFragmentTestEnable() {
        return this.#view.getUint32(16, LE);
    }
    set representativeFragmentTestEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceExclusiveScissorFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExclusiveScissorFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExclusiveScissorFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExclusiveScissorFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExclusiveScissorFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.exclusiveScissor && (this.exclusiveScissor = data.exclusiveScissor);
        this.sType = StructureType.PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get exclusiveScissor() {
        return this.#view.getUint32(16, LE);
    }
    set exclusiveScissor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineViewportExclusiveScissorStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportExclusiveScissorStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportExclusiveScissorStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportExclusiveScissorStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportExclusiveScissorStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.exclusiveScissorCount && (this.exclusiveScissorCount = data.exclusiveScissorCount), void 0 !== data.pExclusiveScissors && (this.pExclusiveScissors = data.pExclusiveScissors);
        this.sType = StructureType.PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get exclusiveScissorCount() {
        return this.#view.getUint32(16, LE);
    }
    set exclusiveScissorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pExclusiveScissors() {
        return this.#view.getBigUint64(24, LE);
    }
    set pExclusiveScissors(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceCornerSampledImageFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCornerSampledImageFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCornerSampledImageFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCornerSampledImageFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCornerSampledImageFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.cornerSampledImage && (this.cornerSampledImage = data.cornerSampledImage);
        this.sType = StructureType.PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get cornerSampledImage() {
        return this.#view.getUint32(16, LE);
    }
    set cornerSampledImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceComputeShaderDerivativesFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceComputeShaderDerivativesFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceComputeShaderDerivativesFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceComputeShaderDerivativesFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceComputeShaderDerivativesFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.computeDerivativeGroupQuads && (this.computeDerivativeGroupQuads = data.computeDerivativeGroupQuads), void 0 !== data.computeDerivativeGroupLinear && (this.computeDerivativeGroupLinear = data.computeDerivativeGroupLinear);
        this.sType = StructureType.PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get computeDerivativeGroupQuads() {
        return this.#view.getUint32(16, LE);
    }
    set computeDerivativeGroupQuads(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get computeDerivativeGroupLinear() {
        return this.#view.getUint32(20, LE);
    }
    set computeDerivativeGroupLinear(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceShaderImageFootprintFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderImageFootprintFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderImageFootprintFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderImageFootprintFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderImageFootprintFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageFootprint && (this.imageFootprint = data.imageFootprint);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageFootprint() {
        return this.#view.getUint32(16, LE);
    }
    set imageFootprint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dedicatedAllocationImageAliasing && (this.dedicatedAllocationImageAliasing = data.dedicatedAllocationImageAliasing);
        this.sType = StructureType.PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dedicatedAllocationImageAliasing() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocationImageAliasing(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCopyMemoryIndirectFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCopyMemoryIndirectFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCopyMemoryIndirectFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCopyMemoryIndirectFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCopyMemoryIndirectFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.indirectCopy && (this.indirectCopy = data.indirectCopy);
        this.sType = StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get indirectCopy() {
        return this.#view.getUint32(16, LE);
    }
    set indirectCopy(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCopyMemoryIndirectPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCopyMemoryIndirectPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCopyMemoryIndirectPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCopyMemoryIndirectPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCopyMemoryIndirectPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supportedQueues && (this.supportedQueues = data.supportedQueues);
        this.sType = StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supportedQueues() {
        return this.#view.getUint32(16, LE);
    }
    set supportedQueues(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceMemoryDecompressionFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryDecompressionFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryDecompressionFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryDecompressionFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryDecompressionFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryDecompression && (this.memoryDecompression = data.memoryDecompression);
        this.sType = StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryDecompression() {
        return this.#view.getUint32(16, LE);
    }
    set memoryDecompression(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceMemoryDecompressionPropertiesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryDecompressionPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryDecompressionPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryDecompressionPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryDecompressionPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.decompressionMethods && (this.decompressionMethods = data.decompressionMethods), void 0 !== data.maxDecompressionIndirectCount && (this.maxDecompressionIndirectCount = data.maxDecompressionIndirectCount);
        this.sType = StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get decompressionMethods() {
        return this.#view.getBigUint64(16, LE);
    }
    set decompressionMethods(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get maxDecompressionIndirectCount() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxDecompressionIndirectCount(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class ShadingRatePaletteNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShadingRatePaletteNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShadingRatePaletteNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShadingRatePaletteNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShadingRatePaletteNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.shadingRatePaletteEntryCount && (this.shadingRatePaletteEntryCount = data.shadingRatePaletteEntryCount), void 0 !== data.pShadingRatePaletteEntries && (this.pShadingRatePaletteEntries = data.pShadingRatePaletteEntries);
    }
    get shadingRatePaletteEntryCount() {
        return this.#view.getUint32(0, LE);
    }
    set shadingRatePaletteEntryCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pShadingRatePaletteEntries() {
        return this.#view.getBigUint64(8, LE);
    }
    set pShadingRatePaletteEntries(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineViewportShadingRateImageStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportShadingRateImageStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportShadingRateImageStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportShadingRateImageStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportShadingRateImageStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shadingRateImageEnable && (this.shadingRateImageEnable = data.shadingRateImageEnable), void 0 !== data.viewportCount && (this.viewportCount = data.viewportCount), void 0 !== data.pShadingRatePalettes && (this.pShadingRatePalettes = data.pShadingRatePalettes);
        this.sType = StructureType.PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shadingRateImageEnable() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateImageEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pShadingRatePalettes() {
        return this.#view.getBigUint64(24, LE);
    }
    set pShadingRatePalettes(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceShadingRateImageFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShadingRateImageFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShadingRateImageFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShadingRateImageFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShadingRateImageFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shadingRateImage && (this.shadingRateImage = data.shadingRateImage), void 0 !== data.shadingRateCoarseSampleOrder && (this.shadingRateCoarseSampleOrder = data.shadingRateCoarseSampleOrder);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shadingRateImage() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shadingRateCoarseSampleOrder() {
        return this.#view.getUint32(20, LE);
    }
    set shadingRateCoarseSampleOrder(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceShadingRateImagePropertiesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShadingRateImagePropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShadingRateImagePropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShadingRateImagePropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShadingRateImagePropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shadingRateTexelSize && (this.shadingRateTexelSize = data.shadingRateTexelSize), void 0 !== data.shadingRatePaletteSize && (this.shadingRatePaletteSize = data.shadingRatePaletteSize), void 0 !== data.shadingRateMaxCoarseSamples && (this.shadingRateMaxCoarseSamples = data.shadingRateMaxCoarseSamples);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shadingRateTexelSize() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set shadingRateTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get shadingRatePaletteSize() {
        return this.#view.getUint32(24, LE);
    }
    set shadingRatePaletteSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shadingRateMaxCoarseSamples() {
        return this.#view.getUint32(28, LE);
    }
    set shadingRateMaxCoarseSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceInvocationMaskFeaturesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceInvocationMaskFeaturesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceInvocationMaskFeaturesHUAWEI.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceInvocationMaskFeaturesHUAWEI.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceInvocationMaskFeaturesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.invocationMask && (this.invocationMask = data.invocationMask);
        this.sType = StructureType.PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get invocationMask() {
        return this.#view.getUint32(16, LE);
    }
    set invocationMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CoarseSampleLocationNV {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CoarseSampleLocationNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CoarseSampleLocationNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CoarseSampleLocationNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CoarseSampleLocationNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pixelX && (this.pixelX = data.pixelX), void 0 !== data.pixelY && (this.pixelY = data.pixelY), void 0 !== data.sample && (this.sample = data.sample);
    }
    get pixelX() {
        return this.#view.getUint32(0, LE);
    }
    set pixelX(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pixelY() {
        return this.#view.getUint32(4, LE);
    }
    set pixelY(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sample() {
        return this.#view.getUint32(8, LE);
    }
    set sample(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class CoarseSampleOrderCustomNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CoarseSampleOrderCustomNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CoarseSampleOrderCustomNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CoarseSampleOrderCustomNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CoarseSampleOrderCustomNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.shadingRate && (this.shadingRate = data.shadingRate), void 0 !== data.sampleCount && (this.sampleCount = data.sampleCount), void 0 !== data.sampleLocationCount && (this.sampleLocationCount = data.sampleLocationCount), void 0 !== data.pSampleLocations && (this.pSampleLocations = data.pSampleLocations);
    }
    get shadingRate() {
        return this.#view.getUint32(0, LE);
    }
    set shadingRate(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleCount() {
        return this.#view.getUint32(4, LE);
    }
    set sampleCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sampleLocationCount() {
        return this.#view.getUint32(8, LE);
    }
    set sampleLocationCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pSampleLocations() {
        return this.#view.getBigUint64(16, LE);
    }
    set pSampleLocations(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineViewportCoarseSampleOrderStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportCoarseSampleOrderStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportCoarseSampleOrderStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportCoarseSampleOrderStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportCoarseSampleOrderStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampleOrderType && (this.sampleOrderType = data.sampleOrderType), void 0 !== data.customSampleOrderCount && (this.customSampleOrderCount = data.customSampleOrderCount), void 0 !== data.pCustomSampleOrders && (this.pCustomSampleOrders = data.pCustomSampleOrders);
        this.sType = StructureType.PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampleOrderType() {
        return this.#view.getUint32(16, LE);
    }
    set sampleOrderType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get customSampleOrderCount() {
        return this.#view.getUint32(20, LE);
    }
    set customSampleOrderCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pCustomSampleOrders() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCustomSampleOrders(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceMeshShaderFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMeshShaderFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMeshShaderFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMeshShaderFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMeshShaderFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.taskShader && (this.taskShader = data.taskShader), void 0 !== data.meshShader && (this.meshShader = data.meshShader);
        this.sType = StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get taskShader() {
        return this.#view.getUint32(16, LE);
    }
    set taskShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get meshShader() {
        return this.#view.getUint32(20, LE);
    }
    set meshShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceMeshShaderPropertiesNV {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMeshShaderPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMeshShaderPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMeshShaderPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMeshShaderPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxDrawMeshTasksCount && (this.maxDrawMeshTasksCount = data.maxDrawMeshTasksCount), void 0 !== data.maxTaskWorkGroupInvocations && (this.maxTaskWorkGroupInvocations = data.maxTaskWorkGroupInvocations), void 0 !== data.maxTaskWorkGroupSize && (this.maxTaskWorkGroupSize = data.maxTaskWorkGroupSize), void 0 !== data.maxTaskTotalMemorySize && (this.maxTaskTotalMemorySize = data.maxTaskTotalMemorySize), void 0 !== data.maxTaskOutputCount && (this.maxTaskOutputCount = data.maxTaskOutputCount), void 0 !== data.maxMeshWorkGroupInvocations && (this.maxMeshWorkGroupInvocations = data.maxMeshWorkGroupInvocations), void 0 !== data.maxMeshWorkGroupSize && (this.maxMeshWorkGroupSize = data.maxMeshWorkGroupSize), void 0 !== data.maxMeshTotalMemorySize && (this.maxMeshTotalMemorySize = data.maxMeshTotalMemorySize), void 0 !== data.maxMeshOutputVertices && (this.maxMeshOutputVertices = data.maxMeshOutputVertices), void 0 !== data.maxMeshOutputPrimitives && (this.maxMeshOutputPrimitives = data.maxMeshOutputPrimitives), void 0 !== data.maxMeshMultiviewViewCount && (this.maxMeshMultiviewViewCount = data.maxMeshMultiviewViewCount), void 0 !== data.meshOutputPerVertexGranularity && (this.meshOutputPerVertexGranularity = data.meshOutputPerVertexGranularity), void 0 !== data.meshOutputPerPrimitiveGranularity && (this.meshOutputPerPrimitiveGranularity = data.meshOutputPerPrimitiveGranularity);
        this.sType = StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxDrawMeshTasksCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxDrawMeshTasksCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTaskWorkGroupInvocations() {
        return this.#view.getUint32(20, LE);
    }
    set maxTaskWorkGroupInvocations(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxTaskWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 24, 3);
    }
    set maxTaskWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 24);
    }
    get maxTaskTotalMemorySize() {
        return this.#view.getUint32(36, LE);
    }
    set maxTaskTotalMemorySize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxTaskOutputCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxTaskOutputCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxMeshWorkGroupInvocations() {
        return this.#view.getUint32(44, LE);
    }
    set maxMeshWorkGroupInvocations(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxMeshWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 48, 3);
    }
    set maxMeshWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 48);
    }
    get maxMeshTotalMemorySize() {
        return this.#view.getUint32(60, LE);
    }
    set maxMeshTotalMemorySize(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxMeshOutputVertices() {
        return this.#view.getUint32(64, LE);
    }
    set maxMeshOutputVertices(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxMeshOutputPrimitives() {
        return this.#view.getUint32(68, LE);
    }
    set maxMeshOutputPrimitives(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxMeshMultiviewViewCount() {
        return this.#view.getUint32(72, LE);
    }
    set maxMeshMultiviewViewCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get meshOutputPerVertexGranularity() {
        return this.#view.getUint32(76, LE);
    }
    set meshOutputPerVertexGranularity(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get meshOutputPerPrimitiveGranularity() {
        return this.#view.getUint32(80, LE);
    }
    set meshOutputPerPrimitiveGranularity(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class DrawMeshTasksIndirectCommandNV {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrawMeshTasksIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrawMeshTasksIndirectCommandNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrawMeshTasksIndirectCommandNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrawMeshTasksIndirectCommandNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.taskCount && (this.taskCount = data.taskCount), void 0 !== data.firstTask && (this.firstTask = data.firstTask);
    }
    get taskCount() {
        return this.#view.getUint32(0, LE);
    }
    set taskCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get firstTask() {
        return this.#view.getUint32(4, LE);
    }
    set firstTask(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class PhysicalDeviceMeshShaderFeaturesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMeshShaderFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMeshShaderFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMeshShaderFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMeshShaderFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.taskShader && (this.taskShader = data.taskShader), void 0 !== data.meshShader && (this.meshShader = data.meshShader), void 0 !== data.multiviewMeshShader && (this.multiviewMeshShader = data.multiviewMeshShader), void 0 !== data.primitiveFragmentShadingRateMeshShader && (this.primitiveFragmentShadingRateMeshShader = data.primitiveFragmentShadingRateMeshShader), void 0 !== data.meshShaderQueries && (this.meshShaderQueries = data.meshShaderQueries);
        this.sType = StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get taskShader() {
        return this.#view.getUint32(16, LE);
    }
    set taskShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get meshShader() {
        return this.#view.getUint32(20, LE);
    }
    set meshShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get multiviewMeshShader() {
        return this.#view.getUint32(24, LE);
    }
    set multiviewMeshShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get primitiveFragmentShadingRateMeshShader() {
        return this.#view.getUint32(28, LE);
    }
    set primitiveFragmentShadingRateMeshShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get meshShaderQueries() {
        return this.#view.getUint32(32, LE);
    }
    set meshShaderQueries(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceMeshShaderPropertiesEXT {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMeshShaderPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMeshShaderPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMeshShaderPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMeshShaderPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxTaskWorkGroupTotalCount && (this.maxTaskWorkGroupTotalCount = data.maxTaskWorkGroupTotalCount), void 0 !== data.maxTaskWorkGroupCount && (this.maxTaskWorkGroupCount = data.maxTaskWorkGroupCount), void 0 !== data.maxTaskWorkGroupInvocations && (this.maxTaskWorkGroupInvocations = data.maxTaskWorkGroupInvocations), void 0 !== data.maxTaskWorkGroupSize && (this.maxTaskWorkGroupSize = data.maxTaskWorkGroupSize), void 0 !== data.maxTaskPayloadSize && (this.maxTaskPayloadSize = data.maxTaskPayloadSize), void 0 !== data.maxTaskSharedMemorySize && (this.maxTaskSharedMemorySize = data.maxTaskSharedMemorySize), void 0 !== data.maxTaskPayloadAndSharedMemorySize && (this.maxTaskPayloadAndSharedMemorySize = data.maxTaskPayloadAndSharedMemorySize), void 0 !== data.maxMeshWorkGroupTotalCount && (this.maxMeshWorkGroupTotalCount = data.maxMeshWorkGroupTotalCount), void 0 !== data.maxMeshWorkGroupCount && (this.maxMeshWorkGroupCount = data.maxMeshWorkGroupCount), void 0 !== data.maxMeshWorkGroupInvocations && (this.maxMeshWorkGroupInvocations = data.maxMeshWorkGroupInvocations), void 0 !== data.maxMeshWorkGroupSize && (this.maxMeshWorkGroupSize = data.maxMeshWorkGroupSize), void 0 !== data.maxMeshSharedMemorySize && (this.maxMeshSharedMemorySize = data.maxMeshSharedMemorySize), void 0 !== data.maxMeshPayloadAndSharedMemorySize && (this.maxMeshPayloadAndSharedMemorySize = data.maxMeshPayloadAndSharedMemorySize), void 0 !== data.maxMeshOutputMemorySize && (this.maxMeshOutputMemorySize = data.maxMeshOutputMemorySize), void 0 !== data.maxMeshPayloadAndOutputMemorySize && (this.maxMeshPayloadAndOutputMemorySize = data.maxMeshPayloadAndOutputMemorySize), void 0 !== data.maxMeshOutputComponents && (this.maxMeshOutputComponents = data.maxMeshOutputComponents), void 0 !== data.maxMeshOutputVertices && (this.maxMeshOutputVertices = data.maxMeshOutputVertices), void 0 !== data.maxMeshOutputPrimitives && (this.maxMeshOutputPrimitives = data.maxMeshOutputPrimitives), void 0 !== data.maxMeshOutputLayers && (this.maxMeshOutputLayers = data.maxMeshOutputLayers), void 0 !== data.maxMeshMultiviewViewCount && (this.maxMeshMultiviewViewCount = data.maxMeshMultiviewViewCount), void 0 !== data.meshOutputPerVertexGranularity && (this.meshOutputPerVertexGranularity = data.meshOutputPerVertexGranularity), void 0 !== data.meshOutputPerPrimitiveGranularity && (this.meshOutputPerPrimitiveGranularity = data.meshOutputPerPrimitiveGranularity), void 0 !== data.maxPreferredTaskWorkGroupInvocations && (this.maxPreferredTaskWorkGroupInvocations = data.maxPreferredTaskWorkGroupInvocations), void 0 !== data.maxPreferredMeshWorkGroupInvocations && (this.maxPreferredMeshWorkGroupInvocations = data.maxPreferredMeshWorkGroupInvocations), void 0 !== data.prefersLocalInvocationVertexOutput && (this.prefersLocalInvocationVertexOutput = data.prefersLocalInvocationVertexOutput), void 0 !== data.prefersLocalInvocationPrimitiveOutput && (this.prefersLocalInvocationPrimitiveOutput = data.prefersLocalInvocationPrimitiveOutput), void 0 !== data.prefersCompactVertexOutput && (this.prefersCompactVertexOutput = data.prefersCompactVertexOutput), void 0 !== data.prefersCompactPrimitiveOutput && (this.prefersCompactPrimitiveOutput = data.prefersCompactPrimitiveOutput);
        this.sType = StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxTaskWorkGroupTotalCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxTaskWorkGroupTotalCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTaskWorkGroupCount() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 20, 3);
    }
    set maxTaskWorkGroupCount(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get maxTaskWorkGroupInvocations() {
        return this.#view.getUint32(32, LE);
    }
    set maxTaskWorkGroupInvocations(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxTaskWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 36, 3);
    }
    set maxTaskWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 36);
    }
    get maxTaskPayloadSize() {
        return this.#view.getUint32(48, LE);
    }
    set maxTaskPayloadSize(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxTaskSharedMemorySize() {
        return this.#view.getUint32(52, LE);
    }
    set maxTaskSharedMemorySize(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxTaskPayloadAndSharedMemorySize() {
        return this.#view.getUint32(56, LE);
    }
    set maxTaskPayloadAndSharedMemorySize(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxMeshWorkGroupTotalCount() {
        return this.#view.getUint32(60, LE);
    }
    set maxMeshWorkGroupTotalCount(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxMeshWorkGroupCount() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 64, 3);
    }
    set maxMeshWorkGroupCount(value) {
        this.#data.set(new Uint8Array(value.buffer), 64);
    }
    get maxMeshWorkGroupInvocations() {
        return this.#view.getUint32(76, LE);
    }
    set maxMeshWorkGroupInvocations(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxMeshWorkGroupSize() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 80, 3);
    }
    set maxMeshWorkGroupSize(value) {
        this.#data.set(new Uint8Array(value.buffer), 80);
    }
    get maxMeshSharedMemorySize() {
        return this.#view.getUint32(92, LE);
    }
    set maxMeshSharedMemorySize(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxMeshPayloadAndSharedMemorySize() {
        return this.#view.getUint32(96, LE);
    }
    set maxMeshPayloadAndSharedMemorySize(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxMeshOutputMemorySize() {
        return this.#view.getUint32(100, LE);
    }
    set maxMeshOutputMemorySize(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxMeshPayloadAndOutputMemorySize() {
        return this.#view.getUint32(104, LE);
    }
    set maxMeshPayloadAndOutputMemorySize(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get maxMeshOutputComponents() {
        return this.#view.getUint32(108, LE);
    }
    set maxMeshOutputComponents(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get maxMeshOutputVertices() {
        return this.#view.getUint32(112, LE);
    }
    set maxMeshOutputVertices(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get maxMeshOutputPrimitives() {
        return this.#view.getUint32(116, LE);
    }
    set maxMeshOutputPrimitives(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get maxMeshOutputLayers() {
        return this.#view.getUint32(120, LE);
    }
    set maxMeshOutputLayers(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get maxMeshMultiviewViewCount() {
        return this.#view.getUint32(124, LE);
    }
    set maxMeshMultiviewViewCount(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get meshOutputPerVertexGranularity() {
        return this.#view.getUint32(128, LE);
    }
    set meshOutputPerVertexGranularity(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get meshOutputPerPrimitiveGranularity() {
        return this.#view.getUint32(132, LE);
    }
    set meshOutputPerPrimitiveGranularity(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get maxPreferredTaskWorkGroupInvocations() {
        return this.#view.getUint32(136, LE);
    }
    set maxPreferredTaskWorkGroupInvocations(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get maxPreferredMeshWorkGroupInvocations() {
        return this.#view.getUint32(140, LE);
    }
    set maxPreferredMeshWorkGroupInvocations(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get prefersLocalInvocationVertexOutput() {
        return this.#view.getUint32(144, LE);
    }
    set prefersLocalInvocationVertexOutput(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get prefersLocalInvocationPrimitiveOutput() {
        return this.#view.getUint32(148, LE);
    }
    set prefersLocalInvocationPrimitiveOutput(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get prefersCompactVertexOutput() {
        return this.#view.getUint32(152, LE);
    }
    set prefersCompactVertexOutput(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get prefersCompactPrimitiveOutput() {
        return this.#view.getUint32(156, LE);
    }
    set prefersCompactPrimitiveOutput(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
}
export class DrawMeshTasksIndirectCommandEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrawMeshTasksIndirectCommandEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrawMeshTasksIndirectCommandEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrawMeshTasksIndirectCommandEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrawMeshTasksIndirectCommandEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.groupCountX && (this.groupCountX = data.groupCountX), void 0 !== data.groupCountY && (this.groupCountY = data.groupCountY), void 0 !== data.groupCountZ && (this.groupCountZ = data.groupCountZ);
    }
    get groupCountX() {
        return this.#view.getUint32(0, LE);
    }
    set groupCountX(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get groupCountY() {
        return this.#view.getUint32(4, LE);
    }
    set groupCountY(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get groupCountZ() {
        return this.#view.getUint32(8, LE);
    }
    set groupCountZ(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class RayTracingShaderGroupCreateInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RayTracingShaderGroupCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RayTracingShaderGroupCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RayTracingShaderGroupCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RayTracingShaderGroupCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.generalShader && (this.generalShader = data.generalShader), void 0 !== data.closestHitShader && (this.closestHitShader = data.closestHitShader), void 0 !== data.anyHitShader && (this.anyHitShader = data.anyHitShader), void 0 !== data.intersectionShader && (this.intersectionShader = data.intersectionShader);
        this.sType = StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get generalShader() {
        return this.#view.getUint32(20, LE);
    }
    set generalShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get closestHitShader() {
        return this.#view.getUint32(24, LE);
    }
    set closestHitShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get anyHitShader() {
        return this.#view.getUint32(28, LE);
    }
    set anyHitShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get intersectionShader() {
        return this.#view.getUint32(32, LE);
    }
    set intersectionShader(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class RayTracingShaderGroupCreateInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RayTracingShaderGroupCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RayTracingShaderGroupCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RayTracingShaderGroupCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RayTracingShaderGroupCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.generalShader && (this.generalShader = data.generalShader), void 0 !== data.closestHitShader && (this.closestHitShader = data.closestHitShader), void 0 !== data.anyHitShader && (this.anyHitShader = data.anyHitShader), void 0 !== data.intersectionShader && (this.intersectionShader = data.intersectionShader), void 0 !== data.pShaderGroupCaptureReplayHandle && (this.pShaderGroupCaptureReplayHandle = data.pShaderGroupCaptureReplayHandle);
        this.sType = StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get generalShader() {
        return this.#view.getUint32(20, LE);
    }
    set generalShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get closestHitShader() {
        return this.#view.getUint32(24, LE);
    }
    set closestHitShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get anyHitShader() {
        return this.#view.getUint32(28, LE);
    }
    set anyHitShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get intersectionShader() {
        return this.#view.getUint32(32, LE);
    }
    set intersectionShader(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pShaderGroupCaptureReplayHandle() {
        return this.#view.getBigUint64(40, LE);
    }
    set pShaderGroupCaptureReplayHandle(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class RayTracingPipelineCreateInfoNV {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RayTracingPipelineCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RayTracingPipelineCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RayTracingPipelineCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RayTracingPipelineCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.stageCount && (this.stageCount = data.stageCount), void 0 !== data.pStages && (this.pStages = data.pStages), void 0 !== data.groupCount && (this.groupCount = data.groupCount), void 0 !== data.pGroups && (this.pGroups = data.pGroups), void 0 !== data.maxRecursionDepth && (this.maxRecursionDepth = data.maxRecursionDepth), void 0 !== data.layout && (this.layout = data.layout), void 0 !== data.basePipelineHandle && (this.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (this.basePipelineIndex = data.basePipelineIndex);
        this.sType = StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get groupCount() {
        return this.#view.getUint32(32, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(40, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get maxRecursionDepth() {
        return this.#view.getUint32(48, LE);
    }
    set maxRecursionDepth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get layout() {
        return this.#view.getBigUint64(56, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(64, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(72, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(72, Number(value), LE);
    }
}
export class RayTracingPipelineCreateInfoKHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RayTracingPipelineCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RayTracingPipelineCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RayTracingPipelineCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RayTracingPipelineCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.stageCount && (this.stageCount = data.stageCount), void 0 !== data.pStages && (this.pStages = data.pStages), void 0 !== data.groupCount && (this.groupCount = data.groupCount), void 0 !== data.pGroups && (this.pGroups = data.pGroups), void 0 !== data.maxPipelineRayRecursionDepth && (this.maxPipelineRayRecursionDepth = data.maxPipelineRayRecursionDepth), void 0 !== data.pLibraryInfo && (this.pLibraryInfo = data.pLibraryInfo), void 0 !== data.pLibraryInterface && (this.pLibraryInterface = data.pLibraryInterface), void 0 !== data.pDynamicState && (this.pDynamicState = data.pDynamicState), void 0 !== data.layout && (this.layout = data.layout), void 0 !== data.basePipelineHandle && (this.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (this.basePipelineIndex = data.basePipelineIndex);
        this.sType = StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get groupCount() {
        return this.#view.getUint32(32, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(40, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get maxPipelineRayRecursionDepth() {
        return this.#view.getUint32(48, LE);
    }
    set maxPipelineRayRecursionDepth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pLibraryInfo() {
        return this.#view.getBigUint64(56, LE);
    }
    set pLibraryInfo(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pLibraryInterface() {
        return this.#view.getBigUint64(64, LE);
    }
    set pLibraryInterface(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get pDynamicState() {
        return this.#view.getBigUint64(72, LE);
    }
    set pDynamicState(value) {
        this.#view.setBigUint64(72, BigInt(anyPointer(value)), LE);
    }
    get layout() {
        return this.#view.getBigUint64(80, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(88, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(88, BigInt(anyPointer(value)), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(96, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(96, Number(value), LE);
    }
}
export class GeometryTrianglesNV {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeometryTrianglesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeometryTrianglesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeometryTrianglesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeometryTrianglesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexData && (this.vertexData = data.vertexData), void 0 !== data.vertexOffset && (this.vertexOffset = data.vertexOffset), void 0 !== data.vertexCount && (this.vertexCount = data.vertexCount), void 0 !== data.vertexStride && (this.vertexStride = data.vertexStride), void 0 !== data.vertexFormat && (this.vertexFormat = data.vertexFormat), void 0 !== data.indexData && (this.indexData = data.indexData), void 0 !== data.indexOffset && (this.indexOffset = data.indexOffset), void 0 !== data.indexCount && (this.indexCount = data.indexCount), void 0 !== data.indexType && (this.indexType = data.indexType), void 0 !== data.transformData && (this.transformData = data.transformData), void 0 !== data.transformOffset && (this.transformOffset = data.transformOffset);
        this.sType = StructureType.GEOMETRY_TRIANGLES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexData() {
        return this.#view.getBigUint64(16, LE);
    }
    set vertexData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get vertexOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set vertexOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get vertexCount() {
        return this.#view.getUint32(32, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get vertexStride() {
        return this.#view.getBigUint64(40, LE);
    }
    set vertexStride(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get vertexFormat() {
        return this.#view.getUint32(48, LE);
    }
    set vertexFormat(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get indexData() {
        return this.#view.getBigUint64(56, LE);
    }
    set indexData(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get indexOffset() {
        return this.#view.getBigUint64(64, LE);
    }
    set indexOffset(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get indexCount() {
        return this.#view.getUint32(72, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(76, LE);
    }
    set indexType(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get transformData() {
        return this.#view.getBigUint64(80, LE);
    }
    set transformData(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
    get transformOffset() {
        return this.#view.getBigUint64(88, LE);
    }
    set transformOffset(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class GeometryAABBNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeometryAABBNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeometryAABBNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeometryAABBNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeometryAABBNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.aabbData && (this.aabbData = data.aabbData), void 0 !== data.numAABBs && (this.numAABBs = data.numAABBs), void 0 !== data.stride && (this.stride = data.stride), void 0 !== data.offset && (this.offset = data.offset);
        this.sType = StructureType.GEOMETRY_AABB_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get aabbData() {
        return this.#view.getBigUint64(16, LE);
    }
    set aabbData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get numAABBs() {
        return this.#view.getUint32(24, LE);
    }
    set numAABBs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(28, LE);
    }
    set stride(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class GeometryDataNV {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeometryDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeometryDataNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeometryDataNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeometryDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.triangles && (this.triangles = data.triangles), void 0 !== data.aabbs && (this.aabbs = data.aabbs);
    }
    get triangles() {
        return new GeometryTrianglesNV(this.#data.subarray(0, 0 + GeometryTrianglesNV.size));
    }
    set triangles(value) {
        if (value[BUFFER].byteLength < GeometryTrianglesNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aabbs() {
        return new GeometryAABBNV(this.#data.subarray(96, 96 + GeometryAABBNV.size));
    }
    set aabbs(value) {
        if (value[BUFFER].byteLength < GeometryAABBNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 96);
    }
}
export class GeometryNV {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GeometryNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GeometryNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GeometryNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GeometryNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.geometryType && (this.geometryType = data.geometryType), void 0 !== data.geometry && (this.geometry = data.geometry), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.GEOMETRY_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get geometryType() {
        return this.#view.getUint32(16, LE);
    }
    set geometryType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometry() {
        return new GeometryDataNV(this.#data.subarray(20, 20 + GeometryDataNV.size));
    }
    set geometry(value) {
        if (value[BUFFER].byteLength < GeometryDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get flags() {
        return this.#view.getUint32(156, LE);
    }
    set flags(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
}
export class AccelerationStructureInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.instanceCount && (this.instanceCount = data.instanceCount), void 0 !== data.geometryCount && (this.geometryCount = data.geometryCount), void 0 !== data.pGeometries && (this.pGeometries = data.pGeometries);
        this.sType = StructureType.ACCELERATION_STRUCTURE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(24, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get geometryCount() {
        return this.#view.getUint32(28, LE);
    }
    set geometryCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pGeometries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pGeometries(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class AccelerationStructureCreateInfoNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.compactedSize && (this.compactedSize = data.compactedSize), void 0 !== data.info && (this.info = data.info);
        this.sType = StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get compactedSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set compactedSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get info() {
        return new AccelerationStructureInfoNV(this.#data.subarray(24, 24 + AccelerationStructureInfoNV.size));
    }
    set info(value) {
        if (value[BUFFER].byteLength < AccelerationStructureInfoNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class BindAccelerationStructureMemoryInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindAccelerationStructureMemoryInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindAccelerationStructureMemoryInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindAccelerationStructureMemoryInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindAccelerationStructureMemoryInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructure && (this.accelerationStructure = data.accelerationStructure), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset), void 0 !== data.deviceIndexCount && (this.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (this.pDeviceIndices = data.pDeviceIndices);
        this.sType = StructureType.BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(40, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class WriteDescriptorSetAccelerationStructureKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(WriteDescriptorSetAccelerationStructureKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, WriteDescriptorSetAccelerationStructureKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < WriteDescriptorSetAccelerationStructureKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(WriteDescriptorSetAccelerationStructureKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructureCount && (this.accelerationStructureCount = data.accelerationStructureCount), void 0 !== data.pAccelerationStructures && (this.pAccelerationStructures = data.pAccelerationStructures);
        this.sType = StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructureCount() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAccelerationStructures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAccelerationStructures(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class WriteDescriptorSetAccelerationStructureNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(WriteDescriptorSetAccelerationStructureNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, WriteDescriptorSetAccelerationStructureNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < WriteDescriptorSetAccelerationStructureNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(WriteDescriptorSetAccelerationStructureNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructureCount && (this.accelerationStructureCount = data.accelerationStructureCount), void 0 !== data.pAccelerationStructures && (this.pAccelerationStructures = data.pAccelerationStructures);
        this.sType = StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructureCount() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAccelerationStructures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAccelerationStructures(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class AccelerationStructureMemoryRequirementsInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureMemoryRequirementsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureMemoryRequirementsInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureMemoryRequirementsInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureMemoryRequirementsInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.accelerationStructure && (this.accelerationStructure = data.accelerationStructure);
        this.sType = StructureType.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceAccelerationStructureFeaturesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceAccelerationStructureFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceAccelerationStructureFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceAccelerationStructureFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceAccelerationStructureFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructure && (this.accelerationStructure = data.accelerationStructure), void 0 !== data.accelerationStructureCaptureReplay && (this.accelerationStructureCaptureReplay = data.accelerationStructureCaptureReplay), void 0 !== data.accelerationStructureIndirectBuild && (this.accelerationStructureIndirectBuild = data.accelerationStructureIndirectBuild), void 0 !== data.accelerationStructureHostCommands && (this.accelerationStructureHostCommands = data.accelerationStructureHostCommands), void 0 !== data.descriptorBindingAccelerationStructureUpdateAfterBind && (this.descriptorBindingAccelerationStructureUpdateAfterBind = data.descriptorBindingAccelerationStructureUpdateAfterBind);
        this.sType = StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructure() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructureCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set accelerationStructureCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get accelerationStructureIndirectBuild() {
        return this.#view.getUint32(24, LE);
    }
    set accelerationStructureIndirectBuild(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get accelerationStructureHostCommands() {
        return this.#view.getUint32(28, LE);
    }
    set accelerationStructureHostCommands(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get descriptorBindingAccelerationStructureUpdateAfterBind() {
        return this.#view.getUint32(32, LE);
    }
    set descriptorBindingAccelerationStructureUpdateAfterBind(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingPipelineFeaturesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingPipelineFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingPipelineFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingPipelineFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingPipelineFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayTracingPipeline && (this.rayTracingPipeline = data.rayTracingPipeline), void 0 !== data.rayTracingPipelineShaderGroupHandleCaptureReplay && (this.rayTracingPipelineShaderGroupHandleCaptureReplay = data.rayTracingPipelineShaderGroupHandleCaptureReplay), void 0 !== data.rayTracingPipelineShaderGroupHandleCaptureReplayMixed && (this.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = data.rayTracingPipelineShaderGroupHandleCaptureReplayMixed), void 0 !== data.rayTracingPipelineTraceRaysIndirect && (this.rayTracingPipelineTraceRaysIndirect = data.rayTracingPipelineTraceRaysIndirect), void 0 !== data.rayTraversalPrimitiveCulling && (this.rayTraversalPrimitiveCulling = data.rayTraversalPrimitiveCulling);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayTracingPipeline() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingPipeline(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingPipelineShaderGroupHandleCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingPipelineShaderGroupHandleCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rayTracingPipelineShaderGroupHandleCaptureReplayMixed() {
        return this.#view.getUint32(24, LE);
    }
    set rayTracingPipelineShaderGroupHandleCaptureReplayMixed(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rayTracingPipelineTraceRaysIndirect() {
        return this.#view.getUint32(28, LE);
    }
    set rayTracingPipelineTraceRaysIndirect(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get rayTraversalPrimitiveCulling() {
        return this.#view.getUint32(32, LE);
    }
    set rayTraversalPrimitiveCulling(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceRayQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayQueryFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayQueryFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayQuery && (this.rayQuery = data.rayQuery);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayQuery() {
        return this.#view.getUint32(16, LE);
    }
    set rayQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceAccelerationStructurePropertiesKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceAccelerationStructurePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceAccelerationStructurePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceAccelerationStructurePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceAccelerationStructurePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxGeometryCount && (this.maxGeometryCount = data.maxGeometryCount), void 0 !== data.maxInstanceCount && (this.maxInstanceCount = data.maxInstanceCount), void 0 !== data.maxPrimitiveCount && (this.maxPrimitiveCount = data.maxPrimitiveCount), void 0 !== data.maxPerStageDescriptorAccelerationStructures && (this.maxPerStageDescriptorAccelerationStructures = data.maxPerStageDescriptorAccelerationStructures), void 0 !== data.maxPerStageDescriptorUpdateAfterBindAccelerationStructures && (this.maxPerStageDescriptorUpdateAfterBindAccelerationStructures = data.maxPerStageDescriptorUpdateAfterBindAccelerationStructures), void 0 !== data.maxDescriptorSetAccelerationStructures && (this.maxDescriptorSetAccelerationStructures = data.maxDescriptorSetAccelerationStructures), void 0 !== data.maxDescriptorSetUpdateAfterBindAccelerationStructures && (this.maxDescriptorSetUpdateAfterBindAccelerationStructures = data.maxDescriptorSetUpdateAfterBindAccelerationStructures), void 0 !== data.minAccelerationStructureScratchOffsetAlignment && (this.minAccelerationStructureScratchOffsetAlignment = data.minAccelerationStructureScratchOffsetAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxGeometryCount() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxGeometryCount(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get maxInstanceCount() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxInstanceCount(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get maxPrimitiveCount() {
        return this.#view.getBigUint64(32, LE);
    }
    set maxPrimitiveCount(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxPerStageDescriptorAccelerationStructures() {
        return this.#view.getUint32(40, LE);
    }
    set maxPerStageDescriptorAccelerationStructures(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindAccelerationStructures() {
        return this.#view.getUint32(44, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindAccelerationStructures(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDescriptorSetAccelerationStructures() {
        return this.#view.getUint32(48, LE);
    }
    set maxDescriptorSetAccelerationStructures(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindAccelerationStructures() {
        return this.#view.getUint32(52, LE);
    }
    set maxDescriptorSetUpdateAfterBindAccelerationStructures(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get minAccelerationStructureScratchOffsetAlignment() {
        return this.#view.getUint32(56, LE);
    }
    set minAccelerationStructureScratchOffsetAlignment(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingPipelinePropertiesKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingPipelinePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingPipelinePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingPipelinePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingPipelinePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderGroupHandleSize && (this.shaderGroupHandleSize = data.shaderGroupHandleSize), void 0 !== data.maxRayRecursionDepth && (this.maxRayRecursionDepth = data.maxRayRecursionDepth), void 0 !== data.maxShaderGroupStride && (this.maxShaderGroupStride = data.maxShaderGroupStride), void 0 !== data.shaderGroupBaseAlignment && (this.shaderGroupBaseAlignment = data.shaderGroupBaseAlignment), void 0 !== data.shaderGroupHandleCaptureReplaySize && (this.shaderGroupHandleCaptureReplaySize = data.shaderGroupHandleCaptureReplaySize), void 0 !== data.maxRayDispatchInvocationCount && (this.maxRayDispatchInvocationCount = data.maxRayDispatchInvocationCount), void 0 !== data.shaderGroupHandleAlignment && (this.shaderGroupHandleAlignment = data.shaderGroupHandleAlignment), void 0 !== data.maxRayHitAttributeSize && (this.maxRayHitAttributeSize = data.maxRayHitAttributeSize);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderGroupHandleSize() {
        return this.#view.getUint32(16, LE);
    }
    set shaderGroupHandleSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxRayRecursionDepth() {
        return this.#view.getUint32(20, LE);
    }
    set maxRayRecursionDepth(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxShaderGroupStride() {
        return this.#view.getUint32(24, LE);
    }
    set maxShaderGroupStride(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderGroupBaseAlignment() {
        return this.#view.getUint32(28, LE);
    }
    set shaderGroupBaseAlignment(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderGroupHandleCaptureReplaySize() {
        return this.#view.getUint32(32, LE);
    }
    set shaderGroupHandleCaptureReplaySize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxRayDispatchInvocationCount() {
        return this.#view.getUint32(36, LE);
    }
    set maxRayDispatchInvocationCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderGroupHandleAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set shaderGroupHandleAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxRayHitAttributeSize() {
        return this.#view.getUint32(44, LE);
    }
    set maxRayHitAttributeSize(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingPropertiesNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderGroupHandleSize && (this.shaderGroupHandleSize = data.shaderGroupHandleSize), void 0 !== data.maxRecursionDepth && (this.maxRecursionDepth = data.maxRecursionDepth), void 0 !== data.maxShaderGroupStride && (this.maxShaderGroupStride = data.maxShaderGroupStride), void 0 !== data.shaderGroupBaseAlignment && (this.shaderGroupBaseAlignment = data.shaderGroupBaseAlignment), void 0 !== data.maxGeometryCount && (this.maxGeometryCount = data.maxGeometryCount), void 0 !== data.maxInstanceCount && (this.maxInstanceCount = data.maxInstanceCount), void 0 !== data.maxTriangleCount && (this.maxTriangleCount = data.maxTriangleCount), void 0 !== data.maxDescriptorSetAccelerationStructures && (this.maxDescriptorSetAccelerationStructures = data.maxDescriptorSetAccelerationStructures);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderGroupHandleSize() {
        return this.#view.getUint32(16, LE);
    }
    set shaderGroupHandleSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxRecursionDepth() {
        return this.#view.getUint32(20, LE);
    }
    set maxRecursionDepth(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxShaderGroupStride() {
        return this.#view.getUint32(24, LE);
    }
    set maxShaderGroupStride(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderGroupBaseAlignment() {
        return this.#view.getUint32(28, LE);
    }
    set shaderGroupBaseAlignment(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxGeometryCount() {
        return this.#view.getBigUint64(32, LE);
    }
    set maxGeometryCount(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxInstanceCount() {
        return this.#view.getBigUint64(40, LE);
    }
    set maxInstanceCount(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get maxTriangleCount() {
        return this.#view.getBigUint64(48, LE);
    }
    set maxTriangleCount(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get maxDescriptorSetAccelerationStructures() {
        return this.#view.getUint32(56, LE);
    }
    set maxDescriptorSetAccelerationStructures(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class StridedDeviceAddressRegionKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(StridedDeviceAddressRegionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, StridedDeviceAddressRegionKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < StridedDeviceAddressRegionKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(StridedDeviceAddressRegionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.deviceAddress && (this.deviceAddress = data.deviceAddress), void 0 !== data.stride && (this.stride = data.stride), void 0 !== data.size && (this.size = data.size);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get stride() {
        return this.#view.getBigUint64(8, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class TraceRaysIndirectCommandKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TraceRaysIndirectCommandKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TraceRaysIndirectCommandKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TraceRaysIndirectCommandKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TraceRaysIndirectCommandKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.depth && (this.depth = data.depth);
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(8, LE);
    }
    set depth(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class TraceRaysIndirectCommand2KHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TraceRaysIndirectCommand2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TraceRaysIndirectCommand2KHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TraceRaysIndirectCommand2KHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TraceRaysIndirectCommand2KHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.raygenShaderRecordAddress && (this.raygenShaderRecordAddress = data.raygenShaderRecordAddress), void 0 !== data.raygenShaderRecordSize && (this.raygenShaderRecordSize = data.raygenShaderRecordSize), void 0 !== data.missShaderBindingTableAddress && (this.missShaderBindingTableAddress = data.missShaderBindingTableAddress), void 0 !== data.missShaderBindingTableSize && (this.missShaderBindingTableSize = data.missShaderBindingTableSize), void 0 !== data.missShaderBindingTableStride && (this.missShaderBindingTableStride = data.missShaderBindingTableStride), void 0 !== data.hitShaderBindingTableAddress && (this.hitShaderBindingTableAddress = data.hitShaderBindingTableAddress), void 0 !== data.hitShaderBindingTableSize && (this.hitShaderBindingTableSize = data.hitShaderBindingTableSize), void 0 !== data.hitShaderBindingTableStride && (this.hitShaderBindingTableStride = data.hitShaderBindingTableStride), void 0 !== data.callableShaderBindingTableAddress && (this.callableShaderBindingTableAddress = data.callableShaderBindingTableAddress), void 0 !== data.callableShaderBindingTableSize && (this.callableShaderBindingTableSize = data.callableShaderBindingTableSize), void 0 !== data.callableShaderBindingTableStride && (this.callableShaderBindingTableStride = data.callableShaderBindingTableStride), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.depth && (this.depth = data.depth);
    }
    get raygenShaderRecordAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set raygenShaderRecordAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get raygenShaderRecordSize() {
        return this.#view.getBigUint64(8, LE);
    }
    set raygenShaderRecordSize(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get missShaderBindingTableAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set missShaderBindingTableAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get missShaderBindingTableSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set missShaderBindingTableSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get missShaderBindingTableStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set missShaderBindingTableStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get hitShaderBindingTableAddress() {
        return this.#view.getBigUint64(40, LE);
    }
    set hitShaderBindingTableAddress(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get hitShaderBindingTableSize() {
        return this.#view.getBigUint64(48, LE);
    }
    set hitShaderBindingTableSize(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get hitShaderBindingTableStride() {
        return this.#view.getBigUint64(56, LE);
    }
    set hitShaderBindingTableStride(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get callableShaderBindingTableAddress() {
        return this.#view.getBigUint64(64, LE);
    }
    set callableShaderBindingTableAddress(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get callableShaderBindingTableSize() {
        return this.#view.getBigUint64(72, LE);
    }
    set callableShaderBindingTableSize(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get callableShaderBindingTableStride() {
        return this.#view.getBigUint64(80, LE);
    }
    set callableShaderBindingTableStride(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get width() {
        return this.#view.getUint32(88, LE);
    }
    set width(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(92, LE);
    }
    set height(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(96, LE);
    }
    set depth(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingMaintenance1FeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingMaintenance1FeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingMaintenance1FeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingMaintenance1FeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayTracingMaintenance1 && (this.rayTracingMaintenance1 = data.rayTracingMaintenance1), void 0 !== data.rayTracingPipelineTraceRaysIndirect2 && (this.rayTracingPipelineTraceRaysIndirect2 = data.rayTracingPipelineTraceRaysIndirect2);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayTracingMaintenance1() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingMaintenance1(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingPipelineTraceRaysIndirect2() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingPipelineTraceRaysIndirect2(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class DrmFormatModifierPropertiesListEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrmFormatModifierPropertiesListEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrmFormatModifierPropertiesListEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrmFormatModifierPropertiesListEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrmFormatModifierPropertiesListEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (this.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifierProperties && (this.pDrmFormatModifierProperties = data.pDrmFormatModifierProperties);
        this.sType = StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifierProperties() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifierProperties(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DrmFormatModifierPropertiesEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrmFormatModifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrmFormatModifierPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrmFormatModifierPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrmFormatModifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.drmFormatModifier && (this.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (this.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.drmFormatModifierTilingFeatures && (this.drmFormatModifierTilingFeatures = data.drmFormatModifierTilingFeatures);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(0, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(8, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get drmFormatModifierTilingFeatures() {
        return this.#view.getUint32(12, LE);
    }
    set drmFormatModifierTilingFeatures(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class PhysicalDeviceImageDrmFormatModifierInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageDrmFormatModifierInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageDrmFormatModifierInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageDrmFormatModifierInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageDrmFormatModifierInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifier && (this.drmFormatModifier = data.drmFormatModifier), void 0 !== data.sharingMode && (this.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (this.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (this.pQueueFamilyIndices = data.pQueueFamilyIndices);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(24, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(28, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(32, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImageDrmFormatModifierListCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageDrmFormatModifierListCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageDrmFormatModifierListCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageDrmFormatModifierListCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageDrmFormatModifierListCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (this.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifiers && (this.pDrmFormatModifiers = data.pDrmFormatModifiers);
        this.sType = StructureType.IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifiers() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifiers(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ImageDrmFormatModifierExplicitCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageDrmFormatModifierExplicitCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageDrmFormatModifierExplicitCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageDrmFormatModifierExplicitCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageDrmFormatModifierExplicitCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifier && (this.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (this.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.pPlaneLayouts && (this.pPlaneLayouts = data.pPlaneLayouts);
        this.sType = StructureType.IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(24, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPlaneLayouts() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPlaneLayouts(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImageDrmFormatModifierPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageDrmFormatModifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageDrmFormatModifierPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageDrmFormatModifierPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageDrmFormatModifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifier && (this.drmFormatModifier = data.drmFormatModifier);
        this.sType = StructureType.IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class ImageStencilUsageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageStencilUsageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageStencilUsageCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageStencilUsageCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageStencilUsageCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stencilUsage && (this.stencilUsage = data.stencilUsage);
        this.sType = StructureType.IMAGE_STENCIL_USAGE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stencilUsage() {
        return this.#view.getUint32(16, LE);
    }
    set stencilUsage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceMemoryOverallocationCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceMemoryOverallocationCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceMemoryOverallocationCreateInfoAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceMemoryOverallocationCreateInfoAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceMemoryOverallocationCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.overallocationBehavior && (this.overallocationBehavior = data.overallocationBehavior);
        this.sType = StructureType.DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get overallocationBehavior() {
        return this.#view.getUint32(16, LE);
    }
    set overallocationBehavior(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMapFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMapFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMapFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityMap && (this.fragmentDensityMap = data.fragmentDensityMap), void 0 !== data.fragmentDensityMapDynamic && (this.fragmentDensityMapDynamic = data.fragmentDensityMapDynamic), void 0 !== data.fragmentDensityMapNonSubsampledImages && (this.fragmentDensityMapNonSubsampledImages = data.fragmentDensityMapNonSubsampledImages);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityMap() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentDensityMapDynamic() {
        return this.#view.getUint32(20, LE);
    }
    set fragmentDensityMapDynamic(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get fragmentDensityMapNonSubsampledImages() {
        return this.#view.getUint32(24, LE);
    }
    set fragmentDensityMapNonSubsampledImages(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMap2FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMap2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMap2FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMap2FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMap2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityMapDeferred && (this.fragmentDensityMapDeferred = data.fragmentDensityMapDeferred);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityMapDeferred() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMapDeferred(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityMapOffset && (this.fragmentDensityMapOffset = data.fragmentDensityMapOffset);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityMapOffset() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMapOffset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMapPropertiesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMapPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMapPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minFragmentDensityTexelSize && (this.minFragmentDensityTexelSize = data.minFragmentDensityTexelSize), void 0 !== data.maxFragmentDensityTexelSize && (this.maxFragmentDensityTexelSize = data.maxFragmentDensityTexelSize), void 0 !== data.fragmentDensityInvocations && (this.fragmentDensityInvocations = data.fragmentDensityInvocations);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minFragmentDensityTexelSize() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set minFragmentDensityTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxFragmentDensityTexelSize() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set maxFragmentDensityTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get fragmentDensityInvocations() {
        return this.#view.getUint32(32, LE);
    }
    set fragmentDensityInvocations(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMap2PropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMap2PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMap2PropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMap2PropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMap2PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subsampledLoads && (this.subsampledLoads = data.subsampledLoads), void 0 !== data.subsampledCoarseReconstructionEarlyAccess && (this.subsampledCoarseReconstructionEarlyAccess = data.subsampledCoarseReconstructionEarlyAccess), void 0 !== data.maxSubsampledArrayLayers && (this.maxSubsampledArrayLayers = data.maxSubsampledArrayLayers), void 0 !== data.maxDescriptorSetSubsampledSamplers && (this.maxDescriptorSetSubsampledSamplers = data.maxDescriptorSetSubsampledSamplers);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subsampledLoads() {
        return this.#view.getUint32(16, LE);
    }
    set subsampledLoads(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get subsampledCoarseReconstructionEarlyAccess() {
        return this.#view.getUint32(20, LE);
    }
    set subsampledCoarseReconstructionEarlyAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxSubsampledArrayLayers() {
        return this.#view.getUint32(24, LE);
    }
    set maxSubsampledArrayLayers(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxDescriptorSetSubsampledSamplers() {
        return this.#view.getUint32(28, LE);
    }
    set maxDescriptorSetSubsampledSamplers(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityOffsetGranularity && (this.fragmentDensityOffsetGranularity = data.fragmentDensityOffsetGranularity);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityOffsetGranularity() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set fragmentDensityOffsetGranularity(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class RenderPassFragmentDensityMapCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassFragmentDensityMapCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassFragmentDensityMapCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassFragmentDensityMapCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassFragmentDensityMapCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityMapAttachment && (this.fragmentDensityMapAttachment = data.fragmentDensityMapAttachment);
        this.sType = StructureType.RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityMapAttachment() {
        return new AttachmentReference(this.#data.subarray(16, 16 + AttachmentReference.size));
    }
    set fragmentDensityMapAttachment(value) {
        if (value[BUFFER].byteLength < AttachmentReference.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SubpassFragmentDensityMapOffsetEndInfoQCOM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassFragmentDensityMapOffsetEndInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassFragmentDensityMapOffsetEndInfoQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassFragmentDensityMapOffsetEndInfoQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassFragmentDensityMapOffsetEndInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentDensityOffsetCount && (this.fragmentDensityOffsetCount = data.fragmentDensityOffsetCount), void 0 !== data.pFragmentDensityOffsets && (this.pFragmentDensityOffsets = data.pFragmentDensityOffsets);
        this.sType = StructureType.SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentDensityOffsetCount() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityOffsetCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pFragmentDensityOffsets() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFragmentDensityOffsets(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceScalarBlockLayoutFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceScalarBlockLayoutFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceScalarBlockLayoutFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceScalarBlockLayoutFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceScalarBlockLayoutFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.scalarBlockLayout && (this.scalarBlockLayout = data.scalarBlockLayout);
        this.sType = StructureType.PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get scalarBlockLayout() {
        return this.#view.getUint32(16, LE);
    }
    set scalarBlockLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SurfaceProtectedCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceProtectedCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceProtectedCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceProtectedCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceProtectedCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supportsProtected && (this.supportsProtected = data.supportsProtected);
        this.sType = StructureType.SURFACE_PROTECTED_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supportsProtected() {
        return this.#view.getUint32(16, LE);
    }
    set supportsProtected(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceUniformBufferStandardLayoutFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceUniformBufferStandardLayoutFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceUniformBufferStandardLayoutFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceUniformBufferStandardLayoutFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceUniformBufferStandardLayoutFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.uniformBufferStandardLayout && (this.uniformBufferStandardLayout = data.uniformBufferStandardLayout);
        this.sType = StructureType.PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get uniformBufferStandardLayout() {
        return this.#view.getUint32(16, LE);
    }
    set uniformBufferStandardLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceDepthClipEnableFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDepthClipEnableFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDepthClipEnableFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDepthClipEnableFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDepthClipEnableFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.depthClipEnable && (this.depthClipEnable = data.depthClipEnable);
        this.sType = StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get depthClipEnable() {
        return this.#view.getUint32(16, LE);
    }
    set depthClipEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineRasterizationDepthClipStateCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationDepthClipStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationDepthClipStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationDepthClipStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationDepthClipStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.depthClipEnable && (this.depthClipEnable = data.depthClipEnable);
        this.sType = StructureType.PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthClipEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthClipEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceMemoryBudgetPropertiesEXT {
    static size = 272;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryBudgetPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryBudgetPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryBudgetPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryBudgetPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.heapBudget && (this.heapBudget = data.heapBudget), void 0 !== data.heapUsage && (this.heapUsage = data.heapUsage);
        this.sType = StructureType.PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get heapBudget() {
        return new BigUint64Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set heapBudget(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get heapUsage() {
        return new BigUint64Array(this.#data.buffer, this.#data.byteOffset + 144, 16);
    }
    set heapUsage(value) {
        this.#data.set(new Uint8Array(value.buffer), 144);
    }
}
export class PhysicalDeviceMemoryPriorityFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMemoryPriorityFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMemoryPriorityFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMemoryPriorityFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMemoryPriorityFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryPriority && (this.memoryPriority = data.memoryPriority);
        this.sType = StructureType.PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryPriority() {
        return this.#view.getUint32(16, LE);
    }
    set memoryPriority(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryPriorityAllocateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryPriorityAllocateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryPriorityAllocateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryPriorityAllocateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryPriorityAllocateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.priority && (this.priority = data.priority);
        this.sType = StructureType.MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get priority() {
        return this.#view.getFloat32(16, LE);
    }
    set priority(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
}
export class PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pageableDeviceLocalMemory && (this.pageableDeviceLocalMemory = data.pageableDeviceLocalMemory);
        this.sType = StructureType.PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pageableDeviceLocalMemory() {
        return this.#view.getUint32(16, LE);
    }
    set pageableDeviceLocalMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceBufferDeviceAddressFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceBufferDeviceAddressFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceBufferDeviceAddressFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceBufferDeviceAddressFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceBufferDeviceAddressFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.bufferDeviceAddress && (this.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (this.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (this.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice);
        this.sType = StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(16, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(24, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceBufferDeviceAddressFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceBufferDeviceAddressFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceBufferDeviceAddressFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceBufferDeviceAddressFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceBufferDeviceAddressFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.bufferDeviceAddress && (this.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (this.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (this.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice);
        this.sType = StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(16, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(24, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class BufferDeviceAddressInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferDeviceAddressInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferDeviceAddressInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferDeviceAddressInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferDeviceAddressInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.BUFFER_DEVICE_ADDRESS_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class BufferOpaqueCaptureAddressCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferOpaqueCaptureAddressCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferOpaqueCaptureAddressCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferOpaqueCaptureAddressCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferOpaqueCaptureAddressCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.opaqueCaptureAddress && (this.opaqueCaptureAddress = data.opaqueCaptureAddress);
        this.sType = StructureType.BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get opaqueCaptureAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class BufferDeviceAddressCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferDeviceAddressCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferDeviceAddressCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferDeviceAddressCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferDeviceAddressCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceAddress && (this.deviceAddress = data.deviceAddress);
        this.sType = StructureType.BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class PhysicalDeviceImageViewImageFormatInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageViewImageFormatInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageViewImageFormatInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageViewImageFormatInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageViewImageFormatInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageViewType && (this.imageViewType = data.imageViewType);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageViewType() {
        return this.#view.getUint32(16, LE);
    }
    set imageViewType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class FilterCubicImageViewImageFormatPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FilterCubicImageViewImageFormatPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FilterCubicImageViewImageFormatPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FilterCubicImageViewImageFormatPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FilterCubicImageViewImageFormatPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.filterCubic && (this.filterCubic = data.filterCubic), void 0 !== data.filterCubicMinmax && (this.filterCubicMinmax = data.filterCubicMinmax);
        this.sType = StructureType.FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get filterCubic() {
        return this.#view.getUint32(16, LE);
    }
    set filterCubic(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get filterCubicMinmax() {
        return this.#view.getUint32(20, LE);
    }
    set filterCubicMinmax(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceImagelessFramebufferFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImagelessFramebufferFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImagelessFramebufferFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImagelessFramebufferFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImagelessFramebufferFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imagelessFramebuffer && (this.imagelessFramebuffer = data.imagelessFramebuffer);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imagelessFramebuffer() {
        return this.#view.getUint32(16, LE);
    }
    set imagelessFramebuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class FramebufferAttachmentsCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FramebufferAttachmentsCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FramebufferAttachmentsCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FramebufferAttachmentsCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FramebufferAttachmentsCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachmentImageInfoCount && (this.attachmentImageInfoCount = data.attachmentImageInfoCount), void 0 !== data.pAttachmentImageInfos && (this.pAttachmentImageInfos = data.pAttachmentImageInfos);
        this.sType = StructureType.FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachmentImageInfoCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentImageInfoCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachmentImageInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachmentImageInfos(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class FramebufferAttachmentImageInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FramebufferAttachmentImageInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FramebufferAttachmentImageInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FramebufferAttachmentImageInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FramebufferAttachmentImageInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.usage && (this.usage = data.usage), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.layerCount && (this.layerCount = data.layerCount), void 0 !== data.viewFormatCount && (this.viewFormatCount = data.viewFormatCount), void 0 !== data.pViewFormats && (this.pViewFormats = data.pViewFormats);
        this.sType = StructureType.FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(20, LE);
    }
    set usage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get width() {
        return this.#view.getUint32(24, LE);
    }
    set width(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(28, LE);
    }
    set height(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(32, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get viewFormatCount() {
        return this.#view.getUint32(36, LE);
    }
    set viewFormatCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pViewFormats() {
        return this.#view.getBigUint64(40, LE);
    }
    set pViewFormats(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class RenderPassAttachmentBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassAttachmentBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassAttachmentBeginInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassAttachmentBeginInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassAttachmentBeginInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (this.pAttachments = data.pAttachments);
        this.sType = StructureType.RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceTextureCompressionASTCHDRFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTextureCompressionASTCHDRFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTextureCompressionASTCHDRFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTextureCompressionASTCHDRFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTextureCompressionASTCHDRFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.textureCompressionASTC_HDR && (this.textureCompressionASTC_HDR = data.textureCompressionASTC_HDR);
        this.sType = StructureType.PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get textureCompressionASTC_HDR() {
        return this.#view.getUint32(16, LE);
    }
    set textureCompressionASTC_HDR(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCooperativeMatrixFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCooperativeMatrixFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCooperativeMatrixFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCooperativeMatrixFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCooperativeMatrixFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.cooperativeMatrix && (this.cooperativeMatrix = data.cooperativeMatrix), void 0 !== data.cooperativeMatrixRobustBufferAccess && (this.cooperativeMatrixRobustBufferAccess = data.cooperativeMatrixRobustBufferAccess);
        this.sType = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get cooperativeMatrix() {
        return this.#view.getUint32(16, LE);
    }
    set cooperativeMatrix(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get cooperativeMatrixRobustBufferAccess() {
        return this.#view.getUint32(20, LE);
    }
    set cooperativeMatrixRobustBufferAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceCooperativeMatrixPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCooperativeMatrixPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCooperativeMatrixPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCooperativeMatrixPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCooperativeMatrixPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.cooperativeMatrixSupportedStages && (this.cooperativeMatrixSupportedStages = data.cooperativeMatrixSupportedStages);
        this.sType = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get cooperativeMatrixSupportedStages() {
        return this.#view.getUint32(16, LE);
    }
    set cooperativeMatrixSupportedStages(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CooperativeMatrixPropertiesNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CooperativeMatrixPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CooperativeMatrixPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CooperativeMatrixPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CooperativeMatrixPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.MSize && (this.MSize = data.MSize), void 0 !== data.NSize && (this.NSize = data.NSize), void 0 !== data.KSize && (this.KSize = data.KSize), void 0 !== data.AType && (this.AType = data.AType), void 0 !== data.BType && (this.BType = data.BType), void 0 !== data.CType && (this.CType = data.CType), void 0 !== data.DType && (this.DType = data.DType), void 0 !== data.scope && (this.scope = data.scope);
        this.sType = StructureType.COOPERATIVE_MATRIX_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get MSize() {
        return this.#view.getUint32(16, LE);
    }
    set MSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get NSize() {
        return this.#view.getUint32(20, LE);
    }
    set NSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get KSize() {
        return this.#view.getUint32(24, LE);
    }
    set KSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get AType() {
        return this.#view.getUint32(28, LE);
    }
    set AType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get BType() {
        return this.#view.getUint32(32, LE);
    }
    set BType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get CType() {
        return this.#view.getUint32(36, LE);
    }
    set CType(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get DType() {
        return this.#view.getUint32(40, LE);
    }
    set DType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get scope() {
        return this.#view.getUint32(44, LE);
    }
    set scope(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class PhysicalDeviceYcbcrImageArraysFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceYcbcrImageArraysFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceYcbcrImageArraysFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceYcbcrImageArraysFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceYcbcrImageArraysFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.ycbcrImageArrays && (this.ycbcrImageArrays = data.ycbcrImageArrays);
        this.sType = StructureType.PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get ycbcrImageArrays() {
        return this.#view.getUint32(16, LE);
    }
    set ycbcrImageArrays(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImageViewHandleInfoNVX {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewHandleInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewHandleInfoNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewHandleInfoNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewHandleInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.descriptorType && (this.descriptorType = data.descriptorType), void 0 !== data.sampler && (this.sampler = data.sampler);
        this.sType = StructureType.IMAGE_VIEW_HANDLE_INFO_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sampler() {
        return this.#view.getBigUint64(32, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImageViewAddressPropertiesNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewAddressPropertiesNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewAddressPropertiesNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewAddressPropertiesNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewAddressPropertiesNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceAddress && (this.deviceAddress = data.deviceAddress), void 0 !== data.size && (this.size = data.size);
        this.sType = StructureType.IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(24, LE);
    }
    set size(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PresentFrameTokenGGP {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PresentFrameTokenGGP.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PresentFrameTokenGGP.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PresentFrameTokenGGP.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PresentFrameTokenGGP.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.frameToken && (this.frameToken = data.frameToken);
        this.sType = StructureType.PRESENT_FRAME_TOKEN_GGP;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get frameToken() {
        return this.#view.getBigUint64(16, LE);
    }
    set frameToken(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class PipelineCreationFeedback {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCreationFeedback.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCreationFeedback.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCreationFeedback.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCreationFeedback.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.duration && (this.duration = data.duration);
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get duration() {
        return this.#view.getBigUint64(8, LE);
    }
    set duration(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class PipelineCreationFeedbackCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCreationFeedbackCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCreationFeedbackCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCreationFeedbackCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCreationFeedbackCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pPipelineCreationFeedback && (this.pPipelineCreationFeedback = data.pPipelineCreationFeedback), void 0 !== data.pipelineStageCreationFeedbackCount && (this.pipelineStageCreationFeedbackCount = data.pipelineStageCreationFeedbackCount), void 0 !== data.pPipelineStageCreationFeedbacks && (this.pPipelineStageCreationFeedbacks = data.pPipelineStageCreationFeedbacks);
        this.sType = StructureType.PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pPipelineCreationFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pPipelineCreationFeedback(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get pipelineStageCreationFeedbackCount() {
        return this.#view.getUint32(24, LE);
    }
    set pipelineStageCreationFeedbackCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPipelineStageCreationFeedbacks() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPipelineStageCreationFeedbacks(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class SurfaceFullScreenExclusiveInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceFullScreenExclusiveInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceFullScreenExclusiveInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceFullScreenExclusiveInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceFullScreenExclusiveInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fullScreenExclusive && (this.fullScreenExclusive = data.fullScreenExclusive);
        this.sType = StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fullScreenExclusive() {
        return this.#view.getUint32(16, LE);
    }
    set fullScreenExclusive(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SurfaceFullScreenExclusiveWin32InfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceFullScreenExclusiveWin32InfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceFullScreenExclusiveWin32InfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceFullScreenExclusiveWin32InfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceFullScreenExclusiveWin32InfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.hmonitor && (this.hmonitor = data.hmonitor);
        this.sType = StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get hmonitor() {
        return this.#view.getBigUint64(16, LE);
    }
    set hmonitor(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SurfaceCapabilitiesFullScreenExclusiveEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceCapabilitiesFullScreenExclusiveEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceCapabilitiesFullScreenExclusiveEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceCapabilitiesFullScreenExclusiveEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceCapabilitiesFullScreenExclusiveEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fullScreenExclusiveSupported && (this.fullScreenExclusiveSupported = data.fullScreenExclusiveSupported);
        this.sType = StructureType.SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fullScreenExclusiveSupported() {
        return this.#view.getUint32(16, LE);
    }
    set fullScreenExclusiveSupported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePresentBarrierFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePresentBarrierFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePresentBarrierFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePresentBarrierFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePresentBarrierFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentBarrier && (this.presentBarrier = data.presentBarrier);
        this.sType = StructureType.PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentBarrier() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SurfaceCapabilitiesPresentBarrierNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SurfaceCapabilitiesPresentBarrierNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SurfaceCapabilitiesPresentBarrierNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SurfaceCapabilitiesPresentBarrierNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SurfaceCapabilitiesPresentBarrierNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentBarrierSupported && (this.presentBarrierSupported = data.presentBarrierSupported);
        this.sType = StructureType.SURFACE_CAPABILITIES_PRESENT_BARRIER_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentBarrierSupported() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrierSupported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SwapchainPresentBarrierCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SwapchainPresentBarrierCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SwapchainPresentBarrierCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SwapchainPresentBarrierCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SwapchainPresentBarrierCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.presentBarrierEnable && (this.presentBarrierEnable = data.presentBarrierEnable);
        this.sType = StructureType.SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get presentBarrierEnable() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrierEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePerformanceQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePerformanceQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePerformanceQueryFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePerformanceQueryFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePerformanceQueryFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.performanceCounterQueryPools && (this.performanceCounterQueryPools = data.performanceCounterQueryPools), void 0 !== data.performanceCounterMultipleQueryPools && (this.performanceCounterMultipleQueryPools = data.performanceCounterMultipleQueryPools);
        this.sType = StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get performanceCounterQueryPools() {
        return this.#view.getUint32(16, LE);
    }
    set performanceCounterQueryPools(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get performanceCounterMultipleQueryPools() {
        return this.#view.getUint32(20, LE);
    }
    set performanceCounterMultipleQueryPools(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDevicePerformanceQueryPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePerformanceQueryPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePerformanceQueryPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePerformanceQueryPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePerformanceQueryPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.allowCommandBufferQueryCopies && (this.allowCommandBufferQueryCopies = data.allowCommandBufferQueryCopies);
        this.sType = StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get allowCommandBufferQueryCopies() {
        return this.#view.getUint32(16, LE);
    }
    set allowCommandBufferQueryCopies(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PerformanceCounterKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceCounterKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceCounterKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceCounterKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceCounterKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.unit && (this.unit = data.unit), void 0 !== data.scope && (this.scope = data.scope), void 0 !== data.storage && (this.storage = data.storage), void 0 !== data.uuid && (this.uuid = data.uuid);
        this.sType = StructureType.PERFORMANCE_COUNTER_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get unit() {
        return this.#view.getUint32(16, LE);
    }
    set unit(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get scope() {
        return this.#view.getUint32(20, LE);
    }
    set scope(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storage() {
        return this.#view.getUint32(24, LE);
    }
    set storage(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uuid() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 28, 16);
    }
    set uuid(value) {
        this.#data.set(new Uint8Array(value.buffer), 28);
    }
}
export class PerformanceCounterDescriptionKHR {
    static size = 792;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceCounterDescriptionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceCounterDescriptionKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceCounterDescriptionKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceCounterDescriptionKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.name && (this.name = data.name), void 0 !== data.category && (this.category = data.category), void 0 !== data.description && (this.description = data.description);
        this.sType = StructureType.PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get name() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 256);
    }
    set name(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get category() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 276, 256);
    }
    set category(value) {
        this.#data.set(new Uint8Array(value.buffer), 276);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 532, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 532);
    }
}
export class QueryPoolPerformanceCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueryPoolPerformanceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueryPoolPerformanceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueryPoolPerformanceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueryPoolPerformanceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.queueFamilyIndex && (this.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.counterIndexCount && (this.counterIndexCount = data.counterIndexCount), void 0 !== data.pCounterIndices && (this.pCounterIndices = data.pCounterIndices);
        this.sType = StructureType.QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(16, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get counterIndexCount() {
        return this.#view.getUint32(20, LE);
    }
    set counterIndexCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pCounterIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCounterIndices(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class AcquireProfilingLockInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AcquireProfilingLockInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AcquireProfilingLockInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AcquireProfilingLockInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AcquireProfilingLockInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.timeout && (this.timeout = data.timeout);
        this.sType = StructureType.ACQUIRE_PROFILING_LOCK_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get timeout() {
        return this.#view.getBigUint64(24, LE);
    }
    set timeout(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PerformanceQuerySubmitInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceQuerySubmitInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceQuerySubmitInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceQuerySubmitInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceQuerySubmitInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.counterPassIndex && (this.counterPassIndex = data.counterPassIndex);
        this.sType = StructureType.PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get counterPassIndex() {
        return this.#view.getUint32(16, LE);
    }
    set counterPassIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class HeadlessSurfaceCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(HeadlessSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, HeadlessSurfaceCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < HeadlessSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(HeadlessSurfaceCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.HEADLESS_SURFACE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCoverageReductionModeFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCoverageReductionModeFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCoverageReductionModeFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCoverageReductionModeFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCoverageReductionModeFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.coverageReductionMode && (this.coverageReductionMode = data.coverageReductionMode);
        this.sType = StructureType.PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineCoverageReductionStateCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCoverageReductionStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCoverageReductionStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCoverageReductionStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCoverageReductionStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.coverageReductionMode && (this.coverageReductionMode = data.coverageReductionMode);
        this.sType = StructureType.PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(20, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class FramebufferMixedSamplesCombinationNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FramebufferMixedSamplesCombinationNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FramebufferMixedSamplesCombinationNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FramebufferMixedSamplesCombinationNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FramebufferMixedSamplesCombinationNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.coverageReductionMode && (this.coverageReductionMode = data.coverageReductionMode), void 0 !== data.rasterizationSamples && (this.rasterizationSamples = data.rasterizationSamples), void 0 !== data.depthStencilSamples && (this.depthStencilSamples = data.depthStencilSamples), void 0 !== data.colorSamples && (this.colorSamples = data.colorSamples);
        this.sType = StructureType.FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get depthStencilSamples() {
        return this.#view.getUint32(24, LE);
    }
    set depthStencilSamples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get colorSamples() {
        return this.#view.getUint32(28, LE);
    }
    set colorSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderIntegerFunctions2 && (this.shaderIntegerFunctions2 = data.shaderIntegerFunctions2);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderIntegerFunctions2() {
        return this.#view.getUint32(16, LE);
    }
    set shaderIntegerFunctions2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PerformanceValueINTEL {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceValueINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceValueINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceValueINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceValueINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.type && (this.type = data.type), void 0 !== data.data && (this.data = data.data);
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u32","u64","f32","u32","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u32","u64","f32","u32","buffer"]}');
    }
}
export class InitializePerformanceApiInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(InitializePerformanceApiInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, InitializePerformanceApiInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < InitializePerformanceApiInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(InitializePerformanceApiInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pUserData && (this.pUserData = data.pUserData);
        this.sType = StructureType.INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pUserData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class QueryPoolPerformanceQueryCreateInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueryPoolPerformanceQueryCreateInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueryPoolPerformanceQueryCreateInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueryPoolPerformanceQueryCreateInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueryPoolPerformanceQueryCreateInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.performanceCountersSampling && (this.performanceCountersSampling = data.performanceCountersSampling);
        this.sType = StructureType.QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get performanceCountersSampling() {
        return this.#view.getUint32(16, LE);
    }
    set performanceCountersSampling(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PerformanceMarkerInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceMarkerInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceMarkerInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceMarkerInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceMarkerInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.marker && (this.marker = data.marker);
        this.sType = StructureType.PERFORMANCE_MARKER_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get marker() {
        return this.#view.getBigUint64(16, LE);
    }
    set marker(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class PerformanceStreamMarkerInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceStreamMarkerInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceStreamMarkerInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceStreamMarkerInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceStreamMarkerInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.marker && (this.marker = data.marker);
        this.sType = StructureType.PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get marker() {
        return this.#view.getUint32(16, LE);
    }
    set marker(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PerformanceOverrideInfoINTEL {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceOverrideInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceOverrideInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceOverrideInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceOverrideInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.enable && (this.enable = data.enable), void 0 !== data.parameter && (this.parameter = data.parameter);
        this.sType = StructureType.PERFORMANCE_OVERRIDE_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get enable() {
        return this.#view.getUint32(20, LE);
    }
    set enable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get parameter() {
        return this.#view.getBigUint64(24, LE);
    }
    set parameter(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PerformanceConfigurationAcquireInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PerformanceConfigurationAcquireInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PerformanceConfigurationAcquireInfoINTEL.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PerformanceConfigurationAcquireInfoINTEL.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PerformanceConfigurationAcquireInfoINTEL.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type);
        this.sType = StructureType.PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderClockFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderClockFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderClockFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderClockFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderClockFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderSubgroupClock && (this.shaderSubgroupClock = data.shaderSubgroupClock), void 0 !== data.shaderDeviceClock && (this.shaderDeviceClock = data.shaderDeviceClock);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderSubgroupClock() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupClock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderDeviceClock() {
        return this.#view.getUint32(20, LE);
    }
    set shaderDeviceClock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceIndexTypeUint8FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceIndexTypeUint8FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceIndexTypeUint8FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceIndexTypeUint8FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceIndexTypeUint8FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.indexTypeUint8 && (this.indexTypeUint8 = data.indexTypeUint8);
        this.sType = StructureType.PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get indexTypeUint8() {
        return this.#view.getUint32(16, LE);
    }
    set indexTypeUint8(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderSMBuiltinsPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderSMBuiltinsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderSMBuiltinsPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderSMBuiltinsPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderSMBuiltinsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderSMCount && (this.shaderSMCount = data.shaderSMCount), void 0 !== data.shaderWarpsPerSM && (this.shaderWarpsPerSM = data.shaderWarpsPerSM);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderSMCount() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSMCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderWarpsPerSM() {
        return this.#view.getUint32(20, LE);
    }
    set shaderWarpsPerSM(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceShaderSMBuiltinsFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderSMBuiltinsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderSMBuiltinsFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderSMBuiltinsFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderSMBuiltinsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderSMBuiltins && (this.shaderSMBuiltins = data.shaderSMBuiltins);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderSMBuiltins() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSMBuiltins(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShaderInterlockFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShaderInterlockFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShaderInterlockFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShaderInterlockFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentShaderSampleInterlock && (this.fragmentShaderSampleInterlock = data.fragmentShaderSampleInterlock), void 0 !== data.fragmentShaderPixelInterlock && (this.fragmentShaderPixelInterlock = data.fragmentShaderPixelInterlock), void 0 !== data.fragmentShaderShadingRateInterlock && (this.fragmentShaderShadingRateInterlock = data.fragmentShaderShadingRateInterlock);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentShaderSampleInterlock() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShaderSampleInterlock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentShaderPixelInterlock() {
        return this.#view.getUint32(20, LE);
    }
    set fragmentShaderPixelInterlock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get fragmentShaderShadingRateInterlock() {
        return this.#view.getUint32(24, LE);
    }
    set fragmentShaderShadingRateInterlock(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSeparateDepthStencilLayoutsFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSeparateDepthStencilLayoutsFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSeparateDepthStencilLayoutsFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSeparateDepthStencilLayoutsFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.separateDepthStencilLayouts && (this.separateDepthStencilLayouts = data.separateDepthStencilLayouts);
        this.sType = StructureType.PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get separateDepthStencilLayouts() {
        return this.#view.getUint32(16, LE);
    }
    set separateDepthStencilLayouts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class AttachmentReferenceStencilLayout {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentReferenceStencilLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentReferenceStencilLayout.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentReferenceStencilLayout.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentReferenceStencilLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stencilLayout && (this.stencilLayout = data.stencilLayout);
        this.sType = StructureType.ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stencilLayout() {
        return this.#view.getUint32(16, LE);
    }
    set stencilLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.primitiveTopologyListRestart && (this.primitiveTopologyListRestart = data.primitiveTopologyListRestart), void 0 !== data.primitiveTopologyPatchListRestart && (this.primitiveTopologyPatchListRestart = data.primitiveTopologyPatchListRestart);
        this.sType = StructureType.PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get primitiveTopologyListRestart() {
        return this.#view.getUint32(16, LE);
    }
    set primitiveTopologyListRestart(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitiveTopologyPatchListRestart() {
        return this.#view.getUint32(20, LE);
    }
    set primitiveTopologyPatchListRestart(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class AttachmentDescriptionStencilLayout {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentDescriptionStencilLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentDescriptionStencilLayout.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentDescriptionStencilLayout.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentDescriptionStencilLayout.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stencilInitialLayout && (this.stencilInitialLayout = data.stencilInitialLayout), void 0 !== data.stencilFinalLayout && (this.stencilFinalLayout = data.stencilFinalLayout);
        this.sType = StructureType.ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stencilInitialLayout() {
        return this.#view.getUint32(16, LE);
    }
    set stencilInitialLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilFinalLayout() {
        return this.#view.getUint32(20, LE);
    }
    set stencilFinalLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineExecutableInfo && (this.pipelineExecutableInfo = data.pipelineExecutableInfo);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineExecutableInfo() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineExecutableInfo(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipeline && (this.pipeline = data.pipeline);
        this.sType = StructureType.PIPELINE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(16, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PipelineExecutablePropertiesKHR {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineExecutablePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineExecutablePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineExecutablePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineExecutablePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stages && (this.stages = data.stages), void 0 !== data.name && (this.name = data.name), void 0 !== data.description && (this.description = data.description), void 0 !== data.subgroupSize && (this.subgroupSize = data.subgroupSize);
        this.sType = StructureType.PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stages() {
        return this.#view.getUint32(16, LE);
    }
    set stages(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get name() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 256);
    }
    set name(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 276, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 276);
    }
    get subgroupSize() {
        return this.#view.getUint32(532, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(532, Number(value), LE);
    }
}
export class PipelineExecutableInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineExecutableInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineExecutableInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineExecutableInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineExecutableInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipeline && (this.pipeline = data.pipeline), void 0 !== data.executableIndex && (this.executableIndex = data.executableIndex);
        this.sType = StructureType.PIPELINE_EXECUTABLE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(16, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get executableIndex() {
        return this.#view.getUint32(24, LE);
    }
    set executableIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PipelineExecutableStatisticKHR {
    static size = 544;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineExecutableStatisticKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineExecutableStatisticKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineExecutableStatisticKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineExecutableStatisticKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.name && (this.name = data.name), void 0 !== data.description && (this.description = data.description), void 0 !== data.format && (this.format = data.format), void 0 !== data.value && (this.value = data.value);
        this.sType = StructureType.PIPELINE_EXECUTABLE_STATISTIC_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 256);
    }
    set name(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 272, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 272);
    }
    get format() {
        return this.#view.getUint32(528, LE);
    }
    set format(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get value() {
        throw new Error('Unknown type: {"union":["u32","i64","u64","f64"]}');
    }
    set value(value) {
        throw new Error('Unknown type: {"union":["u32","i64","u64","f64"]}');
    }
}
export class PipelineExecutableInternalRepresentationKHR {
    static size = 552;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineExecutableInternalRepresentationKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineExecutableInternalRepresentationKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineExecutableInternalRepresentationKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineExecutableInternalRepresentationKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.name && (this.name = data.name), void 0 !== data.description && (this.description = data.description), void 0 !== data.isText && (this.isText = data.isText), void 0 !== data.dataSize && (this.dataSize = data.dataSize), void 0 !== data.pData && (this.pData = data.pData);
        this.sType = StructureType.PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 256);
    }
    set name(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 272, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 272);
    }
    get isText() {
        return this.#view.getUint32(528, LE);
    }
    set isText(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(536, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(536, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(544, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(544, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderDemoteToHelperInvocationFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderDemoteToHelperInvocationFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderDemoteToHelperInvocationFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderDemoteToHelperInvocationFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderDemoteToHelperInvocation && (this.shaderDemoteToHelperInvocation = data.shaderDemoteToHelperInvocation);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderDemoteToHelperInvocation() {
        return this.#view.getUint32(16, LE);
    }
    set shaderDemoteToHelperInvocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTexelBufferAlignmentFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTexelBufferAlignmentFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTexelBufferAlignmentFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTexelBufferAlignmentFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.texelBufferAlignment && (this.texelBufferAlignment = data.texelBufferAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get texelBufferAlignment() {
        return this.#view.getUint32(16, LE);
    }
    set texelBufferAlignment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceTexelBufferAlignmentProperties {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTexelBufferAlignmentProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTexelBufferAlignmentProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTexelBufferAlignmentProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTexelBufferAlignmentProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.storageTexelBufferOffsetAlignmentBytes && (this.storageTexelBufferOffsetAlignmentBytes = data.storageTexelBufferOffsetAlignmentBytes), void 0 !== data.storageTexelBufferOffsetSingleTexelAlignment && (this.storageTexelBufferOffsetSingleTexelAlignment = data.storageTexelBufferOffsetSingleTexelAlignment), void 0 !== data.uniformTexelBufferOffsetAlignmentBytes && (this.uniformTexelBufferOffsetAlignmentBytes = data.uniformTexelBufferOffsetAlignmentBytes), void 0 !== data.uniformTexelBufferOffsetSingleTexelAlignment && (this.uniformTexelBufferOffsetSingleTexelAlignment = data.uniformTexelBufferOffsetSingleTexelAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get storageTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(16, LE);
    }
    set storageTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get storageTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(24, LE);
    }
    set storageTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uniformTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(32, LE);
    }
    set uniformTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get uniformTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set uniformTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class PhysicalDeviceSubgroupSizeControlFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubgroupSizeControlFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubgroupSizeControlFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubgroupSizeControlFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubgroupSizeControlFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subgroupSizeControl && (this.subgroupSizeControl = data.subgroupSizeControl), void 0 !== data.computeFullSubgroups && (this.computeFullSubgroups = data.computeFullSubgroups);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subgroupSizeControl() {
        return this.#view.getUint32(16, LE);
    }
    set subgroupSizeControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get computeFullSubgroups() {
        return this.#view.getUint32(20, LE);
    }
    set computeFullSubgroups(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceSubgroupSizeControlProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubgroupSizeControlProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubgroupSizeControlProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubgroupSizeControlProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubgroupSizeControlProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minSubgroupSize && (this.minSubgroupSize = data.minSubgroupSize), void 0 !== data.maxSubgroupSize && (this.maxSubgroupSize = data.maxSubgroupSize), void 0 !== data.maxComputeWorkgroupSubgroups && (this.maxComputeWorkgroupSubgroups = data.maxComputeWorkgroupSubgroups), void 0 !== data.requiredSubgroupSizeStages && (this.requiredSubgroupSizeStages = data.requiredSubgroupSizeStages);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set minSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSubgroupSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxSubgroupSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxComputeWorkgroupSubgroups() {
        return this.#view.getUint32(24, LE);
    }
    set maxComputeWorkgroupSubgroups(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get requiredSubgroupSizeStages() {
        return this.#view.getUint32(28, LE);
    }
    set requiredSubgroupSizeStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PipelineShaderStageRequiredSubgroupSizeCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineShaderStageRequiredSubgroupSizeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineShaderStageRequiredSubgroupSizeCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineShaderStageRequiredSubgroupSizeCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineShaderStageRequiredSubgroupSizeCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.requiredSubgroupSize && (this.requiredSubgroupSize = data.requiredSubgroupSize);
        this.sType = StructureType.PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get requiredSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set requiredSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SubpassShadingPipelineCreateInfoHUAWEI {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassShadingPipelineCreateInfoHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassShadingPipelineCreateInfoHUAWEI.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassShadingPipelineCreateInfoHUAWEI.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassShadingPipelineCreateInfoHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.renderPass && (this.renderPass = data.renderPass), void 0 !== data.subpass && (this.subpass = data.subpass);
        this.sType = StructureType.SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get subpass() {
        return this.#view.getUint32(24, LE);
    }
    set subpass(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceSubpassShadingPropertiesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubpassShadingPropertiesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubpassShadingPropertiesHUAWEI.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubpassShadingPropertiesHUAWEI.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubpassShadingPropertiesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxSubpassShadingWorkgroupSizeAspectRatio && (this.maxSubpassShadingWorkgroupSizeAspectRatio = data.maxSubpassShadingWorkgroupSizeAspectRatio);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxSubpassShadingWorkgroupSizeAspectRatio() {
        return this.#view.getUint32(16, LE);
    }
    set maxSubpassShadingWorkgroupSizeAspectRatio(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MemoryOpaqueCaptureAddressAllocateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryOpaqueCaptureAddressAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryOpaqueCaptureAddressAllocateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryOpaqueCaptureAddressAllocateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryOpaqueCaptureAddressAllocateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.opaqueCaptureAddress && (this.opaqueCaptureAddress = data.opaqueCaptureAddress);
        this.sType = StructureType.MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get opaqueCaptureAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class DeviceMemoryOpaqueCaptureAddressInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceMemoryOpaqueCaptureAddressInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceMemoryOpaqueCaptureAddressInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceMemoryOpaqueCaptureAddressInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceMemoryOpaqueCaptureAddressInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory);
        this.sType = StructureType.DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceLineRasterizationFeaturesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceLineRasterizationFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceLineRasterizationFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceLineRasterizationFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceLineRasterizationFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rectangularLines && (this.rectangularLines = data.rectangularLines), void 0 !== data.bresenhamLines && (this.bresenhamLines = data.bresenhamLines), void 0 !== data.smoothLines && (this.smoothLines = data.smoothLines), void 0 !== data.stippledRectangularLines && (this.stippledRectangularLines = data.stippledRectangularLines), void 0 !== data.stippledBresenhamLines && (this.stippledBresenhamLines = data.stippledBresenhamLines), void 0 !== data.stippledSmoothLines && (this.stippledSmoothLines = data.stippledSmoothLines);
        this.sType = StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rectangularLines() {
        return this.#view.getUint32(16, LE);
    }
    set rectangularLines(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bresenhamLines() {
        return this.#view.getUint32(20, LE);
    }
    set bresenhamLines(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get smoothLines() {
        return this.#view.getUint32(24, LE);
    }
    set smoothLines(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get stippledRectangularLines() {
        return this.#view.getUint32(28, LE);
    }
    set stippledRectangularLines(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get stippledBresenhamLines() {
        return this.#view.getUint32(32, LE);
    }
    set stippledBresenhamLines(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stippledSmoothLines() {
        return this.#view.getUint32(36, LE);
    }
    set stippledSmoothLines(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class PhysicalDeviceLineRasterizationPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceLineRasterizationPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceLineRasterizationPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceLineRasterizationPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceLineRasterizationPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.lineSubPixelPrecisionBits && (this.lineSubPixelPrecisionBits = data.lineSubPixelPrecisionBits);
        this.sType = StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get lineSubPixelPrecisionBits() {
        return this.#view.getUint32(16, LE);
    }
    set lineSubPixelPrecisionBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineRasterizationLineStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationLineStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationLineStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationLineStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationLineStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.lineRasterizationMode && (this.lineRasterizationMode = data.lineRasterizationMode), void 0 !== data.stippledLineEnable && (this.stippledLineEnable = data.stippledLineEnable), void 0 !== data.lineStippleFactor && (this.lineStippleFactor = data.lineStippleFactor), void 0 !== data.lineStipplePattern && (this.lineStipplePattern = data.lineStipplePattern);
        this.sType = StructureType.PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get lineRasterizationMode() {
        return this.#view.getUint32(16, LE);
    }
    set lineRasterizationMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stippledLineEnable() {
        return this.#view.getUint32(20, LE);
    }
    set stippledLineEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get lineStippleFactor() {
        return this.#view.getUint32(24, LE);
    }
    set lineStippleFactor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get lineStipplePattern() {
        return this.#view.getUint16(28, LE);
    }
    set lineStipplePattern(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
}
export class PhysicalDevicePipelineCreationCacheControlFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelineCreationCacheControlFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelineCreationCacheControlFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelineCreationCacheControlFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelineCreationCacheControlFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineCreationCacheControl && (this.pipelineCreationCacheControl = data.pipelineCreationCacheControl);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineCreationCacheControl() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineCreationCacheControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceVulkan11Features {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan11Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan11Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan11Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan11Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.storageBuffer16BitAccess && (this.storageBuffer16BitAccess = data.storageBuffer16BitAccess), void 0 !== data.uniformAndStorageBuffer16BitAccess && (this.uniformAndStorageBuffer16BitAccess = data.uniformAndStorageBuffer16BitAccess), void 0 !== data.storagePushConstant16 && (this.storagePushConstant16 = data.storagePushConstant16), void 0 !== data.storageInputOutput16 && (this.storageInputOutput16 = data.storageInputOutput16), void 0 !== data.multiview && (this.multiview = data.multiview), void 0 !== data.multiviewGeometryShader && (this.multiviewGeometryShader = data.multiviewGeometryShader), void 0 !== data.multiviewTessellationShader && (this.multiviewTessellationShader = data.multiviewTessellationShader), void 0 !== data.variablePointersStorageBuffer && (this.variablePointersStorageBuffer = data.variablePointersStorageBuffer), void 0 !== data.variablePointers && (this.variablePointers = data.variablePointers), void 0 !== data.protectedMemory && (this.protectedMemory = data.protectedMemory), void 0 !== data.samplerYcbcrConversion && (this.samplerYcbcrConversion = data.samplerYcbcrConversion), void 0 !== data.shaderDrawParameters && (this.shaderDrawParameters = data.shaderDrawParameters);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get storageBuffer16BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer16BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer16BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer16BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant16() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get storageInputOutput16() {
        return this.#view.getUint32(28, LE);
    }
    set storageInputOutput16(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get multiview() {
        return this.#view.getUint32(32, LE);
    }
    set multiview(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multiviewGeometryShader() {
        return this.#view.getUint32(36, LE);
    }
    set multiviewGeometryShader(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get multiviewTessellationShader() {
        return this.#view.getUint32(40, LE);
    }
    set multiviewTessellationShader(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get variablePointersStorageBuffer() {
        return this.#view.getUint32(44, LE);
    }
    set variablePointersStorageBuffer(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get variablePointers() {
        return this.#view.getUint32(48, LE);
    }
    set variablePointers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get protectedMemory() {
        return this.#view.getUint32(52, LE);
    }
    set protectedMemory(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get samplerYcbcrConversion() {
        return this.#view.getUint32(56, LE);
    }
    set samplerYcbcrConversion(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderDrawParameters() {
        return this.#view.getUint32(60, LE);
    }
    set shaderDrawParameters(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class PhysicalDeviceVulkan11Properties {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan11Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan11Properties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan11Properties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan11Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceUUID && (this.deviceUUID = data.deviceUUID), void 0 !== data.driverUUID && (this.driverUUID = data.driverUUID), void 0 !== data.deviceLUID && (this.deviceLUID = data.deviceLUID), void 0 !== data.deviceNodeMask && (this.deviceNodeMask = data.deviceNodeMask), void 0 !== data.deviceLUIDValid && (this.deviceLUIDValid = data.deviceLUIDValid), void 0 !== data.subgroupSize && (this.subgroupSize = data.subgroupSize), void 0 !== data.subgroupSupportedStages && (this.subgroupSupportedStages = data.subgroupSupportedStages), void 0 !== data.subgroupSupportedOperations && (this.subgroupSupportedOperations = data.subgroupSupportedOperations), void 0 !== data.subgroupQuadOperationsInAllStages && (this.subgroupQuadOperationsInAllStages = data.subgroupQuadOperationsInAllStages), void 0 !== data.pointClippingBehavior && (this.pointClippingBehavior = data.pointClippingBehavior), void 0 !== data.maxMultiviewViewCount && (this.maxMultiviewViewCount = data.maxMultiviewViewCount), void 0 !== data.maxMultiviewInstanceIndex && (this.maxMultiviewInstanceIndex = data.maxMultiviewInstanceIndex), void 0 !== data.protectedNoFault && (this.protectedNoFault = data.protectedNoFault), void 0 !== data.maxPerSetDescriptors && (this.maxPerSetDescriptors = data.maxPerSetDescriptors), void 0 !== data.maxMemoryAllocationSize && (this.maxMemoryAllocationSize = data.maxMemoryAllocationSize);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set deviceUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get driverUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 32, 16);
    }
    set driverUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 32);
    }
    get deviceLUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 48, 8);
    }
    set deviceLUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 48);
    }
    get deviceNodeMask() {
        return this.#view.getUint32(56, LE);
    }
    set deviceNodeMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get deviceLUIDValid() {
        return this.#view.getUint32(60, LE);
    }
    set deviceLUIDValid(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get subgroupSize() {
        return this.#view.getUint32(64, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get subgroupSupportedStages() {
        return this.#view.getUint32(68, LE);
    }
    set subgroupSupportedStages(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get subgroupSupportedOperations() {
        return this.#view.getUint32(72, LE);
    }
    set subgroupSupportedOperations(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get subgroupQuadOperationsInAllStages() {
        return this.#view.getUint32(76, LE);
    }
    set subgroupQuadOperationsInAllStages(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get pointClippingBehavior() {
        return this.#view.getUint32(80, LE);
    }
    set pointClippingBehavior(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxMultiviewViewCount() {
        return this.#view.getUint32(84, LE);
    }
    set maxMultiviewViewCount(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxMultiviewInstanceIndex() {
        return this.#view.getUint32(88, LE);
    }
    set maxMultiviewInstanceIndex(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get protectedNoFault() {
        return this.#view.getUint32(92, LE);
    }
    set protectedNoFault(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxPerSetDescriptors() {
        return this.#view.getUint32(96, LE);
    }
    set maxPerSetDescriptors(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxMemoryAllocationSize() {
        return this.#view.getBigUint64(104, LE);
    }
    set maxMemoryAllocationSize(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
}
export class PhysicalDeviceVulkan12Features {
    static size = 208;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan12Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan12Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan12Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan12Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.samplerMirrorClampToEdge && (this.samplerMirrorClampToEdge = data.samplerMirrorClampToEdge), void 0 !== data.drawIndirectCount && (this.drawIndirectCount = data.drawIndirectCount), void 0 !== data.storageBuffer8BitAccess && (this.storageBuffer8BitAccess = data.storageBuffer8BitAccess), void 0 !== data.uniformAndStorageBuffer8BitAccess && (this.uniformAndStorageBuffer8BitAccess = data.uniformAndStorageBuffer8BitAccess), void 0 !== data.storagePushConstant8 && (this.storagePushConstant8 = data.storagePushConstant8), void 0 !== data.shaderBufferInt64Atomics && (this.shaderBufferInt64Atomics = data.shaderBufferInt64Atomics), void 0 !== data.shaderSharedInt64Atomics && (this.shaderSharedInt64Atomics = data.shaderSharedInt64Atomics), void 0 !== data.shaderFloat16 && (this.shaderFloat16 = data.shaderFloat16), void 0 !== data.shaderInt8 && (this.shaderInt8 = data.shaderInt8), void 0 !== data.descriptorIndexing && (this.descriptorIndexing = data.descriptorIndexing), void 0 !== data.shaderInputAttachmentArrayDynamicIndexing && (this.shaderInputAttachmentArrayDynamicIndexing = data.shaderInputAttachmentArrayDynamicIndexing), void 0 !== data.shaderUniformTexelBufferArrayDynamicIndexing && (this.shaderUniformTexelBufferArrayDynamicIndexing = data.shaderUniformTexelBufferArrayDynamicIndexing), void 0 !== data.shaderStorageTexelBufferArrayDynamicIndexing && (this.shaderStorageTexelBufferArrayDynamicIndexing = data.shaderStorageTexelBufferArrayDynamicIndexing), void 0 !== data.shaderUniformBufferArrayNonUniformIndexing && (this.shaderUniformBufferArrayNonUniformIndexing = data.shaderUniformBufferArrayNonUniformIndexing), void 0 !== data.shaderSampledImageArrayNonUniformIndexing && (this.shaderSampledImageArrayNonUniformIndexing = data.shaderSampledImageArrayNonUniformIndexing), void 0 !== data.shaderStorageBufferArrayNonUniformIndexing && (this.shaderStorageBufferArrayNonUniformIndexing = data.shaderStorageBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageImageArrayNonUniformIndexing && (this.shaderStorageImageArrayNonUniformIndexing = data.shaderStorageImageArrayNonUniformIndexing), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexing && (this.shaderInputAttachmentArrayNonUniformIndexing = data.shaderInputAttachmentArrayNonUniformIndexing), void 0 !== data.shaderUniformTexelBufferArrayNonUniformIndexing && (this.shaderUniformTexelBufferArrayNonUniformIndexing = data.shaderUniformTexelBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageTexelBufferArrayNonUniformIndexing && (this.shaderStorageTexelBufferArrayNonUniformIndexing = data.shaderStorageTexelBufferArrayNonUniformIndexing), void 0 !== data.descriptorBindingUniformBufferUpdateAfterBind && (this.descriptorBindingUniformBufferUpdateAfterBind = data.descriptorBindingUniformBufferUpdateAfterBind), void 0 !== data.descriptorBindingSampledImageUpdateAfterBind && (this.descriptorBindingSampledImageUpdateAfterBind = data.descriptorBindingSampledImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageImageUpdateAfterBind && (this.descriptorBindingStorageImageUpdateAfterBind = data.descriptorBindingStorageImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageBufferUpdateAfterBind && (this.descriptorBindingStorageBufferUpdateAfterBind = data.descriptorBindingStorageBufferUpdateAfterBind), void 0 !== data.descriptorBindingUniformTexelBufferUpdateAfterBind && (this.descriptorBindingUniformTexelBufferUpdateAfterBind = data.descriptorBindingUniformTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingStorageTexelBufferUpdateAfterBind && (this.descriptorBindingStorageTexelBufferUpdateAfterBind = data.descriptorBindingStorageTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingUpdateUnusedWhilePending && (this.descriptorBindingUpdateUnusedWhilePending = data.descriptorBindingUpdateUnusedWhilePending), void 0 !== data.descriptorBindingPartiallyBound && (this.descriptorBindingPartiallyBound = data.descriptorBindingPartiallyBound), void 0 !== data.descriptorBindingVariableDescriptorCount && (this.descriptorBindingVariableDescriptorCount = data.descriptorBindingVariableDescriptorCount), void 0 !== data.runtimeDescriptorArray && (this.runtimeDescriptorArray = data.runtimeDescriptorArray), void 0 !== data.samplerFilterMinmax && (this.samplerFilterMinmax = data.samplerFilterMinmax), void 0 !== data.scalarBlockLayout && (this.scalarBlockLayout = data.scalarBlockLayout), void 0 !== data.imagelessFramebuffer && (this.imagelessFramebuffer = data.imagelessFramebuffer), void 0 !== data.uniformBufferStandardLayout && (this.uniformBufferStandardLayout = data.uniformBufferStandardLayout), void 0 !== data.shaderSubgroupExtendedTypes && (this.shaderSubgroupExtendedTypes = data.shaderSubgroupExtendedTypes), void 0 !== data.separateDepthStencilLayouts && (this.separateDepthStencilLayouts = data.separateDepthStencilLayouts), void 0 !== data.hostQueryReset && (this.hostQueryReset = data.hostQueryReset), void 0 !== data.timelineSemaphore && (this.timelineSemaphore = data.timelineSemaphore), void 0 !== data.bufferDeviceAddress && (this.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (this.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (this.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice), void 0 !== data.vulkanMemoryModel && (this.vulkanMemoryModel = data.vulkanMemoryModel), void 0 !== data.vulkanMemoryModelDeviceScope && (this.vulkanMemoryModelDeviceScope = data.vulkanMemoryModelDeviceScope), void 0 !== data.vulkanMemoryModelAvailabilityVisibilityChains && (this.vulkanMemoryModelAvailabilityVisibilityChains = data.vulkanMemoryModelAvailabilityVisibilityChains), void 0 !== data.shaderOutputViewportIndex && (this.shaderOutputViewportIndex = data.shaderOutputViewportIndex), void 0 !== data.shaderOutputLayer && (this.shaderOutputLayer = data.shaderOutputLayer), void 0 !== data.subgroupBroadcastDynamicId && (this.subgroupBroadcastDynamicId = data.subgroupBroadcastDynamicId);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get samplerMirrorClampToEdge() {
        return this.#view.getUint32(16, LE);
    }
    set samplerMirrorClampToEdge(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get drawIndirectCount() {
        return this.#view.getUint32(20, LE);
    }
    set drawIndirectCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storageBuffer8BitAccess() {
        return this.#view.getUint32(24, LE);
    }
    set storageBuffer8BitAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uniformAndStorageBuffer8BitAccess() {
        return this.#view.getUint32(28, LE);
    }
    set uniformAndStorageBuffer8BitAccess(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get storagePushConstant8() {
        return this.#view.getUint32(32, LE);
    }
    set storagePushConstant8(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderBufferInt64Atomics() {
        return this.#view.getUint32(36, LE);
    }
    set shaderBufferInt64Atomics(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedInt64Atomics() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedInt64Atomics(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderFloat16() {
        return this.#view.getUint32(44, LE);
    }
    set shaderFloat16(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderInt8() {
        return this.#view.getUint32(48, LE);
    }
    set shaderInt8(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get descriptorIndexing() {
        return this.#view.getUint32(52, LE);
    }
    set descriptorIndexing(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderInputAttachmentArrayDynamicIndexing() {
        return this.#view.getUint32(56, LE);
    }
    set shaderInputAttachmentArrayDynamicIndexing(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(60, LE);
    }
    set shaderUniformTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(64, LE);
    }
    set shaderStorageTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(68, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexing() {
        return this.#view.getUint32(72, LE);
    }
    set shaderSampledImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(76, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexing() {
        return this.#view.getUint32(80, LE);
    }
    set shaderStorageImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexing() {
        return this.#view.getUint32(84, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexing(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(88, LE);
    }
    set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(92, LE);
    }
    set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get descriptorBindingUniformBufferUpdateAfterBind() {
        return this.#view.getUint32(96, LE);
    }
    set descriptorBindingUniformBufferUpdateAfterBind(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get descriptorBindingSampledImageUpdateAfterBind() {
        return this.#view.getUint32(100, LE);
    }
    set descriptorBindingSampledImageUpdateAfterBind(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get descriptorBindingStorageImageUpdateAfterBind() {
        return this.#view.getUint32(104, LE);
    }
    set descriptorBindingStorageImageUpdateAfterBind(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get descriptorBindingStorageBufferUpdateAfterBind() {
        return this.#view.getUint32(108, LE);
    }
    set descriptorBindingStorageBufferUpdateAfterBind(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get descriptorBindingUniformTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(112, LE);
    }
    set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get descriptorBindingStorageTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(116, LE);
    }
    set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get descriptorBindingUpdateUnusedWhilePending() {
        return this.#view.getUint32(120, LE);
    }
    set descriptorBindingUpdateUnusedWhilePending(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get descriptorBindingPartiallyBound() {
        return this.#view.getUint32(124, LE);
    }
    set descriptorBindingPartiallyBound(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get descriptorBindingVariableDescriptorCount() {
        return this.#view.getUint32(128, LE);
    }
    set descriptorBindingVariableDescriptorCount(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get runtimeDescriptorArray() {
        return this.#view.getUint32(132, LE);
    }
    set runtimeDescriptorArray(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get samplerFilterMinmax() {
        return this.#view.getUint32(136, LE);
    }
    set samplerFilterMinmax(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get scalarBlockLayout() {
        return this.#view.getUint32(140, LE);
    }
    set scalarBlockLayout(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get imagelessFramebuffer() {
        return this.#view.getUint32(144, LE);
    }
    set imagelessFramebuffer(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get uniformBufferStandardLayout() {
        return this.#view.getUint32(148, LE);
    }
    set uniformBufferStandardLayout(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get shaderSubgroupExtendedTypes() {
        return this.#view.getUint32(152, LE);
    }
    set shaderSubgroupExtendedTypes(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get separateDepthStencilLayouts() {
        return this.#view.getUint32(156, LE);
    }
    set separateDepthStencilLayouts(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get hostQueryReset() {
        return this.#view.getUint32(160, LE);
    }
    set hostQueryReset(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get timelineSemaphore() {
        return this.#view.getUint32(164, LE);
    }
    set timelineSemaphore(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(168, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(172, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(176, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get vulkanMemoryModel() {
        return this.#view.getUint32(180, LE);
    }
    set vulkanMemoryModel(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get vulkanMemoryModelDeviceScope() {
        return this.#view.getUint32(184, LE);
    }
    set vulkanMemoryModelDeviceScope(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get vulkanMemoryModelAvailabilityVisibilityChains() {
        return this.#view.getUint32(188, LE);
    }
    set vulkanMemoryModelAvailabilityVisibilityChains(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get shaderOutputViewportIndex() {
        return this.#view.getUint32(192, LE);
    }
    set shaderOutputViewportIndex(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get shaderOutputLayer() {
        return this.#view.getUint32(196, LE);
    }
    set shaderOutputLayer(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get subgroupBroadcastDynamicId() {
        return this.#view.getUint32(200, LE);
    }
    set subgroupBroadcastDynamicId(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
}
export class PhysicalDeviceVulkan12Properties {
    static size = 736;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan12Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan12Properties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan12Properties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan12Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.driverID && (this.driverID = data.driverID), void 0 !== data.driverName && (this.driverName = data.driverName), void 0 !== data.driverInfo && (this.driverInfo = data.driverInfo), void 0 !== data.conformanceVersion && (this.conformanceVersion = data.conformanceVersion), void 0 !== data.denormBehaviorIndependence && (this.denormBehaviorIndependence = data.denormBehaviorIndependence), void 0 !== data.roundingModeIndependence && (this.roundingModeIndependence = data.roundingModeIndependence), void 0 !== data.shaderSignedZeroInfNanPreserveFloat16 && (this.shaderSignedZeroInfNanPreserveFloat16 = data.shaderSignedZeroInfNanPreserveFloat16), void 0 !== data.shaderSignedZeroInfNanPreserveFloat32 && (this.shaderSignedZeroInfNanPreserveFloat32 = data.shaderSignedZeroInfNanPreserveFloat32), void 0 !== data.shaderSignedZeroInfNanPreserveFloat64 && (this.shaderSignedZeroInfNanPreserveFloat64 = data.shaderSignedZeroInfNanPreserveFloat64), void 0 !== data.shaderDenormPreserveFloat16 && (this.shaderDenormPreserveFloat16 = data.shaderDenormPreserveFloat16), void 0 !== data.shaderDenormPreserveFloat32 && (this.shaderDenormPreserveFloat32 = data.shaderDenormPreserveFloat32), void 0 !== data.shaderDenormPreserveFloat64 && (this.shaderDenormPreserveFloat64 = data.shaderDenormPreserveFloat64), void 0 !== data.shaderDenormFlushToZeroFloat16 && (this.shaderDenormFlushToZeroFloat16 = data.shaderDenormFlushToZeroFloat16), void 0 !== data.shaderDenormFlushToZeroFloat32 && (this.shaderDenormFlushToZeroFloat32 = data.shaderDenormFlushToZeroFloat32), void 0 !== data.shaderDenormFlushToZeroFloat64 && (this.shaderDenormFlushToZeroFloat64 = data.shaderDenormFlushToZeroFloat64), void 0 !== data.shaderRoundingModeRTEFloat16 && (this.shaderRoundingModeRTEFloat16 = data.shaderRoundingModeRTEFloat16), void 0 !== data.shaderRoundingModeRTEFloat32 && (this.shaderRoundingModeRTEFloat32 = data.shaderRoundingModeRTEFloat32), void 0 !== data.shaderRoundingModeRTEFloat64 && (this.shaderRoundingModeRTEFloat64 = data.shaderRoundingModeRTEFloat64), void 0 !== data.shaderRoundingModeRTZFloat16 && (this.shaderRoundingModeRTZFloat16 = data.shaderRoundingModeRTZFloat16), void 0 !== data.shaderRoundingModeRTZFloat32 && (this.shaderRoundingModeRTZFloat32 = data.shaderRoundingModeRTZFloat32), void 0 !== data.shaderRoundingModeRTZFloat64 && (this.shaderRoundingModeRTZFloat64 = data.shaderRoundingModeRTZFloat64), void 0 !== data.maxUpdateAfterBindDescriptorsInAllPools && (this.maxUpdateAfterBindDescriptorsInAllPools = data.maxUpdateAfterBindDescriptorsInAllPools), void 0 !== data.shaderUniformBufferArrayNonUniformIndexingNative && (this.shaderUniformBufferArrayNonUniformIndexingNative = data.shaderUniformBufferArrayNonUniformIndexingNative), void 0 !== data.shaderSampledImageArrayNonUniformIndexingNative && (this.shaderSampledImageArrayNonUniformIndexingNative = data.shaderSampledImageArrayNonUniformIndexingNative), void 0 !== data.shaderStorageBufferArrayNonUniformIndexingNative && (this.shaderStorageBufferArrayNonUniformIndexingNative = data.shaderStorageBufferArrayNonUniformIndexingNative), void 0 !== data.shaderStorageImageArrayNonUniformIndexingNative && (this.shaderStorageImageArrayNonUniformIndexingNative = data.shaderStorageImageArrayNonUniformIndexingNative), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexingNative && (this.shaderInputAttachmentArrayNonUniformIndexingNative = data.shaderInputAttachmentArrayNonUniformIndexingNative), void 0 !== data.robustBufferAccessUpdateAfterBind && (this.robustBufferAccessUpdateAfterBind = data.robustBufferAccessUpdateAfterBind), void 0 !== data.quadDivergentImplicitLod && (this.quadDivergentImplicitLod = data.quadDivergentImplicitLod), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSamplers && (this.maxPerStageDescriptorUpdateAfterBindSamplers = data.maxPerStageDescriptorUpdateAfterBindSamplers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindUniformBuffers && (this.maxPerStageDescriptorUpdateAfterBindUniformBuffers = data.maxPerStageDescriptorUpdateAfterBindUniformBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageBuffers && (this.maxPerStageDescriptorUpdateAfterBindStorageBuffers = data.maxPerStageDescriptorUpdateAfterBindStorageBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSampledImages && (this.maxPerStageDescriptorUpdateAfterBindSampledImages = data.maxPerStageDescriptorUpdateAfterBindSampledImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageImages && (this.maxPerStageDescriptorUpdateAfterBindStorageImages = data.maxPerStageDescriptorUpdateAfterBindStorageImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInputAttachments && (this.maxPerStageDescriptorUpdateAfterBindInputAttachments = data.maxPerStageDescriptorUpdateAfterBindInputAttachments), void 0 !== data.maxPerStageUpdateAfterBindResources && (this.maxPerStageUpdateAfterBindResources = data.maxPerStageUpdateAfterBindResources), void 0 !== data.maxDescriptorSetUpdateAfterBindSamplers && (this.maxDescriptorSetUpdateAfterBindSamplers = data.maxDescriptorSetUpdateAfterBindSamplers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffers && (this.maxDescriptorSetUpdateAfterBindUniformBuffers = data.maxDescriptorSetUpdateAfterBindUniformBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic && (this.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffers && (this.maxDescriptorSetUpdateAfterBindStorageBuffers = data.maxDescriptorSetUpdateAfterBindStorageBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic && (this.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindSampledImages && (this.maxDescriptorSetUpdateAfterBindSampledImages = data.maxDescriptorSetUpdateAfterBindSampledImages), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageImages && (this.maxDescriptorSetUpdateAfterBindStorageImages = data.maxDescriptorSetUpdateAfterBindStorageImages), void 0 !== data.maxDescriptorSetUpdateAfterBindInputAttachments && (this.maxDescriptorSetUpdateAfterBindInputAttachments = data.maxDescriptorSetUpdateAfterBindInputAttachments), void 0 !== data.supportedDepthResolveModes && (this.supportedDepthResolveModes = data.supportedDepthResolveModes), void 0 !== data.supportedStencilResolveModes && (this.supportedStencilResolveModes = data.supportedStencilResolveModes), void 0 !== data.independentResolveNone && (this.independentResolveNone = data.independentResolveNone), void 0 !== data.independentResolve && (this.independentResolve = data.independentResolve), void 0 !== data.filterMinmaxSingleComponentFormats && (this.filterMinmaxSingleComponentFormats = data.filterMinmaxSingleComponentFormats), void 0 !== data.filterMinmaxImageComponentMapping && (this.filterMinmaxImageComponentMapping = data.filterMinmaxImageComponentMapping), void 0 !== data.maxTimelineSemaphoreValueDifference && (this.maxTimelineSemaphoreValueDifference = data.maxTimelineSemaphoreValueDifference), void 0 !== data.framebufferIntegerColorSampleCounts && (this.framebufferIntegerColorSampleCounts = data.framebufferIntegerColorSampleCounts);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get driverID() {
        return this.#view.getUint32(16, LE);
    }
    set driverID(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get driverName() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 256);
    }
    set driverName(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get driverInfo() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 276, 256);
    }
    set driverInfo(value) {
        this.#data.set(new Uint8Array(value.buffer), 276);
    }
    get conformanceVersion() {
        return new ConformanceVersion(this.#data.subarray(532, 532 + ConformanceVersion.size));
    }
    set conformanceVersion(value) {
        if (value[BUFFER].byteLength < ConformanceVersion.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 532);
    }
    get denormBehaviorIndependence() {
        return this.#view.getUint32(536, LE);
    }
    set denormBehaviorIndependence(value) {
        this.#view.setUint32(536, Number(value), LE);
    }
    get roundingModeIndependence() {
        return this.#view.getUint32(540, LE);
    }
    set roundingModeIndependence(value) {
        this.#view.setUint32(540, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat16() {
        return this.#view.getUint32(544, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat16(value) {
        this.#view.setUint32(544, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat32() {
        return this.#view.getUint32(548, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat32(value) {
        this.#view.setUint32(548, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat64() {
        return this.#view.getUint32(552, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat64(value) {
        this.#view.setUint32(552, Number(value), LE);
    }
    get shaderDenormPreserveFloat16() {
        return this.#view.getUint32(556, LE);
    }
    set shaderDenormPreserveFloat16(value) {
        this.#view.setUint32(556, Number(value), LE);
    }
    get shaderDenormPreserveFloat32() {
        return this.#view.getUint32(560, LE);
    }
    set shaderDenormPreserveFloat32(value) {
        this.#view.setUint32(560, Number(value), LE);
    }
    get shaderDenormPreserveFloat64() {
        return this.#view.getUint32(564, LE);
    }
    set shaderDenormPreserveFloat64(value) {
        this.#view.setUint32(564, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat16() {
        return this.#view.getUint32(568, LE);
    }
    set shaderDenormFlushToZeroFloat16(value) {
        this.#view.setUint32(568, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat32() {
        return this.#view.getUint32(572, LE);
    }
    set shaderDenormFlushToZeroFloat32(value) {
        this.#view.setUint32(572, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat64() {
        return this.#view.getUint32(576, LE);
    }
    set shaderDenormFlushToZeroFloat64(value) {
        this.#view.setUint32(576, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat16() {
        return this.#view.getUint32(580, LE);
    }
    set shaderRoundingModeRTEFloat16(value) {
        this.#view.setUint32(580, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat32() {
        return this.#view.getUint32(584, LE);
    }
    set shaderRoundingModeRTEFloat32(value) {
        this.#view.setUint32(584, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat64() {
        return this.#view.getUint32(588, LE);
    }
    set shaderRoundingModeRTEFloat64(value) {
        this.#view.setUint32(588, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat16() {
        return this.#view.getUint32(592, LE);
    }
    set shaderRoundingModeRTZFloat16(value) {
        this.#view.setUint32(592, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat32() {
        return this.#view.getUint32(596, LE);
    }
    set shaderRoundingModeRTZFloat32(value) {
        this.#view.setUint32(596, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat64() {
        return this.#view.getUint32(600, LE);
    }
    set shaderRoundingModeRTZFloat64(value) {
        this.#view.setUint32(600, Number(value), LE);
    }
    get maxUpdateAfterBindDescriptorsInAllPools() {
        return this.#view.getUint32(604, LE);
    }
    set maxUpdateAfterBindDescriptorsInAllPools(value) {
        this.#view.setUint32(604, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(608, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(608, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(612, LE);
    }
    set shaderSampledImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(612, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(616, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(616, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(620, LE);
    }
    set shaderStorageImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(620, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexingNative() {
        return this.#view.getUint32(624, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(624, Number(value), LE);
    }
    get robustBufferAccessUpdateAfterBind() {
        return this.#view.getUint32(628, LE);
    }
    set robustBufferAccessUpdateAfterBind(value) {
        this.#view.setUint32(628, Number(value), LE);
    }
    get quadDivergentImplicitLod() {
        return this.#view.getUint32(632, LE);
    }
    set quadDivergentImplicitLod(value) {
        this.#view.setUint32(632, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSamplers() {
        return this.#view.getUint32(636, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSamplers(value) {
        this.#view.setUint32(636, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(640, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(640, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(644, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(644, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSampledImages() {
        return this.#view.getUint32(648, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(648, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageImages() {
        return this.#view.getUint32(652, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(652, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(656, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(656, Number(value), LE);
    }
    get maxPerStageUpdateAfterBindResources() {
        return this.#view.getUint32(660, LE);
    }
    set maxPerStageUpdateAfterBindResources(value) {
        this.#view.setUint32(660, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSamplers() {
        return this.#view.getUint32(664, LE);
    }
    set maxDescriptorSetUpdateAfterBindSamplers(value) {
        this.#view.setUint32(664, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(668, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(668, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
        return this.#view.getUint32(672, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value) {
        this.#view.setUint32(672, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(676, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(676, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
        return this.#view.getUint32(680, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value) {
        this.#view.setUint32(680, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSampledImages() {
        return this.#view.getUint32(684, LE);
    }
    set maxDescriptorSetUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(684, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageImages() {
        return this.#view.getUint32(688, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(688, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(692, LE);
    }
    set maxDescriptorSetUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(692, Number(value), LE);
    }
    get supportedDepthResolveModes() {
        return this.#view.getUint32(696, LE);
    }
    set supportedDepthResolveModes(value) {
        this.#view.setUint32(696, Number(value), LE);
    }
    get supportedStencilResolveModes() {
        return this.#view.getUint32(700, LE);
    }
    set supportedStencilResolveModes(value) {
        this.#view.setUint32(700, Number(value), LE);
    }
    get independentResolveNone() {
        return this.#view.getUint32(704, LE);
    }
    set independentResolveNone(value) {
        this.#view.setUint32(704, Number(value), LE);
    }
    get independentResolve() {
        return this.#view.getUint32(708, LE);
    }
    set independentResolve(value) {
        this.#view.setUint32(708, Number(value), LE);
    }
    get filterMinmaxSingleComponentFormats() {
        return this.#view.getUint32(712, LE);
    }
    set filterMinmaxSingleComponentFormats(value) {
        this.#view.setUint32(712, Number(value), LE);
    }
    get filterMinmaxImageComponentMapping() {
        return this.#view.getUint32(716, LE);
    }
    set filterMinmaxImageComponentMapping(value) {
        this.#view.setUint32(716, Number(value), LE);
    }
    get maxTimelineSemaphoreValueDifference() {
        return this.#view.getBigUint64(720, LE);
    }
    set maxTimelineSemaphoreValueDifference(value) {
        this.#view.setBigUint64(720, BigInt(value), LE);
    }
    get framebufferIntegerColorSampleCounts() {
        return this.#view.getUint32(728, LE);
    }
    set framebufferIntegerColorSampleCounts(value) {
        this.#view.setUint32(728, Number(value), LE);
    }
}
export class PhysicalDeviceVulkan13Features {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan13Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan13Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan13Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan13Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.robustImageAccess && (this.robustImageAccess = data.robustImageAccess), void 0 !== data.inlineUniformBlock && (this.inlineUniformBlock = data.inlineUniformBlock), void 0 !== data.descriptorBindingInlineUniformBlockUpdateAfterBind && (this.descriptorBindingInlineUniformBlockUpdateAfterBind = data.descriptorBindingInlineUniformBlockUpdateAfterBind), void 0 !== data.pipelineCreationCacheControl && (this.pipelineCreationCacheControl = data.pipelineCreationCacheControl), void 0 !== data.privateData && (this.privateData = data.privateData), void 0 !== data.shaderDemoteToHelperInvocation && (this.shaderDemoteToHelperInvocation = data.shaderDemoteToHelperInvocation), void 0 !== data.shaderTerminateInvocation && (this.shaderTerminateInvocation = data.shaderTerminateInvocation), void 0 !== data.subgroupSizeControl && (this.subgroupSizeControl = data.subgroupSizeControl), void 0 !== data.computeFullSubgroups && (this.computeFullSubgroups = data.computeFullSubgroups), void 0 !== data.synchronization2 && (this.synchronization2 = data.synchronization2), void 0 !== data.textureCompressionASTC_HDR && (this.textureCompressionASTC_HDR = data.textureCompressionASTC_HDR), void 0 !== data.shaderZeroInitializeWorkgroupMemory && (this.shaderZeroInitializeWorkgroupMemory = data.shaderZeroInitializeWorkgroupMemory), void 0 !== data.dynamicRendering && (this.dynamicRendering = data.dynamicRendering), void 0 !== data.shaderIntegerDotProduct && (this.shaderIntegerDotProduct = data.shaderIntegerDotProduct), void 0 !== data.maintenance4 && (this.maintenance4 = data.maintenance4);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_3_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get robustImageAccess() {
        return this.#view.getUint32(16, LE);
    }
    set robustImageAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inlineUniformBlock() {
        return this.#view.getUint32(20, LE);
    }
    set inlineUniformBlock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get descriptorBindingInlineUniformBlockUpdateAfterBind() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pipelineCreationCacheControl() {
        return this.#view.getUint32(28, LE);
    }
    set pipelineCreationCacheControl(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get privateData() {
        return this.#view.getUint32(32, LE);
    }
    set privateData(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderDemoteToHelperInvocation() {
        return this.#view.getUint32(36, LE);
    }
    set shaderDemoteToHelperInvocation(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderTerminateInvocation() {
        return this.#view.getUint32(40, LE);
    }
    set shaderTerminateInvocation(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get subgroupSizeControl() {
        return this.#view.getUint32(44, LE);
    }
    set subgroupSizeControl(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get computeFullSubgroups() {
        return this.#view.getUint32(48, LE);
    }
    set computeFullSubgroups(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get synchronization2() {
        return this.#view.getUint32(52, LE);
    }
    set synchronization2(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get textureCompressionASTC_HDR() {
        return this.#view.getUint32(56, LE);
    }
    set textureCompressionASTC_HDR(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderZeroInitializeWorkgroupMemory() {
        return this.#view.getUint32(60, LE);
    }
    set shaderZeroInitializeWorkgroupMemory(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get dynamicRendering() {
        return this.#view.getUint32(64, LE);
    }
    set dynamicRendering(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderIntegerDotProduct() {
        return this.#view.getUint32(68, LE);
    }
    set shaderIntegerDotProduct(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maintenance4() {
        return this.#view.getUint32(72, LE);
    }
    set maintenance4(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class PhysicalDeviceVulkan13Properties {
    static size = 216;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVulkan13Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVulkan13Properties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVulkan13Properties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVulkan13Properties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minSubgroupSize && (this.minSubgroupSize = data.minSubgroupSize), void 0 !== data.maxSubgroupSize && (this.maxSubgroupSize = data.maxSubgroupSize), void 0 !== data.maxComputeWorkgroupSubgroups && (this.maxComputeWorkgroupSubgroups = data.maxComputeWorkgroupSubgroups), void 0 !== data.requiredSubgroupSizeStages && (this.requiredSubgroupSizeStages = data.requiredSubgroupSizeStages), void 0 !== data.maxInlineUniformBlockSize && (this.maxInlineUniformBlockSize = data.maxInlineUniformBlockSize), void 0 !== data.maxPerStageDescriptorInlineUniformBlocks && (this.maxPerStageDescriptorInlineUniformBlocks = data.maxPerStageDescriptorInlineUniformBlocks), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks && (this.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxDescriptorSetInlineUniformBlocks && (this.maxDescriptorSetInlineUniformBlocks = data.maxDescriptorSetInlineUniformBlocks), void 0 !== data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks && (this.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxInlineUniformTotalSize && (this.maxInlineUniformTotalSize = data.maxInlineUniformTotalSize), void 0 !== data.integerDotProduct8BitUnsignedAccelerated && (this.integerDotProduct8BitUnsignedAccelerated = data.integerDotProduct8BitUnsignedAccelerated), void 0 !== data.integerDotProduct8BitSignedAccelerated && (this.integerDotProduct8BitSignedAccelerated = data.integerDotProduct8BitSignedAccelerated), void 0 !== data.integerDotProduct8BitMixedSignednessAccelerated && (this.integerDotProduct8BitMixedSignednessAccelerated = data.integerDotProduct8BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct4x8BitPackedUnsignedAccelerated && (this.integerDotProduct4x8BitPackedUnsignedAccelerated = data.integerDotProduct4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedSignedAccelerated && (this.integerDotProduct4x8BitPackedSignedAccelerated = data.integerDotProduct4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedMixedSignednessAccelerated && (this.integerDotProduct4x8BitPackedMixedSignednessAccelerated = data.integerDotProduct4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProduct16BitUnsignedAccelerated && (this.integerDotProduct16BitUnsignedAccelerated = data.integerDotProduct16BitUnsignedAccelerated), void 0 !== data.integerDotProduct16BitSignedAccelerated && (this.integerDotProduct16BitSignedAccelerated = data.integerDotProduct16BitSignedAccelerated), void 0 !== data.integerDotProduct16BitMixedSignednessAccelerated && (this.integerDotProduct16BitMixedSignednessAccelerated = data.integerDotProduct16BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct32BitUnsignedAccelerated && (this.integerDotProduct32BitUnsignedAccelerated = data.integerDotProduct32BitUnsignedAccelerated), void 0 !== data.integerDotProduct32BitSignedAccelerated && (this.integerDotProduct32BitSignedAccelerated = data.integerDotProduct32BitSignedAccelerated), void 0 !== data.integerDotProduct32BitMixedSignednessAccelerated && (this.integerDotProduct32BitMixedSignednessAccelerated = data.integerDotProduct32BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct64BitUnsignedAccelerated && (this.integerDotProduct64BitUnsignedAccelerated = data.integerDotProduct64BitUnsignedAccelerated), void 0 !== data.integerDotProduct64BitSignedAccelerated && (this.integerDotProduct64BitSignedAccelerated = data.integerDotProduct64BitSignedAccelerated), void 0 !== data.integerDotProduct64BitMixedSignednessAccelerated && (this.integerDotProduct64BitMixedSignednessAccelerated = data.integerDotProduct64BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating8BitSignedAccelerated = data.integerDotProductAccumulatingSaturating8BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating16BitSignedAccelerated = data.integerDotProductAccumulatingSaturating16BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating32BitSignedAccelerated = data.integerDotProductAccumulatingSaturating32BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating64BitSignedAccelerated = data.integerDotProductAccumulatingSaturating64BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated), void 0 !== data.storageTexelBufferOffsetAlignmentBytes && (this.storageTexelBufferOffsetAlignmentBytes = data.storageTexelBufferOffsetAlignmentBytes), void 0 !== data.storageTexelBufferOffsetSingleTexelAlignment && (this.storageTexelBufferOffsetSingleTexelAlignment = data.storageTexelBufferOffsetSingleTexelAlignment), void 0 !== data.uniformTexelBufferOffsetAlignmentBytes && (this.uniformTexelBufferOffsetAlignmentBytes = data.uniformTexelBufferOffsetAlignmentBytes), void 0 !== data.uniformTexelBufferOffsetSingleTexelAlignment && (this.uniformTexelBufferOffsetSingleTexelAlignment = data.uniformTexelBufferOffsetSingleTexelAlignment), void 0 !== data.maxBufferSize && (this.maxBufferSize = data.maxBufferSize);
        this.sType = StructureType.PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set minSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSubgroupSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxSubgroupSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxComputeWorkgroupSubgroups() {
        return this.#view.getUint32(24, LE);
    }
    set maxComputeWorkgroupSubgroups(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get requiredSubgroupSizeStages() {
        return this.#view.getUint32(28, LE);
    }
    set requiredSubgroupSizeStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxInlineUniformBlockSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxInlineUniformBlockSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxPerStageDescriptorInlineUniformBlocks() {
        return this.#view.getUint32(36, LE);
    }
    set maxPerStageDescriptorInlineUniformBlocks(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(40, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxDescriptorSetInlineUniformBlocks() {
        return this.#view.getUint32(44, LE);
    }
    set maxDescriptorSetInlineUniformBlocks(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(48, LE);
    }
    set maxDescriptorSetUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxInlineUniformTotalSize() {
        return this.#view.getUint32(52, LE);
    }
    set maxInlineUniformTotalSize(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get integerDotProduct8BitUnsignedAccelerated() {
        return this.#view.getUint32(56, LE);
    }
    set integerDotProduct8BitUnsignedAccelerated(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get integerDotProduct8BitSignedAccelerated() {
        return this.#view.getUint32(60, LE);
    }
    set integerDotProduct8BitSignedAccelerated(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get integerDotProduct8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(64, LE);
    }
    set integerDotProduct8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(68, LE);
    }
    set integerDotProduct4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(72, LE);
    }
    set integerDotProduct4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(76, LE);
    }
    set integerDotProduct4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get integerDotProduct16BitUnsignedAccelerated() {
        return this.#view.getUint32(80, LE);
    }
    set integerDotProduct16BitUnsignedAccelerated(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get integerDotProduct16BitSignedAccelerated() {
        return this.#view.getUint32(84, LE);
    }
    set integerDotProduct16BitSignedAccelerated(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get integerDotProduct16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(88, LE);
    }
    set integerDotProduct16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get integerDotProduct32BitUnsignedAccelerated() {
        return this.#view.getUint32(92, LE);
    }
    set integerDotProduct32BitUnsignedAccelerated(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get integerDotProduct32BitSignedAccelerated() {
        return this.#view.getUint32(96, LE);
    }
    set integerDotProduct32BitSignedAccelerated(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get integerDotProduct32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(100, LE);
    }
    set integerDotProduct32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get integerDotProduct64BitUnsignedAccelerated() {
        return this.#view.getUint32(104, LE);
    }
    set integerDotProduct64BitUnsignedAccelerated(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get integerDotProduct64BitSignedAccelerated() {
        return this.#view.getUint32(108, LE);
    }
    set integerDotProduct64BitSignedAccelerated(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get integerDotProduct64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(112, LE);
    }
    set integerDotProduct64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitUnsignedAccelerated() {
        return this.#view.getUint32(116, LE);
    }
    set integerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitSignedAccelerated() {
        return this.#view.getUint32(120, LE);
    }
    set integerDotProductAccumulatingSaturating8BitSignedAccelerated(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(124, LE);
    }
    set integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(128, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(132, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(136, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitUnsignedAccelerated() {
        return this.#view.getUint32(140, LE);
    }
    set integerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitSignedAccelerated() {
        return this.#view.getUint32(144, LE);
    }
    set integerDotProductAccumulatingSaturating16BitSignedAccelerated(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(148, LE);
    }
    set integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitUnsignedAccelerated() {
        return this.#view.getUint32(152, LE);
    }
    set integerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitSignedAccelerated() {
        return this.#view.getUint32(156, LE);
    }
    set integerDotProductAccumulatingSaturating32BitSignedAccelerated(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(160, LE);
    }
    set integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitUnsignedAccelerated() {
        return this.#view.getUint32(164, LE);
    }
    set integerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitSignedAccelerated() {
        return this.#view.getUint32(168, LE);
    }
    set integerDotProductAccumulatingSaturating64BitSignedAccelerated(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(172, LE);
    }
    set integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get storageTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(176, LE);
    }
    set storageTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(176, BigInt(value), LE);
    }
    get storageTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(184, LE);
    }
    set storageTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get uniformTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(192, LE);
    }
    set uniformTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(192, BigInt(value), LE);
    }
    get uniformTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(200, LE);
    }
    set uniformTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get maxBufferSize() {
        return this.#view.getBigUint64(208, LE);
    }
    set maxBufferSize(value) {
        this.#view.setBigUint64(208, BigInt(value), LE);
    }
}
export class PipelineCompilerControlCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineCompilerControlCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineCompilerControlCreateInfoAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineCompilerControlCreateInfoAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineCompilerControlCreateInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.compilerControlFlags && (this.compilerControlFlags = data.compilerControlFlags);
        this.sType = StructureType.PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get compilerControlFlags() {
        return this.#view.getUint32(16, LE);
    }
    set compilerControlFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCoherentMemoryFeaturesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCoherentMemoryFeaturesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCoherentMemoryFeaturesAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCoherentMemoryFeaturesAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCoherentMemoryFeaturesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceCoherentMemory && (this.deviceCoherentMemory = data.deviceCoherentMemory);
        this.sType = StructureType.PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceCoherentMemory() {
        return this.#view.getUint32(16, LE);
    }
    set deviceCoherentMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceToolProperties {
    static size = 1048;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceToolProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceToolProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceToolProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceToolProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.name && (this.name = data.name), void 0 !== data.version && (this.version = data.version), void 0 !== data.purposes && (this.purposes = data.purposes), void 0 !== data.description && (this.description = data.description), void 0 !== data.layer && (this.layer = data.layer);
        this.sType = StructureType.PHYSICAL_DEVICE_TOOL_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get name() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 256);
    }
    set name(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get version() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 272, 256);
    }
    set version(value) {
        this.#data.set(new Uint8Array(value.buffer), 272);
    }
    get purposes() {
        return this.#view.getUint32(528, LE);
    }
    set purposes(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 532, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 532);
    }
    get layer() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 788, 256);
    }
    set layer(value) {
        this.#data.set(new Uint8Array(value.buffer), 788);
    }
}
export class SamplerCustomBorderColorCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerCustomBorderColorCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerCustomBorderColorCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerCustomBorderColorCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerCustomBorderColorCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.customBorderColor && (this.customBorderColor = data.customBorderColor), void 0 !== data.format && (this.format = data.format);
        this.sType = StructureType.SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get customBorderColor() {
        throw new Error('Unknown type: {"union":["f32","i32","u32"]}');
    }
    set customBorderColor(value) {
        throw new Error('Unknown type: {"union":["f32","i32","u32"]}');
    }
    get format() {
        return this.#view.getUint32(20, LE);
    }
    set format(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceCustomBorderColorPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCustomBorderColorPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCustomBorderColorPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCustomBorderColorPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCustomBorderColorPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxCustomBorderColorSamplers && (this.maxCustomBorderColorSamplers = data.maxCustomBorderColorSamplers);
        this.sType = StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxCustomBorderColorSamplers() {
        return this.#view.getUint32(16, LE);
    }
    set maxCustomBorderColorSamplers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceCustomBorderColorFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceCustomBorderColorFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceCustomBorderColorFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceCustomBorderColorFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceCustomBorderColorFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.customBorderColors && (this.customBorderColors = data.customBorderColors), void 0 !== data.customBorderColorWithoutFormat && (this.customBorderColorWithoutFormat = data.customBorderColorWithoutFormat);
        this.sType = StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get customBorderColors() {
        return this.#view.getUint32(16, LE);
    }
    set customBorderColors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get customBorderColorWithoutFormat() {
        return this.#view.getUint32(20, LE);
    }
    set customBorderColorWithoutFormat(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class SamplerBorderColorComponentMappingCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerBorderColorComponentMappingCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerBorderColorComponentMappingCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerBorderColorComponentMappingCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerBorderColorComponentMappingCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.components && (this.components = data.components), void 0 !== data.srgb && (this.srgb = data.srgb);
        this.sType = StructureType.SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get components() {
        return new ComponentMapping(this.#data.subarray(16, 16 + ComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srgb() {
        return this.#view.getUint32(32, LE);
    }
    set srgb(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceBorderColorSwizzleFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceBorderColorSwizzleFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceBorderColorSwizzleFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceBorderColorSwizzleFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceBorderColorSwizzleFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.borderColorSwizzle && (this.borderColorSwizzle = data.borderColorSwizzle), void 0 !== data.borderColorSwizzleFromImage && (this.borderColorSwizzleFromImage = data.borderColorSwizzleFromImage);
        this.sType = StructureType.PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get borderColorSwizzle() {
        return this.#view.getUint32(16, LE);
    }
    set borderColorSwizzle(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get borderColorSwizzleFromImage() {
        return this.#view.getUint32(20, LE);
    }
    set borderColorSwizzleFromImage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class AccelerationStructureGeometryTrianglesDataKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureGeometryTrianglesDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureGeometryTrianglesDataKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureGeometryTrianglesDataKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureGeometryTrianglesDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexFormat && (this.vertexFormat = data.vertexFormat), void 0 !== data.vertexData && (this.vertexData = data.vertexData), void 0 !== data.vertexStride && (this.vertexStride = data.vertexStride), void 0 !== data.maxVertex && (this.maxVertex = data.maxVertex), void 0 !== data.indexType && (this.indexType = data.indexType), void 0 !== data.indexData && (this.indexData = data.indexData), void 0 !== data.transformData && (this.transformData = data.transformData);
        this.sType = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexFormat() {
        return this.#view.getUint32(16, LE);
    }
    set vertexFormat(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set vertexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get vertexStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set vertexStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxVertex() {
        return this.#view.getUint32(40, LE);
    }
    set maxVertex(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(44, LE);
    }
    set indexType(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get indexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set indexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get transformData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set transformData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class AccelerationStructureGeometryAabbsDataKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureGeometryAabbsDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureGeometryAabbsDataKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureGeometryAabbsDataKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureGeometryAabbsDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.data && (this.data = data.data), void 0 !== data.stride && (this.stride = data.stride);
        this.sType = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get stride() {
        return this.#view.getBigUint64(24, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class AccelerationStructureGeometryInstancesDataKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureGeometryInstancesDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureGeometryInstancesDataKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureGeometryInstancesDataKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureGeometryInstancesDataKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.arrayOfPointers && (this.arrayOfPointers = data.arrayOfPointers), void 0 !== data.data && (this.data = data.data);
        this.sType = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get arrayOfPointers() {
        return this.#view.getUint32(16, LE);
    }
    set arrayOfPointers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class AccelerationStructureGeometryKHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureGeometryKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureGeometryKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureGeometryKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureGeometryKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.geometryType && (this.geometryType = data.geometryType), void 0 !== data.geometry && (this.geometry = data.geometry), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get geometryType() {
        return this.#view.getUint32(16, LE);
    }
    set geometryType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometry() {
        throw new Error('Unknown type: {"union":[{"struct":["u32","buffer","u32",{"union":["u64","buffer"]},"u64","u32","u32",{"union":["u64","buffer"]},{"union":["u64","buffer"]}]},{"struct":["u32","buffer",{"union":["u64","buffer"]},"u64"]},{"struct":["u32","buffer","u32",{"union":["u64","buffer"]}]}]}');
    }
    set geometry(value) {
        throw new Error('Unknown type: {"union":[{"struct":["u32","buffer","u32",{"union":["u64","buffer"]},"u64","u32","u32",{"union":["u64","buffer"]},{"union":["u64","buffer"]}]},{"struct":["u32","buffer",{"union":["u64","buffer"]},"u64"]},{"struct":["u32","buffer","u32",{"union":["u64","buffer"]}]}]}');
    }
    get flags() {
        return this.#view.getUint32(84, LE);
    }
    set flags(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
}
export class AccelerationStructureBuildGeometryInfoKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureBuildGeometryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureBuildGeometryInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureBuildGeometryInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureBuildGeometryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.mode && (this.mode = data.mode), void 0 !== data.srcAccelerationStructure && (this.srcAccelerationStructure = data.srcAccelerationStructure), void 0 !== data.dstAccelerationStructure && (this.dstAccelerationStructure = data.dstAccelerationStructure), void 0 !== data.geometryCount && (this.geometryCount = data.geometryCount), void 0 !== data.pGeometries && (this.pGeometries = data.pGeometries), void 0 !== data.ppGeometries && (this.ppGeometries = data.ppGeometries), void 0 !== data.scratchData && (this.scratchData = data.scratchData);
        this.sType = StructureType.ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get mode() {
        return this.#view.getUint32(24, LE);
    }
    set mode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get srcAccelerationStructure() {
        return this.#view.getBigUint64(32, LE);
    }
    set srcAccelerationStructure(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get dstAccelerationStructure() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccelerationStructure(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get geometryCount() {
        return this.#view.getUint32(48, LE);
    }
    set geometryCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pGeometries() {
        return this.#view.getBigUint64(56, LE);
    }
    set pGeometries(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get ppGeometries() {
        return this.#view.getBigUint64(64, LE);
    }
    set ppGeometries(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get scratchData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set scratchData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class AccelerationStructureBuildRangeInfoKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureBuildRangeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureBuildRangeInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureBuildRangeInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureBuildRangeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.primitiveCount && (this.primitiveCount = data.primitiveCount), void 0 !== data.primitiveOffset && (this.primitiveOffset = data.primitiveOffset), void 0 !== data.firstVertex && (this.firstVertex = data.firstVertex), void 0 !== data.transformOffset && (this.transformOffset = data.transformOffset);
    }
    get primitiveCount() {
        return this.#view.getUint32(0, LE);
    }
    set primitiveCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get primitiveOffset() {
        return this.#view.getUint32(4, LE);
    }
    set primitiveOffset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstVertex() {
        return this.#view.getUint32(8, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get transformOffset() {
        return this.#view.getUint32(12, LE);
    }
    set transformOffset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class AccelerationStructureCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.createFlags && (this.createFlags = data.createFlags), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size), void 0 !== data.type && (this.type = data.type), void 0 !== data.deviceAddress && (this.deviceAddress = data.deviceAddress);
        this.sType = StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get createFlags() {
        return this.#view.getUint32(16, LE);
    }
    set createFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(40, LE);
    }
    set size(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(48, LE);
    }
    set type(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(56, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class AabbPositionsKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AabbPositionsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AabbPositionsKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AabbPositionsKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AabbPositionsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.minX && (this.minX = data.minX), void 0 !== data.minY && (this.minY = data.minY), void 0 !== data.minZ && (this.minZ = data.minZ), void 0 !== data.maxX && (this.maxX = data.maxX), void 0 !== data.maxY && (this.maxY = data.maxY), void 0 !== data.maxZ && (this.maxZ = data.maxZ);
    }
    get minX() {
        return this.#view.getFloat32(0, LE);
    }
    set minX(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get minY() {
        return this.#view.getFloat32(4, LE);
    }
    set minY(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get minZ() {
        return this.#view.getFloat32(8, LE);
    }
    set minZ(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get maxX() {
        return this.#view.getFloat32(12, LE);
    }
    set maxX(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get maxY() {
        return this.#view.getFloat32(16, LE);
    }
    set maxY(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxZ() {
        return this.#view.getFloat32(20, LE);
    }
    set maxZ(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
}
export class TransformMatrixKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TransformMatrixKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TransformMatrixKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TransformMatrixKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TransformMatrixKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.matrix && (this.matrix = data.matrix);
    }
    get matrix() {
        return new Float32Array(this.#data.buffer, this.#data.byteOffset + 0, 3);
    }
    set matrix(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
}
export class AccelerationStructureInstanceKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureInstanceKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureInstanceKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureInstanceKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureInstanceKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.transform && (this.transform = data.transform), void 0 !== data.instanceCustomIndex && (this.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (this.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (this.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.accelerationStructureReference && (this.accelerationStructureReference = data.accelerationStructureReference);
    }
    get transform() {
        return new TransformMatrixKHR(this.#data.subarray(0, 0 + TransformMatrixKHR.size));
    }
    set transform(value) {
        if (value[BUFFER].byteLength < TransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(8, LE);
    }
    set mask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(12, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class AccelerationStructureDeviceAddressInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureDeviceAddressInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureDeviceAddressInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureDeviceAddressInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureDeviceAddressInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructure && (this.accelerationStructure = data.accelerationStructure);
        this.sType = StructureType.ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class AccelerationStructureVersionInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureVersionInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureVersionInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureVersionInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureVersionInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pVersionData && (this.pVersionData = data.pVersionData);
        this.sType = StructureType.ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pVersionData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pVersionData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class CopyAccelerationStructureInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyAccelerationStructureInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyAccelerationStructureInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyAccelerationStructureInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyAccelerationStructureInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class CopyAccelerationStructureToMemoryInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyAccelerationStructureToMemoryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyAccelerationStructureToMemoryInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyAccelerationStructureToMemoryInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyAccelerationStructureToMemoryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dst() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set dst(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class CopyMemoryToAccelerationStructureInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMemoryToAccelerationStructureInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMemoryToAccelerationStructureInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMemoryToAccelerationStructureInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMemoryToAccelerationStructureInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set src(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class RayTracingPipelineInterfaceCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RayTracingPipelineInterfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RayTracingPipelineInterfaceCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RayTracingPipelineInterfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RayTracingPipelineInterfaceCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxPipelineRayPayloadSize && (this.maxPipelineRayPayloadSize = data.maxPipelineRayPayloadSize), void 0 !== data.maxPipelineRayHitAttributeSize && (this.maxPipelineRayHitAttributeSize = data.maxPipelineRayHitAttributeSize);
        this.sType = StructureType.RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxPipelineRayPayloadSize() {
        return this.#view.getUint32(16, LE);
    }
    set maxPipelineRayPayloadSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxPipelineRayHitAttributeSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxPipelineRayHitAttributeSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PipelineLibraryCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineLibraryCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineLibraryCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineLibraryCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineLibraryCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.libraryCount && (this.libraryCount = data.libraryCount), void 0 !== data.pLibraries && (this.pLibraries = data.pLibraries);
        this.sType = StructureType.PIPELINE_LIBRARY_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get libraryCount() {
        return this.#view.getUint32(16, LE);
    }
    set libraryCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pLibraries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pLibraries(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceExtendedDynamicStateFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicStateFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExtendedDynamicStateFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExtendedDynamicStateFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicStateFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.extendedDynamicState && (this.extendedDynamicState = data.extendedDynamicState);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get extendedDynamicState() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceExtendedDynamicState2FeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExtendedDynamicState2FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExtendedDynamicState2FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.extendedDynamicState2 && (this.extendedDynamicState2 = data.extendedDynamicState2), void 0 !== data.extendedDynamicState2LogicOp && (this.extendedDynamicState2LogicOp = data.extendedDynamicState2LogicOp), void 0 !== data.extendedDynamicState2PatchControlPoints && (this.extendedDynamicState2PatchControlPoints = data.extendedDynamicState2PatchControlPoints);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get extendedDynamicState2() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get extendedDynamicState2LogicOp() {
        return this.#view.getUint32(20, LE);
    }
    set extendedDynamicState2LogicOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extendedDynamicState2PatchControlPoints() {
        return this.#view.getUint32(24, LE);
    }
    set extendedDynamicState2PatchControlPoints(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceExtendedDynamicState3FeaturesEXT {
    static size = 144;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState3FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExtendedDynamicState3FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExtendedDynamicState3FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState3FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.extendedDynamicState3TessellationDomainOrigin && (this.extendedDynamicState3TessellationDomainOrigin = data.extendedDynamicState3TessellationDomainOrigin), void 0 !== data.extendedDynamicState3DepthClampEnable && (this.extendedDynamicState3DepthClampEnable = data.extendedDynamicState3DepthClampEnable), void 0 !== data.extendedDynamicState3PolygonMode && (this.extendedDynamicState3PolygonMode = data.extendedDynamicState3PolygonMode), void 0 !== data.extendedDynamicState3RasterizationSamples && (this.extendedDynamicState3RasterizationSamples = data.extendedDynamicState3RasterizationSamples), void 0 !== data.extendedDynamicState3SampleMask && (this.extendedDynamicState3SampleMask = data.extendedDynamicState3SampleMask), void 0 !== data.extendedDynamicState3AlphaToCoverageEnable && (this.extendedDynamicState3AlphaToCoverageEnable = data.extendedDynamicState3AlphaToCoverageEnable), void 0 !== data.extendedDynamicState3AlphaToOneEnable && (this.extendedDynamicState3AlphaToOneEnable = data.extendedDynamicState3AlphaToOneEnable), void 0 !== data.extendedDynamicState3LogicOpEnable && (this.extendedDynamicState3LogicOpEnable = data.extendedDynamicState3LogicOpEnable), void 0 !== data.extendedDynamicState3ColorBlendEnable && (this.extendedDynamicState3ColorBlendEnable = data.extendedDynamicState3ColorBlendEnable), void 0 !== data.extendedDynamicState3ColorBlendEquation && (this.extendedDynamicState3ColorBlendEquation = data.extendedDynamicState3ColorBlendEquation), void 0 !== data.extendedDynamicState3ColorWriteMask && (this.extendedDynamicState3ColorWriteMask = data.extendedDynamicState3ColorWriteMask), void 0 !== data.extendedDynamicState3RasterizationStream && (this.extendedDynamicState3RasterizationStream = data.extendedDynamicState3RasterizationStream), void 0 !== data.extendedDynamicState3ConservativeRasterizationMode && (this.extendedDynamicState3ConservativeRasterizationMode = data.extendedDynamicState3ConservativeRasterizationMode), void 0 !== data.extendedDynamicState3ExtraPrimitiveOverestimationSize && (this.extendedDynamicState3ExtraPrimitiveOverestimationSize = data.extendedDynamicState3ExtraPrimitiveOverestimationSize), void 0 !== data.extendedDynamicState3DepthClipEnable && (this.extendedDynamicState3DepthClipEnable = data.extendedDynamicState3DepthClipEnable), void 0 !== data.extendedDynamicState3SampleLocationsEnable && (this.extendedDynamicState3SampleLocationsEnable = data.extendedDynamicState3SampleLocationsEnable), void 0 !== data.extendedDynamicState3ColorBlendAdvanced && (this.extendedDynamicState3ColorBlendAdvanced = data.extendedDynamicState3ColorBlendAdvanced), void 0 !== data.extendedDynamicState3ProvokingVertexMode && (this.extendedDynamicState3ProvokingVertexMode = data.extendedDynamicState3ProvokingVertexMode), void 0 !== data.extendedDynamicState3LineRasterizationMode && (this.extendedDynamicState3LineRasterizationMode = data.extendedDynamicState3LineRasterizationMode), void 0 !== data.extendedDynamicState3LineStippleEnable && (this.extendedDynamicState3LineStippleEnable = data.extendedDynamicState3LineStippleEnable), void 0 !== data.extendedDynamicState3DepthClipNegativeOneToOne && (this.extendedDynamicState3DepthClipNegativeOneToOne = data.extendedDynamicState3DepthClipNegativeOneToOne), void 0 !== data.extendedDynamicState3ViewportWScalingEnable && (this.extendedDynamicState3ViewportWScalingEnable = data.extendedDynamicState3ViewportWScalingEnable), void 0 !== data.extendedDynamicState3ViewportSwizzle && (this.extendedDynamicState3ViewportSwizzle = data.extendedDynamicState3ViewportSwizzle), void 0 !== data.extendedDynamicState3CoverageToColorEnable && (this.extendedDynamicState3CoverageToColorEnable = data.extendedDynamicState3CoverageToColorEnable), void 0 !== data.extendedDynamicState3CoverageToColorLocation && (this.extendedDynamicState3CoverageToColorLocation = data.extendedDynamicState3CoverageToColorLocation), void 0 !== data.extendedDynamicState3CoverageModulationMode && (this.extendedDynamicState3CoverageModulationMode = data.extendedDynamicState3CoverageModulationMode), void 0 !== data.extendedDynamicState3CoverageModulationTableEnable && (this.extendedDynamicState3CoverageModulationTableEnable = data.extendedDynamicState3CoverageModulationTableEnable), void 0 !== data.extendedDynamicState3CoverageModulationTable && (this.extendedDynamicState3CoverageModulationTable = data.extendedDynamicState3CoverageModulationTable), void 0 !== data.extendedDynamicState3CoverageReductionMode && (this.extendedDynamicState3CoverageReductionMode = data.extendedDynamicState3CoverageReductionMode), void 0 !== data.extendedDynamicState3RepresentativeFragmentTestEnable && (this.extendedDynamicState3RepresentativeFragmentTestEnable = data.extendedDynamicState3RepresentativeFragmentTestEnable), void 0 !== data.extendedDynamicState3ShadingRateImageEnable && (this.extendedDynamicState3ShadingRateImageEnable = data.extendedDynamicState3ShadingRateImageEnable);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get extendedDynamicState3TessellationDomainOrigin() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState3TessellationDomainOrigin(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get extendedDynamicState3DepthClampEnable() {
        return this.#view.getUint32(20, LE);
    }
    set extendedDynamicState3DepthClampEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extendedDynamicState3PolygonMode() {
        return this.#view.getUint32(24, LE);
    }
    set extendedDynamicState3PolygonMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get extendedDynamicState3RasterizationSamples() {
        return this.#view.getUint32(28, LE);
    }
    set extendedDynamicState3RasterizationSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get extendedDynamicState3SampleMask() {
        return this.#view.getUint32(32, LE);
    }
    set extendedDynamicState3SampleMask(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get extendedDynamicState3AlphaToCoverageEnable() {
        return this.#view.getUint32(36, LE);
    }
    set extendedDynamicState3AlphaToCoverageEnable(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get extendedDynamicState3AlphaToOneEnable() {
        return this.#view.getUint32(40, LE);
    }
    set extendedDynamicState3AlphaToOneEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get extendedDynamicState3LogicOpEnable() {
        return this.#view.getUint32(44, LE);
    }
    set extendedDynamicState3LogicOpEnable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendEnable() {
        return this.#view.getUint32(48, LE);
    }
    set extendedDynamicState3ColorBlendEnable(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendEquation() {
        return this.#view.getUint32(52, LE);
    }
    set extendedDynamicState3ColorBlendEquation(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get extendedDynamicState3ColorWriteMask() {
        return this.#view.getUint32(56, LE);
    }
    set extendedDynamicState3ColorWriteMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get extendedDynamicState3RasterizationStream() {
        return this.#view.getUint32(60, LE);
    }
    set extendedDynamicState3RasterizationStream(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get extendedDynamicState3ConservativeRasterizationMode() {
        return this.#view.getUint32(64, LE);
    }
    set extendedDynamicState3ConservativeRasterizationMode(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get extendedDynamicState3ExtraPrimitiveOverestimationSize() {
        return this.#view.getUint32(68, LE);
    }
    set extendedDynamicState3ExtraPrimitiveOverestimationSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get extendedDynamicState3DepthClipEnable() {
        return this.#view.getUint32(72, LE);
    }
    set extendedDynamicState3DepthClipEnable(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get extendedDynamicState3SampleLocationsEnable() {
        return this.#view.getUint32(76, LE);
    }
    set extendedDynamicState3SampleLocationsEnable(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendAdvanced() {
        return this.#view.getUint32(80, LE);
    }
    set extendedDynamicState3ColorBlendAdvanced(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get extendedDynamicState3ProvokingVertexMode() {
        return this.#view.getUint32(84, LE);
    }
    set extendedDynamicState3ProvokingVertexMode(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get extendedDynamicState3LineRasterizationMode() {
        return this.#view.getUint32(88, LE);
    }
    set extendedDynamicState3LineRasterizationMode(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get extendedDynamicState3LineStippleEnable() {
        return this.#view.getUint32(92, LE);
    }
    set extendedDynamicState3LineStippleEnable(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get extendedDynamicState3DepthClipNegativeOneToOne() {
        return this.#view.getUint32(96, LE);
    }
    set extendedDynamicState3DepthClipNegativeOneToOne(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get extendedDynamicState3ViewportWScalingEnable() {
        return this.#view.getUint32(100, LE);
    }
    set extendedDynamicState3ViewportWScalingEnable(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get extendedDynamicState3ViewportSwizzle() {
        return this.#view.getUint32(104, LE);
    }
    set extendedDynamicState3ViewportSwizzle(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get extendedDynamicState3CoverageToColorEnable() {
        return this.#view.getUint32(108, LE);
    }
    set extendedDynamicState3CoverageToColorEnable(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get extendedDynamicState3CoverageToColorLocation() {
        return this.#view.getUint32(112, LE);
    }
    set extendedDynamicState3CoverageToColorLocation(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationMode() {
        return this.#view.getUint32(116, LE);
    }
    set extendedDynamicState3CoverageModulationMode(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationTableEnable() {
        return this.#view.getUint32(120, LE);
    }
    set extendedDynamicState3CoverageModulationTableEnable(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationTable() {
        return this.#view.getUint32(124, LE);
    }
    set extendedDynamicState3CoverageModulationTable(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get extendedDynamicState3CoverageReductionMode() {
        return this.#view.getUint32(128, LE);
    }
    set extendedDynamicState3CoverageReductionMode(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get extendedDynamicState3RepresentativeFragmentTestEnable() {
        return this.#view.getUint32(132, LE);
    }
    set extendedDynamicState3RepresentativeFragmentTestEnable(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get extendedDynamicState3ShadingRateImageEnable() {
        return this.#view.getUint32(136, LE);
    }
    set extendedDynamicState3ShadingRateImageEnable(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
}
export class PhysicalDeviceExtendedDynamicState3PropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState3PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExtendedDynamicState3PropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExtendedDynamicState3PropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExtendedDynamicState3PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dynamicPrimitiveTopologyUnrestricted && (this.dynamicPrimitiveTopologyUnrestricted = data.dynamicPrimitiveTopologyUnrestricted);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dynamicPrimitiveTopologyUnrestricted() {
        return this.#view.getUint32(16, LE);
    }
    set dynamicPrimitiveTopologyUnrestricted(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ColorBlendEquationEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ColorBlendEquationEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ColorBlendEquationEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ColorBlendEquationEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ColorBlendEquationEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcColorBlendFactor && (this.srcColorBlendFactor = data.srcColorBlendFactor), void 0 !== data.dstColorBlendFactor && (this.dstColorBlendFactor = data.dstColorBlendFactor), void 0 !== data.colorBlendOp && (this.colorBlendOp = data.colorBlendOp), void 0 !== data.srcAlphaBlendFactor && (this.srcAlphaBlendFactor = data.srcAlphaBlendFactor), void 0 !== data.dstAlphaBlendFactor && (this.dstAlphaBlendFactor = data.dstAlphaBlendFactor), void 0 !== data.alphaBlendOp && (this.alphaBlendOp = data.alphaBlendOp);
    }
    get srcColorBlendFactor() {
        return this.#view.getUint32(0, LE);
    }
    set srcColorBlendFactor(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstColorBlendFactor() {
        return this.#view.getUint32(4, LE);
    }
    set dstColorBlendFactor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get colorBlendOp() {
        return this.#view.getUint32(8, LE);
    }
    set colorBlendOp(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get srcAlphaBlendFactor() {
        return this.#view.getUint32(12, LE);
    }
    set srcAlphaBlendFactor(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get dstAlphaBlendFactor() {
        return this.#view.getUint32(16, LE);
    }
    set dstAlphaBlendFactor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get alphaBlendOp() {
        return this.#view.getUint32(20, LE);
    }
    set alphaBlendOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class ColorBlendAdvancedEXT {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ColorBlendAdvancedEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ColorBlendAdvancedEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ColorBlendAdvancedEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ColorBlendAdvancedEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.advancedBlendOp && (this.advancedBlendOp = data.advancedBlendOp), void 0 !== data.srcPremultiplied && (this.srcPremultiplied = data.srcPremultiplied), void 0 !== data.dstPremultiplied && (this.dstPremultiplied = data.dstPremultiplied), void 0 !== data.blendOverlap && (this.blendOverlap = data.blendOverlap), void 0 !== data.clampResults && (this.clampResults = data.clampResults);
    }
    get advancedBlendOp() {
        return this.#view.getUint32(0, LE);
    }
    set advancedBlendOp(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get srcPremultiplied() {
        return this.#view.getUint32(4, LE);
    }
    set srcPremultiplied(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dstPremultiplied() {
        return this.#view.getUint32(8, LE);
    }
    set dstPremultiplied(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get blendOverlap() {
        return this.#view.getUint32(12, LE);
    }
    set blendOverlap(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get clampResults() {
        return this.#view.getUint32(16, LE);
    }
    set clampResults(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class RenderPassTransformBeginInfoQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassTransformBeginInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassTransformBeginInfoQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassTransformBeginInfoQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassTransformBeginInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.transform && (this.transform = data.transform);
        this.sType = StructureType.RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CopyCommandTransformInfoQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyCommandTransformInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyCommandTransformInfoQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyCommandTransformInfoQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyCommandTransformInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.transform && (this.transform = data.transform);
        this.sType = StructureType.COPY_COMMAND_TRANSFORM_INFO_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CommandBufferInheritanceRenderPassTransformInfoQCOM {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferInheritanceRenderPassTransformInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferInheritanceRenderPassTransformInfoQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferInheritanceRenderPassTransformInfoQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferInheritanceRenderPassTransformInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.transform && (this.transform = data.transform), void 0 !== data.renderArea && (this.renderArea = data.renderArea);
        this.sType = StructureType.COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderArea() {
        return new Rect2D(this.#data.subarray(20, 20 + Rect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class PhysicalDeviceDiagnosticsConfigFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDiagnosticsConfigFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDiagnosticsConfigFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDiagnosticsConfigFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDiagnosticsConfigFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.diagnosticsConfig && (this.diagnosticsConfig = data.diagnosticsConfig);
        this.sType = StructureType.PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get diagnosticsConfig() {
        return this.#view.getUint32(16, LE);
    }
    set diagnosticsConfig(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceDiagnosticsConfigCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceDiagnosticsConfigCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceDiagnosticsConfigCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceDiagnosticsConfigCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceDiagnosticsConfigCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderZeroInitializeWorkgroupMemory && (this.shaderZeroInitializeWorkgroupMemory = data.shaderZeroInitializeWorkgroupMemory);
        this.sType = StructureType.PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderZeroInitializeWorkgroupMemory() {
        return this.#view.getUint32(16, LE);
    }
    set shaderZeroInitializeWorkgroupMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderSubgroupUniformControlFlow && (this.shaderSubgroupUniformControlFlow = data.shaderSubgroupUniformControlFlow);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderSubgroupUniformControlFlow() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupUniformControlFlow(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceRobustness2FeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRobustness2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRobustness2FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRobustness2FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRobustness2FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.robustBufferAccess2 && (this.robustBufferAccess2 = data.robustBufferAccess2), void 0 !== data.robustImageAccess2 && (this.robustImageAccess2 = data.robustImageAccess2), void 0 !== data.nullDescriptor && (this.nullDescriptor = data.nullDescriptor);
        this.sType = StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get robustBufferAccess2() {
        return this.#view.getUint32(16, LE);
    }
    set robustBufferAccess2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get robustImageAccess2() {
        return this.#view.getUint32(20, LE);
    }
    set robustImageAccess2(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get nullDescriptor() {
        return this.#view.getUint32(24, LE);
    }
    set nullDescriptor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceRobustness2PropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRobustness2PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRobustness2PropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRobustness2PropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRobustness2PropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.robustStorageBufferAccessSizeAlignment && (this.robustStorageBufferAccessSizeAlignment = data.robustStorageBufferAccessSizeAlignment), void 0 !== data.robustUniformBufferAccessSizeAlignment && (this.robustUniformBufferAccessSizeAlignment = data.robustUniformBufferAccessSizeAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get robustStorageBufferAccessSizeAlignment() {
        return this.#view.getBigUint64(16, LE);
    }
    set robustStorageBufferAccessSizeAlignment(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get robustUniformBufferAccessSizeAlignment() {
        return this.#view.getBigUint64(24, LE);
    }
    set robustUniformBufferAccessSizeAlignment(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PhysicalDeviceImageRobustnessFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageRobustnessFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageRobustnessFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageRobustnessFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageRobustnessFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.robustImageAccess && (this.robustImageAccess = data.robustImageAccess);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get robustImageAccess() {
        return this.#view.getUint32(16, LE);
    }
    set robustImageAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.workgroupMemoryExplicitLayout && (this.workgroupMemoryExplicitLayout = data.workgroupMemoryExplicitLayout), void 0 !== data.workgroupMemoryExplicitLayoutScalarBlockLayout && (this.workgroupMemoryExplicitLayoutScalarBlockLayout = data.workgroupMemoryExplicitLayoutScalarBlockLayout), void 0 !== data.workgroupMemoryExplicitLayout8BitAccess && (this.workgroupMemoryExplicitLayout8BitAccess = data.workgroupMemoryExplicitLayout8BitAccess), void 0 !== data.workgroupMemoryExplicitLayout16BitAccess && (this.workgroupMemoryExplicitLayout16BitAccess = data.workgroupMemoryExplicitLayout16BitAccess);
        this.sType = StructureType.PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get workgroupMemoryExplicitLayout() {
        return this.#view.getUint32(16, LE);
    }
    set workgroupMemoryExplicitLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get workgroupMemoryExplicitLayoutScalarBlockLayout() {
        return this.#view.getUint32(20, LE);
    }
    set workgroupMemoryExplicitLayoutScalarBlockLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get workgroupMemoryExplicitLayout8BitAccess() {
        return this.#view.getUint32(24, LE);
    }
    set workgroupMemoryExplicitLayout8BitAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get workgroupMemoryExplicitLayout16BitAccess() {
        return this.#view.getUint32(28, LE);
    }
    set workgroupMemoryExplicitLayout16BitAccess(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDevicePortabilitySubsetFeaturesKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePortabilitySubsetFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePortabilitySubsetFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePortabilitySubsetFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePortabilitySubsetFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.constantAlphaColorBlendFactors && (this.constantAlphaColorBlendFactors = data.constantAlphaColorBlendFactors), void 0 !== data.events && (this.events = data.events), void 0 !== data.imageViewFormatReinterpretation && (this.imageViewFormatReinterpretation = data.imageViewFormatReinterpretation), void 0 !== data.imageViewFormatSwizzle && (this.imageViewFormatSwizzle = data.imageViewFormatSwizzle), void 0 !== data.imageView2DOn3DImage && (this.imageView2DOn3DImage = data.imageView2DOn3DImage), void 0 !== data.multisampleArrayImage && (this.multisampleArrayImage = data.multisampleArrayImage), void 0 !== data.mutableComparisonSamplers && (this.mutableComparisonSamplers = data.mutableComparisonSamplers), void 0 !== data.pointPolygons && (this.pointPolygons = data.pointPolygons), void 0 !== data.samplerMipLodBias && (this.samplerMipLodBias = data.samplerMipLodBias), void 0 !== data.separateStencilMaskRef && (this.separateStencilMaskRef = data.separateStencilMaskRef), void 0 !== data.shaderSampleRateInterpolationFunctions && (this.shaderSampleRateInterpolationFunctions = data.shaderSampleRateInterpolationFunctions), void 0 !== data.tessellationIsolines && (this.tessellationIsolines = data.tessellationIsolines), void 0 !== data.tessellationPointMode && (this.tessellationPointMode = data.tessellationPointMode), void 0 !== data.triangleFans && (this.triangleFans = data.triangleFans), void 0 !== data.vertexAttributeAccessBeyondStride && (this.vertexAttributeAccessBeyondStride = data.vertexAttributeAccessBeyondStride);
        this.sType = StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get constantAlphaColorBlendFactors() {
        return this.#view.getUint32(16, LE);
    }
    set constantAlphaColorBlendFactors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get events() {
        return this.#view.getUint32(20, LE);
    }
    set events(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageViewFormatReinterpretation() {
        return this.#view.getUint32(24, LE);
    }
    set imageViewFormatReinterpretation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get imageViewFormatSwizzle() {
        return this.#view.getUint32(28, LE);
    }
    set imageViewFormatSwizzle(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get imageView2DOn3DImage() {
        return this.#view.getUint32(32, LE);
    }
    set imageView2DOn3DImage(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multisampleArrayImage() {
        return this.#view.getUint32(36, LE);
    }
    set multisampleArrayImage(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get mutableComparisonSamplers() {
        return this.#view.getUint32(40, LE);
    }
    set mutableComparisonSamplers(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pointPolygons() {
        return this.#view.getUint32(44, LE);
    }
    set pointPolygons(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get samplerMipLodBias() {
        return this.#view.getUint32(48, LE);
    }
    set samplerMipLodBias(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get separateStencilMaskRef() {
        return this.#view.getUint32(52, LE);
    }
    set separateStencilMaskRef(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderSampleRateInterpolationFunctions() {
        return this.#view.getUint32(56, LE);
    }
    set shaderSampleRateInterpolationFunctions(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get tessellationIsolines() {
        return this.#view.getUint32(60, LE);
    }
    set tessellationIsolines(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get tessellationPointMode() {
        return this.#view.getUint32(64, LE);
    }
    set tessellationPointMode(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get triangleFans() {
        return this.#view.getUint32(68, LE);
    }
    set triangleFans(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get vertexAttributeAccessBeyondStride() {
        return this.#view.getUint32(72, LE);
    }
    set vertexAttributeAccessBeyondStride(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class PhysicalDevicePortabilitySubsetPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePortabilitySubsetPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePortabilitySubsetPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePortabilitySubsetPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePortabilitySubsetPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minVertexInputBindingStrideAlignment && (this.minVertexInputBindingStrideAlignment = data.minVertexInputBindingStrideAlignment);
        this.sType = StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minVertexInputBindingStrideAlignment() {
        return this.#view.getUint32(16, LE);
    }
    set minVertexInputBindingStrideAlignment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevice4444FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevice4444FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevice4444FormatsFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevice4444FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevice4444FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.formatA4R4G4B4 && (this.formatA4R4G4B4 = data.formatA4R4G4B4), void 0 !== data.formatA4B4G4R4 && (this.formatA4B4G4R4 = data.formatA4B4G4R4);
        this.sType = StructureType.PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get formatA4R4G4B4() {
        return this.#view.getUint32(16, LE);
    }
    set formatA4R4G4B4(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get formatA4B4G4R4() {
        return this.#view.getUint32(20, LE);
    }
    set formatA4B4G4R4(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceSubpassShadingFeaturesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubpassShadingFeaturesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubpassShadingFeaturesHUAWEI.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubpassShadingFeaturesHUAWEI.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubpassShadingFeaturesHUAWEI.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subpassShading && (this.subpassShading = data.subpassShading);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subpassShading() {
        return this.#view.getUint32(16, LE);
    }
    set subpassShading(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class BufferCopy2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCopy2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCopy2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.size && (this.size = data.size);
        this.sType = StructureType.BUFFER_COPY_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dstOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class ImageCopy2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCopy2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCopy2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.extent && (this.extent = data.extent);
        this.sType = StructureType.IMAGE_COPY_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(16, 16 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffset() {
        return new Offset3D(this.#data.subarray(32, 32 + Offset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(44, 44 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get dstOffset() {
        return new Offset3D(this.#data.subarray(60, 60 + Offset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(72, 72 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class ImageBlit2 {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageBlit2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageBlit2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageBlit2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageBlit2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffsets && (this.srcOffsets = data.srcOffsets), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffsets && (this.dstOffsets = data.dstOffsets);
        this.sType = StructureType.IMAGE_BLIT_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(16, 16 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new Offset3D(this.#data.subarray(32 + 12 * i, 32 + 12 * i + Offset3D.size)));
        return result;
    }
    set srcOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 32 + 12 * i);
        }
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(56, 56 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get dstOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new Offset3D(this.#data.subarray(72 + 12 * i, 72 + 12 * i + Offset3D.size)));
        return result;
    }
    set dstOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 72 + 12 * i);
        }
    }
}
export class BufferImageCopy2 {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferImageCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferImageCopy2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferImageCopy2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferImageCopy2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.bufferOffset && (this.bufferOffset = data.bufferOffset), void 0 !== data.bufferRowLength && (this.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (this.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (this.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (this.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (this.imageExtent = data.imageExtent);
        this.sType = StructureType.BUFFER_IMAGE_COPY_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get bufferOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set bufferOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(24, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(28, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get imageSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(32, 32 + ImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageOffset() {
        return new Offset3D(this.#data.subarray(48, 48 + Offset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get imageExtent() {
        return new Extent3D(this.#data.subarray(60, 60 + Extent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
}
export class ImageResolve2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageResolve2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageResolve2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageResolve2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageResolve2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcSubresource && (this.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (this.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (this.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (this.dstOffset = data.dstOffset), void 0 !== data.extent && (this.extent = data.extent);
        this.sType = StructureType.IMAGE_RESOLVE_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(16, 16 + ImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffset() {
        return new Offset3D(this.#data.subarray(32, 32 + Offset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get dstSubresource() {
        return new ImageSubresourceLayers(this.#data.subarray(44, 44 + ImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get dstOffset() {
        return new Offset3D(this.#data.subarray(60, 60 + Offset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < Offset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
    get extent() {
        return new Extent3D(this.#data.subarray(72, 72 + Extent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class CopyBufferInfo2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyBufferInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyBufferInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyBufferInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyBufferInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcBuffer && (this.srcBuffer = data.srcBuffer), void 0 !== data.dstBuffer && (this.dstBuffer = data.dstBuffer), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.COPY_BUFFER_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dstBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstBuffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get regionCount() {
        return this.#view.getUint32(32, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class CopyImageInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyImageInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyImageInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcImage && (this.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (this.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (this.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (this.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.COPY_IMAGE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class BlitImageInfo2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BlitImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BlitImageInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BlitImageInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BlitImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcImage && (this.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (this.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (this.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (this.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions), void 0 !== data.filter && (this.filter = data.filter);
        this.sType = StructureType.BLIT_IMAGE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get filter() {
        return this.#view.getUint32(56, LE);
    }
    set filter(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class CopyBufferToImageInfo2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyBufferToImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyBufferToImageInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyBufferToImageInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyBufferToImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcBuffer && (this.srcBuffer = data.srcBuffer), void 0 !== data.dstImage && (this.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (this.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.COPY_BUFFER_TO_IMAGE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(32, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(36, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class CopyImageToBufferInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyImageToBufferInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyImageToBufferInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyImageToBufferInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyImageToBufferInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcImage && (this.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (this.srcImageLayout = data.srcImageLayout), void 0 !== data.dstBuffer && (this.dstBuffer = data.dstBuffer), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.COPY_IMAGE_TO_BUFFER_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstBuffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstBuffer(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get regionCount() {
        return this.#view.getUint32(40, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class ResolveImageInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ResolveImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ResolveImageInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ResolveImageInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ResolveImageInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcImage && (this.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (this.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (this.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (this.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.RESOLVE_IMAGE_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderImageInt64Atomics && (this.shaderImageInt64Atomics = data.shaderImageInt64Atomics), void 0 !== data.sparseImageInt64Atomics && (this.sparseImageInt64Atomics = data.sparseImageInt64Atomics);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderImageInt64Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderImageInt64Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sparseImageInt64Atomics() {
        return this.#view.getUint32(20, LE);
    }
    set sparseImageInt64Atomics(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class FragmentShadingRateAttachmentInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FragmentShadingRateAttachmentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FragmentShadingRateAttachmentInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FragmentShadingRateAttachmentInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FragmentShadingRateAttachmentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pFragmentShadingRateAttachment && (this.pFragmentShadingRateAttachment = data.pFragmentShadingRateAttachment), void 0 !== data.shadingRateAttachmentTexelSize && (this.shadingRateAttachmentTexelSize = data.shadingRateAttachmentTexelSize);
        this.sType = StructureType.FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pFragmentShadingRateAttachment() {
        return this.#view.getBigUint64(16, LE);
    }
    set pFragmentShadingRateAttachment(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get shadingRateAttachmentTexelSize() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set shadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class PipelineFragmentShadingRateStateCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineFragmentShadingRateStateCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineFragmentShadingRateStateCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineFragmentShadingRateStateCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineFragmentShadingRateStateCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentSize && (this.fragmentSize = data.fragmentSize), void 0 !== data.combinerOps && (this.combinerOps = data.combinerOps);
        this.sType = StructureType.PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentSize() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set fragmentSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get combinerOps() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 24, 2);
    }
    set combinerOps(value) {
        this.#data.set(new Uint8Array(value.buffer), 24);
    }
}
export class PhysicalDeviceFragmentShadingRateFeaturesKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShadingRateFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShadingRateFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineFragmentShadingRate && (this.pipelineFragmentShadingRate = data.pipelineFragmentShadingRate), void 0 !== data.primitiveFragmentShadingRate && (this.primitiveFragmentShadingRate = data.primitiveFragmentShadingRate), void 0 !== data.attachmentFragmentShadingRate && (this.attachmentFragmentShadingRate = data.attachmentFragmentShadingRate);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineFragmentShadingRate() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineFragmentShadingRate(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitiveFragmentShadingRate() {
        return this.#view.getUint32(20, LE);
    }
    set primitiveFragmentShadingRate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get attachmentFragmentShadingRate() {
        return this.#view.getUint32(24, LE);
    }
    set attachmentFragmentShadingRate(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShadingRatePropertiesKHR {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRatePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShadingRatePropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShadingRatePropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRatePropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minFragmentShadingRateAttachmentTexelSize && (this.minFragmentShadingRateAttachmentTexelSize = data.minFragmentShadingRateAttachmentTexelSize), void 0 !== data.maxFragmentShadingRateAttachmentTexelSize && (this.maxFragmentShadingRateAttachmentTexelSize = data.maxFragmentShadingRateAttachmentTexelSize), void 0 !== data.maxFragmentShadingRateAttachmentTexelSizeAspectRatio && (this.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = data.maxFragmentShadingRateAttachmentTexelSizeAspectRatio), void 0 !== data.primitiveFragmentShadingRateWithMultipleViewports && (this.primitiveFragmentShadingRateWithMultipleViewports = data.primitiveFragmentShadingRateWithMultipleViewports), void 0 !== data.layeredShadingRateAttachments && (this.layeredShadingRateAttachments = data.layeredShadingRateAttachments), void 0 !== data.fragmentShadingRateNonTrivialCombinerOps && (this.fragmentShadingRateNonTrivialCombinerOps = data.fragmentShadingRateNonTrivialCombinerOps), void 0 !== data.maxFragmentSize && (this.maxFragmentSize = data.maxFragmentSize), void 0 !== data.maxFragmentSizeAspectRatio && (this.maxFragmentSizeAspectRatio = data.maxFragmentSizeAspectRatio), void 0 !== data.maxFragmentShadingRateCoverageSamples && (this.maxFragmentShadingRateCoverageSamples = data.maxFragmentShadingRateCoverageSamples), void 0 !== data.maxFragmentShadingRateRasterizationSamples && (this.maxFragmentShadingRateRasterizationSamples = data.maxFragmentShadingRateRasterizationSamples), void 0 !== data.fragmentShadingRateWithShaderDepthStencilWrites && (this.fragmentShadingRateWithShaderDepthStencilWrites = data.fragmentShadingRateWithShaderDepthStencilWrites), void 0 !== data.fragmentShadingRateWithSampleMask && (this.fragmentShadingRateWithSampleMask = data.fragmentShadingRateWithSampleMask), void 0 !== data.fragmentShadingRateWithShaderSampleMask && (this.fragmentShadingRateWithShaderSampleMask = data.fragmentShadingRateWithShaderSampleMask), void 0 !== data.fragmentShadingRateWithConservativeRasterization && (this.fragmentShadingRateWithConservativeRasterization = data.fragmentShadingRateWithConservativeRasterization), void 0 !== data.fragmentShadingRateWithFragmentShaderInterlock && (this.fragmentShadingRateWithFragmentShaderInterlock = data.fragmentShadingRateWithFragmentShaderInterlock), void 0 !== data.fragmentShadingRateWithCustomSampleLocations && (this.fragmentShadingRateWithCustomSampleLocations = data.fragmentShadingRateWithCustomSampleLocations), void 0 !== data.fragmentShadingRateStrictMultiplyCombiner && (this.fragmentShadingRateStrictMultiplyCombiner = data.fragmentShadingRateStrictMultiplyCombiner);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minFragmentShadingRateAttachmentTexelSize() {
        return new Extent2D(this.#data.subarray(16, 16 + Extent2D.size));
    }
    set minFragmentShadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxFragmentShadingRateAttachmentTexelSize() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set maxFragmentShadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get maxFragmentShadingRateAttachmentTexelSizeAspectRatio() {
        return this.#view.getUint32(32, LE);
    }
    set maxFragmentShadingRateAttachmentTexelSizeAspectRatio(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get primitiveFragmentShadingRateWithMultipleViewports() {
        return this.#view.getUint32(36, LE);
    }
    set primitiveFragmentShadingRateWithMultipleViewports(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get layeredShadingRateAttachments() {
        return this.#view.getUint32(40, LE);
    }
    set layeredShadingRateAttachments(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get fragmentShadingRateNonTrivialCombinerOps() {
        return this.#view.getUint32(44, LE);
    }
    set fragmentShadingRateNonTrivialCombinerOps(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxFragmentSize() {
        return new Extent2D(this.#data.subarray(48, 48 + Extent2D.size));
    }
    set maxFragmentSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get maxFragmentSizeAspectRatio() {
        return this.#view.getUint32(56, LE);
    }
    set maxFragmentSizeAspectRatio(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxFragmentShadingRateCoverageSamples() {
        return this.#view.getUint32(60, LE);
    }
    set maxFragmentShadingRateCoverageSamples(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxFragmentShadingRateRasterizationSamples() {
        return this.#view.getUint32(64, LE);
    }
    set maxFragmentShadingRateRasterizationSamples(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get fragmentShadingRateWithShaderDepthStencilWrites() {
        return this.#view.getUint32(68, LE);
    }
    set fragmentShadingRateWithShaderDepthStencilWrites(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get fragmentShadingRateWithSampleMask() {
        return this.#view.getUint32(72, LE);
    }
    set fragmentShadingRateWithSampleMask(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get fragmentShadingRateWithShaderSampleMask() {
        return this.#view.getUint32(76, LE);
    }
    set fragmentShadingRateWithShaderSampleMask(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get fragmentShadingRateWithConservativeRasterization() {
        return this.#view.getUint32(80, LE);
    }
    set fragmentShadingRateWithConservativeRasterization(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get fragmentShadingRateWithFragmentShaderInterlock() {
        return this.#view.getUint32(84, LE);
    }
    set fragmentShadingRateWithFragmentShaderInterlock(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get fragmentShadingRateWithCustomSampleLocations() {
        return this.#view.getUint32(88, LE);
    }
    set fragmentShadingRateWithCustomSampleLocations(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get fragmentShadingRateStrictMultiplyCombiner() {
        return this.#view.getUint32(92, LE);
    }
    set fragmentShadingRateStrictMultiplyCombiner(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShadingRateKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShadingRateKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShadingRateKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampleCounts && (this.sampleCounts = data.sampleCounts), void 0 !== data.fragmentSize && (this.fragmentSize = data.fragmentSize);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampleCounts() {
        return this.#view.getUint32(16, LE);
    }
    set sampleCounts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentSize() {
        return new Extent2D(this.#data.subarray(20, 20 + Extent2D.size));
    }
    set fragmentSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class PhysicalDeviceShaderTerminateInvocationFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderTerminateInvocationFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderTerminateInvocationFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderTerminateInvocationFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderTerminateInvocationFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderTerminateInvocation && (this.shaderTerminateInvocation = data.shaderTerminateInvocation);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderTerminateInvocation() {
        return this.#view.getUint32(16, LE);
    }
    set shaderTerminateInvocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentShadingRateEnums && (this.fragmentShadingRateEnums = data.fragmentShadingRateEnums), void 0 !== data.supersampleFragmentShadingRates && (this.supersampleFragmentShadingRates = data.supersampleFragmentShadingRates), void 0 !== data.noInvocationFragmentShadingRates && (this.noInvocationFragmentShadingRates = data.noInvocationFragmentShadingRates);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentShadingRateEnums() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShadingRateEnums(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supersampleFragmentShadingRates() {
        return this.#view.getUint32(20, LE);
    }
    set supersampleFragmentShadingRates(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get noInvocationFragmentShadingRates() {
        return this.#view.getUint32(24, LE);
    }
    set noInvocationFragmentShadingRates(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxFragmentShadingRateInvocationCount && (this.maxFragmentShadingRateInvocationCount = data.maxFragmentShadingRateInvocationCount);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxFragmentShadingRateInvocationCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxFragmentShadingRateInvocationCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineFragmentShadingRateEnumStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineFragmentShadingRateEnumStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineFragmentShadingRateEnumStateCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineFragmentShadingRateEnumStateCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineFragmentShadingRateEnumStateCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shadingRateType && (this.shadingRateType = data.shadingRateType), void 0 !== data.shadingRate && (this.shadingRate = data.shadingRate), void 0 !== data.combinerOps && (this.combinerOps = data.combinerOps);
        this.sType = StructureType.PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shadingRateType() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shadingRate() {
        return this.#view.getUint32(20, LE);
    }
    set shadingRate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get combinerOps() {
        return new Uint32Array(this.#data.buffer, this.#data.byteOffset + 24, 2);
    }
    set combinerOps(value) {
        this.#data.set(new Uint8Array(value.buffer), 24);
    }
}
export class AccelerationStructureBuildSizesInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureBuildSizesInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureBuildSizesInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureBuildSizesInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureBuildSizesInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructureSize && (this.accelerationStructureSize = data.accelerationStructureSize), void 0 !== data.updateScratchSize && (this.updateScratchSize = data.updateScratchSize), void 0 !== data.buildScratchSize && (this.buildScratchSize = data.buildScratchSize);
        this.sType = StructureType.ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructureSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructureSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get updateScratchSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set updateScratchSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get buildScratchSize() {
        return this.#view.getBigUint64(32, LE);
    }
    set buildScratchSize(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class PhysicalDeviceImage2DViewOf3DFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImage2DViewOf3DFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImage2DViewOf3DFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImage2DViewOf3DFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImage2DViewOf3DFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image2DViewOf3D && (this.image2DViewOf3D = data.image2DViewOf3D), void 0 !== data.sampler2DViewOf3D && (this.sampler2DViewOf3D = data.sampler2DViewOf3D);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image2DViewOf3D() {
        return this.#view.getUint32(16, LE);
    }
    set image2DViewOf3D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampler2DViewOf3D() {
        return this.#view.getUint32(20, LE);
    }
    set sampler2DViewOf3D(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMutableDescriptorTypeFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMutableDescriptorTypeFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMutableDescriptorTypeFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMutableDescriptorTypeFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mutableDescriptorType && (this.mutableDescriptorType = data.mutableDescriptorType);
        this.sType = StructureType.PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mutableDescriptorType() {
        return this.#view.getUint32(16, LE);
    }
    set mutableDescriptorType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MutableDescriptorTypeListEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MutableDescriptorTypeListEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MutableDescriptorTypeListEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MutableDescriptorTypeListEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MutableDescriptorTypeListEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.descriptorTypeCount && (this.descriptorTypeCount = data.descriptorTypeCount), void 0 !== data.pDescriptorTypes && (this.pDescriptorTypes = data.pDescriptorTypes);
    }
    get descriptorTypeCount() {
        return this.#view.getUint32(0, LE);
    }
    set descriptorTypeCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pDescriptorTypes() {
        return this.#view.getBigUint64(8, LE);
    }
    set pDescriptorTypes(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class MutableDescriptorTypeCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MutableDescriptorTypeCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MutableDescriptorTypeCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MutableDescriptorTypeCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MutableDescriptorTypeCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mutableDescriptorTypeListCount && (this.mutableDescriptorTypeListCount = data.mutableDescriptorTypeListCount), void 0 !== data.pMutableDescriptorTypeLists && (this.pMutableDescriptorTypeLists = data.pMutableDescriptorTypeLists);
        this.sType = StructureType.MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mutableDescriptorTypeListCount() {
        return this.#view.getUint32(16, LE);
    }
    set mutableDescriptorTypeListCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pMutableDescriptorTypeLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMutableDescriptorTypeLists(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDepthClipControlFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDepthClipControlFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDepthClipControlFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDepthClipControlFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDepthClipControlFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.depthClipControl && (this.depthClipControl = data.depthClipControl);
        this.sType = StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get depthClipControl() {
        return this.#view.getUint32(16, LE);
    }
    set depthClipControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineViewportDepthClipControlCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineViewportDepthClipControlCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineViewportDepthClipControlCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineViewportDepthClipControlCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineViewportDepthClipControlCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.negativeOneToOne && (this.negativeOneToOne = data.negativeOneToOne);
        this.sType = StructureType.PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get negativeOneToOne() {
        return this.#view.getUint32(16, LE);
    }
    set negativeOneToOne(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVertexInputDynamicStateFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVertexInputDynamicStateFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVertexInputDynamicStateFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVertexInputDynamicStateFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexInputDynamicState && (this.vertexInputDynamicState = data.vertexInputDynamicState);
        this.sType = StructureType.PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexInputDynamicState() {
        return this.#view.getUint32(16, LE);
    }
    set vertexInputDynamicState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceExternalMemoryRDMAFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceExternalMemoryRDMAFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceExternalMemoryRDMAFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceExternalMemoryRDMAFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceExternalMemoryRDMAFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.externalMemoryRDMA && (this.externalMemoryRDMA = data.externalMemoryRDMA);
        this.sType = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get externalMemoryRDMA() {
        return this.#view.getUint32(16, LE);
    }
    set externalMemoryRDMA(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VertexInputBindingDescription2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VertexInputBindingDescription2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VertexInputBindingDescription2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VertexInputBindingDescription2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VertexInputBindingDescription2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.stride && (this.stride = data.stride), void 0 !== data.inputRate && (this.inputRate = data.inputRate), void 0 !== data.divisor && (this.divisor = data.divisor);
        this.sType = StructureType.VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get binding() {
        return this.#view.getUint32(16, LE);
    }
    set binding(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(20, LE);
    }
    set stride(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get inputRate() {
        return this.#view.getUint32(24, LE);
    }
    set inputRate(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get divisor() {
        return this.#view.getUint32(28, LE);
    }
    set divisor(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VertexInputAttributeDescription2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VertexInputAttributeDescription2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VertexInputAttributeDescription2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VertexInputAttributeDescription2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VertexInputAttributeDescription2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.location && (this.location = data.location), void 0 !== data.binding && (this.binding = data.binding), void 0 !== data.format && (this.format = data.format), void 0 !== data.offset && (this.offset = data.offset);
        this.sType = StructureType.VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get location() {
        return this.#view.getUint32(16, LE);
    }
    set location(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get binding() {
        return this.#view.getUint32(20, LE);
    }
    set binding(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(24, LE);
    }
    set format(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(28, LE);
    }
    set offset(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceColorWriteEnableFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceColorWriteEnableFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceColorWriteEnableFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceColorWriteEnableFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceColorWriteEnableFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.colorWriteEnable && (this.colorWriteEnable = data.colorWriteEnable);
        this.sType = StructureType.PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get colorWriteEnable() {
        return this.#view.getUint32(16, LE);
    }
    set colorWriteEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineColorWriteCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineColorWriteCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineColorWriteCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineColorWriteCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineColorWriteCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachmentCount && (this.attachmentCount = data.attachmentCount), void 0 !== data.pColorWriteEnables && (this.pColorWriteEnables = data.pColorWriteEnables);
        this.sType = StructureType.PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pColorWriteEnables() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorWriteEnables(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class MemoryBarrier2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryBarrier2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryBarrier2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcStageMask && (this.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (this.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask);
        this.sType = StructureType.MEMORY_BARRIER_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class ImageMemoryBarrier2 {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageMemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageMemoryBarrier2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageMemoryBarrier2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageMemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcStageMask && (this.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (this.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.oldLayout && (this.oldLayout = data.oldLayout), void 0 !== data.newLayout && (this.newLayout = data.newLayout), void 0 !== data.srcQueueFamilyIndex && (this.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (this.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.image && (this.image = data.image), void 0 !== data.subresourceRange && (this.subresourceRange = data.subresourceRange);
        this.sType = StructureType.IMAGE_MEMORY_BARRIER_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get oldLayout() {
        return this.#view.getUint32(48, LE);
    }
    set oldLayout(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get newLayout() {
        return this.#view.getUint32(52, LE);
    }
    set newLayout(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(56, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(60, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(64, LE);
    }
    set image(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get subresourceRange() {
        return new ImageSubresourceRange(this.#data.subarray(72, 72 + ImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < ImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class BufferMemoryBarrier2 {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferMemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferMemoryBarrier2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferMemoryBarrier2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferMemoryBarrier2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.srcStageMask && (this.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (this.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (this.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (this.dstAccessMask = data.dstAccessMask), void 0 !== data.srcQueueFamilyIndex && (this.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (this.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size);
        this.sType = StructureType.BUFFER_MEMORY_BARRIER_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(48, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(52, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(56, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(64, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(72, LE);
    }
    set size(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
}
export class DependencyInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DependencyInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DependencyInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DependencyInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DependencyInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dependencyFlags && (this.dependencyFlags = data.dependencyFlags), void 0 !== data.memoryBarrierCount && (this.memoryBarrierCount = data.memoryBarrierCount), void 0 !== data.pMemoryBarriers && (this.pMemoryBarriers = data.pMemoryBarriers), void 0 !== data.bufferMemoryBarrierCount && (this.bufferMemoryBarrierCount = data.bufferMemoryBarrierCount), void 0 !== data.pBufferMemoryBarriers && (this.pBufferMemoryBarriers = data.pBufferMemoryBarriers), void 0 !== data.imageMemoryBarrierCount && (this.imageMemoryBarrierCount = data.imageMemoryBarrierCount), void 0 !== data.pImageMemoryBarriers && (this.pImageMemoryBarriers = data.pImageMemoryBarriers);
        this.sType = StructureType.DEPENDENCY_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(16, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryBarrierCount() {
        return this.#view.getUint32(20, LE);
    }
    set memoryBarrierCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pMemoryBarriers() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMemoryBarriers(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get bufferMemoryBarrierCount() {
        return this.#view.getUint32(32, LE);
    }
    set bufferMemoryBarrierCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pBufferMemoryBarriers() {
        return this.#view.getBigUint64(40, LE);
    }
    set pBufferMemoryBarriers(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get imageMemoryBarrierCount() {
        return this.#view.getUint32(48, LE);
    }
    set imageMemoryBarrierCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pImageMemoryBarriers() {
        return this.#view.getBigUint64(56, LE);
    }
    set pImageMemoryBarriers(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class SemaphoreSubmitInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SemaphoreSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SemaphoreSubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SemaphoreSubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SemaphoreSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.value && (this.value = data.value), void 0 !== data.stageMask && (this.stageMask = data.stageMask), void 0 !== data.deviceIndex && (this.deviceIndex = data.deviceIndex);
        this.sType = StructureType.SEMAPHORE_SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get value() {
        return this.#view.getBigUint64(24, LE);
    }
    set value(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set stageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get deviceIndex() {
        return this.#view.getUint32(40, LE);
    }
    set deviceIndex(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class CommandBufferSubmitInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferSubmitInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferSubmitInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferSubmitInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.commandBuffer && (this.commandBuffer = data.commandBuffer), void 0 !== data.deviceMask && (this.deviceMask = data.deviceMask);
        this.sType = StructureType.COMMAND_BUFFER_SUBMIT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get commandBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set commandBuffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(24, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class SubmitInfo2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubmitInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubmitInfo2.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubmitInfo2.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubmitInfo2.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.waitSemaphoreInfoCount && (this.waitSemaphoreInfoCount = data.waitSemaphoreInfoCount), void 0 !== data.pWaitSemaphoreInfos && (this.pWaitSemaphoreInfos = data.pWaitSemaphoreInfos), void 0 !== data.commandBufferInfoCount && (this.commandBufferInfoCount = data.commandBufferInfoCount), void 0 !== data.pCommandBufferInfos && (this.pCommandBufferInfos = data.pCommandBufferInfos), void 0 !== data.signalSemaphoreInfoCount && (this.signalSemaphoreInfoCount = data.signalSemaphoreInfoCount), void 0 !== data.pSignalSemaphoreInfos && (this.pSignalSemaphoreInfos = data.pSignalSemaphoreInfos);
        this.sType = StructureType.SUBMIT_INFO_2;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get waitSemaphoreInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set waitSemaphoreInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pWaitSemaphoreInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreInfos(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get commandBufferInfoCount() {
        return this.#view.getUint32(32, LE);
    }
    set commandBufferInfoCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pCommandBufferInfos() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCommandBufferInfos(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get signalSemaphoreInfoCount() {
        return this.#view.getUint32(48, LE);
    }
    set signalSemaphoreInfoCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pSignalSemaphoreInfos() {
        return this.#view.getBigUint64(56, LE);
    }
    set pSignalSemaphoreInfos(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class QueueFamilyCheckpointProperties2NV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyCheckpointProperties2NV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyCheckpointProperties2NV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyCheckpointProperties2NV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyCheckpointProperties2NV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.checkpointExecutionStageMask && (this.checkpointExecutionStageMask = data.checkpointExecutionStageMask);
        this.sType = StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get checkpointExecutionStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set checkpointExecutionStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class CheckpointData2NV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CheckpointData2NV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CheckpointData2NV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CheckpointData2NV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CheckpointData2NV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stage && (this.stage = data.stage), void 0 !== data.pCheckpointMarker && (this.pCheckpointMarker = data.pCheckpointMarker);
        this.sType = StructureType.CHECKPOINT_DATA_2_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stage() {
        return this.#view.getBigUint64(16, LE);
    }
    set stage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pCheckpointMarker() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCheckpointMarker(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceSynchronization2Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSynchronization2Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSynchronization2Features.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSynchronization2Features.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSynchronization2Features.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.synchronization2 && (this.synchronization2 = data.synchronization2);
        this.sType = StructureType.PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get synchronization2() {
        return this.#view.getUint32(16, LE);
    }
    set synchronization2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.primitivesGeneratedQuery && (this.primitivesGeneratedQuery = data.primitivesGeneratedQuery), void 0 !== data.primitivesGeneratedQueryWithRasterizerDiscard && (this.primitivesGeneratedQueryWithRasterizerDiscard = data.primitivesGeneratedQueryWithRasterizerDiscard), void 0 !== data.primitivesGeneratedQueryWithNonZeroStreams && (this.primitivesGeneratedQueryWithNonZeroStreams = data.primitivesGeneratedQueryWithNonZeroStreams);
        this.sType = StructureType.PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get primitivesGeneratedQuery() {
        return this.#view.getUint32(16, LE);
    }
    set primitivesGeneratedQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitivesGeneratedQueryWithRasterizerDiscard() {
        return this.#view.getUint32(20, LE);
    }
    set primitivesGeneratedQueryWithRasterizerDiscard(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primitivesGeneratedQueryWithNonZeroStreams() {
        return this.#view.getUint32(24, LE);
    }
    set primitivesGeneratedQueryWithNonZeroStreams(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceLegacyDitheringFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceLegacyDitheringFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceLegacyDitheringFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceLegacyDitheringFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceLegacyDitheringFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.legacyDithering && (this.legacyDithering = data.legacyDithering);
        this.sType = StructureType.PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get legacyDithering() {
        return this.#view.getUint32(16, LE);
    }
    set legacyDithering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.multisampledRenderToSingleSampled && (this.multisampledRenderToSingleSampled = data.multisampledRenderToSingleSampled);
        this.sType = StructureType.PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get multisampledRenderToSingleSampled() {
        return this.#view.getUint32(16, LE);
    }
    set multisampledRenderToSingleSampled(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class SubpassResolvePerformanceQueryEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubpassResolvePerformanceQueryEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubpassResolvePerformanceQueryEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubpassResolvePerformanceQueryEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubpassResolvePerformanceQueryEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.optimal && (this.optimal = data.optimal);
        this.sType = StructureType.SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get optimal() {
        return this.#view.getUint32(16, LE);
    }
    set optimal(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MultisampledRenderToSingleSampledInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MultisampledRenderToSingleSampledInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MultisampledRenderToSingleSampledInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MultisampledRenderToSingleSampledInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MultisampledRenderToSingleSampledInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.multisampledRenderToSingleSampledEnable && (this.multisampledRenderToSingleSampledEnable = data.multisampledRenderToSingleSampledEnable), void 0 !== data.rasterizationSamples && (this.rasterizationSamples = data.rasterizationSamples);
        this.sType = StructureType.MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get multisampledRenderToSingleSampledEnable() {
        return this.#view.getUint32(16, LE);
    }
    set multisampledRenderToSingleSampledEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDevicePipelineProtectedAccessFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelineProtectedAccessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelineProtectedAccessFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelineProtectedAccessFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelineProtectedAccessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineProtectedAccess && (this.pipelineProtectedAccess = data.pipelineProtectedAccess);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineProtectedAccess() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineProtectedAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class QueueFamilyVideoPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyVideoPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyVideoPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyVideoPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyVideoPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.videoCodecOperations && (this.videoCodecOperations = data.videoCodecOperations);
        this.sType = StructureType.QUEUE_FAMILY_VIDEO_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get videoCodecOperations() {
        return this.#view.getUint32(16, LE);
    }
    set videoCodecOperations(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class QueueFamilyQueryResultStatusPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(QueueFamilyQueryResultStatusPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, QueueFamilyQueryResultStatusPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < QueueFamilyQueryResultStatusPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(QueueFamilyQueryResultStatusPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.queryResultStatusSupport && (this.queryResultStatusSupport = data.queryResultStatusSupport);
        this.sType = StructureType.QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get queryResultStatusSupport() {
        return this.#view.getUint32(16, LE);
    }
    set queryResultStatusSupport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoProfileListInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoProfileListInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoProfileListInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoProfileListInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoProfileListInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.profileCount && (this.profileCount = data.profileCount), void 0 !== data.pProfiles && (this.pProfiles = data.pProfiles);
        this.sType = StructureType.VIDEO_PROFILE_LIST_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get profileCount() {
        return this.#view.getUint32(16, LE);
    }
    set profileCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pProfiles() {
        return this.#view.getBigUint64(24, LE);
    }
    set pProfiles(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceVideoFormatInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceVideoFormatInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceVideoFormatInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceVideoFormatInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceVideoFormatInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageUsage && (this.imageUsage = data.imageUsage);
        this.sType = StructureType.PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageUsage() {
        return this.#view.getUint32(16, LE);
    }
    set imageUsage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoFormatPropertiesKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoFormatPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoFormatPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoFormatPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoFormatPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.componentMapping && (this.componentMapping = data.componentMapping), void 0 !== data.imageCreateFlags && (this.imageCreateFlags = data.imageCreateFlags), void 0 !== data.imageType && (this.imageType = data.imageType), void 0 !== data.imageTiling && (this.imageTiling = data.imageTiling), void 0 !== data.imageUsageFlags && (this.imageUsageFlags = data.imageUsageFlags);
        this.sType = StructureType.VIDEO_FORMAT_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get componentMapping() {
        return new ComponentMapping(this.#data.subarray(20, 20 + ComponentMapping.size));
    }
    set componentMapping(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get imageCreateFlags() {
        return this.#view.getUint32(36, LE);
    }
    set imageCreateFlags(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get imageType() {
        return this.#view.getUint32(40, LE);
    }
    set imageType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get imageTiling() {
        return this.#view.getUint32(44, LE);
    }
    set imageTiling(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get imageUsageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set imageUsageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VideoProfileInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoProfileInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoProfileInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoProfileInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoProfileInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.videoCodecOperation && (this.videoCodecOperation = data.videoCodecOperation), void 0 !== data.chromaSubsampling && (this.chromaSubsampling = data.chromaSubsampling), void 0 !== data.lumaBitDepth && (this.lumaBitDepth = data.lumaBitDepth), void 0 !== data.chromaBitDepth && (this.chromaBitDepth = data.chromaBitDepth);
        this.sType = StructureType.VIDEO_PROFILE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get videoCodecOperation() {
        return this.#view.getUint32(16, LE);
    }
    set videoCodecOperation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get chromaSubsampling() {
        return this.#view.getUint32(20, LE);
    }
    set chromaSubsampling(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get lumaBitDepth() {
        return this.#view.getUint32(24, LE);
    }
    set lumaBitDepth(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get chromaBitDepth() {
        return this.#view.getUint32(28, LE);
    }
    set chromaBitDepth(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VideoCapabilitiesKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.minBitstreamBufferOffsetAlignment && (this.minBitstreamBufferOffsetAlignment = data.minBitstreamBufferOffsetAlignment), void 0 !== data.minBitstreamBufferSizeAlignment && (this.minBitstreamBufferSizeAlignment = data.minBitstreamBufferSizeAlignment), void 0 !== data.pictureAccessGranularity && (this.pictureAccessGranularity = data.pictureAccessGranularity), void 0 !== data.minCodedExtent && (this.minCodedExtent = data.minCodedExtent), void 0 !== data.maxCodedExtent && (this.maxCodedExtent = data.maxCodedExtent), void 0 !== data.maxDpbSlots && (this.maxDpbSlots = data.maxDpbSlots), void 0 !== data.maxActiveReferencePictures && (this.maxActiveReferencePictures = data.maxActiveReferencePictures), void 0 !== data.stdHeaderVersion && (this.stdHeaderVersion = data.stdHeaderVersion);
        this.sType = StructureType.VIDEO_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get minBitstreamBufferOffsetAlignment() {
        return this.#view.getBigUint64(24, LE);
    }
    set minBitstreamBufferOffsetAlignment(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get minBitstreamBufferSizeAlignment() {
        return this.#view.getBigUint64(32, LE);
    }
    set minBitstreamBufferSizeAlignment(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pictureAccessGranularity() {
        return new Extent2D(this.#data.subarray(40, 40 + Extent2D.size));
    }
    set pictureAccessGranularity(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get minCodedExtent() {
        return new Extent2D(this.#data.subarray(48, 48 + Extent2D.size));
    }
    set minCodedExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get maxCodedExtent() {
        return new Extent2D(this.#data.subarray(56, 56 + Extent2D.size));
    }
    set maxCodedExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get maxDpbSlots() {
        return this.#view.getUint32(64, LE);
    }
    set maxDpbSlots(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxActiveReferencePictures() {
        return this.#view.getUint32(68, LE);
    }
    set maxActiveReferencePictures(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get stdHeaderVersion() {
        return new ExtensionProperties(this.#data.subarray(72, 72 + ExtensionProperties.size));
    }
    set stdHeaderVersion(value) {
        if (value[BUFFER].byteLength < ExtensionProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VideoSessionMemoryRequirementsKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoSessionMemoryRequirementsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoSessionMemoryRequirementsKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoSessionMemoryRequirementsKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoSessionMemoryRequirementsKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryBindIndex && (this.memoryBindIndex = data.memoryBindIndex), void 0 !== data.memoryRequirements && (this.memoryRequirements = data.memoryRequirements);
        this.sType = StructureType.VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryBindIndex() {
        return this.#view.getUint32(16, LE);
    }
    set memoryBindIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryRequirements() {
        return new MemoryRequirements(this.#data.subarray(24, 24 + MemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < MemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class BindVideoSessionMemoryInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BindVideoSessionMemoryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BindVideoSessionMemoryInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BindVideoSessionMemoryInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BindVideoSessionMemoryInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryBindIndex && (this.memoryBindIndex = data.memoryBindIndex), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.memoryOffset && (this.memoryOffset = data.memoryOffset), void 0 !== data.memorySize && (this.memorySize = data.memorySize);
        this.sType = StructureType.BIND_VIDEO_SESSION_MEMORY_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryBindIndex() {
        return this.#view.getUint32(16, LE);
    }
    set memoryBindIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get memorySize() {
        return this.#view.getBigUint64(40, LE);
    }
    set memorySize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VideoPictureResourceInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoPictureResourceInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoPictureResourceInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoPictureResourceInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.codedOffset && (this.codedOffset = data.codedOffset), void 0 !== data.codedExtent && (this.codedExtent = data.codedExtent), void 0 !== data.baseArrayLayer && (this.baseArrayLayer = data.baseArrayLayer), void 0 !== data.imageViewBinding && (this.imageViewBinding = data.imageViewBinding);
        this.sType = StructureType.VIDEO_PICTURE_RESOURCE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get codedOffset() {
        return new Offset2D(this.#data.subarray(16, 16 + Offset2D.size));
    }
    set codedOffset(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get codedExtent() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set codedExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(32, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get imageViewBinding() {
        return this.#view.getBigUint64(40, LE);
    }
    set imageViewBinding(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class VideoReferenceSlotInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoReferenceSlotInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoReferenceSlotInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoReferenceSlotInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoReferenceSlotInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.slotIndex && (this.slotIndex = data.slotIndex), void 0 !== data.pPictureResource && (this.pPictureResource = data.pPictureResource);
        this.sType = StructureType.VIDEO_REFERENCE_SLOT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get slotIndex() {
        return this.#view.getInt32(16, LE);
    }
    set slotIndex(value) {
        this.#view.setInt32(16, Number(value), LE);
    }
    get pPictureResource() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPictureResource(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.VIDEO_DECODE_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoDecodeUsageInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeUsageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeUsageInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeUsageInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeUsageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.videoUsageHints && (this.videoUsageHints = data.videoUsageHints);
        this.sType = StructureType.VIDEO_DECODE_USAGE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get videoUsageHints() {
        return this.#view.getUint32(16, LE);
    }
    set videoUsageHints(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoDecodeInfoKHR {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.srcBuffer && (this.srcBuffer = data.srcBuffer), void 0 !== data.srcBufferOffset && (this.srcBufferOffset = data.srcBufferOffset), void 0 !== data.srcBufferRange && (this.srcBufferRange = data.srcBufferRange), void 0 !== data.dstPictureResource && (this.dstPictureResource = data.dstPictureResource), void 0 !== data.pSetupReferenceSlot && (this.pSetupReferenceSlot = data.pSetupReferenceSlot), void 0 !== data.referenceSlotCount && (this.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (this.pReferenceSlots = data.pReferenceSlots);
        this.sType = StructureType.VIDEO_DECODE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get srcBufferOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set srcBufferOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get srcBufferRange() {
        return this.#view.getBigUint64(40, LE);
    }
    set srcBufferRange(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get dstPictureResource() {
        return new VideoPictureResourceInfoKHR(this.#data.subarray(48, 48 + VideoPictureResourceInfoKHR.size));
    }
    set dstPictureResource(value) {
        if (value[BUFFER].byteLength < VideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get pSetupReferenceSlot() {
        return this.#view.getBigUint64(96, LE);
    }
    set pSetupReferenceSlot(value) {
        this.#view.setBigUint64(96, BigInt(anyPointer(value)), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(104, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(112, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(112, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH264ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264ProfileInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264ProfileInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdProfileIdc && (this.stdProfileIdc = data.stdProfileIdc), void 0 !== data.pictureLayout && (this.pictureLayout = data.pictureLayout);
        this.sType = StructureType.VIDEO_DECODE_H264_PROFILE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pictureLayout() {
        return this.#view.getUint32(20, LE);
    }
    set pictureLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VideoDecodeH264CapabilitiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264CapabilitiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264CapabilitiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxLevelIdc && (this.maxLevelIdc = data.maxLevelIdc), void 0 !== data.fieldOffsetGranularity && (this.fieldOffsetGranularity = data.fieldOffsetGranularity);
        this.sType = StructureType.VIDEO_DECODE_H264_CAPABILITIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxLevelIdc() {
        return this.#view.getUint32(16, LE);
    }
    set maxLevelIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fieldOffsetGranularity() {
        return new Offset2D(this.#data.subarray(20, 20 + Offset2D.size));
    }
    set fieldOffsetGranularity(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VideoDecodeH264SessionParametersAddInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264SessionParametersAddInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdSPSCount && (this.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (this.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (this.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (this.pStdPPSs = data.pStdPPSs);
        this.sType = StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH264SessionParametersCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264SessionParametersCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxStdSPSCount && (this.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (this.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (this.pParametersAddInfo = data.pParametersAddInfo);
        this.sType = StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH264PictureInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264PictureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264PictureInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264PictureInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264PictureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pStdPictureInfo && (this.pStdPictureInfo = data.pStdPictureInfo), void 0 !== data.sliceCount && (this.sliceCount = data.sliceCount), void 0 !== data.pSliceOffsets && (this.pSliceOffsets = data.pSliceOffsets);
        this.sType = StructureType.VIDEO_DECODE_H264_PICTURE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pStdPictureInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdPictureInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get sliceCount() {
        return this.#view.getUint32(24, LE);
    }
    set sliceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSliceOffsets() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceOffsets(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH264DpbSlotInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH264DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH264DpbSlotInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH264DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH264DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pStdReferenceInfo && (this.pStdReferenceInfo = data.pStdReferenceInfo);
        this.sType = StructureType.VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH265ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265ProfileInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265ProfileInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdProfileIdc && (this.stdProfileIdc = data.stdProfileIdc);
        this.sType = StructureType.VIDEO_DECODE_H265_PROFILE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoDecodeH265CapabilitiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265CapabilitiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265CapabilitiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxLevelIdc && (this.maxLevelIdc = data.maxLevelIdc);
        this.sType = StructureType.VIDEO_DECODE_H265_CAPABILITIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxLevelIdc() {
        return this.#view.getUint32(16, LE);
    }
    set maxLevelIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoDecodeH265SessionParametersAddInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265SessionParametersAddInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdVPSCount && (this.stdVPSCount = data.stdVPSCount), void 0 !== data.pStdVPSs && (this.pStdVPSs = data.pStdVPSs), void 0 !== data.stdSPSCount && (this.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (this.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (this.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (this.pStdPPSs = data.pStdPPSs);
        this.sType = StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdVPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdVPSs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(48, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH265SessionParametersCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265SessionParametersCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxStdVPSCount && (this.maxStdVPSCount = data.maxStdVPSCount), void 0 !== data.maxStdSPSCount && (this.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (this.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (this.pParametersAddInfo = data.pParametersAddInfo);
        this.sType = StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxStdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(32, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH265PictureInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265PictureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265PictureInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265PictureInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265PictureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pStdPictureInfo && (this.pStdPictureInfo = data.pStdPictureInfo), void 0 !== data.sliceCount && (this.sliceCount = data.sliceCount), void 0 !== data.pSliceOffsets && (this.pSliceOffsets = data.pSliceOffsets);
        this.sType = StructureType.VIDEO_DECODE_H265_PICTURE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pStdPictureInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdPictureInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get sliceCount() {
        return this.#view.getUint32(24, LE);
    }
    set sliceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSliceOffsets() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceOffsets(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoDecodeH265DpbSlotInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoDecodeH265DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoDecodeH265DpbSlotInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoDecodeH265DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoDecodeH265DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pStdReferenceInfo && (this.pStdReferenceInfo = data.pStdReferenceInfo);
        this.sType = StructureType.VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class VideoSessionCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoSessionCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoSessionCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoSessionCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoSessionCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.queueFamilyIndex && (this.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.pVideoProfile && (this.pVideoProfile = data.pVideoProfile), void 0 !== data.pictureFormat && (this.pictureFormat = data.pictureFormat), void 0 !== data.maxCodedExtent && (this.maxCodedExtent = data.maxCodedExtent), void 0 !== data.referencePictureFormat && (this.referencePictureFormat = data.referencePictureFormat), void 0 !== data.maxDpbSlots && (this.maxDpbSlots = data.maxDpbSlots), void 0 !== data.maxActiveReferencePictures && (this.maxActiveReferencePictures = data.maxActiveReferencePictures), void 0 !== data.pStdHeaderVersion && (this.pStdHeaderVersion = data.pStdHeaderVersion);
        this.sType = StructureType.VIDEO_SESSION_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(16, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pVideoProfile() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVideoProfile(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pictureFormat() {
        return this.#view.getUint32(32, LE);
    }
    set pictureFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxCodedExtent() {
        return new Extent2D(this.#data.subarray(36, 36 + Extent2D.size));
    }
    set maxCodedExtent(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get referencePictureFormat() {
        return this.#view.getUint32(44, LE);
    }
    set referencePictureFormat(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDpbSlots() {
        return this.#view.getUint32(48, LE);
    }
    set maxDpbSlots(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxActiveReferencePictures() {
        return this.#view.getUint32(52, LE);
    }
    set maxActiveReferencePictures(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get pStdHeaderVersion() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdHeaderVersion(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class VideoSessionParametersCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoSessionParametersCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoSessionParametersCreateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoSessionParametersCreateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoSessionParametersCreateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.videoSessionParametersTemplate && (this.videoSessionParametersTemplate = data.videoSessionParametersTemplate), void 0 !== data.videoSession && (this.videoSession = data.videoSession);
        this.sType = StructureType.VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoSessionParametersTemplate() {
        return this.#view.getBigUint64(24, LE);
    }
    set videoSessionParametersTemplate(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get videoSession() {
        return this.#view.getBigUint64(32, LE);
    }
    set videoSession(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoSessionParametersUpdateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoSessionParametersUpdateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoSessionParametersUpdateInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoSessionParametersUpdateInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoSessionParametersUpdateInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.updateSequenceCount && (this.updateSequenceCount = data.updateSequenceCount);
        this.sType = StructureType.VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get updateSequenceCount() {
        return this.#view.getUint32(16, LE);
    }
    set updateSequenceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoBeginCodingInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoBeginCodingInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoBeginCodingInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoBeginCodingInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoBeginCodingInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.videoSession && (this.videoSession = data.videoSession), void 0 !== data.videoSessionParameters && (this.videoSessionParameters = data.videoSessionParameters), void 0 !== data.referenceSlotCount && (this.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (this.pReferenceSlots = data.pReferenceSlots);
        this.sType = StructureType.VIDEO_BEGIN_CODING_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoSession() {
        return this.#view.getBigUint64(24, LE);
    }
    set videoSession(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get videoSessionParameters() {
        return this.#view.getBigUint64(32, LE);
    }
    set videoSessionParameters(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(40, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(48, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEndCodingInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEndCodingInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEndCodingInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEndCodingInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEndCodingInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.VIDEO_END_CODING_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoCodingControlInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoCodingControlInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoCodingControlInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoCodingControlInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoCodingControlInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.VIDEO_CODING_CONTROL_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoEncodeUsageInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeUsageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeUsageInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeUsageInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeUsageInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.videoUsageHints && (this.videoUsageHints = data.videoUsageHints), void 0 !== data.videoContentHints && (this.videoContentHints = data.videoContentHints), void 0 !== data.tuningMode && (this.tuningMode = data.tuningMode);
        this.sType = StructureType.VIDEO_ENCODE_USAGE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get videoUsageHints() {
        return this.#view.getUint32(16, LE);
    }
    set videoUsageHints(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoContentHints() {
        return this.#view.getUint32(20, LE);
    }
    set videoContentHints(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tuningMode() {
        return this.#view.getUint32(24, LE);
    }
    set tuningMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VideoEncodeInfoKHR {
    static size = 128;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.qualityLevel && (this.qualityLevel = data.qualityLevel), void 0 !== data.dstBitstreamBuffer && (this.dstBitstreamBuffer = data.dstBitstreamBuffer), void 0 !== data.dstBitstreamBufferOffset && (this.dstBitstreamBufferOffset = data.dstBitstreamBufferOffset), void 0 !== data.dstBitstreamBufferMaxRange && (this.dstBitstreamBufferMaxRange = data.dstBitstreamBufferMaxRange), void 0 !== data.srcPictureResource && (this.srcPictureResource = data.srcPictureResource), void 0 !== data.pSetupReferenceSlot && (this.pSetupReferenceSlot = data.pSetupReferenceSlot), void 0 !== data.referenceSlotCount && (this.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (this.pReferenceSlots = data.pReferenceSlots), void 0 !== data.precedingExternallyEncodedBytes && (this.precedingExternallyEncodedBytes = data.precedingExternallyEncodedBytes);
        this.sType = StructureType.VIDEO_ENCODE_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get qualityLevel() {
        return this.#view.getUint32(20, LE);
    }
    set qualityLevel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get dstBitstreamBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstBitstreamBuffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get dstBitstreamBufferOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstBitstreamBufferOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstBitstreamBufferMaxRange() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstBitstreamBufferMaxRange(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get srcPictureResource() {
        return new VideoPictureResourceInfoKHR(this.#data.subarray(48, 48 + VideoPictureResourceInfoKHR.size));
    }
    set srcPictureResource(value) {
        if (value[BUFFER].byteLength < VideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get pSetupReferenceSlot() {
        return this.#view.getBigUint64(96, LE);
    }
    set pSetupReferenceSlot(value) {
        this.#view.setBigUint64(96, BigInt(anyPointer(value)), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(104, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(112, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(112, BigInt(anyPointer(value)), LE);
    }
    get precedingExternallyEncodedBytes() {
        return this.#view.getUint32(120, LE);
    }
    set precedingExternallyEncodedBytes(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
}
export class VideoEncodeRateControlInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeRateControlInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeRateControlInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeRateControlInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeRateControlInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.rateControlMode && (this.rateControlMode = data.rateControlMode), void 0 !== data.layerCount && (this.layerCount = data.layerCount), void 0 !== data.pLayerConfigs && (this.pLayerConfigs = data.pLayerConfigs);
        this.sType = StructureType.VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rateControlMode() {
        return this.#view.getUint32(20, LE);
    }
    set rateControlMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint8(24);
    }
    set layerCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pLayerConfigs() {
        return this.#view.getBigUint64(32, LE);
    }
    set pLayerConfigs(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeRateControlLayerInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeRateControlLayerInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeRateControlLayerInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeRateControlLayerInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeRateControlLayerInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.averageBitrate && (this.averageBitrate = data.averageBitrate), void 0 !== data.maxBitrate && (this.maxBitrate = data.maxBitrate), void 0 !== data.frameRateNumerator && (this.frameRateNumerator = data.frameRateNumerator), void 0 !== data.frameRateDenominator && (this.frameRateDenominator = data.frameRateDenominator), void 0 !== data.virtualBufferSizeInMs && (this.virtualBufferSizeInMs = data.virtualBufferSizeInMs), void 0 !== data.initialVirtualBufferSizeInMs && (this.initialVirtualBufferSizeInMs = data.initialVirtualBufferSizeInMs);
        this.sType = StructureType.VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get averageBitrate() {
        return this.#view.getUint32(16, LE);
    }
    set averageBitrate(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxBitrate() {
        return this.#view.getUint32(20, LE);
    }
    set maxBitrate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get frameRateNumerator() {
        return this.#view.getUint32(24, LE);
    }
    set frameRateNumerator(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get frameRateDenominator() {
        return this.#view.getUint32(28, LE);
    }
    set frameRateDenominator(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get virtualBufferSizeInMs() {
        return this.#view.getUint32(32, LE);
    }
    set virtualBufferSizeInMs(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get initialVirtualBufferSizeInMs() {
        return this.#view.getUint32(36, LE);
    }
    set initialVirtualBufferSizeInMs(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class VideoEncodeCapabilitiesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeCapabilitiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeCapabilitiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeCapabilitiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.rateControlModes && (this.rateControlModes = data.rateControlModes), void 0 !== data.rateControlLayerCount && (this.rateControlLayerCount = data.rateControlLayerCount), void 0 !== data.qualityLevelCount && (this.qualityLevelCount = data.qualityLevelCount), void 0 !== data.inputImageDataFillAlignment && (this.inputImageDataFillAlignment = data.inputImageDataFillAlignment);
        this.sType = StructureType.VIDEO_ENCODE_CAPABILITIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rateControlModes() {
        return this.#view.getUint32(20, LE);
    }
    set rateControlModes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rateControlLayerCount() {
        return this.#view.getUint8(24);
    }
    set rateControlLayerCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get qualityLevelCount() {
        return this.#view.getUint8(25);
    }
    set qualityLevelCount(value) {
        this.#view.setUint8(25, Number(value));
    }
    get inputImageDataFillAlignment() {
        return new Extent2D(this.#data.subarray(28, 28 + Extent2D.size));
    }
    set inputImageDataFillAlignment(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
}
export class VideoEncodeH264CapabilitiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264CapabilitiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264CapabilitiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.inputModeFlags && (this.inputModeFlags = data.inputModeFlags), void 0 !== data.outputModeFlags && (this.outputModeFlags = data.outputModeFlags), void 0 !== data.maxPPictureL0ReferenceCount && (this.maxPPictureL0ReferenceCount = data.maxPPictureL0ReferenceCount), void 0 !== data.maxBPictureL0ReferenceCount && (this.maxBPictureL0ReferenceCount = data.maxBPictureL0ReferenceCount), void 0 !== data.maxL1ReferenceCount && (this.maxL1ReferenceCount = data.maxL1ReferenceCount), void 0 !== data.motionVectorsOverPicBoundariesFlag && (this.motionVectorsOverPicBoundariesFlag = data.motionVectorsOverPicBoundariesFlag), void 0 !== data.maxBytesPerPicDenom && (this.maxBytesPerPicDenom = data.maxBytesPerPicDenom), void 0 !== data.maxBitsPerMbDenom && (this.maxBitsPerMbDenom = data.maxBitsPerMbDenom), void 0 !== data.log2MaxMvLengthHorizontal && (this.log2MaxMvLengthHorizontal = data.log2MaxMvLengthHorizontal), void 0 !== data.log2MaxMvLengthVertical && (this.log2MaxMvLengthVertical = data.log2MaxMvLengthVertical);
        this.sType = StructureType.VIDEO_ENCODE_H264_CAPABILITIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inputModeFlags() {
        return this.#view.getUint32(20, LE);
    }
    set inputModeFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get outputModeFlags() {
        return this.#view.getUint32(24, LE);
    }
    set outputModeFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxPPictureL0ReferenceCount() {
        return this.#view.getUint8(28);
    }
    set maxPPictureL0ReferenceCount(value) {
        this.#view.setUint8(28, Number(value));
    }
    get maxBPictureL0ReferenceCount() {
        return this.#view.getUint8(29);
    }
    set maxBPictureL0ReferenceCount(value) {
        this.#view.setUint8(29, Number(value));
    }
    get maxL1ReferenceCount() {
        return this.#view.getUint8(30);
    }
    set maxL1ReferenceCount(value) {
        this.#view.setUint8(30, Number(value));
    }
    get motionVectorsOverPicBoundariesFlag() {
        return this.#view.getUint32(32, LE);
    }
    set motionVectorsOverPicBoundariesFlag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxBytesPerPicDenom() {
        return this.#view.getUint32(36, LE);
    }
    set maxBytesPerPicDenom(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxBitsPerMbDenom() {
        return this.#view.getUint32(40, LE);
    }
    set maxBitsPerMbDenom(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get log2MaxMvLengthHorizontal() {
        return this.#view.getUint32(44, LE);
    }
    set log2MaxMvLengthHorizontal(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get log2MaxMvLengthVertical() {
        return this.#view.getUint32(48, LE);
    }
    set log2MaxMvLengthVertical(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VideoEncodeH264SessionParametersAddInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264SessionParametersAddInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdSPSCount && (this.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (this.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (this.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (this.pStdPPSs = data.pStdPPSs);
        this.sType = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264SessionParametersCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264SessionParametersCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxStdSPSCount && (this.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (this.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (this.pParametersAddInfo = data.pParametersAddInfo);
        this.sType = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264DpbSlotInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264DpbSlotInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.slotIndex && (this.slotIndex = data.slotIndex), void 0 !== data.pStdReferenceInfo && (this.pStdReferenceInfo = data.pStdReferenceInfo);
        this.sType = StructureType.VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get slotIndex() {
        return this.#view.getInt8(16);
    }
    set slotIndex(value) {
        this.#view.setInt8(16, Number(value));
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264VclFrameInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264VclFrameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264VclFrameInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264VclFrameInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264VclFrameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pReferenceFinalLists && (this.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.naluSliceEntryCount && (this.naluSliceEntryCount = data.naluSliceEntryCount), void 0 !== data.pNaluSliceEntries && (this.pNaluSliceEntries = data.pNaluSliceEntries), void 0 !== data.pCurrentPictureInfo && (this.pCurrentPictureInfo = data.pCurrentPictureInfo);
        this.sType = StructureType.VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get naluSliceEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set naluSliceEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pNaluSliceEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pNaluSliceEntries(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pCurrentPictureInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCurrentPictureInfo(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264ReferenceListsInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264ReferenceListsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264ReferenceListsInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264ReferenceListsInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264ReferenceListsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.referenceList0EntryCount && (this.referenceList0EntryCount = data.referenceList0EntryCount), void 0 !== data.pReferenceList0Entries && (this.pReferenceList0Entries = data.pReferenceList0Entries), void 0 !== data.referenceList1EntryCount && (this.referenceList1EntryCount = data.referenceList1EntryCount), void 0 !== data.pReferenceList1Entries && (this.pReferenceList1Entries = data.pReferenceList1Entries), void 0 !== data.pMemMgmtCtrlOperations && (this.pMemMgmtCtrlOperations = data.pMemMgmtCtrlOperations);
        this.sType = StructureType.VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get referenceList0EntryCount() {
        return this.#view.getUint8(16);
    }
    set referenceList0EntryCount(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pReferenceList0Entries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceList0Entries(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get referenceList1EntryCount() {
        return this.#view.getUint8(32);
    }
    set referenceList1EntryCount(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pReferenceList1Entries() {
        return this.#view.getBigUint64(40, LE);
    }
    set pReferenceList1Entries(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pMemMgmtCtrlOperations() {
        return this.#view.getBigUint64(48, LE);
    }
    set pMemMgmtCtrlOperations(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264EmitPictureParametersInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264EmitPictureParametersInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264EmitPictureParametersInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264EmitPictureParametersInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264EmitPictureParametersInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.spsId && (this.spsId = data.spsId), void 0 !== data.emitSpsEnable && (this.emitSpsEnable = data.emitSpsEnable), void 0 !== data.ppsIdEntryCount && (this.ppsIdEntryCount = data.ppsIdEntryCount), void 0 !== data.ppsIdEntries && (this.ppsIdEntries = data.ppsIdEntries);
        this.sType = StructureType.VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get spsId() {
        return this.#view.getUint8(16);
    }
    set spsId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get emitSpsEnable() {
        return this.#view.getUint32(20, LE);
    }
    set emitSpsEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get ppsIdEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set ppsIdEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ppsIdEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set ppsIdEntries(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264ProfileInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264ProfileInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdProfileIdc && (this.stdProfileIdc = data.stdProfileIdc);
        this.sType = StructureType.VIDEO_ENCODE_H264_PROFILE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoEncodeH264NaluSliceInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264NaluSliceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264NaluSliceInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264NaluSliceInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264NaluSliceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mbCount && (this.mbCount = data.mbCount), void 0 !== data.pReferenceFinalLists && (this.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.pSliceHeaderStd && (this.pSliceHeaderStd = data.pSliceHeaderStd);
        this.sType = StructureType.VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mbCount() {
        return this.#view.getUint32(16, LE);
    }
    set mbCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pSliceHeaderStd() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceHeaderStd(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH264RateControlInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264RateControlInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264RateControlInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264RateControlInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264RateControlInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.gopFrameCount && (this.gopFrameCount = data.gopFrameCount), void 0 !== data.idrPeriod && (this.idrPeriod = data.idrPeriod), void 0 !== data.consecutiveBFrameCount && (this.consecutiveBFrameCount = data.consecutiveBFrameCount), void 0 !== data.rateControlStructure && (this.rateControlStructure = data.rateControlStructure), void 0 !== data.temporalLayerCount && (this.temporalLayerCount = data.temporalLayerCount);
        this.sType = StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get gopFrameCount() {
        return this.#view.getUint32(16, LE);
    }
    set gopFrameCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get idrPeriod() {
        return this.#view.getUint32(20, LE);
    }
    set idrPeriod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get consecutiveBFrameCount() {
        return this.#view.getUint32(24, LE);
    }
    set consecutiveBFrameCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rateControlStructure() {
        return this.#view.getUint32(28, LE);
    }
    set rateControlStructure(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get temporalLayerCount() {
        return this.#view.getUint8(32);
    }
    set temporalLayerCount(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class VideoEncodeH264QpEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264QpEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264QpEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264QpEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.qpI && (this.qpI = data.qpI), void 0 !== data.qpP && (this.qpP = data.qpP), void 0 !== data.qpB && (this.qpB = data.qpB);
    }
    get qpI() {
        return this.#view.getInt32(0, LE);
    }
    set qpI(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get qpP() {
        return this.#view.getInt32(4, LE);
    }
    set qpP(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get qpB() {
        return this.#view.getInt32(8, LE);
    }
    set qpB(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VideoEncodeH264FrameSizeEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264FrameSizeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264FrameSizeEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264FrameSizeEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264FrameSizeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.frameISize && (this.frameISize = data.frameISize), void 0 !== data.framePSize && (this.framePSize = data.framePSize), void 0 !== data.frameBSize && (this.frameBSize = data.frameBSize);
    }
    get frameISize() {
        return this.#view.getUint32(0, LE);
    }
    set frameISize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get framePSize() {
        return this.#view.getUint32(4, LE);
    }
    set framePSize(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get frameBSize() {
        return this.#view.getUint32(8, LE);
    }
    set frameBSize(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VideoEncodeH264RateControlLayerInfoEXT {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH264RateControlLayerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH264RateControlLayerInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH264RateControlLayerInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH264RateControlLayerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.temporalLayerId && (this.temporalLayerId = data.temporalLayerId), void 0 !== data.useInitialRcQp && (this.useInitialRcQp = data.useInitialRcQp), void 0 !== data.initialRcQp && (this.initialRcQp = data.initialRcQp), void 0 !== data.useMinQp && (this.useMinQp = data.useMinQp), void 0 !== data.minQp && (this.minQp = data.minQp), void 0 !== data.useMaxQp && (this.useMaxQp = data.useMaxQp), void 0 !== data.maxQp && (this.maxQp = data.maxQp), void 0 !== data.useMaxFrameSize && (this.useMaxFrameSize = data.useMaxFrameSize), void 0 !== data.maxFrameSize && (this.maxFrameSize = data.maxFrameSize);
        this.sType = StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get temporalLayerId() {
        return this.#view.getUint8(16);
    }
    set temporalLayerId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get useInitialRcQp() {
        return this.#view.getUint32(20, LE);
    }
    set useInitialRcQp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get initialRcQp() {
        return new VideoEncodeH264QpEXT(this.#data.subarray(24, 24 + VideoEncodeH264QpEXT.size));
    }
    set initialRcQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get useMinQp() {
        return this.#view.getUint32(36, LE);
    }
    set useMinQp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minQp() {
        return new VideoEncodeH264QpEXT(this.#data.subarray(40, 40 + VideoEncodeH264QpEXT.size));
    }
    set minQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get useMaxQp() {
        return this.#view.getUint32(52, LE);
    }
    set useMaxQp(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxQp() {
        return new VideoEncodeH264QpEXT(this.#data.subarray(56, 56 + VideoEncodeH264QpEXT.size));
    }
    set maxQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get useMaxFrameSize() {
        return this.#view.getUint32(68, LE);
    }
    set useMaxFrameSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxFrameSize() {
        return new VideoEncodeH264FrameSizeEXT(this.#data.subarray(72, 72 + VideoEncodeH264FrameSizeEXT.size));
    }
    set maxFrameSize(value) {
        if (value[BUFFER].byteLength < VideoEncodeH264FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VideoEncodeH265CapabilitiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265CapabilitiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265CapabilitiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265CapabilitiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.inputModeFlags && (this.inputModeFlags = data.inputModeFlags), void 0 !== data.outputModeFlags && (this.outputModeFlags = data.outputModeFlags), void 0 !== data.ctbSizes && (this.ctbSizes = data.ctbSizes), void 0 !== data.transformBlockSizes && (this.transformBlockSizes = data.transformBlockSizes), void 0 !== data.maxPPictureL0ReferenceCount && (this.maxPPictureL0ReferenceCount = data.maxPPictureL0ReferenceCount), void 0 !== data.maxBPictureL0ReferenceCount && (this.maxBPictureL0ReferenceCount = data.maxBPictureL0ReferenceCount), void 0 !== data.maxL1ReferenceCount && (this.maxL1ReferenceCount = data.maxL1ReferenceCount), void 0 !== data.maxSubLayersCount && (this.maxSubLayersCount = data.maxSubLayersCount), void 0 !== data.minLog2MinLumaCodingBlockSizeMinus3 && (this.minLog2MinLumaCodingBlockSizeMinus3 = data.minLog2MinLumaCodingBlockSizeMinus3), void 0 !== data.maxLog2MinLumaCodingBlockSizeMinus3 && (this.maxLog2MinLumaCodingBlockSizeMinus3 = data.maxLog2MinLumaCodingBlockSizeMinus3), void 0 !== data.minLog2MinLumaTransformBlockSizeMinus2 && (this.minLog2MinLumaTransformBlockSizeMinus2 = data.minLog2MinLumaTransformBlockSizeMinus2), void 0 !== data.maxLog2MinLumaTransformBlockSizeMinus2 && (this.maxLog2MinLumaTransformBlockSizeMinus2 = data.maxLog2MinLumaTransformBlockSizeMinus2), void 0 !== data.minMaxTransformHierarchyDepthInter && (this.minMaxTransformHierarchyDepthInter = data.minMaxTransformHierarchyDepthInter), void 0 !== data.maxMaxTransformHierarchyDepthInter && (this.maxMaxTransformHierarchyDepthInter = data.maxMaxTransformHierarchyDepthInter), void 0 !== data.minMaxTransformHierarchyDepthIntra && (this.minMaxTransformHierarchyDepthIntra = data.minMaxTransformHierarchyDepthIntra), void 0 !== data.maxMaxTransformHierarchyDepthIntra && (this.maxMaxTransformHierarchyDepthIntra = data.maxMaxTransformHierarchyDepthIntra), void 0 !== data.maxDiffCuQpDeltaDepth && (this.maxDiffCuQpDeltaDepth = data.maxDiffCuQpDeltaDepth), void 0 !== data.minMaxNumMergeCand && (this.minMaxNumMergeCand = data.minMaxNumMergeCand), void 0 !== data.maxMaxNumMergeCand && (this.maxMaxNumMergeCand = data.maxMaxNumMergeCand);
        this.sType = StructureType.VIDEO_ENCODE_H265_CAPABILITIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inputModeFlags() {
        return this.#view.getUint32(20, LE);
    }
    set inputModeFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get outputModeFlags() {
        return this.#view.getUint32(24, LE);
    }
    set outputModeFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ctbSizes() {
        return this.#view.getUint32(28, LE);
    }
    set ctbSizes(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get transformBlockSizes() {
        return this.#view.getUint32(32, LE);
    }
    set transformBlockSizes(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxPPictureL0ReferenceCount() {
        return this.#view.getUint8(36);
    }
    set maxPPictureL0ReferenceCount(value) {
        this.#view.setUint8(36, Number(value));
    }
    get maxBPictureL0ReferenceCount() {
        return this.#view.getUint8(37);
    }
    set maxBPictureL0ReferenceCount(value) {
        this.#view.setUint8(37, Number(value));
    }
    get maxL1ReferenceCount() {
        return this.#view.getUint8(38);
    }
    set maxL1ReferenceCount(value) {
        this.#view.setUint8(38, Number(value));
    }
    get maxSubLayersCount() {
        return this.#view.getUint8(39);
    }
    set maxSubLayersCount(value) {
        this.#view.setUint8(39, Number(value));
    }
    get minLog2MinLumaCodingBlockSizeMinus3() {
        return this.#view.getUint8(40);
    }
    set minLog2MinLumaCodingBlockSizeMinus3(value) {
        this.#view.setUint8(40, Number(value));
    }
    get maxLog2MinLumaCodingBlockSizeMinus3() {
        return this.#view.getUint8(41);
    }
    set maxLog2MinLumaCodingBlockSizeMinus3(value) {
        this.#view.setUint8(41, Number(value));
    }
    get minLog2MinLumaTransformBlockSizeMinus2() {
        return this.#view.getUint8(42);
    }
    set minLog2MinLumaTransformBlockSizeMinus2(value) {
        this.#view.setUint8(42, Number(value));
    }
    get maxLog2MinLumaTransformBlockSizeMinus2() {
        return this.#view.getUint8(43);
    }
    set maxLog2MinLumaTransformBlockSizeMinus2(value) {
        this.#view.setUint8(43, Number(value));
    }
    get minMaxTransformHierarchyDepthInter() {
        return this.#view.getUint8(44);
    }
    set minMaxTransformHierarchyDepthInter(value) {
        this.#view.setUint8(44, Number(value));
    }
    get maxMaxTransformHierarchyDepthInter() {
        return this.#view.getUint8(45);
    }
    set maxMaxTransformHierarchyDepthInter(value) {
        this.#view.setUint8(45, Number(value));
    }
    get minMaxTransformHierarchyDepthIntra() {
        return this.#view.getUint8(46);
    }
    set minMaxTransformHierarchyDepthIntra(value) {
        this.#view.setUint8(46, Number(value));
    }
    get maxMaxTransformHierarchyDepthIntra() {
        return this.#view.getUint8(47);
    }
    set maxMaxTransformHierarchyDepthIntra(value) {
        this.#view.setUint8(47, Number(value));
    }
    get maxDiffCuQpDeltaDepth() {
        return this.#view.getUint8(48);
    }
    set maxDiffCuQpDeltaDepth(value) {
        this.#view.setUint8(48, Number(value));
    }
    get minMaxNumMergeCand() {
        return this.#view.getUint8(49);
    }
    set minMaxNumMergeCand(value) {
        this.#view.setUint8(49, Number(value));
    }
    get maxMaxNumMergeCand() {
        return this.#view.getUint8(50);
    }
    set maxMaxNumMergeCand(value) {
        this.#view.setUint8(50, Number(value));
    }
}
export class VideoEncodeH265SessionParametersAddInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265SessionParametersAddInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265SessionParametersAddInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdVPSCount && (this.stdVPSCount = data.stdVPSCount), void 0 !== data.pStdVPSs && (this.pStdVPSs = data.pStdVPSs), void 0 !== data.stdSPSCount && (this.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (this.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (this.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (this.pStdPPSs = data.pStdPPSs);
        this.sType = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdVPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdVPSs(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(48, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265SessionParametersCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265SessionParametersCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265SessionParametersCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxStdVPSCount && (this.maxStdVPSCount = data.maxStdVPSCount), void 0 !== data.maxStdSPSCount && (this.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (this.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (this.pParametersAddInfo = data.pParametersAddInfo);
        this.sType = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxStdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(32, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265VclFrameInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265VclFrameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265VclFrameInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265VclFrameInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265VclFrameInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pReferenceFinalLists && (this.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.naluSliceSegmentEntryCount && (this.naluSliceSegmentEntryCount = data.naluSliceSegmentEntryCount), void 0 !== data.pNaluSliceSegmentEntries && (this.pNaluSliceSegmentEntries = data.pNaluSliceSegmentEntries), void 0 !== data.pCurrentPictureInfo && (this.pCurrentPictureInfo = data.pCurrentPictureInfo);
        this.sType = StructureType.VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get naluSliceSegmentEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set naluSliceSegmentEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pNaluSliceSegmentEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pNaluSliceSegmentEntries(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get pCurrentPictureInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCurrentPictureInfo(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265EmitPictureParametersInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265EmitPictureParametersInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265EmitPictureParametersInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265EmitPictureParametersInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265EmitPictureParametersInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vpsId && (this.vpsId = data.vpsId), void 0 !== data.spsId && (this.spsId = data.spsId), void 0 !== data.emitVpsEnable && (this.emitVpsEnable = data.emitVpsEnable), void 0 !== data.emitSpsEnable && (this.emitSpsEnable = data.emitSpsEnable), void 0 !== data.ppsIdEntryCount && (this.ppsIdEntryCount = data.ppsIdEntryCount), void 0 !== data.ppsIdEntries && (this.ppsIdEntries = data.ppsIdEntries);
        this.sType = StructureType.VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vpsId() {
        return this.#view.getUint8(16);
    }
    set vpsId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get spsId() {
        return this.#view.getUint8(17);
    }
    set spsId(value) {
        this.#view.setUint8(17, Number(value));
    }
    get emitVpsEnable() {
        return this.#view.getUint32(20, LE);
    }
    set emitVpsEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get emitSpsEnable() {
        return this.#view.getUint32(24, LE);
    }
    set emitSpsEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ppsIdEntryCount() {
        return this.#view.getUint32(28, LE);
    }
    set ppsIdEntryCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get ppsIdEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set ppsIdEntries(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265NaluSliceSegmentInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265NaluSliceSegmentInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265NaluSliceSegmentInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265NaluSliceSegmentInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265NaluSliceSegmentInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.ctbCount && (this.ctbCount = data.ctbCount), void 0 !== data.pReferenceFinalLists && (this.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.pSliceSegmentHeaderStd && (this.pSliceSegmentHeaderStd = data.pSliceSegmentHeaderStd);
        this.sType = StructureType.VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get ctbCount() {
        return this.#view.getUint32(16, LE);
    }
    set ctbCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get pSliceSegmentHeaderStd() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceSegmentHeaderStd(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265RateControlInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265RateControlInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265RateControlInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265RateControlInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265RateControlInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.gopFrameCount && (this.gopFrameCount = data.gopFrameCount), void 0 !== data.idrPeriod && (this.idrPeriod = data.idrPeriod), void 0 !== data.consecutiveBFrameCount && (this.consecutiveBFrameCount = data.consecutiveBFrameCount), void 0 !== data.rateControlStructure && (this.rateControlStructure = data.rateControlStructure), void 0 !== data.subLayerCount && (this.subLayerCount = data.subLayerCount);
        this.sType = StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get gopFrameCount() {
        return this.#view.getUint32(16, LE);
    }
    set gopFrameCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get idrPeriod() {
        return this.#view.getUint32(20, LE);
    }
    set idrPeriod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get consecutiveBFrameCount() {
        return this.#view.getUint32(24, LE);
    }
    set consecutiveBFrameCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rateControlStructure() {
        return this.#view.getUint32(28, LE);
    }
    set rateControlStructure(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get subLayerCount() {
        return this.#view.getUint8(32);
    }
    set subLayerCount(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class VideoEncodeH265QpEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265QpEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265QpEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265QpEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.qpI && (this.qpI = data.qpI), void 0 !== data.qpP && (this.qpP = data.qpP), void 0 !== data.qpB && (this.qpB = data.qpB);
    }
    get qpI() {
        return this.#view.getInt32(0, LE);
    }
    set qpI(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get qpP() {
        return this.#view.getInt32(4, LE);
    }
    set qpP(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get qpB() {
        return this.#view.getInt32(8, LE);
    }
    set qpB(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VideoEncodeH265FrameSizeEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265FrameSizeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265FrameSizeEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265FrameSizeEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265FrameSizeEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.frameISize && (this.frameISize = data.frameISize), void 0 !== data.framePSize && (this.framePSize = data.framePSize), void 0 !== data.frameBSize && (this.frameBSize = data.frameBSize);
    }
    get frameISize() {
        return this.#view.getUint32(0, LE);
    }
    set frameISize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get framePSize() {
        return this.#view.getUint32(4, LE);
    }
    set framePSize(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get frameBSize() {
        return this.#view.getUint32(8, LE);
    }
    set frameBSize(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VideoEncodeH265RateControlLayerInfoEXT {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265RateControlLayerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265RateControlLayerInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265RateControlLayerInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265RateControlLayerInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.temporalId && (this.temporalId = data.temporalId), void 0 !== data.useInitialRcQp && (this.useInitialRcQp = data.useInitialRcQp), void 0 !== data.initialRcQp && (this.initialRcQp = data.initialRcQp), void 0 !== data.useMinQp && (this.useMinQp = data.useMinQp), void 0 !== data.minQp && (this.minQp = data.minQp), void 0 !== data.useMaxQp && (this.useMaxQp = data.useMaxQp), void 0 !== data.maxQp && (this.maxQp = data.maxQp), void 0 !== data.useMaxFrameSize && (this.useMaxFrameSize = data.useMaxFrameSize), void 0 !== data.maxFrameSize && (this.maxFrameSize = data.maxFrameSize);
        this.sType = StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get temporalId() {
        return this.#view.getUint8(16);
    }
    set temporalId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get useInitialRcQp() {
        return this.#view.getUint32(20, LE);
    }
    set useInitialRcQp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get initialRcQp() {
        return new VideoEncodeH265QpEXT(this.#data.subarray(24, 24 + VideoEncodeH265QpEXT.size));
    }
    set initialRcQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get useMinQp() {
        return this.#view.getUint32(36, LE);
    }
    set useMinQp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minQp() {
        return new VideoEncodeH265QpEXT(this.#data.subarray(40, 40 + VideoEncodeH265QpEXT.size));
    }
    set minQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get useMaxQp() {
        return this.#view.getUint32(52, LE);
    }
    set useMaxQp(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxQp() {
        return new VideoEncodeH265QpEXT(this.#data.subarray(56, 56 + VideoEncodeH265QpEXT.size));
    }
    set maxQp(value) {
        if (value[BUFFER].byteLength < VideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get useMaxFrameSize() {
        return this.#view.getUint32(68, LE);
    }
    set useMaxFrameSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxFrameSize() {
        return new VideoEncodeH265FrameSizeEXT(this.#data.subarray(72, 72 + VideoEncodeH265FrameSizeEXT.size));
    }
    set maxFrameSize(value) {
        if (value[BUFFER].byteLength < VideoEncodeH265FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VideoEncodeH265ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265ProfileInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265ProfileInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265ProfileInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.stdProfileIdc && (this.stdProfileIdc = data.stdProfileIdc);
        this.sType = StructureType.VIDEO_ENCODE_H265_PROFILE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VideoEncodeH265DpbSlotInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265DpbSlotInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265DpbSlotInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.slotIndex && (this.slotIndex = data.slotIndex), void 0 !== data.pStdReferenceInfo && (this.pStdReferenceInfo = data.pStdReferenceInfo);
        this.sType = StructureType.VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get slotIndex() {
        return this.#view.getInt8(16);
    }
    set slotIndex(value) {
        this.#view.setInt8(16, Number(value));
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class VideoEncodeH265ReferenceListsInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(VideoEncodeH265ReferenceListsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, VideoEncodeH265ReferenceListsInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < VideoEncodeH265ReferenceListsInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(VideoEncodeH265ReferenceListsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.referenceList0EntryCount && (this.referenceList0EntryCount = data.referenceList0EntryCount), void 0 !== data.pReferenceList0Entries && (this.pReferenceList0Entries = data.pReferenceList0Entries), void 0 !== data.referenceList1EntryCount && (this.referenceList1EntryCount = data.referenceList1EntryCount), void 0 !== data.pReferenceList1Entries && (this.pReferenceList1Entries = data.pReferenceList1Entries), void 0 !== data.pReferenceModifications && (this.pReferenceModifications = data.pReferenceModifications);
        this.sType = StructureType.VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get referenceList0EntryCount() {
        return this.#view.getUint8(16);
    }
    set referenceList0EntryCount(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pReferenceList0Entries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceList0Entries(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get referenceList1EntryCount() {
        return this.#view.getUint8(32);
    }
    set referenceList1EntryCount(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pReferenceList1Entries() {
        return this.#view.getBigUint64(40, LE);
    }
    set pReferenceList1Entries(value) {
        this.#view.setBigUint64(40, BigInt(anyPointer(value)), LE);
    }
    get pReferenceModifications() {
        return this.#view.getBigUint64(48, LE);
    }
    set pReferenceModifications(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceInheritedViewportScissorFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceInheritedViewportScissorFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceInheritedViewportScissorFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceInheritedViewportScissorFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceInheritedViewportScissorFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.inheritedViewportScissor2D && (this.inheritedViewportScissor2D = data.inheritedViewportScissor2D);
        this.sType = StructureType.PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get inheritedViewportScissor2D() {
        return this.#view.getUint32(16, LE);
    }
    set inheritedViewportScissor2D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CommandBufferInheritanceViewportScissorInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferInheritanceViewportScissorInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferInheritanceViewportScissorInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferInheritanceViewportScissorInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferInheritanceViewportScissorInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.viewportScissor2D && (this.viewportScissor2D = data.viewportScissor2D), void 0 !== data.viewportDepthCount && (this.viewportDepthCount = data.viewportDepthCount), void 0 !== data.pViewportDepths && (this.pViewportDepths = data.pViewportDepths);
        this.sType = StructureType.COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get viewportScissor2D() {
        return this.#view.getUint32(16, LE);
    }
    set viewportScissor2D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportDepthCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportDepthCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportDepths() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportDepths(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.ycbcr2plane444Formats && (this.ycbcr2plane444Formats = data.ycbcr2plane444Formats);
        this.sType = StructureType.PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get ycbcr2plane444Formats() {
        return this.#view.getUint32(16, LE);
    }
    set ycbcr2plane444Formats(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceProvokingVertexFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProvokingVertexFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProvokingVertexFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProvokingVertexFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProvokingVertexFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.provokingVertexLast && (this.provokingVertexLast = data.provokingVertexLast), void 0 !== data.transformFeedbackPreservesProvokingVertex && (this.transformFeedbackPreservesProvokingVertex = data.transformFeedbackPreservesProvokingVertex);
        this.sType = StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get provokingVertexLast() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexLast(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transformFeedbackPreservesProvokingVertex() {
        return this.#view.getUint32(20, LE);
    }
    set transformFeedbackPreservesProvokingVertex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceProvokingVertexPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceProvokingVertexPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceProvokingVertexPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceProvokingVertexPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceProvokingVertexPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.provokingVertexModePerPipeline && (this.provokingVertexModePerPipeline = data.provokingVertexModePerPipeline), void 0 !== data.transformFeedbackPreservesTriangleFanProvokingVertex && (this.transformFeedbackPreservesTriangleFanProvokingVertex = data.transformFeedbackPreservesTriangleFanProvokingVertex);
        this.sType = StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get provokingVertexModePerPipeline() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexModePerPipeline(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transformFeedbackPreservesTriangleFanProvokingVertex() {
        return this.#view.getUint32(20, LE);
    }
    set transformFeedbackPreservesTriangleFanProvokingVertex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PipelineRasterizationProvokingVertexStateCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRasterizationProvokingVertexStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRasterizationProvokingVertexStateCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRasterizationProvokingVertexStateCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRasterizationProvokingVertexStateCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.provokingVertexMode && (this.provokingVertexMode = data.provokingVertexMode);
        this.sType = StructureType.PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get provokingVertexMode() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CuModuleCreateInfoNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CuModuleCreateInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CuModuleCreateInfoNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CuModuleCreateInfoNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CuModuleCreateInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dataSize && (this.dataSize = data.dataSize), void 0 !== data.pData && (this.pData = data.pData);
        this.sType = StructureType.CU_MODULE_CREATE_INFO_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class CuFunctionCreateInfoNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CuFunctionCreateInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CuFunctionCreateInfoNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CuFunctionCreateInfoNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CuFunctionCreateInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.module && (this.module = data.module), void 0 !== data.pName && (this.pName = data.pName);
        this.sType = StructureType.CU_FUNCTION_CREATE_INFO_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get module() {
        return this.#view.getBigUint64(16, LE);
    }
    set module(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get pName() {
        return this.#view.getBigUint64(24, LE);
    }
    set pName(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class CuLaunchInfoNVX {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CuLaunchInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CuLaunchInfoNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CuLaunchInfoNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CuLaunchInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vk_function && (this.vk_function = data.vk_function), void 0 !== data.gridDimX && (this.gridDimX = data.gridDimX), void 0 !== data.gridDimY && (this.gridDimY = data.gridDimY), void 0 !== data.gridDimZ && (this.gridDimZ = data.gridDimZ), void 0 !== data.blockDimX && (this.blockDimX = data.blockDimX), void 0 !== data.blockDimY && (this.blockDimY = data.blockDimY), void 0 !== data.blockDimZ && (this.blockDimZ = data.blockDimZ), void 0 !== data.sharedMemBytes && (this.sharedMemBytes = data.sharedMemBytes), void 0 !== data.paramCount && (this.paramCount = data.paramCount), void 0 !== data.pParams && (this.pParams = data.pParams), void 0 !== data.extraCount && (this.extraCount = data.extraCount), void 0 !== data.pExtras && (this.pExtras = data.pExtras);
        this.sType = StructureType.CU_LAUNCH_INFO_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vk_function() {
        return this.#view.getBigUint64(16, LE);
    }
    set vk_function(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get gridDimX() {
        return this.#view.getUint32(24, LE);
    }
    set gridDimX(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get gridDimY() {
        return this.#view.getUint32(28, LE);
    }
    set gridDimY(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get gridDimZ() {
        return this.#view.getUint32(32, LE);
    }
    set gridDimZ(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get blockDimX() {
        return this.#view.getUint32(36, LE);
    }
    set blockDimX(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get blockDimY() {
        return this.#view.getUint32(40, LE);
    }
    set blockDimY(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get blockDimZ() {
        return this.#view.getUint32(44, LE);
    }
    set blockDimZ(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get sharedMemBytes() {
        return this.#view.getUint32(48, LE);
    }
    set sharedMemBytes(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get paramCount() {
        return this.#view.getBigUint64(56, LE);
    }
    set paramCount(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pParams() {
        return this.#view.getBigUint64(64, LE);
    }
    set pParams(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
    get extraCount() {
        return this.#view.getBigUint64(72, LE);
    }
    set extraCount(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get pExtras() {
        return this.#view.getBigUint64(80, LE);
    }
    set pExtras(value) {
        this.#view.setBigUint64(80, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceDescriptorBufferFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorBufferFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorBufferFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorBuffer && (this.descriptorBuffer = data.descriptorBuffer), void 0 !== data.descriptorBufferCaptureReplay && (this.descriptorBufferCaptureReplay = data.descriptorBufferCaptureReplay), void 0 !== data.descriptorBufferImageLayoutIgnored && (this.descriptorBufferImageLayoutIgnored = data.descriptorBufferImageLayoutIgnored), void 0 !== data.descriptorBufferPushDescriptors && (this.descriptorBufferPushDescriptors = data.descriptorBufferPushDescriptors);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorBuffer() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorBuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorBufferCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorBufferCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get descriptorBufferImageLayoutIgnored() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorBufferImageLayoutIgnored(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get descriptorBufferPushDescriptors() {
        return this.#view.getUint32(28, LE);
    }
    set descriptorBufferPushDescriptors(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceDescriptorBufferPropertiesEXT {
    static size = 256;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorBufferPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorBufferPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.combinedImageSamplerDescriptorSingleArray && (this.combinedImageSamplerDescriptorSingleArray = data.combinedImageSamplerDescriptorSingleArray), void 0 !== data.bufferlessPushDescriptors && (this.bufferlessPushDescriptors = data.bufferlessPushDescriptors), void 0 !== data.allowSamplerImageViewPostSubmitCreation && (this.allowSamplerImageViewPostSubmitCreation = data.allowSamplerImageViewPostSubmitCreation), void 0 !== data.descriptorBufferOffsetAlignment && (this.descriptorBufferOffsetAlignment = data.descriptorBufferOffsetAlignment), void 0 !== data.maxDescriptorBufferBindings && (this.maxDescriptorBufferBindings = data.maxDescriptorBufferBindings), void 0 !== data.maxResourceDescriptorBufferBindings && (this.maxResourceDescriptorBufferBindings = data.maxResourceDescriptorBufferBindings), void 0 !== data.maxSamplerDescriptorBufferBindings && (this.maxSamplerDescriptorBufferBindings = data.maxSamplerDescriptorBufferBindings), void 0 !== data.maxEmbeddedImmutableSamplerBindings && (this.maxEmbeddedImmutableSamplerBindings = data.maxEmbeddedImmutableSamplerBindings), void 0 !== data.maxEmbeddedImmutableSamplers && (this.maxEmbeddedImmutableSamplers = data.maxEmbeddedImmutableSamplers), void 0 !== data.bufferCaptureReplayDescriptorDataSize && (this.bufferCaptureReplayDescriptorDataSize = data.bufferCaptureReplayDescriptorDataSize), void 0 !== data.imageCaptureReplayDescriptorDataSize && (this.imageCaptureReplayDescriptorDataSize = data.imageCaptureReplayDescriptorDataSize), void 0 !== data.imageViewCaptureReplayDescriptorDataSize && (this.imageViewCaptureReplayDescriptorDataSize = data.imageViewCaptureReplayDescriptorDataSize), void 0 !== data.samplerCaptureReplayDescriptorDataSize && (this.samplerCaptureReplayDescriptorDataSize = data.samplerCaptureReplayDescriptorDataSize), void 0 !== data.accelerationStructureCaptureReplayDescriptorDataSize && (this.accelerationStructureCaptureReplayDescriptorDataSize = data.accelerationStructureCaptureReplayDescriptorDataSize), void 0 !== data.samplerDescriptorSize && (this.samplerDescriptorSize = data.samplerDescriptorSize), void 0 !== data.combinedImageSamplerDescriptorSize && (this.combinedImageSamplerDescriptorSize = data.combinedImageSamplerDescriptorSize), void 0 !== data.sampledImageDescriptorSize && (this.sampledImageDescriptorSize = data.sampledImageDescriptorSize), void 0 !== data.storageImageDescriptorSize && (this.storageImageDescriptorSize = data.storageImageDescriptorSize), void 0 !== data.uniformTexelBufferDescriptorSize && (this.uniformTexelBufferDescriptorSize = data.uniformTexelBufferDescriptorSize), void 0 !== data.robustUniformTexelBufferDescriptorSize && (this.robustUniformTexelBufferDescriptorSize = data.robustUniformTexelBufferDescriptorSize), void 0 !== data.storageTexelBufferDescriptorSize && (this.storageTexelBufferDescriptorSize = data.storageTexelBufferDescriptorSize), void 0 !== data.robustStorageTexelBufferDescriptorSize && (this.robustStorageTexelBufferDescriptorSize = data.robustStorageTexelBufferDescriptorSize), void 0 !== data.uniformBufferDescriptorSize && (this.uniformBufferDescriptorSize = data.uniformBufferDescriptorSize), void 0 !== data.robustUniformBufferDescriptorSize && (this.robustUniformBufferDescriptorSize = data.robustUniformBufferDescriptorSize), void 0 !== data.storageBufferDescriptorSize && (this.storageBufferDescriptorSize = data.storageBufferDescriptorSize), void 0 !== data.robustStorageBufferDescriptorSize && (this.robustStorageBufferDescriptorSize = data.robustStorageBufferDescriptorSize), void 0 !== data.inputAttachmentDescriptorSize && (this.inputAttachmentDescriptorSize = data.inputAttachmentDescriptorSize), void 0 !== data.accelerationStructureDescriptorSize && (this.accelerationStructureDescriptorSize = data.accelerationStructureDescriptorSize), void 0 !== data.maxSamplerDescriptorBufferRange && (this.maxSamplerDescriptorBufferRange = data.maxSamplerDescriptorBufferRange), void 0 !== data.maxResourceDescriptorBufferRange && (this.maxResourceDescriptorBufferRange = data.maxResourceDescriptorBufferRange), void 0 !== data.samplerDescriptorBufferAddressSpaceSize && (this.samplerDescriptorBufferAddressSpaceSize = data.samplerDescriptorBufferAddressSpaceSize), void 0 !== data.resourceDescriptorBufferAddressSpaceSize && (this.resourceDescriptorBufferAddressSpaceSize = data.resourceDescriptorBufferAddressSpaceSize), void 0 !== data.descriptorBufferAddressSpaceSize && (this.descriptorBufferAddressSpaceSize = data.descriptorBufferAddressSpaceSize);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get combinedImageSamplerDescriptorSingleArray() {
        return this.#view.getUint32(16, LE);
    }
    set combinedImageSamplerDescriptorSingleArray(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferlessPushDescriptors() {
        return this.#view.getUint32(20, LE);
    }
    set bufferlessPushDescriptors(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get allowSamplerImageViewPostSubmitCreation() {
        return this.#view.getUint32(24, LE);
    }
    set allowSamplerImageViewPostSubmitCreation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get descriptorBufferOffsetAlignment() {
        return this.#view.getBigUint64(32, LE);
    }
    set descriptorBufferOffsetAlignment(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxDescriptorBufferBindings() {
        return this.#view.getUint32(40, LE);
    }
    set maxDescriptorBufferBindings(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxResourceDescriptorBufferBindings() {
        return this.#view.getUint32(44, LE);
    }
    set maxResourceDescriptorBufferBindings(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxSamplerDescriptorBufferBindings() {
        return this.#view.getUint32(48, LE);
    }
    set maxSamplerDescriptorBufferBindings(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxEmbeddedImmutableSamplerBindings() {
        return this.#view.getUint32(52, LE);
    }
    set maxEmbeddedImmutableSamplerBindings(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxEmbeddedImmutableSamplers() {
        return this.#view.getUint32(56, LE);
    }
    set maxEmbeddedImmutableSamplers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get bufferCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(64, LE);
    }
    set bufferCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get imageCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(72, LE);
    }
    set imageCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get imageViewCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(80, LE);
    }
    set imageViewCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get samplerCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(88, LE);
    }
    set samplerCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get accelerationStructureCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(96, LE);
    }
    set accelerationStructureCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get samplerDescriptorSize() {
        return this.#view.getBigUint64(104, LE);
    }
    set samplerDescriptorSize(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
    get combinedImageSamplerDescriptorSize() {
        return this.#view.getBigUint64(112, LE);
    }
    set combinedImageSamplerDescriptorSize(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get sampledImageDescriptorSize() {
        return this.#view.getBigUint64(120, LE);
    }
    set sampledImageDescriptorSize(value) {
        this.#view.setBigUint64(120, BigInt(value), LE);
    }
    get storageImageDescriptorSize() {
        return this.#view.getBigUint64(128, LE);
    }
    set storageImageDescriptorSize(value) {
        this.#view.setBigUint64(128, BigInt(value), LE);
    }
    get uniformTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(136, LE);
    }
    set uniformTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(136, BigInt(value), LE);
    }
    get robustUniformTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(144, LE);
    }
    set robustUniformTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(144, BigInt(value), LE);
    }
    get storageTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(152, LE);
    }
    set storageTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(152, BigInt(value), LE);
    }
    get robustStorageTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(160, LE);
    }
    set robustStorageTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(160, BigInt(value), LE);
    }
    get uniformBufferDescriptorSize() {
        return this.#view.getBigUint64(168, LE);
    }
    set uniformBufferDescriptorSize(value) {
        this.#view.setBigUint64(168, BigInt(value), LE);
    }
    get robustUniformBufferDescriptorSize() {
        return this.#view.getBigUint64(176, LE);
    }
    set robustUniformBufferDescriptorSize(value) {
        this.#view.setBigUint64(176, BigInt(value), LE);
    }
    get storageBufferDescriptorSize() {
        return this.#view.getBigUint64(184, LE);
    }
    set storageBufferDescriptorSize(value) {
        this.#view.setBigUint64(184, BigInt(value), LE);
    }
    get robustStorageBufferDescriptorSize() {
        return this.#view.getBigUint64(192, LE);
    }
    set robustStorageBufferDescriptorSize(value) {
        this.#view.setBigUint64(192, BigInt(value), LE);
    }
    get inputAttachmentDescriptorSize() {
        return this.#view.getBigUint64(200, LE);
    }
    set inputAttachmentDescriptorSize(value) {
        this.#view.setBigUint64(200, BigInt(value), LE);
    }
    get accelerationStructureDescriptorSize() {
        return this.#view.getBigUint64(208, LE);
    }
    set accelerationStructureDescriptorSize(value) {
        this.#view.setBigUint64(208, BigInt(value), LE);
    }
    get maxSamplerDescriptorBufferRange() {
        return this.#view.getBigUint64(216, LE);
    }
    set maxSamplerDescriptorBufferRange(value) {
        this.#view.setBigUint64(216, BigInt(value), LE);
    }
    get maxResourceDescriptorBufferRange() {
        return this.#view.getBigUint64(224, LE);
    }
    set maxResourceDescriptorBufferRange(value) {
        this.#view.setBigUint64(224, BigInt(value), LE);
    }
    get samplerDescriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(232, LE);
    }
    set samplerDescriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(232, BigInt(value), LE);
    }
    get resourceDescriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(240, LE);
    }
    set resourceDescriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(240, BigInt(value), LE);
    }
    get descriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(248, LE);
    }
    set descriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(248, BigInt(value), LE);
    }
}
export class PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.combinedImageSamplerDensityMapDescriptorSize && (this.combinedImageSamplerDensityMapDescriptorSize = data.combinedImageSamplerDensityMapDescriptorSize);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get combinedImageSamplerDensityMapDescriptorSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set combinedImageSamplerDensityMapDescriptorSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class DescriptorAddressInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorAddressInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorAddressInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorAddressInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorAddressInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.address && (this.address = data.address), void 0 !== data.range && (this.range = data.range), void 0 !== data.format && (this.format = data.format);
        this.sType = StructureType.DESCRIPTOR_ADDRESS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get address() {
        return this.#view.getBigUint64(16, LE);
    }
    set address(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(24, LE);
    }
    set range(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(32, LE);
    }
    set format(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class DescriptorBufferBindingInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorBufferBindingInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorBufferBindingInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorBufferBindingInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorBufferBindingInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.address && (this.address = data.address), void 0 !== data.usage && (this.usage = data.usage);
        this.sType = StructureType.DESCRIPTOR_BUFFER_BINDING_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get address() {
        return this.#view.getBigUint64(16, LE);
    }
    set address(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(24, LE);
    }
    set usage(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class DescriptorBufferBindingPushDescriptorBufferHandleEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorBufferBindingPushDescriptorBufferHandleEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorBufferBindingPushDescriptorBufferHandleEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorBufferBindingPushDescriptorBufferHandleEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorBufferBindingPushDescriptorBufferHandleEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class DescriptorGetInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorGetInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorGetInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorGetInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorGetInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.data && (this.data = data.data);
        this.sType = StructureType.DESCRIPTOR_GET_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","u64"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","u64"]}');
    }
}
export class BufferCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCaptureDescriptorDataInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.buffer && (this.buffer = data.buffer);
        this.sType = StructureType.BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ImageCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCaptureDescriptorDataInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image);
        this.sType = StructureType.IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ImageViewCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewCaptureDescriptorDataInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageView && (this.imageView = data.imageView);
        this.sType = StructureType.IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class SamplerCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SamplerCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SamplerCaptureDescriptorDataInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SamplerCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SamplerCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.sampler && (this.sampler = data.sampler);
        this.sType = StructureType.SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get sampler() {
        return this.#view.getBigUint64(16, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class AccelerationStructureCaptureDescriptorDataInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureCaptureDescriptorDataInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureCaptureDescriptorDataInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.accelerationStructure && (this.accelerationStructure = data.accelerationStructure), void 0 !== data.accelerationStructureNV && (this.accelerationStructureNV = data.accelerationStructureNV);
        this.sType = StructureType.ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get accelerationStructureNV() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureNV(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class OpaqueCaptureDescriptorDataCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpaqueCaptureDescriptorDataCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpaqueCaptureDescriptorDataCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpaqueCaptureDescriptorDataCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpaqueCaptureDescriptorDataCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.opaqueCaptureDescriptorData && (this.opaqueCaptureDescriptorData = data.opaqueCaptureDescriptorData);
        this.sType = StructureType.OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get opaqueCaptureDescriptorData() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureDescriptorData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceShaderIntegerDotProductFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderIntegerDotProductFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderIntegerDotProductFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderIntegerDotProductFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderIntegerDotProductFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderIntegerDotProduct && (this.shaderIntegerDotProduct = data.shaderIntegerDotProduct);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderIntegerDotProduct() {
        return this.#view.getUint32(16, LE);
    }
    set shaderIntegerDotProduct(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderIntegerDotProductProperties {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderIntegerDotProductProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderIntegerDotProductProperties.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderIntegerDotProductProperties.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderIntegerDotProductProperties.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.integerDotProduct8BitUnsignedAccelerated && (this.integerDotProduct8BitUnsignedAccelerated = data.integerDotProduct8BitUnsignedAccelerated), void 0 !== data.integerDotProduct8BitSignedAccelerated && (this.integerDotProduct8BitSignedAccelerated = data.integerDotProduct8BitSignedAccelerated), void 0 !== data.integerDotProduct8BitMixedSignednessAccelerated && (this.integerDotProduct8BitMixedSignednessAccelerated = data.integerDotProduct8BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct4x8BitPackedUnsignedAccelerated && (this.integerDotProduct4x8BitPackedUnsignedAccelerated = data.integerDotProduct4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedSignedAccelerated && (this.integerDotProduct4x8BitPackedSignedAccelerated = data.integerDotProduct4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedMixedSignednessAccelerated && (this.integerDotProduct4x8BitPackedMixedSignednessAccelerated = data.integerDotProduct4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProduct16BitUnsignedAccelerated && (this.integerDotProduct16BitUnsignedAccelerated = data.integerDotProduct16BitUnsignedAccelerated), void 0 !== data.integerDotProduct16BitSignedAccelerated && (this.integerDotProduct16BitSignedAccelerated = data.integerDotProduct16BitSignedAccelerated), void 0 !== data.integerDotProduct16BitMixedSignednessAccelerated && (this.integerDotProduct16BitMixedSignednessAccelerated = data.integerDotProduct16BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct32BitUnsignedAccelerated && (this.integerDotProduct32BitUnsignedAccelerated = data.integerDotProduct32BitUnsignedAccelerated), void 0 !== data.integerDotProduct32BitSignedAccelerated && (this.integerDotProduct32BitSignedAccelerated = data.integerDotProduct32BitSignedAccelerated), void 0 !== data.integerDotProduct32BitMixedSignednessAccelerated && (this.integerDotProduct32BitMixedSignednessAccelerated = data.integerDotProduct32BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct64BitUnsignedAccelerated && (this.integerDotProduct64BitUnsignedAccelerated = data.integerDotProduct64BitUnsignedAccelerated), void 0 !== data.integerDotProduct64BitSignedAccelerated && (this.integerDotProduct64BitSignedAccelerated = data.integerDotProduct64BitSignedAccelerated), void 0 !== data.integerDotProduct64BitMixedSignednessAccelerated && (this.integerDotProduct64BitMixedSignednessAccelerated = data.integerDotProduct64BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating8BitSignedAccelerated = data.integerDotProductAccumulatingSaturating8BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating16BitSignedAccelerated = data.integerDotProductAccumulatingSaturating16BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating32BitSignedAccelerated = data.integerDotProductAccumulatingSaturating32BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated && (this.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitSignedAccelerated && (this.integerDotProductAccumulatingSaturating64BitSignedAccelerated = data.integerDotProductAccumulatingSaturating64BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated && (this.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get integerDotProduct8BitUnsignedAccelerated() {
        return this.#view.getUint32(16, LE);
    }
    set integerDotProduct8BitUnsignedAccelerated(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get integerDotProduct8BitSignedAccelerated() {
        return this.#view.getUint32(20, LE);
    }
    set integerDotProduct8BitSignedAccelerated(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get integerDotProduct8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(24, LE);
    }
    set integerDotProduct8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(28, LE);
    }
    set integerDotProduct4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(32, LE);
    }
    set integerDotProduct4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(36, LE);
    }
    set integerDotProduct4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get integerDotProduct16BitUnsignedAccelerated() {
        return this.#view.getUint32(40, LE);
    }
    set integerDotProduct16BitUnsignedAccelerated(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get integerDotProduct16BitSignedAccelerated() {
        return this.#view.getUint32(44, LE);
    }
    set integerDotProduct16BitSignedAccelerated(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get integerDotProduct16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(48, LE);
    }
    set integerDotProduct16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get integerDotProduct32BitUnsignedAccelerated() {
        return this.#view.getUint32(52, LE);
    }
    set integerDotProduct32BitUnsignedAccelerated(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get integerDotProduct32BitSignedAccelerated() {
        return this.#view.getUint32(56, LE);
    }
    set integerDotProduct32BitSignedAccelerated(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get integerDotProduct32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(60, LE);
    }
    set integerDotProduct32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get integerDotProduct64BitUnsignedAccelerated() {
        return this.#view.getUint32(64, LE);
    }
    set integerDotProduct64BitUnsignedAccelerated(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get integerDotProduct64BitSignedAccelerated() {
        return this.#view.getUint32(68, LE);
    }
    set integerDotProduct64BitSignedAccelerated(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get integerDotProduct64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(72, LE);
    }
    set integerDotProduct64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitUnsignedAccelerated() {
        return this.#view.getUint32(76, LE);
    }
    set integerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitSignedAccelerated() {
        return this.#view.getUint32(80, LE);
    }
    set integerDotProductAccumulatingSaturating8BitSignedAccelerated(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(84, LE);
    }
    set integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(88, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(92, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(96, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitUnsignedAccelerated() {
        return this.#view.getUint32(100, LE);
    }
    set integerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitSignedAccelerated() {
        return this.#view.getUint32(104, LE);
    }
    set integerDotProductAccumulatingSaturating16BitSignedAccelerated(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(108, LE);
    }
    set integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitUnsignedAccelerated() {
        return this.#view.getUint32(112, LE);
    }
    set integerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitSignedAccelerated() {
        return this.#view.getUint32(116, LE);
    }
    set integerDotProductAccumulatingSaturating32BitSignedAccelerated(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(120, LE);
    }
    set integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitUnsignedAccelerated() {
        return this.#view.getUint32(124, LE);
    }
    set integerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitSignedAccelerated() {
        return this.#view.getUint32(128, LE);
    }
    set integerDotProductAccumulatingSaturating64BitSignedAccelerated(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(132, LE);
    }
    set integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
}
export class PhysicalDeviceDrmPropertiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDrmPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDrmPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDrmPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDrmPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.hasPrimary && (this.hasPrimary = data.hasPrimary), void 0 !== data.hasRender && (this.hasRender = data.hasRender), void 0 !== data.primaryMajor && (this.primaryMajor = data.primaryMajor), void 0 !== data.primaryMinor && (this.primaryMinor = data.primaryMinor), void 0 !== data.renderMajor && (this.renderMajor = data.renderMajor), void 0 !== data.renderMinor && (this.renderMinor = data.renderMinor);
        this.sType = StructureType.PHYSICAL_DEVICE_DRM_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get hasPrimary() {
        return this.#view.getUint32(16, LE);
    }
    set hasPrimary(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get hasRender() {
        return this.#view.getUint32(20, LE);
    }
    set hasRender(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primaryMajor() {
        return this.#view.getBigInt64(24, LE);
    }
    set primaryMajor(value) {
        this.#view.setBigInt64(24, BigInt(value), LE);
    }
    get primaryMinor() {
        return this.#view.getBigInt64(32, LE);
    }
    set primaryMinor(value) {
        this.#view.setBigInt64(32, BigInt(value), LE);
    }
    get renderMajor() {
        return this.#view.getBigInt64(40, LE);
    }
    set renderMajor(value) {
        this.#view.setBigInt64(40, BigInt(value), LE);
    }
    get renderMinor() {
        return this.#view.getBigInt64(48, LE);
    }
    set renderMinor(value) {
        this.#view.setBigInt64(48, BigInt(value), LE);
    }
}
export class PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.fragmentShaderBarycentric && (this.fragmentShaderBarycentric = data.fragmentShaderBarycentric);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get fragmentShaderBarycentric() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShaderBarycentric(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.triStripVertexOrderIndependentOfProvokingVertex && (this.triStripVertexOrderIndependentOfProvokingVertex = data.triStripVertexOrderIndependentOfProvokingVertex);
        this.sType = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get triStripVertexOrderIndependentOfProvokingVertex() {
        return this.#view.getUint32(16, LE);
    }
    set triStripVertexOrderIndependentOfProvokingVertex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingMotionBlurFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingMotionBlurFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingMotionBlurFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingMotionBlurFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingMotionBlurFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayTracingMotionBlur && (this.rayTracingMotionBlur = data.rayTracingMotionBlur), void 0 !== data.rayTracingMotionBlurPipelineTraceRaysIndirect && (this.rayTracingMotionBlurPipelineTraceRaysIndirect = data.rayTracingMotionBlurPipelineTraceRaysIndirect);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayTracingMotionBlur() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingMotionBlur(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingMotionBlurPipelineTraceRaysIndirect() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingMotionBlurPipelineTraceRaysIndirect(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class AccelerationStructureGeometryMotionTrianglesDataNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureGeometryMotionTrianglesDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureGeometryMotionTrianglesDataNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureGeometryMotionTrianglesDataNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureGeometryMotionTrianglesDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.vertexData && (this.vertexData = data.vertexData);
        this.sType = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get vertexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set vertexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class AccelerationStructureMotionInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureMotionInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureMotionInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureMotionInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureMotionInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxInstances && (this.maxInstances = data.maxInstances), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.ACCELERATION_STRUCTURE_MOTION_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxInstances() {
        return this.#view.getUint32(16, LE);
    }
    set maxInstances(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class SRTDataNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SRTDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SRTDataNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SRTDataNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SRTDataNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.sx && (this.sx = data.sx), void 0 !== data.a && (this.a = data.a), void 0 !== data.b && (this.b = data.b), void 0 !== data.pvx && (this.pvx = data.pvx), void 0 !== data.sy && (this.sy = data.sy), void 0 !== data.c && (this.c = data.c), void 0 !== data.pvy && (this.pvy = data.pvy), void 0 !== data.sz && (this.sz = data.sz), void 0 !== data.pvz && (this.pvz = data.pvz), void 0 !== data.qx && (this.qx = data.qx), void 0 !== data.qy && (this.qy = data.qy), void 0 !== data.qz && (this.qz = data.qz), void 0 !== data.qw && (this.qw = data.qw), void 0 !== data.tx && (this.tx = data.tx), void 0 !== data.ty && (this.ty = data.ty), void 0 !== data.tz && (this.tz = data.tz);
    }
    get sx() {
        return this.#view.getFloat32(0, LE);
    }
    set sx(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get a() {
        return this.#view.getFloat32(4, LE);
    }
    set a(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get b() {
        return this.#view.getFloat32(8, LE);
    }
    set b(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get pvx() {
        return this.#view.getFloat32(12, LE);
    }
    set pvx(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get sy() {
        return this.#view.getFloat32(16, LE);
    }
    set sy(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get c() {
        return this.#view.getFloat32(20, LE);
    }
    set c(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
    get pvy() {
        return this.#view.getFloat32(24, LE);
    }
    set pvy(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
    get sz() {
        return this.#view.getFloat32(28, LE);
    }
    set sz(value) {
        this.#view.setFloat32(28, Number(value), LE);
    }
    get pvz() {
        return this.#view.getFloat32(32, LE);
    }
    set pvz(value) {
        this.#view.setFloat32(32, Number(value), LE);
    }
    get qx() {
        return this.#view.getFloat32(36, LE);
    }
    set qx(value) {
        this.#view.setFloat32(36, Number(value), LE);
    }
    get qy() {
        return this.#view.getFloat32(40, LE);
    }
    set qy(value) {
        this.#view.setFloat32(40, Number(value), LE);
    }
    get qz() {
        return this.#view.getFloat32(44, LE);
    }
    set qz(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get qw() {
        return this.#view.getFloat32(48, LE);
    }
    set qw(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get tx() {
        return this.#view.getFloat32(52, LE);
    }
    set tx(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get ty() {
        return this.#view.getFloat32(56, LE);
    }
    set ty(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
    get tz() {
        return this.#view.getFloat32(60, LE);
    }
    set tz(value) {
        this.#view.setFloat32(60, Number(value), LE);
    }
}
export class AccelerationStructureSRTMotionInstanceNV {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureSRTMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureSRTMotionInstanceNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureSRTMotionInstanceNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureSRTMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.transformT0 && (this.transformT0 = data.transformT0), void 0 !== data.transformT1 && (this.transformT1 = data.transformT1), void 0 !== data.instanceCustomIndex && (this.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (this.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (this.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.accelerationStructureReference && (this.accelerationStructureReference = data.accelerationStructureReference);
    }
    get transformT0() {
        return new SRTDataNV(this.#data.subarray(0, 0 + SRTDataNV.size));
    }
    set transformT0(value) {
        if (value[BUFFER].byteLength < SRTDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get transformT1() {
        return new SRTDataNV(this.#data.subarray(64, 64 + SRTDataNV.size));
    }
    set transformT1(value) {
        if (value[BUFFER].byteLength < SRTDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 64);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(128, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(132, LE);
    }
    set mask(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(136, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(140, LE);
    }
    set flags(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(144, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(144, BigInt(value), LE);
    }
}
export class AccelerationStructureMatrixMotionInstanceNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureMatrixMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureMatrixMotionInstanceNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureMatrixMotionInstanceNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureMatrixMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.transformT0 && (this.transformT0 = data.transformT0), void 0 !== data.transformT1 && (this.transformT1 = data.transformT1), void 0 !== data.instanceCustomIndex && (this.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (this.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (this.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.accelerationStructureReference && (this.accelerationStructureReference = data.accelerationStructureReference);
    }
    get transformT0() {
        return new TransformMatrixKHR(this.#data.subarray(0, 0 + TransformMatrixKHR.size));
    }
    set transformT0(value) {
        if (value[BUFFER].byteLength < TransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get transformT1() {
        return new TransformMatrixKHR(this.#data.subarray(4, 4 + TransformMatrixKHR.size));
    }
    set transformT1(value) {
        if (value[BUFFER].byteLength < TransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(8, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(12, LE);
    }
    set mask(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(16, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class AccelerationStructureMotionInstanceNV {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureMotionInstanceNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureMotionInstanceNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureMotionInstanceNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.type && (this.type = data.type), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.data && (this.data = data.data);
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(4, LE);
    }
    set flags(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":[{"struct":[{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32"]},{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},"u32","u32","u32","u32","u64"]}]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":[{"struct":[{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32"]},{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},"u32","u32","u32","u32","u64"]}]}');
    }
}
export class MemoryGetRemoteAddressInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MemoryGetRemoteAddressInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MemoryGetRemoteAddressInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MemoryGetRemoteAddressInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MemoryGetRemoteAddressInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.handleType && (this.handleType = data.handleType);
        this.sType = StructureType.MEMORY_GET_REMOTE_ADDRESS_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class ImportMemoryBufferCollectionFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMemoryBufferCollectionFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMemoryBufferCollectionFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMemoryBufferCollectionFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMemoryBufferCollectionFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.collection && (this.collection = data.collection), void 0 !== data.index && (this.index = data.index);
        this.sType = StructureType.IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class BufferCollectionImageCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCollectionImageCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCollectionImageCreateInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCollectionImageCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCollectionImageCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.collection && (this.collection = data.collection), void 0 !== data.index && (this.index = data.index);
        this.sType = StructureType.BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class BufferCollectionBufferCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCollectionBufferCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCollectionBufferCreateInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCollectionBufferCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCollectionBufferCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.collection && (this.collection = data.collection), void 0 !== data.index && (this.index = data.index);
        this.sType = StructureType.BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class BufferCollectionCreateInfoFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCollectionCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCollectionCreateInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCollectionCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCollectionCreateInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.collectionToken && (this.collectionToken = data.collectionToken);
        this.sType = StructureType.BUFFER_COLLECTION_CREATE_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get collectionToken() {
        return this.#view.getBigUint64(16, LE);
    }
    set collectionToken(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class BufferCollectionPropertiesFUCHSIA {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCollectionPropertiesFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCollectionPropertiesFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCollectionPropertiesFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCollectionPropertiesFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memoryTypeBits && (this.memoryTypeBits = data.memoryTypeBits), void 0 !== data.bufferCount && (this.bufferCount = data.bufferCount), void 0 !== data.createInfoIndex && (this.createInfoIndex = data.createInfoIndex), void 0 !== data.sysmemPixelFormat && (this.sysmemPixelFormat = data.sysmemPixelFormat), void 0 !== data.formatFeatures && (this.formatFeatures = data.formatFeatures), void 0 !== data.sysmemColorSpaceIndex && (this.sysmemColorSpaceIndex = data.sysmemColorSpaceIndex), void 0 !== data.samplerYcbcrConversionComponents && (this.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (this.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (this.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (this.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (this.suggestedYChromaOffset = data.suggestedYChromaOffset);
        this.sType = StructureType.BUFFER_COLLECTION_PROPERTIES_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferCount() {
        return this.#view.getUint32(20, LE);
    }
    set bufferCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get createInfoIndex() {
        return this.#view.getUint32(24, LE);
    }
    set createInfoIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sysmemPixelFormat() {
        return this.#view.getBigUint64(32, LE);
    }
    set sysmemPixelFormat(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getUint32(40, LE);
    }
    set formatFeatures(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get sysmemColorSpaceIndex() {
        return new SysmemColorSpaceFUCHSIA(this.#data.subarray(44, 44 + SysmemColorSpaceFUCHSIA.size));
    }
    set sysmemColorSpaceIndex(value) {
        if (value[BUFFER].byteLength < SysmemColorSpaceFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get samplerYcbcrConversionComponents() {
        return new ComponentMapping(this.#data.subarray(68, 68 + ComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 68);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(84, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(88, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(92, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(96, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
}
export class BufferConstraintsInfoFUCHSIA {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferConstraintsInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.createInfo && (this.createInfo = data.createInfo), void 0 !== data.requiredFormatFeatures && (this.requiredFormatFeatures = data.requiredFormatFeatures), void 0 !== data.bufferCollectionConstraints && (this.bufferCollectionConstraints = data.bufferCollectionConstraints);
        this.sType = StructureType.BUFFER_CONSTRAINTS_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get createInfo() {
        return new BufferCreateInfo(this.#data.subarray(16, 16 + BufferCreateInfo.size));
    }
    set createInfo(value) {
        if (value[BUFFER].byteLength < BufferCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get requiredFormatFeatures() {
        return this.#view.getUint32(72, LE);
    }
    set requiredFormatFeatures(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get bufferCollectionConstraints() {
        return new BufferCollectionConstraintsInfoFUCHSIA(this.#data.subarray(76, 76 + BufferCollectionConstraintsInfoFUCHSIA.size));
    }
    set bufferCollectionConstraints(value) {
        if (value[BUFFER].byteLength < BufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 76);
    }
}
export class SysmemColorSpaceFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SysmemColorSpaceFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SysmemColorSpaceFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SysmemColorSpaceFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SysmemColorSpaceFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.colorSpace && (this.colorSpace = data.colorSpace);
        this.sType = StructureType.SYSMEM_COLOR_SPACE_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get colorSpace() {
        return this.#view.getUint32(16, LE);
    }
    set colorSpace(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImageFormatConstraintsInfoFUCHSIA {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageFormatConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageFormatConstraintsInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageFormatConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageFormatConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageCreateInfo && (this.imageCreateInfo = data.imageCreateInfo), void 0 !== data.requiredFormatFeatures && (this.requiredFormatFeatures = data.requiredFormatFeatures), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.sysmemPixelFormat && (this.sysmemPixelFormat = data.sysmemPixelFormat), void 0 !== data.colorSpaceCount && (this.colorSpaceCount = data.colorSpaceCount), void 0 !== data.pColorSpaces && (this.pColorSpaces = data.pColorSpaces);
        this.sType = StructureType.IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageCreateInfo() {
        return new ImageCreateInfo(this.#data.subarray(16, 16 + ImageCreateInfo.size));
    }
    set imageCreateInfo(value) {
        if (value[BUFFER].byteLength < ImageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get requiredFormatFeatures() {
        return this.#view.getUint32(104, LE);
    }
    set requiredFormatFeatures(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(108, LE);
    }
    set flags(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get sysmemPixelFormat() {
        return this.#view.getBigUint64(112, LE);
    }
    set sysmemPixelFormat(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get colorSpaceCount() {
        return this.#view.getUint32(120, LE);
    }
    set colorSpaceCount(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pColorSpaces() {
        return this.#view.getBigUint64(128, LE);
    }
    set pColorSpaces(value) {
        this.#view.setBigUint64(128, BigInt(anyPointer(value)), LE);
    }
}
export class ImageConstraintsInfoFUCHSIA {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageConstraintsInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.formatConstraintsCount && (this.formatConstraintsCount = data.formatConstraintsCount), void 0 !== data.pFormatConstraints && (this.pFormatConstraints = data.pFormatConstraints), void 0 !== data.bufferCollectionConstraints && (this.bufferCollectionConstraints = data.bufferCollectionConstraints), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.IMAGE_CONSTRAINTS_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get formatConstraintsCount() {
        return this.#view.getUint32(16, LE);
    }
    set formatConstraintsCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pFormatConstraints() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFormatConstraints(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get bufferCollectionConstraints() {
        return new BufferCollectionConstraintsInfoFUCHSIA(this.#data.subarray(32, 32 + BufferCollectionConstraintsInfoFUCHSIA.size));
    }
    set bufferCollectionConstraints(value) {
        if (value[BUFFER].byteLength < BufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get flags() {
        return this.#view.getUint32(72, LE);
    }
    set flags(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class BufferCollectionConstraintsInfoFUCHSIA {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(BufferCollectionConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, BufferCollectionConstraintsInfoFUCHSIA.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < BufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(BufferCollectionConstraintsInfoFUCHSIA.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minBufferCount && (this.minBufferCount = data.minBufferCount), void 0 !== data.maxBufferCount && (this.maxBufferCount = data.maxBufferCount), void 0 !== data.minBufferCountForCamping && (this.minBufferCountForCamping = data.minBufferCountForCamping), void 0 !== data.minBufferCountForDedicatedSlack && (this.minBufferCountForDedicatedSlack = data.minBufferCountForDedicatedSlack), void 0 !== data.minBufferCountForSharedSlack && (this.minBufferCountForSharedSlack = data.minBufferCountForSharedSlack);
        this.sType = StructureType.BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minBufferCount() {
        return this.#view.getUint32(16, LE);
    }
    set minBufferCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxBufferCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxBufferCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get minBufferCountForCamping() {
        return this.#view.getUint32(24, LE);
    }
    set minBufferCountForCamping(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get minBufferCountForDedicatedSlack() {
        return this.#view.getUint32(28, LE);
    }
    set minBufferCountForDedicatedSlack(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get minBufferCountForSharedSlack() {
        return this.#view.getUint32(32, LE);
    }
    set minBufferCountForSharedSlack(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRGBA10X6FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRGBA10X6FormatsFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRGBA10X6FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRGBA10X6FormatsFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.formatRgba10x6WithoutYCbCrSampler && (this.formatRgba10x6WithoutYCbCrSampler = data.formatRgba10x6WithoutYCbCrSampler);
        this.sType = StructureType.PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get formatRgba10x6WithoutYCbCrSampler() {
        return this.#view.getUint32(16, LE);
    }
    set formatRgba10x6WithoutYCbCrSampler(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class FormatProperties3 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(FormatProperties3.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, FormatProperties3.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < FormatProperties3.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(FormatProperties3.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.linearTilingFeatures && (this.linearTilingFeatures = data.linearTilingFeatures), void 0 !== data.optimalTilingFeatures && (this.optimalTilingFeatures = data.optimalTilingFeatures), void 0 !== data.bufferFeatures && (this.bufferFeatures = data.bufferFeatures);
        this.sType = StructureType.FORMAT_PROPERTIES_3;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get linearTilingFeatures() {
        return this.#view.getBigUint64(16, LE);
    }
    set linearTilingFeatures(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get optimalTilingFeatures() {
        return this.#view.getBigUint64(24, LE);
    }
    set optimalTilingFeatures(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferFeatures() {
        return this.#view.getBigUint64(32, LE);
    }
    set bufferFeatures(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class DrmFormatModifierPropertiesList2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrmFormatModifierPropertiesList2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrmFormatModifierPropertiesList2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrmFormatModifierPropertiesList2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrmFormatModifierPropertiesList2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (this.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifierProperties && (this.pDrmFormatModifierProperties = data.pDrmFormatModifierProperties);
        this.sType = StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifierProperties() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifierProperties(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class DrmFormatModifierProperties2EXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DrmFormatModifierProperties2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DrmFormatModifierProperties2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DrmFormatModifierProperties2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DrmFormatModifierProperties2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.drmFormatModifier && (this.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (this.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.drmFormatModifierTilingFeatures && (this.drmFormatModifierTilingFeatures = data.drmFormatModifierTilingFeatures);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(0, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(8, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get drmFormatModifierTilingFeatures() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifierTilingFeatures(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class AndroidHardwareBufferFormatProperties2ANDROID {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AndroidHardwareBufferFormatProperties2ANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AndroidHardwareBufferFormatProperties2ANDROID.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AndroidHardwareBufferFormatProperties2ANDROID.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AndroidHardwareBufferFormatProperties2ANDROID.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format), void 0 !== data.externalFormat && (this.externalFormat = data.externalFormat), void 0 !== data.formatFeatures && (this.formatFeatures = data.formatFeatures), void 0 !== data.samplerYcbcrConversionComponents && (this.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (this.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (this.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (this.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (this.suggestedYChromaOffset = data.suggestedYChromaOffset);
        this.sType = StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(24, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getBigUint64(32, LE);
    }
    set formatFeatures(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get samplerYcbcrConversionComponents() {
        return new ComponentMapping(this.#data.subarray(40, 40 + ComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < ComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(56, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(60, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(64, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(68, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class PipelineRenderingCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRenderingCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRenderingCreateInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRenderingCreateInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRenderingCreateInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.viewMask && (this.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentFormats && (this.pColorAttachmentFormats = data.pColorAttachmentFormats), void 0 !== data.depthAttachmentFormat && (this.depthAttachmentFormat = data.depthAttachmentFormat), void 0 !== data.stencilAttachmentFormat && (this.stencilAttachmentFormat = data.stencilAttachmentFormat);
        this.sType = StructureType.PIPELINE_RENDERING_CREATE_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get viewMask() {
        return this.#view.getUint32(16, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pColorAttachmentFormats() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorAttachmentFormats(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get depthAttachmentFormat() {
        return this.#view.getUint32(32, LE);
    }
    set depthAttachmentFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilAttachmentFormat() {
        return this.#view.getUint32(36, LE);
    }
    set stencilAttachmentFormat(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class RenderingInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderingInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderingInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderingInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderingInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.renderArea && (this.renderArea = data.renderArea), void 0 !== data.layerCount && (this.layerCount = data.layerCount), void 0 !== data.viewMask && (this.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (this.pColorAttachments = data.pColorAttachments), void 0 !== data.pDepthAttachment && (this.pDepthAttachment = data.pDepthAttachment), void 0 !== data.pStencilAttachment && (this.pStencilAttachment = data.pStencilAttachment);
        this.sType = StructureType.RENDERING_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderArea() {
        return new Rect2D(this.#data.subarray(20, 20 + Rect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < Rect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get layerCount() {
        return this.#view.getUint32(36, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(40, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(44, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(48, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get pDepthAttachment() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDepthAttachment(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get pStencilAttachment() {
        return this.#view.getBigUint64(64, LE);
    }
    set pStencilAttachment(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class RenderingAttachmentInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderingAttachmentInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderingAttachmentInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderingAttachmentInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderingAttachmentInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.imageLayout && (this.imageLayout = data.imageLayout), void 0 !== data.resolveMode && (this.resolveMode = data.resolveMode), void 0 !== data.resolveImageView && (this.resolveImageView = data.resolveImageView), void 0 !== data.resolveImageLayout && (this.resolveImageLayout = data.resolveImageLayout), void 0 !== data.loadOp && (this.loadOp = data.loadOp), void 0 !== data.storeOp && (this.storeOp = data.storeOp), void 0 !== data.clearValue && (this.clearValue = data.clearValue);
        this.sType = StructureType.RENDERING_ATTACHMENT_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get resolveMode() {
        return this.#view.getUint32(28, LE);
    }
    set resolveMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get resolveImageView() {
        return this.#view.getBigUint64(32, LE);
    }
    set resolveImageView(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get resolveImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set resolveImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(44, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(48, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get clearValue() {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
    set clearValue(value) {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
}
export class RenderingFragmentShadingRateAttachmentInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderingFragmentShadingRateAttachmentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderingFragmentShadingRateAttachmentInfoKHR.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderingFragmentShadingRateAttachmentInfoKHR.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderingFragmentShadingRateAttachmentInfoKHR.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.imageLayout && (this.imageLayout = data.imageLayout), void 0 !== data.shadingRateAttachmentTexelSize && (this.shadingRateAttachmentTexelSize = data.shadingRateAttachmentTexelSize);
        this.sType = StructureType.RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shadingRateAttachmentTexelSize() {
        return new Extent2D(this.#data.subarray(28, 28 + Extent2D.size));
    }
    set shadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
}
export class RenderingFragmentDensityMapAttachmentInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderingFragmentDensityMapAttachmentInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderingFragmentDensityMapAttachmentInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderingFragmentDensityMapAttachmentInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderingFragmentDensityMapAttachmentInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.imageLayout && (this.imageLayout = data.imageLayout);
        this.sType = StructureType.RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceDynamicRenderingFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDynamicRenderingFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDynamicRenderingFeatures.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDynamicRenderingFeatures.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDynamicRenderingFeatures.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.dynamicRendering && (this.dynamicRendering = data.dynamicRendering);
        this.sType = StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get dynamicRendering() {
        return this.#view.getUint32(16, LE);
    }
    set dynamicRendering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class CommandBufferInheritanceRenderingInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CommandBufferInheritanceRenderingInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CommandBufferInheritanceRenderingInfo.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CommandBufferInheritanceRenderingInfo.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CommandBufferInheritanceRenderingInfo.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.viewMask && (this.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentFormats && (this.pColorAttachmentFormats = data.pColorAttachmentFormats), void 0 !== data.depthAttachmentFormat && (this.depthAttachmentFormat = data.depthAttachmentFormat), void 0 !== data.stencilAttachmentFormat && (this.stencilAttachmentFormat = data.stencilAttachmentFormat), void 0 !== data.rasterizationSamples && (this.rasterizationSamples = data.rasterizationSamples);
        this.sType = StructureType.COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(20, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(24, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pColorAttachmentFormats() {
        return this.#view.getBigUint64(32, LE);
    }
    set pColorAttachmentFormats(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get depthAttachmentFormat() {
        return this.#view.getUint32(40, LE);
    }
    set depthAttachmentFormat(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get stencilAttachmentFormat() {
        return this.#view.getUint32(44, LE);
    }
    set stencilAttachmentFormat(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(48, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class AttachmentSampleCountInfoAMD {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AttachmentSampleCountInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AttachmentSampleCountInfoAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AttachmentSampleCountInfoAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AttachmentSampleCountInfoAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.colorAttachmentCount && (this.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentSamples && (this.pColorAttachmentSamples = data.pColorAttachmentSamples), void 0 !== data.depthStencilAttachmentSamples && (this.depthStencilAttachmentSamples = data.depthStencilAttachmentSamples);
        this.sType = StructureType.ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pColorAttachmentSamples() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorAttachmentSamples(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get depthStencilAttachmentSamples() {
        return this.#view.getUint32(32, LE);
    }
    set depthStencilAttachmentSamples(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class MultiviewPerViewAttributesInfoNVX {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MultiviewPerViewAttributesInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MultiviewPerViewAttributesInfoNVX.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MultiviewPerViewAttributesInfoNVX.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MultiviewPerViewAttributesInfoNVX.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.perViewAttributes && (this.perViewAttributes = data.perViewAttributes), void 0 !== data.perViewAttributesPositionXOnly && (this.perViewAttributesPositionXOnly = data.perViewAttributesPositionXOnly);
        this.sType = StructureType.MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get perViewAttributes() {
        return this.#view.getUint32(16, LE);
    }
    set perViewAttributes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get perViewAttributesPositionXOnly() {
        return this.#view.getUint32(20, LE);
    }
    set perViewAttributesPositionXOnly(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceImageViewMinLodFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageViewMinLodFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageViewMinLodFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageViewMinLodFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageViewMinLodFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minLod && (this.minLod = data.minLod);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minLod() {
        return this.#view.getUint32(16, LE);
    }
    set minLod(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImageViewMinLodCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewMinLodCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewMinLodCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewMinLodCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewMinLodCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.minLod && (this.minLod = data.minLod);
        this.sType = StructureType.IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get minLod() {
        return this.#view.getFloat32(16, LE);
    }
    set minLod(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
}
export class PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rasterizationOrderColorAttachmentAccess && (this.rasterizationOrderColorAttachmentAccess = data.rasterizationOrderColorAttachmentAccess), void 0 !== data.rasterizationOrderDepthAttachmentAccess && (this.rasterizationOrderDepthAttachmentAccess = data.rasterizationOrderDepthAttachmentAccess), void 0 !== data.rasterizationOrderStencilAttachmentAccess && (this.rasterizationOrderStencilAttachmentAccess = data.rasterizationOrderStencilAttachmentAccess);
        this.sType = StructureType.PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rasterizationOrderColorAttachmentAccess() {
        return this.#view.getUint32(16, LE);
    }
    set rasterizationOrderColorAttachmentAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationOrderDepthAttachmentAccess() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationOrderDepthAttachmentAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rasterizationOrderStencilAttachmentAccess() {
        return this.#view.getUint32(24, LE);
    }
    set rasterizationOrderStencilAttachmentAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceLinearColorAttachmentFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceLinearColorAttachmentFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceLinearColorAttachmentFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceLinearColorAttachmentFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceLinearColorAttachmentFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.linearColorAttachment && (this.linearColorAttachment = data.linearColorAttachment);
        this.sType = StructureType.PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get linearColorAttachment() {
        return this.#view.getUint32(16, LE);
    }
    set linearColorAttachment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.graphicsPipelineLibrary && (this.graphicsPipelineLibrary = data.graphicsPipelineLibrary);
        this.sType = StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get graphicsPipelineLibrary() {
        return this.#view.getUint32(16, LE);
    }
    set graphicsPipelineLibrary(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.graphicsPipelineLibraryFastLinking && (this.graphicsPipelineLibraryFastLinking = data.graphicsPipelineLibraryFastLinking), void 0 !== data.graphicsPipelineLibraryIndependentInterpolationDecoration && (this.graphicsPipelineLibraryIndependentInterpolationDecoration = data.graphicsPipelineLibraryIndependentInterpolationDecoration);
        this.sType = StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get graphicsPipelineLibraryFastLinking() {
        return this.#view.getUint32(16, LE);
    }
    set graphicsPipelineLibraryFastLinking(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get graphicsPipelineLibraryIndependentInterpolationDecoration() {
        return this.#view.getUint32(20, LE);
    }
    set graphicsPipelineLibraryIndependentInterpolationDecoration(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class GraphicsPipelineLibraryCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(GraphicsPipelineLibraryCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, GraphicsPipelineLibraryCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < GraphicsPipelineLibraryCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(GraphicsPipelineLibraryCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorSetHostMapping && (this.descriptorSetHostMapping = data.descriptorSetHostMapping);
        this.sType = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorSetHostMapping() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorSetHostMapping(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DescriptorSetBindingReferenceVALVE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetBindingReferenceVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetBindingReferenceVALVE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetBindingReferenceVALVE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetBindingReferenceVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorSetLayout && (this.descriptorSetLayout = data.descriptorSetLayout), void 0 !== data.binding && (this.binding = data.binding);
        this.sType = StructureType.DESCRIPTOR_SET_BINDING_REFERENCE_VALVE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorSetLayout() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorSetLayout(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get binding() {
        return this.#view.getUint32(24, LE);
    }
    set binding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class DescriptorSetLayoutHostMappingInfoVALVE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DescriptorSetLayoutHostMappingInfoVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DescriptorSetLayoutHostMappingInfoVALVE.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DescriptorSetLayoutHostMappingInfoVALVE.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DescriptorSetLayoutHostMappingInfoVALVE.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.descriptorOffset && (this.descriptorOffset = data.descriptorOffset), void 0 !== data.descriptorSize && (this.descriptorSize = data.descriptorSize);
        this.sType = StructureType.DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get descriptorOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get descriptorSize() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderModuleIdentifierFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderModuleIdentifierFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderModuleIdentifierFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderModuleIdentifierFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderModuleIdentifier && (this.shaderModuleIdentifier = data.shaderModuleIdentifier);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderModuleIdentifier() {
        return this.#view.getUint32(16, LE);
    }
    set shaderModuleIdentifier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderModuleIdentifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderModuleIdentifierPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderModuleIdentifierPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderModuleIdentifierPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderModuleIdentifierAlgorithmUUID && (this.shaderModuleIdentifierAlgorithmUUID = data.shaderModuleIdentifierAlgorithmUUID);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderModuleIdentifierAlgorithmUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set shaderModuleIdentifierAlgorithmUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
}
export class PipelineShaderStageModuleIdentifierCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineShaderStageModuleIdentifierCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineShaderStageModuleIdentifierCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineShaderStageModuleIdentifierCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineShaderStageModuleIdentifierCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.identifierSize && (this.identifierSize = data.identifierSize), void 0 !== data.pIdentifier && (this.pIdentifier = data.pIdentifier);
        this.sType = StructureType.PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get identifierSize() {
        return this.#view.getUint32(16, LE);
    }
    set identifierSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pIdentifier() {
        return this.#view.getBigUint64(24, LE);
    }
    set pIdentifier(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ShaderModuleIdentifierEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ShaderModuleIdentifierEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ShaderModuleIdentifierEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ShaderModuleIdentifierEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ShaderModuleIdentifierEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.identifierSize && (this.identifierSize = data.identifierSize), void 0 !== data.identifier && (this.identifier = data.identifier);
        this.sType = StructureType.SHADER_MODULE_IDENTIFIER_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get identifierSize() {
        return this.#view.getUint32(16, LE);
    }
    set identifierSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get identifier() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 32);
    }
    set identifier(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
}
export class ImageCompressionControlEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCompressionControlEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCompressionControlEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCompressionControlEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCompressionControlEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.compressionControlPlaneCount && (this.compressionControlPlaneCount = data.compressionControlPlaneCount), void 0 !== data.pFixedRateFlags && (this.pFixedRateFlags = data.pFixedRateFlags);
        this.sType = StructureType.IMAGE_COMPRESSION_CONTROL_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compressionControlPlaneCount() {
        return this.#view.getUint32(20, LE);
    }
    set compressionControlPlaneCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pFixedRateFlags() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFixedRateFlags(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceImageCompressionControlFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageCompressionControlFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageCompressionControlFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageCompressionControlFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageCompressionControlFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageCompressionControl && (this.imageCompressionControl = data.imageCompressionControl);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageCompressionControl() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImageCompressionPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageCompressionPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageCompressionPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageCompressionPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageCompressionPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageCompressionFlags && (this.imageCompressionFlags = data.imageCompressionFlags), void 0 !== data.imageCompressionFixedRateFlags && (this.imageCompressionFixedRateFlags = data.imageCompressionFixedRateFlags);
        this.sType = StructureType.IMAGE_COMPRESSION_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageCompressionFlags() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imageCompressionFixedRateFlags() {
        return this.#view.getUint32(20, LE);
    }
    set imageCompressionFixedRateFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageCompressionControlSwapchain && (this.imageCompressionControlSwapchain = data.imageCompressionControlSwapchain);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageCompressionControlSwapchain() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionControlSwapchain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ImageSubresource2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageSubresource2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageSubresource2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageSubresource2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageSubresource2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.imageSubresource && (this.imageSubresource = data.imageSubresource);
        this.sType = StructureType.IMAGE_SUBRESOURCE_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get imageSubresource() {
        return new ImageSubresource(this.#data.subarray(16, 16 + ImageSubresource.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < ImageSubresource.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class SubresourceLayout2EXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(SubresourceLayout2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, SubresourceLayout2EXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < SubresourceLayout2EXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(SubresourceLayout2EXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subresourceLayout && (this.subresourceLayout = data.subresourceLayout);
        this.sType = StructureType.SUBRESOURCE_LAYOUT_2_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subresourceLayout() {
        return new SubresourceLayout(this.#data.subarray(16, 16 + SubresourceLayout.size));
    }
    set subresourceLayout(value) {
        if (value[BUFFER].byteLength < SubresourceLayout.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class RenderPassCreationControlEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassCreationControlEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassCreationControlEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassCreationControlEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassCreationControlEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.disallowMerging && (this.disallowMerging = data.disallowMerging);
        this.sType = StructureType.RENDER_PASS_CREATION_CONTROL_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get disallowMerging() {
        return this.#view.getUint32(16, LE);
    }
    set disallowMerging(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class RenderPassCreationFeedbackInfoEXT {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassCreationFeedbackInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassCreationFeedbackInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassCreationFeedbackInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassCreationFeedbackInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.postMergeSubpassCount && (this.postMergeSubpassCount = data.postMergeSubpassCount);
    }
    get postMergeSubpassCount() {
        return this.#view.getUint32(0, LE);
    }
    set postMergeSubpassCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class RenderPassCreationFeedbackCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassCreationFeedbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassCreationFeedbackCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassCreationFeedbackCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassCreationFeedbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pRenderPassFeedback && (this.pRenderPassFeedback = data.pRenderPassFeedback);
        this.sType = StructureType.RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pRenderPassFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pRenderPassFeedback(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class RenderPassSubpassFeedbackInfoEXT {
    static size = 264;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassSubpassFeedbackInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassSubpassFeedbackInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassSubpassFeedbackInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassSubpassFeedbackInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.subpassMergeStatus && (this.subpassMergeStatus = data.subpassMergeStatus), void 0 !== data.description && (this.description = data.description), void 0 !== data.postMergeIndex && (this.postMergeIndex = data.postMergeIndex);
    }
    get subpassMergeStatus() {
        return this.#view.getUint32(0, LE);
    }
    set subpassMergeStatus(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 4, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 4);
    }
    get postMergeIndex() {
        return this.#view.getUint32(260, LE);
    }
    set postMergeIndex(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
}
export class RenderPassSubpassFeedbackCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(RenderPassSubpassFeedbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, RenderPassSubpassFeedbackCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < RenderPassSubpassFeedbackCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(RenderPassSubpassFeedbackCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pSubpassFeedback && (this.pSubpassFeedback = data.pSubpassFeedback);
        this.sType = StructureType.RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pSubpassFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pSubpassFeedback(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.subpassMergeFeedback && (this.subpassMergeFeedback = data.subpassMergeFeedback);
        this.sType = StructureType.PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get subpassMergeFeedback() {
        return this.#view.getUint32(16, LE);
    }
    set subpassMergeFeedback(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class MicromapBuildInfoEXT {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapBuildInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapBuildInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapBuildInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapBuildInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.type && (this.type = data.type), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.mode && (this.mode = data.mode), void 0 !== data.dstMicromap && (this.dstMicromap = data.dstMicromap), void 0 !== data.usageCountsCount && (this.usageCountsCount = data.usageCountsCount), void 0 !== data.pUsageCounts && (this.pUsageCounts = data.pUsageCounts), void 0 !== data.ppUsageCounts && (this.ppUsageCounts = data.ppUsageCounts), void 0 !== data.data && (this.data = data.data), void 0 !== data.scratchData && (this.scratchData = data.scratchData), void 0 !== data.triangleArray && (this.triangleArray = data.triangleArray), void 0 !== data.triangleArrayStride && (this.triangleArrayStride = data.triangleArrayStride);
        this.sType = StructureType.MICROMAP_BUILD_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get mode() {
        return this.#view.getUint32(24, LE);
    }
    set mode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstMicromap() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstMicromap(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get usageCountsCount() {
        return this.#view.getUint32(40, LE);
    }
    set usageCountsCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pUsageCounts() {
        return this.#view.getBigUint64(48, LE);
    }
    set pUsageCounts(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get ppUsageCounts() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppUsageCounts(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get scratchData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set scratchData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get triangleArray() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set triangleArray(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get triangleArrayStride() {
        return this.#view.getBigUint64(88, LE);
    }
    set triangleArrayStride(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class MicromapCreateInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.createFlags && (this.createFlags = data.createFlags), void 0 !== data.buffer && (this.buffer = data.buffer), void 0 !== data.offset && (this.offset = data.offset), void 0 !== data.size && (this.size = data.size), void 0 !== data.type && (this.type = data.type), void 0 !== data.deviceAddress && (this.deviceAddress = data.deviceAddress);
        this.sType = StructureType.MICROMAP_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get createFlags() {
        return this.#view.getUint32(16, LE);
    }
    set createFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(40, LE);
    }
    set size(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(48, LE);
    }
    set type(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(56, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class MicromapVersionInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapVersionInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapVersionInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapVersionInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapVersionInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pVersionData && (this.pVersionData = data.pVersionData);
        this.sType = StructureType.MICROMAP_VERSION_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pVersionData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pVersionData(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class CopyMicromapInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMicromapInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMicromapInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMicromapInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMicromapInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_MICROMAP_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class CopyMicromapToMemoryInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMicromapToMemoryInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMicromapToMemoryInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMicromapToMemoryInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMicromapToMemoryInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_MICROMAP_TO_MEMORY_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get dst() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set dst(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class CopyMemoryToMicromapInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(CopyMemoryToMicromapInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, CopyMemoryToMicromapInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < CopyMemoryToMicromapInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(CopyMemoryToMicromapInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.src && (this.src = data.src), void 0 !== data.dst && (this.dst = data.dst), void 0 !== data.mode && (this.mode = data.mode);
        this.sType = StructureType.COPY_MEMORY_TO_MICROMAP_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get src() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set src(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class MicromapBuildSizesInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapBuildSizesInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapBuildSizesInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapBuildSizesInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapBuildSizesInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.micromapSize && (this.micromapSize = data.micromapSize), void 0 !== data.buildScratchSize && (this.buildScratchSize = data.buildScratchSize), void 0 !== data.discardable && (this.discardable = data.discardable);
        this.sType = StructureType.MICROMAP_BUILD_SIZES_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get micromapSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set micromapSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get buildScratchSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set buildScratchSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get discardable() {
        return this.#view.getUint32(32, LE);
    }
    set discardable(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class MicromapUsageEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapUsageEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapUsageEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapUsageEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapUsageEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.count && (this.count = data.count), void 0 !== data.subdivisionLevel && (this.subdivisionLevel = data.subdivisionLevel), void 0 !== data.format && (this.format = data.format);
    }
    get count() {
        return this.#view.getUint32(0, LE);
    }
    set count(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get subdivisionLevel() {
        return this.#view.getUint32(4, LE);
    }
    set subdivisionLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(8, LE);
    }
    set format(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class MicromapTriangleEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(MicromapTriangleEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, MicromapTriangleEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < MicromapTriangleEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(MicromapTriangleEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.dataOffset && (this.dataOffset = data.dataOffset), void 0 !== data.subdivisionLevel && (this.subdivisionLevel = data.subdivisionLevel), void 0 !== data.format && (this.format = data.format);
    }
    get dataOffset() {
        return this.#view.getUint32(0, LE);
    }
    set dataOffset(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get subdivisionLevel() {
        return this.#view.getUint16(4, LE);
    }
    set subdivisionLevel(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint16(6, LE);
    }
    set format(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class PhysicalDeviceOpacityMicromapFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceOpacityMicromapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceOpacityMicromapFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceOpacityMicromapFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceOpacityMicromapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.micromap && (this.micromap = data.micromap), void 0 !== data.micromapCaptureReplay && (this.micromapCaptureReplay = data.micromapCaptureReplay), void 0 !== data.micromapHostCommands && (this.micromapHostCommands = data.micromapHostCommands);
        this.sType = StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get micromap() {
        return this.#view.getUint32(16, LE);
    }
    set micromap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get micromapCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set micromapCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get micromapHostCommands() {
        return this.#view.getUint32(24, LE);
    }
    set micromapHostCommands(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceOpacityMicromapPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceOpacityMicromapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceOpacityMicromapPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceOpacityMicromapPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceOpacityMicromapPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxOpacity2StateSubdivisionLevel && (this.maxOpacity2StateSubdivisionLevel = data.maxOpacity2StateSubdivisionLevel), void 0 !== data.maxOpacity4StateSubdivisionLevel && (this.maxOpacity4StateSubdivisionLevel = data.maxOpacity4StateSubdivisionLevel);
        this.sType = StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxOpacity2StateSubdivisionLevel() {
        return this.#view.getUint32(16, LE);
    }
    set maxOpacity2StateSubdivisionLevel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxOpacity4StateSubdivisionLevel() {
        return this.#view.getUint32(20, LE);
    }
    set maxOpacity4StateSubdivisionLevel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class AccelerationStructureTrianglesOpacityMicromapEXT {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AccelerationStructureTrianglesOpacityMicromapEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AccelerationStructureTrianglesOpacityMicromapEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AccelerationStructureTrianglesOpacityMicromapEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AccelerationStructureTrianglesOpacityMicromapEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.indexType && (this.indexType = data.indexType), void 0 !== data.indexBuffer && (this.indexBuffer = data.indexBuffer), void 0 !== data.indexStride && (this.indexStride = data.indexStride), void 0 !== data.baseTriangle && (this.baseTriangle = data.baseTriangle), void 0 !== data.usageCountsCount && (this.usageCountsCount = data.usageCountsCount), void 0 !== data.pUsageCounts && (this.pUsageCounts = data.pUsageCounts), void 0 !== data.ppUsageCounts && (this.ppUsageCounts = data.ppUsageCounts), void 0 !== data.micromap && (this.micromap = data.micromap);
        this.sType = StructureType.ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get indexType() {
        return this.#view.getUint32(16, LE);
    }
    set indexType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get indexBuffer() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set indexBuffer(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get indexStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set indexStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get baseTriangle() {
        return this.#view.getUint32(40, LE);
    }
    set baseTriangle(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get usageCountsCount() {
        return this.#view.getUint32(44, LE);
    }
    set usageCountsCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pUsageCounts() {
        return this.#view.getBigUint64(48, LE);
    }
    set pUsageCounts(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
    get ppUsageCounts() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppUsageCounts(value) {
        this.#view.setBigUint64(56, BigInt(anyPointer(value)), LE);
    }
    get micromap() {
        return this.#view.getBigUint64(64, LE);
    }
    set micromap(value) {
        this.#view.setBigUint64(64, BigInt(anyPointer(value)), LE);
    }
}
export class PipelinePropertiesIdentifierEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelinePropertiesIdentifierEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelinePropertiesIdentifierEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelinePropertiesIdentifierEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelinePropertiesIdentifierEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineIdentifier && (this.pipelineIdentifier = data.pipelineIdentifier);
        this.sType = StructureType.PIPELINE_PROPERTIES_IDENTIFIER_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineIdentifier() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 16);
    }
    set pipelineIdentifier(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
}
export class PhysicalDevicePipelinePropertiesFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelinePropertiesFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelinePropertiesFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelinePropertiesFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelinePropertiesFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelinePropertiesIdentifier && (this.pipelinePropertiesIdentifier = data.pipelinePropertiesIdentifier);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelinePropertiesIdentifier() {
        return this.#view.getUint32(16, LE);
    }
    set pipelinePropertiesIdentifier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderEarlyAndLateFragmentTests && (this.shaderEarlyAndLateFragmentTests = data.shaderEarlyAndLateFragmentTests);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderEarlyAndLateFragmentTests() {
        return this.#view.getUint32(16, LE);
    }
    set shaderEarlyAndLateFragmentTests(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExportMetalObjectCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalObjectCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalObjectCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalObjectCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalObjectCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.exportObjectType && (this.exportObjectType = data.exportObjectType);
        this.sType = StructureType.EXPORT_METAL_OBJECT_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get exportObjectType() {
        return this.#view.getUint32(16, LE);
    }
    set exportObjectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ExportMetalObjectsInfoEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalObjectsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalObjectsInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalObjectsInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalObjectsInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext);
        this.sType = StructureType.EXPORT_METAL_OBJECTS_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalDeviceInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalDeviceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalDeviceInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalDeviceInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalDeviceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mtlDevice && (this.mtlDevice = data.mtlDevice);
        this.sType = StructureType.EXPORT_METAL_DEVICE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mtlDevice() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlDevice(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalCommandQueueInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalCommandQueueInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalCommandQueueInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalCommandQueueInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalCommandQueueInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.queue && (this.queue = data.queue), void 0 !== data.mtlCommandQueue && (this.mtlCommandQueue = data.mtlCommandQueue);
        this.sType = StructureType.EXPORT_METAL_COMMAND_QUEUE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get queue() {
        return this.#view.getBigUint64(16, LE);
    }
    set queue(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get mtlCommandQueue() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlCommandQueue(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalBufferInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalBufferInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalBufferInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalBufferInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalBufferInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.memory && (this.memory = data.memory), void 0 !== data.mtlBuffer && (this.mtlBuffer = data.mtlBuffer);
        this.sType = StructureType.EXPORT_METAL_BUFFER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get mtlBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlBuffer(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ImportMetalBufferInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMetalBufferInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMetalBufferInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMetalBufferInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMetalBufferInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mtlBuffer && (this.mtlBuffer = data.mtlBuffer);
        this.sType = StructureType.IMPORT_METAL_BUFFER_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mtlBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlBuffer(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalTextureInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalTextureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalTextureInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalTextureInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalTextureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image), void 0 !== data.imageView && (this.imageView = data.imageView), void 0 !== data.bufferView && (this.bufferView = data.bufferView), void 0 !== data.plane && (this.plane = data.plane), void 0 !== data.mtlTexture && (this.mtlTexture = data.mtlTexture);
        this.sType = StructureType.EXPORT_METAL_TEXTURE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(24, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get bufferView() {
        return this.#view.getBigUint64(32, LE);
    }
    set bufferView(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
    get plane() {
        return this.#view.getUint32(40, LE);
    }
    set plane(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get mtlTexture() {
        return this.#view.getBigUint64(48, LE);
    }
    set mtlTexture(value) {
        this.#view.setBigUint64(48, BigInt(anyPointer(value)), LE);
    }
}
export class ImportMetalTextureInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMetalTextureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMetalTextureInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMetalTextureInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMetalTextureInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.plane && (this.plane = data.plane), void 0 !== data.mtlTexture && (this.mtlTexture = data.mtlTexture);
        this.sType = StructureType.IMPORT_METAL_TEXTURE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get plane() {
        return this.#view.getUint32(16, LE);
    }
    set plane(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get mtlTexture() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlTexture(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalIOSurfaceInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalIOSurfaceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalIOSurfaceInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalIOSurfaceInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalIOSurfaceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.image && (this.image = data.image), void 0 !== data.ioSurface && (this.ioSurface = data.ioSurface);
        this.sType = StructureType.EXPORT_METAL_IO_SURFACE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get ioSurface() {
        return this.#view.getBigUint64(24, LE);
    }
    set ioSurface(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class ImportMetalIOSurfaceInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMetalIOSurfaceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMetalIOSurfaceInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMetalIOSurfaceInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMetalIOSurfaceInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.ioSurface && (this.ioSurface = data.ioSurface);
        this.sType = StructureType.IMPORT_METAL_IO_SURFACE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get ioSurface() {
        return this.#view.getBigUint64(16, LE);
    }
    set ioSurface(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class ExportMetalSharedEventInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ExportMetalSharedEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ExportMetalSharedEventInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ExportMetalSharedEventInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ExportMetalSharedEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.semaphore && (this.semaphore = data.semaphore), void 0 !== data.event && (this.event = data.event), void 0 !== data.mtlSharedEvent && (this.mtlSharedEvent = data.mtlSharedEvent);
        this.sType = StructureType.EXPORT_METAL_SHARED_EVENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
    get event() {
        return this.#view.getBigUint64(24, LE);
    }
    set event(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
    get mtlSharedEvent() {
        return this.#view.getBigUint64(32, LE);
    }
    set mtlSharedEvent(value) {
        this.#view.setBigUint64(32, BigInt(anyPointer(value)), LE);
    }
}
export class ImportMetalSharedEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImportMetalSharedEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImportMetalSharedEventInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImportMetalSharedEventInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImportMetalSharedEventInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.mtlSharedEvent && (this.mtlSharedEvent = data.mtlSharedEvent);
        this.sType = StructureType.IMPORT_METAL_SHARED_EVENT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get mtlSharedEvent() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlSharedEvent(value) {
        this.#view.setBigUint64(16, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.nonSeamlessCubeMap && (this.nonSeamlessCubeMap = data.nonSeamlessCubeMap);
        this.sType = StructureType.PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get nonSeamlessCubeMap() {
        return this.#view.getUint32(16, LE);
    }
    set nonSeamlessCubeMap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDevicePipelineRobustnessFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelineRobustnessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelineRobustnessFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelineRobustnessFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelineRobustnessFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.pipelineRobustness && (this.pipelineRobustness = data.pipelineRobustness);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get pipelineRobustness() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineRobustness(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PipelineRobustnessCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PipelineRobustnessCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PipelineRobustnessCreateInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PipelineRobustnessCreateInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PipelineRobustnessCreateInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.storageBuffers && (this.storageBuffers = data.storageBuffers), void 0 !== data.uniformBuffers && (this.uniformBuffers = data.uniformBuffers), void 0 !== data.vertexInputs && (this.vertexInputs = data.vertexInputs), void 0 !== data.images && (this.images = data.images);
        this.sType = StructureType.PIPELINE_ROBUSTNESS_CREATE_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get storageBuffers() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set uniformBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vertexInputs() {
        return this.#view.getUint32(24, LE);
    }
    set vertexInputs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get images() {
        return this.#view.getUint32(28, LE);
    }
    set images(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDevicePipelineRobustnessPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDevicePipelineRobustnessPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDevicePipelineRobustnessPropertiesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDevicePipelineRobustnessPropertiesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDevicePipelineRobustnessPropertiesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.defaultRobustnessStorageBuffers && (this.defaultRobustnessStorageBuffers = data.defaultRobustnessStorageBuffers), void 0 !== data.defaultRobustnessUniformBuffers && (this.defaultRobustnessUniformBuffers = data.defaultRobustnessUniformBuffers), void 0 !== data.defaultRobustnessVertexInputs && (this.defaultRobustnessVertexInputs = data.defaultRobustnessVertexInputs), void 0 !== data.defaultRobustnessImages && (this.defaultRobustnessImages = data.defaultRobustnessImages);
        this.sType = StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get defaultRobustnessStorageBuffers() {
        return this.#view.getUint32(16, LE);
    }
    set defaultRobustnessStorageBuffers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get defaultRobustnessUniformBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set defaultRobustnessUniformBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get defaultRobustnessVertexInputs() {
        return this.#view.getUint32(24, LE);
    }
    set defaultRobustnessVertexInputs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get defaultRobustnessImages() {
        return this.#view.getUint32(28, LE);
    }
    set defaultRobustnessImages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class ImageViewSampleWeightCreateInfoQCOM {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(ImageViewSampleWeightCreateInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, ImageViewSampleWeightCreateInfoQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < ImageViewSampleWeightCreateInfoQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(ImageViewSampleWeightCreateInfoQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.filterCenter && (this.filterCenter = data.filterCenter), void 0 !== data.filterSize && (this.filterSize = data.filterSize), void 0 !== data.numPhases && (this.numPhases = data.numPhases);
        this.sType = StructureType.IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get filterCenter() {
        return new Offset2D(this.#data.subarray(16, 16 + Offset2D.size));
    }
    set filterCenter(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get filterSize() {
        return new Extent2D(this.#data.subarray(24, 24 + Extent2D.size));
    }
    set filterSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get numPhases() {
        return this.#view.getUint32(32, LE);
    }
    set numPhases(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class PhysicalDeviceImageProcessingFeaturesQCOM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageProcessingFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageProcessingFeaturesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageProcessingFeaturesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageProcessingFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.textureSampleWeighted && (this.textureSampleWeighted = data.textureSampleWeighted), void 0 !== data.textureBoxFilter && (this.textureBoxFilter = data.textureBoxFilter), void 0 !== data.textureBlockMatch && (this.textureBlockMatch = data.textureBlockMatch);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get textureSampleWeighted() {
        return this.#view.getUint32(16, LE);
    }
    set textureSampleWeighted(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get textureBoxFilter() {
        return this.#view.getUint32(20, LE);
    }
    set textureBoxFilter(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get textureBlockMatch() {
        return this.#view.getUint32(24, LE);
    }
    set textureBlockMatch(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class PhysicalDeviceImageProcessingPropertiesQCOM {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceImageProcessingPropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceImageProcessingPropertiesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceImageProcessingPropertiesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceImageProcessingPropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.maxWeightFilterPhases && (this.maxWeightFilterPhases = data.maxWeightFilterPhases), void 0 !== data.maxWeightFilterDimension && (this.maxWeightFilterDimension = data.maxWeightFilterDimension), void 0 !== data.maxBlockMatchRegion && (this.maxBlockMatchRegion = data.maxBlockMatchRegion), void 0 !== data.maxBoxFilterBlockSize && (this.maxBoxFilterBlockSize = data.maxBoxFilterBlockSize);
        this.sType = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get maxWeightFilterPhases() {
        return this.#view.getUint32(16, LE);
    }
    set maxWeightFilterPhases(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxWeightFilterDimension() {
        return new Extent2D(this.#data.subarray(20, 20 + Extent2D.size));
    }
    set maxWeightFilterDimension(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get maxBlockMatchRegion() {
        return new Extent2D(this.#data.subarray(28, 28 + Extent2D.size));
    }
    set maxBlockMatchRegion(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get maxBoxFilterBlockSize() {
        return new Extent2D(this.#data.subarray(36, 36 + Extent2D.size));
    }
    set maxBoxFilterBlockSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
}
export class PhysicalDeviceTilePropertiesFeaturesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceTilePropertiesFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceTilePropertiesFeaturesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceTilePropertiesFeaturesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceTilePropertiesFeaturesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.tileProperties && (this.tileProperties = data.tileProperties);
        this.sType = StructureType.PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get tileProperties() {
        return this.#view.getUint32(16, LE);
    }
    set tileProperties(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class TilePropertiesQCOM {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(TilePropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, TilePropertiesQCOM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < TilePropertiesQCOM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(TilePropertiesQCOM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.tileSize && (this.tileSize = data.tileSize), void 0 !== data.apronSize && (this.apronSize = data.apronSize), void 0 !== data.origin && (this.origin = data.origin);
        this.sType = StructureType.TILE_PROPERTIES_QCOM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get tileSize() {
        return new Extent3D(this.#data.subarray(16, 16 + Extent3D.size));
    }
    set tileSize(value) {
        if (value[BUFFER].byteLength < Extent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get apronSize() {
        return new Extent2D(this.#data.subarray(28, 28 + Extent2D.size));
    }
    set apronSize(value) {
        if (value[BUFFER].byteLength < Extent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get origin() {
        return new Offset2D(this.#data.subarray(36, 36 + Offset2D.size));
    }
    set origin(value) {
        if (value[BUFFER].byteLength < Offset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
}
export class PhysicalDeviceAmigoProfilingFeaturesSEC {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceAmigoProfilingFeaturesSEC.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceAmigoProfilingFeaturesSEC.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceAmigoProfilingFeaturesSEC.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceAmigoProfilingFeaturesSEC.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.amigoProfiling && (this.amigoProfiling = data.amigoProfiling);
        this.sType = StructureType.PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get amigoProfiling() {
        return this.#view.getUint32(16, LE);
    }
    set amigoProfiling(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class AmigoProfilingSubmitInfoSEC {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(AmigoProfilingSubmitInfoSEC.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, AmigoProfilingSubmitInfoSEC.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < AmigoProfilingSubmitInfoSEC.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(AmigoProfilingSubmitInfoSEC.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.firstDrawTimestamp && (this.firstDrawTimestamp = data.firstDrawTimestamp), void 0 !== data.swapBufferTimestamp && (this.swapBufferTimestamp = data.swapBufferTimestamp);
        this.sType = StructureType.AMIGO_PROFILING_SUBMIT_INFO_SEC;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get firstDrawTimestamp() {
        return this.#view.getBigUint64(16, LE);
    }
    set firstDrawTimestamp(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get swapBufferTimestamp() {
        return this.#view.getBigUint64(24, LE);
    }
    set swapBufferTimestamp(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.attachmentFeedbackLoopLayout && (this.attachmentFeedbackLoopLayout = data.attachmentFeedbackLoopLayout);
        this.sType = StructureType.PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get attachmentFeedbackLoopLayout() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentFeedbackLoopLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceDepthClampZeroOneFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceDepthClampZeroOneFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceDepthClampZeroOneFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceDepthClampZeroOneFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceDepthClampZeroOneFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.depthClampZeroOne && (this.depthClampZeroOne = data.depthClampZeroOne);
        this.sType = StructureType.PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get depthClampZeroOne() {
        return this.#view.getUint32(16, LE);
    }
    set depthClampZeroOne(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceAddressBindingReportFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceAddressBindingReportFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceAddressBindingReportFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceAddressBindingReportFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceAddressBindingReportFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.reportAddressBinding && (this.reportAddressBinding = data.reportAddressBinding);
        this.sType = StructureType.PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get reportAddressBinding() {
        return this.#view.getUint32(16, LE);
    }
    set reportAddressBinding(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class DeviceAddressBindingCallbackDataEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceAddressBindingCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceAddressBindingCallbackDataEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceAddressBindingCallbackDataEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceAddressBindingCallbackDataEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.baseAddress && (this.baseAddress = data.baseAddress), void 0 !== data.size && (this.size = data.size), void 0 !== data.bindingType && (this.bindingType = data.bindingType);
        this.sType = StructureType.DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get baseAddress() {
        return this.#view.getBigUint64(24, LE);
    }
    set baseAddress(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get bindingType() {
        return this.#view.getUint32(40, LE);
    }
    set bindingType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class PhysicalDeviceOpticalFlowFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceOpticalFlowFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceOpticalFlowFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceOpticalFlowFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceOpticalFlowFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.opticalFlow && (this.opticalFlow = data.opticalFlow);
        this.sType = StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get opticalFlow() {
        return this.#view.getUint32(16, LE);
    }
    set opticalFlow(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceOpticalFlowPropertiesNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceOpticalFlowPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceOpticalFlowPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceOpticalFlowPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceOpticalFlowPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.supportedOutputGridSizes && (this.supportedOutputGridSizes = data.supportedOutputGridSizes), void 0 !== data.supportedHintGridSizes && (this.supportedHintGridSizes = data.supportedHintGridSizes), void 0 !== data.hintSupported && (this.hintSupported = data.hintSupported), void 0 !== data.costSupported && (this.costSupported = data.costSupported), void 0 !== data.bidirectionalFlowSupported && (this.bidirectionalFlowSupported = data.bidirectionalFlowSupported), void 0 !== data.globalFlowSupported && (this.globalFlowSupported = data.globalFlowSupported), void 0 !== data.minWidth && (this.minWidth = data.minWidth), void 0 !== data.minHeight && (this.minHeight = data.minHeight), void 0 !== data.maxWidth && (this.maxWidth = data.maxWidth), void 0 !== data.maxHeight && (this.maxHeight = data.maxHeight), void 0 !== data.maxNumRegionsOfInterest && (this.maxNumRegionsOfInterest = data.maxNumRegionsOfInterest);
        this.sType = StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get supportedOutputGridSizes() {
        return this.#view.getUint32(16, LE);
    }
    set supportedOutputGridSizes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedHintGridSizes() {
        return this.#view.getUint32(20, LE);
    }
    set supportedHintGridSizes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get hintSupported() {
        return this.#view.getUint32(24, LE);
    }
    set hintSupported(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get costSupported() {
        return this.#view.getUint32(28, LE);
    }
    set costSupported(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get bidirectionalFlowSupported() {
        return this.#view.getUint32(32, LE);
    }
    set bidirectionalFlowSupported(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get globalFlowSupported() {
        return this.#view.getUint32(36, LE);
    }
    set globalFlowSupported(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minWidth() {
        return this.#view.getUint32(40, LE);
    }
    set minWidth(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minHeight() {
        return this.#view.getUint32(44, LE);
    }
    set minHeight(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxWidth() {
        return this.#view.getUint32(48, LE);
    }
    set maxWidth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxHeight() {
        return this.#view.getUint32(52, LE);
    }
    set maxHeight(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxNumRegionsOfInterest() {
        return this.#view.getUint32(56, LE);
    }
    set maxNumRegionsOfInterest(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class OpticalFlowImageFormatInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpticalFlowImageFormatInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpticalFlowImageFormatInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpticalFlowImageFormatInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpticalFlowImageFormatInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.usage && (this.usage = data.usage);
        this.sType = StructureType.OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class OpticalFlowImageFormatPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpticalFlowImageFormatPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpticalFlowImageFormatPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpticalFlowImageFormatPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpticalFlowImageFormatPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.format && (this.format = data.format);
        this.sType = StructureType.OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class OpticalFlowSessionCreateInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpticalFlowSessionCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpticalFlowSessionCreateInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpticalFlowSessionCreateInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpticalFlowSessionCreateInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.width && (this.width = data.width), void 0 !== data.height && (this.height = data.height), void 0 !== data.imageFormat && (this.imageFormat = data.imageFormat), void 0 !== data.flowVectorFormat && (this.flowVectorFormat = data.flowVectorFormat), void 0 !== data.costFormat && (this.costFormat = data.costFormat), void 0 !== data.outputGridSize && (this.outputGridSize = data.outputGridSize), void 0 !== data.hintGridSize && (this.hintGridSize = data.hintGridSize), void 0 !== data.performanceLevel && (this.performanceLevel = data.performanceLevel), void 0 !== data.flags && (this.flags = data.flags);
        this.sType = StructureType.OPTICAL_FLOW_SESSION_CREATE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get width() {
        return this.#view.getUint32(16, LE);
    }
    set width(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(20, LE);
    }
    set height(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageFormat() {
        return this.#view.getUint32(24, LE);
    }
    set imageFormat(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get flowVectorFormat() {
        return this.#view.getUint32(28, LE);
    }
    set flowVectorFormat(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get costFormat() {
        return this.#view.getUint32(32, LE);
    }
    set costFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get outputGridSize() {
        return this.#view.getUint32(36, LE);
    }
    set outputGridSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get hintGridSize() {
        return this.#view.getUint32(40, LE);
    }
    set hintGridSize(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get performanceLevel() {
        return this.#view.getUint32(44, LE);
    }
    set performanceLevel(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(48, LE);
    }
    set flags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class OpticalFlowSessionCreatePrivateDataInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpticalFlowSessionCreatePrivateDataInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpticalFlowSessionCreatePrivateDataInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpticalFlowSessionCreatePrivateDataInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpticalFlowSessionCreatePrivateDataInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.id && (this.id = data.id), void 0 !== data.size && (this.size = data.size), void 0 !== data.pPrivateData && (this.pPrivateData = data.pPrivateData);
        this.sType = StructureType.OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get id() {
        return this.#view.getUint32(16, LE);
    }
    set id(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get size() {
        return this.#view.getUint32(20, LE);
    }
    set size(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pPrivateData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPrivateData(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class OpticalFlowExecuteInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(OpticalFlowExecuteInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, OpticalFlowExecuteInfoNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < OpticalFlowExecuteInfoNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(OpticalFlowExecuteInfoNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.flags && (this.flags = data.flags), void 0 !== data.regionCount && (this.regionCount = data.regionCount), void 0 !== data.pRegions && (this.pRegions = data.pRegions);
        this.sType = StructureType.OPTICAL_FLOW_EXECUTE_INFO_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(20, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(24, BigInt(anyPointer(value)), LE);
    }
}
export class PhysicalDeviceFaultFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceFaultFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceFaultFeaturesEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceFaultFeaturesEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceFaultFeaturesEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.deviceFault && (this.deviceFault = data.deviceFault), void 0 !== data.deviceFaultVendorBinary && (this.deviceFaultVendorBinary = data.deviceFaultVendorBinary);
        this.sType = StructureType.PHYSICAL_DEVICE_FAULT_FEATURES_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get deviceFault() {
        return this.#view.getUint32(16, LE);
    }
    set deviceFault(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceFaultVendorBinary() {
        return this.#view.getUint32(20, LE);
    }
    set deviceFaultVendorBinary(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class DeviceFaultAddressInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceFaultAddressInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceFaultAddressInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceFaultAddressInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceFaultAddressInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.addressType && (this.addressType = data.addressType), void 0 !== data.reportedAddress && (this.reportedAddress = data.reportedAddress), void 0 !== data.addressPrecision && (this.addressPrecision = data.addressPrecision);
    }
    get addressType() {
        return this.#view.getUint32(0, LE);
    }
    set addressType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get reportedAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set reportedAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get addressPrecision() {
        return this.#view.getBigUint64(16, LE);
    }
    set addressPrecision(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class DeviceFaultVendorInfoEXT {
    static size = 272;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceFaultVendorInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceFaultVendorInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceFaultVendorInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceFaultVendorInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.description && (this.description = data.description), void 0 !== data.vendorFaultCode && (this.vendorFaultCode = data.vendorFaultCode), void 0 !== data.vendorFaultData && (this.vendorFaultData = data.vendorFaultData);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 0, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 0);
    }
    get vendorFaultCode() {
        return this.#view.getBigUint64(256, LE);
    }
    set vendorFaultCode(value) {
        this.#view.setBigUint64(256, BigInt(value), LE);
    }
    get vendorFaultData() {
        return this.#view.getBigUint64(264, LE);
    }
    set vendorFaultData(value) {
        this.#view.setBigUint64(264, BigInt(value), LE);
    }
}
export class DeviceFaultCountsEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceFaultCountsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceFaultCountsEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceFaultCountsEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceFaultCountsEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.addressInfoCount && (this.addressInfoCount = data.addressInfoCount), void 0 !== data.vendorInfoCount && (this.vendorInfoCount = data.vendorInfoCount), void 0 !== data.vendorBinarySize && (this.vendorBinarySize = data.vendorBinarySize);
        this.sType = StructureType.DEVICE_FAULT_COUNTS_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get addressInfoCount() {
        return this.#view.getUint32(16, LE);
    }
    set addressInfoCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vendorInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set vendorInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vendorBinarySize() {
        return this.#view.getBigUint64(24, LE);
    }
    set vendorBinarySize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class DeviceFaultInfoEXT {
    static size = 296;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceFaultInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceFaultInfoEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceFaultInfoEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceFaultInfoEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.description && (this.description = data.description), void 0 !== data.pAddressInfos && (this.pAddressInfos = data.pAddressInfos), void 0 !== data.pVendorInfos && (this.pVendorInfos = data.pVendorInfos), void 0 !== data.pVendorBinaryData && (this.pVendorBinaryData = data.pVendorBinaryData);
        this.sType = StructureType.DEVICE_FAULT_INFO_EXT;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get description() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 16, 256);
    }
    set description(value) {
        this.#data.set(new Uint8Array(value.buffer), 16);
    }
    get pAddressInfos() {
        return this.#view.getBigUint64(272, LE);
    }
    set pAddressInfos(value) {
        this.#view.setBigUint64(272, BigInt(anyPointer(value)), LE);
    }
    get pVendorInfos() {
        return this.#view.getBigUint64(280, LE);
    }
    set pVendorInfos(value) {
        this.#view.setBigUint64(280, BigInt(anyPointer(value)), LE);
    }
    get pVendorBinaryData() {
        return this.#view.getBigUint64(288, LE);
    }
    set pVendorBinaryData(value) {
        this.#view.setBigUint64(288, BigInt(anyPointer(value)), LE);
    }
}
export class DeviceFaultVendorBinaryHeaderVersionOneEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DeviceFaultVendorBinaryHeaderVersionOneEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DeviceFaultVendorBinaryHeaderVersionOneEXT.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DeviceFaultVendorBinaryHeaderVersionOneEXT.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DeviceFaultVendorBinaryHeaderVersionOneEXT.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.headerSize && (this.headerSize = data.headerSize), void 0 !== data.headerVersion && (this.headerVersion = data.headerVersion), void 0 !== data.vendorID && (this.vendorID = data.vendorID), void 0 !== data.deviceID && (this.deviceID = data.deviceID), void 0 !== data.driverVersion && (this.driverVersion = data.driverVersion), void 0 !== data.pipelineCacheUUID && (this.pipelineCacheUUID = data.pipelineCacheUUID), void 0 !== data.applicationNameOffset && (this.applicationNameOffset = data.applicationNameOffset), void 0 !== data.applicationVersion && (this.applicationVersion = data.applicationVersion), void 0 !== data.engineNameOffset && (this.engineNameOffset = data.engineNameOffset);
    }
    get headerSize() {
        return this.#view.getUint32(0, LE);
    }
    set headerSize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get headerVersion() {
        return this.#view.getUint32(4, LE);
    }
    set headerVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get driverVersion() {
        return this.#view.getUint32(16, LE);
    }
    set driverVersion(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineCacheUUID() {
        return new Uint8Array(this.#data.buffer, this.#data.byteOffset + 20, 16);
    }
    set pipelineCacheUUID(value) {
        this.#data.set(new Uint8Array(value.buffer), 20);
    }
    get applicationNameOffset() {
        return this.#view.getUint32(36, LE);
    }
    set applicationNameOffset(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get applicationVersion() {
        return this.#view.getUint32(40, LE);
    }
    set applicationVersion(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get engineNameOffset() {
        return this.#view.getUint32(44, LE);
    }
    set engineNameOffset(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class DecompressMemoryRegionNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(DecompressMemoryRegionNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, DecompressMemoryRegionNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < DecompressMemoryRegionNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(DecompressMemoryRegionNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.srcAddress && (this.srcAddress = data.srcAddress), void 0 !== data.dstAddress && (this.dstAddress = data.dstAddress), void 0 !== data.compressedSize && (this.compressedSize = data.compressedSize), void 0 !== data.decompressedSize && (this.decompressedSize = data.decompressedSize), void 0 !== data.decompressionMethod && (this.decompressionMethod = data.decompressionMethod);
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get compressedSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set compressedSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get decompressedSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set decompressedSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get decompressionMethod() {
        return this.#view.getBigUint64(32, LE);
    }
    set decompressionMethod(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderCoreBuiltinsPropertiesARM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderCoreBuiltinsPropertiesARM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderCoreBuiltinsPropertiesARM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderCoreBuiltinsPropertiesARM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderCoreMask && (this.shaderCoreMask = data.shaderCoreMask), void 0 !== data.shaderCoreCount && (this.shaderCoreCount = data.shaderCoreCount), void 0 !== data.shaderWarpsPerCore && (this.shaderWarpsPerCore = data.shaderWarpsPerCore);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderCoreMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set shaderCoreMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get shaderCoreCount() {
        return this.#view.getUint32(24, LE);
    }
    set shaderCoreCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderWarpsPerCore() {
        return this.#view.getUint32(28, LE);
    }
    set shaderWarpsPerCore(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceShaderCoreBuiltinsFeaturesARM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceShaderCoreBuiltinsFeaturesARM.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceShaderCoreBuiltinsFeaturesARM.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceShaderCoreBuiltinsFeaturesARM.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.shaderCoreBuiltins && (this.shaderCoreBuiltins = data.shaderCoreBuiltins);
        this.sType = StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get shaderCoreBuiltins() {
        return this.#view.getUint32(16, LE);
    }
    set shaderCoreBuiltins(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingInvocationReorderFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingInvocationReorderFeaturesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingInvocationReorderFeaturesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingInvocationReorderFeaturesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayTracingInvocationReorder && (this.rayTracingInvocationReorder = data.rayTracingInvocationReorder);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayTracingInvocationReorder() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingInvocationReorder(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (void 0 === data) this.#data = new Uint8Array(PhysicalDeviceRayTracingInvocationReorderPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if ("number" == typeof data || "bigint" == typeof data) this.#data = new Uint8Array(Deno.UnsafePointerView.getArrayBuffer(data, PhysicalDeviceRayTracingInvocationReorderPropertiesNV.size)), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset);
        else if (data instanceof Uint8Array) {
            if (data.byteLength < PhysicalDeviceRayTracingInvocationReorderPropertiesNV.size) throw new Error("Data buffer too small");
            this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
        } else this.#data = new Uint8Array(PhysicalDeviceRayTracingInvocationReorderPropertiesNV.size), this.#view = new DataView(this.#data.buffer, this.#data.byteOffset), void 0 !== data.pNext && (this.pNext = data.pNext), void 0 !== data.rayTracingInvocationReorderReorderingHint && (this.rayTracingInvocationReorderReorderingHint = data.rayTracingInvocationReorderReorderingHint);
        this.sType = StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(anyPointer(value)), LE);
    }
    get rayTracingInvocationReorderReorderingHint() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingInvocationReorderReorderingHint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class ClearColorValue {
    static size = 4;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < ClearColorValue.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class ClearValue {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < ClearValue.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class PerformanceCounterResultKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < PerformanceCounterResultKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class PerformanceValueDataINTEL {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < PerformanceValueDataINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class PipelineExecutableStatisticValueKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < PipelineExecutableStatisticValueKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class DeviceOrHostAddressKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < DeviceOrHostAddressKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class DeviceOrHostAddressConstKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < DeviceOrHostAddressConstKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class AccelerationStructureGeometryDataKHR {
    static size = 64;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < AccelerationStructureGeometryDataKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class DescriptorDataEXT {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < DescriptorDataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class AccelerationStructureMotionInstanceDataNV {
    static size = 152;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < AccelerationStructureMotionInstanceDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
let lib = Deno.dlopen("windows" === Deno.build.os ? "vulkan-1" : "darwin" === Deno.build.os ? "libvulkan.dylib.1" : "libvulkan.so.1", {
    vkCreateInstance: {
        parameters: [
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyInstance: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumeratePhysicalDevices: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceProcAddr: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "function"
    },
    vkGetInstanceProcAddr: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "function"
    },
    vkGetPhysicalDeviceProperties: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceQueueFamilyProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceMemoryProperties: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFeatures: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceImageFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateDevice: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDevice: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumerateInstanceVersion: {
        parameters: [
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateInstanceLayerProperties: {
        parameters: [
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateInstanceExtensionProperties: {
        parameters: [
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateDeviceLayerProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateDeviceExtensionProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceQueue: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkQueueSubmit: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkQueueWaitIdle: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkDeviceWaitIdle: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkAllocateMemory: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeMemory: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkMapMemory: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkUnmapMemory: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "void"
    },
    vkFlushMappedMemoryRanges: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkInvalidateMappedMemoryRanges: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceMemoryCommitment: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetBufferMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkBindBufferMemory: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetImageMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkBindImageMemory: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetImageSparseMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSparseImageFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkQueueBindSparse: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkCreateFence: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyFence: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetFences: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkGetFenceStatus: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkWaitForFences: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "u64"
        ],
        result: "u32"
    },
    vkCreateSemaphore: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySemaphore: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateEvent: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyEvent: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetEventStatus: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkSetEvent: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkResetEvent: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkCreateQueryPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetQueryPoolResults: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "usize",
            "buffer",
            "u64",
            "u32"
        ],
        result: "u32"
    },
    vkResetQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCreateBuffer: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateBufferView: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyBufferView: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateImage: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyImage: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageSubresourceLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateImageView: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyImageView: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateShaderModule: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyShaderModule: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreatePipelineCache: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipelineCache: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPipelineCacheData: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkMergePipelineCaches: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateGraphicsPipelines: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateComputePipelines: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipeline: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreatePipelineLayout: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipelineLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateSampler: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySampler: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateDescriptorSetLayout: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorSetLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateDescriptorPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetDescriptorPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkAllocateDescriptorSets: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeDescriptorSets: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkUpdateDescriptorSets: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCreateFramebuffer: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyFramebuffer: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateRenderPass: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyRenderPass: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetRenderAreaGranularity: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateCommandPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkAllocateCommandBuffers: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeCommandBuffers: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkBeginCommandBuffer: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkEndCommandBuffer: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkResetCommandBuffer: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkCmdBindPipeline: {
        parameters: [
            "pointer",
            "u32",
            "pointer"
        ],
        result: "void"
    },
    vkCmdSetViewport: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetScissor: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetLineWidth: {
        parameters: [
            "pointer",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetDepthBias: {
        parameters: [
            "pointer",
            "f32",
            "f32",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetBlendConstants: {
        parameters: [
            "pointer",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetDepthBounds: {
        parameters: [
            "pointer",
            "f32",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetStencilCompareMask: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilWriteMask: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilReference: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdBindDescriptorSets: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBindIndexBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdBindVertexBuffers: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdDraw: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexed: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "i32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexedIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatch: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatchIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64"
        ],
        result: "void"
    },
    vkCmdCopyBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBlitImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer",
            "u32"
        ],
        result: "void"
    },
    vkCmdCopyBufferToImage: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImageToBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdUpdateBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "buffer"
        ],
        result: "void"
    },
    vkCmdFillBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdClearColorImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdClearDepthStencilImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdClearAttachments: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResolveImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetEvent: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdResetEvent: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdWaitEvents: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdPipelineBarrier: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBeginQuery: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdEndQuery: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdResetQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdWriteTimestamp: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdCopyQueryPoolResults: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "pointer",
            "u64",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdPushConstants: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBeginRenderPass: {
        parameters: [
            "pointer",
            "buffer",
            "u32"
        ],
        result: "void"
    },
    vkCmdNextSubpass: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdEndRenderPass: {
        parameters: [
            "pointer"
        ],
        result: "void"
    },
    vkCmdExecuteCommands: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkDestroySurfaceKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSurfaceSupportKHR: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfaceFormatsKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfacePresentModesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateSwapchainKHR: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySwapchainKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetSwapchainImagesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkAcquireNextImageKHR: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkQueuePresentKHR: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceFeatures2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceProperties2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFormatProperties2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceImageFormatProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceQueueFamilyProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceMemoryProperties2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSparseImageFormatProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkTrimCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalBufferProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalSemaphoreProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalFenceProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumeratePhysicalDeviceGroups: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceGroupPeerMemoryFeatures: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkBindBufferMemory2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkBindImageMemory2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdSetDeviceMask: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatchBase: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCreateDescriptorUpdateTemplate: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorUpdateTemplate: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkUpdateDescriptorSetWithTemplate: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetBufferMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageSparseMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceBufferMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceImageMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceImageSparseMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateSamplerYcbcrConversion: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySamplerYcbcrConversion: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceQueue2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDescriptorSetLayoutSupport: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateRenderPass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdBeginRenderPass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdNextSubpass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdEndRenderPass2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetSemaphoreCounterValue: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkWaitSemaphores: {
        parameters: [
            "pointer",
            "buffer",
            "u64"
        ],
        result: "u32"
    },
    vkSignalSemaphore: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdDrawIndirectCount: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexedIndirectCount: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkGetBufferOpaqueCaptureAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetBufferDeviceAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetDeviceMemoryOpaqueCaptureAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetPhysicalDeviceToolProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdSetCullMode: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetFrontFace: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetPrimitiveTopology: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetViewportWithCount: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetScissorWithCount: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBindVertexBuffers2: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetDepthTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthWriteEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthCompareOp: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthBoundsTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilOp: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetRasterizerDiscardEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthBiasEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetPrimitiveRestartEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCreatePrivateDataSlot: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPrivateDataSlot: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkSetPrivateData: {
        parameters: [
            "pointer",
            "u32",
            "u64",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetPrivateData: {
        parameters: [
            "pointer",
            "u32",
            "u64",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyBuffer2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBlitImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyBufferToImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImageToBuffer2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResolveImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetEvent2: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResetEvent2: {
        parameters: [
            "pointer",
            "pointer",
            "u64"
        ],
        result: "void"
    },
    vkCmdWaitEvents2: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdPipelineBarrier2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkQueueSubmit2: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkCmdWriteTimestamp2: {
        parameters: [
            "pointer",
            "u64",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdBeginRendering: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdEndRendering: {
        parameters: [
            "pointer"
        ],
        result: "void"
    }
}).symbols;
export class VulkanError extends Error {
    constructor(code){
        super(`Vulkan error: ${code} (${Result[code]})`), this.code = code;
    }
}
export function CreateInstance(pCreateInfo, pAllocator, pInstance) {
    let ret = lib.vkCreateInstance(anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pInstance));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyInstance(instance, pAllocator) {
    lib.vkDestroyInstance(instance, anyBuffer(pAllocator));
}
export function EnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) {
    let ret = lib.vkEnumeratePhysicalDevices(instance, anyBuffer(pPhysicalDeviceCount), anyBuffer(pPhysicalDevices));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function GetDeviceProcAddr(device, pName) {
    let ret = lib.vkGetDeviceProcAddr(device, anyBuffer(pName));
    return ret;
}
export function GetInstanceProcAddr(instance, pName) {
    let ret = lib.vkGetInstanceProcAddr(instance, anyBuffer(pName));
    return ret;
}
export function GetPhysicalDeviceProperties(physicalDevice, pProperties) {
    lib.vkGetPhysicalDeviceProperties(physicalDevice, anyBuffer(pProperties));
}
export function GetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) {
    lib.vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, anyBuffer(pQueueFamilyPropertyCount), anyBuffer(pQueueFamilyProperties));
}
export function GetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) {
    lib.vkGetPhysicalDeviceMemoryProperties(physicalDevice, anyBuffer(pMemoryProperties));
}
export function GetPhysicalDeviceFeatures(physicalDevice, pFeatures) {
    lib.vkGetPhysicalDeviceFeatures(physicalDevice, anyBuffer(pFeatures));
}
export function GetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) {
    lib.vkGetPhysicalDeviceFormatProperties(physicalDevice, format, anyBuffer(pFormatProperties));
}
export function GetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) {
    let ret = lib.vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, anyBuffer(pImageFormatProperties));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) {
    let ret = lib.vkCreateDevice(physicalDevice, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pDevice));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyDevice(device, pAllocator) {
    lib.vkDestroyDevice(device, anyBuffer(pAllocator));
}
export function EnumerateInstanceVersion(pApiVersion) {
    let ret = lib.vkEnumerateInstanceVersion(anyBuffer(pApiVersion));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function EnumerateInstanceLayerProperties(pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateInstanceLayerProperties(anyBuffer(pPropertyCount), anyBuffer(pProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function EnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateInstanceExtensionProperties(anyBuffer(pLayerName), anyBuffer(pPropertyCount), anyBuffer(pProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function EnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateDeviceLayerProperties(physicalDevice, anyBuffer(pPropertyCount), anyBuffer(pProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function EnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateDeviceExtensionProperties(physicalDevice, anyBuffer(pLayerName), anyBuffer(pPropertyCount), anyBuffer(pProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function GetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) {
    lib.vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, anyBuffer(pQueue));
}
export function QueueSubmit(queue, submitCount, pSubmits, fence) {
    let ret = lib.vkQueueSubmit(queue, submitCount, anyBuffer(pSubmits), fence);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function QueueWaitIdle(queue) {
    let ret = lib.vkQueueWaitIdle(queue);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DeviceWaitIdle(device) {
    let ret = lib.vkDeviceWaitIdle(device);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function AllocateMemory(device, pAllocateInfo, pAllocator, pMemory) {
    let ret = lib.vkAllocateMemory(device, anyBuffer(pAllocateInfo), anyBuffer(pAllocator), anyBuffer(pMemory));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function FreeMemory(device, memory, pAllocator) {
    lib.vkFreeMemory(device, memory, anyBuffer(pAllocator));
}
export function MapMemory(device, memory, offset, size, flags, ppData) {
    let ret = lib.vkMapMemory(device, memory, offset, size, flags, anyBuffer(ppData));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function UnmapMemory(device, memory) {
    lib.vkUnmapMemory(device, memory);
}
export function FlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) {
    let ret = lib.vkFlushMappedMemoryRanges(device, memoryRangeCount, anyBuffer(pMemoryRanges));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function InvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) {
    let ret = lib.vkInvalidateMappedMemoryRanges(device, memoryRangeCount, anyBuffer(pMemoryRanges));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes) {
    lib.vkGetDeviceMemoryCommitment(device, memory, anyBuffer(pCommittedMemoryInBytes));
}
export function GetBufferMemoryRequirements(device, buffer, pMemoryRequirements) {
    lib.vkGetBufferMemoryRequirements(device, buffer, anyBuffer(pMemoryRequirements));
}
export function BindBufferMemory(device, buffer, memory, memoryOffset) {
    let ret = lib.vkBindBufferMemory(device, buffer, memory, memoryOffset);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetImageMemoryRequirements(device, image, pMemoryRequirements) {
    lib.vkGetImageMemoryRequirements(device, image, anyBuffer(pMemoryRequirements));
}
export function BindImageMemory(device, image, memory, memoryOffset) {
    let ret = lib.vkBindImageMemory(device, image, memory, memoryOffset);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetImageSparseMemoryRequirements(device, image, anyBuffer(pSparseMemoryRequirementCount), anyBuffer(pSparseMemoryRequirements));
}
export function GetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties) {
    lib.vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, anyBuffer(pPropertyCount), anyBuffer(pProperties));
}
export function QueueBindSparse(queue, bindInfoCount, pBindInfo, fence) {
    let ret = lib.vkQueueBindSparse(queue, bindInfoCount, anyBuffer(pBindInfo), fence);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CreateFence(device, pCreateInfo, pAllocator, pFence) {
    let ret = lib.vkCreateFence(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pFence));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyFence(device, fence, pAllocator) {
    lib.vkDestroyFence(device, fence, anyBuffer(pAllocator));
}
export function ResetFences(device, fenceCount, pFences) {
    let ret = lib.vkResetFences(device, fenceCount, anyBuffer(pFences));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetFenceStatus(device, fence) {
    let ret = lib.vkGetFenceStatus(device, fence);
    if (ret === Result.SUCCESS || ret === Result.NOT_READY) return ret;
    throw new VulkanError(ret);
}
export function WaitForFences(device, fenceCount, pFences, waitAll, timeout) {
    let ret = lib.vkWaitForFences(device, fenceCount, anyBuffer(pFences), waitAll, timeout);
    if (ret === Result.SUCCESS || ret === Result.TIMEOUT) return ret;
    throw new VulkanError(ret);
}
export function CreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) {
    let ret = lib.vkCreateSemaphore(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pSemaphore));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroySemaphore(device, semaphore, pAllocator) {
    lib.vkDestroySemaphore(device, semaphore, anyBuffer(pAllocator));
}
export function CreateEvent(device, pCreateInfo, pAllocator, pEvent) {
    let ret = lib.vkCreateEvent(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pEvent));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyEvent(device, event, pAllocator) {
    lib.vkDestroyEvent(device, event, anyBuffer(pAllocator));
}
export function GetEventStatus(device, event) {
    let ret = lib.vkGetEventStatus(device, event);
    if (ret === Result.EVENT_SET || ret === Result.EVENT_RESET) return ret;
    throw new VulkanError(ret);
}
export function SetEvent(device, event) {
    let ret = lib.vkSetEvent(device, event);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function ResetEvent(device, event) {
    let ret = lib.vkResetEvent(device, event);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool) {
    let ret = lib.vkCreateQueryPool(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pQueryPool));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyQueryPool(device, queryPool, pAllocator) {
    lib.vkDestroyQueryPool(device, queryPool, anyBuffer(pAllocator));
}
export function GetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags) {
    let ret = lib.vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, anyBuffer(pData), stride, flags);
    if (ret === Result.SUCCESS || ret === Result.NOT_READY) return ret;
    throw new VulkanError(ret);
}
export function ResetQueryPool(device, queryPool, firstQuery, queryCount) {
    lib.vkResetQueryPool(device, queryPool, firstQuery, queryCount);
}
export function CreateBuffer(device, pCreateInfo, pAllocator, pBuffer) {
    let ret = lib.vkCreateBuffer(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pBuffer));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyBuffer(device, buffer, pAllocator) {
    lib.vkDestroyBuffer(device, buffer, anyBuffer(pAllocator));
}
export function CreateBufferView(device, pCreateInfo, pAllocator, pView) {
    let ret = lib.vkCreateBufferView(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pView));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyBufferView(device, bufferView, pAllocator) {
    lib.vkDestroyBufferView(device, bufferView, anyBuffer(pAllocator));
}
export function CreateImage(device, pCreateInfo, pAllocator, pImage) {
    let ret = lib.vkCreateImage(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pImage));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyImage(device, image, pAllocator) {
    lib.vkDestroyImage(device, image, anyBuffer(pAllocator));
}
export function GetImageSubresourceLayout(device, image, pSubresource, pLayout) {
    lib.vkGetImageSubresourceLayout(device, image, anyBuffer(pSubresource), anyBuffer(pLayout));
}
export function CreateImageView(device, pCreateInfo, pAllocator, pView) {
    let ret = lib.vkCreateImageView(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pView));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyImageView(device, imageView, pAllocator) {
    lib.vkDestroyImageView(device, imageView, anyBuffer(pAllocator));
}
export function CreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) {
    let ret = lib.vkCreateShaderModule(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pShaderModule));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyShaderModule(device, shaderModule, pAllocator) {
    lib.vkDestroyShaderModule(device, shaderModule, anyBuffer(pAllocator));
}
export function CreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache) {
    let ret = lib.vkCreatePipelineCache(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pPipelineCache));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyPipelineCache(device, pipelineCache, pAllocator) {
    lib.vkDestroyPipelineCache(device, pipelineCache, anyBuffer(pAllocator));
}
export function GetPipelineCacheData(device, pipelineCache, pDataSize, pData) {
    let ret = lib.vkGetPipelineCacheData(device, pipelineCache, anyBuffer(pDataSize), anyBuffer(pData));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function MergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches) {
    let ret = lib.vkMergePipelineCaches(device, dstCache, srcCacheCount, anyBuffer(pSrcCaches));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) {
    let ret = lib.vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, anyBuffer(pCreateInfos), anyBuffer(pAllocator), anyBuffer(pPipelines));
    if (ret === Result.SUCCESS || ret === Result.PIPELINE_COMPILE_REQUIRED_EXT) return ret;
    throw new VulkanError(ret);
}
export function CreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) {
    let ret = lib.vkCreateComputePipelines(device, pipelineCache, createInfoCount, anyBuffer(pCreateInfos), anyBuffer(pAllocator), anyBuffer(pPipelines));
    if (ret === Result.SUCCESS || ret === Result.PIPELINE_COMPILE_REQUIRED_EXT) return ret;
    throw new VulkanError(ret);
}
export function DestroyPipeline(device, pipeline, pAllocator) {
    lib.vkDestroyPipeline(device, pipeline, anyBuffer(pAllocator));
}
export function CreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) {
    let ret = lib.vkCreatePipelineLayout(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pPipelineLayout));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyPipelineLayout(device, pipelineLayout, pAllocator) {
    lib.vkDestroyPipelineLayout(device, pipelineLayout, anyBuffer(pAllocator));
}
export function CreateSampler(device, pCreateInfo, pAllocator, pSampler) {
    let ret = lib.vkCreateSampler(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pSampler));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroySampler(device, sampler, pAllocator) {
    lib.vkDestroySampler(device, sampler, anyBuffer(pAllocator));
}
export function CreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) {
    let ret = lib.vkCreateDescriptorSetLayout(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pSetLayout));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) {
    lib.vkDestroyDescriptorSetLayout(device, descriptorSetLayout, anyBuffer(pAllocator));
}
export function CreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) {
    let ret = lib.vkCreateDescriptorPool(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pDescriptorPool));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyDescriptorPool(device, descriptorPool, pAllocator) {
    lib.vkDestroyDescriptorPool(device, descriptorPool, anyBuffer(pAllocator));
}
export function ResetDescriptorPool(device, descriptorPool, flags) {
    let ret = lib.vkResetDescriptorPool(device, descriptorPool, flags);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function AllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) {
    let ret = lib.vkAllocateDescriptorSets(device, anyBuffer(pAllocateInfo), anyBuffer(pDescriptorSets));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function FreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets) {
    let ret = lib.vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, anyBuffer(pDescriptorSets));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function UpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) {
    lib.vkUpdateDescriptorSets(device, descriptorWriteCount, anyBuffer(pDescriptorWrites), descriptorCopyCount, anyBuffer(pDescriptorCopies));
}
export function CreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) {
    let ret = lib.vkCreateFramebuffer(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pFramebuffer));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyFramebuffer(device, framebuffer, pAllocator) {
    lib.vkDestroyFramebuffer(device, framebuffer, anyBuffer(pAllocator));
}
export function CreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) {
    let ret = lib.vkCreateRenderPass(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pRenderPass));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyRenderPass(device, renderPass, pAllocator) {
    lib.vkDestroyRenderPass(device, renderPass, anyBuffer(pAllocator));
}
export function GetRenderAreaGranularity(device, renderPass, pGranularity) {
    lib.vkGetRenderAreaGranularity(device, renderPass, anyBuffer(pGranularity));
}
export function CreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) {
    let ret = lib.vkCreateCommandPool(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pCommandPool));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyCommandPool(device, commandPool, pAllocator) {
    lib.vkDestroyCommandPool(device, commandPool, anyBuffer(pAllocator));
}
export function ResetCommandPool(device, commandPool, flags) {
    let ret = lib.vkResetCommandPool(device, commandPool, flags);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function AllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) {
    let ret = lib.vkAllocateCommandBuffers(device, anyBuffer(pAllocateInfo), anyBuffer(pCommandBuffers));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function FreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) {
    lib.vkFreeCommandBuffers(device, commandPool, commandBufferCount, anyBuffer(pCommandBuffers));
}
export function BeginCommandBuffer(commandBuffer, pBeginInfo) {
    let ret = lib.vkBeginCommandBuffer(commandBuffer, anyBuffer(pBeginInfo));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function EndCommandBuffer(commandBuffer) {
    let ret = lib.vkEndCommandBuffer(commandBuffer);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function ResetCommandBuffer(commandBuffer, flags) {
    let ret = lib.vkResetCommandBuffer(commandBuffer, flags);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) {
    lib.vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}
export function CmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) {
    lib.vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, anyBuffer(pViewports));
}
export function CmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) {
    lib.vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, anyBuffer(pScissors));
}
export function CmdSetLineWidth(commandBuffer, lineWidth) {
    lib.vkCmdSetLineWidth(commandBuffer, lineWidth);
}
export function CmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
    lib.vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
export function CmdSetBlendConstants(commandBuffer, blendConstants) {
    lib.vkCmdSetBlendConstants(commandBuffer, blendConstants);
}
export function CmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds) {
    lib.vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}
export function CmdSetStencilCompareMask(commandBuffer, faceMask, compareMask) {
    lib.vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}
export function CmdSetStencilWriteMask(commandBuffer, faceMask, writeMask) {
    lib.vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}
export function CmdSetStencilReference(commandBuffer, faceMask, reference) {
    lib.vkCmdSetStencilReference(commandBuffer, faceMask, reference);
}
export function CmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) {
    lib.vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, anyBuffer(pDescriptorSets), dynamicOffsetCount, anyBuffer(pDynamicOffsets));
}
export function CmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) {
    lib.vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}
export function CmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) {
    lib.vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, anyBuffer(pBuffers), anyBuffer(pOffsets));
}
export function CmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) {
    lib.vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
export function CmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) {
    lib.vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
export function CmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride) {
    lib.vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
export function CmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride) {
    lib.vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
export function CmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) {
    lib.vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}
export function CmdDispatchIndirect(commandBuffer, buffer, offset) {
    lib.vkCmdDispatchIndirect(commandBuffer, buffer, offset);
}
export function CmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) {
    lib.vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, anyBuffer(pRegions));
}
export function CmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, anyBuffer(pRegions));
}
export function CmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) {
    lib.vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, anyBuffer(pRegions), filter);
}
export function CmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, anyBuffer(pRegions));
}
export function CmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) {
    lib.vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, anyBuffer(pRegions));
}
export function CmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData) {
    lib.vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, anyBuffer(pData));
}
export function CmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) {
    lib.vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}
export function CmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges) {
    lib.vkCmdClearColorImage(commandBuffer, image, imageLayout, anyBuffer(pColor), rangeCount, anyBuffer(pRanges));
}
export function CmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges) {
    lib.vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, anyBuffer(pDepthStencil), rangeCount, anyBuffer(pRanges));
}
export function CmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects) {
    lib.vkCmdClearAttachments(commandBuffer, attachmentCount, anyBuffer(pAttachments), rectCount, anyBuffer(pRects));
}
export function CmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, anyBuffer(pRegions));
}
export function CmdSetEvent(commandBuffer, event, stageMask) {
    lib.vkCmdSetEvent(commandBuffer, event, stageMask);
}
export function CmdResetEvent(commandBuffer, event, stageMask) {
    lib.vkCmdResetEvent(commandBuffer, event, stageMask);
}
export function CmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) {
    lib.vkCmdWaitEvents(commandBuffer, eventCount, anyBuffer(pEvents), srcStageMask, dstStageMask, memoryBarrierCount, anyBuffer(pMemoryBarriers), bufferMemoryBarrierCount, anyBuffer(pBufferMemoryBarriers), imageMemoryBarrierCount, anyBuffer(pImageMemoryBarriers));
}
export function CmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) {
    lib.vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, anyBuffer(pMemoryBarriers), bufferMemoryBarrierCount, anyBuffer(pBufferMemoryBarriers), imageMemoryBarrierCount, anyBuffer(pImageMemoryBarriers));
}
export function CmdBeginQuery(commandBuffer, queryPool, query, flags) {
    lib.vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
}
export function CmdEndQuery(commandBuffer, queryPool, query) {
    lib.vkCmdEndQuery(commandBuffer, queryPool, query);
}
export function CmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount) {
    lib.vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}
export function CmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query) {
    lib.vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}
export function CmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) {
    lib.vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
export function CmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) {
    lib.vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, anyBuffer(pValues));
}
export function CmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) {
    lib.vkCmdBeginRenderPass(commandBuffer, anyBuffer(pRenderPassBegin), contents);
}
export function CmdNextSubpass(commandBuffer, contents) {
    lib.vkCmdNextSubpass(commandBuffer, contents);
}
export function CmdEndRenderPass(commandBuffer) {
    lib.vkCmdEndRenderPass(commandBuffer);
}
export function CmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers) {
    lib.vkCmdExecuteCommands(commandBuffer, commandBufferCount, anyBuffer(pCommandBuffers));
}
export function DestroySurfaceKHR(instance, surface, pAllocator) {
    lib.vkDestroySurfaceKHR(instance, surface, anyBuffer(pAllocator));
}
export function GetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) {
    let ret = lib.vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, anyBuffer(pSupported));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) {
    let ret = lib.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, anyBuffer(pSurfaceCapabilities));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) {
    let ret = lib.vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, anyBuffer(pSurfaceFormatCount), anyBuffer(pSurfaceFormats));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function GetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) {
    let ret = lib.vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, anyBuffer(pPresentModeCount), anyBuffer(pPresentModes));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function CreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) {
    let ret = lib.vkCreateSwapchainKHR(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pSwapchain));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroySwapchainKHR(device, swapchain, pAllocator) {
    lib.vkDestroySwapchainKHR(device, swapchain, anyBuffer(pAllocator));
}
export function GetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) {
    let ret = lib.vkGetSwapchainImagesKHR(device, swapchain, anyBuffer(pSwapchainImageCount), anyBuffer(pSwapchainImages));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function AcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) {
    let ret = lib.vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, anyBuffer(pImageIndex));
    if (ret === Result.SUCCESS || ret === Result.TIMEOUT || ret === Result.NOT_READY || ret === Result.SUBOPTIMAL_KHR) return ret;
    throw new VulkanError(ret);
}
export function QueuePresentKHR(queue, pPresentInfo) {
    let ret = lib.vkQueuePresentKHR(queue, anyBuffer(pPresentInfo));
    if (ret === Result.SUCCESS || ret === Result.SUBOPTIMAL_KHR) return ret;
    throw new VulkanError(ret);
}
export function GetPhysicalDeviceFeatures2(physicalDevice, pFeatures) {
    lib.vkGetPhysicalDeviceFeatures2(physicalDevice, anyBuffer(pFeatures));
}
export function GetPhysicalDeviceProperties2(physicalDevice, pProperties) {
    lib.vkGetPhysicalDeviceProperties2(physicalDevice, anyBuffer(pProperties));
}
export function GetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) {
    lib.vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, anyBuffer(pFormatProperties));
}
export function GetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) {
    let ret = lib.vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, anyBuffer(pImageFormatInfo), anyBuffer(pImageFormatProperties));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) {
    lib.vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, anyBuffer(pQueueFamilyPropertyCount), anyBuffer(pQueueFamilyProperties));
}
export function GetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties) {
    lib.vkGetPhysicalDeviceMemoryProperties2(physicalDevice, anyBuffer(pMemoryProperties));
}
export function GetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties) {
    lib.vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, anyBuffer(pFormatInfo), anyBuffer(pPropertyCount), anyBuffer(pProperties));
}
export function TrimCommandPool(device, commandPool, flags) {
    lib.vkTrimCommandPool(device, commandPool, flags);
}
export function GetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties) {
    lib.vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, anyBuffer(pExternalBufferInfo), anyBuffer(pExternalBufferProperties));
}
export function GetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) {
    lib.vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, anyBuffer(pExternalSemaphoreInfo), anyBuffer(pExternalSemaphoreProperties));
}
export function GetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties) {
    lib.vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, anyBuffer(pExternalFenceInfo), anyBuffer(pExternalFenceProperties));
}
export function EnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) {
    let ret = lib.vkEnumeratePhysicalDeviceGroups(instance, anyBuffer(pPhysicalDeviceGroupCount), anyBuffer(pPhysicalDeviceGroupProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function GetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) {
    lib.vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, anyBuffer(pPeerMemoryFeatures));
}
export function BindBufferMemory2(device, bindInfoCount, pBindInfos) {
    let ret = lib.vkBindBufferMemory2(device, bindInfoCount, anyBuffer(pBindInfos));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function BindImageMemory2(device, bindInfoCount, pBindInfos) {
    let ret = lib.vkBindImageMemory2(device, bindInfoCount, anyBuffer(pBindInfos));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CmdSetDeviceMask(commandBuffer, deviceMask) {
    lib.vkCmdSetDeviceMask(commandBuffer, deviceMask);
}
export function CmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) {
    lib.vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
export function CreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) {
    let ret = lib.vkCreateDescriptorUpdateTemplate(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pDescriptorUpdateTemplate));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator) {
    lib.vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, anyBuffer(pAllocator));
}
export function UpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData) {
    lib.vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, anyBuffer(pData));
}
export function GetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) {
    lib.vkGetBufferMemoryRequirements2(device, anyBuffer(pInfo), anyBuffer(pMemoryRequirements));
}
export function GetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) {
    lib.vkGetImageMemoryRequirements2(device, anyBuffer(pInfo), anyBuffer(pMemoryRequirements));
}
export function GetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetImageSparseMemoryRequirements2(device, anyBuffer(pInfo), anyBuffer(pSparseMemoryRequirementCount), anyBuffer(pSparseMemoryRequirements));
}
export function GetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements) {
    lib.vkGetDeviceBufferMemoryRequirements(device, anyBuffer(pInfo), anyBuffer(pMemoryRequirements));
}
export function GetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements) {
    lib.vkGetDeviceImageMemoryRequirements(device, anyBuffer(pInfo), anyBuffer(pMemoryRequirements));
}
export function GetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetDeviceImageSparseMemoryRequirements(device, anyBuffer(pInfo), anyBuffer(pSparseMemoryRequirementCount), anyBuffer(pSparseMemoryRequirements));
}
export function CreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion) {
    let ret = lib.vkCreateSamplerYcbcrConversion(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pYcbcrConversion));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator) {
    lib.vkDestroySamplerYcbcrConversion(device, ycbcrConversion, anyBuffer(pAllocator));
}
export function GetDeviceQueue2(device, pQueueInfo, pQueue) {
    lib.vkGetDeviceQueue2(device, anyBuffer(pQueueInfo), anyBuffer(pQueue));
}
export function GetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport) {
    lib.vkGetDescriptorSetLayoutSupport(device, anyBuffer(pCreateInfo), anyBuffer(pSupport));
}
export function CreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass) {
    let ret = lib.vkCreateRenderPass2(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pRenderPass));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) {
    lib.vkCmdBeginRenderPass2(commandBuffer, anyBuffer(pRenderPassBegin), anyBuffer(pSubpassBeginInfo));
}
export function CmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) {
    lib.vkCmdNextSubpass2(commandBuffer, anyBuffer(pSubpassBeginInfo), anyBuffer(pSubpassEndInfo));
}
export function CmdEndRenderPass2(commandBuffer, pSubpassEndInfo) {
    lib.vkCmdEndRenderPass2(commandBuffer, anyBuffer(pSubpassEndInfo));
}
export function GetSemaphoreCounterValue(device, semaphore, pValue) {
    let ret = lib.vkGetSemaphoreCounterValue(device, semaphore, anyBuffer(pValue));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function WaitSemaphores(device, pWaitInfo, timeout) {
    let ret = lib.vkWaitSemaphores(device, anyBuffer(pWaitInfo), timeout);
    if (ret === Result.SUCCESS || ret === Result.TIMEOUT) return ret;
    throw new VulkanError(ret);
}
export function SignalSemaphore(device, pSignalInfo) {
    let ret = lib.vkSignalSemaphore(device, anyBuffer(pSignalInfo));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) {
    lib.vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
export function CmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) {
    lib.vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
export function GetBufferOpaqueCaptureAddress(device, pInfo) {
    let ret = lib.vkGetBufferOpaqueCaptureAddress(device, anyBuffer(pInfo));
    return ret;
}
export function GetBufferDeviceAddress(device, pInfo) {
    let ret = lib.vkGetBufferDeviceAddress(device, anyBuffer(pInfo));
    return ret;
}
export function GetDeviceMemoryOpaqueCaptureAddress(device, pInfo) {
    let ret = lib.vkGetDeviceMemoryOpaqueCaptureAddress(device, anyBuffer(pInfo));
    return ret;
}
export function GetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties) {
    let ret = lib.vkGetPhysicalDeviceToolProperties(physicalDevice, anyBuffer(pToolCount), anyBuffer(pToolProperties));
    if (ret === Result.SUCCESS || ret === Result.INCOMPLETE) return ret;
    throw new VulkanError(ret);
}
export function CmdSetCullMode(commandBuffer, cullMode) {
    lib.vkCmdSetCullMode(commandBuffer, cullMode);
}
export function CmdSetFrontFace(commandBuffer, frontFace) {
    lib.vkCmdSetFrontFace(commandBuffer, frontFace);
}
export function CmdSetPrimitiveTopology(commandBuffer, primitiveTopology) {
    lib.vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
}
export function CmdSetViewportWithCount(commandBuffer, viewportCount, pViewports) {
    lib.vkCmdSetViewportWithCount(commandBuffer, viewportCount, anyBuffer(pViewports));
}
export function CmdSetScissorWithCount(commandBuffer, scissorCount, pScissors) {
    lib.vkCmdSetScissorWithCount(commandBuffer, scissorCount, anyBuffer(pScissors));
}
export function CmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides) {
    lib.vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, anyBuffer(pBuffers), anyBuffer(pOffsets), anyBuffer(pSizes), anyBuffer(pStrides));
}
export function CmdSetDepthTestEnable(commandBuffer, depthTestEnable) {
    lib.vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
}
export function CmdSetDepthWriteEnable(commandBuffer, depthWriteEnable) {
    lib.vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
}
export function CmdSetDepthCompareOp(commandBuffer, depthCompareOp) {
    lib.vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
}
export function CmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable) {
    lib.vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
}
export function CmdSetStencilTestEnable(commandBuffer, stencilTestEnable) {
    lib.vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
}
export function CmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp) {
    lib.vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
export function CmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable) {
    lib.vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
}
export function CmdSetDepthBiasEnable(commandBuffer, depthBiasEnable) {
    lib.vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
}
export function CmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable) {
    lib.vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
}
export function CreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot) {
    let ret = lib.vkCreatePrivateDataSlot(device, anyBuffer(pCreateInfo), anyBuffer(pAllocator), anyBuffer(pPrivateDataSlot));
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function DestroyPrivateDataSlot(device, privateDataSlot, pAllocator) {
    lib.vkDestroyPrivateDataSlot(device, privateDataSlot, anyBuffer(pAllocator));
}
export function SetPrivateData(device, objectType, objectHandle, privateDataSlot, data) {
    let ret = lib.vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function GetPrivateData(device, objectType, objectHandle, privateDataSlot, pData) {
    lib.vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, anyBuffer(pData));
}
export function CmdCopyBuffer2(commandBuffer, pCopyBufferInfo) {
    lib.vkCmdCopyBuffer2(commandBuffer, anyBuffer(pCopyBufferInfo));
}
export function CmdCopyImage2(commandBuffer, pCopyImageInfo) {
    lib.vkCmdCopyImage2(commandBuffer, anyBuffer(pCopyImageInfo));
}
export function CmdBlitImage2(commandBuffer, pBlitImageInfo) {
    lib.vkCmdBlitImage2(commandBuffer, anyBuffer(pBlitImageInfo));
}
export function CmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo) {
    lib.vkCmdCopyBufferToImage2(commandBuffer, anyBuffer(pCopyBufferToImageInfo));
}
export function CmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo) {
    lib.vkCmdCopyImageToBuffer2(commandBuffer, anyBuffer(pCopyImageToBufferInfo));
}
export function CmdResolveImage2(commandBuffer, pResolveImageInfo) {
    lib.vkCmdResolveImage2(commandBuffer, anyBuffer(pResolveImageInfo));
}
export function CmdSetEvent2(commandBuffer, event, pDependencyInfo) {
    lib.vkCmdSetEvent2(commandBuffer, event, anyBuffer(pDependencyInfo));
}
export function CmdResetEvent2(commandBuffer, event, stageMask) {
    lib.vkCmdResetEvent2(commandBuffer, event, stageMask);
}
export function CmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos) {
    lib.vkCmdWaitEvents2(commandBuffer, eventCount, anyBuffer(pEvents), anyBuffer(pDependencyInfos));
}
export function CmdPipelineBarrier2(commandBuffer, pDependencyInfo) {
    lib.vkCmdPipelineBarrier2(commandBuffer, anyBuffer(pDependencyInfo));
}
export function QueueSubmit2(queue, submitCount, pSubmits, fence) {
    let ret = lib.vkQueueSubmit2(queue, submitCount, anyBuffer(pSubmits), fence);
    if (ret === Result.SUCCESS) return ret;
    throw new VulkanError(ret);
}
export function CmdWriteTimestamp2(commandBuffer, stage, queryPool, query) {
    lib.vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
}
export function CmdBeginRendering(commandBuffer, pRenderingInfo) {
    lib.vkCmdBeginRendering(commandBuffer, anyBuffer(pRenderingInfo));
}
export function CmdEndRendering(commandBuffer) {
    lib.vkCmdEndRendering(commandBuffer);
}
export * from "./util.ts";
