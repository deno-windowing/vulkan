export const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
export const VK_UUID_SIZE = 16;
export const VK_LUID_SIZE = 8;
export const VK_LUID_SIZE_KHR = void 0;
export const VK_MAX_EXTENSION_NAME_SIZE = 256;
export const VK_MAX_DESCRIPTION_SIZE = 256;
export const VK_MAX_MEMORY_TYPES = 32;
export const VK_MAX_MEMORY_HEAPS = 16;
export const VK_LOD_CLAMP_NONE = 1000.0;
export const VK_REMAINING_MIP_LEVELS = -1;
export const VK_REMAINING_ARRAY_LAYERS = -1;
export const VK_WHOLE_SIZE = ~0n;
export const VK_ATTACHMENT_UNUSED = -1;
export const VK_TRUE = 1;
export const VK_FALSE = 0;
export const VK_QUEUE_FAMILY_IGNORED = -1;
export const VK_QUEUE_FAMILY_EXTERNAL = -2;
export const VK_QUEUE_FAMILY_EXTERNAL_KHR = void 0;
export const VK_QUEUE_FAMILY_FOREIGN_EXT = -3;
export const VK_SUBPASS_EXTERNAL = -1;
export const VK_MAX_DEVICE_GROUP_SIZE = 32;
export const VK_MAX_DEVICE_GROUP_SIZE_KHR = void 0;
export const VK_MAX_DRIVER_NAME_SIZE = 256;
export const VK_MAX_DRIVER_NAME_SIZE_KHR = void 0;
export const VK_MAX_DRIVER_INFO_SIZE = 256;
export const VK_MAX_DRIVER_INFO_SIZE_KHR = void 0;
export const VK_SHADER_UNUSED_KHR = -1;
export const VK_SHADER_UNUSED_NV = void 0;
export const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = 16;
export const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = void 0;
export const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = 32;
export const STD_VIDEO_H264_CPB_CNT_LIST_SIZE = 32;
export const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = 6;
export const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = 16;
export const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = 6;
export const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = 64;
export const STD_VIDEO_H264_MAX_NUM_LIST_REF = 32;
export const STD_VIDEO_H264_MAX_CHROMA_PLANES = 2;
export const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";
export const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = 2;
export const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";
export const STD_VIDEO_H265_CPB_CNT_LIST_SIZE = 32;
export const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = 7;
export const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = 16;
export const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = 6;
export const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = 2;
export const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = 64;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = 6;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = 19;
export const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = 21;
export const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = 3;
export const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = 128;
export const STD_VIDEO_H265_MAX_NUM_LIST_REF = 15;
export const STD_VIDEO_H265_MAX_CHROMA_PLANES = 2;
export const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = 64;
export const STD_VIDEO_H265_MAX_DPB_SIZE = 16;
export const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = 32;
export const STD_VIDEO_H265_MAX_LONG_TERM_PICS = 16;
export const STD_VIDEO_H265_MAX_DELTA_POC = 48;
export const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";
export const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = 8;
export const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";
export const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
export const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
export const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
export const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
export const VK_KHR_XLIB_SURFACE_EXTENSION_NAME = "VK_KHR_xlib_surface";
export const VK_KHR_XCB_SURFACE_EXTENSION_NAME = "VK_KHR_xcb_surface";
export const VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME = "VK_KHR_wayland_surface";
export const VK_KHR_MIR_SURFACE_EXTENSION_NAME = "VK_KHR_mir_surface";
export const VK_KHR_ANDROID_SURFACE_EXTENSION_NAME = "VK_KHR_android_surface";
export const VK_KHR_WIN32_SURFACE_EXTENSION_NAME = "VK_KHR_win32_surface";
export const VK_ANDROID_NATIVE_BUFFER_NUMBER = 11;
export const VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME = "VK_ANDROID_native_buffer";
export const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
export const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
export const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
export const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
export const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
export const VK_AMD_EXTENSION_17_EXTENSION_NAME = "VK_AMD_extension_17";
export const VK_AMD_EXTENSION_18_EXTENSION_NAME = "VK_AMD_extension_18";
export const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
export const VK_AMD_EXTENSION_20_EXTENSION_NAME = "VK_AMD_extension_20";
export const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
export const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
export const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
export const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
export const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
export const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
export const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
export const VK_EXT_EXTENSION_28_EXTENSION_NAME = "VK_EXT_extension_28";
export const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
export const VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
export const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
export const VK_AMD_EXTENSION_32_EXTENSION_NAME = "VK_AMD_extension_32";
export const VK_AMD_EXTENSION_33_EXTENSION_NAME = "VK_AMD_extension_33";
export const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
export const VK_AMD_EXTENSION_35_EXTENSION_NAME = "VK_AMD_extension_35";
export const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
export const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
export const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
export const VK_EXT_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_EXT_video_encode_h264";
export const VK_EXT_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_EXT_video_encode_h265";
export const VK_EXT_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_EXT_video_decode_h264";
export const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
export const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
export const VK_AMD_EXTENSION_44_EXTENSION_NAME = "VK_AMD_extension_44";
export const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
export const VK_AMD_EXTENSION_46_EXTENSION_NAME = "VK_AMD_extension_46";
export const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
export const VK_NVX_EXTENSION_48_EXTENSION_NAME = "VK_NVX_extension_48";
export const VK_GOOGLE_EXTENSION_49_EXTENSION_NAME = "VK_GOOGLE_extension_49";
export const VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME = "VK_GGP_stream_descriptor_surface";
export const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
export const VK_NV_EXTENSION_52_EXTENSION_NAME = "VK_NV_extension_52";
export const VK_NV_EXTENSION_53_EXTENSION_NAME = "VK_NV_extension_53";
export const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
export const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
export const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
export const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
export const VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_NV_external_memory_win32";
export const VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_NV_win32_keyed_mutex";
export const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
export const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
export const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
export const VK_NN_VI_SURFACE_EXTENSION_NAME = "VK_NN_vi_surface";
export const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
export const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
export const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
export const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
export const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
export const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
export const VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
export const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
export const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
export const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
export const VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME = "VK_KHR_external_memory_win32";
export const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
export const VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME = "VK_KHR_win32_keyed_mutex";
export const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
export const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
export const VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME = "VK_KHR_external_semaphore_win32";
export const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
export const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
export const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
export const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
export const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
export const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
export const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
export const VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NVX_device_generated_commands";
export const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
export const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
export const VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_xlib_display";
export const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
export const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
export const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
export const VK_RESERVED_DO_NOT_USE_94_EXTENSION_NAME = "VK_RESERVED_do_not_use_94";
export const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
export const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
export const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
export const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
export const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
export const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
export const VK_NV_EXTENSION_101_EXTENSION_NAME = "VK_NV_extension_101";
export const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
export const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
export const VK_NV_EXTENSION_104_EXTENSION_NAME = "VK_NV_extension_104";
export const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
export const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
export const VK_IMG_EXTENSION_107_EXTENSION_NAME = "VK_IMG_extension_107";
export const VK_IMG_EXTENSION_108_EXTENSION_NAME = "VK_IMG_extension_108";
export const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
export const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
export const VK_IMG_EXTENSION_111_EXTENSION_NAME = "VK_IMG_extension_111";
export const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
export const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
export const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
export const VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME = "VK_KHR_external_fence_win32";
export const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
export const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
export const VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
export const VK_KHR_EXTENSION_119_EXTENSION_NAME = "VK_KHR_extension_119";
export const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
export const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
export const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
export const VK_MVK_IOS_SURFACE_EXTENSION_NAME = "VK_MVK_ios_surface";
export const VK_MVK_MACOS_SURFACE_EXTENSION_NAME = "VK_MVK_macos_surface";
export const VK_MVK_MOLTENVK_EXTENSION_NAME = "VK_MVK_moltenvk";
export const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
export const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
export const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
export const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
export const VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME = "VK_ANDROID_external_memory_android_hardware_buffer";
export const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
export const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
export const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
export const VK_AMD_EXTENSION_134_EXTENSION_NAME = "VK_AMD_extension_134";
export const VK_AMD_EXTENSION_135_EXTENSION_NAME = "VK_AMD_extension_135";
export const VK_AMD_EXTENSION_136_EXTENSION_NAME = "VK_AMD_extension_136";
export const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
export const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
export const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
export const VK_AMD_EXTENSION_140_EXTENSION_NAME = "VK_AMD_extension_140";
export const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
export const VK_AMD_EXTENSION_142_EXTENSION_NAME = "VK_AMD_extension_142";
export const VK_AMD_EXTENSION_143_EXTENSION_NAME = "VK_AMD_extension_143";
export const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
export const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
export const VK_RESERVED_DO_NOT_USE_146_EXTENSION_NAME = "VK_RESERVED_do_not_use_146";
export const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
export const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
export const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
export const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
export const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
export const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
export const VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
export const VK_NV_EXTENSION_152_EXTENSION_NAME = "VK_NV_extension_152";
export const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
export const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
export const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
export const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
export const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
export const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
export const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
export const VK_EXT_EXTENSION_160_EXTENSION_NAME = "VK_EXT_extension_160";
export const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
export const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
export const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
export const VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME = "VK_KHR_portability_subset";
export const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
export const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
export const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
export const VK_NV_EXTENSION_168_EXTENSION_NAME = "VK_NV_extension_168";
export const VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
export const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
export const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
export const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
export const VK_QCOM_EXTENSION_173_EXTENSION_NAME = "VK_QCOM_extension_173";
export const VK_QCOM_EXTENSION_174_EXTENSION_NAME = "VK_QCOM_extension_174";
export const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
export const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
export const VK_EXT_EXTENSION_177_EXTENSION_NAME = "VK_EXT_extension_177";
export const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
export const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
export const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
export const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
export const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
export const VK_AMD_EXTENSION_183_EXTENSION_NAME = "VK_AMD_extension_183";
export const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
export const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
export const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
export const VK_AMD_EXTENSION_187_EXTENSION_NAME = "VK_AMD_extension_187";
export const VK_EXT_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_EXT_video_decode_h265";
export const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
export const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
export const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
export const VK_GGP_FRAME_TOKEN_EXTENSION_NAME = "VK_GGP_frame_token";
export const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
export const VK_GOOGLE_EXTENSION_194_EXTENSION_NAME = "VK_GOOGLE_extension_194";
export const VK_GOOGLE_EXTENSION_195_EXTENSION_NAME = "VK_GOOGLE_extension_195";
export const VK_GOOGLE_EXTENSION_196_EXTENSION_NAME = "VK_GOOGLE_extension_196";
export const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
export const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
export const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
export const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
export const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
export const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
export const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
export const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
export const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
export const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
export const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
export const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
export const VK_KHR_EXTENSION_209_EXTENSION_NAME = "VK_KHR_extension_209";
export const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
export const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
export const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
export const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
export const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
export const VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME = "VK_FUCHSIA_imagepipe_surface";
export const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
export const VK_GOOGLE_EXTENSION_217_EXTENSION_NAME = "VK_GOOGLE_extension_217";
export const VK_EXT_METAL_SURFACE_EXTENSION_NAME = "VK_EXT_metal_surface";
export const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
export const VK_EXT_EXTENSION_220_EXTENSION_NAME = "VK_EXT_extension_220";
export const VK_KHR_EXTENSION_221_EXTENSION_NAME = "VK_KHR_extension_221";
export const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
export const VK_EXT_EXTENSION_223_EXTENSION_NAME = "VK_EXT_extension_223";
export const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
export const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
export const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
export const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
export const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
export const VK_AMD_EXTENSION_229_EXTENSION_NAME = "VK_AMD_extension_229";
export const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
export const VK_AMD_EXTENSION_231_EXTENSION_NAME = "VK_AMD_extension_231";
export const VK_AMD_EXTENSION_232_EXTENSION_NAME = "VK_AMD_extension_232";
export const VK_AMD_EXTENSION_233_EXTENSION_NAME = "VK_AMD_extension_233";
export const VK_AMD_EXTENSION_234_EXTENSION_NAME = "VK_AMD_extension_234";
export const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
export const VK_AMD_EXTENSION_236_EXTENSION_NAME = "VK_AMD_extension_236";
export const VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
export const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
export const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
export const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
export const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
export const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
export const VK_INTEL_EXTENSION_243_EXTENSION_NAME = "VK_INTEL_extension_243";
export const VK_MESA_EXTENSION_244_EXTENSION_NAME = "VK_MESA_extension_244";
export const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
export const VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
export const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
export const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
export const VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
export const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
export const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
export const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
export const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
export const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
export const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
export const VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME = "VK_EXT_full_screen_exclusive";
export const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
export const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
export const VK_EXT_EXTENSION_259_EXTENSION_NAME = "VK_EXT_extension_259";
export const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
export const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
export const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
export const VK_GGP_EXTENSION_263_EXTENSION_NAME = "VK_GGP_extension_263";
export const VK_BRCM_EXTENSION_264_EXTENSION_NAME = "VK_BRCM_extension_264";
export const VK_BRCM_EXTENSION_265_EXTENSION_NAME = "VK_BRCM_extension_265";
export const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
export const VK_EXT_EXTENSION_267_EXTENSION_NAME = "VK_EXT_extension_267";
export const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
export const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
export const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
export const VK_INTEL_EXTENSION_271_EXTENSION_NAME = "VK_INTEL_extension_271";
export const VK_INTEL_EXTENSION_272_EXTENSION_NAME = "VK_INTEL_extension_272";
export const VK_INTEL_EXTENSION_273_EXTENSION_NAME = "VK_INTEL_extension_273";
export const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
export const VK_KHR_EXTENSION_275_EXTENSION_NAME = "VK_KHR_extension_275";
export const VK_KHR_EXTENSION_276_EXTENSION_NAME = "VK_KHR_extension_276";
export const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
export const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
export const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
export const VK_KHR_EXTENSION_280_EXTENSION_NAME = "VK_KHR_extension_280";
export const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
export const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
export const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
export const VK_EXT_EXTENSION_284_EXTENSION_NAME = "VK_EXT_extension_284";
export const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
export const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
export const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
export const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
export const VK_EXT_EXTENSION_289_EXTENSION_NAME = "VK_EXT_extension_289";
export const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
export const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
export const VK_NV_EXTENSION_292_EXTENSION_NAME = "VK_NV_extension_292";
export const VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
export const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
export const VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
export const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
export const VK_KHR_EXTENSION_297_EXTENSION_NAME = "VK_KHR_extension_297";
export const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
export const VK_KHR_EXTENSION_299_EXTENSION_NAME = "VK_KHR_extension_299";
export const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";
export const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
export const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
export const VK_QCOM_EXTENSION_303_EXTENSION_NAME = "VK_QCOM_extension_303";
export const VK_QCOM_EXTENSION_304_EXTENSION_NAME = "VK_QCOM_extension_304";
export const VK_QCOM_EXTENSION_305_EXTENSION_NAME = "VK_QCOM_extension_305";
export const VK_QCOM_EXTENSION_306_EXTENSION_NAME = "VK_QCOM_extension_306";
export const VK_QCOM_EXTENSION_307_EXTENSION_NAME = "VK_QCOM_extension_307";
export const VK_NV_EXTENSION_308_EXTENSION_NAME = "VK_NV_extension_308";
export const VK_KHR_EXTENSION_309_EXTENSION_NAME = "VK_KHR_extension_309";
export const VK_QCOM_EXTENSION_310_EXTENSION_NAME = "VK_QCOM_extension_310";
export const VK_NV_EXTENSION_311_EXTENSION_NAME = "VK_NV_extension_311";
export const VK_EXT_METAL_OBJECTS_EXTENSION_NAME = "VK_EXT_metal_objects";
export const VK_EXT_EXTENSION_313_EXTENSION_NAME = "VK_EXT_extension_313";
export const VK_AMD_EXTENSION_314_EXTENSION_NAME = "VK_AMD_extension_314";
export const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
export const VK_AMD_EXTENSION_316_EXTENSION_NAME = "VK_AMD_extension_316";
export const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
export const VK_AMD_EXTENSION_318_EXTENSION_NAME = "VK_AMD_extension_318";
export const VK_AMD_EXTENSION_319_EXTENSION_NAME = "VK_AMD_extension_319";
export const VK_AMD_EXTENSION_320_EXTENSION_NAME = "VK_AMD_extension_320";
export const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
export const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
export const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
export const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
export const VK_KHR_EXTENSION_325_EXTENSION_NAME = "VK_KHR_extension_325";
export const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
export const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
export const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
export const VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
export const VK_NV_EXTENSION_330_EXTENSION_NAME = "VK_NV_extension_330";
export const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
export const VK_NV_EXTENSION_332_EXTENSION_NAME = "VK_NV_extension_332";
export const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
export const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
export const VK_KHR_EXTENSION_335_EXTENSION_NAME = "VK_KHR_extension_335";
export const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
export const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
export const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
export const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
export const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
export const VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
export const VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
export const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
export const VK_ARM_EXTENSION_344_EXTENSION_NAME = "VK_ARM_extension_344";
export const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
export const VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = "VK_NV_acquire_winrt_display";
export const VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME = "VK_EXT_directfb_surface";
export const VK_KHR_EXTENSION_350_EXTENSION_NAME = "VK_KHR_extension_350";
export const VK_NV_EXTENSION_351_EXTENSION_NAME = "VK_NV_extension_351";
export const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
export const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
export const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
export const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
export const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
export const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
export const VK_KHR_EXTENSION_358_EXTENSION_NAME = "VK_KHR_extension_358";
export const VK_EXT_EXTENSION_359_EXTENSION_NAME = "VK_EXT_extension_359";
export const VK_EXT_EXTENSION_360_EXTENSION_NAME = "VK_EXT_extension_360";
export const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
export const VK_EXT_EXTENSION_362_EXTENSION_NAME = "VK_EXT_extension_362";
export const VK_EXT_EXTENSION_363_EXTENSION_NAME = "VK_EXT_extension_363";
export const VK_FUCHSIA_EXTENSION_364_EXTENSION_NAME = "VK_FUCHSIA_extension_364";
export const VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_FUCHSIA_external_memory";
export const VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_FUCHSIA_external_semaphore";
export const VK_FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME = "VK_FUCHSIA_buffer_collection";
export const VK_FUCHSIA_EXTENSION_368_EXTENSION_NAME = "VK_FUCHSIA_extension_368";
export const VK_QCOM_EXTENSION_369_EXTENSION_NAME = "VK_QCOM_extension_369";
export const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
export const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
export const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
export const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
export const VK_NV_EXTENSION_374_EXTENSION_NAME = "VK_NV_extension_374";
export const VK_NV_EXTENSION_375_EXTENSION_NAME = "VK_NV_extension_375";
export const VK_EXT_EXTENSION_376_EXTENSION_NAME = "VK_EXT_extension_376";
export const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
export const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
export const VK_QNX_SCREEN_SURFACE_EXTENSION_NAME = "VK_QNX_screen_surface";
export const VK_KHR_EXTENSION_380_EXTENSION_NAME = "VK_KHR_extension_380";
export const VK_KHR_EXTENSION_381_EXTENSION_NAME = "VK_KHR_extension_381";
export const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
export const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
export const VK_EXT_EXTENSION_384_EXTENSION_NAME = "VK_EXT_extension_384";
export const VK_MESA_EXTENSION_385_EXTENSION_NAME = "VK_MESA_extension_385";
export const VK_GOOGLE_EXTENSION_386_EXTENSION_NAME = "VK_GOOGLE_extension_386";
export const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
export const VK_EXT_EXTENSION_388_EXTENSION_NAME = "VK_EXT_extension_388";
export const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
export const VK_EXT_EXTENSION_390_EXTENSION_NAME = "VK_EXT_extension_390";
export const VK_EXT_EXTENSION_391_EXTENSION_NAME = "VK_EXT_extension_391";
export const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
export const VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
export const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
export const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
export const VK_KHR_EXTENSION_396_EXTENSION_NAME = "VK_KHR_extension_396";
export const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
export const VK_NV_EXTENSION_398_EXTENSION_NAME = "VK_NV_extension_398";
export const VK_JUICE_EXTENSION_399_EXTENSION_NAME = "VK_JUICE_extension_399";
export const VK_JUICE_EXTENSION_400_EXTENSION_NAME = "VK_JUICE_extension_400";
export const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
export const VK_FB_EXTENSION_402_EXTENSION_NAME = "VK_FB_extension_402";
export const VK_FB_EXTENSION_403_EXTENSION_NAME = "VK_FB_extension_403";
export const VK_FB_EXTENSION_404_EXTENSION_NAME = "VK_FB_extension_404";
export const VK_HUAWEI_EXTENSION_405_EXTENSION_NAME = "VK_HUAWEI_extension_405";
export const VK_HUAWEI_EXTENSION_406_EXTENSION_NAME = "VK_HUAWEI_extension_406";
export const VK_GGP_EXTENSION_407_EXTENSION_NAME = "VK_GGP_extension_407";
export const VK_GGP_EXTENSION_408_EXTENSION_NAME = "VK_GGP_extension_408";
export const VK_GGP_EXTENSION_409_EXTENSION_NAME = "VK_GGP_extension_409";
export const VK_GGP_EXTENSION_410_EXTENSION_NAME = "VK_GGP_extension_410";
export const VK_GGP_EXTENSION_411_EXTENSION_NAME = "VK_GGP_extension_411";
export const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
export const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
export const VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
export const VK_HUAWEI_EXTENSION_415_EXTENSION_NAME = "VK_HUAWEI_extension_415";
export const VK_ARM_EXTENSION_416_EXTENSION_NAME = "VK_ARM_extension_416";
export const VK_KHR_EXTENSION_417_EXTENSION_NAME = "VK_KHR_extension_417";
export const VK_ARM_EXTENSION_418_EXTENSION_NAME = "VK_ARM_extension_418";
export const VK_EXT_EXTENSION_419_EXTENSION_NAME = "VK_EXT_extension_419";
export const VK_EXT_EXTENSION_420_EXTENSION_NAME = "VK_EXT_extension_420";
export const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
export const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
export const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
export const VK_ARM_EXTENSION_424_EXTENSION_NAME = "VK_ARM_extension_424";
export const VK_ARM_EXTENSION_425_EXTENSION_NAME = "VK_ARM_extension_425";
export const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
export const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
export const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
export const VK_NV_EXTENSION_429_EXTENSION_NAME = "VK_NV_extension_429";
export const VK_NV_EXTENSION_430_EXTENSION_NAME = "VK_NV_extension_430";
export const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
export const VK_NV_EXTENSION_432_EXTENSION_NAME = "VK_NV_extension_432";
export const VK_NV_EXTENSION_433_EXTENSION_NAME = "VK_NV_extension_433";
export const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
export const VK_KHR_EXTENSION_435_EXTENSION_NAME = "VK_KHR_extension_435";
export const VK_NV_EXTENSION_436_EXTENSION_NAME = "VK_NV_extension_436";
export const VK_EXT_EXTENSION_437_EXTENSION_NAME = "VK_EXT_extension_437";
export const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
export const VK_SEC_EXTENSION_439_EXTENSION_NAME = "VK_SEC_extension_439";
export const VK_QCOM_EXTENSION_440_EXTENSION_NAME = "VK_QCOM_extension_440";
export const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
export const VK_COREAVI_EXTENSION_442_EXTENSION_NAME = "VK_COREAVI_extension_442";
export const VK_COREAVI_EXTENSION_443_EXTENSION_NAME = "VK_COREAVI_extension_443";
export const VK_COREAVI_EXTENSION_444_EXTENSION_NAME = "VK_COREAVI_extension_444";
export const VK_COREAVI_EXTENSION_445_EXTENSION_NAME = "VK_COREAVI_extension_445";
export const VK_COREAVI_EXTENSION_446_EXTENSION_NAME = "VK_COREAVI_extension_446";
export const VK_COREAVI_EXTENSION_447_EXTENSION_NAME = "VK_COREAVI_extension_447";
export const VK_SEC_EXTENSION_448_EXTENSION_NAME = "VK_SEC_extension_448";
export const VK_SEC_EXTENSION_449_EXTENSION_NAME = "VK_SEC_extension_449";
export const VK_SEC_EXTENSION_450_EXTENSION_NAME = "VK_SEC_extension_450";
export const VK_SEC_EXTENSION_451_EXTENSION_NAME = "VK_SEC_extension_451";
export const VK_NV_EXTENSION_452_EXTENSION_NAME = "VK_NV_extension_452";
export const VK_ARM_EXTENSION_453_EXTENSION_NAME = "VK_ARM_extension_453";
export const VK_GOOGLE_EXTENSION_454_EXTENSION_NAME = "VK_GOOGLE_extension_454";
export const VK_GOOGLE_EXTENSION_455_EXTENSION_NAME = "VK_GOOGLE_extension_455";
export const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
export const VK_EXT_EXTENSION_457_EXTENSION_NAME = "VK_EXT_extension_457";
export const VK_EXT_EXTENSION_458_EXTENSION_NAME = "VK_EXT_extension_458";
export const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
export const VK_EXT_EXTENSION_460_EXTENSION_NAME = "VK_EXT_extension_460";
export const VK_EXT_EXTENSION_461_EXTENSION_NAME = "VK_EXT_extension_461";
export const VK_EXT_EXTENSION_462_EXTENSION_NAME = "VK_EXT_extension_462";
export const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
export const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
export const VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
export const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
export const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
export const VK_EXT_EXTENSION_468_EXTENSION_NAME = "VK_EXT_extension_468";
export const VK_ANDROID_EXTENSION_469_EXTENSION_NAME = "VK_ANDROID_extension_469";
export const VK_AMD_EXTENSION_470_EXTENSION_NAME = "VK_AMD_extension_470";
export const VK_AMD_EXTENSION_471_EXTENSION_NAME = "VK_AMD_extension_471";
export const VK_AMD_EXTENSION_472_EXTENSION_NAME = "VK_AMD_extension_472";
export const VK_AMD_EXTENSION_473_EXTENSION_NAME = "VK_AMD_extension_473";
export const VK_AMD_EXTENSION_474_EXTENSION_NAME = "VK_AMD_extension_474";
export const VK_AMD_EXTENSION_475_EXTENSION_NAME = "VK_AMD_extension_475";
export const VK_AMD_EXTENSION_476_EXTENSION_NAME = "VK_AMD_extension_476";
export const VK_AMD_EXTENSION_477_EXTENSION_NAME = "VK_AMD_extension_477";
export const VK_AMD_EXTENSION_478_EXTENSION_NAME = "VK_AMD_extension_478";
export const VK_AMD_EXTENSION_479_EXTENSION_NAME = "VK_AMD_extension_479";
export const VK_EXT_EXTENSION_480_EXTENSION_NAME = "VK_EXT_extension_480";
export const VK_EXT_EXTENSION_481_EXTENSION_NAME = "VK_EXT_extension_481";
export const VK_EXT_EXTENSION_482_EXTENSION_NAME = "VK_EXT_extension_482";
export const VK_EXT_EXTENSION_483_EXTENSION_NAME = "VK_EXT_extension_483";
export const VK_EXT_EXTENSION_484_EXTENSION_NAME = "VK_EXT_extension_484";
export const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
export const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
export const VK_EXT_EXTENSION_487_EXTENSION_NAME = "VK_EXT_extension_487";
export const VK_EXT_EXTENSION_488_EXTENSION_NAME = "VK_EXT_extension_488";
export const VK_QCOM_EXTENSION_489_EXTENSION_NAME = "VK_QCOM_extension_489";
export const VK_NV_EXTENSION_490_EXTENSION_NAME = "VK_NV_extension_490";
export const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
export const VK_NV_EXTENSION_492_EXTENSION_NAME = "VK_NV_extension_492";
export const VK_NV_EXTENSION_493_EXTENSION_NAME = "VK_NV_extension_493";
export const VK_NV_EXTENSION_494_EXTENSION_NAME = "VK_NV_extension_494";
export const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
export const VK_EXT_EXTENSION_496_EXTENSION_NAME = "VK_EXT_extension_496";
export const VK_EXT_EXTENSION_497_EXTENSION_NAME = "VK_EXT_extension_497";
export const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
export const VK_EXT_EXTENSION_499_EXTENSION_NAME = "VK_EXT_extension_499";
export const VK_EXT_EXTENSION_500_EXTENSION_NAME = "VK_EXT_extension_500";
export const VK_EXT_EXTENSION_501_EXTENSION_NAME = "VK_EXT_extension_501";
export const VK_EXT_EXTENSION_502_EXTENSION_NAME = "VK_EXT_extension_502";
export const VK_EXT_EXTENSION_503_EXTENSION_NAME = "VK_EXT_extension_503";
export const VK_NV_EXTENSION_504_EXTENSION_NAME = "VK_NV_extension_504";
export var StdVideoH264ChromaFormatIdc;
!function(StdVideoH264ChromaFormatIdc) {
    StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0] = "STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1] = "STD_VIDEO_H264_CHROMA_FORMAT_IDC_420", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2] = "STD_VIDEO_H264_CHROMA_FORMAT_IDC_422", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3] = "STD_VIDEO_H264_CHROMA_FORMAT_IDC_444", StdVideoH264ChromaFormatIdc[StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID";
}(StdVideoH264ChromaFormatIdc || (StdVideoH264ChromaFormatIdc = {}));
export var StdVideoH264ProfileIdc;
!function(StdVideoH264ProfileIdc) {
    StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66] = "STD_VIDEO_H264_PROFILE_IDC_BASELINE", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAIN = 77] = "STD_VIDEO_H264_PROFILE_IDC_MAIN", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH = 100] = "STD_VIDEO_H264_PROFILE_IDC_HIGH", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244] = "STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE", StdVideoH264ProfileIdc[StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_PROFILE_IDC_INVALID";
}(StdVideoH264ProfileIdc || (StdVideoH264ProfileIdc = {}));
export var StdVideoH264LevelIdc;
!function(StdVideoH264LevelIdc) {
    StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_0 = 0] = "STD_VIDEO_H264_LEVEL_IDC_1_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_1 = 1] = "STD_VIDEO_H264_LEVEL_IDC_1_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_2 = 2] = "STD_VIDEO_H264_LEVEL_IDC_1_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_3 = 3] = "STD_VIDEO_H264_LEVEL_IDC_1_3", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_0 = 4] = "STD_VIDEO_H264_LEVEL_IDC_2_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_1 = 5] = "STD_VIDEO_H264_LEVEL_IDC_2_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_2 = 6] = "STD_VIDEO_H264_LEVEL_IDC_2_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_0 = 7] = "STD_VIDEO_H264_LEVEL_IDC_3_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_1 = 8] = "STD_VIDEO_H264_LEVEL_IDC_3_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_2 = 9] = "STD_VIDEO_H264_LEVEL_IDC_3_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_0 = 10] = "STD_VIDEO_H264_LEVEL_IDC_4_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_1 = 11] = "STD_VIDEO_H264_LEVEL_IDC_4_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_2 = 12] = "STD_VIDEO_H264_LEVEL_IDC_4_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_0 = 13] = "STD_VIDEO_H264_LEVEL_IDC_5_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_1 = 14] = "STD_VIDEO_H264_LEVEL_IDC_5_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_2 = 15] = "STD_VIDEO_H264_LEVEL_IDC_5_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_0 = 16] = "STD_VIDEO_H264_LEVEL_IDC_6_0", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_1 = 17] = "STD_VIDEO_H264_LEVEL_IDC_6_1", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_2 = 18] = "STD_VIDEO_H264_LEVEL_IDC_6_2", StdVideoH264LevelIdc[StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_LEVEL_IDC_INVALID";
}(StdVideoH264LevelIdc || (StdVideoH264LevelIdc = {}));
export var StdVideoH264PocType;
!function(StdVideoH264PocType) {
    StdVideoH264PocType[StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_0 = 0] = "STD_VIDEO_H264_POC_TYPE_0", StdVideoH264PocType[StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_1 = 1] = "STD_VIDEO_H264_POC_TYPE_1", StdVideoH264PocType[StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_2 = 2] = "STD_VIDEO_H264_POC_TYPE_2", StdVideoH264PocType[StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647] = "STD_VIDEO_H264_POC_TYPE_INVALID";
}(StdVideoH264PocType || (StdVideoH264PocType = {}));
export var StdVideoH264AspectRatioIdc;
!function(StdVideoH264AspectRatioIdc) {
    StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR", StdVideoH264AspectRatioIdc[StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID";
}(StdVideoH264AspectRatioIdc || (StdVideoH264AspectRatioIdc = {}));
export var StdVideoH264WeightedBipredIdc;
!function(StdVideoH264WeightedBipredIdc) {
    StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0] = "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1] = "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2] = "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT", StdVideoH264WeightedBipredIdc[StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID";
}(StdVideoH264WeightedBipredIdc || (StdVideoH264WeightedBipredIdc = {}));
export var StdVideoH264ModificationOfPicNumsIdc;
!function(StdVideoH264ModificationOfPicNumsIdc) {
    StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0] = "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1] = "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2] = "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3] = "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END", StdVideoH264ModificationOfPicNumsIdc[StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID";
}(StdVideoH264ModificationOfPicNumsIdc || (StdVideoH264ModificationOfPicNumsIdc = {}));
export var StdVideoH264MemMgmtControlOp;
!function(StdVideoH264MemMgmtControlOp) {
    StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM", StdVideoH264MemMgmtControlOp[StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647] = "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID";
}(StdVideoH264MemMgmtControlOp || (StdVideoH264MemMgmtControlOp = {}));
export var StdVideoH264CabacInitIdc;
!function(StdVideoH264CabacInitIdc) {
    StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0] = "STD_VIDEO_H264_CABAC_INIT_IDC_0", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1] = "STD_VIDEO_H264_CABAC_INIT_IDC_1", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2] = "STD_VIDEO_H264_CABAC_INIT_IDC_2", StdVideoH264CabacInitIdc[StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_CABAC_INIT_IDC_INVALID";
}(StdVideoH264CabacInitIdc || (StdVideoH264CabacInitIdc = {}));
export var StdVideoH264DisableDeblockingFilterIdc;
!function(StdVideoH264DisableDeblockingFilterIdc) {
    StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0] = "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1] = "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2] = "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL", StdVideoH264DisableDeblockingFilterIdc[StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647] = "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID";
}(StdVideoH264DisableDeblockingFilterIdc || (StdVideoH264DisableDeblockingFilterIdc = {}));
export var StdVideoH264SliceType;
!function(StdVideoH264SliceType) {
    StdVideoH264SliceType[StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_P = 0] = "STD_VIDEO_H264_SLICE_TYPE_P", StdVideoH264SliceType[StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_B = 1] = "STD_VIDEO_H264_SLICE_TYPE_B", StdVideoH264SliceType[StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_I = 2] = "STD_VIDEO_H264_SLICE_TYPE_I", StdVideoH264SliceType[StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647] = "STD_VIDEO_H264_SLICE_TYPE_INVALID";
}(StdVideoH264SliceType || (StdVideoH264SliceType = {}));
export var StdVideoH264PictureType;
!function(StdVideoH264PictureType) {
    StdVideoH264PictureType[StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_P = 0] = "STD_VIDEO_H264_PICTURE_TYPE_P", StdVideoH264PictureType[StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_B = 1] = "STD_VIDEO_H264_PICTURE_TYPE_B", StdVideoH264PictureType[StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_I = 2] = "STD_VIDEO_H264_PICTURE_TYPE_I", StdVideoH264PictureType[StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_IDR = 5] = "STD_VIDEO_H264_PICTURE_TYPE_IDR", StdVideoH264PictureType[StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647] = "STD_VIDEO_H264_PICTURE_TYPE_INVALID";
}(StdVideoH264PictureType || (StdVideoH264PictureType = {}));
export var StdVideoH264NonVclNaluType;
!function(StdVideoH264NonVclNaluType) {
    StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED", StdVideoH264NonVclNaluType[StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 2147483647] = "STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID";
}(StdVideoH264NonVclNaluType || (StdVideoH264NonVclNaluType = {}));
export var StdVideoDecodeH264FieldOrderCount;
!function(StdVideoDecodeH264FieldOrderCount) {
    StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0] = "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP", StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1] = "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM", StdVideoDecodeH264FieldOrderCount[StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 2147483647] = "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID";
}(StdVideoDecodeH264FieldOrderCount || (StdVideoDecodeH264FieldOrderCount = {}));
export var StdVideoH265ChromaFormatIdc;
!function(StdVideoH265ChromaFormatIdc) {
    StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0] = "STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1] = "STD_VIDEO_H265_CHROMA_FORMAT_IDC_420", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2] = "STD_VIDEO_H265_CHROMA_FORMAT_IDC_422", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3] = "STD_VIDEO_H265_CHROMA_FORMAT_IDC_444", StdVideoH265ChromaFormatIdc[StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647] = "STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID";
}(StdVideoH265ChromaFormatIdc || (StdVideoH265ChromaFormatIdc = {}));
export var StdVideoH265ProfileIdc;
!function(StdVideoH265ProfileIdc) {
    StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN = 1] = "STD_VIDEO_H265_PROFILE_IDC_MAIN", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2] = "STD_VIDEO_H265_PROFILE_IDC_MAIN_10", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3] = "STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4] = "STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9] = "STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS", StdVideoH265ProfileIdc[StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647] = "STD_VIDEO_H265_PROFILE_IDC_INVALID";
}(StdVideoH265ProfileIdc || (StdVideoH265ProfileIdc = {}));
export var StdVideoH265LevelIdc;
!function(StdVideoH265LevelIdc) {
    StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_1_0 = 0] = "STD_VIDEO_H265_LEVEL_IDC_1_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_0 = 1] = "STD_VIDEO_H265_LEVEL_IDC_2_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_1 = 2] = "STD_VIDEO_H265_LEVEL_IDC_2_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_0 = 3] = "STD_VIDEO_H265_LEVEL_IDC_3_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_1 = 4] = "STD_VIDEO_H265_LEVEL_IDC_3_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_0 = 5] = "STD_VIDEO_H265_LEVEL_IDC_4_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_1 = 6] = "STD_VIDEO_H265_LEVEL_IDC_4_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_0 = 7] = "STD_VIDEO_H265_LEVEL_IDC_5_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_1 = 8] = "STD_VIDEO_H265_LEVEL_IDC_5_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_2 = 9] = "STD_VIDEO_H265_LEVEL_IDC_5_2", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_0 = 10] = "STD_VIDEO_H265_LEVEL_IDC_6_0", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_1 = 11] = "STD_VIDEO_H265_LEVEL_IDC_6_1", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_2 = 12] = "STD_VIDEO_H265_LEVEL_IDC_6_2", StdVideoH265LevelIdc[StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647] = "STD_VIDEO_H265_LEVEL_IDC_INVALID";
}(StdVideoH265LevelIdc || (StdVideoH265LevelIdc = {}));
export var StdVideoH265SliceType;
!function(StdVideoH265SliceType) {
    StdVideoH265SliceType[StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_B = 0] = "STD_VIDEO_H265_SLICE_TYPE_B", StdVideoH265SliceType[StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_P = 1] = "STD_VIDEO_H265_SLICE_TYPE_P", StdVideoH265SliceType[StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_I = 2] = "STD_VIDEO_H265_SLICE_TYPE_I", StdVideoH265SliceType[StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647] = "STD_VIDEO_H265_SLICE_TYPE_INVALID";
}(StdVideoH265SliceType || (StdVideoH265SliceType = {}));
export var StdVideoH265PictureType;
!function(StdVideoH265PictureType) {
    StdVideoH265PictureType[StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_P = 0] = "STD_VIDEO_H265_PICTURE_TYPE_P", StdVideoH265PictureType[StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_B = 1] = "STD_VIDEO_H265_PICTURE_TYPE_B", StdVideoH265PictureType[StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_I = 2] = "STD_VIDEO_H265_PICTURE_TYPE_I", StdVideoH265PictureType[StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_IDR = 3] = "STD_VIDEO_H265_PICTURE_TYPE_IDR", StdVideoH265PictureType[StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647] = "STD_VIDEO_H265_PICTURE_TYPE_INVALID";
}(StdVideoH265PictureType || (StdVideoH265PictureType = {}));
export var StdVideoH265AspectRatioIdc;
!function(StdVideoH265AspectRatioIdc) {
    StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR", StdVideoH265AspectRatioIdc[StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647] = "STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID";
}(StdVideoH265AspectRatioIdc || (StdVideoH265AspectRatioIdc = {}));
export var VkImageLayout;
!function(VkImageLayout) {
    VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_UNDEFINED = 0] = "VK_IMAGE_LAYOUT_UNDEFINED", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_GENERAL = 1] = "VK_IMAGE_LAYOUT_GENERAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2] = "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4] = "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5] = "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6] = "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7] = "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_PREINITIALIZED = 8] = "VK_IMAGE_LAYOUT_PREINITIALIZED", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000] = "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001] = "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000] = "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001] = "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002] = "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003] = "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000] = "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001] = "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002] = "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000] = "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001] = "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002] = "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000] = "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000117000] = "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000117001] = "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003] = "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000] = "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003] = "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = 1000241000] = "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = 1000241001] = "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = 1000241002] = "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = 1000241003] = "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR = 1000299000] = "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR = 1000299001] = "VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR = 1000299002] = "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = 1000314000] = "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = 1000314001] = "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR", VkImageLayout[VkImageLayout.VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000] = "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT";
}(VkImageLayout || (VkImageLayout = {}));
export var VkAttachmentLoadOp;
!function(VkAttachmentLoadOp) {
    VkAttachmentLoadOp[VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_LOAD = 0] = "VK_ATTACHMENT_LOAD_OP_LOAD", VkAttachmentLoadOp[VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_CLEAR = 1] = "VK_ATTACHMENT_LOAD_OP_CLEAR", VkAttachmentLoadOp[VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2] = "VK_ATTACHMENT_LOAD_OP_DONT_CARE", VkAttachmentLoadOp[VkAttachmentLoadOp.VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000] = "VK_ATTACHMENT_LOAD_OP_NONE_EXT";
}(VkAttachmentLoadOp || (VkAttachmentLoadOp = {}));
export var VkAttachmentStoreOp;
!function(VkAttachmentStoreOp) {
    VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_STORE = 0] = "VK_ATTACHMENT_STORE_OP_STORE", VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_DONT_CARE = 1] = "VK_ATTACHMENT_STORE_OP_DONT_CARE", VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE = 1000301000] = "VK_ATTACHMENT_STORE_OP_NONE", VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_KHR = 1000301000] = "VK_ATTACHMENT_STORE_OP_NONE_KHR", VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000] = "VK_ATTACHMENT_STORE_OP_NONE_QCOM", VkAttachmentStoreOp[VkAttachmentStoreOp.VK_ATTACHMENT_STORE_OP_NONE_EXT = 1000301000] = "VK_ATTACHMENT_STORE_OP_NONE_EXT";
}(VkAttachmentStoreOp || (VkAttachmentStoreOp = {}));
export var VkImageType;
!function(VkImageType) {
    VkImageType[VkImageType.VK_IMAGE_TYPE_1D = 0] = "VK_IMAGE_TYPE_1D", VkImageType[VkImageType.VK_IMAGE_TYPE_2D = 1] = "VK_IMAGE_TYPE_2D", VkImageType[VkImageType.VK_IMAGE_TYPE_3D = 2] = "VK_IMAGE_TYPE_3D";
}(VkImageType || (VkImageType = {}));
export var VkImageTiling;
!function(VkImageTiling) {
    VkImageTiling[VkImageTiling.VK_IMAGE_TILING_OPTIMAL = 0] = "VK_IMAGE_TILING_OPTIMAL", VkImageTiling[VkImageTiling.VK_IMAGE_TILING_LINEAR = 1] = "VK_IMAGE_TILING_LINEAR", VkImageTiling[VkImageTiling.VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000] = "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT";
}(VkImageTiling || (VkImageTiling = {}));
export var VkImageViewType;
!function(VkImageViewType) {
    VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_1D = 0] = "VK_IMAGE_VIEW_TYPE_1D", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_2D = 1] = "VK_IMAGE_VIEW_TYPE_2D", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_3D = 2] = "VK_IMAGE_VIEW_TYPE_3D", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE = 3] = "VK_IMAGE_VIEW_TYPE_CUBE", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4] = "VK_IMAGE_VIEW_TYPE_1D_ARRAY", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5] = "VK_IMAGE_VIEW_TYPE_2D_ARRAY", VkImageViewType[VkImageViewType.VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6] = "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
}(VkImageViewType || (VkImageViewType = {}));
export var VkCommandBufferLevel;
!function(VkCommandBufferLevel) {
    VkCommandBufferLevel[VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0] = "VK_COMMAND_BUFFER_LEVEL_PRIMARY", VkCommandBufferLevel[VkCommandBufferLevel.VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1] = "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
}(VkCommandBufferLevel || (VkCommandBufferLevel = {}));
export var VkComponentSwizzle;
!function(VkComponentSwizzle) {
    VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_IDENTITY = 0] = "VK_COMPONENT_SWIZZLE_IDENTITY", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ZERO = 1] = "VK_COMPONENT_SWIZZLE_ZERO", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_ONE = 2] = "VK_COMPONENT_SWIZZLE_ONE", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_R = 3] = "VK_COMPONENT_SWIZZLE_R", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_G = 4] = "VK_COMPONENT_SWIZZLE_G", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_B = 5] = "VK_COMPONENT_SWIZZLE_B", VkComponentSwizzle[VkComponentSwizzle.VK_COMPONENT_SWIZZLE_A = 6] = "VK_COMPONENT_SWIZZLE_A";
}(VkComponentSwizzle || (VkComponentSwizzle = {}));
export var VkDescriptorType;
!function(VkDescriptorType) {
    VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER = 0] = "VK_DESCRIPTOR_TYPE_SAMPLER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1] = "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2] = "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3] = "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4] = "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5] = "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6] = "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7] = "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8] = "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9] = "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10] = "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000] = "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000] = "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000] = "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000] = "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000] = "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000] = "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001] = "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM", VkDescriptorType[VkDescriptorType.VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000] = "VK_DESCRIPTOR_TYPE_MUTABLE_EXT";
}(VkDescriptorType || (VkDescriptorType = {}));
export var VkQueryType;
!function(VkQueryType) {
    VkQueryType[VkQueryType.VK_QUERY_TYPE_OCCLUSION = 0] = "VK_QUERY_TYPE_OCCLUSION", VkQueryType[VkQueryType.VK_QUERY_TYPE_PIPELINE_STATISTICS = 1] = "VK_QUERY_TYPE_PIPELINE_STATISTICS", VkQueryType[VkQueryType.VK_QUERY_TYPE_TIMESTAMP = 2] = "VK_QUERY_TYPE_TIMESTAMP", VkQueryType[VkQueryType.VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000] = "VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004] = "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT", VkQueryType[VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000] = "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000] = "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001] = "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000] = "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV", VkQueryType[VkQueryType.VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000] = "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL", VkQueryType[VkQueryType.VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR = 1000299000] = "VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000] = "VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT", VkQueryType[VkQueryType.VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000] = "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT", VkQueryType[VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000] = "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001] = "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR", VkQueryType[VkQueryType.VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000] = "VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT", VkQueryType[VkQueryType.VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001] = "VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT";
}(VkQueryType || (VkQueryType = {}));
export var VkBorderColor;
!function(VkBorderColor) {
    VkBorderColor[VkBorderColor.VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0] = "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1] = "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2] = "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3] = "VK_BORDER_COLOR_INT_OPAQUE_BLACK", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4] = "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5] = "VK_BORDER_COLOR_INT_OPAQUE_WHITE", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003] = "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT", VkBorderColor[VkBorderColor.VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004] = "VK_BORDER_COLOR_INT_CUSTOM_EXT";
}(VkBorderColor || (VkBorderColor = {}));
export var VkPipelineBindPoint;
!function(VkPipelineBindPoint) {
    VkPipelineBindPoint[VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_GRAPHICS = 0] = "VK_PIPELINE_BIND_POINT_GRAPHICS", VkPipelineBindPoint[VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_COMPUTE = 1] = "VK_PIPELINE_BIND_POINT_COMPUTE", VkPipelineBindPoint[VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000] = "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR", VkPipelineBindPoint[VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = 1000165000] = "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV", VkPipelineBindPoint[VkPipelineBindPoint.VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003] = "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI";
}(VkPipelineBindPoint || (VkPipelineBindPoint = {}));
export var VkPipelineCacheHeaderVersion;
!function(VkPipelineCacheHeaderVersion) {
    VkPipelineCacheHeaderVersion[VkPipelineCacheHeaderVersion.VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1] = "VK_PIPELINE_CACHE_HEADER_VERSION_ONE";
}(VkPipelineCacheHeaderVersion || (VkPipelineCacheHeaderVersion = {}));
export var VkPipelineCacheCreateFlagBits;
!function(VkPipelineCacheCreateFlagBits) {
    VkPipelineCacheCreateFlagBits[VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1] = "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT", VkPipelineCacheCreateFlagBits[VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT = 2] = "VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT", VkPipelineCacheCreateFlagBits[VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1] = "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT", VkPipelineCacheCreateFlagBits[VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_KHR = 2] = "VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_KHR", VkPipelineCacheCreateFlagBits[VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_KHR = 4] = "VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_KHR";
}(VkPipelineCacheCreateFlagBits || (VkPipelineCacheCreateFlagBits = {}));
export var VkPrimitiveTopology;
!function(VkPrimitiveTopology) {
    VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0] = "VK_PRIMITIVE_TOPOLOGY_POINT_LIST", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1] = "VK_PRIMITIVE_TOPOLOGY_LINE_LIST", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2] = "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3] = "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4] = "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5] = "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6] = "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7] = "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8] = "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9] = "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY", VkPrimitiveTopology[VkPrimitiveTopology.VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10] = "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
}(VkPrimitiveTopology || (VkPrimitiveTopology = {}));
export var VkSharingMode;
!function(VkSharingMode) {
    VkSharingMode[VkSharingMode.VK_SHARING_MODE_EXCLUSIVE = 0] = "VK_SHARING_MODE_EXCLUSIVE", VkSharingMode[VkSharingMode.VK_SHARING_MODE_CONCURRENT = 1] = "VK_SHARING_MODE_CONCURRENT";
}(VkSharingMode || (VkSharingMode = {}));
export var VkIndexType;
!function(VkIndexType) {
    VkIndexType[VkIndexType.VK_INDEX_TYPE_UINT16 = 0] = "VK_INDEX_TYPE_UINT16", VkIndexType[VkIndexType.VK_INDEX_TYPE_UINT32 = 1] = "VK_INDEX_TYPE_UINT32", VkIndexType[VkIndexType.VK_INDEX_TYPE_NONE_KHR = 1000165000] = "VK_INDEX_TYPE_NONE_KHR", VkIndexType[VkIndexType.VK_INDEX_TYPE_NONE_NV = 1000165000] = "VK_INDEX_TYPE_NONE_NV", VkIndexType[VkIndexType.VK_INDEX_TYPE_UINT8_EXT = 1000265000] = "VK_INDEX_TYPE_UINT8_EXT";
}(VkIndexType || (VkIndexType = {}));
export var VkFilter;
!function(VkFilter) {
    VkFilter[VkFilter.VK_FILTER_NEAREST = 0] = "VK_FILTER_NEAREST", VkFilter[VkFilter.VK_FILTER_LINEAR = 1] = "VK_FILTER_LINEAR", VkFilter[VkFilter.VK_FILTER_CUBIC_IMG = 1000015000] = "VK_FILTER_CUBIC_IMG", VkFilter[VkFilter.VK_FILTER_CUBIC_EXT = 1000015000] = "VK_FILTER_CUBIC_EXT";
}(VkFilter || (VkFilter = {}));
export var VkSamplerMipmapMode;
!function(VkSamplerMipmapMode) {
    VkSamplerMipmapMode[VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_NEAREST = 0] = "VK_SAMPLER_MIPMAP_MODE_NEAREST", VkSamplerMipmapMode[VkSamplerMipmapMode.VK_SAMPLER_MIPMAP_MODE_LINEAR = 1] = "VK_SAMPLER_MIPMAP_MODE_LINEAR";
}(VkSamplerMipmapMode || (VkSamplerMipmapMode = {}));
export var VkSamplerAddressMode;
!function(VkSamplerAddressMode) {
    VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_REPEAT = 0] = "VK_SAMPLER_ADDRESS_MODE_REPEAT", VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1] = "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT", VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2] = "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE", VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3] = "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER", VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4] = "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE", VkSamplerAddressMode[VkSamplerAddressMode.VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = 4] = "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR";
}(VkSamplerAddressMode || (VkSamplerAddressMode = {}));
export var VkCompareOp;
!function(VkCompareOp) {
    VkCompareOp[VkCompareOp.VK_COMPARE_OP_NEVER = 0] = "VK_COMPARE_OP_NEVER", VkCompareOp[VkCompareOp.VK_COMPARE_OP_LESS = 1] = "VK_COMPARE_OP_LESS", VkCompareOp[VkCompareOp.VK_COMPARE_OP_EQUAL = 2] = "VK_COMPARE_OP_EQUAL", VkCompareOp[VkCompareOp.VK_COMPARE_OP_LESS_OR_EQUAL = 3] = "VK_COMPARE_OP_LESS_OR_EQUAL", VkCompareOp[VkCompareOp.VK_COMPARE_OP_GREATER = 4] = "VK_COMPARE_OP_GREATER", VkCompareOp[VkCompareOp.VK_COMPARE_OP_NOT_EQUAL = 5] = "VK_COMPARE_OP_NOT_EQUAL", VkCompareOp[VkCompareOp.VK_COMPARE_OP_GREATER_OR_EQUAL = 6] = "VK_COMPARE_OP_GREATER_OR_EQUAL", VkCompareOp[VkCompareOp.VK_COMPARE_OP_ALWAYS = 7] = "VK_COMPARE_OP_ALWAYS";
}(VkCompareOp || (VkCompareOp = {}));
export var VkPolygonMode;
!function(VkPolygonMode) {
    VkPolygonMode[VkPolygonMode.VK_POLYGON_MODE_FILL = 0] = "VK_POLYGON_MODE_FILL", VkPolygonMode[VkPolygonMode.VK_POLYGON_MODE_LINE = 1] = "VK_POLYGON_MODE_LINE", VkPolygonMode[VkPolygonMode.VK_POLYGON_MODE_POINT = 2] = "VK_POLYGON_MODE_POINT", VkPolygonMode[VkPolygonMode.VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000] = "VK_POLYGON_MODE_FILL_RECTANGLE_NV";
}(VkPolygonMode || (VkPolygonMode = {}));
export var VkFrontFace;
!function(VkFrontFace) {
    VkFrontFace[VkFrontFace.VK_FRONT_FACE_COUNTER_CLOCKWISE = 0] = "VK_FRONT_FACE_COUNTER_CLOCKWISE", VkFrontFace[VkFrontFace.VK_FRONT_FACE_CLOCKWISE = 1] = "VK_FRONT_FACE_CLOCKWISE";
}(VkFrontFace || (VkFrontFace = {}));
export var VkBlendFactor;
!function(VkBlendFactor) {
    VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ZERO = 0] = "VK_BLEND_FACTOR_ZERO", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE = 1] = "VK_BLEND_FACTOR_ONE", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_SRC_COLOR = 2] = "VK_BLEND_FACTOR_SRC_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3] = "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_DST_COLOR = 4] = "VK_BLEND_FACTOR_DST_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5] = "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA = 6] = "VK_BLEND_FACTOR_SRC_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7] = "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_DST_ALPHA = 8] = "VK_BLEND_FACTOR_DST_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9] = "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_COLOR = 10] = "VK_BLEND_FACTOR_CONSTANT_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11] = "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_CONSTANT_ALPHA = 12] = "VK_BLEND_FACTOR_CONSTANT_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13] = "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14] = "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_SRC1_COLOR = 15] = "VK_BLEND_FACTOR_SRC1_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16] = "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_SRC1_ALPHA = 17] = "VK_BLEND_FACTOR_SRC1_ALPHA", VkBlendFactor[VkBlendFactor.VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18] = "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
}(VkBlendFactor || (VkBlendFactor = {}));
export var VkBlendOp;
!function(VkBlendOp) {
    VkBlendOp[VkBlendOp.VK_BLEND_OP_ADD = 0] = "VK_BLEND_OP_ADD", VkBlendOp[VkBlendOp.VK_BLEND_OP_SUBTRACT = 1] = "VK_BLEND_OP_SUBTRACT", VkBlendOp[VkBlendOp.VK_BLEND_OP_REVERSE_SUBTRACT = 2] = "VK_BLEND_OP_REVERSE_SUBTRACT", VkBlendOp[VkBlendOp.VK_BLEND_OP_MIN = 3] = "VK_BLEND_OP_MIN", VkBlendOp[VkBlendOp.VK_BLEND_OP_MAX = 4] = "VK_BLEND_OP_MAX", VkBlendOp[VkBlendOp.VK_BLEND_OP_ZERO_EXT = 1000148000] = "VK_BLEND_OP_ZERO_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SRC_EXT = 1000148001] = "VK_BLEND_OP_SRC_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DST_EXT = 1000148002] = "VK_BLEND_OP_DST_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SRC_OVER_EXT = 1000148003] = "VK_BLEND_OP_SRC_OVER_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DST_OVER_EXT = 1000148004] = "VK_BLEND_OP_DST_OVER_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SRC_IN_EXT = 1000148005] = "VK_BLEND_OP_SRC_IN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DST_IN_EXT = 1000148006] = "VK_BLEND_OP_DST_IN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SRC_OUT_EXT = 1000148007] = "VK_BLEND_OP_SRC_OUT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DST_OUT_EXT = 1000148008] = "VK_BLEND_OP_DST_OUT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SRC_ATOP_EXT = 1000148009] = "VK_BLEND_OP_SRC_ATOP_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DST_ATOP_EXT = 1000148010] = "VK_BLEND_OP_DST_ATOP_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_XOR_EXT = 1000148011] = "VK_BLEND_OP_XOR_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_MULTIPLY_EXT = 1000148012] = "VK_BLEND_OP_MULTIPLY_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SCREEN_EXT = 1000148013] = "VK_BLEND_OP_SCREEN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_OVERLAY_EXT = 1000148014] = "VK_BLEND_OP_OVERLAY_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DARKEN_EXT = 1000148015] = "VK_BLEND_OP_DARKEN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_LIGHTEN_EXT = 1000148016] = "VK_BLEND_OP_LIGHTEN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_COLORDODGE_EXT = 1000148017] = "VK_BLEND_OP_COLORDODGE_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_COLORBURN_EXT = 1000148018] = "VK_BLEND_OP_COLORBURN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HARDLIGHT_EXT = 1000148019] = "VK_BLEND_OP_HARDLIGHT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020] = "VK_BLEND_OP_SOFTLIGHT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_DIFFERENCE_EXT = 1000148021] = "VK_BLEND_OP_DIFFERENCE_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_EXCLUSION_EXT = 1000148022] = "VK_BLEND_OP_EXCLUSION_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_INVERT_EXT = 1000148023] = "VK_BLEND_OP_INVERT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_INVERT_RGB_EXT = 1000148024] = "VK_BLEND_OP_INVERT_RGB_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_LINEARDODGE_EXT = 1000148025] = "VK_BLEND_OP_LINEARDODGE_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_LINEARBURN_EXT = 1000148026] = "VK_BLEND_OP_LINEARBURN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027] = "VK_BLEND_OP_VIVIDLIGHT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028] = "VK_BLEND_OP_LINEARLIGHT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_PINLIGHT_EXT = 1000148029] = "VK_BLEND_OP_PINLIGHT_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HARDMIX_EXT = 1000148030] = "VK_BLEND_OP_HARDMIX_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HSL_HUE_EXT = 1000148031] = "VK_BLEND_OP_HSL_HUE_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032] = "VK_BLEND_OP_HSL_SATURATION_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HSL_COLOR_EXT = 1000148033] = "VK_BLEND_OP_HSL_COLOR_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034] = "VK_BLEND_OP_HSL_LUMINOSITY_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_PLUS_EXT = 1000148035] = "VK_BLEND_OP_PLUS_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036] = "VK_BLEND_OP_PLUS_CLAMPED_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037] = "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038] = "VK_BLEND_OP_PLUS_DARKER_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_MINUS_EXT = 1000148039] = "VK_BLEND_OP_MINUS_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040] = "VK_BLEND_OP_MINUS_CLAMPED_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_CONTRAST_EXT = 1000148041] = "VK_BLEND_OP_CONTRAST_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_INVERT_OVG_EXT = 1000148042] = "VK_BLEND_OP_INVERT_OVG_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_RED_EXT = 1000148043] = "VK_BLEND_OP_RED_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_GREEN_EXT = 1000148044] = "VK_BLEND_OP_GREEN_EXT", VkBlendOp[VkBlendOp.VK_BLEND_OP_BLUE_EXT = 1000148045] = "VK_BLEND_OP_BLUE_EXT";
}(VkBlendOp || (VkBlendOp = {}));
export var VkStencilOp;
!function(VkStencilOp) {
    VkStencilOp[VkStencilOp.VK_STENCIL_OP_KEEP = 0] = "VK_STENCIL_OP_KEEP", VkStencilOp[VkStencilOp.VK_STENCIL_OP_ZERO = 1] = "VK_STENCIL_OP_ZERO", VkStencilOp[VkStencilOp.VK_STENCIL_OP_REPLACE = 2] = "VK_STENCIL_OP_REPLACE", VkStencilOp[VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3] = "VK_STENCIL_OP_INCREMENT_AND_CLAMP", VkStencilOp[VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4] = "VK_STENCIL_OP_DECREMENT_AND_CLAMP", VkStencilOp[VkStencilOp.VK_STENCIL_OP_INVERT = 5] = "VK_STENCIL_OP_INVERT", VkStencilOp[VkStencilOp.VK_STENCIL_OP_INCREMENT_AND_WRAP = 6] = "VK_STENCIL_OP_INCREMENT_AND_WRAP", VkStencilOp[VkStencilOp.VK_STENCIL_OP_DECREMENT_AND_WRAP = 7] = "VK_STENCIL_OP_DECREMENT_AND_WRAP";
}(VkStencilOp || (VkStencilOp = {}));
export var VkLogicOp;
!function(VkLogicOp) {
    VkLogicOp[VkLogicOp.VK_LOGIC_OP_CLEAR = 0] = "VK_LOGIC_OP_CLEAR", VkLogicOp[VkLogicOp.VK_LOGIC_OP_AND = 1] = "VK_LOGIC_OP_AND", VkLogicOp[VkLogicOp.VK_LOGIC_OP_AND_REVERSE = 2] = "VK_LOGIC_OP_AND_REVERSE", VkLogicOp[VkLogicOp.VK_LOGIC_OP_COPY = 3] = "VK_LOGIC_OP_COPY", VkLogicOp[VkLogicOp.VK_LOGIC_OP_AND_INVERTED = 4] = "VK_LOGIC_OP_AND_INVERTED", VkLogicOp[VkLogicOp.VK_LOGIC_OP_NO_OP = 5] = "VK_LOGIC_OP_NO_OP", VkLogicOp[VkLogicOp.VK_LOGIC_OP_XOR = 6] = "VK_LOGIC_OP_XOR", VkLogicOp[VkLogicOp.VK_LOGIC_OP_OR = 7] = "VK_LOGIC_OP_OR", VkLogicOp[VkLogicOp.VK_LOGIC_OP_NOR = 8] = "VK_LOGIC_OP_NOR", VkLogicOp[VkLogicOp.VK_LOGIC_OP_EQUIVALENT = 9] = "VK_LOGIC_OP_EQUIVALENT", VkLogicOp[VkLogicOp.VK_LOGIC_OP_INVERT = 10] = "VK_LOGIC_OP_INVERT", VkLogicOp[VkLogicOp.VK_LOGIC_OP_OR_REVERSE = 11] = "VK_LOGIC_OP_OR_REVERSE", VkLogicOp[VkLogicOp.VK_LOGIC_OP_COPY_INVERTED = 12] = "VK_LOGIC_OP_COPY_INVERTED", VkLogicOp[VkLogicOp.VK_LOGIC_OP_OR_INVERTED = 13] = "VK_LOGIC_OP_OR_INVERTED", VkLogicOp[VkLogicOp.VK_LOGIC_OP_NAND = 14] = "VK_LOGIC_OP_NAND", VkLogicOp[VkLogicOp.VK_LOGIC_OP_SET = 15] = "VK_LOGIC_OP_SET";
}(VkLogicOp || (VkLogicOp = {}));
export var VkInternalAllocationType;
!function(VkInternalAllocationType) {
    VkInternalAllocationType[VkInternalAllocationType.VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0] = "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE";
}(VkInternalAllocationType || (VkInternalAllocationType = {}));
export var VkSystemAllocationScope;
!function(VkSystemAllocationScope) {
    VkSystemAllocationScope[VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0] = "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND", VkSystemAllocationScope[VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1] = "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT", VkSystemAllocationScope[VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2] = "VK_SYSTEM_ALLOCATION_SCOPE_CACHE", VkSystemAllocationScope[VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3] = "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE", VkSystemAllocationScope[VkSystemAllocationScope.VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4] = "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE";
}(VkSystemAllocationScope || (VkSystemAllocationScope = {}));
export var VkPhysicalDeviceType;
!function(VkPhysicalDeviceType) {
    VkPhysicalDeviceType[VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_OTHER = 0] = "VK_PHYSICAL_DEVICE_TYPE_OTHER", VkPhysicalDeviceType[VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1] = "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU", VkPhysicalDeviceType[VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2] = "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU", VkPhysicalDeviceType[VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3] = "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU", VkPhysicalDeviceType[VkPhysicalDeviceType.VK_PHYSICAL_DEVICE_TYPE_CPU = 4] = "VK_PHYSICAL_DEVICE_TYPE_CPU";
}(VkPhysicalDeviceType || (VkPhysicalDeviceType = {}));
export var VkVertexInputRate;
!function(VkVertexInputRate) {
    VkVertexInputRate[VkVertexInputRate.VK_VERTEX_INPUT_RATE_VERTEX = 0] = "VK_VERTEX_INPUT_RATE_VERTEX", VkVertexInputRate[VkVertexInputRate.VK_VERTEX_INPUT_RATE_INSTANCE = 1] = "VK_VERTEX_INPUT_RATE_INSTANCE";
}(VkVertexInputRate || (VkVertexInputRate = {}));
export var VkFormat;
!function(VkFormat) {
    VkFormat[VkFormat.VK_FORMAT_UNDEFINED = 0] = "VK_FORMAT_UNDEFINED", VkFormat[VkFormat.VK_FORMAT_R4G4_UNORM_PACK8 = 1] = "VK_FORMAT_R4G4_UNORM_PACK8", VkFormat[VkFormat.VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2] = "VK_FORMAT_R4G4B4A4_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3] = "VK_FORMAT_B4G4R4A4_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_R5G6B5_UNORM_PACK16 = 4] = "VK_FORMAT_R5G6B5_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_B5G6R5_UNORM_PACK16 = 5] = "VK_FORMAT_B5G6R5_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6] = "VK_FORMAT_R5G5B5A1_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7] = "VK_FORMAT_B5G5R5A1_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8] = "VK_FORMAT_A1R5G5B5_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_R8_UNORM = 9] = "VK_FORMAT_R8_UNORM", VkFormat[VkFormat.VK_FORMAT_R8_SNORM = 10] = "VK_FORMAT_R8_SNORM", VkFormat[VkFormat.VK_FORMAT_R8_USCALED = 11] = "VK_FORMAT_R8_USCALED", VkFormat[VkFormat.VK_FORMAT_R8_SSCALED = 12] = "VK_FORMAT_R8_SSCALED", VkFormat[VkFormat.VK_FORMAT_R8_UINT = 13] = "VK_FORMAT_R8_UINT", VkFormat[VkFormat.VK_FORMAT_R8_SINT = 14] = "VK_FORMAT_R8_SINT", VkFormat[VkFormat.VK_FORMAT_R8_SRGB = 15] = "VK_FORMAT_R8_SRGB", VkFormat[VkFormat.VK_FORMAT_R8G8_UNORM = 16] = "VK_FORMAT_R8G8_UNORM", VkFormat[VkFormat.VK_FORMAT_R8G8_SNORM = 17] = "VK_FORMAT_R8G8_SNORM", VkFormat[VkFormat.VK_FORMAT_R8G8_USCALED = 18] = "VK_FORMAT_R8G8_USCALED", VkFormat[VkFormat.VK_FORMAT_R8G8_SSCALED = 19] = "VK_FORMAT_R8G8_SSCALED", VkFormat[VkFormat.VK_FORMAT_R8G8_UINT = 20] = "VK_FORMAT_R8G8_UINT", VkFormat[VkFormat.VK_FORMAT_R8G8_SINT = 21] = "VK_FORMAT_R8G8_SINT", VkFormat[VkFormat.VK_FORMAT_R8G8_SRGB = 22] = "VK_FORMAT_R8G8_SRGB", VkFormat[VkFormat.VK_FORMAT_R8G8B8_UNORM = 23] = "VK_FORMAT_R8G8B8_UNORM", VkFormat[VkFormat.VK_FORMAT_R8G8B8_SNORM = 24] = "VK_FORMAT_R8G8B8_SNORM", VkFormat[VkFormat.VK_FORMAT_R8G8B8_USCALED = 25] = "VK_FORMAT_R8G8B8_USCALED", VkFormat[VkFormat.VK_FORMAT_R8G8B8_SSCALED = 26] = "VK_FORMAT_R8G8B8_SSCALED", VkFormat[VkFormat.VK_FORMAT_R8G8B8_UINT = 27] = "VK_FORMAT_R8G8B8_UINT", VkFormat[VkFormat.VK_FORMAT_R8G8B8_SINT = 28] = "VK_FORMAT_R8G8B8_SINT", VkFormat[VkFormat.VK_FORMAT_R8G8B8_SRGB = 29] = "VK_FORMAT_R8G8B8_SRGB", VkFormat[VkFormat.VK_FORMAT_B8G8R8_UNORM = 30] = "VK_FORMAT_B8G8R8_UNORM", VkFormat[VkFormat.VK_FORMAT_B8G8R8_SNORM = 31] = "VK_FORMAT_B8G8R8_SNORM", VkFormat[VkFormat.VK_FORMAT_B8G8R8_USCALED = 32] = "VK_FORMAT_B8G8R8_USCALED", VkFormat[VkFormat.VK_FORMAT_B8G8R8_SSCALED = 33] = "VK_FORMAT_B8G8R8_SSCALED", VkFormat[VkFormat.VK_FORMAT_B8G8R8_UINT = 34] = "VK_FORMAT_B8G8R8_UINT", VkFormat[VkFormat.VK_FORMAT_B8G8R8_SINT = 35] = "VK_FORMAT_B8G8R8_SINT", VkFormat[VkFormat.VK_FORMAT_B8G8R8_SRGB = 36] = "VK_FORMAT_B8G8R8_SRGB", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_UNORM = 37] = "VK_FORMAT_R8G8B8A8_UNORM", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_SNORM = 38] = "VK_FORMAT_R8G8B8A8_SNORM", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_USCALED = 39] = "VK_FORMAT_R8G8B8A8_USCALED", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_SSCALED = 40] = "VK_FORMAT_R8G8B8A8_SSCALED", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_UINT = 41] = "VK_FORMAT_R8G8B8A8_UINT", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_SINT = 42] = "VK_FORMAT_R8G8B8A8_SINT", VkFormat[VkFormat.VK_FORMAT_R8G8B8A8_SRGB = 43] = "VK_FORMAT_R8G8B8A8_SRGB", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_UNORM = 44] = "VK_FORMAT_B8G8R8A8_UNORM", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_SNORM = 45] = "VK_FORMAT_B8G8R8A8_SNORM", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_USCALED = 46] = "VK_FORMAT_B8G8R8A8_USCALED", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_SSCALED = 47] = "VK_FORMAT_B8G8R8A8_SSCALED", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_UINT = 48] = "VK_FORMAT_B8G8R8A8_UINT", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_SINT = 49] = "VK_FORMAT_B8G8R8A8_SINT", VkFormat[VkFormat.VK_FORMAT_B8G8R8A8_SRGB = 50] = "VK_FORMAT_B8G8R8A8_SRGB", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51] = "VK_FORMAT_A8B8G8R8_UNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52] = "VK_FORMAT_A8B8G8R8_SNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53] = "VK_FORMAT_A8B8G8R8_USCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54] = "VK_FORMAT_A8B8G8R8_SSCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55] = "VK_FORMAT_A8B8G8R8_UINT_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56] = "VK_FORMAT_A8B8G8R8_SINT_PACK32", VkFormat[VkFormat.VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57] = "VK_FORMAT_A8B8G8R8_SRGB_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58] = "VK_FORMAT_A2R10G10B10_UNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59] = "VK_FORMAT_A2R10G10B10_SNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60] = "VK_FORMAT_A2R10G10B10_USCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61] = "VK_FORMAT_A2R10G10B10_SSCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62] = "VK_FORMAT_A2R10G10B10_UINT_PACK32", VkFormat[VkFormat.VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63] = "VK_FORMAT_A2R10G10B10_SINT_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64] = "VK_FORMAT_A2B10G10R10_UNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65] = "VK_FORMAT_A2B10G10R10_SNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66] = "VK_FORMAT_A2B10G10R10_USCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67] = "VK_FORMAT_A2B10G10R10_SSCALED_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68] = "VK_FORMAT_A2B10G10R10_UINT_PACK32", VkFormat[VkFormat.VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69] = "VK_FORMAT_A2B10G10R10_SINT_PACK32", VkFormat[VkFormat.VK_FORMAT_R16_UNORM = 70] = "VK_FORMAT_R16_UNORM", VkFormat[VkFormat.VK_FORMAT_R16_SNORM = 71] = "VK_FORMAT_R16_SNORM", VkFormat[VkFormat.VK_FORMAT_R16_USCALED = 72] = "VK_FORMAT_R16_USCALED", VkFormat[VkFormat.VK_FORMAT_R16_SSCALED = 73] = "VK_FORMAT_R16_SSCALED", VkFormat[VkFormat.VK_FORMAT_R16_UINT = 74] = "VK_FORMAT_R16_UINT", VkFormat[VkFormat.VK_FORMAT_R16_SINT = 75] = "VK_FORMAT_R16_SINT", VkFormat[VkFormat.VK_FORMAT_R16_SFLOAT = 76] = "VK_FORMAT_R16_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R16G16_UNORM = 77] = "VK_FORMAT_R16G16_UNORM", VkFormat[VkFormat.VK_FORMAT_R16G16_SNORM = 78] = "VK_FORMAT_R16G16_SNORM", VkFormat[VkFormat.VK_FORMAT_R16G16_USCALED = 79] = "VK_FORMAT_R16G16_USCALED", VkFormat[VkFormat.VK_FORMAT_R16G16_SSCALED = 80] = "VK_FORMAT_R16G16_SSCALED", VkFormat[VkFormat.VK_FORMAT_R16G16_UINT = 81] = "VK_FORMAT_R16G16_UINT", VkFormat[VkFormat.VK_FORMAT_R16G16_SINT = 82] = "VK_FORMAT_R16G16_SINT", VkFormat[VkFormat.VK_FORMAT_R16G16_SFLOAT = 83] = "VK_FORMAT_R16G16_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R16G16B16_UNORM = 84] = "VK_FORMAT_R16G16B16_UNORM", VkFormat[VkFormat.VK_FORMAT_R16G16B16_SNORM = 85] = "VK_FORMAT_R16G16B16_SNORM", VkFormat[VkFormat.VK_FORMAT_R16G16B16_USCALED = 86] = "VK_FORMAT_R16G16B16_USCALED", VkFormat[VkFormat.VK_FORMAT_R16G16B16_SSCALED = 87] = "VK_FORMAT_R16G16B16_SSCALED", VkFormat[VkFormat.VK_FORMAT_R16G16B16_UINT = 88] = "VK_FORMAT_R16G16B16_UINT", VkFormat[VkFormat.VK_FORMAT_R16G16B16_SINT = 89] = "VK_FORMAT_R16G16B16_SINT", VkFormat[VkFormat.VK_FORMAT_R16G16B16_SFLOAT = 90] = "VK_FORMAT_R16G16B16_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_UNORM = 91] = "VK_FORMAT_R16G16B16A16_UNORM", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_SNORM = 92] = "VK_FORMAT_R16G16B16A16_SNORM", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_USCALED = 93] = "VK_FORMAT_R16G16B16A16_USCALED", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_SSCALED = 94] = "VK_FORMAT_R16G16B16A16_SSCALED", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_UINT = 95] = "VK_FORMAT_R16G16B16A16_UINT", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_SINT = 96] = "VK_FORMAT_R16G16B16A16_SINT", VkFormat[VkFormat.VK_FORMAT_R16G16B16A16_SFLOAT = 97] = "VK_FORMAT_R16G16B16A16_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R32_UINT = 98] = "VK_FORMAT_R32_UINT", VkFormat[VkFormat.VK_FORMAT_R32_SINT = 99] = "VK_FORMAT_R32_SINT", VkFormat[VkFormat.VK_FORMAT_R32_SFLOAT = 100] = "VK_FORMAT_R32_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R32G32_UINT = 101] = "VK_FORMAT_R32G32_UINT", VkFormat[VkFormat.VK_FORMAT_R32G32_SINT = 102] = "VK_FORMAT_R32G32_SINT", VkFormat[VkFormat.VK_FORMAT_R32G32_SFLOAT = 103] = "VK_FORMAT_R32G32_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R32G32B32_UINT = 104] = "VK_FORMAT_R32G32B32_UINT", VkFormat[VkFormat.VK_FORMAT_R32G32B32_SINT = 105] = "VK_FORMAT_R32G32B32_SINT", VkFormat[VkFormat.VK_FORMAT_R32G32B32_SFLOAT = 106] = "VK_FORMAT_R32G32B32_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R32G32B32A32_UINT = 107] = "VK_FORMAT_R32G32B32A32_UINT", VkFormat[VkFormat.VK_FORMAT_R32G32B32A32_SINT = 108] = "VK_FORMAT_R32G32B32A32_SINT", VkFormat[VkFormat.VK_FORMAT_R32G32B32A32_SFLOAT = 109] = "VK_FORMAT_R32G32B32A32_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R64_UINT = 110] = "VK_FORMAT_R64_UINT", VkFormat[VkFormat.VK_FORMAT_R64_SINT = 111] = "VK_FORMAT_R64_SINT", VkFormat[VkFormat.VK_FORMAT_R64_SFLOAT = 112] = "VK_FORMAT_R64_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R64G64_UINT = 113] = "VK_FORMAT_R64G64_UINT", VkFormat[VkFormat.VK_FORMAT_R64G64_SINT = 114] = "VK_FORMAT_R64G64_SINT", VkFormat[VkFormat.VK_FORMAT_R64G64_SFLOAT = 115] = "VK_FORMAT_R64G64_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R64G64B64_UINT = 116] = "VK_FORMAT_R64G64B64_UINT", VkFormat[VkFormat.VK_FORMAT_R64G64B64_SINT = 117] = "VK_FORMAT_R64G64B64_SINT", VkFormat[VkFormat.VK_FORMAT_R64G64B64_SFLOAT = 118] = "VK_FORMAT_R64G64B64_SFLOAT", VkFormat[VkFormat.VK_FORMAT_R64G64B64A64_UINT = 119] = "VK_FORMAT_R64G64B64A64_UINT", VkFormat[VkFormat.VK_FORMAT_R64G64B64A64_SINT = 120] = "VK_FORMAT_R64G64B64A64_SINT", VkFormat[VkFormat.VK_FORMAT_R64G64B64A64_SFLOAT = 121] = "VK_FORMAT_R64G64B64A64_SFLOAT", VkFormat[VkFormat.VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122] = "VK_FORMAT_B10G11R11_UFLOAT_PACK32", VkFormat[VkFormat.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123] = "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32", VkFormat[VkFormat.VK_FORMAT_D16_UNORM = 124] = "VK_FORMAT_D16_UNORM", VkFormat[VkFormat.VK_FORMAT_X8_D24_UNORM_PACK32 = 125] = "VK_FORMAT_X8_D24_UNORM_PACK32", VkFormat[VkFormat.VK_FORMAT_D32_SFLOAT = 126] = "VK_FORMAT_D32_SFLOAT", VkFormat[VkFormat.VK_FORMAT_S8_UINT = 127] = "VK_FORMAT_S8_UINT", VkFormat[VkFormat.VK_FORMAT_D16_UNORM_S8_UINT = 128] = "VK_FORMAT_D16_UNORM_S8_UINT", VkFormat[VkFormat.VK_FORMAT_D24_UNORM_S8_UINT = 129] = "VK_FORMAT_D24_UNORM_S8_UINT", VkFormat[VkFormat.VK_FORMAT_D32_SFLOAT_S8_UINT = 130] = "VK_FORMAT_D32_SFLOAT_S8_UINT", VkFormat[VkFormat.VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131] = "VK_FORMAT_BC1_RGB_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132] = "VK_FORMAT_BC1_RGB_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133] = "VK_FORMAT_BC1_RGBA_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134] = "VK_FORMAT_BC1_RGBA_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC2_UNORM_BLOCK = 135] = "VK_FORMAT_BC2_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC2_SRGB_BLOCK = 136] = "VK_FORMAT_BC2_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC3_UNORM_BLOCK = 137] = "VK_FORMAT_BC3_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC3_SRGB_BLOCK = 138] = "VK_FORMAT_BC3_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC4_UNORM_BLOCK = 139] = "VK_FORMAT_BC4_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC4_SNORM_BLOCK = 140] = "VK_FORMAT_BC4_SNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC5_UNORM_BLOCK = 141] = "VK_FORMAT_BC5_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC5_SNORM_BLOCK = 142] = "VK_FORMAT_BC5_SNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC6H_UFLOAT_BLOCK = 143] = "VK_FORMAT_BC6H_UFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC6H_SFLOAT_BLOCK = 144] = "VK_FORMAT_BC6H_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC7_UNORM_BLOCK = 145] = "VK_FORMAT_BC7_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_BC7_SRGB_BLOCK = 146] = "VK_FORMAT_BC7_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147] = "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148] = "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149] = "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150] = "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151] = "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152] = "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_EAC_R11_UNORM_BLOCK = 153] = "VK_FORMAT_EAC_R11_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_EAC_R11_SNORM_BLOCK = 154] = "VK_FORMAT_EAC_R11_SNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155] = "VK_FORMAT_EAC_R11G11_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156] = "VK_FORMAT_EAC_R11G11_SNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157] = "VK_FORMAT_ASTC_4x4_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158] = "VK_FORMAT_ASTC_4x4_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159] = "VK_FORMAT_ASTC_5x4_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160] = "VK_FORMAT_ASTC_5x4_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161] = "VK_FORMAT_ASTC_5x5_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162] = "VK_FORMAT_ASTC_5x5_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163] = "VK_FORMAT_ASTC_6x5_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164] = "VK_FORMAT_ASTC_6x5_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165] = "VK_FORMAT_ASTC_6x6_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166] = "VK_FORMAT_ASTC_6x6_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167] = "VK_FORMAT_ASTC_8x5_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168] = "VK_FORMAT_ASTC_8x5_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169] = "VK_FORMAT_ASTC_8x6_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170] = "VK_FORMAT_ASTC_8x6_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171] = "VK_FORMAT_ASTC_8x8_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172] = "VK_FORMAT_ASTC_8x8_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173] = "VK_FORMAT_ASTC_10x5_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174] = "VK_FORMAT_ASTC_10x5_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175] = "VK_FORMAT_ASTC_10x6_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176] = "VK_FORMAT_ASTC_10x6_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177] = "VK_FORMAT_ASTC_10x8_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178] = "VK_FORMAT_ASTC_10x8_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179] = "VK_FORMAT_ASTC_10x10_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180] = "VK_FORMAT_ASTC_10x10_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181] = "VK_FORMAT_ASTC_12x10_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182] = "VK_FORMAT_ASTC_12x10_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183] = "VK_FORMAT_ASTC_12x12_UNORM_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184] = "VK_FORMAT_ASTC_12x12_SRGB_BLOCK", VkFormat[VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000] = "VK_FORMAT_G8B8G8R8_422_UNORM", VkFormat[VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001] = "VK_FORMAT_B8G8R8G8_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002] = "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003] = "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004] = "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005] = "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006] = "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM", VkFormat[VkFormat.VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007] = "VK_FORMAT_R10X6_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008] = "VK_FORMAT_R10X6G10X6_UNORM_2PACK16", VkFormat[VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009] = "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010] = "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011] = "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017] = "VK_FORMAT_R12X4_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018] = "VK_FORMAT_R12X4G12X4_UNORM_2PACK16", VkFormat[VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019] = "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020] = "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021] = "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027] = "VK_FORMAT_G16B16G16R16_422_UNORM", VkFormat[VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028] = "VK_FORMAT_B16G16R16G16_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029] = "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030] = "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031] = "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032] = "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033] = "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000] = "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003] = "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM", VkFormat[VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000] = "VK_FORMAT_A4R4G4B4_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001] = "VK_FORMAT_A4B4G4R4_UNORM_PACK16", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000] = "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001] = "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002] = "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003] = "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004] = "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005] = "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006] = "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007] = "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008] = "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009] = "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010] = "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011] = "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012] = "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013] = "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK", VkFormat[VkFormat.VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000] = "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001] = "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002] = "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003] = "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004] = "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005] = "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006] = "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007] = "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000] = "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001] = "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002] = "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003] = "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004] = "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005] = "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006] = "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007] = "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008] = "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009] = "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010] = "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011] = "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012] = "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013] = "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_G8B8G8R8_422_UNORM_KHR = 1000156000] = "VK_FORMAT_G8B8G8R8_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_B8G8R8G8_422_UNORM_KHR = 1000156001] = "VK_FORMAT_B8G8R8G8_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = 1000156002] = "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = 1000156003] = "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = 1000156004] = "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = 1000156005] = "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = 1000156006] = "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_R10X6_UNORM_PACK16_KHR = 1000156007] = "VK_FORMAT_R10X6_UNORM_PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = 1000156008] = "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = 1000156009] = "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = 1000156010] = "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = 1000156011] = "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = 1000156012] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = 1000156013] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = 1000156014] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = 1000156015] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = 1000156016] = "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_R12X4_UNORM_PACK16_KHR = 1000156017] = "VK_FORMAT_R12X4_UNORM_PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = 1000156018] = "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = 1000156019] = "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = 1000156020] = "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = 1000156021] = "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = 1000156022] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = 1000156023] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = 1000156024] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = 1000156025] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = 1000156026] = "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR", VkFormat[VkFormat.VK_FORMAT_G16B16G16R16_422_UNORM_KHR = 1000156027] = "VK_FORMAT_G16B16G16R16_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_B16G16R16G16_422_UNORM_KHR = 1000156028] = "VK_FORMAT_B16G16R16G16_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = 1000156029] = "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = 1000156030] = "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = 1000156031] = "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = 1000156032] = "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = 1000156033] = "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR", VkFormat[VkFormat.VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000] = "VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001] = "VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002] = "VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003] = "VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004] = "VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005] = "VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006] = "VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007] = "VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008] = "VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009] = "VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010] = "VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011] = "VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012] = "VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013] = "VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014] = "VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015] = "VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016] = "VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017] = "VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018] = "VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019] = "VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020] = "VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021] = "VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022] = "VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023] = "VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024] = "VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025] = "VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026] = "VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027] = "VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028] = "VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029] = "VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT", VkFormat[VkFormat.VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = 1000330000] = "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT", VkFormat[VkFormat.VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = 1000330001] = "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT", VkFormat[VkFormat.VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = 1000330002] = "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT", VkFormat[VkFormat.VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = 1000330003] = "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT", VkFormat[VkFormat.VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000] = "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT", VkFormat[VkFormat.VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001] = "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT", VkFormat[VkFormat.VK_FORMAT_R16G16_S10_5_NV = 1000464000] = "VK_FORMAT_R16G16_S10_5_NV";
}(VkFormat || (VkFormat = {}));
export var VkStructureType;
!function(VkStructureType) {
    VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO = 0] = "VK_STRUCTURE_TYPE_APPLICATION_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1] = "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2] = "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3] = "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO = 4] = "VK_STRUCTURE_TYPE_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5] = "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6] = "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7] = "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8] = "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9] = "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10] = "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11] = "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12] = "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13] = "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14] = "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16] = "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17] = "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18] = "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19] = "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20] = "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21] = "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24] = "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25] = "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26] = "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27] = "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28] = "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29] = "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30] = "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31] = "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33] = "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35] = "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36] = "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38] = "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39] = "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43] = "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44] = "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45] = "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46] = "VK_STRUCTURE_TYPE_MEMORY_BARRIER", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47] = "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48] = "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000] = "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001] = "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000] = "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001] = "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000] = "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013] = "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014] = "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000] = "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001] = "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002] = "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003] = "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004] = "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002] = "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003] = "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007] = "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001] = "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003] = "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000] = "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000] = "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003] = "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002] = "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003] = "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000] = "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001] = "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003] = "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000] = "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001] = "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002] = "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001] = "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000] = "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000] = "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001] = "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000] = "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000] = "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001] = "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002] = "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003] = "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004] = "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005] = "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006] = "VK_STRUCTURE_TYPE_SUBPASS_END_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001] = "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000] = "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001] = "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003] = "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001] = "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002] = "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002] = "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003] = "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004] = "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005] = "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001] = "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002] = "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003] = "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004] = "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000] = "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001] = "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002] = "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000] = "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001] = "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002] = "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003] = "VK_STRUCTURE_TYPE_DEPENDENCY_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004] = "VK_STRUCTURE_TYPE_SUBMIT_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005] = "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000] = "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001] = "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002] = "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003] = "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004] = "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005] = "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006] = "VK_STRUCTURE_TYPE_BUFFER_COPY_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007] = "VK_STRUCTURE_TYPE_IMAGE_COPY_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008] = "VK_STRUCTURE_TYPE_IMAGE_BLIT_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009] = "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010] = "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001] = "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002] = "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003] = "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000] = "VK_STRUCTURE_TYPE_RENDERING_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001] = "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002] = "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000] = "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002] = "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003] = "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000] = "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001] = "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008] = "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009] = "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010] = "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000] = "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001] = "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000] = "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000] = "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000] = "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000] = "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000] = "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000] = "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000] = "VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001] = "VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000] = "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = 1000011000] = "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000] = "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001] = "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002] = "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000] = "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001] = "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002] = "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003] = "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004] = "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005] = "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006] = "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007] = "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008] = "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009] = "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010] = "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011] = "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013] = "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015] = "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000] = "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001] = "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002] = "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000] = "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001] = "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002] = "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT = 1000038000] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000038001] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000038002] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT = 1000038003] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT = 1000038004] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT = 1000038005] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT = 1000038006] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT = 1000038007] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT = 1000038008] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT = 1000038009] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT = 1000038010] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT = 1000039000] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000039001] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000039002] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT = 1000039003] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT = 1000039004] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT = 1000039005] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT = 1000039006] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT = 1000039007] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT = 1000039008] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT = 1000039009] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT = 1000039010] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT = 1000040000] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT = 1000040001] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT = 1000040003] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000040004] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT = 1000040005] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT = 1000040006] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000] = "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = 1000044000] = "VK_STRUCTURE_TYPE_RENDERING_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = 1000044001] = "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = 1000044002] = "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = 1000044003] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = 1000044004] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006] = "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007] = "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008] = "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = 1000044008] = "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009] = "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000] = "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = 1000053000] = "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = 1000053001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = 1000053002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000] = "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001] = "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001] = "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000] = "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = 1000059002] = "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003] = "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007] = "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = 1000060000] = "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = 1000060003] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = 1000060004] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = 1000060005] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = 1000060006] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060013] = "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = 1000060014] = "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000] = "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000] = "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000] = "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = 1000070000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = 1000070001] = "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001] = "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003] = "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000] = "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001] = "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002] = "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001] = "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002] = "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003] = "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001] = "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002] = "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000] = "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001] = "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000] = "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000] = "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001] = "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002] = "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003] = "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000] = "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001] = "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002] = "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = 1000082000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = 1000082000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000] = "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000] = "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000] = "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = 1000090000] = "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000] = "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001] = "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002] = "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003] = "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000] = "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001] = "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000] = "VK_STRUCTURE_TYPE_HDR_METADATA_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = 1000108000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = 1000108001] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = 1000108002] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = 1000108003] = "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = 1000109000] = "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = 1000109001] = "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = 1000109002] = "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = 1000109003] = "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = 1000109004] = "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = 1000109005] = "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = 1000109006] = "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000] = "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001] = "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000] = "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000] = "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001] = "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002] = "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000] = "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001] = "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002] = "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003] = "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004] = "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005] = "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006] = "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = 1000117000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = 1000117001] = "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = 1000117002] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = 1000117003] = "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001] = "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002] = "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = 1000120000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000] = "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001] = "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002] = "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003] = "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004] = "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000] = "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000] = "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000] = "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001] = "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000] = "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001] = "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002] = "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003] = "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004] = "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000] = "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001] = "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002] = "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003] = "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004] = "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005] = "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006] = "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001] = "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002] = "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003] = "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000] = "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001] = "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002] = "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004] = "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000] = "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001] = "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002] = "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = 1000146003] = "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004] = "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000] = "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002] = "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000] = "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007] = "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010] = "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011] = "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012] = "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015] = "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016] = "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018] = "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000] = "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = 1000156000] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = 1000156001] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = 1000156002] = "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = 1000156003] = "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = 1000156004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = 1000156005] = "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = 1000157000] = "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = 1000157001] = "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000] = "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003] = "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004] = "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005] = "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006] = "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000] = "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001] = "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000] = "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003] = "VK_STRUCTURE_TYPE_GEOMETRY_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004] = "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005] = "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006] = "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007] = "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011] = "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001] = "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = 1000168000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = 1000168001] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001] = "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000] = "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = 1000175000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001] = "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = 1000180000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000] = "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000] = "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT = 1000187000] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT = 1000187001] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT = 1000187002] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT = 1000187003] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT = 1000187004] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT = 1000187005] = "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000] = "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000] = "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001] = "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000] = "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000] = "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = 1000196000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = 1000197000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = 1000199000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = 1000199001] = "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000] = "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = 1000207000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = 1000207001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = 1000207002] = "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = 1000207003] = "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = 1000207004] = "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = 1000207005] = "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000] = "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = 1000210000] = "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001] = "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002] = "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003] = "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004] = "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005] = "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = 1000211000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000] = "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001] = "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000] = "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000] = "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002] = "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = 1000221000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001] = "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000] = "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001] = "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001] = "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000] = "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = 1000241000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = 1000241001] = "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = 1000241002] = "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = 1000244000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = 1000244001] = "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002] = "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = 1000246000] = "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000] = "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001] = "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001] = "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002] = "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = 1000253000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000] = "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002] = "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001] = "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000] = "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = 1000257000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = 1000244001] = "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = 1000257002] = "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = 1000257003] = "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = 1000257004] = "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001] = "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = 1000261000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001] = "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002] = "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003] = "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004] = "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005] = "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001] = "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002] = "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003] = "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004] = "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005] = "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006] = "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = 1000280000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = 1000280001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001] = "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001] = "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002] = "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000] = "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000] = "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001] = "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002] = "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000] = "VK_STRUCTURE_TYPE_PRESENT_ID_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001] = "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002] = "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR = 1000299000] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR = 1000299001] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR = 1000299002] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR = 1000299003] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR = 1000299004] = "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001] = "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RESERVED_QCOM = 1000309000] = "VK_STRUCTURE_TYPE_RESERVED_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000] = "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001] = "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002] = "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003] = "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004] = "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005] = "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006] = "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007] = "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008] = "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009] = "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010] = "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011] = "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = 1000314000] = "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = 1000314001] = "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = 1000314002] = "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = 1000314003] = "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = 1000314004] = "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = 1000314005] = "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = 1000314006] = "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = 1000314007] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009] = "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003] = "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004] = "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005] = "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006] = "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008] = "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010] = "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011] = "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012] = "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002] = "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD = 1000321000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002] = "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000] = "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000] = "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001] = "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002] = "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003] = "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004] = "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005] = "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006] = "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007] = "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008] = "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009] = "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010] = "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001] = "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002] = "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003] = "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004] = "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001] = "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002] = "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000] = "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002] = "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001] = "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002] = "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001] = "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001] = "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = 1000360000] = "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001] = "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002] = "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000] = "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001] = "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000] = "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001] = "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002] = "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003] = "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004] = "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005] = "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006] = "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007] = "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008] = "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009] = "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000] = "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000] = "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000] = "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT = 1000269001] = "VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT = 1000376000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001] = "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002] = "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000] = "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001] = "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = 1000388000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = 1000388001] = "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000] = "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001] = "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002] = "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003] = "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004] = "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007] = "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008] = "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009] = "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001] = "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = 1000413000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = 1000413001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = 1000413002] = "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = 1000413003] = "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002] = "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002] = "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002] = "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001] = "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002] = "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003] = "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002] = "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003] = "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT = 1000342000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002] = "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003] = "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004] = "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005] = "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010] = "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001] = "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001] = "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002] = "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM", VkStructureType[VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001] = "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM";
}(VkStructureType || (VkStructureType = {}));
export var VkSubpassContents;
!function(VkSubpassContents) {
    VkSubpassContents[VkSubpassContents.VK_SUBPASS_CONTENTS_INLINE = 0] = "VK_SUBPASS_CONTENTS_INLINE", VkSubpassContents[VkSubpassContents.VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1] = "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
}(VkSubpassContents || (VkSubpassContents = {}));
export var VkResult;
!function(VkResult) {
    VkResult[VkResult.VK_SUCCESS = 0] = "VK_SUCCESS", VkResult[VkResult.VK_NOT_READY = 1] = "VK_NOT_READY", VkResult[VkResult.VK_TIMEOUT = 2] = "VK_TIMEOUT", VkResult[VkResult.VK_EVENT_SET = 3] = "VK_EVENT_SET", VkResult[VkResult.VK_EVENT_RESET = 4] = "VK_EVENT_RESET", VkResult[VkResult.VK_INCOMPLETE = 5] = "VK_INCOMPLETE", VkResult[VkResult.VK_ERROR_OUT_OF_HOST_MEMORY = -1] = "VK_ERROR_OUT_OF_HOST_MEMORY", VkResult[VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY = -2] = "VK_ERROR_OUT_OF_DEVICE_MEMORY", VkResult[VkResult.VK_ERROR_INITIALIZATION_FAILED = -3] = "VK_ERROR_INITIALIZATION_FAILED", VkResult[VkResult.VK_ERROR_DEVICE_LOST = -4] = "VK_ERROR_DEVICE_LOST", VkResult[VkResult.VK_ERROR_MEMORY_MAP_FAILED = -5] = "VK_ERROR_MEMORY_MAP_FAILED", VkResult[VkResult.VK_ERROR_LAYER_NOT_PRESENT = -6] = "VK_ERROR_LAYER_NOT_PRESENT", VkResult[VkResult.VK_ERROR_EXTENSION_NOT_PRESENT = -7] = "VK_ERROR_EXTENSION_NOT_PRESENT", VkResult[VkResult.VK_ERROR_FEATURE_NOT_PRESENT = -8] = "VK_ERROR_FEATURE_NOT_PRESENT", VkResult[VkResult.VK_ERROR_INCOMPATIBLE_DRIVER = -9] = "VK_ERROR_INCOMPATIBLE_DRIVER", VkResult[VkResult.VK_ERROR_TOO_MANY_OBJECTS = -10] = "VK_ERROR_TOO_MANY_OBJECTS", VkResult[VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED = -11] = "VK_ERROR_FORMAT_NOT_SUPPORTED", VkResult[VkResult.VK_ERROR_FRAGMENTED_POOL = -12] = "VK_ERROR_FRAGMENTED_POOL", VkResult[VkResult.VK_ERROR_UNKNOWN = -13] = "VK_ERROR_UNKNOWN", VkResult[VkResult.VK_ERROR_OUT_OF_POOL_MEMORY = 1000069000] = "VK_ERROR_OUT_OF_POOL_MEMORY", VkResult[VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE = 1000072003] = "VK_ERROR_INVALID_EXTERNAL_HANDLE", VkResult[VkResult.VK_ERROR_FRAGMENTATION = 1000161000] = "VK_ERROR_FRAGMENTATION", VkResult[VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = 1000257000] = "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS", VkResult[VkResult.VK_PIPELINE_COMPILE_REQUIRED = 1000297000] = "VK_PIPELINE_COMPILE_REQUIRED", VkResult[VkResult.VK_ERROR_SURFACE_LOST_KHR = 1000000000] = "VK_ERROR_SURFACE_LOST_KHR", VkResult[VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 1000000001] = "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR", VkResult[VkResult.VK_SUBOPTIMAL_KHR = 1000001003] = "VK_SUBOPTIMAL_KHR", VkResult[VkResult.VK_ERROR_OUT_OF_DATE_KHR = 1000001004] = "VK_ERROR_OUT_OF_DATE_KHR", VkResult[VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 1000003001] = "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR", VkResult[VkResult.VK_ERROR_VALIDATION_FAILED_EXT = 1000011001] = "VK_ERROR_VALIDATION_FAILED_EXT", VkResult[VkResult.VK_ERROR_INVALID_SHADER_NV = 1000012000] = "VK_ERROR_INVALID_SHADER_NV", VkResult[VkResult.VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = 1000023000] = "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = 1000023001] = "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = 1000023002] = "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = 1000023003] = "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = 1000023004] = "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = 1000023005] = "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR", VkResult[VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR = 1000069000] = "VK_ERROR_OUT_OF_POOL_MEMORY_KHR", VkResult[VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = 1000072003] = "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR", VkResult[VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 1000158000] = "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT", VkResult[VkResult.VK_ERROR_FRAGMENTATION_EXT = 1000161000] = "VK_ERROR_FRAGMENTATION_EXT", VkResult[VkResult.VK_ERROR_NOT_PERMITTED_EXT = 1000174001] = "VK_ERROR_NOT_PERMITTED_EXT", VkResult[VkResult.VK_ERROR_NOT_PERMITTED_KHR = 1000174001] = "VK_ERROR_NOT_PERMITTED_KHR", VkResult[VkResult.VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = 1000257000] = "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT", VkResult[VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 1000255000] = "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT", VkResult[VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = 1000257000] = "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR", VkResult[VkResult.VK_THREAD_IDLE_KHR = 1000268000] = "VK_THREAD_IDLE_KHR", VkResult[VkResult.VK_THREAD_DONE_KHR = 1000268001] = "VK_THREAD_DONE_KHR", VkResult[VkResult.VK_OPERATION_DEFERRED_KHR = 1000268002] = "VK_OPERATION_DEFERRED_KHR", VkResult[VkResult.VK_OPERATION_NOT_DEFERRED_KHR = 1000268003] = "VK_OPERATION_NOT_DEFERRED_KHR", VkResult[VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000] = "VK_PIPELINE_COMPILE_REQUIRED_EXT", VkResult[VkResult.VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000] = "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT", VkResult[VkResult.VK_ERROR_COMPRESSION_EXHAUSTED_EXT = 1000338000] = "VK_ERROR_COMPRESSION_EXHAUSTED_EXT";
}(VkResult || (VkResult = {}));
export var VkDynamicState;
!function(VkDynamicState) {
    VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT = 0] = "VK_DYNAMIC_STATE_VIEWPORT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SCISSOR = 1] = "VK_DYNAMIC_STATE_SCISSOR", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LINE_WIDTH = 2] = "VK_DYNAMIC_STATE_LINE_WIDTH", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS = 3] = "VK_DYNAMIC_STATE_DEPTH_BIAS", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4] = "VK_DYNAMIC_STATE_BLEND_CONSTANTS", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5] = "VK_DYNAMIC_STATE_DEPTH_BOUNDS", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6] = "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7] = "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8] = "VK_DYNAMIC_STATE_STENCIL_REFERENCE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE = 1000267000] = "VK_DYNAMIC_STATE_CULL_MODE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE = 1000267001] = "VK_DYNAMIC_STATE_FRONT_FACE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002] = "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003] = "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004] = "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005] = "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006] = "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007] = "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008] = "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009] = "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010] = "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP = 1000267011] = "VK_DYNAMIC_STATE_STENCIL_OP", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001] = "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002] = "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004] = "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000] = "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000] = "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000] = "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000] = "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004] = "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006] = "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001] = "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000] = "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000] = "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000] = "VK_DYNAMIC_STATE_CULL_MODE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001] = "VK_DYNAMIC_STATE_FRONT_FACE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002] = "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003] = "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004] = "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005] = "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006] = "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007] = "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008] = "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009] = "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010] = "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011] = "VK_DYNAMIC_STATE_STENCIL_OP_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000] = "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000] = "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = 1000377001] = "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = 1000377002] = "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003] = "VK_DYNAMIC_STATE_LOGIC_OP_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = 1000377004] = "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000] = "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002] = "VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003] = "VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004] = "VK_DYNAMIC_STATE_POLYGON_MODE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005] = "VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006] = "VK_DYNAMIC_STATE_SAMPLE_MASK_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007] = "VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008] = "VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009] = "VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010] = "VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011] = "VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012] = "VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013] = "VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014] = "VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015] = "VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016] = "VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017] = "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018] = "VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019] = "VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020] = "VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021] = "VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022] = "VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023] = "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024] = "VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025] = "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026] = "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027] = "VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028] = "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029] = "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030] = "VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031] = "VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV", VkDynamicState[VkDynamicState.VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032] = "VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV";
}(VkDynamicState || (VkDynamicState = {}));
export var VkDescriptorUpdateTemplateType;
!function(VkDescriptorUpdateTemplateType) {
    VkDescriptorUpdateTemplateType[VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0] = "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET", VkDescriptorUpdateTemplateType[VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1] = "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR", VkDescriptorUpdateTemplateType[VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0] = "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR";
}(VkDescriptorUpdateTemplateType || (VkDescriptorUpdateTemplateType = {}));
export var VkObjectType;
!function(VkObjectType) {
    VkObjectType[VkObjectType.VK_OBJECT_TYPE_UNKNOWN = 0] = "VK_OBJECT_TYPE_UNKNOWN", VkObjectType[VkObjectType.VK_OBJECT_TYPE_INSTANCE = 1] = "VK_OBJECT_TYPE_INSTANCE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2] = "VK_OBJECT_TYPE_PHYSICAL_DEVICE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DEVICE = 3] = "VK_OBJECT_TYPE_DEVICE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_QUEUE = 4] = "VK_OBJECT_TYPE_QUEUE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SEMAPHORE = 5] = "VK_OBJECT_TYPE_SEMAPHORE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_COMMAND_BUFFER = 6] = "VK_OBJECT_TYPE_COMMAND_BUFFER", VkObjectType[VkObjectType.VK_OBJECT_TYPE_FENCE = 7] = "VK_OBJECT_TYPE_FENCE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DEVICE_MEMORY = 8] = "VK_OBJECT_TYPE_DEVICE_MEMORY", VkObjectType[VkObjectType.VK_OBJECT_TYPE_BUFFER = 9] = "VK_OBJECT_TYPE_BUFFER", VkObjectType[VkObjectType.VK_OBJECT_TYPE_IMAGE = 10] = "VK_OBJECT_TYPE_IMAGE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_EVENT = 11] = "VK_OBJECT_TYPE_EVENT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_QUERY_POOL = 12] = "VK_OBJECT_TYPE_QUERY_POOL", VkObjectType[VkObjectType.VK_OBJECT_TYPE_BUFFER_VIEW = 13] = "VK_OBJECT_TYPE_BUFFER_VIEW", VkObjectType[VkObjectType.VK_OBJECT_TYPE_IMAGE_VIEW = 14] = "VK_OBJECT_TYPE_IMAGE_VIEW", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SHADER_MODULE = 15] = "VK_OBJECT_TYPE_SHADER_MODULE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PIPELINE_CACHE = 16] = "VK_OBJECT_TYPE_PIPELINE_CACHE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17] = "VK_OBJECT_TYPE_PIPELINE_LAYOUT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_RENDER_PASS = 18] = "VK_OBJECT_TYPE_RENDER_PASS", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PIPELINE = 19] = "VK_OBJECT_TYPE_PIPELINE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20] = "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SAMPLER = 21] = "VK_OBJECT_TYPE_SAMPLER", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22] = "VK_OBJECT_TYPE_DESCRIPTOR_POOL", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_SET = 23] = "VK_OBJECT_TYPE_DESCRIPTOR_SET", VkObjectType[VkObjectType.VK_OBJECT_TYPE_FRAMEBUFFER = 24] = "VK_OBJECT_TYPE_FRAMEBUFFER", VkObjectType[VkObjectType.VK_OBJECT_TYPE_COMMAND_POOL = 25] = "VK_OBJECT_TYPE_COMMAND_POOL", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000] = "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000] = "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000] = "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SURFACE_KHR = 1000000000] = "VK_OBJECT_TYPE_SURFACE_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000] = "VK_OBJECT_TYPE_SWAPCHAIN_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000] = "VK_OBJECT_TYPE_DISPLAY_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001] = "VK_OBJECT_TYPE_DISPLAY_MODE_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000] = "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000] = "VK_OBJECT_TYPE_VIDEO_SESSION_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001] = "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000] = "VK_OBJECT_TYPE_CU_MODULE_NVX", VkObjectType[VkObjectType.VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001] = "VK_OBJECT_TYPE_CU_FUNCTION_NVX", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000] = "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000] = "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000] = "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = 1000156000] = "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000] = "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000] = "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000] = "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL", VkObjectType[VkObjectType.VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000] = "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR", VkObjectType[VkObjectType.VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000] = "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV", VkObjectType[VkObjectType.VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000] = "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000] = "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA", VkObjectType[VkObjectType.VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000] = "VK_OBJECT_TYPE_MICROMAP_EXT", VkObjectType[VkObjectType.VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000] = "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV";
}(VkObjectType || (VkObjectType = {}));
export var VkRayTracingInvocationReorderModeNV;
!function(VkRayTracingInvocationReorderModeNV) {
    VkRayTracingInvocationReorderModeNV[VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0] = "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV", VkRayTracingInvocationReorderModeNV[VkRayTracingInvocationReorderModeNV.VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1] = "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV";
}(VkRayTracingInvocationReorderModeNV || (VkRayTracingInvocationReorderModeNV = {}));
export var VkQueueFlagBits;
!function(VkQueueFlagBits) {
    VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_GRAPHICS_BIT = 1] = "VK_QUEUE_GRAPHICS_BIT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_COMPUTE_BIT = 2] = "VK_QUEUE_COMPUTE_BIT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_TRANSFER_BIT = 4] = "VK_QUEUE_TRANSFER_BIT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_SPARSE_BINDING_BIT = 8] = "VK_QUEUE_SPARSE_BINDING_BIT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_PROTECTED_BIT = 16] = "VK_QUEUE_PROTECTED_BIT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32] = "VK_QUEUE_VIDEO_DECODE_BIT_KHR", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_RESERVED_9_BIT_EXT = 512] = "VK_QUEUE_RESERVED_9_BIT_EXT", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_VIDEO_ENCODE_BIT_KHR = 64] = "VK_QUEUE_VIDEO_ENCODE_BIT_KHR", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_RESERVED_7_BIT_QCOM = 128] = "VK_QUEUE_RESERVED_7_BIT_QCOM", VkQueueFlagBits[VkQueueFlagBits.VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256] = "VK_QUEUE_OPTICAL_FLOW_BIT_NV";
}(VkQueueFlagBits || (VkQueueFlagBits = {}));
export var VkCullModeFlagBits;
!function(VkCullModeFlagBits) {
    VkCullModeFlagBits[VkCullModeFlagBits.VK_CULL_MODE_NONE = 0] = "VK_CULL_MODE_NONE", VkCullModeFlagBits[VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT = 1] = "VK_CULL_MODE_FRONT_BIT", VkCullModeFlagBits[VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT = 2] = "VK_CULL_MODE_BACK_BIT", VkCullModeFlagBits[VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK = 3] = "VK_CULL_MODE_FRONT_AND_BACK";
}(VkCullModeFlagBits || (VkCullModeFlagBits = {}));
export var VkRenderPassCreateFlagBits;
!function(VkRenderPassCreateFlagBits) {
    VkRenderPassCreateFlagBits[VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 1] = "VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR", VkRenderPassCreateFlagBits[VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2] = "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM";
}(VkRenderPassCreateFlagBits || (VkRenderPassCreateFlagBits = {}));
export var VkDeviceQueueCreateFlagBits;
!function(VkDeviceQueueCreateFlagBits) {
    VkDeviceQueueCreateFlagBits[VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1] = "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT", VkDeviceQueueCreateFlagBits[VkDeviceQueueCreateFlagBits.VK_DEVICE_QUEUE_CREATE_RESERVED_1_BIT_QCOM = 2] = "VK_DEVICE_QUEUE_CREATE_RESERVED_1_BIT_QCOM";
}(VkDeviceQueueCreateFlagBits || (VkDeviceQueueCreateFlagBits = {}));
export var VkMemoryPropertyFlagBits;
!function(VkMemoryPropertyFlagBits) {
    VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1] = "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2] = "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4] = "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8] = "VK_MEMORY_PROPERTY_HOST_CACHED_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16] = "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_PROTECTED_BIT = 32] = "VK_MEMORY_PROPERTY_PROTECTED_BIT", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64] = "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128] = "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD", VkMemoryPropertyFlagBits[VkMemoryPropertyFlagBits.VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256] = "VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV";
}(VkMemoryPropertyFlagBits || (VkMemoryPropertyFlagBits = {}));
export var VkMemoryHeapFlagBits;
!function(VkMemoryHeapFlagBits) {
    VkMemoryHeapFlagBits[VkMemoryHeapFlagBits.VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1] = "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT", VkMemoryHeapFlagBits[VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2] = "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT", VkMemoryHeapFlagBits[VkMemoryHeapFlagBits.VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = 2] = "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR", VkMemoryHeapFlagBits[VkMemoryHeapFlagBits.VK_MEMORY_HEAP_RESERVED_2_BIT_KHR = 4] = "VK_MEMORY_HEAP_RESERVED_2_BIT_KHR";
}(VkMemoryHeapFlagBits || (VkMemoryHeapFlagBits = {}));
export var VkAccessFlagBits;
!function(VkAccessFlagBits) {
    VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1] = "VK_ACCESS_INDIRECT_COMMAND_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_INDEX_READ_BIT = 2] = "VK_ACCESS_INDEX_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4] = "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_UNIFORM_READ_BIT = 8] = "VK_ACCESS_UNIFORM_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16] = "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_SHADER_READ_BIT = 32] = "VK_ACCESS_SHADER_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_SHADER_WRITE_BIT = 64] = "VK_ACCESS_SHADER_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128] = "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256] = "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512] = "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024] = "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_TRANSFER_READ_BIT = 2048] = "VK_ACCESS_TRANSFER_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_TRANSFER_WRITE_BIT = 4096] = "VK_ACCESS_TRANSFER_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_HOST_READ_BIT = 8192] = "VK_ACCESS_HOST_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_HOST_WRITE_BIT = 16384] = "VK_ACCESS_HOST_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_MEMORY_READ_BIT = 32768] = "VK_ACCESS_MEMORY_READ_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_MEMORY_WRITE_BIT = 65536] = "VK_ACCESS_MEMORY_WRITE_BIT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_NONE = 0] = "VK_ACCESS_NONE", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432] = "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864] = "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728] = "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576] = "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288] = "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152] = "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304] = "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608] = "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152] = "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304] = "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216] = "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608] = "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072] = "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144] = "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV", VkAccessFlagBits[VkAccessFlagBits.VK_ACCESS_NONE_KHR = 0] = "VK_ACCESS_NONE_KHR";
}(VkAccessFlagBits || (VkAccessFlagBits = {}));
export var VkBufferUsageFlagBits;
!function(VkBufferUsageFlagBits) {
    VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1] = "VK_BUFFER_USAGE_TRANSFER_SRC_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2] = "VK_BUFFER_USAGE_TRANSFER_DST_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4] = "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8] = "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16] = "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32] = "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64] = "VK_BUFFER_USAGE_INDEX_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128] = "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256] = "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072] = "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192] = "VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384] = "VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048] = "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096] = "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512] = "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESERVED_25_BIT_AMD = 33554432] = "VK_BUFFER_USAGE_RESERVED_25_BIT_AMD", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288] = "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576] = "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024] = "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024] = "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM = 262144] = "VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072] = "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072] = "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768] = "VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536] = "VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152] = "VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304] = "VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864] = "VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608] = "VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT", VkBufferUsageFlagBits[VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216] = "VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT";
}(VkBufferUsageFlagBits || (VkBufferUsageFlagBits = {}));
export var VkBufferCreateFlagBits;
!function(VkBufferCreateFlagBits) {
    VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1] = "VK_BUFFER_CREATE_SPARSE_BINDING_BIT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2] = "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4] = "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_PROTECTED_BIT = 8] = "VK_BUFFER_CREATE_PROTECTED_BIT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16] = "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 16] = "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 16] = "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", VkBufferCreateFlagBits[VkBufferCreateFlagBits.VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32] = "VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT";
}(VkBufferCreateFlagBits || (VkBufferCreateFlagBits = {}));
export var VkShaderStageFlagBits;
!function(VkShaderStageFlagBits) {
    VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT = 1] = "VK_SHADER_STAGE_VERTEX_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2] = "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4] = "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT = 8] = "VK_SHADER_STAGE_GEOMETRY_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT = 16] = "VK_SHADER_STAGE_FRAGMENT_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT = 32] = "VK_SHADER_STAGE_COMPUTE_BIT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS = 31] = "VK_SHADER_STAGE_ALL_GRAPHICS", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_ALL = 2147483647] = "VK_SHADER_STAGE_ALL", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256] = "VK_SHADER_STAGE_RAYGEN_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512] = "VK_SHADER_STAGE_ANY_HIT_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024] = "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_KHR = 2048] = "VK_SHADER_STAGE_MISS_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096] = "VK_SHADER_STAGE_INTERSECTION_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192] = "VK_SHADER_STAGE_CALLABLE_BIT_KHR", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV = 256] = "VK_SHADER_STAGE_RAYGEN_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512] = "VK_SHADER_STAGE_ANY_HIT_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024] = "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV = 2048] = "VK_SHADER_STAGE_MISS_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096] = "VK_SHADER_STAGE_INTERSECTION_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192] = "VK_SHADER_STAGE_CALLABLE_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV = 64] = "VK_SHADER_STAGE_TASK_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV = 128] = "VK_SHADER_STAGE_MESH_BIT_NV", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_EXT = 64] = "VK_SHADER_STAGE_TASK_BIT_EXT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_EXT = 128] = "VK_SHADER_STAGE_MESH_BIT_EXT", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384] = "VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_RESERVED_19_BIT_HUAWEI = 524288] = "VK_SHADER_STAGE_RESERVED_19_BIT_HUAWEI", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_EXT_483_RESERVE_15 = 32768] = "VK_SHADER_STAGE_EXT_483_RESERVE_15", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_EXT_483_RESERVE_16 = 65536] = "VK_SHADER_STAGE_EXT_483_RESERVE_16", VkShaderStageFlagBits[VkShaderStageFlagBits.VK_SHADER_STAGE_EXT_483_RESERVE_17 = 131072] = "VK_SHADER_STAGE_EXT_483_RESERVE_17";
}(VkShaderStageFlagBits || (VkShaderStageFlagBits = {}));
export var VkImageUsageFlagBits;
!function(VkImageUsageFlagBits) {
    VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1] = "VK_IMAGE_USAGE_TRANSFER_SRC_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2] = "VK_IMAGE_USAGE_TRANSFER_DST_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLED_BIT = 4] = "VK_IMAGE_USAGE_SAMPLED_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_STORAGE_BIT = 8] = "VK_IMAGE_USAGE_STORAGE_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16] = "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32] = "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64] = "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128] = "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024] = "VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048] = "VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096] = "VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256] = "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM = 65536] = "VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM = 131072] = "VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512] = "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256] = "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_RESERVED_22_BIT_EXT = 4194304] = "VK_IMAGE_USAGE_RESERVED_22_BIT_EXT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 8192] = "VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 16384] = "VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR = 32768] = "VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288] = "VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144] = "VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576] = "VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM", VkImageUsageFlagBits[VkImageUsageFlagBits.VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152] = "VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM";
}(VkImageUsageFlagBits || (VkImageUsageFlagBits = {}));
export var VkImageCreateFlagBits;
!function(VkImageCreateFlagBits) {
    VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1] = "VK_IMAGE_CREATE_SPARSE_BINDING_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2] = "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4] = "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8] = "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16] = "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT = 1024] = "VK_IMAGE_CREATE_ALIAS_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64] = "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32] = "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128] = "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256] = "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_PROTECTED_BIT = 2048] = "VK_IMAGE_CREATE_PROTECTED_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT = 512] = "VK_IMAGE_CREATE_DISJOINT_BIT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192] = "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 64] = "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = 32] = "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = 128] = "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = 256] = "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096] = "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_DISJOINT_BIT_KHR = 512] = "VK_IMAGE_CREATE_DISJOINT_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_ALIAS_BIT_KHR = 1024] = "VK_IMAGE_CREATE_ALIAS_BIT_KHR", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384] = "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_RESERVED_19_BIT_EXT = 524288] = "VK_IMAGE_CREATE_RESERVED_19_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536] = "VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144] = "VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072] = "VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT", VkImageCreateFlagBits[VkImageCreateFlagBits.VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768] = "VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM";
}(VkImageCreateFlagBits || (VkImageCreateFlagBits = {}));
export var VkImageViewCreateFlagBits;
!function(VkImageViewCreateFlagBits) {
    VkImageViewCreateFlagBits[VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1] = "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT", VkImageViewCreateFlagBits[VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4] = "VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", VkImageViewCreateFlagBits[VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2] = "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT", VkImageViewCreateFlagBits[VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_RESERVED_3_BIT_EXT = 8] = "VK_IMAGE_VIEW_CREATE_RESERVED_3_BIT_EXT";
}(VkImageViewCreateFlagBits || (VkImageViewCreateFlagBits = {}));
export var VkSamplerCreateFlagBits;
!function(VkSamplerCreateFlagBits) {
    VkSamplerCreateFlagBits[VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1] = "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT", VkSamplerCreateFlagBits[VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2] = "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT", VkSamplerCreateFlagBits[VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8] = "VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", VkSamplerCreateFlagBits[VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4] = "VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT", VkSamplerCreateFlagBits[VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16] = "VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM";
}(VkSamplerCreateFlagBits || (VkSamplerCreateFlagBits = {}));
export var VkPipelineCreateFlagBits;
!function(VkPipelineCreateFlagBits) {
    VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1] = "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2] = "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4] = "VK_PIPELINE_CREATE_DERIVATIVE_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8] = "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16] = "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE = 16] = "VK_PIPELINE_CREATE_DISPATCH_BASE", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256] = "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512] = "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152] = "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152] = "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304] = "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304] = "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8] = "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16] = "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384] = "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768] = "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536] = "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072] = "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096] = "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192] = "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288] = "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32] = "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64] = "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128] = "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144] = "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048] = "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256] = "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512] = "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912] = "VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608] = "VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024] = "VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576] = "VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432] = "VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864] = "VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216] = "VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RESERVED_BIT_28_NV = 268435456] = "VK_PIPELINE_CREATE_RESERVED_BIT_28_NV", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728] = "VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT", VkPipelineCreateFlagBits[VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824] = "VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT";
}(VkPipelineCreateFlagBits || (VkPipelineCreateFlagBits = {}));
export var VkPipelineShaderStageCreateFlagBits;
!function(VkPipelineShaderStageCreateFlagBits) {
    VkPipelineShaderStageCreateFlagBits[VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1] = "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT", VkPipelineShaderStageCreateFlagBits[VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2] = "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT", VkPipelineShaderStageCreateFlagBits[VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1] = "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT", VkPipelineShaderStageCreateFlagBits[VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2] = "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT", VkPipelineShaderStageCreateFlagBits[VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR = 8] = "VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR";
}(VkPipelineShaderStageCreateFlagBits || (VkPipelineShaderStageCreateFlagBits = {}));
export var VkColorComponentFlagBits;
!function(VkColorComponentFlagBits) {
    VkColorComponentFlagBits[VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT = 1] = "VK_COLOR_COMPONENT_R_BIT", VkColorComponentFlagBits[VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT = 2] = "VK_COLOR_COMPONENT_G_BIT", VkColorComponentFlagBits[VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT = 4] = "VK_COLOR_COMPONENT_B_BIT", VkColorComponentFlagBits[VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT = 8] = "VK_COLOR_COMPONENT_A_BIT";
}(VkColorComponentFlagBits || (VkColorComponentFlagBits = {}));
export var VkFenceCreateFlagBits;
!function(VkFenceCreateFlagBits) {
    VkFenceCreateFlagBits[VkFenceCreateFlagBits.VK_FENCE_CREATE_SIGNALED_BIT = 1] = "VK_FENCE_CREATE_SIGNALED_BIT";
}(VkFenceCreateFlagBits || (VkFenceCreateFlagBits = {}));
export var VkSemaphoreCreateFlagBits;
VkSemaphoreCreateFlagBits || (VkSemaphoreCreateFlagBits = {});
export var VkFormatFeatureFlagBits;
!function(VkFormatFeatureFlagBits) {
    VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2] = "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4] = "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8] = "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16] = "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32] = "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64] = "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128] = "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256] = "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512] = "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024] = "VK_FORMAT_FEATURE_BLIT_SRC_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048] = "VK_FORMAT_FEATURE_BLIT_DST_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384] = "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768] = "VK_FORMAT_FEATURE_TRANSFER_DST_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072] = "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304] = "VK_FORMAT_FEATURE_DISJOINT_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608] = "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432] = "VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864] = "VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = 16384] = "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = 32768] = "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 65536] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912] = "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072] = "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = 4194304] = "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608] = "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192] = "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216] = "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824] = "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728] = "VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR", VkFormatFeatureFlagBits[VkFormatFeatureFlagBits.VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR = 268435456] = "VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR";
}(VkFormatFeatureFlagBits || (VkFormatFeatureFlagBits = {}));
export var VkQueryControlFlagBits;
!function(VkQueryControlFlagBits) {
    VkQueryControlFlagBits[VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT = 1] = "VK_QUERY_CONTROL_PRECISE_BIT";
}(VkQueryControlFlagBits || (VkQueryControlFlagBits = {}));
export var VkQueryResultFlagBits;
!function(VkQueryResultFlagBits) {
    VkQueryResultFlagBits[VkQueryResultFlagBits.VK_QUERY_RESULT_64_BIT = 1] = "VK_QUERY_RESULT_64_BIT", VkQueryResultFlagBits[VkQueryResultFlagBits.VK_QUERY_RESULT_WAIT_BIT = 2] = "VK_QUERY_RESULT_WAIT_BIT", VkQueryResultFlagBits[VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4] = "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT", VkQueryResultFlagBits[VkQueryResultFlagBits.VK_QUERY_RESULT_PARTIAL_BIT = 8] = "VK_QUERY_RESULT_PARTIAL_BIT", VkQueryResultFlagBits[VkQueryResultFlagBits.VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16] = "VK_QUERY_RESULT_WITH_STATUS_BIT_KHR";
}(VkQueryResultFlagBits || (VkQueryResultFlagBits = {}));
export var VkCommandBufferUsageFlagBits;
!function(VkCommandBufferUsageFlagBits) {
    VkCommandBufferUsageFlagBits[VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1] = "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT", VkCommandBufferUsageFlagBits[VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2] = "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT", VkCommandBufferUsageFlagBits[VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4] = "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT";
}(VkCommandBufferUsageFlagBits || (VkCommandBufferUsageFlagBits = {}));
export var VkQueryPipelineStatisticFlagBits;
!function(VkQueryPipelineStatisticFlagBits) {
    VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1] = "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2] = "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4] = "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8] = "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16] = "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32] = "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64] = "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128] = "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256] = "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512] = "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024] = "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048] = "VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT", VkQueryPipelineStatisticFlagBits[VkQueryPipelineStatisticFlagBits.VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096] = "VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT";
}(VkQueryPipelineStatisticFlagBits || (VkQueryPipelineStatisticFlagBits = {}));
export var VkImageAspectFlagBits;
!function(VkImageAspectFlagBits) {
    VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_COLOR_BIT = 1] = "VK_IMAGE_ASPECT_COLOR_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_DEPTH_BIT = 2] = "VK_IMAGE_ASPECT_DEPTH_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_STENCIL_BIT = 4] = "VK_IMAGE_ASPECT_STENCIL_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_METADATA_BIT = 8] = "VK_IMAGE_ASPECT_METADATA_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT = 16] = "VK_IMAGE_ASPECT_PLANE_0_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT = 32] = "VK_IMAGE_ASPECT_PLANE_1_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT = 64] = "VK_IMAGE_ASPECT_PLANE_2_BIT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE = 0] = "VK_IMAGE_ASPECT_NONE", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = 16] = "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = 32] = "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = 64] = "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128] = "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256] = "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512] = "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024] = "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT", VkImageAspectFlagBits[VkImageAspectFlagBits.VK_IMAGE_ASPECT_NONE_KHR = 0] = "VK_IMAGE_ASPECT_NONE_KHR";
}(VkImageAspectFlagBits || (VkImageAspectFlagBits = {}));
export var VkSparseImageFormatFlagBits;
!function(VkSparseImageFormatFlagBits) {
    VkSparseImageFormatFlagBits[VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1] = "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT", VkSparseImageFormatFlagBits[VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2] = "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT", VkSparseImageFormatFlagBits[VkSparseImageFormatFlagBits.VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4] = "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT";
}(VkSparseImageFormatFlagBits || (VkSparseImageFormatFlagBits = {}));
export var VkSparseMemoryBindFlagBits;
!function(VkSparseMemoryBindFlagBits) {
    VkSparseMemoryBindFlagBits[VkSparseMemoryBindFlagBits.VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1] = "VK_SPARSE_MEMORY_BIND_METADATA_BIT";
}(VkSparseMemoryBindFlagBits || (VkSparseMemoryBindFlagBits = {}));
export var VkPipelineStageFlagBits;
!function(VkPipelineStageFlagBits) {
    VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1] = "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2] = "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4] = "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8] = "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16] = "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32] = "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64] = "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128] = "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256] = "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512] = "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024] = "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048] = "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFER_BIT = 4096] = "VK_PIPELINE_STAGE_TRANSFER_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192] = "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_HOST_BIT = 16384] = "VK_PIPELINE_STAGE_HOST_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768] = "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536] = "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE = 0] = "VK_PIPELINE_STAGE_NONE", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216] = "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144] = "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432] = "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152] = "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304] = "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = 2097152] = "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432] = "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288] = "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576] = "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608] = "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304] = "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072] = "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_NONE_KHR = 0] = "VK_PIPELINE_STAGE_NONE_KHR", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288] = "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT", VkPipelineStageFlagBits[VkPipelineStageFlagBits.VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576] = "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT";
}(VkPipelineStageFlagBits || (VkPipelineStageFlagBits = {}));
export var VkCommandPoolCreateFlagBits;
!function(VkCommandPoolCreateFlagBits) {
    VkCommandPoolCreateFlagBits[VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1] = "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT", VkCommandPoolCreateFlagBits[VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2] = "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT", VkCommandPoolCreateFlagBits[VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4] = "VK_COMMAND_POOL_CREATE_PROTECTED_BIT";
}(VkCommandPoolCreateFlagBits || (VkCommandPoolCreateFlagBits = {}));
export var VkCommandPoolResetFlagBits;
!function(VkCommandPoolResetFlagBits) {
    VkCommandPoolResetFlagBits[VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1] = "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT", VkCommandPoolResetFlagBits[VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RESERVED_1_BIT_COREAVI = 2] = "VK_COMMAND_POOL_RESET_RESERVED_1_BIT_COREAVI";
}(VkCommandPoolResetFlagBits || (VkCommandPoolResetFlagBits = {}));
export var VkCommandBufferResetFlagBits;
!function(VkCommandBufferResetFlagBits) {
    VkCommandBufferResetFlagBits[VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1] = "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT";
}(VkCommandBufferResetFlagBits || (VkCommandBufferResetFlagBits = {}));
export var VkSampleCountFlagBits;
!function(VkSampleCountFlagBits) {
    VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_1_BIT = 1] = "VK_SAMPLE_COUNT_1_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_2_BIT = 2] = "VK_SAMPLE_COUNT_2_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_4_BIT = 4] = "VK_SAMPLE_COUNT_4_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_8_BIT = 8] = "VK_SAMPLE_COUNT_8_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_16_BIT = 16] = "VK_SAMPLE_COUNT_16_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_32_BIT = 32] = "VK_SAMPLE_COUNT_32_BIT", VkSampleCountFlagBits[VkSampleCountFlagBits.VK_SAMPLE_COUNT_64_BIT = 64] = "VK_SAMPLE_COUNT_64_BIT";
}(VkSampleCountFlagBits || (VkSampleCountFlagBits = {}));
export var VkAttachmentDescriptionFlagBits;
!function(VkAttachmentDescriptionFlagBits) {
    VkAttachmentDescriptionFlagBits[VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1] = "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT";
}(VkAttachmentDescriptionFlagBits || (VkAttachmentDescriptionFlagBits = {}));
export var VkStencilFaceFlagBits;
!function(VkStencilFaceFlagBits) {
    VkStencilFaceFlagBits[VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT = 1] = "VK_STENCIL_FACE_FRONT_BIT", VkStencilFaceFlagBits[VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT = 2] = "VK_STENCIL_FACE_BACK_BIT", VkStencilFaceFlagBits[VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK = 3] = "VK_STENCIL_FACE_FRONT_AND_BACK", VkStencilFaceFlagBits[VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK = 3] = "VK_STENCIL_FRONT_AND_BACK";
}(VkStencilFaceFlagBits || (VkStencilFaceFlagBits = {}));
export var VkDescriptorPoolCreateFlagBits;
!function(VkDescriptorPoolCreateFlagBits) {
    VkDescriptorPoolCreateFlagBits[VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1] = "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT", VkDescriptorPoolCreateFlagBits[VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2] = "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT", VkDescriptorPoolCreateFlagBits[VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2] = "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT", VkDescriptorPoolCreateFlagBits[VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4] = "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE", VkDescriptorPoolCreateFlagBits[VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4] = "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT";
}(VkDescriptorPoolCreateFlagBits || (VkDescriptorPoolCreateFlagBits = {}));
export var VkDependencyFlagBits;
!function(VkDependencyFlagBits) {
    VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT = 1] = "VK_DEPENDENCY_BY_REGION_BIT", VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT = 4] = "VK_DEPENDENCY_DEVICE_GROUP_BIT", VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT = 2] = "VK_DEPENDENCY_VIEW_LOCAL_BIT", VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2] = "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR", VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4] = "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR", VkDependencyFlagBits[VkDependencyFlagBits.VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8] = "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT";
}(VkDependencyFlagBits || (VkDependencyFlagBits = {}));
export var VkSemaphoreType;
!function(VkSemaphoreType) {
    VkSemaphoreType[VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY = 0] = "VK_SEMAPHORE_TYPE_BINARY", VkSemaphoreType[VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE = 1] = "VK_SEMAPHORE_TYPE_TIMELINE", VkSemaphoreType[VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY_KHR = 0] = "VK_SEMAPHORE_TYPE_BINARY_KHR", VkSemaphoreType[VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1] = "VK_SEMAPHORE_TYPE_TIMELINE_KHR";
}(VkSemaphoreType || (VkSemaphoreType = {}));
export var VkSemaphoreWaitFlagBits;
!function(VkSemaphoreWaitFlagBits) {
    VkSemaphoreWaitFlagBits[VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT = 1] = "VK_SEMAPHORE_WAIT_ANY_BIT", VkSemaphoreWaitFlagBits[VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1] = "VK_SEMAPHORE_WAIT_ANY_BIT_KHR";
}(VkSemaphoreWaitFlagBits || (VkSemaphoreWaitFlagBits = {}));
export var VkPresentModeKHR;
!function(VkPresentModeKHR) {
    VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR = 0] = "VK_PRESENT_MODE_IMMEDIATE_KHR", VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR = 1] = "VK_PRESENT_MODE_MAILBOX_KHR", VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR = 2] = "VK_PRESENT_MODE_FIFO_KHR", VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3] = "VK_PRESENT_MODE_FIFO_RELAXED_KHR", VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000] = "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR", VkPresentModeKHR[VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001] = "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
}(VkPresentModeKHR || (VkPresentModeKHR = {}));
export var VkColorSpaceKHR;
!function(VkColorSpaceKHR) {
    VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0] = "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0] = "VK_COLORSPACE_SRGB_NONLINEAR_KHR", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001] = "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002] = "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003] = "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004] = "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005] = "VK_COLOR_SPACE_BT709_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006] = "VK_COLOR_SPACE_BT709_NONLINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007] = "VK_COLOR_SPACE_BT2020_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008] = "VK_COLOR_SPACE_HDR10_ST2084_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009] = "VK_COLOR_SPACE_DOLBYVISION_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010] = "VK_COLOR_SPACE_HDR10_HLG_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011] = "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012] = "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013] = "VK_COLOR_SPACE_PASS_THROUGH_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014] = "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003] = "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT", VkColorSpaceKHR[VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000] = "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD";
}(VkColorSpaceKHR || (VkColorSpaceKHR = {}));
export var VkDisplayPlaneAlphaFlagBitsKHR;
!function(VkDisplayPlaneAlphaFlagBitsKHR) {
    VkDisplayPlaneAlphaFlagBitsKHR[VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1] = "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR", VkDisplayPlaneAlphaFlagBitsKHR[VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2] = "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR", VkDisplayPlaneAlphaFlagBitsKHR[VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4] = "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR", VkDisplayPlaneAlphaFlagBitsKHR[VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8] = "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR";
}(VkDisplayPlaneAlphaFlagBitsKHR || (VkDisplayPlaneAlphaFlagBitsKHR = {}));
export var VkCompositeAlphaFlagBitsKHR;
!function(VkCompositeAlphaFlagBitsKHR) {
    VkCompositeAlphaFlagBitsKHR[VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1] = "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR", VkCompositeAlphaFlagBitsKHR[VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2] = "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR", VkCompositeAlphaFlagBitsKHR[VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4] = "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR", VkCompositeAlphaFlagBitsKHR[VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8] = "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR";
}(VkCompositeAlphaFlagBitsKHR || (VkCompositeAlphaFlagBitsKHR = {}));
export var VkSurfaceTransformFlagBitsKHR;
!function(VkSurfaceTransformFlagBitsKHR) {
    VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1] = "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2] = "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4] = "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8] = "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16] = "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32] = "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64] = "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128] = "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR", VkSurfaceTransformFlagBitsKHR[VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256] = "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR";
}(VkSurfaceTransformFlagBitsKHR || (VkSurfaceTransformFlagBitsKHR = {}));
export var VkSwapchainImageUsageFlagBitsANDROID;
!function(VkSwapchainImageUsageFlagBitsANDROID) {
    VkSwapchainImageUsageFlagBitsANDROID[VkSwapchainImageUsageFlagBitsANDROID.VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 1] = "VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID";
}(VkSwapchainImageUsageFlagBitsANDROID || (VkSwapchainImageUsageFlagBitsANDROID = {}));
export var VkTimeDomainEXT;
!function(VkTimeDomainEXT) {
    VkTimeDomainEXT[VkTimeDomainEXT.VK_TIME_DOMAIN_DEVICE_EXT = 0] = "VK_TIME_DOMAIN_DEVICE_EXT", VkTimeDomainEXT[VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1] = "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT", VkTimeDomainEXT[VkTimeDomainEXT.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2] = "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT", VkTimeDomainEXT[VkTimeDomainEXT.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3] = "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT";
}(VkTimeDomainEXT || (VkTimeDomainEXT = {}));
export var VkDebugReportFlagBitsEXT;
!function(VkDebugReportFlagBitsEXT) {
    VkDebugReportFlagBitsEXT[VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1] = "VK_DEBUG_REPORT_INFORMATION_BIT_EXT", VkDebugReportFlagBitsEXT[VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT = 2] = "VK_DEBUG_REPORT_WARNING_BIT_EXT", VkDebugReportFlagBitsEXT[VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4] = "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT", VkDebugReportFlagBitsEXT[VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT = 8] = "VK_DEBUG_REPORT_ERROR_BIT_EXT", VkDebugReportFlagBitsEXT[VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16] = "VK_DEBUG_REPORT_DEBUG_BIT_EXT";
}(VkDebugReportFlagBitsEXT || (VkDebugReportFlagBitsEXT = {}));
export var VkDebugReportObjectTypeEXT;
!function(VkDebugReportObjectTypeEXT) {
    VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0] = "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1] = "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2] = "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3] = "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4] = "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5] = "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6] = "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7] = "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8] = "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9] = "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10] = "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11] = "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12] = "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13] = "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14] = "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15] = "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16] = "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17] = "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18] = "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19] = "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20] = "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21] = "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22] = "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23] = "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24] = "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25] = "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26] = "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27] = "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28] = "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28] = "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29] = "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30] = "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33] = "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33] = "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000] = "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000] = "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000] = "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001] = "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000] = "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000] = "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000] = "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000] = "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT", VkDebugReportObjectTypeEXT[VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000] = "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT";
}(VkDebugReportObjectTypeEXT || (VkDebugReportObjectTypeEXT = {}));
export var VkDeviceMemoryReportEventTypeEXT;
!function(VkDeviceMemoryReportEventTypeEXT) {
    VkDeviceMemoryReportEventTypeEXT[VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0] = "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT", VkDeviceMemoryReportEventTypeEXT[VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1] = "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT", VkDeviceMemoryReportEventTypeEXT[VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2] = "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT", VkDeviceMemoryReportEventTypeEXT[VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3] = "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT", VkDeviceMemoryReportEventTypeEXT[VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4] = "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT";
}(VkDeviceMemoryReportEventTypeEXT || (VkDeviceMemoryReportEventTypeEXT = {}));
export var VkRasterizationOrderAMD;
!function(VkRasterizationOrderAMD) {
    VkRasterizationOrderAMD[VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD = 0] = "VK_RASTERIZATION_ORDER_STRICT_AMD", VkRasterizationOrderAMD[VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD = 1] = "VK_RASTERIZATION_ORDER_RELAXED_AMD";
}(VkRasterizationOrderAMD || (VkRasterizationOrderAMD = {}));
export var VkExternalMemoryHandleTypeFlagBitsNV;
!function(VkExternalMemoryHandleTypeFlagBitsNV) {
    VkExternalMemoryHandleTypeFlagBitsNV[VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV", VkExternalMemoryHandleTypeFlagBitsNV[VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV", VkExternalMemoryHandleTypeFlagBitsNV[VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV", VkExternalMemoryHandleTypeFlagBitsNV[VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV";
}(VkExternalMemoryHandleTypeFlagBitsNV || (VkExternalMemoryHandleTypeFlagBitsNV = {}));
export var VkExternalMemoryFeatureFlagBitsNV;
!function(VkExternalMemoryFeatureFlagBitsNV) {
    VkExternalMemoryFeatureFlagBitsNV[VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1] = "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV", VkExternalMemoryFeatureFlagBitsNV[VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2] = "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV", VkExternalMemoryFeatureFlagBitsNV[VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4] = "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV";
}(VkExternalMemoryFeatureFlagBitsNV || (VkExternalMemoryFeatureFlagBitsNV = {}));
export var VkValidationCheckEXT;
!function(VkValidationCheckEXT) {
    VkValidationCheckEXT[VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT = 0] = "VK_VALIDATION_CHECK_ALL_EXT", VkValidationCheckEXT[VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT = 1] = "VK_VALIDATION_CHECK_SHADERS_EXT";
}(VkValidationCheckEXT || (VkValidationCheckEXT = {}));
export var VkValidationFeatureEnableEXT;
!function(VkValidationFeatureEnableEXT) {
    VkValidationFeatureEnableEXT[VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0] = "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT", VkValidationFeatureEnableEXT[VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1] = "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT", VkValidationFeatureEnableEXT[VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2] = "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT", VkValidationFeatureEnableEXT[VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3] = "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT", VkValidationFeatureEnableEXT[VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4] = "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT";
}(VkValidationFeatureEnableEXT || (VkValidationFeatureEnableEXT = {}));
export var VkValidationFeatureDisableEXT;
!function(VkValidationFeatureDisableEXT) {
    VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0] = "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1] = "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2] = "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3] = "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4] = "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5] = "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6] = "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT", VkValidationFeatureDisableEXT[VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7] = "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT";
}(VkValidationFeatureDisableEXT || (VkValidationFeatureDisableEXT = {}));
export var VkSubgroupFeatureFlagBits;
!function(VkSubgroupFeatureFlagBits) {
    VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT = 1] = "VK_SUBGROUP_FEATURE_BASIC_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT = 2] = "VK_SUBGROUP_FEATURE_VOTE_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4] = "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT = 8] = "VK_SUBGROUP_FEATURE_BALLOT_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16] = "VK_SUBGROUP_FEATURE_SHUFFLE_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32] = "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64] = "VK_SUBGROUP_FEATURE_CLUSTERED_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT = 128] = "VK_SUBGROUP_FEATURE_QUAD_BIT", VkSubgroupFeatureFlagBits[VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256] = "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV";
}(VkSubgroupFeatureFlagBits || (VkSubgroupFeatureFlagBits = {}));
export var VkIndirectCommandsLayoutUsageFlagBitsNV;
!function(VkIndirectCommandsLayoutUsageFlagBitsNV) {
    VkIndirectCommandsLayoutUsageFlagBitsNV[VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1] = "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV", VkIndirectCommandsLayoutUsageFlagBitsNV[VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2] = "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV", VkIndirectCommandsLayoutUsageFlagBitsNV[VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4] = "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV";
}(VkIndirectCommandsLayoutUsageFlagBitsNV || (VkIndirectCommandsLayoutUsageFlagBitsNV = {}));
export var VkIndirectStateFlagBitsNV;
!function(VkIndirectStateFlagBitsNV) {
    VkIndirectStateFlagBitsNV[VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1] = "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV";
}(VkIndirectStateFlagBitsNV || (VkIndirectStateFlagBitsNV = {}));
export var VkIndirectCommandsTokenTypeNV;
!function(VkIndirectCommandsTokenTypeNV) {
    VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV", VkIndirectCommandsTokenTypeNV[VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000] = "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV";
}(VkIndirectCommandsTokenTypeNV || (VkIndirectCommandsTokenTypeNV = {}));
export var VkPrivateDataSlotCreateFlagBits;
VkPrivateDataSlotCreateFlagBits || (VkPrivateDataSlotCreateFlagBits = {});
export var VkDescriptorSetLayoutCreateFlagBits;
!function(VkDescriptorSetLayoutCreateFlagBits) {
    VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_RESERVED_3_BIT_AMD = 8] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_RESERVED_3_BIT_AMD", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE", VkDescriptorSetLayoutCreateFlagBits[VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4] = "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT";
}(VkDescriptorSetLayoutCreateFlagBits || (VkDescriptorSetLayoutCreateFlagBits = {}));
export var VkExternalMemoryHandleTypeFlagBits;
!function(VkExternalMemoryHandleTypeFlagBits) {
    VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV", VkExternalMemoryHandleTypeFlagBits[VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_13_BIT_NV = 8192] = "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_13_BIT_NV";
}(VkExternalMemoryHandleTypeFlagBits || (VkExternalMemoryHandleTypeFlagBits = {}));
export var VkExternalMemoryFeatureFlagBits;
!function(VkExternalMemoryFeatureFlagBits) {
    VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1] = "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT", VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2] = "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT", VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4] = "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT", VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1] = "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR", VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2] = "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR", VkExternalMemoryFeatureFlagBits[VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4] = "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR";
}(VkExternalMemoryFeatureFlagBits || (VkExternalMemoryFeatureFlagBits = {}));
export var VkExternalSemaphoreHandleTypeFlagBits;
!function(VkExternalSemaphoreHandleTypeFlagBits) {
    VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA", VkExternalSemaphoreHandleTypeFlagBits[VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32] = "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV";
}(VkExternalSemaphoreHandleTypeFlagBits || (VkExternalSemaphoreHandleTypeFlagBits = {}));
export var VkExternalSemaphoreFeatureFlagBits;
!function(VkExternalSemaphoreFeatureFlagBits) {
    VkExternalSemaphoreFeatureFlagBits[VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1] = "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT", VkExternalSemaphoreFeatureFlagBits[VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2] = "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT", VkExternalSemaphoreFeatureFlagBits[VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1] = "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR", VkExternalSemaphoreFeatureFlagBits[VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2] = "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR";
}(VkExternalSemaphoreFeatureFlagBits || (VkExternalSemaphoreFeatureFlagBits = {}));
export var VkSemaphoreImportFlagBits;
!function(VkSemaphoreImportFlagBits) {
    VkSemaphoreImportFlagBits[VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1] = "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT", VkSemaphoreImportFlagBits[VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1] = "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR";
}(VkSemaphoreImportFlagBits || (VkSemaphoreImportFlagBits = {}));
export var VkExternalFenceHandleTypeFlagBits;
!function(VkExternalFenceHandleTypeFlagBits) {
    VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV = 16] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV", VkExternalFenceHandleTypeFlagBits[VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV = 32] = "VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV";
}(VkExternalFenceHandleTypeFlagBits || (VkExternalFenceHandleTypeFlagBits = {}));
export var VkExternalFenceFeatureFlagBits;
!function(VkExternalFenceFeatureFlagBits) {
    VkExternalFenceFeatureFlagBits[VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1] = "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT", VkExternalFenceFeatureFlagBits[VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2] = "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT", VkExternalFenceFeatureFlagBits[VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1] = "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR", VkExternalFenceFeatureFlagBits[VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2] = "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR";
}(VkExternalFenceFeatureFlagBits || (VkExternalFenceFeatureFlagBits = {}));
export var VkFenceImportFlagBits;
!function(VkFenceImportFlagBits) {
    VkFenceImportFlagBits[VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT = 1] = "VK_FENCE_IMPORT_TEMPORARY_BIT", VkFenceImportFlagBits[VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1] = "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR";
}(VkFenceImportFlagBits || (VkFenceImportFlagBits = {}));
export var VkSurfaceCounterFlagBitsEXT;
!function(VkSurfaceCounterFlagBitsEXT) {
    VkSurfaceCounterFlagBitsEXT[VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1] = "VK_SURFACE_COUNTER_VBLANK_BIT_EXT", VkSurfaceCounterFlagBitsEXT[VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT = 1] = "VK_SURFACE_COUNTER_VBLANK_EXT";
}(VkSurfaceCounterFlagBitsEXT || (VkSurfaceCounterFlagBitsEXT = {}));
export var VkDisplayPowerStateEXT;
!function(VkDisplayPowerStateEXT) {
    VkDisplayPowerStateEXT[VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT = 0] = "VK_DISPLAY_POWER_STATE_OFF_EXT", VkDisplayPowerStateEXT[VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1] = "VK_DISPLAY_POWER_STATE_SUSPEND_EXT", VkDisplayPowerStateEXT[VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT = 2] = "VK_DISPLAY_POWER_STATE_ON_EXT";
}(VkDisplayPowerStateEXT || (VkDisplayPowerStateEXT = {}));
export var VkDeviceEventTypeEXT;
!function(VkDeviceEventTypeEXT) {
    VkDeviceEventTypeEXT[VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0] = "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT";
}(VkDeviceEventTypeEXT || (VkDeviceEventTypeEXT = {}));
export var VkDisplayEventTypeEXT;
!function(VkDisplayEventTypeEXT) {
    VkDisplayEventTypeEXT[VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0] = "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT";
}(VkDisplayEventTypeEXT || (VkDisplayEventTypeEXT = {}));
export var VkPeerMemoryFeatureFlagBits;
!function(VkPeerMemoryFeatureFlagBits) {
    VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1] = "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2] = "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4] = "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8] = "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1] = "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2] = "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4] = "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR", VkPeerMemoryFeatureFlagBits[VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8] = "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR";
}(VkPeerMemoryFeatureFlagBits || (VkPeerMemoryFeatureFlagBits = {}));
export var VkMemoryAllocateFlagBits;
!function(VkMemoryAllocateFlagBits) {
    VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1] = "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT", VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2] = "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT", VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4] = "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT", VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1] = "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR", VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2] = "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR", VkMemoryAllocateFlagBits[VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4] = "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR";
}(VkMemoryAllocateFlagBits || (VkMemoryAllocateFlagBits = {}));
export var VkDeviceGroupPresentModeFlagBitsKHR;
!function(VkDeviceGroupPresentModeFlagBitsKHR) {
    VkDeviceGroupPresentModeFlagBitsKHR[VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1] = "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR", VkDeviceGroupPresentModeFlagBitsKHR[VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2] = "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR", VkDeviceGroupPresentModeFlagBitsKHR[VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4] = "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR", VkDeviceGroupPresentModeFlagBitsKHR[VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8] = "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR";
}(VkDeviceGroupPresentModeFlagBitsKHR || (VkDeviceGroupPresentModeFlagBitsKHR = {}));
export var VkSwapchainCreateFlagBitsKHR;
!function(VkSwapchainCreateFlagBitsKHR) {
    VkSwapchainCreateFlagBitsKHR[VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1] = "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR", VkSwapchainCreateFlagBitsKHR[VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2] = "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR", VkSwapchainCreateFlagBitsKHR[VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4] = "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR", VkSwapchainCreateFlagBitsKHR[VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT = 16] = "VK_SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT", VkSwapchainCreateFlagBitsKHR[VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_RESERVED_3_BIT_SEC = 8] = "VK_SWAPCHAIN_CREATE_RESERVED_3_BIT_SEC";
}(VkSwapchainCreateFlagBitsKHR || (VkSwapchainCreateFlagBitsKHR = {}));
export var VkViewportCoordinateSwizzleNV;
!function(VkViewportCoordinateSwizzleNV) {
    VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0] = "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1] = "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2] = "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3] = "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4] = "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5] = "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6] = "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV", VkViewportCoordinateSwizzleNV[VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7] = "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV";
}(VkViewportCoordinateSwizzleNV || (VkViewportCoordinateSwizzleNV = {}));
export var VkDiscardRectangleModeEXT;
!function(VkDiscardRectangleModeEXT) {
    VkDiscardRectangleModeEXT[VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0] = "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT", VkDiscardRectangleModeEXT[VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1] = "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT";
}(VkDiscardRectangleModeEXT || (VkDiscardRectangleModeEXT = {}));
export var VkSubpassDescriptionFlagBits;
!function(VkSubpassDescriptionFlagBits) {
    VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1] = "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2] = "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4] = "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8] = "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64] = "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT", VkSubpassDescriptionFlagBits[VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128] = "VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT";
}(VkSubpassDescriptionFlagBits || (VkSubpassDescriptionFlagBits = {}));
export var VkPointClippingBehavior;
!function(VkPointClippingBehavior) {
    VkPointClippingBehavior[VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0] = "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES", VkPointClippingBehavior[VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1] = "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY", VkPointClippingBehavior[VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0] = "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR", VkPointClippingBehavior[VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1] = "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR";
}(VkPointClippingBehavior || (VkPointClippingBehavior = {}));
export var VkSamplerReductionMode;
!function(VkSamplerReductionMode) {
    VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0] = "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE", VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN = 1] = "VK_SAMPLER_REDUCTION_MODE_MIN", VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX = 2] = "VK_SAMPLER_REDUCTION_MODE_MAX", VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0] = "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT", VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1] = "VK_SAMPLER_REDUCTION_MODE_MIN_EXT", VkSamplerReductionMode[VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2] = "VK_SAMPLER_REDUCTION_MODE_MAX_EXT";
}(VkSamplerReductionMode || (VkSamplerReductionMode = {}));
export var VkTessellationDomainOrigin;
!function(VkTessellationDomainOrigin) {
    VkTessellationDomainOrigin[VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0] = "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT", VkTessellationDomainOrigin[VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1] = "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT", VkTessellationDomainOrigin[VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0] = "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR", VkTessellationDomainOrigin[VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1] = "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR";
}(VkTessellationDomainOrigin || (VkTessellationDomainOrigin = {}));
export var VkSamplerYcbcrModelConversion;
!function(VkSamplerYcbcrModelConversion) {
    VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR", VkSamplerYcbcrModelConversion[VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4] = "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR";
}(VkSamplerYcbcrModelConversion || (VkSamplerYcbcrModelConversion = {}));
export var VkSamplerYcbcrRange;
!function(VkSamplerYcbcrRange) {
    VkSamplerYcbcrRange[VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0] = "VK_SAMPLER_YCBCR_RANGE_ITU_FULL", VkSamplerYcbcrRange[VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1] = "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW", VkSamplerYcbcrRange[VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0] = "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR", VkSamplerYcbcrRange[VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1] = "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR";
}(VkSamplerYcbcrRange || (VkSamplerYcbcrRange = {}));
export var VkChromaLocation;
!function(VkChromaLocation) {
    VkChromaLocation[VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN = 0] = "VK_CHROMA_LOCATION_COSITED_EVEN", VkChromaLocation[VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT = 1] = "VK_CHROMA_LOCATION_MIDPOINT", VkChromaLocation[VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0] = "VK_CHROMA_LOCATION_COSITED_EVEN_KHR", VkChromaLocation[VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR = 1] = "VK_CHROMA_LOCATION_MIDPOINT_KHR";
}(VkChromaLocation || (VkChromaLocation = {}));
export var VkBlendOverlapEXT;
!function(VkBlendOverlapEXT) {
    VkBlendOverlapEXT[VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0] = "VK_BLEND_OVERLAP_UNCORRELATED_EXT", VkBlendOverlapEXT[VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT = 1] = "VK_BLEND_OVERLAP_DISJOINT_EXT", VkBlendOverlapEXT[VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT = 2] = "VK_BLEND_OVERLAP_CONJOINT_EXT";
}(VkBlendOverlapEXT || (VkBlendOverlapEXT = {}));
export var VkCoverageModulationModeNV;
!function(VkCoverageModulationModeNV) {
    VkCoverageModulationModeNV[VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV = 0] = "VK_COVERAGE_MODULATION_MODE_NONE_NV", VkCoverageModulationModeNV[VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV = 1] = "VK_COVERAGE_MODULATION_MODE_RGB_NV", VkCoverageModulationModeNV[VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2] = "VK_COVERAGE_MODULATION_MODE_ALPHA_NV", VkCoverageModulationModeNV[VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3] = "VK_COVERAGE_MODULATION_MODE_RGBA_NV";
}(VkCoverageModulationModeNV || (VkCoverageModulationModeNV = {}));
export var VkCoverageReductionModeNV;
!function(VkCoverageReductionModeNV) {
    VkCoverageReductionModeNV[VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0] = "VK_COVERAGE_REDUCTION_MODE_MERGE_NV", VkCoverageReductionModeNV[VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1] = "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV";
}(VkCoverageReductionModeNV || (VkCoverageReductionModeNV = {}));
export var VkValidationCacheHeaderVersionEXT;
!function(VkValidationCacheHeaderVersionEXT) {
    VkValidationCacheHeaderVersionEXT[VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1] = "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT";
}(VkValidationCacheHeaderVersionEXT || (VkValidationCacheHeaderVersionEXT = {}));
export var VkShaderInfoTypeAMD;
!function(VkShaderInfoTypeAMD) {
    VkShaderInfoTypeAMD[VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0] = "VK_SHADER_INFO_TYPE_STATISTICS_AMD", VkShaderInfoTypeAMD[VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD = 1] = "VK_SHADER_INFO_TYPE_BINARY_AMD", VkShaderInfoTypeAMD[VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2] = "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD";
}(VkShaderInfoTypeAMD || (VkShaderInfoTypeAMD = {}));
export var VkQueueGlobalPriorityKHR;
!function(VkQueueGlobalPriorityKHR) {
    VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128] = "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256] = "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512] = "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024] = "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128] = "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256] = "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512] = "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT", VkQueueGlobalPriorityKHR[VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024] = "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT";
}(VkQueueGlobalPriorityKHR || (VkQueueGlobalPriorityKHR = {}));
export var VkDebugUtilsMessageSeverityFlagBitsEXT;
!function(VkDebugUtilsMessageSeverityFlagBitsEXT) {
    VkDebugUtilsMessageSeverityFlagBitsEXT[VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1] = "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT", VkDebugUtilsMessageSeverityFlagBitsEXT[VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16] = "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT", VkDebugUtilsMessageSeverityFlagBitsEXT[VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256] = "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT", VkDebugUtilsMessageSeverityFlagBitsEXT[VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096] = "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT";
}(VkDebugUtilsMessageSeverityFlagBitsEXT || (VkDebugUtilsMessageSeverityFlagBitsEXT = {}));
export var VkDebugUtilsMessageTypeFlagBitsEXT;
!function(VkDebugUtilsMessageTypeFlagBitsEXT) {
    VkDebugUtilsMessageTypeFlagBitsEXT[VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1] = "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT", VkDebugUtilsMessageTypeFlagBitsEXT[VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2] = "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT", VkDebugUtilsMessageTypeFlagBitsEXT[VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4] = "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT", VkDebugUtilsMessageTypeFlagBitsEXT[VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8] = "VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT";
}(VkDebugUtilsMessageTypeFlagBitsEXT || (VkDebugUtilsMessageTypeFlagBitsEXT = {}));
export var VkConservativeRasterizationModeEXT;
!function(VkConservativeRasterizationModeEXT) {
    VkConservativeRasterizationModeEXT[VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0] = "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT", VkConservativeRasterizationModeEXT[VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1] = "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT", VkConservativeRasterizationModeEXT[VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2] = "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT";
}(VkConservativeRasterizationModeEXT || (VkConservativeRasterizationModeEXT = {}));
export var VkDescriptorBindingFlagBits;
!function(VkDescriptorBindingFlagBits) {
    VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1] = "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2] = "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4] = "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8] = "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1] = "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2] = "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4] = "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8] = "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT", VkDescriptorBindingFlagBits[VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM = 16] = "VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM";
}(VkDescriptorBindingFlagBits || (VkDescriptorBindingFlagBits = {}));
export var VkVendorId;
!function(VkVendorId) {
    VkVendorId[VkVendorId.VK_VENDOR_ID_VIV = 65537] = "VK_VENDOR_ID_VIV", VkVendorId[VkVendorId.VK_VENDOR_ID_VSI = 65538] = "VK_VENDOR_ID_VSI", VkVendorId[VkVendorId.VK_VENDOR_ID_KAZAN = 65539] = "VK_VENDOR_ID_KAZAN", VkVendorId[VkVendorId.VK_VENDOR_ID_CODEPLAY = 65540] = "VK_VENDOR_ID_CODEPLAY", VkVendorId[VkVendorId.VK_VENDOR_ID_MESA = 65541] = "VK_VENDOR_ID_MESA", VkVendorId[VkVendorId.VK_VENDOR_ID_POCL = 65542] = "VK_VENDOR_ID_POCL";
}(VkVendorId || (VkVendorId = {}));
export var VkDriverId;
!function(VkDriverId) {
    VkDriverId[VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY = 1] = "VK_DRIVER_ID_AMD_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE = 2] = "VK_DRIVER_ID_AMD_OPEN_SOURCE", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_RADV = 3] = "VK_DRIVER_ID_MESA_RADV", VkDriverId[VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4] = "VK_DRIVER_ID_NVIDIA_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5] = "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS", VkDriverId[VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6] = "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA", VkDriverId[VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7] = "VK_DRIVER_ID_IMAGINATION_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8] = "VK_DRIVER_ID_QUALCOMM_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY = 9] = "VK_DRIVER_ID_ARM_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10] = "VK_DRIVER_ID_GOOGLE_SWIFTSHADER", VkDriverId[VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY = 11] = "VK_DRIVER_ID_GGP_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12] = "VK_DRIVER_ID_BROADCOM_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_LLVMPIPE = 13] = "VK_DRIVER_ID_MESA_LLVMPIPE", VkDriverId[VkDriverId.VK_DRIVER_ID_MOLTENVK = 14] = "VK_DRIVER_ID_MOLTENVK", VkDriverId[VkDriverId.VK_DRIVER_ID_COREAVI_PROPRIETARY = 15] = "VK_DRIVER_ID_COREAVI_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_JUICE_PROPRIETARY = 16] = "VK_DRIVER_ID_JUICE_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17] = "VK_DRIVER_ID_VERISILICON_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_TURNIP = 18] = "VK_DRIVER_ID_MESA_TURNIP", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_V3DV = 19] = "VK_DRIVER_ID_MESA_V3DV", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_PANVK = 20] = "VK_DRIVER_ID_MESA_PANVK", VkDriverId[VkDriverId.VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21] = "VK_DRIVER_ID_SAMSUNG_PROPRIETARY", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_VENUS = 22] = "VK_DRIVER_ID_MESA_VENUS", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_DOZEN = 23] = "VK_DRIVER_ID_MESA_DOZEN", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_NVK = 24] = "VK_DRIVER_ID_MESA_NVK", VkDriverId[VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1] = "VK_DRIVER_ID_AMD_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2] = "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_MESA_RADV_KHR = 3] = "VK_DRIVER_ID_MESA_RADV_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4] = "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5] = "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6] = "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7] = "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8] = "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9] = "VK_DRIVER_ID_ARM_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10] = "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11] = "VK_DRIVER_ID_GGP_PROPRIETARY_KHR", VkDriverId[VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12] = "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR";
}(VkDriverId || (VkDriverId = {}));
export var VkConditionalRenderingFlagBitsEXT;
!function(VkConditionalRenderingFlagBitsEXT) {
    VkConditionalRenderingFlagBitsEXT[VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1] = "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT";
}(VkConditionalRenderingFlagBitsEXT || (VkConditionalRenderingFlagBitsEXT = {}));
export var VkResolveModeFlagBits;
!function(VkResolveModeFlagBits) {
    VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE = 0] = "VK_RESOLVE_MODE_NONE", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1] = "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT = 2] = "VK_RESOLVE_MODE_AVERAGE_BIT", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT = 4] = "VK_RESOLVE_MODE_MIN_BIT", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT = 8] = "VK_RESOLVE_MODE_MAX_BIT", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE_KHR = 0] = "VK_RESOLVE_MODE_NONE_KHR", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1] = "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2] = "VK_RESOLVE_MODE_AVERAGE_BIT_KHR", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT_KHR = 4] = "VK_RESOLVE_MODE_MIN_BIT_KHR", VkResolveModeFlagBits[VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT_KHR = 8] = "VK_RESOLVE_MODE_MAX_BIT_KHR";
}(VkResolveModeFlagBits || (VkResolveModeFlagBits = {}));
export var VkShadingRatePaletteEntryNV;
!function(VkShadingRatePaletteEntryNV) {
    VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0] = "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1] = "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2] = "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3] = "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4] = "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV", VkShadingRatePaletteEntryNV[VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11] = "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV";
}(VkShadingRatePaletteEntryNV || (VkShadingRatePaletteEntryNV = {}));
export var VkCoarseSampleOrderTypeNV;
!function(VkCoarseSampleOrderTypeNV) {
    VkCoarseSampleOrderTypeNV[VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0] = "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV", VkCoarseSampleOrderTypeNV[VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1] = "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV", VkCoarseSampleOrderTypeNV[VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2] = "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV", VkCoarseSampleOrderTypeNV[VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3] = "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV";
}(VkCoarseSampleOrderTypeNV || (VkCoarseSampleOrderTypeNV = {}));
export var VkGeometryInstanceFlagBitsKHR;
!function(VkGeometryInstanceFlagBitsKHR) {
    VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1] = "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2] = "VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4] = "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8] = "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2] = "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1] = "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2] = "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4] = "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8] = "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16] = "VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT", VkGeometryInstanceFlagBitsKHR[VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32] = "VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT";
}(VkGeometryInstanceFlagBitsKHR || (VkGeometryInstanceFlagBitsKHR = {}));
export var VkGeometryFlagBitsKHR;
!function(VkGeometryFlagBitsKHR) {
    VkGeometryFlagBitsKHR[VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_KHR = 1] = "VK_GEOMETRY_OPAQUE_BIT_KHR", VkGeometryFlagBitsKHR[VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2] = "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR", VkGeometryFlagBitsKHR[VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_NV = 1] = "VK_GEOMETRY_OPAQUE_BIT_NV", VkGeometryFlagBitsKHR[VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2] = "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV";
}(VkGeometryFlagBitsKHR || (VkGeometryFlagBitsKHR = {}));
export var VkBuildAccelerationStructureFlagBitsKHR;
!function(VkBuildAccelerationStructureFlagBitsKHR) {
    VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4] = "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8] = "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16] = "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4] = "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8] = "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16] = "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32] = "VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256] = "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_9_NV = 512] = "VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_9_NV", VkBuildAccelerationStructureFlagBitsKHR[VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_10_NV = 1024] = "VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_10_NV";
}(VkBuildAccelerationStructureFlagBitsKHR || (VkBuildAccelerationStructureFlagBitsKHR = {}));
export var VkAccelerationStructureCreateFlagBitsKHR;
!function(VkAccelerationStructureCreateFlagBitsKHR) {
    VkAccelerationStructureCreateFlagBitsKHR[VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1] = "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR", VkAccelerationStructureCreateFlagBitsKHR[VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8] = "VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT", VkAccelerationStructureCreateFlagBitsKHR[VkAccelerationStructureCreateFlagBitsKHR.VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4] = "VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV";
}(VkAccelerationStructureCreateFlagBitsKHR || (VkAccelerationStructureCreateFlagBitsKHR = {}));
export var VkCopyAccelerationStructureModeKHR;
!function(VkCopyAccelerationStructureModeKHR) {
    VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR", VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR", VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR", VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR", VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV", VkCopyAccelerationStructureModeKHR[VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1] = "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV";
}(VkCopyAccelerationStructureModeKHR || (VkCopyAccelerationStructureModeKHR = {}));
export var VkBuildAccelerationStructureModeKHR;
!function(VkBuildAccelerationStructureModeKHR) {
    VkBuildAccelerationStructureModeKHR[VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0] = "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR", VkBuildAccelerationStructureModeKHR[VkBuildAccelerationStructureModeKHR.VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1] = "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR";
}(VkBuildAccelerationStructureModeKHR || (VkBuildAccelerationStructureModeKHR = {}));
export var VkAccelerationStructureTypeKHR;
!function(VkAccelerationStructureTypeKHR) {
    VkAccelerationStructureTypeKHR[VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0] = "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR", VkAccelerationStructureTypeKHR[VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1] = "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR", VkAccelerationStructureTypeKHR[VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2] = "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR", VkAccelerationStructureTypeKHR[VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0] = "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV", VkAccelerationStructureTypeKHR[VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1] = "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV";
}(VkAccelerationStructureTypeKHR || (VkAccelerationStructureTypeKHR = {}));
export var VkGeometryTypeKHR;
!function(VkGeometryTypeKHR) {
    VkGeometryTypeKHR[VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0] = "VK_GEOMETRY_TYPE_TRIANGLES_KHR", VkGeometryTypeKHR[VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_KHR = 1] = "VK_GEOMETRY_TYPE_AABBS_KHR", VkGeometryTypeKHR[VkGeometryTypeKHR.VK_GEOMETRY_TYPE_INSTANCES_KHR = 2] = "VK_GEOMETRY_TYPE_INSTANCES_KHR", VkGeometryTypeKHR[VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_NV = 0] = "VK_GEOMETRY_TYPE_TRIANGLES_NV", VkGeometryTypeKHR[VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_NV = 1] = "VK_GEOMETRY_TYPE_AABBS_NV";
}(VkGeometryTypeKHR || (VkGeometryTypeKHR = {}));
export var VkAccelerationStructureMemoryRequirementsTypeNV;
!function(VkAccelerationStructureMemoryRequirementsTypeNV) {
    VkAccelerationStructureMemoryRequirementsTypeNV[VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0] = "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV", VkAccelerationStructureMemoryRequirementsTypeNV[VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1] = "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV", VkAccelerationStructureMemoryRequirementsTypeNV[VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2] = "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV";
}(VkAccelerationStructureMemoryRequirementsTypeNV || (VkAccelerationStructureMemoryRequirementsTypeNV = {}));
export var VkAccelerationStructureBuildTypeKHR;
!function(VkAccelerationStructureBuildTypeKHR) {
    VkAccelerationStructureBuildTypeKHR[VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0] = "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR", VkAccelerationStructureBuildTypeKHR[VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1] = "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR", VkAccelerationStructureBuildTypeKHR[VkAccelerationStructureBuildTypeKHR.VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2] = "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR";
}(VkAccelerationStructureBuildTypeKHR || (VkAccelerationStructureBuildTypeKHR = {}));
export var VkRayTracingShaderGroupTypeKHR;
!function(VkRayTracingShaderGroupTypeKHR) {
    VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR", VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR", VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR", VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV", VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV", VkRayTracingShaderGroupTypeKHR[VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2] = "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV";
}(VkRayTracingShaderGroupTypeKHR || (VkRayTracingShaderGroupTypeKHR = {}));
export var VkAccelerationStructureCompatibilityKHR;
!function(VkAccelerationStructureCompatibilityKHR) {
    VkAccelerationStructureCompatibilityKHR[VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0] = "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR", VkAccelerationStructureCompatibilityKHR[VkAccelerationStructureCompatibilityKHR.VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1] = "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR";
}(VkAccelerationStructureCompatibilityKHR || (VkAccelerationStructureCompatibilityKHR = {}));
export var VkShaderGroupShaderKHR;
!function(VkShaderGroupShaderKHR) {
    VkShaderGroupShaderKHR[VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0] = "VK_SHADER_GROUP_SHADER_GENERAL_KHR", VkShaderGroupShaderKHR[VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1] = "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR", VkShaderGroupShaderKHR[VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2] = "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR", VkShaderGroupShaderKHR[VkShaderGroupShaderKHR.VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3] = "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR";
}(VkShaderGroupShaderKHR || (VkShaderGroupShaderKHR = {}));
export var VkMemoryOverallocationBehaviorAMD;
!function(VkMemoryOverallocationBehaviorAMD) {
    VkMemoryOverallocationBehaviorAMD[VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0] = "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD", VkMemoryOverallocationBehaviorAMD[VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1] = "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD", VkMemoryOverallocationBehaviorAMD[VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2] = "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD";
}(VkMemoryOverallocationBehaviorAMD || (VkMemoryOverallocationBehaviorAMD = {}));
export var VkFramebufferCreateFlagBits;
!function(VkFramebufferCreateFlagBits) {
    VkFramebufferCreateFlagBits[VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1] = "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT", VkFramebufferCreateFlagBits[VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1] = "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR";
}(VkFramebufferCreateFlagBits || (VkFramebufferCreateFlagBits = {}));
export var VkScopeNV;
!function(VkScopeNV) {
    VkScopeNV[VkScopeNV.VK_SCOPE_DEVICE_NV = 1] = "VK_SCOPE_DEVICE_NV", VkScopeNV[VkScopeNV.VK_SCOPE_WORKGROUP_NV = 2] = "VK_SCOPE_WORKGROUP_NV", VkScopeNV[VkScopeNV.VK_SCOPE_SUBGROUP_NV = 3] = "VK_SCOPE_SUBGROUP_NV", VkScopeNV[VkScopeNV.VK_SCOPE_QUEUE_FAMILY_NV = 5] = "VK_SCOPE_QUEUE_FAMILY_NV";
}(VkScopeNV || (VkScopeNV = {}));
export var VkComponentTypeNV;
!function(VkComponentTypeNV) {
    VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT16_NV = 0] = "VK_COMPONENT_TYPE_FLOAT16_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT32_NV = 1] = "VK_COMPONENT_TYPE_FLOAT32_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_FLOAT64_NV = 2] = "VK_COMPONENT_TYPE_FLOAT64_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_SINT8_NV = 3] = "VK_COMPONENT_TYPE_SINT8_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_SINT16_NV = 4] = "VK_COMPONENT_TYPE_SINT16_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_SINT32_NV = 5] = "VK_COMPONENT_TYPE_SINT32_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_SINT64_NV = 6] = "VK_COMPONENT_TYPE_SINT64_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_UINT8_NV = 7] = "VK_COMPONENT_TYPE_UINT8_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_UINT16_NV = 8] = "VK_COMPONENT_TYPE_UINT16_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_UINT32_NV = 9] = "VK_COMPONENT_TYPE_UINT32_NV", VkComponentTypeNV[VkComponentTypeNV.VK_COMPONENT_TYPE_UINT64_NV = 10] = "VK_COMPONENT_TYPE_UINT64_NV";
}(VkComponentTypeNV || (VkComponentTypeNV = {}));
export var VkDeviceDiagnosticsConfigFlagBitsNV;
!function(VkDeviceDiagnosticsConfigFlagBitsNV) {
    VkDeviceDiagnosticsConfigFlagBitsNV[VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1] = "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV", VkDeviceDiagnosticsConfigFlagBitsNV[VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2] = "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV", VkDeviceDiagnosticsConfigFlagBitsNV[VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4] = "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV", VkDeviceDiagnosticsConfigFlagBitsNV[VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8] = "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV";
}(VkDeviceDiagnosticsConfigFlagBitsNV || (VkDeviceDiagnosticsConfigFlagBitsNV = {}));
export var VkPipelineCreationFeedbackFlagBits;
!function(VkPipelineCreationFeedbackFlagBits) {
    VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1] = "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT", VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1] = "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT", VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2] = "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT", VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2] = "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT", VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4] = "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT", VkPipelineCreationFeedbackFlagBits[VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4] = "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT";
}(VkPipelineCreationFeedbackFlagBits || (VkPipelineCreationFeedbackFlagBits = {}));
export var VkFullScreenExclusiveEXT;
!function(VkFullScreenExclusiveEXT) {
    VkFullScreenExclusiveEXT[VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0] = "VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT", VkFullScreenExclusiveEXT[VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1] = "VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT", VkFullScreenExclusiveEXT[VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2] = "VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT", VkFullScreenExclusiveEXT[VkFullScreenExclusiveEXT.VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3] = "VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT";
}(VkFullScreenExclusiveEXT || (VkFullScreenExclusiveEXT = {}));
export var VkPerformanceCounterScopeKHR;
!function(VkPerformanceCounterScopeKHR) {
    VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0] = "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR", VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1] = "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR", VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2] = "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR", VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0] = "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR", VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_RENDER_PASS_KHR = 1] = "VK_QUERY_SCOPE_RENDER_PASS_KHR", VkPerformanceCounterScopeKHR[VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_KHR = 2] = "VK_QUERY_SCOPE_COMMAND_KHR";
}(VkPerformanceCounterScopeKHR || (VkPerformanceCounterScopeKHR = {}));
export var VkMemoryDecompressionMethodFlagBitsNV;
!function(VkMemoryDecompressionMethodFlagBitsNV) {
    VkMemoryDecompressionMethodFlagBitsNV[VkMemoryDecompressionMethodFlagBitsNV.VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV = 1] = "VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV";
}(VkMemoryDecompressionMethodFlagBitsNV || (VkMemoryDecompressionMethodFlagBitsNV = {}));
export var VkPerformanceCounterUnitKHR;
!function(VkPerformanceCounterUnitKHR) {
    VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0] = "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1] = "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2] = "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3] = "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4] = "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5] = "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6] = "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7] = "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8] = "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9] = "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR", VkPerformanceCounterUnitKHR[VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10] = "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR";
}(VkPerformanceCounterUnitKHR || (VkPerformanceCounterUnitKHR = {}));
export var VkPerformanceCounterStorageKHR;
!function(VkPerformanceCounterStorageKHR) {
    VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0] = "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR", VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1] = "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR", VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2] = "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR", VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3] = "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR", VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4] = "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR", VkPerformanceCounterStorageKHR[VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5] = "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR";
}(VkPerformanceCounterStorageKHR || (VkPerformanceCounterStorageKHR = {}));
export var VkPerformanceCounterDescriptionFlagBitsKHR;
!function(VkPerformanceCounterDescriptionFlagBitsKHR) {
    VkPerformanceCounterDescriptionFlagBitsKHR[VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1] = "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR", VkPerformanceCounterDescriptionFlagBitsKHR[VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1] = "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR", VkPerformanceCounterDescriptionFlagBitsKHR[VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2] = "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR", VkPerformanceCounterDescriptionFlagBitsKHR[VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2] = "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR";
}(VkPerformanceCounterDescriptionFlagBitsKHR || (VkPerformanceCounterDescriptionFlagBitsKHR = {}));
export var VkAcquireProfilingLockFlagBitsKHR;
VkAcquireProfilingLockFlagBitsKHR || (VkAcquireProfilingLockFlagBitsKHR = {});
export var VkShaderCorePropertiesFlagBitsAMD;
VkShaderCorePropertiesFlagBitsAMD || (VkShaderCorePropertiesFlagBitsAMD = {});
export var VkPerformanceConfigurationTypeINTEL;
!function(VkPerformanceConfigurationTypeINTEL) {
    VkPerformanceConfigurationTypeINTEL[VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0] = "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL";
}(VkPerformanceConfigurationTypeINTEL || (VkPerformanceConfigurationTypeINTEL = {}));
export var VkQueryPoolSamplingModeINTEL;
!function(VkQueryPoolSamplingModeINTEL) {
    VkQueryPoolSamplingModeINTEL[VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0] = "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL";
}(VkQueryPoolSamplingModeINTEL || (VkQueryPoolSamplingModeINTEL = {}));
export var VkPerformanceOverrideTypeINTEL;
!function(VkPerformanceOverrideTypeINTEL) {
    VkPerformanceOverrideTypeINTEL[VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0] = "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL", VkPerformanceOverrideTypeINTEL[VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1] = "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL";
}(VkPerformanceOverrideTypeINTEL || (VkPerformanceOverrideTypeINTEL = {}));
export var VkPerformanceParameterTypeINTEL;
!function(VkPerformanceParameterTypeINTEL) {
    VkPerformanceParameterTypeINTEL[VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0] = "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL", VkPerformanceParameterTypeINTEL[VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1] = "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL";
}(VkPerformanceParameterTypeINTEL || (VkPerformanceParameterTypeINTEL = {}));
export var VkPerformanceValueTypeINTEL;
!function(VkPerformanceValueTypeINTEL) {
    VkPerformanceValueTypeINTEL[VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0] = "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL", VkPerformanceValueTypeINTEL[VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1] = "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL", VkPerformanceValueTypeINTEL[VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2] = "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL", VkPerformanceValueTypeINTEL[VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3] = "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL", VkPerformanceValueTypeINTEL[VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4] = "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL";
}(VkPerformanceValueTypeINTEL || (VkPerformanceValueTypeINTEL = {}));
export var VkShaderFloatControlsIndependence;
!function(VkShaderFloatControlsIndependence) {
    VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY", VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL", VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE", VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR", VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR", VkShaderFloatControlsIndependence[VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2] = "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR";
}(VkShaderFloatControlsIndependence || (VkShaderFloatControlsIndependence = {}));
export var VkPipelineExecutableStatisticFormatKHR;
!function(VkPipelineExecutableStatisticFormatKHR) {
    VkPipelineExecutableStatisticFormatKHR[VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0] = "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR", VkPipelineExecutableStatisticFormatKHR[VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1] = "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR", VkPipelineExecutableStatisticFormatKHR[VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2] = "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR", VkPipelineExecutableStatisticFormatKHR[VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3] = "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR";
}(VkPipelineExecutableStatisticFormatKHR || (VkPipelineExecutableStatisticFormatKHR = {}));
export var VkLineRasterizationModeEXT;
!function(VkLineRasterizationModeEXT) {
    VkLineRasterizationModeEXT[VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0] = "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT", VkLineRasterizationModeEXT[VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1] = "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT", VkLineRasterizationModeEXT[VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2] = "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT", VkLineRasterizationModeEXT[VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3] = "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT";
}(VkLineRasterizationModeEXT || (VkLineRasterizationModeEXT = {}));
export var VkShaderModuleCreateFlagBits;
VkShaderModuleCreateFlagBits || (VkShaderModuleCreateFlagBits = {});
export var VkPipelineCompilerControlFlagBitsAMD;
VkPipelineCompilerControlFlagBitsAMD || (VkPipelineCompilerControlFlagBitsAMD = {});
export var VkToolPurposeFlagBits;
!function(VkToolPurposeFlagBits) {
    VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT = 1] = "VK_TOOL_PURPOSE_VALIDATION_BIT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1] = "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT = 2] = "VK_TOOL_PURPOSE_PROFILING_BIT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2] = "VK_TOOL_PURPOSE_PROFILING_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT = 4] = "VK_TOOL_PURPOSE_TRACING_BIT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4] = "VK_TOOL_PURPOSE_TRACING_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8] = "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8] = "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16] = "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16] = "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32] = "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT", VkToolPurposeFlagBits[VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64] = "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT";
}(VkToolPurposeFlagBits || (VkToolPurposeFlagBits = {}));
export var VkFragmentShadingRateCombinerOpKHR;
!function(VkFragmentShadingRateCombinerOpKHR) {
    VkFragmentShadingRateCombinerOpKHR[VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0] = "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR", VkFragmentShadingRateCombinerOpKHR[VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1] = "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR", VkFragmentShadingRateCombinerOpKHR[VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2] = "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR", VkFragmentShadingRateCombinerOpKHR[VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3] = "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR", VkFragmentShadingRateCombinerOpKHR[VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4] = "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR";
}(VkFragmentShadingRateCombinerOpKHR || (VkFragmentShadingRateCombinerOpKHR = {}));
export var VkFragmentShadingRateNV;
!function(VkFragmentShadingRateNV) {
    VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10] = "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11] = "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12] = "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13] = "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14] = "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV", VkFragmentShadingRateNV[VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15] = "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV";
}(VkFragmentShadingRateNV || (VkFragmentShadingRateNV = {}));
export var VkFragmentShadingRateTypeNV;
!function(VkFragmentShadingRateTypeNV) {
    VkFragmentShadingRateTypeNV[VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0] = "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV", VkFragmentShadingRateTypeNV[VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1] = "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV";
}(VkFragmentShadingRateTypeNV || (VkFragmentShadingRateTypeNV = {}));
export var VkSubpassMergeStatusEXT;
!function(VkSubpassMergeStatusEXT) {
    VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0] = "VK_SUBPASS_MERGE_STATUS_MERGED_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1] = "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT", VkSubpassMergeStatusEXT[VkSubpassMergeStatusEXT.VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13] = "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT";
}(VkSubpassMergeStatusEXT || (VkSubpassMergeStatusEXT = {}));
export var VkAccessFlagBits2;
!function(VkAccessFlagBits2) {
    VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_NONE = 0] = "VK_ACCESS_2_NONE", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_NONE_KHR = 0] = "VK_ACCESS_2_NONE_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT = 1] = "VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR = 1] = "VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INDEX_READ_BIT = 2] = "VK_ACCESS_2_INDEX_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INDEX_READ_BIT_KHR = 2] = "VK_ACCESS_2_INDEX_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT = 4] = "VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR = 4] = "VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_UNIFORM_READ_BIT = 8] = "VK_ACCESS_2_UNIFORM_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_UNIFORM_READ_BIT_KHR = 8] = "VK_ACCESS_2_UNIFORM_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT = 16] = "VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR = 16] = "VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_READ_BIT = 32] = "VK_ACCESS_2_SHADER_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_READ_BIT_KHR = 32] = "VK_ACCESS_2_SHADER_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_WRITE_BIT = 64] = "VK_ACCESS_2_SHADER_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_WRITE_BIT_KHR = 64] = "VK_ACCESS_2_SHADER_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT = 128] = "VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR = 128] = "VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT = 256] = "VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR = 256] = "VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512] = "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR = 512] = "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024] = "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR = 1024] = "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_READ_BIT = 2048] = "VK_ACCESS_2_TRANSFER_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_READ_BIT_KHR = 2048] = "VK_ACCESS_2_TRANSFER_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_WRITE_BIT = 4096] = "VK_ACCESS_2_TRANSFER_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR = 4096] = "VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_HOST_READ_BIT = 8192] = "VK_ACCESS_2_HOST_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_HOST_READ_BIT_KHR = 8192] = "VK_ACCESS_2_HOST_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_HOST_WRITE_BIT = 16384] = "VK_ACCESS_2_HOST_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_HOST_WRITE_BIT_KHR = 16384] = "VK_ACCESS_2_HOST_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MEMORY_READ_BIT = 32768] = "VK_ACCESS_2_MEMORY_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MEMORY_READ_BIT_KHR = 32768] = "VK_ACCESS_2_MEMORY_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MEMORY_WRITE_BIT = 65536] = "VK_ACCESS_2_MEMORY_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MEMORY_WRITE_BIT_KHR = 65536] = "VK_ACCESS_2_MEMORY_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_SAMPLED_READ_BIT = 4294967296] = "VK_ACCESS_2_SHADER_SAMPLED_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR = 4294967296] = "VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_READ_BIT = 8589934592] = "VK_ACCESS_2_SHADER_STORAGE_READ_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR = 8589934592] = "VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT = 17179869184] = "VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR = 17179869184] = "VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR = 34359738368] = "VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR = 68719476736] = "VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_RESERVED_46_BIT_EXT = 70368744177664] = "VK_ACCESS_2_RESERVED_46_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR = 137438953472] = "VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR = 274877906944] = "VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432] = "VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864] = "VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728] = "VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576] = "VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV = 131072] = "VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144] = "VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608] = "VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608] = "VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152] = "VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304] = "VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV = 2097152] = "VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV = 4194304] = "VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216] = "VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288] = "VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT = 2199023255552] = "VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI = 549755813888] = "VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR = 1099511627776] = "VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MICROMAP_READ_BIT_EXT = 17592186044416] = "VK_ACCESS_2_MICROMAP_READ_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT = 35184372088832] = "VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV = 4398046511104] = "VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV", VkAccessFlagBits2[VkAccessFlagBits2.VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV = 8796093022208] = "VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV";
}(VkAccessFlagBits2 || (VkAccessFlagBits2 = {}));
export var VkPipelineStageFlagBits2;
!function(VkPipelineStageFlagBits2) {
    VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_NONE = 0] = "VK_PIPELINE_STAGE_2_NONE", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_NONE_KHR = 0] = "VK_PIPELINE_STAGE_2_NONE_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT = 1] = "VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR = 1] = "VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT = 2] = "VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR = 2] = "VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT = 4] = "VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR = 4] = "VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT = 8] = "VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR = 8] = "VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT = 16] = "VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR = 16] = "VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT = 32] = "VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR = 32] = "VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT = 64] = "VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR = 64] = "VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT = 128] = "VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR = 128] = "VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT = 256] = "VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR = 256] = "VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT = 512] = "VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR = 512] = "VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT = 1024] = "VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR = 1024] = "VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT = 2048] = "VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR = 2048] = "VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT = 4096] = "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR = 4096] = "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFER_BIT = 4096] = "VK_PIPELINE_STAGE_2_TRANSFER_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR = 4096] = "VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT = 8192] = "VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR = 8192] = "VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_HOST_BIT = 16384] = "VK_PIPELINE_STAGE_2_HOST_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_HOST_BIT_KHR = 16384] = "VK_PIPELINE_STAGE_2_HOST_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT = 32768] = "VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR = 32768] = "VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT = 65536] = "VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR = 65536] = "VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COPY_BIT = 4294967296] = "VK_PIPELINE_STAGE_2_COPY_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COPY_BIT_KHR = 4294967296] = "VK_PIPELINE_STAGE_2_COPY_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RESOLVE_BIT = 8589934592] = "VK_PIPELINE_STAGE_2_RESOLVE_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR = 8589934592] = "VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BLIT_BIT = 17179869184] = "VK_PIPELINE_STAGE_2_BLIT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_BLIT_BIT_KHR = 17179869184] = "VK_PIPELINE_STAGE_2_BLIT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CLEAR_BIT = 34359738368] = "VK_PIPELINE_STAGE_2_CLEAR_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR = 34359738368] = "VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT = 68719476736] = "VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR = 68719476736] = "VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT = 137438953472] = "VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR = 137438953472] = "VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT = 274877906944] = "VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR = 274877906944] = "VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR = 67108864] = "VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR = 134217728] = "VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT = 16777216] = "VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT = 262144] = "VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV = 131072] = "VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304] = "VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV = 4194304] = "VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432] = "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR = 2097152] = "VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV = 2097152] = "VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV = 33554432] = "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608] = "VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV = 524288] = "VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV = 1048576] = "VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT = 524288] = "VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT = 1048576] = "VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI = 549755813888] = "VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI = 1099511627776] = "VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR = 268435456] = "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT = 1073741824] = "VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_RESEVED_41_BIT_HUAWEI = 2199023255552] = "VK_PIPELINE_STAGE_2_RESEVED_41_BIT_HUAWEI", VkPipelineStageFlagBits2[VkPipelineStageFlagBits2.VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV = 536870912] = "VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV";
}(VkPipelineStageFlagBits2 || (VkPipelineStageFlagBits2 = {}));
export var VkSubmitFlagBits;
!function(VkSubmitFlagBits) {
    VkSubmitFlagBits[VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT = 1] = "VK_SUBMIT_PROTECTED_BIT", VkSubmitFlagBits[VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT_KHR = 1] = "VK_SUBMIT_PROTECTED_BIT_KHR";
}(VkSubmitFlagBits || (VkSubmitFlagBits = {}));
export var VkEventCreateFlagBits;
!function(VkEventCreateFlagBits) {
    VkEventCreateFlagBits[VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1] = "VK_EVENT_CREATE_DEVICE_ONLY_BIT", VkEventCreateFlagBits[VkEventCreateFlagBits.VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = 1] = "VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR";
}(VkEventCreateFlagBits || (VkEventCreateFlagBits = {}));
export var VkPipelineLayoutCreateFlagBits;
!function(VkPipelineLayoutCreateFlagBits) {
    VkPipelineLayoutCreateFlagBits[VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_RESERVED_0_BIT_AMD = 1] = "VK_PIPELINE_LAYOUT_CREATE_RESERVED_0_BIT_AMD", VkPipelineLayoutCreateFlagBits[VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2] = "VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT";
}(VkPipelineLayoutCreateFlagBits || (VkPipelineLayoutCreateFlagBits = {}));
export var VkProvokingVertexModeEXT;
!function(VkProvokingVertexModeEXT) {
    VkProvokingVertexModeEXT[VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0] = "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT", VkProvokingVertexModeEXT[VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1] = "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT";
}(VkProvokingVertexModeEXT || (VkProvokingVertexModeEXT = {}));
export var VkAccelerationStructureMotionInstanceTypeNV;
!function(VkAccelerationStructureMotionInstanceTypeNV) {
    VkAccelerationStructureMotionInstanceTypeNV[VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0] = "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV", VkAccelerationStructureMotionInstanceTypeNV[VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1] = "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV", VkAccelerationStructureMotionInstanceTypeNV[VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2] = "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV";
}(VkAccelerationStructureMotionInstanceTypeNV || (VkAccelerationStructureMotionInstanceTypeNV = {}));
export var VkPipelineColorBlendStateCreateFlagBits;
!function(VkPipelineColorBlendStateCreateFlagBits) {
    VkPipelineColorBlendStateCreateFlagBits[VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1] = "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM", VkPipelineColorBlendStateCreateFlagBits[VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1] = "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT";
}(VkPipelineColorBlendStateCreateFlagBits || (VkPipelineColorBlendStateCreateFlagBits = {}));
export var VkPipelineDepthStencilStateCreateFlagBits;
!function(VkPipelineDepthStencilStateCreateFlagBits) {
    VkPipelineDepthStencilStateCreateFlagBits[VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1] = "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM", VkPipelineDepthStencilStateCreateFlagBits[VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2] = "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM", VkPipelineDepthStencilStateCreateFlagBits[VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1] = "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT", VkPipelineDepthStencilStateCreateFlagBits[VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2] = "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT";
}(VkPipelineDepthStencilStateCreateFlagBits || (VkPipelineDepthStencilStateCreateFlagBits = {}));
export var VkGraphicsPipelineLibraryFlagBitsEXT;
!function(VkGraphicsPipelineLibraryFlagBitsEXT) {
    VkGraphicsPipelineLibraryFlagBitsEXT[VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1] = "VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT", VkGraphicsPipelineLibraryFlagBitsEXT[VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2] = "VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT", VkGraphicsPipelineLibraryFlagBitsEXT[VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4] = "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT", VkGraphicsPipelineLibraryFlagBitsEXT[VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8] = "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT";
}(VkGraphicsPipelineLibraryFlagBitsEXT || (VkGraphicsPipelineLibraryFlagBitsEXT = {}));
export var VkDeviceAddressBindingFlagBitsEXT;
!function(VkDeviceAddressBindingFlagBitsEXT) {
    VkDeviceAddressBindingFlagBitsEXT[VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1] = "VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT";
}(VkDeviceAddressBindingFlagBitsEXT || (VkDeviceAddressBindingFlagBitsEXT = {}));
export var VkDeviceAddressBindingTypeEXT;
!function(VkDeviceAddressBindingTypeEXT) {
    VkDeviceAddressBindingTypeEXT[VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0] = "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT", VkDeviceAddressBindingTypeEXT[VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1] = "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT";
}(VkDeviceAddressBindingTypeEXT || (VkDeviceAddressBindingTypeEXT = {}));
export var VkVideoCodecOperationFlagBitsKHR;
!function(VkVideoCodecOperationFlagBitsKHR) {
    VkVideoCodecOperationFlagBitsKHR[VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0] = "VK_VIDEO_CODEC_OPERATION_NONE_KHR", VkVideoCodecOperationFlagBitsKHR[VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT = 65536] = "VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT", VkVideoCodecOperationFlagBitsKHR[VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT = 131072] = "VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT", VkVideoCodecOperationFlagBitsKHR[VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT = 1] = "VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT", VkVideoCodecOperationFlagBitsKHR[VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT = 2] = "VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT";
}(VkVideoCodecOperationFlagBitsKHR || (VkVideoCodecOperationFlagBitsKHR = {}));
export var VkVideoChromaSubsamplingFlagBitsKHR;
!function(VkVideoChromaSubsamplingFlagBitsKHR) {
    VkVideoChromaSubsamplingFlagBitsKHR[VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0] = "VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR", VkVideoChromaSubsamplingFlagBitsKHR[VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1] = "VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR", VkVideoChromaSubsamplingFlagBitsKHR[VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2] = "VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR", VkVideoChromaSubsamplingFlagBitsKHR[VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4] = "VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR", VkVideoChromaSubsamplingFlagBitsKHR[VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8] = "VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR";
}(VkVideoChromaSubsamplingFlagBitsKHR || (VkVideoChromaSubsamplingFlagBitsKHR = {}));
export var VkVideoComponentBitDepthFlagBitsKHR;
!function(VkVideoComponentBitDepthFlagBitsKHR) {
    VkVideoComponentBitDepthFlagBitsKHR[VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0] = "VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR", VkVideoComponentBitDepthFlagBitsKHR[VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1] = "VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR", VkVideoComponentBitDepthFlagBitsKHR[VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4] = "VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR", VkVideoComponentBitDepthFlagBitsKHR[VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16] = "VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR";
}(VkVideoComponentBitDepthFlagBitsKHR || (VkVideoComponentBitDepthFlagBitsKHR = {}));
export var VkVideoCapabilityFlagBitsKHR;
!function(VkVideoCapabilityFlagBitsKHR) {
    VkVideoCapabilityFlagBitsKHR[VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1] = "VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR", VkVideoCapabilityFlagBitsKHR[VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2] = "VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR";
}(VkVideoCapabilityFlagBitsKHR || (VkVideoCapabilityFlagBitsKHR = {}));
export var VkVideoSessionCreateFlagBitsKHR;
!function(VkVideoSessionCreateFlagBitsKHR) {
    VkVideoSessionCreateFlagBitsKHR[VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1] = "VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR";
}(VkVideoSessionCreateFlagBitsKHR || (VkVideoSessionCreateFlagBitsKHR = {}));
export var VkVideoDecodeH264PictureLayoutFlagBitsEXT;
!function(VkVideoDecodeH264PictureLayoutFlagBitsEXT) {
    VkVideoDecodeH264PictureLayoutFlagBitsEXT[VkVideoDecodeH264PictureLayoutFlagBitsEXT.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_EXT = 0] = "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_EXT", VkVideoDecodeH264PictureLayoutFlagBitsEXT[VkVideoDecodeH264PictureLayoutFlagBitsEXT.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_EXT = 1] = "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_EXT", VkVideoDecodeH264PictureLayoutFlagBitsEXT[VkVideoDecodeH264PictureLayoutFlagBitsEXT.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_EXT = 2] = "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_EXT";
}(VkVideoDecodeH264PictureLayoutFlagBitsEXT || (VkVideoDecodeH264PictureLayoutFlagBitsEXT = {}));
export var VkVideoCodingControlFlagBitsKHR;
!function(VkVideoCodingControlFlagBitsKHR) {
    VkVideoCodingControlFlagBitsKHR[VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1] = "VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR", VkVideoCodingControlFlagBitsKHR[VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2] = "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR", VkVideoCodingControlFlagBitsKHR[VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR = 4] = "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR";
}(VkVideoCodingControlFlagBitsKHR || (VkVideoCodingControlFlagBitsKHR = {}));
export var VkQueryResultStatusKHR;
!function(VkQueryResultStatusKHR) {
    VkQueryResultStatusKHR[VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_ERROR_KHR = -1] = "VK_QUERY_RESULT_STATUS_ERROR_KHR", VkQueryResultStatusKHR[VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0] = "VK_QUERY_RESULT_STATUS_NOT_READY_KHR", VkQueryResultStatusKHR[VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1] = "VK_QUERY_RESULT_STATUS_COMPLETE_KHR";
}(VkQueryResultStatusKHR || (VkQueryResultStatusKHR = {}));
export var VkVideoDecodeUsageFlagBitsKHR;
!function(VkVideoDecodeUsageFlagBitsKHR) {
    VkVideoDecodeUsageFlagBitsKHR[VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0] = "VK_VIDEO_DECODE_USAGE_DEFAULT_KHR", VkVideoDecodeUsageFlagBitsKHR[VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1] = "VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR", VkVideoDecodeUsageFlagBitsKHR[VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2] = "VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR", VkVideoDecodeUsageFlagBitsKHR[VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4] = "VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR";
}(VkVideoDecodeUsageFlagBitsKHR || (VkVideoDecodeUsageFlagBitsKHR = {}));
export var VkVideoDecodeCapabilityFlagBitsKHR;
!function(VkVideoDecodeCapabilityFlagBitsKHR) {
    VkVideoDecodeCapabilityFlagBitsKHR[VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1] = "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR", VkVideoDecodeCapabilityFlagBitsKHR[VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2] = "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR";
}(VkVideoDecodeCapabilityFlagBitsKHR || (VkVideoDecodeCapabilityFlagBitsKHR = {}));
export var VkVideoEncodeUsageFlagBitsKHR;
!function(VkVideoEncodeUsageFlagBitsKHR) {
    VkVideoEncodeUsageFlagBitsKHR[VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0] = "VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR", VkVideoEncodeUsageFlagBitsKHR[VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1] = "VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR", VkVideoEncodeUsageFlagBitsKHR[VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2] = "VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR", VkVideoEncodeUsageFlagBitsKHR[VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4] = "VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR", VkVideoEncodeUsageFlagBitsKHR[VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8] = "VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR";
}(VkVideoEncodeUsageFlagBitsKHR || (VkVideoEncodeUsageFlagBitsKHR = {}));
export var VkVideoEncodeContentFlagBitsKHR;
!function(VkVideoEncodeContentFlagBitsKHR) {
    VkVideoEncodeContentFlagBitsKHR[VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0] = "VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR", VkVideoEncodeContentFlagBitsKHR[VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1] = "VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR", VkVideoEncodeContentFlagBitsKHR[VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2] = "VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR", VkVideoEncodeContentFlagBitsKHR[VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4] = "VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR";
}(VkVideoEncodeContentFlagBitsKHR || (VkVideoEncodeContentFlagBitsKHR = {}));
export var VkVideoEncodeTuningModeKHR;
!function(VkVideoEncodeTuningModeKHR) {
    VkVideoEncodeTuningModeKHR[VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0] = "VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR", VkVideoEncodeTuningModeKHR[VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1] = "VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR", VkVideoEncodeTuningModeKHR[VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2] = "VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR", VkVideoEncodeTuningModeKHR[VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3] = "VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR", VkVideoEncodeTuningModeKHR[VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4] = "VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR";
}(VkVideoEncodeTuningModeKHR || (VkVideoEncodeTuningModeKHR = {}));
export var VkVideoEncodeCapabilityFlagBitsKHR;
!function(VkVideoEncodeCapabilityFlagBitsKHR) {
    VkVideoEncodeCapabilityFlagBitsKHR[VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1] = "VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR";
}(VkVideoEncodeCapabilityFlagBitsKHR || (VkVideoEncodeCapabilityFlagBitsKHR = {}));
export var VkVideoEncodeRateControlModeFlagBitsKHR;
!function(VkVideoEncodeRateControlModeFlagBitsKHR) {
    VkVideoEncodeRateControlModeFlagBitsKHR[VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR = 0] = "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR", VkVideoEncodeRateControlModeFlagBitsKHR[VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 1] = "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR", VkVideoEncodeRateControlModeFlagBitsKHR[VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 2] = "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR";
}(VkVideoEncodeRateControlModeFlagBitsKHR || (VkVideoEncodeRateControlModeFlagBitsKHR = {}));
export var VkVideoEncodeH264CapabilityFlagBitsEXT;
!function(VkVideoEncodeH264CapabilityFlagBitsEXT) {
    VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_ENABLED_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_ENABLED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_DISABLED_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_DISABLED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H264_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_BIT_EXT = 8] = "VK_VIDEO_ENCODE_H264_CAPABILITY_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_SCALING_LISTS_BIT_EXT = 16] = "VK_VIDEO_ENCODE_H264_CAPABILITY_SCALING_LISTS_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 32] = "VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT = 64] = "VK_VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT = 128] = "VK_VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_PIC_INIT_QP_MINUS26_BIT_EXT = 256] = "VK_VIDEO_ENCODE_H264_CAPABILITY_PIC_INIT_QP_MINUS26_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_BIT_EXT = 512] = "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_EXPLICIT_BIT_EXT = 1024] = "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_EXPLICIT_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_IMPLICIT_BIT_EXT = 2048] = "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_IMPLICIT_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT = 4096] = "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT = 8192] = "VK_VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT = 16384] = "VK_VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT = 32768] = "VK_VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT = 65536] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT = 131072] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT = 262144] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DISABLE_DIRECT_SPATIAL_MV_PRED_BIT_EXT = 524288] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DISABLE_DIRECT_SPATIAL_MV_PRED_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT = 1048576] = "VK_VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_SLICE_MB_COUNT_BIT_EXT = 2097152] = "VK_VIDEO_ENCODE_H264_CAPABILITY_SLICE_MB_COUNT_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT = 4194304] = "VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT = 8388608] = "VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT", VkVideoEncodeH264CapabilityFlagBitsEXT[VkVideoEncodeH264CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 16777216] = "VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT";
}(VkVideoEncodeH264CapabilityFlagBitsEXT || (VkVideoEncodeH264CapabilityFlagBitsEXT = {}));
export var VkVideoEncodeH264InputModeFlagBitsEXT;
!function(VkVideoEncodeH264InputModeFlagBitsEXT) {
    VkVideoEncodeH264InputModeFlagBitsEXT[VkVideoEncodeH264InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT", VkVideoEncodeH264InputModeFlagBitsEXT[VkVideoEncodeH264InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT", VkVideoEncodeH264InputModeFlagBitsEXT[VkVideoEncodeH264InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT";
}(VkVideoEncodeH264InputModeFlagBitsEXT || (VkVideoEncodeH264InputModeFlagBitsEXT = {}));
export var VkVideoEncodeH264OutputModeFlagBitsEXT;
!function(VkVideoEncodeH264OutputModeFlagBitsEXT) {
    VkVideoEncodeH264OutputModeFlagBitsEXT[VkVideoEncodeH264OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT", VkVideoEncodeH264OutputModeFlagBitsEXT[VkVideoEncodeH264OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT", VkVideoEncodeH264OutputModeFlagBitsEXT[VkVideoEncodeH264OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT";
}(VkVideoEncodeH264OutputModeFlagBitsEXT || (VkVideoEncodeH264OutputModeFlagBitsEXT = {}));
export var VkVideoEncodeH264RateControlStructureEXT;
!function(VkVideoEncodeH264RateControlStructureEXT) {
    VkVideoEncodeH264RateControlStructureEXT[VkVideoEncodeH264RateControlStructureEXT.VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0] = "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT", VkVideoEncodeH264RateControlStructureEXT[VkVideoEncodeH264RateControlStructureEXT.VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1] = "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT", VkVideoEncodeH264RateControlStructureEXT[VkVideoEncodeH264RateControlStructureEXT.VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2] = "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT";
}(VkVideoEncodeH264RateControlStructureEXT || (VkVideoEncodeH264RateControlStructureEXT = {}));
export var VkImageFormatConstraintsFlagBitsFUCHSIA;
VkImageFormatConstraintsFlagBitsFUCHSIA || (VkImageFormatConstraintsFlagBitsFUCHSIA = {});
export var VkImageConstraintsInfoFlagBitsFUCHSIA;
!function(VkImageConstraintsInfoFlagBitsFUCHSIA) {
    VkImageConstraintsInfoFlagBitsFUCHSIA[VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA = 1] = "VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA", VkImageConstraintsInfoFlagBitsFUCHSIA[VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA = 2] = "VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA", VkImageConstraintsInfoFlagBitsFUCHSIA[VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA = 4] = "VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA", VkImageConstraintsInfoFlagBitsFUCHSIA[VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA = 8] = "VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA", VkImageConstraintsInfoFlagBitsFUCHSIA[VkImageConstraintsInfoFlagBitsFUCHSIA.VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA = 16] = "VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA";
}(VkImageConstraintsInfoFlagBitsFUCHSIA || (VkImageConstraintsInfoFlagBitsFUCHSIA = {}));
export var VkFormatFeatureFlagBits2;
!function(VkFormatFeatureFlagBits2) {
    VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT = 1] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR = 1] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT = 2] = "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR = 2] = "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT = 4] = "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR = 4] = "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT = 8] = "VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR = 8] = "VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT = 16] = "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR = 16] = "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32] = "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR = 32] = "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT = 64] = "VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR = 64] = "VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT = 128] = "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR = 128] = "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT = 256] = "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR = 256] = "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT = 512] = "VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR = 512] = "VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_SRC_BIT = 1024] = "VK_FORMAT_FEATURE_2_BLIT_SRC_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR = 1024] = "VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_DST_BIT = 2048] = "VK_FORMAT_FEATURE_2_BLIT_DST_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR = 2048] = "VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR = 4096] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT = 8192] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT = 16384] = "VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR = 16384] = "VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT = 32768] = "VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR = 32768] = "VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR = 65536] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT = 131072] = "VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = 131072] = "VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = 262144] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = 524288] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = 1048576] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = 2097152] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DISJOINT_BIT = 4194304] = "VK_FORMAT_FEATURE_2_DISJOINT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR = 4194304] = "VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT = 8388608] = "VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR = 8388608] = "VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT = 2147483648] = "VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR = 2147483648] = "VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT = 4294967296] = "VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR = 4294967296] = "VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT = 8589934592] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR = 8589934592] = "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432] = "VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR = 67108864] = "VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912] = "VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216] = "VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824] = "VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_RESERVED_44_BIT_EXT = 17592186044416] = "VK_FORMAT_FEATURE_2_RESERVED_44_BIT_EXT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_RESERVED_45_BIT_EXT = 35184372088832] = "VK_FORMAT_FEATURE_2_RESERVED_45_BIT_EXT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR = 134217728] = "VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR = 268435456] = "VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV = 274877906944] = "VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM = 17179869184] = "VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM = 34359738368] = "VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM = 68719476736] = "VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM = 137438953472] = "VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_RESERVED_39_BIT_EXT = 549755813888] = "VK_FORMAT_FEATURE_2_RESERVED_39_BIT_EXT", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV = 1099511627776] = "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV = 2199023255552] = "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV", VkFormatFeatureFlagBits2[VkFormatFeatureFlagBits2.VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV = 4398046511104] = "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV";
}(VkFormatFeatureFlagBits2 || (VkFormatFeatureFlagBits2 = {}));
export var VkRenderingFlagBits;
!function(VkRenderingFlagBits) {
    VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1] = "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1] = "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT = 2] = "VK_RENDERING_SUSPENDING_BIT", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT_KHR = 2] = "VK_RENDERING_SUSPENDING_BIT_KHR", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT = 4] = "VK_RENDERING_RESUMING_BIT", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT_KHR = 4] = "VK_RENDERING_RESUMING_BIT_KHR", VkRenderingFlagBits[VkRenderingFlagBits.VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8] = "VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT";
}(VkRenderingFlagBits || (VkRenderingFlagBits = {}));
export var VkVideoEncodeH265CapabilityFlagBitsEXT;
!function(VkVideoEncodeH265CapabilityFlagBitsEXT) {
    VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SCALING_LISTS_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SCALING_LISTS_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SAMPLE_ADAPTIVE_OFFSET_ENABLED_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SAMPLE_ADAPTIVE_OFFSET_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_PCM_ENABLE_BIT_EXT = 8] = "VK_VIDEO_ENCODE_H265_CAPABILITY_PCM_ENABLE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SPS_TEMPORAL_MVP_ENABLED_BIT_EXT = 16] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SPS_TEMPORAL_MVP_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT = 32] = "VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_INIT_QP_MINUS26_BIT_EXT = 64] = "VK_VIDEO_ENCODE_H265_CAPABILITY_INIT_QP_MINUS26_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT = 128] = "VK_VIDEO_ENCODE_H265_CAPABILITY_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SIGN_DATA_HIDING_ENABLED_BIT_EXT = 256] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SIGN_DATA_HIDING_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_ENABLED_BIT_EXT = 512] = "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_DISABLED_BIT_EXT = 1024] = "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_DISABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_BIT_EXT = 2048] = "VK_VIDEO_ENCODE_H265_CAPABILITY_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_BIT_EXT = 4096] = "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BIPRED_BIT_EXT = 8192] = "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BIPRED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT = 16384] = "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSQUANT_BYPASS_ENABLED_BIT_EXT = 32768] = "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSQUANT_BYPASS_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_ENTROPY_CODING_SYNC_ENABLED_BIT_EXT = 65536] = "VK_VIDEO_ENCODE_H265_CAPABILITY_ENTROPY_CODING_SYNC_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_OVERRIDE_ENABLED_BIT_EXT = 131072] = "VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_OVERRIDE_ENABLED_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_FRAME_BIT_EXT = 262144] = "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_FRAME_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_TILE_BIT_EXT = 524288] = "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_TILE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_SLICE_BIT_EXT = 1048576] = "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_SLICE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_SLICE_SEGMENT_CTB_COUNT_BIT_EXT = 2097152] = "VK_VIDEO_ENCODE_H265_CAPABILITY_SLICE_SEGMENT_CTB_COUNT_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT = 4194304] = "VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_DEPENDENT_SLICE_SEGMENT_BIT_EXT = 8388608] = "VK_VIDEO_ENCODE_H265_CAPABILITY_DEPENDENT_SLICE_SEGMENT_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT = 16777216] = "VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT", VkVideoEncodeH265CapabilityFlagBitsEXT[VkVideoEncodeH265CapabilityFlagBitsEXT.VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT = 33554432] = "VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT";
}(VkVideoEncodeH265CapabilityFlagBitsEXT || (VkVideoEncodeH265CapabilityFlagBitsEXT = {}));
export var VkVideoEncodeH265InputModeFlagBitsEXT;
!function(VkVideoEncodeH265InputModeFlagBitsEXT) {
    VkVideoEncodeH265InputModeFlagBitsEXT[VkVideoEncodeH265InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_INPUT_MODE_FRAME_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H265_INPUT_MODE_FRAME_BIT_EXT", VkVideoEncodeH265InputModeFlagBitsEXT[VkVideoEncodeH265InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_INPUT_MODE_SLICE_SEGMENT_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H265_INPUT_MODE_SLICE_SEGMENT_BIT_EXT", VkVideoEncodeH265InputModeFlagBitsEXT[VkVideoEncodeH265InputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_INPUT_MODE_NON_VCL_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H265_INPUT_MODE_NON_VCL_BIT_EXT";
}(VkVideoEncodeH265InputModeFlagBitsEXT || (VkVideoEncodeH265InputModeFlagBitsEXT = {}));
export var VkVideoEncodeH265OutputModeFlagBitsEXT;
!function(VkVideoEncodeH265OutputModeFlagBitsEXT) {
    VkVideoEncodeH265OutputModeFlagBitsEXT[VkVideoEncodeH265OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_OUTPUT_MODE_FRAME_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_FRAME_BIT_EXT", VkVideoEncodeH265OutputModeFlagBitsEXT[VkVideoEncodeH265OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_OUTPUT_MODE_SLICE_SEGMENT_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_SLICE_SEGMENT_BIT_EXT", VkVideoEncodeH265OutputModeFlagBitsEXT[VkVideoEncodeH265OutputModeFlagBitsEXT.VK_VIDEO_ENCODE_H265_OUTPUT_MODE_NON_VCL_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_NON_VCL_BIT_EXT";
}(VkVideoEncodeH265OutputModeFlagBitsEXT || (VkVideoEncodeH265OutputModeFlagBitsEXT = {}));
export var VkVideoEncodeH265RateControlStructureEXT;
!function(VkVideoEncodeH265RateControlStructureEXT) {
    VkVideoEncodeH265RateControlStructureEXT[VkVideoEncodeH265RateControlStructureEXT.VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0] = "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT", VkVideoEncodeH265RateControlStructureEXT[VkVideoEncodeH265RateControlStructureEXT.VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1] = "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT", VkVideoEncodeH265RateControlStructureEXT[VkVideoEncodeH265RateControlStructureEXT.VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2] = "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT";
}(VkVideoEncodeH265RateControlStructureEXT || (VkVideoEncodeH265RateControlStructureEXT = {}));
export var VkVideoEncodeH265CtbSizeFlagBitsEXT;
!function(VkVideoEncodeH265CtbSizeFlagBitsEXT) {
    VkVideoEncodeH265CtbSizeFlagBitsEXT[VkVideoEncodeH265CtbSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT", VkVideoEncodeH265CtbSizeFlagBitsEXT[VkVideoEncodeH265CtbSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT", VkVideoEncodeH265CtbSizeFlagBitsEXT[VkVideoEncodeH265CtbSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT";
}(VkVideoEncodeH265CtbSizeFlagBitsEXT || (VkVideoEncodeH265CtbSizeFlagBitsEXT = {}));
export var VkVideoEncodeH265TransformBlockSizeFlagBitsEXT;
!function(VkVideoEncodeH265TransformBlockSizeFlagBitsEXT) {
    VkVideoEncodeH265TransformBlockSizeFlagBitsEXT[VkVideoEncodeH265TransformBlockSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT = 1] = "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT", VkVideoEncodeH265TransformBlockSizeFlagBitsEXT[VkVideoEncodeH265TransformBlockSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT = 2] = "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT", VkVideoEncodeH265TransformBlockSizeFlagBitsEXT[VkVideoEncodeH265TransformBlockSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT = 4] = "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT", VkVideoEncodeH265TransformBlockSizeFlagBitsEXT[VkVideoEncodeH265TransformBlockSizeFlagBitsEXT.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT = 8] = "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT";
}(VkVideoEncodeH265TransformBlockSizeFlagBitsEXT || (VkVideoEncodeH265TransformBlockSizeFlagBitsEXT = {}));
export var VkExportMetalObjectTypeFlagBitsEXT;
!function(VkExportMetalObjectTypeFlagBitsEXT) {
    VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT = 1] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT", VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT = 2] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT", VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT = 4] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT", VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT = 8] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT", VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT = 16] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT", VkExportMetalObjectTypeFlagBitsEXT[VkExportMetalObjectTypeFlagBitsEXT.VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT = 32] = "VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT";
}(VkExportMetalObjectTypeFlagBitsEXT || (VkExportMetalObjectTypeFlagBitsEXT = {}));
export var VkInstanceCreateFlagBits;
!function(VkInstanceCreateFlagBits) {
    VkInstanceCreateFlagBits[VkInstanceCreateFlagBits.VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1] = "VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR";
}(VkInstanceCreateFlagBits || (VkInstanceCreateFlagBits = {}));
export var VkImageCompressionFlagBitsEXT;
!function(VkImageCompressionFlagBitsEXT) {
    VkImageCompressionFlagBitsEXT[VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0] = "VK_IMAGE_COMPRESSION_DEFAULT_EXT", VkImageCompressionFlagBitsEXT[VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1] = "VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT", VkImageCompressionFlagBitsEXT[VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2] = "VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT", VkImageCompressionFlagBitsEXT[VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DISABLED_EXT = 4] = "VK_IMAGE_COMPRESSION_DISABLED_EXT";
}(VkImageCompressionFlagBitsEXT || (VkImageCompressionFlagBitsEXT = {}));
export var VkImageCompressionFixedRateFlagBitsEXT;
!function(VkImageCompressionFixedRateFlagBitsEXT) {
    VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0] = "VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1] = "VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2] = "VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4] = "VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8] = "VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16] = "VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32] = "VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64] = "VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128] = "VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256] = "VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512] = "VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024] = "VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048] = "VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096] = "VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192] = "VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384] = "VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768] = "VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536] = "VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072] = "VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144] = "VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288] = "VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576] = "VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152] = "VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304] = "VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT", VkImageCompressionFixedRateFlagBitsEXT[VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608] = "VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT";
}(VkImageCompressionFixedRateFlagBitsEXT || (VkImageCompressionFixedRateFlagBitsEXT = {}));
export var VkPipelineRobustnessBufferBehaviorEXT;
!function(VkPipelineRobustnessBufferBehaviorEXT) {
    VkPipelineRobustnessBufferBehaviorEXT[VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0] = "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT", VkPipelineRobustnessBufferBehaviorEXT[VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1] = "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT", VkPipelineRobustnessBufferBehaviorEXT[VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2] = "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT", VkPipelineRobustnessBufferBehaviorEXT[VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3] = "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT";
}(VkPipelineRobustnessBufferBehaviorEXT || (VkPipelineRobustnessBufferBehaviorEXT = {}));
export var VkPipelineRobustnessImageBehaviorEXT;
!function(VkPipelineRobustnessImageBehaviorEXT) {
    VkPipelineRobustnessImageBehaviorEXT[VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0] = "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT", VkPipelineRobustnessImageBehaviorEXT[VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1] = "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT", VkPipelineRobustnessImageBehaviorEXT[VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2] = "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT", VkPipelineRobustnessImageBehaviorEXT[VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3] = "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT";
}(VkPipelineRobustnessImageBehaviorEXT || (VkPipelineRobustnessImageBehaviorEXT = {}));
export var VkOpticalFlowGridSizeFlagBitsNV;
!function(VkOpticalFlowGridSizeFlagBitsNV) {
    VkOpticalFlowGridSizeFlagBitsNV[VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0] = "VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV", VkOpticalFlowGridSizeFlagBitsNV[VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1] = "VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV", VkOpticalFlowGridSizeFlagBitsNV[VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2] = "VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV", VkOpticalFlowGridSizeFlagBitsNV[VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4] = "VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV", VkOpticalFlowGridSizeFlagBitsNV[VkOpticalFlowGridSizeFlagBitsNV.VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8] = "VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV";
}(VkOpticalFlowGridSizeFlagBitsNV || (VkOpticalFlowGridSizeFlagBitsNV = {}));
export var VkOpticalFlowUsageFlagBitsNV;
!function(VkOpticalFlowUsageFlagBitsNV) {
    VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0] = "VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV", VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1] = "VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV", VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2] = "VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV", VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4] = "VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV", VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8] = "VK_OPTICAL_FLOW_USAGE_COST_BIT_NV", VkOpticalFlowUsageFlagBitsNV[VkOpticalFlowUsageFlagBitsNV.VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16] = "VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV";
}(VkOpticalFlowUsageFlagBitsNV || (VkOpticalFlowUsageFlagBitsNV = {}));
export var VkOpticalFlowPerformanceLevelNV;
!function(VkOpticalFlowPerformanceLevelNV) {
    VkOpticalFlowPerformanceLevelNV[VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0] = "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV", VkOpticalFlowPerformanceLevelNV[VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1] = "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV", VkOpticalFlowPerformanceLevelNV[VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2] = "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV", VkOpticalFlowPerformanceLevelNV[VkOpticalFlowPerformanceLevelNV.VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3] = "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV";
}(VkOpticalFlowPerformanceLevelNV || (VkOpticalFlowPerformanceLevelNV = {}));
export var VkOpticalFlowSessionBindingPointNV;
!function(VkOpticalFlowSessionBindingPointNV) {
    VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV", VkOpticalFlowSessionBindingPointNV[VkOpticalFlowSessionBindingPointNV.VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8] = "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV";
}(VkOpticalFlowSessionBindingPointNV || (VkOpticalFlowSessionBindingPointNV = {}));
export var VkOpticalFlowSessionCreateFlagBitsNV;
!function(VkOpticalFlowSessionCreateFlagBitsNV) {
    VkOpticalFlowSessionCreateFlagBitsNV[VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1] = "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV", VkOpticalFlowSessionCreateFlagBitsNV[VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2] = "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV", VkOpticalFlowSessionCreateFlagBitsNV[VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4] = "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV", VkOpticalFlowSessionCreateFlagBitsNV[VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8] = "VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV", VkOpticalFlowSessionCreateFlagBitsNV[VkOpticalFlowSessionCreateFlagBitsNV.VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16] = "VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV";
}(VkOpticalFlowSessionCreateFlagBitsNV || (VkOpticalFlowSessionCreateFlagBitsNV = {}));
export var VkOpticalFlowExecuteFlagBitsNV;
!function(VkOpticalFlowExecuteFlagBitsNV) {
    VkOpticalFlowExecuteFlagBitsNV[VkOpticalFlowExecuteFlagBitsNV.VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1] = "VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV";
}(VkOpticalFlowExecuteFlagBitsNV || (VkOpticalFlowExecuteFlagBitsNV = {}));
export var VkMicromapTypeEXT;
!function(VkMicromapTypeEXT) {
    VkMicromapTypeEXT[VkMicromapTypeEXT.VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0] = "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT";
}(VkMicromapTypeEXT || (VkMicromapTypeEXT = {}));
export var VkBuildMicromapFlagBitsEXT;
!function(VkBuildMicromapFlagBitsEXT) {
    VkBuildMicromapFlagBitsEXT[VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1] = "VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT", VkBuildMicromapFlagBitsEXT[VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2] = "VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT", VkBuildMicromapFlagBitsEXT[VkBuildMicromapFlagBitsEXT.VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4] = "VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT";
}(VkBuildMicromapFlagBitsEXT || (VkBuildMicromapFlagBitsEXT = {}));
export var VkMicromapCreateFlagBitsEXT;
!function(VkMicromapCreateFlagBitsEXT) {
    VkMicromapCreateFlagBitsEXT[VkMicromapCreateFlagBitsEXT.VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1] = "VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT";
}(VkMicromapCreateFlagBitsEXT || (VkMicromapCreateFlagBitsEXT = {}));
export var VkCopyMicromapModeEXT;
!function(VkCopyMicromapModeEXT) {
    VkCopyMicromapModeEXT[VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_CLONE_EXT = 0] = "VK_COPY_MICROMAP_MODE_CLONE_EXT", VkCopyMicromapModeEXT[VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1] = "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT", VkCopyMicromapModeEXT[VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2] = "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT", VkCopyMicromapModeEXT[VkCopyMicromapModeEXT.VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3] = "VK_COPY_MICROMAP_MODE_COMPACT_EXT";
}(VkCopyMicromapModeEXT || (VkCopyMicromapModeEXT = {}));
export var VkBuildMicromapModeEXT;
!function(VkBuildMicromapModeEXT) {
    VkBuildMicromapModeEXT[VkBuildMicromapModeEXT.VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0] = "VK_BUILD_MICROMAP_MODE_BUILD_EXT";
}(VkBuildMicromapModeEXT || (VkBuildMicromapModeEXT = {}));
export var VkOpacityMicromapFormatEXT;
!function(VkOpacityMicromapFormatEXT) {
    VkOpacityMicromapFormatEXT[VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1] = "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT", VkOpacityMicromapFormatEXT[VkOpacityMicromapFormatEXT.VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2] = "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT";
}(VkOpacityMicromapFormatEXT || (VkOpacityMicromapFormatEXT = {}));
export var VkOpacityMicromapSpecialIndexEXT;
!function(VkOpacityMicromapSpecialIndexEXT) {
    VkOpacityMicromapSpecialIndexEXT[VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1] = "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT", VkOpacityMicromapSpecialIndexEXT[VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2] = "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT", VkOpacityMicromapSpecialIndexEXT[VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3] = "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT", VkOpacityMicromapSpecialIndexEXT[VkOpacityMicromapSpecialIndexEXT.VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4] = "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT";
}(VkOpacityMicromapSpecialIndexEXT || (VkOpacityMicromapSpecialIndexEXT = {}));
export var VkDeviceFaultAddressTypeEXT;
!function(VkDeviceFaultAddressTypeEXT) {
    VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0] = "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1] = "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2] = "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3] = "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4] = "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5] = "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT", VkDeviceFaultAddressTypeEXT[VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6] = "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT";
}(VkDeviceFaultAddressTypeEXT || (VkDeviceFaultAddressTypeEXT = {}));
export var VkDeviceFaultVendorBinaryHeaderVersionEXT;
!function(VkDeviceFaultVendorBinaryHeaderVersionEXT) {
    VkDeviceFaultVendorBinaryHeaderVersionEXT[VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1] = "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT";
}(VkDeviceFaultVendorBinaryHeaderVersionEXT || (VkDeviceFaultVendorBinaryHeaderVersionEXT = {}));
export const BUFFER = Symbol("vkStructBuffer");
export const DATAVIEW = Symbol("vkStructDataView");
export const LE = 0x78 === new Uint8Array(new Uint32Array([
    0x12345678
]).buffer)[0];
export class StdVideoH264SpsVuiFlags {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264SpsVuiFlags(new Uint8Array(StdVideoH264SpsVuiFlags.size));
    }
    static create(data) {
        let s = StdVideoH264SpsVuiFlags.alloc();
        return void 0 !== data.aspect_ratio_info_present_flag && (s.aspect_ratio_info_present_flag = data.aspect_ratio_info_present_flag), void 0 !== data.overscan_info_present_flag && (s.overscan_info_present_flag = data.overscan_info_present_flag), void 0 !== data.overscan_appropriate_flag && (s.overscan_appropriate_flag = data.overscan_appropriate_flag), void 0 !== data.video_signal_type_present_flag && (s.video_signal_type_present_flag = data.video_signal_type_present_flag), void 0 !== data.video_full_range_flag && (s.video_full_range_flag = data.video_full_range_flag), void 0 !== data.color_description_present_flag && (s.color_description_present_flag = data.color_description_present_flag), void 0 !== data.chroma_loc_info_present_flag && (s.chroma_loc_info_present_flag = data.chroma_loc_info_present_flag), void 0 !== data.timing_info_present_flag && (s.timing_info_present_flag = data.timing_info_present_flag), void 0 !== data.fixed_frame_rate_flag && (s.fixed_frame_rate_flag = data.fixed_frame_rate_flag), void 0 !== data.bitstream_restriction_flag && (s.bitstream_restriction_flag = data.bitstream_restriction_flag), void 0 !== data.nal_hrd_parameters_present_flag && (s.nal_hrd_parameters_present_flag = data.nal_hrd_parameters_present_flag), void 0 !== data.vcl_hrd_parameters_present_flag && (s.vcl_hrd_parameters_present_flag = data.vcl_hrd_parameters_present_flag), s;
    }
    get aspect_ratio_info_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set aspect_ratio_info_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get overscan_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set overscan_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get overscan_appropriate_flag() {
        return this.#view.getUint32(8, LE);
    }
    set overscan_appropriate_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get video_signal_type_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set video_signal_type_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get video_full_range_flag() {
        return this.#view.getUint32(16, LE);
    }
    set video_full_range_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get color_description_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set color_description_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get chroma_loc_info_present_flag() {
        return this.#view.getUint32(24, LE);
    }
    set chroma_loc_info_present_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get timing_info_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set timing_info_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fixed_frame_rate_flag() {
        return this.#view.getUint32(32, LE);
    }
    set fixed_frame_rate_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get bitstream_restriction_flag() {
        return this.#view.getUint32(36, LE);
    }
    set bitstream_restriction_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get nal_hrd_parameters_present_flag() {
        return this.#view.getUint32(40, LE);
    }
    set nal_hrd_parameters_present_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get vcl_hrd_parameters_present_flag() {
        return this.#view.getUint32(44, LE);
    }
    set vcl_hrd_parameters_present_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class StdVideoH264HrdParameters {
    static size = 308;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264HrdParameters.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264HrdParameters(new Uint8Array(StdVideoH264HrdParameters.size));
    }
    static create(data) {
        let s = StdVideoH264HrdParameters.alloc();
        return void 0 !== data.cpb_cnt_minus1 && (s.cpb_cnt_minus1 = data.cpb_cnt_minus1), void 0 !== data.bit_rate_scale && (s.bit_rate_scale = data.bit_rate_scale), void 0 !== data.cpb_size_scale && (s.cpb_size_scale = data.cpb_size_scale), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.bit_rate_value_minus1 && (s.bit_rate_value_minus1 = data.bit_rate_value_minus1), void 0 !== data.cpb_size_value_minus1 && (s.cpb_size_value_minus1 = data.cpb_size_value_minus1), void 0 !== data.cbr_flag && (s.cbr_flag = data.cbr_flag), void 0 !== data.initial_cpb_removal_delay_length_minus1 && (s.initial_cpb_removal_delay_length_minus1 = data.initial_cpb_removal_delay_length_minus1), void 0 !== data.cpb_removal_delay_length_minus1 && (s.cpb_removal_delay_length_minus1 = data.cpb_removal_delay_length_minus1), void 0 !== data.dpb_output_delay_length_minus1 && (s.dpb_output_delay_length_minus1 = data.dpb_output_delay_length_minus1), void 0 !== data.time_offset_length && (s.time_offset_length = data.time_offset_length), s;
    }
    get cpb_cnt_minus1() {
        return this.#view.getUint8(0);
    }
    set cpb_cnt_minus1(value) {
        this.#view.setUint8(0, Number(value));
    }
    get bit_rate_scale() {
        return this.#view.getUint8(1);
    }
    set bit_rate_scale(value) {
        this.#view.setUint8(1, Number(value));
    }
    get cpb_size_scale() {
        return this.#view.getUint8(2);
    }
    set cpb_size_scale(value) {
        this.#view.setUint8(2, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(3);
    }
    set reserved1(value) {
        this.#view.setUint8(3, Number(value));
    }
    get bit_rate_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(4 + 4 * i, LE));
        return result;
    }
    set bit_rate_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(4 + 4 * i, Number(value[i]), LE);
    }
    get cpb_size_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(132 + 4 * i, LE));
        return result;
    }
    set cpb_size_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(132 + 4 * i, Number(value[i]), LE);
    }
    get cbr_flag() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint8(260 + 1 * i));
        return result;
    }
    set cbr_flag(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(260 + 1 * i, Number(value[i]));
    }
    get initial_cpb_removal_delay_length_minus1() {
        return this.#view.getUint32(292, LE);
    }
    set initial_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint32(292, Number(value), LE);
    }
    get cpb_removal_delay_length_minus1() {
        return this.#view.getUint32(296, LE);
    }
    set cpb_removal_delay_length_minus1(value) {
        this.#view.setUint32(296, Number(value), LE);
    }
    get dpb_output_delay_length_minus1() {
        return this.#view.getUint32(300, LE);
    }
    set dpb_output_delay_length_minus1(value) {
        this.#view.setUint32(300, Number(value), LE);
    }
    get time_offset_length() {
        return this.#view.getUint32(304, LE);
    }
    set time_offset_length(value) {
        this.#view.setUint32(304, Number(value), LE);
    }
}
export class StdVideoH264SequenceParameterSetVui {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264SequenceParameterSetVui.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264SequenceParameterSetVui(new Uint8Array(StdVideoH264SequenceParameterSetVui.size));
    }
    static create(data) {
        let s = StdVideoH264SequenceParameterSetVui.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.aspect_ratio_idc && (s.aspect_ratio_idc = data.aspect_ratio_idc), void 0 !== data.sar_width && (s.sar_width = data.sar_width), void 0 !== data.sar_height && (s.sar_height = data.sar_height), void 0 !== data.video_format && (s.video_format = data.video_format), void 0 !== data.colour_primaries && (s.colour_primaries = data.colour_primaries), void 0 !== data.transfer_characteristics && (s.transfer_characteristics = data.transfer_characteristics), void 0 !== data.matrix_coefficients && (s.matrix_coefficients = data.matrix_coefficients), void 0 !== data.num_units_in_tick && (s.num_units_in_tick = data.num_units_in_tick), void 0 !== data.time_scale && (s.time_scale = data.time_scale), void 0 !== data.max_num_reorder_frames && (s.max_num_reorder_frames = data.max_num_reorder_frames), void 0 !== data.max_dec_frame_buffering && (s.max_dec_frame_buffering = data.max_dec_frame_buffering), void 0 !== data.chroma_sample_loc_type_top_field && (s.chroma_sample_loc_type_top_field = data.chroma_sample_loc_type_top_field), void 0 !== data.chroma_sample_loc_type_bottom_field && (s.chroma_sample_loc_type_bottom_field = data.chroma_sample_loc_type_bottom_field), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.pHrdParameters && (s.pHrdParameters = data.pHrdParameters), s;
    }
    get flags() {
        return new StdVideoH264SpsVuiFlags(this.#data.subarray(0, 0 + StdVideoH264SpsVuiFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aspect_ratio_idc() {
        return this.#view.getUint32(48, LE);
    }
    set aspect_ratio_idc(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get sar_width() {
        return this.#view.getUint16(52, LE);
    }
    set sar_width(value) {
        this.#view.setUint16(52, Number(value), LE);
    }
    get sar_height() {
        return this.#view.getUint16(54, LE);
    }
    set sar_height(value) {
        this.#view.setUint16(54, Number(value), LE);
    }
    get video_format() {
        return this.#view.getUint8(56);
    }
    set video_format(value) {
        this.#view.setUint8(56, Number(value));
    }
    get colour_primaries() {
        return this.#view.getUint8(57);
    }
    set colour_primaries(value) {
        this.#view.setUint8(57, Number(value));
    }
    get transfer_characteristics() {
        return this.#view.getUint8(58);
    }
    set transfer_characteristics(value) {
        this.#view.setUint8(58, Number(value));
    }
    get matrix_coefficients() {
        return this.#view.getUint8(59);
    }
    set matrix_coefficients(value) {
        this.#view.setUint8(59, Number(value));
    }
    get num_units_in_tick() {
        return this.#view.getUint32(60, LE);
    }
    set num_units_in_tick(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get time_scale() {
        return this.#view.getUint32(64, LE);
    }
    set time_scale(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get max_num_reorder_frames() {
        return this.#view.getUint8(68);
    }
    set max_num_reorder_frames(value) {
        this.#view.setUint8(68, Number(value));
    }
    get max_dec_frame_buffering() {
        return this.#view.getUint8(69);
    }
    set max_dec_frame_buffering(value) {
        this.#view.setUint8(69, Number(value));
    }
    get chroma_sample_loc_type_top_field() {
        return this.#view.getUint8(70);
    }
    set chroma_sample_loc_type_top_field(value) {
        this.#view.setUint8(70, Number(value));
    }
    get chroma_sample_loc_type_bottom_field() {
        return this.#view.getUint8(71);
    }
    set chroma_sample_loc_type_bottom_field(value) {
        this.#view.setUint8(71, Number(value));
    }
    get reserved1() {
        return this.#view.getUint32(72, LE);
    }
    set reserved1(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(80, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
}
export class StdVideoH264SpsFlags {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264SpsFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264SpsFlags(new Uint8Array(StdVideoH264SpsFlags.size));
    }
    static create(data) {
        let s = StdVideoH264SpsFlags.alloc();
        return void 0 !== data.constraint_set0_flag && (s.constraint_set0_flag = data.constraint_set0_flag), void 0 !== data.constraint_set1_flag && (s.constraint_set1_flag = data.constraint_set1_flag), void 0 !== data.constraint_set2_flag && (s.constraint_set2_flag = data.constraint_set2_flag), void 0 !== data.constraint_set3_flag && (s.constraint_set3_flag = data.constraint_set3_flag), void 0 !== data.constraint_set4_flag && (s.constraint_set4_flag = data.constraint_set4_flag), void 0 !== data.constraint_set5_flag && (s.constraint_set5_flag = data.constraint_set5_flag), void 0 !== data.direct_8x8_inference_flag && (s.direct_8x8_inference_flag = data.direct_8x8_inference_flag), void 0 !== data.mb_adaptive_frame_field_flag && (s.mb_adaptive_frame_field_flag = data.mb_adaptive_frame_field_flag), void 0 !== data.frame_mbs_only_flag && (s.frame_mbs_only_flag = data.frame_mbs_only_flag), void 0 !== data.delta_pic_order_always_zero_flag && (s.delta_pic_order_always_zero_flag = data.delta_pic_order_always_zero_flag), void 0 !== data.separate_colour_plane_flag && (s.separate_colour_plane_flag = data.separate_colour_plane_flag), void 0 !== data.gaps_in_frame_num_value_allowed_flag && (s.gaps_in_frame_num_value_allowed_flag = data.gaps_in_frame_num_value_allowed_flag), void 0 !== data.qpprime_y_zero_transform_bypass_flag && (s.qpprime_y_zero_transform_bypass_flag = data.qpprime_y_zero_transform_bypass_flag), void 0 !== data.frame_cropping_flag && (s.frame_cropping_flag = data.frame_cropping_flag), void 0 !== data.seq_scaling_matrix_present_flag && (s.seq_scaling_matrix_present_flag = data.seq_scaling_matrix_present_flag), void 0 !== data.vui_parameters_present_flag && (s.vui_parameters_present_flag = data.vui_parameters_present_flag), s;
    }
    get constraint_set0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set constraint_set0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get constraint_set1_flag() {
        return this.#view.getUint32(4, LE);
    }
    set constraint_set1_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get constraint_set2_flag() {
        return this.#view.getUint32(8, LE);
    }
    set constraint_set2_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get constraint_set3_flag() {
        return this.#view.getUint32(12, LE);
    }
    set constraint_set3_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get constraint_set4_flag() {
        return this.#view.getUint32(16, LE);
    }
    set constraint_set4_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get constraint_set5_flag() {
        return this.#view.getUint32(20, LE);
    }
    set constraint_set5_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get direct_8x8_inference_flag() {
        return this.#view.getUint32(24, LE);
    }
    set direct_8x8_inference_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get mb_adaptive_frame_field_flag() {
        return this.#view.getUint32(28, LE);
    }
    set mb_adaptive_frame_field_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get frame_mbs_only_flag() {
        return this.#view.getUint32(32, LE);
    }
    set frame_mbs_only_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get delta_pic_order_always_zero_flag() {
        return this.#view.getUint32(36, LE);
    }
    set delta_pic_order_always_zero_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get separate_colour_plane_flag() {
        return this.#view.getUint32(40, LE);
    }
    set separate_colour_plane_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get gaps_in_frame_num_value_allowed_flag() {
        return this.#view.getUint32(44, LE);
    }
    set gaps_in_frame_num_value_allowed_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get qpprime_y_zero_transform_bypass_flag() {
        return this.#view.getUint32(48, LE);
    }
    set qpprime_y_zero_transform_bypass_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get frame_cropping_flag() {
        return this.#view.getUint32(52, LE);
    }
    set frame_cropping_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get seq_scaling_matrix_present_flag() {
        return this.#view.getUint32(56, LE);
    }
    set seq_scaling_matrix_present_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get vui_parameters_present_flag() {
        return this.#view.getUint32(60, LE);
    }
    set vui_parameters_present_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class StdVideoH264ScalingLists {
    static size = 484;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264ScalingLists.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264ScalingLists(new Uint8Array(StdVideoH264ScalingLists.size));
    }
    static create(data) {
        let s = StdVideoH264ScalingLists.alloc();
        return void 0 !== data.scaling_list_present_mask && (s.scaling_list_present_mask = data.scaling_list_present_mask), void 0 !== data.use_default_scaling_matrix_mask && (s.use_default_scaling_matrix_mask = data.use_default_scaling_matrix_mask), void 0 !== data.ScalingList4x4 && (s.ScalingList4x4 = data.ScalingList4x4), void 0 !== data.ScalingList8x8 && (s.ScalingList8x8 = data.ScalingList8x8), s;
    }
    get scaling_list_present_mask() {
        return this.#view.getUint16(0, LE);
    }
    set scaling_list_present_mask(value) {
        this.#view.setUint16(0, Number(value), LE);
    }
    get use_default_scaling_matrix_mask() {
        return this.#view.getUint16(2, LE);
    }
    set use_default_scaling_matrix_mask(value) {
        this.#view.setUint16(2, Number(value), LE);
    }
    get ScalingList4x4() {
        let result = [];
        for(let i = 0; i < 96; i++)result.push(this.#view.getUint8(4 + 1 * i));
        return result;
    }
    set ScalingList4x4(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(4 + 1 * i, Number(value[i]));
    }
    get ScalingList8x8() {
        let result = [];
        for(let i = 0; i < 384; i++)result.push(this.#view.getUint8(100 + 1 * i));
        return result;
    }
    set ScalingList8x8(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(100 + 1 * i, Number(value[i]));
    }
}
export class StdVideoH264SequenceParameterSet {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264SequenceParameterSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264SequenceParameterSet(new Uint8Array(StdVideoH264SequenceParameterSet.size));
    }
    static create(data) {
        let s = StdVideoH264SequenceParameterSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.profile_idc && (s.profile_idc = data.profile_idc), void 0 !== data.level_idc && (s.level_idc = data.level_idc), void 0 !== data.chroma_format_idc && (s.chroma_format_idc = data.chroma_format_idc), void 0 !== data.seq_parameter_set_id && (s.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.bit_depth_luma_minus8 && (s.bit_depth_luma_minus8 = data.bit_depth_luma_minus8), void 0 !== data.bit_depth_chroma_minus8 && (s.bit_depth_chroma_minus8 = data.bit_depth_chroma_minus8), void 0 !== data.log2_max_frame_num_minus4 && (s.log2_max_frame_num_minus4 = data.log2_max_frame_num_minus4), void 0 !== data.pic_order_cnt_type && (s.pic_order_cnt_type = data.pic_order_cnt_type), void 0 !== data.offset_for_non_ref_pic && (s.offset_for_non_ref_pic = data.offset_for_non_ref_pic), void 0 !== data.offset_for_top_to_bottom_field && (s.offset_for_top_to_bottom_field = data.offset_for_top_to_bottom_field), void 0 !== data.log2_max_pic_order_cnt_lsb_minus4 && (s.log2_max_pic_order_cnt_lsb_minus4 = data.log2_max_pic_order_cnt_lsb_minus4), void 0 !== data.num_ref_frames_in_pic_order_cnt_cycle && (s.num_ref_frames_in_pic_order_cnt_cycle = data.num_ref_frames_in_pic_order_cnt_cycle), void 0 !== data.max_num_ref_frames && (s.max_num_ref_frames = data.max_num_ref_frames), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.pic_width_in_mbs_minus1 && (s.pic_width_in_mbs_minus1 = data.pic_width_in_mbs_minus1), void 0 !== data.pic_height_in_map_units_minus1 && (s.pic_height_in_map_units_minus1 = data.pic_height_in_map_units_minus1), void 0 !== data.frame_crop_left_offset && (s.frame_crop_left_offset = data.frame_crop_left_offset), void 0 !== data.frame_crop_right_offset && (s.frame_crop_right_offset = data.frame_crop_right_offset), void 0 !== data.frame_crop_top_offset && (s.frame_crop_top_offset = data.frame_crop_top_offset), void 0 !== data.frame_crop_bottom_offset && (s.frame_crop_bottom_offset = data.frame_crop_bottom_offset), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.pOffsetForRefFrame && (s.pOffsetForRefFrame = data.pOffsetForRefFrame), void 0 !== data.pScalingLists && (s.pScalingLists = data.pScalingLists), void 0 !== data.pSequenceParameterSetVui && (s.pSequenceParameterSetVui = data.pSequenceParameterSetVui), s;
    }
    get flags() {
        return new StdVideoH264SpsFlags(this.#data.subarray(0, 0 + StdVideoH264SpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264SpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get profile_idc() {
        return this.#view.getUint32(64, LE);
    }
    set profile_idc(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get level_idc() {
        return this.#view.getUint32(68, LE);
    }
    set level_idc(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get chroma_format_idc() {
        return this.#view.getUint32(72, LE);
    }
    set chroma_format_idc(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(76);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(76, Number(value));
    }
    get bit_depth_luma_minus8() {
        return this.#view.getUint8(77);
    }
    set bit_depth_luma_minus8(value) {
        this.#view.setUint8(77, Number(value));
    }
    get bit_depth_chroma_minus8() {
        return this.#view.getUint8(78);
    }
    set bit_depth_chroma_minus8(value) {
        this.#view.setUint8(78, Number(value));
    }
    get log2_max_frame_num_minus4() {
        return this.#view.getUint8(79);
    }
    set log2_max_frame_num_minus4(value) {
        this.#view.setUint8(79, Number(value));
    }
    get pic_order_cnt_type() {
        return this.#view.getUint32(80, LE);
    }
    set pic_order_cnt_type(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get offset_for_non_ref_pic() {
        return this.#view.getInt32(84, LE);
    }
    set offset_for_non_ref_pic(value) {
        this.#view.setInt32(84, Number(value), LE);
    }
    get offset_for_top_to_bottom_field() {
        return this.#view.getInt32(88, LE);
    }
    set offset_for_top_to_bottom_field(value) {
        this.#view.setInt32(88, Number(value), LE);
    }
    get log2_max_pic_order_cnt_lsb_minus4() {
        return this.#view.getUint8(92);
    }
    set log2_max_pic_order_cnt_lsb_minus4(value) {
        this.#view.setUint8(92, Number(value));
    }
    get num_ref_frames_in_pic_order_cnt_cycle() {
        return this.#view.getUint8(93);
    }
    set num_ref_frames_in_pic_order_cnt_cycle(value) {
        this.#view.setUint8(93, Number(value));
    }
    get max_num_ref_frames() {
        return this.#view.getUint8(94);
    }
    set max_num_ref_frames(value) {
        this.#view.setUint8(94, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(95);
    }
    set reserved1(value) {
        this.#view.setUint8(95, Number(value));
    }
    get pic_width_in_mbs_minus1() {
        return this.#view.getUint32(96, LE);
    }
    set pic_width_in_mbs_minus1(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get pic_height_in_map_units_minus1() {
        return this.#view.getUint32(100, LE);
    }
    set pic_height_in_map_units_minus1(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get frame_crop_left_offset() {
        return this.#view.getUint32(104, LE);
    }
    set frame_crop_left_offset(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get frame_crop_right_offset() {
        return this.#view.getUint32(108, LE);
    }
    set frame_crop_right_offset(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get frame_crop_top_offset() {
        return this.#view.getUint32(112, LE);
    }
    set frame_crop_top_offset(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get frame_crop_bottom_offset() {
        return this.#view.getUint32(116, LE);
    }
    set frame_crop_bottom_offset(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get reserved2() {
        return this.#view.getUint32(120, LE);
    }
    set reserved2(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pOffsetForRefFrame() {
        return this.#view.getBigUint64(128, LE);
    }
    set pOffsetForRefFrame(value) {
        this.#view.setBigUint64(128, BigInt(value), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(136, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(136, BigInt(value), LE);
    }
    get pSequenceParameterSetVui() {
        return this.#view.getBigUint64(144, LE);
    }
    set pSequenceParameterSetVui(value) {
        this.#view.setBigUint64(144, BigInt(value), LE);
    }
}
export class StdVideoH264PpsFlags {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264PpsFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264PpsFlags(new Uint8Array(StdVideoH264PpsFlags.size));
    }
    static create(data) {
        let s = StdVideoH264PpsFlags.alloc();
        return void 0 !== data.transform_8x8_mode_flag && (s.transform_8x8_mode_flag = data.transform_8x8_mode_flag), void 0 !== data.redundant_pic_cnt_present_flag && (s.redundant_pic_cnt_present_flag = data.redundant_pic_cnt_present_flag), void 0 !== data.constrained_intra_pred_flag && (s.constrained_intra_pred_flag = data.constrained_intra_pred_flag), void 0 !== data.deblocking_filter_control_present_flag && (s.deblocking_filter_control_present_flag = data.deblocking_filter_control_present_flag), void 0 !== data.weighted_pred_flag && (s.weighted_pred_flag = data.weighted_pred_flag), void 0 !== data.bottom_field_pic_order_in_frame_present_flag && (s.bottom_field_pic_order_in_frame_present_flag = data.bottom_field_pic_order_in_frame_present_flag), void 0 !== data.entropy_coding_mode_flag && (s.entropy_coding_mode_flag = data.entropy_coding_mode_flag), void 0 !== data.pic_scaling_matrix_present_flag && (s.pic_scaling_matrix_present_flag = data.pic_scaling_matrix_present_flag), s;
    }
    get transform_8x8_mode_flag() {
        return this.#view.getUint32(0, LE);
    }
    set transform_8x8_mode_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get redundant_pic_cnt_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set redundant_pic_cnt_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get constrained_intra_pred_flag() {
        return this.#view.getUint32(8, LE);
    }
    set constrained_intra_pred_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deblocking_filter_control_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set deblocking_filter_control_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get weighted_pred_flag() {
        return this.#view.getUint32(16, LE);
    }
    set weighted_pred_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bottom_field_pic_order_in_frame_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set bottom_field_pic_order_in_frame_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get entropy_coding_mode_flag() {
        return this.#view.getUint32(24, LE);
    }
    set entropy_coding_mode_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pic_scaling_matrix_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set pic_scaling_matrix_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class StdVideoH264PictureParameterSet {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH264PictureParameterSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH264PictureParameterSet(new Uint8Array(StdVideoH264PictureParameterSet.size));
    }
    static create(data) {
        let s = StdVideoH264PictureParameterSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.seq_parameter_set_id && (s.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (s.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.num_ref_idx_l0_default_active_minus1 && (s.num_ref_idx_l0_default_active_minus1 = data.num_ref_idx_l0_default_active_minus1), void 0 !== data.num_ref_idx_l1_default_active_minus1 && (s.num_ref_idx_l1_default_active_minus1 = data.num_ref_idx_l1_default_active_minus1), void 0 !== data.weighted_bipred_idc && (s.weighted_bipred_idc = data.weighted_bipred_idc), void 0 !== data.pic_init_qp_minus26 && (s.pic_init_qp_minus26 = data.pic_init_qp_minus26), void 0 !== data.pic_init_qs_minus26 && (s.pic_init_qs_minus26 = data.pic_init_qs_minus26), void 0 !== data.chroma_qp_index_offset && (s.chroma_qp_index_offset = data.chroma_qp_index_offset), void 0 !== data.second_chroma_qp_index_offset && (s.second_chroma_qp_index_offset = data.second_chroma_qp_index_offset), void 0 !== data.pScalingLists && (s.pScalingLists = data.pScalingLists), s;
    }
    get flags() {
        return new StdVideoH264PpsFlags(this.#data.subarray(0, 0 + StdVideoH264PpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH264PpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(32);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(33);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(33, Number(value));
    }
    get num_ref_idx_l0_default_active_minus1() {
        return this.#view.getUint8(34);
    }
    set num_ref_idx_l0_default_active_minus1(value) {
        this.#view.setUint8(34, Number(value));
    }
    get num_ref_idx_l1_default_active_minus1() {
        return this.#view.getUint8(35);
    }
    set num_ref_idx_l1_default_active_minus1(value) {
        this.#view.setUint8(35, Number(value));
    }
    get weighted_bipred_idc() {
        return this.#view.getUint32(36, LE);
    }
    set weighted_bipred_idc(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pic_init_qp_minus26() {
        return this.#view.getInt8(40);
    }
    set pic_init_qp_minus26(value) {
        this.#view.setInt8(40, Number(value));
    }
    get pic_init_qs_minus26() {
        return this.#view.getInt8(41);
    }
    set pic_init_qs_minus26(value) {
        this.#view.setInt8(41, Number(value));
    }
    get chroma_qp_index_offset() {
        return this.#view.getInt8(42);
    }
    set chroma_qp_index_offset(value) {
        this.#view.setInt8(42, Number(value));
    }
    get second_chroma_qp_index_offset() {
        return this.#view.getInt8(43);
    }
    set second_chroma_qp_index_offset(value) {
        this.#view.setInt8(43, Number(value));
    }
    get pScalingLists() {
        return this.#view.getBigUint64(48, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class StdVideoDecodeH264PictureInfoFlags {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH264PictureInfoFlags(new Uint8Array(StdVideoDecodeH264PictureInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoDecodeH264PictureInfoFlags.alloc();
        return void 0 !== data.field_pic_flag && (s.field_pic_flag = data.field_pic_flag), void 0 !== data.is_intra && (s.is_intra = data.is_intra), void 0 !== data.IdrPicFlag && (s.IdrPicFlag = data.IdrPicFlag), void 0 !== data.bottom_field_flag && (s.bottom_field_flag = data.bottom_field_flag), void 0 !== data.is_reference && (s.is_reference = data.is_reference), void 0 !== data.complementary_field_pair && (s.complementary_field_pair = data.complementary_field_pair), s;
    }
    get field_pic_flag() {
        return this.#view.getUint32(0, LE);
    }
    set field_pic_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get is_intra() {
        return this.#view.getUint32(4, LE);
    }
    set is_intra(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get IdrPicFlag() {
        return this.#view.getUint32(8, LE);
    }
    set IdrPicFlag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bottom_field_flag() {
        return this.#view.getUint32(12, LE);
    }
    set bottom_field_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get is_reference() {
        return this.#view.getUint32(16, LE);
    }
    set is_reference(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get complementary_field_pair() {
        return this.#view.getUint32(20, LE);
    }
    set complementary_field_pair(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class StdVideoDecodeH264PictureInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH264PictureInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH264PictureInfo(new Uint8Array(StdVideoDecodeH264PictureInfo.size));
    }
    static create(data) {
        let s = StdVideoDecodeH264PictureInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.seq_parameter_set_id && (s.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (s.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.frame_num && (s.frame_num = data.frame_num), void 0 !== data.idr_pic_id && (s.idr_pic_id = data.idr_pic_id), void 0 !== data.PicOrderCnt && (s.PicOrderCnt = data.PicOrderCnt), s;
    }
    get flags() {
        return new StdVideoDecodeH264PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH264PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(24);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(25);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(25, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(26);
    }
    set reserved1(value) {
        this.#view.setUint8(26, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(27);
    }
    set reserved2(value) {
        this.#view.setUint8(27, Number(value));
    }
    get frame_num() {
        return this.#view.getUint16(28, LE);
    }
    set frame_num(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
    get idr_pic_id() {
        return this.#view.getUint16(30, LE);
    }
    set idr_pic_id(value) {
        this.#view.setUint16(30, Number(value), LE);
    }
    get PicOrderCnt() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getInt32(32 + 4 * i, LE));
        return result;
    }
    set PicOrderCnt(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt32(32 + 4 * i, Number(value[i]), LE);
    }
}
export class StdVideoDecodeH264ReferenceInfoFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH264ReferenceInfoFlags(new Uint8Array(StdVideoDecodeH264ReferenceInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoDecodeH264ReferenceInfoFlags.alloc();
        return void 0 !== data.top_field_flag && (s.top_field_flag = data.top_field_flag), void 0 !== data.bottom_field_flag && (s.bottom_field_flag = data.bottom_field_flag), void 0 !== data.used_for_long_term_reference && (s.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.is_non_existing && (s.is_non_existing = data.is_non_existing), s;
    }
    get top_field_flag() {
        return this.#view.getUint32(0, LE);
    }
    set top_field_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get bottom_field_flag() {
        return this.#view.getUint32(4, LE);
    }
    set bottom_field_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(8, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get is_non_existing() {
        return this.#view.getUint32(12, LE);
    }
    set is_non_existing(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoDecodeH264ReferenceInfo {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH264ReferenceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH264ReferenceInfo(new Uint8Array(StdVideoDecodeH264ReferenceInfo.size));
    }
    static create(data) {
        let s = StdVideoDecodeH264ReferenceInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.FrameNum && (s.FrameNum = data.FrameNum), void 0 !== data.reserved && (s.reserved = data.reserved), void 0 !== data.PicOrderCnt && (s.PicOrderCnt = data.PicOrderCnt), s;
    }
    get flags() {
        return new StdVideoDecodeH264ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH264ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get FrameNum() {
        return this.#view.getUint16(16, LE);
    }
    set FrameNum(value) {
        this.#view.setUint16(16, Number(value), LE);
    }
    get reserved() {
        return this.#view.getUint16(18, LE);
    }
    set reserved(value) {
        this.#view.setUint16(18, Number(value), LE);
    }
    get PicOrderCnt() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getInt32(20 + 4 * i, LE));
        return result;
    }
    set PicOrderCnt(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt32(20 + 4 * i, Number(value[i]), LE);
    }
}
export class StdVideoEncodeH264WeightTableFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264WeightTableFlags(new Uint8Array(StdVideoEncodeH264WeightTableFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264WeightTableFlags.alloc();
        return void 0 !== data.luma_weight_l0_flag && (s.luma_weight_l0_flag = data.luma_weight_l0_flag), void 0 !== data.chroma_weight_l0_flag && (s.chroma_weight_l0_flag = data.chroma_weight_l0_flag), void 0 !== data.luma_weight_l1_flag && (s.luma_weight_l1_flag = data.luma_weight_l1_flag), void 0 !== data.chroma_weight_l1_flag && (s.chroma_weight_l1_flag = data.chroma_weight_l1_flag), s;
    }
    get luma_weight_l0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set luma_weight_l0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get chroma_weight_l0_flag() {
        return this.#view.getUint32(4, LE);
    }
    set chroma_weight_l0_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get luma_weight_l1_flag() {
        return this.#view.getUint32(8, LE);
    }
    set luma_weight_l1_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get chroma_weight_l1_flag() {
        return this.#view.getUint32(12, LE);
    }
    set chroma_weight_l1_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoEncodeH264WeightTable {
    static size = 404;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264WeightTable.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264WeightTable(new Uint8Array(StdVideoEncodeH264WeightTable.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264WeightTable.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.luma_log2_weight_denom && (s.luma_log2_weight_denom = data.luma_log2_weight_denom), void 0 !== data.chroma_log2_weight_denom && (s.chroma_log2_weight_denom = data.chroma_log2_weight_denom), void 0 !== data.luma_weight_l0 && (s.luma_weight_l0 = data.luma_weight_l0), void 0 !== data.luma_offset_l0 && (s.luma_offset_l0 = data.luma_offset_l0), void 0 !== data.chroma_weight_l0 && (s.chroma_weight_l0 = data.chroma_weight_l0), void 0 !== data.chroma_offset_l0 && (s.chroma_offset_l0 = data.chroma_offset_l0), void 0 !== data.luma_weight_l1 && (s.luma_weight_l1 = data.luma_weight_l1), void 0 !== data.luma_offset_l1 && (s.luma_offset_l1 = data.luma_offset_l1), void 0 !== data.chroma_weight_l1 && (s.chroma_weight_l1 = data.chroma_weight_l1), void 0 !== data.chroma_offset_l1 && (s.chroma_offset_l1 = data.chroma_offset_l1), s;
    }
    get flags() {
        return new StdVideoEncodeH264WeightTableFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264WeightTableFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get luma_log2_weight_denom() {
        return this.#view.getUint8(16);
    }
    set luma_log2_weight_denom(value) {
        this.#view.setUint8(16, Number(value));
    }
    get chroma_log2_weight_denom() {
        return this.#view.getUint8(17);
    }
    set chroma_log2_weight_denom(value) {
        this.#view.setUint8(17, Number(value));
    }
    get luma_weight_l0() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getInt8(18 + 1 * i));
        return result;
    }
    set luma_weight_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(18 + 1 * i, Number(value[i]));
    }
    get luma_offset_l0() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getInt8(50 + 1 * i));
        return result;
    }
    set luma_offset_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(50 + 1 * i, Number(value[i]));
    }
    get chroma_weight_l0() {
        let result = [];
        for(let i = 0; i < 64; i++)result.push(this.#view.getInt8(82 + 1 * i));
        return result;
    }
    set chroma_weight_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(82 + 1 * i, Number(value[i]));
    }
    get chroma_offset_l0() {
        let result = [];
        for(let i = 0; i < 64; i++)result.push(this.#view.getInt8(146 + 1 * i));
        return result;
    }
    set chroma_offset_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(146 + 1 * i, Number(value[i]));
    }
    get luma_weight_l1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getInt8(210 + 1 * i));
        return result;
    }
    set luma_weight_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(210 + 1 * i, Number(value[i]));
    }
    get luma_offset_l1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getInt8(242 + 1 * i));
        return result;
    }
    set luma_offset_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(242 + 1 * i, Number(value[i]));
    }
    get chroma_weight_l1() {
        let result = [];
        for(let i = 0; i < 64; i++)result.push(this.#view.getInt8(274 + 1 * i));
        return result;
    }
    set chroma_weight_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(274 + 1 * i, Number(value[i]));
    }
    get chroma_offset_l1() {
        let result = [];
        for(let i = 0; i < 64; i++)result.push(this.#view.getInt8(338 + 1 * i));
        return result;
    }
    set chroma_offset_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(338 + 1 * i, Number(value[i]));
    }
}
export class StdVideoEncodeH264SliceHeaderFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264SliceHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264SliceHeaderFlags(new Uint8Array(StdVideoEncodeH264SliceHeaderFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264SliceHeaderFlags.alloc();
        return void 0 !== data.direct_spatial_mv_pred_flag && (s.direct_spatial_mv_pred_flag = data.direct_spatial_mv_pred_flag), void 0 !== data.num_ref_idx_active_override_flag && (s.num_ref_idx_active_override_flag = data.num_ref_idx_active_override_flag), void 0 !== data.no_output_of_prior_pics_flag && (s.no_output_of_prior_pics_flag = data.no_output_of_prior_pics_flag), void 0 !== data.adaptive_ref_pic_marking_mode_flag && (s.adaptive_ref_pic_marking_mode_flag = data.adaptive_ref_pic_marking_mode_flag), void 0 !== data.no_prior_references_available_flag && (s.no_prior_references_available_flag = data.no_prior_references_available_flag), s;
    }
    get direct_spatial_mv_pred_flag() {
        return this.#view.getUint32(0, LE);
    }
    set direct_spatial_mv_pred_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get num_ref_idx_active_override_flag() {
        return this.#view.getUint32(4, LE);
    }
    set num_ref_idx_active_override_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get no_output_of_prior_pics_flag() {
        return this.#view.getUint32(8, LE);
    }
    set no_output_of_prior_pics_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get adaptive_ref_pic_marking_mode_flag() {
        return this.#view.getUint32(12, LE);
    }
    set adaptive_ref_pic_marking_mode_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get no_prior_references_available_flag() {
        return this.#view.getUint32(16, LE);
    }
    set no_prior_references_available_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoEncodeH264PictureInfoFlags {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264PictureInfoFlags(new Uint8Array(StdVideoEncodeH264PictureInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264PictureInfoFlags.alloc();
        return void 0 !== data.idr_flag && (s.idr_flag = data.idr_flag), void 0 !== data.is_reference_flag && (s.is_reference_flag = data.is_reference_flag), void 0 !== data.used_for_long_term_reference && (s.used_for_long_term_reference = data.used_for_long_term_reference), s;
    }
    get idr_flag() {
        return this.#view.getUint32(0, LE);
    }
    set idr_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get is_reference_flag() {
        return this.#view.getUint32(4, LE);
    }
    set is_reference_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(8, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class StdVideoEncodeH264ReferenceInfoFlags {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264ReferenceInfoFlags(new Uint8Array(StdVideoEncodeH264ReferenceInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264ReferenceInfoFlags.alloc();
        return void 0 !== data.used_for_long_term_reference && (s.used_for_long_term_reference = data.used_for_long_term_reference), s;
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefMgmtFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264RefMgmtFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264RefMgmtFlags(new Uint8Array(StdVideoEncodeH264RefMgmtFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264RefMgmtFlags.alloc();
        return void 0 !== data.ref_pic_list_modification_l0_flag && (s.ref_pic_list_modification_l0_flag = data.ref_pic_list_modification_l0_flag), void 0 !== data.ref_pic_list_modification_l1_flag && (s.ref_pic_list_modification_l1_flag = data.ref_pic_list_modification_l1_flag), s;
    }
    get ref_pic_list_modification_l0_flag() {
        return this.#view.getUint32(0, LE);
    }
    set ref_pic_list_modification_l0_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get ref_pic_list_modification_l1_flag() {
        return this.#view.getUint32(4, LE);
    }
    set ref_pic_list_modification_l1_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefListModEntry {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264RefListModEntry.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264RefListModEntry(new Uint8Array(StdVideoEncodeH264RefListModEntry.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264RefListModEntry.alloc();
        return void 0 !== data.modification_of_pic_nums_idc && (s.modification_of_pic_nums_idc = data.modification_of_pic_nums_idc), void 0 !== data.abs_diff_pic_num_minus1 && (s.abs_diff_pic_num_minus1 = data.abs_diff_pic_num_minus1), void 0 !== data.long_term_pic_num && (s.long_term_pic_num = data.long_term_pic_num), s;
    }
    get modification_of_pic_nums_idc() {
        return this.#view.getUint32(0, LE);
    }
    set modification_of_pic_nums_idc(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get abs_diff_pic_num_minus1() {
        return this.#view.getUint16(4, LE);
    }
    set abs_diff_pic_num_minus1(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(6, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefPicMarkingEntry {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264RefPicMarkingEntry.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264RefPicMarkingEntry(new Uint8Array(StdVideoEncodeH264RefPicMarkingEntry.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264RefPicMarkingEntry.alloc();
        return void 0 !== data.operation && (s.operation = data.operation), void 0 !== data.difference_of_pic_nums_minus1 && (s.difference_of_pic_nums_minus1 = data.difference_of_pic_nums_minus1), void 0 !== data.long_term_pic_num && (s.long_term_pic_num = data.long_term_pic_num), void 0 !== data.long_term_frame_idx && (s.long_term_frame_idx = data.long_term_frame_idx), void 0 !== data.max_long_term_frame_idx_plus1 && (s.max_long_term_frame_idx_plus1 = data.max_long_term_frame_idx_plus1), s;
    }
    get operation() {
        return this.#view.getUint32(0, LE);
    }
    set operation(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get difference_of_pic_nums_minus1() {
        return this.#view.getUint16(4, LE);
    }
    set difference_of_pic_nums_minus1(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(6, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
    get long_term_frame_idx() {
        return this.#view.getUint16(8, LE);
    }
    set long_term_frame_idx(value) {
        this.#view.setUint16(8, Number(value), LE);
    }
    get max_long_term_frame_idx_plus1() {
        return this.#view.getUint16(10, LE);
    }
    set max_long_term_frame_idx_plus1(value) {
        this.#view.setUint16(10, Number(value), LE);
    }
}
export class StdVideoEncodeH264RefMemMgmtCtrlOperations {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264RefMemMgmtCtrlOperations.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264RefMemMgmtCtrlOperations(new Uint8Array(StdVideoEncodeH264RefMemMgmtCtrlOperations.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264RefMemMgmtCtrlOperations.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.refList0ModOpCount && (s.refList0ModOpCount = data.refList0ModOpCount), void 0 !== data.pRefList0ModOperations && (s.pRefList0ModOperations = data.pRefList0ModOperations), void 0 !== data.refList1ModOpCount && (s.refList1ModOpCount = data.refList1ModOpCount), void 0 !== data.pRefList1ModOperations && (s.pRefList1ModOperations = data.pRefList1ModOperations), void 0 !== data.refPicMarkingOpCount && (s.refPicMarkingOpCount = data.refPicMarkingOpCount), void 0 !== data.pRefPicMarkingOperations && (s.pRefPicMarkingOperations = data.pRefPicMarkingOperations), s;
    }
    get flags() {
        return new StdVideoEncodeH264RefMgmtFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264RefMgmtFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264RefMgmtFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get refList0ModOpCount() {
        return this.#view.getUint8(8);
    }
    set refList0ModOpCount(value) {
        this.#view.setUint8(8, Number(value));
    }
    get pRefList0ModOperations() {
        return this.#view.getBigUint64(16, LE);
    }
    set pRefList0ModOperations(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get refList1ModOpCount() {
        return this.#view.getUint8(24);
    }
    set refList1ModOpCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pRefList1ModOperations() {
        return this.#view.getBigUint64(32, LE);
    }
    set pRefList1ModOperations(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get refPicMarkingOpCount() {
        return this.#view.getUint8(40);
    }
    set refPicMarkingOpCount(value) {
        this.#view.setUint8(40, Number(value));
    }
    get pRefPicMarkingOperations() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRefPicMarkingOperations(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class StdVideoEncodeH264PictureInfo {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264PictureInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264PictureInfo(new Uint8Array(StdVideoEncodeH264PictureInfo.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264PictureInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.seq_parameter_set_id && (s.seq_parameter_set_id = data.seq_parameter_set_id), void 0 !== data.pic_parameter_set_id && (s.pic_parameter_set_id = data.pic_parameter_set_id), void 0 !== data.pictureType && (s.pictureType = data.pictureType), void 0 !== data.frame_num && (s.frame_num = data.frame_num), void 0 !== data.PicOrderCnt && (s.PicOrderCnt = data.PicOrderCnt), s;
    }
    get flags() {
        return new StdVideoEncodeH264PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get seq_parameter_set_id() {
        return this.#view.getUint8(12);
    }
    set seq_parameter_set_id(value) {
        this.#view.setUint8(12, Number(value));
    }
    get pic_parameter_set_id() {
        return this.#view.getUint8(13);
    }
    set pic_parameter_set_id(value) {
        this.#view.setUint8(13, Number(value));
    }
    get pictureType() {
        return this.#view.getUint32(16, LE);
    }
    set pictureType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get frame_num() {
        return this.#view.getUint32(20, LE);
    }
    set frame_num(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get PicOrderCnt() {
        return this.#view.getInt32(24, LE);
    }
    set PicOrderCnt(value) {
        this.#view.setInt32(24, Number(value), LE);
    }
}
export class StdVideoEncodeH264ReferenceInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264ReferenceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264ReferenceInfo(new Uint8Array(StdVideoEncodeH264ReferenceInfo.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264ReferenceInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.FrameNum && (s.FrameNum = data.FrameNum), void 0 !== data.PicOrderCnt && (s.PicOrderCnt = data.PicOrderCnt), void 0 !== data.long_term_pic_num && (s.long_term_pic_num = data.long_term_pic_num), void 0 !== data.long_term_frame_idx && (s.long_term_frame_idx = data.long_term_frame_idx), s;
    }
    get flags() {
        return new StdVideoEncodeH264ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get FrameNum() {
        return this.#view.getUint32(4, LE);
    }
    set FrameNum(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get PicOrderCnt() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCnt(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
    get long_term_pic_num() {
        return this.#view.getUint16(12, LE);
    }
    set long_term_pic_num(value) {
        this.#view.setUint16(12, Number(value), LE);
    }
    get long_term_frame_idx() {
        return this.#view.getUint16(14, LE);
    }
    set long_term_frame_idx(value) {
        this.#view.setUint16(14, Number(value), LE);
    }
}
export class StdVideoEncodeH264SliceHeader {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH264SliceHeader.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH264SliceHeader(new Uint8Array(StdVideoEncodeH264SliceHeader.size));
    }
    static create(data) {
        let s = StdVideoEncodeH264SliceHeader.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.first_mb_in_slice && (s.first_mb_in_slice = data.first_mb_in_slice), void 0 !== data.slice_type && (s.slice_type = data.slice_type), void 0 !== data.idr_pic_id && (s.idr_pic_id = data.idr_pic_id), void 0 !== data.num_ref_idx_l0_active_minus1 && (s.num_ref_idx_l0_active_minus1 = data.num_ref_idx_l0_active_minus1), void 0 !== data.num_ref_idx_l1_active_minus1 && (s.num_ref_idx_l1_active_minus1 = data.num_ref_idx_l1_active_minus1), void 0 !== data.cabac_init_idc && (s.cabac_init_idc = data.cabac_init_idc), void 0 !== data.disable_deblocking_filter_idc && (s.disable_deblocking_filter_idc = data.disable_deblocking_filter_idc), void 0 !== data.slice_alpha_c0_offset_div2 && (s.slice_alpha_c0_offset_div2 = data.slice_alpha_c0_offset_div2), void 0 !== data.slice_beta_offset_div2 && (s.slice_beta_offset_div2 = data.slice_beta_offset_div2), void 0 !== data.pWeightTable && (s.pWeightTable = data.pWeightTable), s;
    }
    get flags() {
        return new StdVideoEncodeH264SliceHeaderFlags(this.#data.subarray(0, 0 + StdVideoEncodeH264SliceHeaderFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH264SliceHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get first_mb_in_slice() {
        return this.#view.getUint32(20, LE);
    }
    set first_mb_in_slice(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get slice_type() {
        return this.#view.getUint32(24, LE);
    }
    set slice_type(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get idr_pic_id() {
        return this.#view.getUint16(28, LE);
    }
    set idr_pic_id(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
    get num_ref_idx_l0_active_minus1() {
        return this.#view.getUint8(30);
    }
    set num_ref_idx_l0_active_minus1(value) {
        this.#view.setUint8(30, Number(value));
    }
    get num_ref_idx_l1_active_minus1() {
        return this.#view.getUint8(31);
    }
    set num_ref_idx_l1_active_minus1(value) {
        this.#view.setUint8(31, Number(value));
    }
    get cabac_init_idc() {
        return this.#view.getUint32(32, LE);
    }
    set cabac_init_idc(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get disable_deblocking_filter_idc() {
        return this.#view.getUint32(36, LE);
    }
    set disable_deblocking_filter_idc(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get slice_alpha_c0_offset_div2() {
        return this.#view.getInt8(40);
    }
    set slice_alpha_c0_offset_div2(value) {
        this.#view.setInt8(40, Number(value));
    }
    get slice_beta_offset_div2() {
        return this.#view.getInt8(41);
    }
    set slice_beta_offset_div2(value) {
        this.#view.setInt8(41, Number(value));
    }
    get pWeightTable() {
        return this.#view.getBigUint64(48, LE);
    }
    set pWeightTable(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class StdVideoH265ProfileTierLevelFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265ProfileTierLevelFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265ProfileTierLevelFlags(new Uint8Array(StdVideoH265ProfileTierLevelFlags.size));
    }
    static create(data) {
        let s = StdVideoH265ProfileTierLevelFlags.alloc();
        return void 0 !== data.general_tier_flag && (s.general_tier_flag = data.general_tier_flag), void 0 !== data.general_progressive_source_flag && (s.general_progressive_source_flag = data.general_progressive_source_flag), void 0 !== data.general_interlaced_source_flag && (s.general_interlaced_source_flag = data.general_interlaced_source_flag), void 0 !== data.general_non_packed_constraint_flag && (s.general_non_packed_constraint_flag = data.general_non_packed_constraint_flag), void 0 !== data.general_frame_only_constraint_flag && (s.general_frame_only_constraint_flag = data.general_frame_only_constraint_flag), s;
    }
    get general_tier_flag() {
        return this.#view.getUint32(0, LE);
    }
    set general_tier_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get general_progressive_source_flag() {
        return this.#view.getUint32(4, LE);
    }
    set general_progressive_source_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get general_interlaced_source_flag() {
        return this.#view.getUint32(8, LE);
    }
    set general_interlaced_source_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get general_non_packed_constraint_flag() {
        return this.#view.getUint32(12, LE);
    }
    set general_non_packed_constraint_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get general_frame_only_constraint_flag() {
        return this.#view.getUint32(16, LE);
    }
    set general_frame_only_constraint_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoH265ProfileTierLevel {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265ProfileTierLevel.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265ProfileTierLevel(new Uint8Array(StdVideoH265ProfileTierLevel.size));
    }
    static create(data) {
        let s = StdVideoH265ProfileTierLevel.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.general_profile_idc && (s.general_profile_idc = data.general_profile_idc), void 0 !== data.general_level_idc && (s.general_level_idc = data.general_level_idc), s;
    }
    get flags() {
        return new StdVideoH265ProfileTierLevelFlags(this.#data.subarray(0, 0 + StdVideoH265ProfileTierLevelFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265ProfileTierLevelFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get general_profile_idc() {
        return this.#view.getUint32(20, LE);
    }
    set general_profile_idc(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get general_level_idc() {
        return this.#view.getUint32(24, LE);
    }
    set general_level_idc(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class StdVideoH265DecPicBufMgr {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265DecPicBufMgr.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265DecPicBufMgr(new Uint8Array(StdVideoH265DecPicBufMgr.size));
    }
    static create(data) {
        let s = StdVideoH265DecPicBufMgr.alloc();
        return void 0 !== data.max_latency_increase_plus1 && (s.max_latency_increase_plus1 = data.max_latency_increase_plus1), void 0 !== data.max_dec_pic_buffering_minus1 && (s.max_dec_pic_buffering_minus1 = data.max_dec_pic_buffering_minus1), void 0 !== data.max_num_reorder_pics && (s.max_num_reorder_pics = data.max_num_reorder_pics), s;
    }
    get max_latency_increase_plus1() {
        let result = [];
        for(let i = 0; i < 7; i++)result.push(this.#view.getUint32(0 + 4 * i, LE));
        return result;
    }
    set max_latency_increase_plus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(0 + 4 * i, Number(value[i]), LE);
    }
    get max_dec_pic_buffering_minus1() {
        let result = [];
        for(let i = 0; i < 7; i++)result.push(this.#view.getUint8(28 + 1 * i));
        return result;
    }
    set max_dec_pic_buffering_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(28 + 1 * i, Number(value[i]));
    }
    get max_num_reorder_pics() {
        let result = [];
        for(let i = 0; i < 7; i++)result.push(this.#view.getUint8(35 + 1 * i));
        return result;
    }
    set max_num_reorder_pics(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(35 + 1 * i, Number(value[i]));
    }
}
export class StdVideoH265SubLayerHrdParameters {
    static size = 516;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265SubLayerHrdParameters.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265SubLayerHrdParameters(new Uint8Array(StdVideoH265SubLayerHrdParameters.size));
    }
    static create(data) {
        let s = StdVideoH265SubLayerHrdParameters.alloc();
        return void 0 !== data.bit_rate_value_minus1 && (s.bit_rate_value_minus1 = data.bit_rate_value_minus1), void 0 !== data.cpb_size_value_minus1 && (s.cpb_size_value_minus1 = data.cpb_size_value_minus1), void 0 !== data.cpb_size_du_value_minus1 && (s.cpb_size_du_value_minus1 = data.cpb_size_du_value_minus1), void 0 !== data.bit_rate_du_value_minus1 && (s.bit_rate_du_value_minus1 = data.bit_rate_du_value_minus1), void 0 !== data.cbr_flag && (s.cbr_flag = data.cbr_flag), s;
    }
    get bit_rate_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(0 + 4 * i, LE));
        return result;
    }
    set bit_rate_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(0 + 4 * i, Number(value[i]), LE);
    }
    get cpb_size_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(128 + 4 * i, LE));
        return result;
    }
    set cpb_size_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(128 + 4 * i, Number(value[i]), LE);
    }
    get cpb_size_du_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(256 + 4 * i, LE));
        return result;
    }
    set cpb_size_du_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(256 + 4 * i, Number(value[i]), LE);
    }
    get bit_rate_du_value_minus1() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(384 + 4 * i, LE));
        return result;
    }
    set bit_rate_du_value_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(384 + 4 * i, Number(value[i]), LE);
    }
    get cbr_flag() {
        return this.#view.getUint32(512, LE);
    }
    set cbr_flag(value) {
        this.#view.setUint32(512, Number(value), LE);
    }
}
export class StdVideoH265HrdFlags {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265HrdFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265HrdFlags(new Uint8Array(StdVideoH265HrdFlags.size));
    }
    static create(data) {
        let s = StdVideoH265HrdFlags.alloc();
        return void 0 !== data.nal_hrd_parameters_present_flag && (s.nal_hrd_parameters_present_flag = data.nal_hrd_parameters_present_flag), void 0 !== data.vcl_hrd_parameters_present_flag && (s.vcl_hrd_parameters_present_flag = data.vcl_hrd_parameters_present_flag), void 0 !== data.sub_pic_hrd_params_present_flag && (s.sub_pic_hrd_params_present_flag = data.sub_pic_hrd_params_present_flag), void 0 !== data.sub_pic_cpb_params_in_pic_timing_sei_flag && (s.sub_pic_cpb_params_in_pic_timing_sei_flag = data.sub_pic_cpb_params_in_pic_timing_sei_flag), void 0 !== data.fixed_pic_rate_general_flag && (s.fixed_pic_rate_general_flag = data.fixed_pic_rate_general_flag), void 0 !== data.fixed_pic_rate_within_cvs_flag && (s.fixed_pic_rate_within_cvs_flag = data.fixed_pic_rate_within_cvs_flag), void 0 !== data.low_delay_hrd_flag && (s.low_delay_hrd_flag = data.low_delay_hrd_flag), s;
    }
    get nal_hrd_parameters_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set nal_hrd_parameters_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vcl_hrd_parameters_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set vcl_hrd_parameters_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sub_pic_hrd_params_present_flag() {
        return this.#view.getUint32(8, LE);
    }
    set sub_pic_hrd_params_present_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get sub_pic_cpb_params_in_pic_timing_sei_flag() {
        return this.#view.getUint32(12, LE);
    }
    set sub_pic_cpb_params_in_pic_timing_sei_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get fixed_pic_rate_general_flag() {
        return this.#view.getUint32(16, LE);
    }
    set fixed_pic_rate_general_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fixed_pic_rate_within_cvs_flag() {
        return this.#view.getUint32(20, LE);
    }
    set fixed_pic_rate_within_cvs_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get low_delay_hrd_flag() {
        return this.#view.getUint32(24, LE);
    }
    set low_delay_hrd_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class StdVideoH265HrdParameters {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265HrdParameters.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265HrdParameters(new Uint8Array(StdVideoH265HrdParameters.size));
    }
    static create(data) {
        let s = StdVideoH265HrdParameters.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.tick_divisor_minus2 && (s.tick_divisor_minus2 = data.tick_divisor_minus2), void 0 !== data.du_cpb_removal_delay_increment_length_minus1 && (s.du_cpb_removal_delay_increment_length_minus1 = data.du_cpb_removal_delay_increment_length_minus1), void 0 !== data.dpb_output_delay_du_length_minus1 && (s.dpb_output_delay_du_length_minus1 = data.dpb_output_delay_du_length_minus1), void 0 !== data.bit_rate_scale && (s.bit_rate_scale = data.bit_rate_scale), void 0 !== data.cpb_size_scale && (s.cpb_size_scale = data.cpb_size_scale), void 0 !== data.cpb_size_du_scale && (s.cpb_size_du_scale = data.cpb_size_du_scale), void 0 !== data.initial_cpb_removal_delay_length_minus1 && (s.initial_cpb_removal_delay_length_minus1 = data.initial_cpb_removal_delay_length_minus1), void 0 !== data.au_cpb_removal_delay_length_minus1 && (s.au_cpb_removal_delay_length_minus1 = data.au_cpb_removal_delay_length_minus1), void 0 !== data.dpb_output_delay_length_minus1 && (s.dpb_output_delay_length_minus1 = data.dpb_output_delay_length_minus1), void 0 !== data.cpb_cnt_minus1 && (s.cpb_cnt_minus1 = data.cpb_cnt_minus1), void 0 !== data.elemental_duration_in_tc_minus1 && (s.elemental_duration_in_tc_minus1 = data.elemental_duration_in_tc_minus1), void 0 !== data.reserved && (s.reserved = data.reserved), void 0 !== data.pSubLayerHrdParametersNal && (s.pSubLayerHrdParametersNal = data.pSubLayerHrdParametersNal), void 0 !== data.pSubLayerHrdParametersVcl && (s.pSubLayerHrdParametersVcl = data.pSubLayerHrdParametersVcl), s;
    }
    get flags() {
        return new StdVideoH265HrdFlags(this.#data.subarray(0, 0 + StdVideoH265HrdFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265HrdFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get tick_divisor_minus2() {
        return this.#view.getUint8(28);
    }
    set tick_divisor_minus2(value) {
        this.#view.setUint8(28, Number(value));
    }
    get du_cpb_removal_delay_increment_length_minus1() {
        return this.#view.getUint8(29);
    }
    set du_cpb_removal_delay_increment_length_minus1(value) {
        this.#view.setUint8(29, Number(value));
    }
    get dpb_output_delay_du_length_minus1() {
        return this.#view.getUint8(30);
    }
    set dpb_output_delay_du_length_minus1(value) {
        this.#view.setUint8(30, Number(value));
    }
    get bit_rate_scale() {
        return this.#view.getUint8(31);
    }
    set bit_rate_scale(value) {
        this.#view.setUint8(31, Number(value));
    }
    get cpb_size_scale() {
        return this.#view.getUint8(32);
    }
    set cpb_size_scale(value) {
        this.#view.setUint8(32, Number(value));
    }
    get cpb_size_du_scale() {
        return this.#view.getUint8(33);
    }
    set cpb_size_du_scale(value) {
        this.#view.setUint8(33, Number(value));
    }
    get initial_cpb_removal_delay_length_minus1() {
        return this.#view.getUint8(34);
    }
    set initial_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint8(34, Number(value));
    }
    get au_cpb_removal_delay_length_minus1() {
        return this.#view.getUint8(35);
    }
    set au_cpb_removal_delay_length_minus1(value) {
        this.#view.setUint8(35, Number(value));
    }
    get dpb_output_delay_length_minus1() {
        return this.#view.getUint8(36);
    }
    set dpb_output_delay_length_minus1(value) {
        this.#view.setUint8(36, Number(value));
    }
    get cpb_cnt_minus1() {
        let result = [];
        for(let i = 0; i < 7; i++)result.push(this.#view.getUint8(37 + 1 * i));
        return result;
    }
    set cpb_cnt_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(37 + 1 * i, Number(value[i]));
    }
    get elemental_duration_in_tc_minus1() {
        let result = [];
        for(let i = 0; i < 7; i++)result.push(this.#view.getUint16(44 + 2 * i, LE));
        return result;
    }
    set elemental_duration_in_tc_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(44 + 2 * i, Number(value[i]), LE);
    }
    get reserved() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint16(58 + 2 * i, LE));
        return result;
    }
    set reserved(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(58 + 2 * i, Number(value[i]), LE);
    }
    get pSubLayerHrdParametersNal() {
        return this.#view.getBigUint64(64, LE);
    }
    set pSubLayerHrdParametersNal(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get pSubLayerHrdParametersVcl() {
        return this.#view.getBigUint64(72, LE);
    }
    set pSubLayerHrdParametersVcl(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
}
export class StdVideoH265VpsFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265VpsFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265VpsFlags(new Uint8Array(StdVideoH265VpsFlags.size));
    }
    static create(data) {
        let s = StdVideoH265VpsFlags.alloc();
        return void 0 !== data.vps_temporal_id_nesting_flag && (s.vps_temporal_id_nesting_flag = data.vps_temporal_id_nesting_flag), void 0 !== data.vps_sub_layer_ordering_info_present_flag && (s.vps_sub_layer_ordering_info_present_flag = data.vps_sub_layer_ordering_info_present_flag), void 0 !== data.vps_timing_info_present_flag && (s.vps_timing_info_present_flag = data.vps_timing_info_present_flag), void 0 !== data.vps_poc_proportional_to_timing_flag && (s.vps_poc_proportional_to_timing_flag = data.vps_poc_proportional_to_timing_flag), s;
    }
    get vps_temporal_id_nesting_flag() {
        return this.#view.getUint32(0, LE);
    }
    set vps_temporal_id_nesting_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vps_sub_layer_ordering_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set vps_sub_layer_ordering_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vps_timing_info_present_flag() {
        return this.#view.getUint32(8, LE);
    }
    set vps_timing_info_present_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get vps_poc_proportional_to_timing_flag() {
        return this.#view.getUint32(12, LE);
    }
    set vps_poc_proportional_to_timing_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoH265VideoParameterSet {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265VideoParameterSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265VideoParameterSet(new Uint8Array(StdVideoH265VideoParameterSet.size));
    }
    static create(data) {
        let s = StdVideoH265VideoParameterSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.vps_video_parameter_set_id && (s.vps_video_parameter_set_id = data.vps_video_parameter_set_id), void 0 !== data.vps_max_sub_layers_minus1 && (s.vps_max_sub_layers_minus1 = data.vps_max_sub_layers_minus1), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.vps_num_units_in_tick && (s.vps_num_units_in_tick = data.vps_num_units_in_tick), void 0 !== data.vps_time_scale && (s.vps_time_scale = data.vps_time_scale), void 0 !== data.vps_num_ticks_poc_diff_one_minus1 && (s.vps_num_ticks_poc_diff_one_minus1 = data.vps_num_ticks_poc_diff_one_minus1), void 0 !== data.reserved3 && (s.reserved3 = data.reserved3), void 0 !== data.pDecPicBufMgr && (s.pDecPicBufMgr = data.pDecPicBufMgr), void 0 !== data.pHrdParameters && (s.pHrdParameters = data.pHrdParameters), void 0 !== data.pProfileTierLevel && (s.pProfileTierLevel = data.pProfileTierLevel), s;
    }
    get flags() {
        return new StdVideoH265VpsFlags(this.#data.subarray(0, 0 + StdVideoH265VpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265VpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get vps_video_parameter_set_id() {
        return this.#view.getUint8(16);
    }
    set vps_video_parameter_set_id(value) {
        this.#view.setUint8(16, Number(value));
    }
    get vps_max_sub_layers_minus1() {
        return this.#view.getUint8(17);
    }
    set vps_max_sub_layers_minus1(value) {
        this.#view.setUint8(17, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(18);
    }
    set reserved1(value) {
        this.#view.setUint8(18, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(19);
    }
    set reserved2(value) {
        this.#view.setUint8(19, Number(value));
    }
    get vps_num_units_in_tick() {
        return this.#view.getUint32(20, LE);
    }
    set vps_num_units_in_tick(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vps_time_scale() {
        return this.#view.getUint32(24, LE);
    }
    set vps_time_scale(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get vps_num_ticks_poc_diff_one_minus1() {
        return this.#view.getUint32(28, LE);
    }
    set vps_num_ticks_poc_diff_one_minus1(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get reserved3() {
        return this.#view.getUint32(32, LE);
    }
    set reserved3(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pDecPicBufMgr() {
        return this.#view.getBigUint64(40, LE);
    }
    set pDecPicBufMgr(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(48, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pProfileTierLevel() {
        return this.#view.getBigUint64(56, LE);
    }
    set pProfileTierLevel(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class StdVideoH265ScalingLists {
    static size = 1000;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265ScalingLists.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265ScalingLists(new Uint8Array(StdVideoH265ScalingLists.size));
    }
    static create(data) {
        let s = StdVideoH265ScalingLists.alloc();
        return void 0 !== data.ScalingList4x4 && (s.ScalingList4x4 = data.ScalingList4x4), void 0 !== data.ScalingList8x8 && (s.ScalingList8x8 = data.ScalingList8x8), void 0 !== data.ScalingList16x16 && (s.ScalingList16x16 = data.ScalingList16x16), void 0 !== data.ScalingList32x32 && (s.ScalingList32x32 = data.ScalingList32x32), void 0 !== data.ScalingListDCCoef16x16 && (s.ScalingListDCCoef16x16 = data.ScalingListDCCoef16x16), void 0 !== data.ScalingListDCCoef32x32 && (s.ScalingListDCCoef32x32 = data.ScalingListDCCoef32x32), s;
    }
    get ScalingList4x4() {
        let result = [];
        for(let i = 0; i < 96; i++)result.push(this.#view.getUint8(0 + 1 * i));
        return result;
    }
    set ScalingList4x4(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(0 + 1 * i, Number(value[i]));
    }
    get ScalingList8x8() {
        let result = [];
        for(let i = 0; i < 384; i++)result.push(this.#view.getUint8(96 + 1 * i));
        return result;
    }
    set ScalingList8x8(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(96 + 1 * i, Number(value[i]));
    }
    get ScalingList16x16() {
        let result = [];
        for(let i = 0; i < 384; i++)result.push(this.#view.getUint8(480 + 1 * i));
        return result;
    }
    set ScalingList16x16(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(480 + 1 * i, Number(value[i]));
    }
    get ScalingList32x32() {
        let result = [];
        for(let i = 0; i < 128; i++)result.push(this.#view.getUint8(864 + 1 * i));
        return result;
    }
    set ScalingList32x32(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(864 + 1 * i, Number(value[i]));
    }
    get ScalingListDCCoef16x16() {
        let result = [];
        for(let i = 0; i < 6; i++)result.push(this.#view.getUint8(992 + 1 * i));
        return result;
    }
    set ScalingListDCCoef16x16(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(992 + 1 * i, Number(value[i]));
    }
    get ScalingListDCCoef32x32() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getUint8(998 + 1 * i));
        return result;
    }
    set ScalingListDCCoef32x32(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(998 + 1 * i, Number(value[i]));
    }
}
export class StdVideoH265ShortTermRefPicSetFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265ShortTermRefPicSetFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265ShortTermRefPicSetFlags(new Uint8Array(StdVideoH265ShortTermRefPicSetFlags.size));
    }
    static create(data) {
        let s = StdVideoH265ShortTermRefPicSetFlags.alloc();
        return void 0 !== data.inter_ref_pic_set_prediction_flag && (s.inter_ref_pic_set_prediction_flag = data.inter_ref_pic_set_prediction_flag), void 0 !== data.delta_rps_sign && (s.delta_rps_sign = data.delta_rps_sign), s;
    }
    get inter_ref_pic_set_prediction_flag() {
        return this.#view.getUint32(0, LE);
    }
    set inter_ref_pic_set_prediction_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get delta_rps_sign() {
        return this.#view.getUint32(4, LE);
    }
    set delta_rps_sign(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoH265ShortTermRefPicSet {
    static size = 92;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265ShortTermRefPicSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265ShortTermRefPicSet(new Uint8Array(StdVideoH265ShortTermRefPicSet.size));
    }
    static create(data) {
        let s = StdVideoH265ShortTermRefPicSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.delta_idx_minus1 && (s.delta_idx_minus1 = data.delta_idx_minus1), void 0 !== data.use_delta_flag && (s.use_delta_flag = data.use_delta_flag), void 0 !== data.abs_delta_rps_minus1 && (s.abs_delta_rps_minus1 = data.abs_delta_rps_minus1), void 0 !== data.used_by_curr_pic_flag && (s.used_by_curr_pic_flag = data.used_by_curr_pic_flag), void 0 !== data.used_by_curr_pic_s0_flag && (s.used_by_curr_pic_s0_flag = data.used_by_curr_pic_s0_flag), void 0 !== data.used_by_curr_pic_s1_flag && (s.used_by_curr_pic_s1_flag = data.used_by_curr_pic_s1_flag), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.reserved3 && (s.reserved3 = data.reserved3), void 0 !== data.num_negative_pics && (s.num_negative_pics = data.num_negative_pics), void 0 !== data.num_positive_pics && (s.num_positive_pics = data.num_positive_pics), void 0 !== data.delta_poc_s0_minus1 && (s.delta_poc_s0_minus1 = data.delta_poc_s0_minus1), void 0 !== data.delta_poc_s1_minus1 && (s.delta_poc_s1_minus1 = data.delta_poc_s1_minus1), s;
    }
    get flags() {
        return new StdVideoH265ShortTermRefPicSetFlags(this.#data.subarray(0, 0 + StdVideoH265ShortTermRefPicSetFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265ShortTermRefPicSetFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get delta_idx_minus1() {
        return this.#view.getUint32(8, LE);
    }
    set delta_idx_minus1(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get use_delta_flag() {
        return this.#view.getUint16(12, LE);
    }
    set use_delta_flag(value) {
        this.#view.setUint16(12, Number(value), LE);
    }
    get abs_delta_rps_minus1() {
        return this.#view.getUint16(14, LE);
    }
    set abs_delta_rps_minus1(value) {
        this.#view.setUint16(14, Number(value), LE);
    }
    get used_by_curr_pic_flag() {
        return this.#view.getUint16(16, LE);
    }
    set used_by_curr_pic_flag(value) {
        this.#view.setUint16(16, Number(value), LE);
    }
    get used_by_curr_pic_s0_flag() {
        return this.#view.getUint16(18, LE);
    }
    set used_by_curr_pic_s0_flag(value) {
        this.#view.setUint16(18, Number(value), LE);
    }
    get used_by_curr_pic_s1_flag() {
        return this.#view.getUint16(20, LE);
    }
    set used_by_curr_pic_s1_flag(value) {
        this.#view.setUint16(20, Number(value), LE);
    }
    get reserved1() {
        return this.#view.getUint16(22, LE);
    }
    set reserved1(value) {
        this.#view.setUint16(22, Number(value), LE);
    }
    get reserved2() {
        return this.#view.getUint8(24);
    }
    set reserved2(value) {
        this.#view.setUint8(24, Number(value));
    }
    get reserved3() {
        return this.#view.getUint8(25);
    }
    set reserved3(value) {
        this.#view.setUint8(25, Number(value));
    }
    get num_negative_pics() {
        return this.#view.getUint8(26);
    }
    set num_negative_pics(value) {
        this.#view.setUint8(26, Number(value));
    }
    get num_positive_pics() {
        return this.#view.getUint8(27);
    }
    set num_positive_pics(value) {
        this.#view.setUint8(27, Number(value));
    }
    get delta_poc_s0_minus1() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint16(28 + 2 * i, LE));
        return result;
    }
    set delta_poc_s0_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(28 + 2 * i, Number(value[i]), LE);
    }
    get delta_poc_s1_minus1() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint16(60 + 2 * i, LE));
        return result;
    }
    set delta_poc_s1_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(60 + 2 * i, Number(value[i]), LE);
    }
}
export class StdVideoH265LongTermRefPicsSps {
    static size = 132;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265LongTermRefPicsSps.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265LongTermRefPicsSps(new Uint8Array(StdVideoH265LongTermRefPicsSps.size));
    }
    static create(data) {
        let s = StdVideoH265LongTermRefPicsSps.alloc();
        return void 0 !== data.used_by_curr_pic_lt_sps_flag && (s.used_by_curr_pic_lt_sps_flag = data.used_by_curr_pic_lt_sps_flag), void 0 !== data.lt_ref_pic_poc_lsb_sps && (s.lt_ref_pic_poc_lsb_sps = data.lt_ref_pic_poc_lsb_sps), s;
    }
    get used_by_curr_pic_lt_sps_flag() {
        return this.#view.getUint32(0, LE);
    }
    set used_by_curr_pic_lt_sps_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get lt_ref_pic_poc_lsb_sps() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(4 + 4 * i, LE));
        return result;
    }
    set lt_ref_pic_poc_lsb_sps(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(4 + 4 * i, Number(value[i]), LE);
    }
}
export class StdVideoH265SpsVuiFlags {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265SpsVuiFlags(new Uint8Array(StdVideoH265SpsVuiFlags.size));
    }
    static create(data) {
        let s = StdVideoH265SpsVuiFlags.alloc();
        return void 0 !== data.aspect_ratio_info_present_flag && (s.aspect_ratio_info_present_flag = data.aspect_ratio_info_present_flag), void 0 !== data.overscan_info_present_flag && (s.overscan_info_present_flag = data.overscan_info_present_flag), void 0 !== data.overscan_appropriate_flag && (s.overscan_appropriate_flag = data.overscan_appropriate_flag), void 0 !== data.video_signal_type_present_flag && (s.video_signal_type_present_flag = data.video_signal_type_present_flag), void 0 !== data.video_full_range_flag && (s.video_full_range_flag = data.video_full_range_flag), void 0 !== data.colour_description_present_flag && (s.colour_description_present_flag = data.colour_description_present_flag), void 0 !== data.chroma_loc_info_present_flag && (s.chroma_loc_info_present_flag = data.chroma_loc_info_present_flag), void 0 !== data.neutral_chroma_indication_flag && (s.neutral_chroma_indication_flag = data.neutral_chroma_indication_flag), void 0 !== data.field_seq_flag && (s.field_seq_flag = data.field_seq_flag), void 0 !== data.frame_field_info_present_flag && (s.frame_field_info_present_flag = data.frame_field_info_present_flag), void 0 !== data.default_display_window_flag && (s.default_display_window_flag = data.default_display_window_flag), void 0 !== data.vui_timing_info_present_flag && (s.vui_timing_info_present_flag = data.vui_timing_info_present_flag), void 0 !== data.vui_poc_proportional_to_timing_flag && (s.vui_poc_proportional_to_timing_flag = data.vui_poc_proportional_to_timing_flag), void 0 !== data.vui_hrd_parameters_present_flag && (s.vui_hrd_parameters_present_flag = data.vui_hrd_parameters_present_flag), void 0 !== data.bitstream_restriction_flag && (s.bitstream_restriction_flag = data.bitstream_restriction_flag), void 0 !== data.tiles_fixed_structure_flag && (s.tiles_fixed_structure_flag = data.tiles_fixed_structure_flag), void 0 !== data.motion_vectors_over_pic_boundaries_flag && (s.motion_vectors_over_pic_boundaries_flag = data.motion_vectors_over_pic_boundaries_flag), void 0 !== data.restricted_ref_pic_lists_flag && (s.restricted_ref_pic_lists_flag = data.restricted_ref_pic_lists_flag), s;
    }
    get aspect_ratio_info_present_flag() {
        return this.#view.getUint32(0, LE);
    }
    set aspect_ratio_info_present_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get overscan_info_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set overscan_info_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get overscan_appropriate_flag() {
        return this.#view.getUint32(8, LE);
    }
    set overscan_appropriate_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get video_signal_type_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set video_signal_type_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get video_full_range_flag() {
        return this.#view.getUint32(16, LE);
    }
    set video_full_range_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get colour_description_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set colour_description_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get chroma_loc_info_present_flag() {
        return this.#view.getUint32(24, LE);
    }
    set chroma_loc_info_present_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get neutral_chroma_indication_flag() {
        return this.#view.getUint32(28, LE);
    }
    set neutral_chroma_indication_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get field_seq_flag() {
        return this.#view.getUint32(32, LE);
    }
    set field_seq_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get frame_field_info_present_flag() {
        return this.#view.getUint32(36, LE);
    }
    set frame_field_info_present_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get default_display_window_flag() {
        return this.#view.getUint32(40, LE);
    }
    set default_display_window_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get vui_timing_info_present_flag() {
        return this.#view.getUint32(44, LE);
    }
    set vui_timing_info_present_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get vui_poc_proportional_to_timing_flag() {
        return this.#view.getUint32(48, LE);
    }
    set vui_poc_proportional_to_timing_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get vui_hrd_parameters_present_flag() {
        return this.#view.getUint32(52, LE);
    }
    set vui_hrd_parameters_present_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get bitstream_restriction_flag() {
        return this.#view.getUint32(56, LE);
    }
    set bitstream_restriction_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get tiles_fixed_structure_flag() {
        return this.#view.getUint32(60, LE);
    }
    set tiles_fixed_structure_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get motion_vectors_over_pic_boundaries_flag() {
        return this.#view.getUint32(64, LE);
    }
    set motion_vectors_over_pic_boundaries_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get restricted_ref_pic_lists_flag() {
        return this.#view.getUint32(68, LE);
    }
    set restricted_ref_pic_lists_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class StdVideoH265SequenceParameterSetVui {
    static size = 128;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265SequenceParameterSetVui.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265SequenceParameterSetVui(new Uint8Array(StdVideoH265SequenceParameterSetVui.size));
    }
    static create(data) {
        let s = StdVideoH265SequenceParameterSetVui.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.aspect_ratio_idc && (s.aspect_ratio_idc = data.aspect_ratio_idc), void 0 !== data.sar_width && (s.sar_width = data.sar_width), void 0 !== data.sar_height && (s.sar_height = data.sar_height), void 0 !== data.video_format && (s.video_format = data.video_format), void 0 !== data.colour_primaries && (s.colour_primaries = data.colour_primaries), void 0 !== data.transfer_characteristics && (s.transfer_characteristics = data.transfer_characteristics), void 0 !== data.matrix_coeffs && (s.matrix_coeffs = data.matrix_coeffs), void 0 !== data.chroma_sample_loc_type_top_field && (s.chroma_sample_loc_type_top_field = data.chroma_sample_loc_type_top_field), void 0 !== data.chroma_sample_loc_type_bottom_field && (s.chroma_sample_loc_type_bottom_field = data.chroma_sample_loc_type_bottom_field), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.def_disp_win_left_offset && (s.def_disp_win_left_offset = data.def_disp_win_left_offset), void 0 !== data.def_disp_win_right_offset && (s.def_disp_win_right_offset = data.def_disp_win_right_offset), void 0 !== data.def_disp_win_top_offset && (s.def_disp_win_top_offset = data.def_disp_win_top_offset), void 0 !== data.def_disp_win_bottom_offset && (s.def_disp_win_bottom_offset = data.def_disp_win_bottom_offset), void 0 !== data.vui_num_units_in_tick && (s.vui_num_units_in_tick = data.vui_num_units_in_tick), void 0 !== data.vui_time_scale && (s.vui_time_scale = data.vui_time_scale), void 0 !== data.vui_num_ticks_poc_diff_one_minus1 && (s.vui_num_ticks_poc_diff_one_minus1 = data.vui_num_ticks_poc_diff_one_minus1), void 0 !== data.min_spatial_segmentation_idc && (s.min_spatial_segmentation_idc = data.min_spatial_segmentation_idc), void 0 !== data.reserved3 && (s.reserved3 = data.reserved3), void 0 !== data.max_bytes_per_pic_denom && (s.max_bytes_per_pic_denom = data.max_bytes_per_pic_denom), void 0 !== data.max_bits_per_min_cu_denom && (s.max_bits_per_min_cu_denom = data.max_bits_per_min_cu_denom), void 0 !== data.log2_max_mv_length_horizontal && (s.log2_max_mv_length_horizontal = data.log2_max_mv_length_horizontal), void 0 !== data.log2_max_mv_length_vertical && (s.log2_max_mv_length_vertical = data.log2_max_mv_length_vertical), void 0 !== data.pHrdParameters && (s.pHrdParameters = data.pHrdParameters), s;
    }
    get flags() {
        return new StdVideoH265SpsVuiFlags(this.#data.subarray(0, 0 + StdVideoH265SpsVuiFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265SpsVuiFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aspect_ratio_idc() {
        return this.#view.getUint32(72, LE);
    }
    set aspect_ratio_idc(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get sar_width() {
        return this.#view.getUint16(76, LE);
    }
    set sar_width(value) {
        this.#view.setUint16(76, Number(value), LE);
    }
    get sar_height() {
        return this.#view.getUint16(78, LE);
    }
    set sar_height(value) {
        this.#view.setUint16(78, Number(value), LE);
    }
    get video_format() {
        return this.#view.getUint8(80);
    }
    set video_format(value) {
        this.#view.setUint8(80, Number(value));
    }
    get colour_primaries() {
        return this.#view.getUint8(81);
    }
    set colour_primaries(value) {
        this.#view.setUint8(81, Number(value));
    }
    get transfer_characteristics() {
        return this.#view.getUint8(82);
    }
    set transfer_characteristics(value) {
        this.#view.setUint8(82, Number(value));
    }
    get matrix_coeffs() {
        return this.#view.getUint8(83);
    }
    set matrix_coeffs(value) {
        this.#view.setUint8(83, Number(value));
    }
    get chroma_sample_loc_type_top_field() {
        return this.#view.getUint8(84);
    }
    set chroma_sample_loc_type_top_field(value) {
        this.#view.setUint8(84, Number(value));
    }
    get chroma_sample_loc_type_bottom_field() {
        return this.#view.getUint8(85);
    }
    set chroma_sample_loc_type_bottom_field(value) {
        this.#view.setUint8(85, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(86);
    }
    set reserved1(value) {
        this.#view.setUint8(86, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(87);
    }
    set reserved2(value) {
        this.#view.setUint8(87, Number(value));
    }
    get def_disp_win_left_offset() {
        return this.#view.getUint16(88, LE);
    }
    set def_disp_win_left_offset(value) {
        this.#view.setUint16(88, Number(value), LE);
    }
    get def_disp_win_right_offset() {
        return this.#view.getUint16(90, LE);
    }
    set def_disp_win_right_offset(value) {
        this.#view.setUint16(90, Number(value), LE);
    }
    get def_disp_win_top_offset() {
        return this.#view.getUint16(92, LE);
    }
    set def_disp_win_top_offset(value) {
        this.#view.setUint16(92, Number(value), LE);
    }
    get def_disp_win_bottom_offset() {
        return this.#view.getUint16(94, LE);
    }
    set def_disp_win_bottom_offset(value) {
        this.#view.setUint16(94, Number(value), LE);
    }
    get vui_num_units_in_tick() {
        return this.#view.getUint32(96, LE);
    }
    set vui_num_units_in_tick(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get vui_time_scale() {
        return this.#view.getUint32(100, LE);
    }
    set vui_time_scale(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get vui_num_ticks_poc_diff_one_minus1() {
        return this.#view.getUint32(104, LE);
    }
    set vui_num_ticks_poc_diff_one_minus1(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get min_spatial_segmentation_idc() {
        return this.#view.getUint16(108, LE);
    }
    set min_spatial_segmentation_idc(value) {
        this.#view.setUint16(108, Number(value), LE);
    }
    get reserved3() {
        return this.#view.getUint16(110, LE);
    }
    set reserved3(value) {
        this.#view.setUint16(110, Number(value), LE);
    }
    get max_bytes_per_pic_denom() {
        return this.#view.getUint8(112);
    }
    set max_bytes_per_pic_denom(value) {
        this.#view.setUint8(112, Number(value));
    }
    get max_bits_per_min_cu_denom() {
        return this.#view.getUint8(113);
    }
    set max_bits_per_min_cu_denom(value) {
        this.#view.setUint8(113, Number(value));
    }
    get log2_max_mv_length_horizontal() {
        return this.#view.getUint8(114);
    }
    set log2_max_mv_length_horizontal(value) {
        this.#view.setUint8(114, Number(value));
    }
    get log2_max_mv_length_vertical() {
        return this.#view.getUint8(115);
    }
    set log2_max_mv_length_vertical(value) {
        this.#view.setUint8(115, Number(value));
    }
    get pHrdParameters() {
        return this.#view.getBigUint64(120, LE);
    }
    set pHrdParameters(value) {
        this.#view.setBigUint64(120, BigInt(value), LE);
    }
}
export class StdVideoH265PredictorPaletteEntries {
    static size = 768;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265PredictorPaletteEntries.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265PredictorPaletteEntries(new Uint8Array(StdVideoH265PredictorPaletteEntries.size));
    }
    static create(data) {
        let s = StdVideoH265PredictorPaletteEntries.alloc();
        return void 0 !== data.PredictorPaletteEntries && (s.PredictorPaletteEntries = data.PredictorPaletteEntries), s;
    }
    get PredictorPaletteEntries() {
        let result = [];
        for(let i = 0; i < 384; i++)result.push(this.#view.getUint16(0 + 2 * i, LE));
        return result;
    }
    set PredictorPaletteEntries(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(0 + 2 * i, Number(value[i]), LE);
    }
}
export class StdVideoH265SpsFlags {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265SpsFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265SpsFlags(new Uint8Array(StdVideoH265SpsFlags.size));
    }
    static create(data) {
        let s = StdVideoH265SpsFlags.alloc();
        return void 0 !== data.sps_temporal_id_nesting_flag && (s.sps_temporal_id_nesting_flag = data.sps_temporal_id_nesting_flag), void 0 !== data.separate_colour_plane_flag && (s.separate_colour_plane_flag = data.separate_colour_plane_flag), void 0 !== data.conformance_window_flag && (s.conformance_window_flag = data.conformance_window_flag), void 0 !== data.sps_sub_layer_ordering_info_present_flag && (s.sps_sub_layer_ordering_info_present_flag = data.sps_sub_layer_ordering_info_present_flag), void 0 !== data.scaling_list_enabled_flag && (s.scaling_list_enabled_flag = data.scaling_list_enabled_flag), void 0 !== data.sps_scaling_list_data_present_flag && (s.sps_scaling_list_data_present_flag = data.sps_scaling_list_data_present_flag), void 0 !== data.amp_enabled_flag && (s.amp_enabled_flag = data.amp_enabled_flag), void 0 !== data.sample_adaptive_offset_enabled_flag && (s.sample_adaptive_offset_enabled_flag = data.sample_adaptive_offset_enabled_flag), void 0 !== data.pcm_enabled_flag && (s.pcm_enabled_flag = data.pcm_enabled_flag), void 0 !== data.pcm_loop_filter_disabled_flag && (s.pcm_loop_filter_disabled_flag = data.pcm_loop_filter_disabled_flag), void 0 !== data.long_term_ref_pics_present_flag && (s.long_term_ref_pics_present_flag = data.long_term_ref_pics_present_flag), void 0 !== data.sps_temporal_mvp_enabled_flag && (s.sps_temporal_mvp_enabled_flag = data.sps_temporal_mvp_enabled_flag), void 0 !== data.strong_intra_smoothing_enabled_flag && (s.strong_intra_smoothing_enabled_flag = data.strong_intra_smoothing_enabled_flag), void 0 !== data.vui_parameters_present_flag && (s.vui_parameters_present_flag = data.vui_parameters_present_flag), void 0 !== data.sps_extension_present_flag && (s.sps_extension_present_flag = data.sps_extension_present_flag), void 0 !== data.sps_range_extension_flag && (s.sps_range_extension_flag = data.sps_range_extension_flag), void 0 !== data.transform_skip_rotation_enabled_flag && (s.transform_skip_rotation_enabled_flag = data.transform_skip_rotation_enabled_flag), void 0 !== data.transform_skip_context_enabled_flag && (s.transform_skip_context_enabled_flag = data.transform_skip_context_enabled_flag), void 0 !== data.implicit_rdpcm_enabled_flag && (s.implicit_rdpcm_enabled_flag = data.implicit_rdpcm_enabled_flag), void 0 !== data.explicit_rdpcm_enabled_flag && (s.explicit_rdpcm_enabled_flag = data.explicit_rdpcm_enabled_flag), void 0 !== data.extended_precision_processing_flag && (s.extended_precision_processing_flag = data.extended_precision_processing_flag), void 0 !== data.intra_smoothing_disabled_flag && (s.intra_smoothing_disabled_flag = data.intra_smoothing_disabled_flag), void 0 !== data.high_precision_offsets_enabled_flag && (s.high_precision_offsets_enabled_flag = data.high_precision_offsets_enabled_flag), void 0 !== data.persistent_rice_adaptation_enabled_flag && (s.persistent_rice_adaptation_enabled_flag = data.persistent_rice_adaptation_enabled_flag), void 0 !== data.cabac_bypass_alignment_enabled_flag && (s.cabac_bypass_alignment_enabled_flag = data.cabac_bypass_alignment_enabled_flag), void 0 !== data.sps_scc_extension_flag && (s.sps_scc_extension_flag = data.sps_scc_extension_flag), void 0 !== data.sps_curr_pic_ref_enabled_flag && (s.sps_curr_pic_ref_enabled_flag = data.sps_curr_pic_ref_enabled_flag), void 0 !== data.palette_mode_enabled_flag && (s.palette_mode_enabled_flag = data.palette_mode_enabled_flag), void 0 !== data.sps_palette_predictor_initializers_present_flag && (s.sps_palette_predictor_initializers_present_flag = data.sps_palette_predictor_initializers_present_flag), void 0 !== data.intra_boundary_filtering_disabled_flag && (s.intra_boundary_filtering_disabled_flag = data.intra_boundary_filtering_disabled_flag), s;
    }
    get sps_temporal_id_nesting_flag() {
        return this.#view.getUint32(0, LE);
    }
    set sps_temporal_id_nesting_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get separate_colour_plane_flag() {
        return this.#view.getUint32(4, LE);
    }
    set separate_colour_plane_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get conformance_window_flag() {
        return this.#view.getUint32(8, LE);
    }
    set conformance_window_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get sps_sub_layer_ordering_info_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set sps_sub_layer_ordering_info_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get scaling_list_enabled_flag() {
        return this.#view.getUint32(16, LE);
    }
    set scaling_list_enabled_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sps_scaling_list_data_present_flag() {
        return this.#view.getUint32(20, LE);
    }
    set sps_scaling_list_data_present_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get amp_enabled_flag() {
        return this.#view.getUint32(24, LE);
    }
    set amp_enabled_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sample_adaptive_offset_enabled_flag() {
        return this.#view.getUint32(28, LE);
    }
    set sample_adaptive_offset_enabled_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pcm_enabled_flag() {
        return this.#view.getUint32(32, LE);
    }
    set pcm_enabled_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pcm_loop_filter_disabled_flag() {
        return this.#view.getUint32(36, LE);
    }
    set pcm_loop_filter_disabled_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get long_term_ref_pics_present_flag() {
        return this.#view.getUint32(40, LE);
    }
    set long_term_ref_pics_present_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get sps_temporal_mvp_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set sps_temporal_mvp_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get strong_intra_smoothing_enabled_flag() {
        return this.#view.getUint32(48, LE);
    }
    set strong_intra_smoothing_enabled_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get vui_parameters_present_flag() {
        return this.#view.getUint32(52, LE);
    }
    set vui_parameters_present_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get sps_extension_present_flag() {
        return this.#view.getUint32(56, LE);
    }
    set sps_extension_present_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sps_range_extension_flag() {
        return this.#view.getUint32(60, LE);
    }
    set sps_range_extension_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get transform_skip_rotation_enabled_flag() {
        return this.#view.getUint32(64, LE);
    }
    set transform_skip_rotation_enabled_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get transform_skip_context_enabled_flag() {
        return this.#view.getUint32(68, LE);
    }
    set transform_skip_context_enabled_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get implicit_rdpcm_enabled_flag() {
        return this.#view.getUint32(72, LE);
    }
    set implicit_rdpcm_enabled_flag(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get explicit_rdpcm_enabled_flag() {
        return this.#view.getUint32(76, LE);
    }
    set explicit_rdpcm_enabled_flag(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get extended_precision_processing_flag() {
        return this.#view.getUint32(80, LE);
    }
    set extended_precision_processing_flag(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get intra_smoothing_disabled_flag() {
        return this.#view.getUint32(84, LE);
    }
    set intra_smoothing_disabled_flag(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get high_precision_offsets_enabled_flag() {
        return this.#view.getUint32(88, LE);
    }
    set high_precision_offsets_enabled_flag(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get persistent_rice_adaptation_enabled_flag() {
        return this.#view.getUint32(92, LE);
    }
    set persistent_rice_adaptation_enabled_flag(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get cabac_bypass_alignment_enabled_flag() {
        return this.#view.getUint32(96, LE);
    }
    set cabac_bypass_alignment_enabled_flag(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get sps_scc_extension_flag() {
        return this.#view.getUint32(100, LE);
    }
    set sps_scc_extension_flag(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get sps_curr_pic_ref_enabled_flag() {
        return this.#view.getUint32(104, LE);
    }
    set sps_curr_pic_ref_enabled_flag(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get palette_mode_enabled_flag() {
        return this.#view.getUint32(108, LE);
    }
    set palette_mode_enabled_flag(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get sps_palette_predictor_initializers_present_flag() {
        return this.#view.getUint32(112, LE);
    }
    set sps_palette_predictor_initializers_present_flag(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get intra_boundary_filtering_disabled_flag() {
        return this.#view.getUint32(116, LE);
    }
    set intra_boundary_filtering_disabled_flag(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
}
export class StdVideoH265SequenceParameterSet {
    static size = 232;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265SequenceParameterSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265SequenceParameterSet(new Uint8Array(StdVideoH265SequenceParameterSet.size));
    }
    static create(data) {
        let s = StdVideoH265SequenceParameterSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.chroma_format_idc && (s.chroma_format_idc = data.chroma_format_idc), void 0 !== data.pic_width_in_luma_samples && (s.pic_width_in_luma_samples = data.pic_width_in_luma_samples), void 0 !== data.pic_height_in_luma_samples && (s.pic_height_in_luma_samples = data.pic_height_in_luma_samples), void 0 !== data.sps_video_parameter_set_id && (s.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.sps_max_sub_layers_minus1 && (s.sps_max_sub_layers_minus1 = data.sps_max_sub_layers_minus1), void 0 !== data.sps_seq_parameter_set_id && (s.sps_seq_parameter_set_id = data.sps_seq_parameter_set_id), void 0 !== data.bit_depth_luma_minus8 && (s.bit_depth_luma_minus8 = data.bit_depth_luma_minus8), void 0 !== data.bit_depth_chroma_minus8 && (s.bit_depth_chroma_minus8 = data.bit_depth_chroma_minus8), void 0 !== data.log2_max_pic_order_cnt_lsb_minus4 && (s.log2_max_pic_order_cnt_lsb_minus4 = data.log2_max_pic_order_cnt_lsb_minus4), void 0 !== data.log2_min_luma_coding_block_size_minus3 && (s.log2_min_luma_coding_block_size_minus3 = data.log2_min_luma_coding_block_size_minus3), void 0 !== data.log2_diff_max_min_luma_coding_block_size && (s.log2_diff_max_min_luma_coding_block_size = data.log2_diff_max_min_luma_coding_block_size), void 0 !== data.log2_min_luma_transform_block_size_minus2 && (s.log2_min_luma_transform_block_size_minus2 = data.log2_min_luma_transform_block_size_minus2), void 0 !== data.log2_diff_max_min_luma_transform_block_size && (s.log2_diff_max_min_luma_transform_block_size = data.log2_diff_max_min_luma_transform_block_size), void 0 !== data.max_transform_hierarchy_depth_inter && (s.max_transform_hierarchy_depth_inter = data.max_transform_hierarchy_depth_inter), void 0 !== data.max_transform_hierarchy_depth_intra && (s.max_transform_hierarchy_depth_intra = data.max_transform_hierarchy_depth_intra), void 0 !== data.num_short_term_ref_pic_sets && (s.num_short_term_ref_pic_sets = data.num_short_term_ref_pic_sets), void 0 !== data.num_long_term_ref_pics_sps && (s.num_long_term_ref_pics_sps = data.num_long_term_ref_pics_sps), void 0 !== data.pcm_sample_bit_depth_luma_minus1 && (s.pcm_sample_bit_depth_luma_minus1 = data.pcm_sample_bit_depth_luma_minus1), void 0 !== data.pcm_sample_bit_depth_chroma_minus1 && (s.pcm_sample_bit_depth_chroma_minus1 = data.pcm_sample_bit_depth_chroma_minus1), void 0 !== data.log2_min_pcm_luma_coding_block_size_minus3 && (s.log2_min_pcm_luma_coding_block_size_minus3 = data.log2_min_pcm_luma_coding_block_size_minus3), void 0 !== data.log2_diff_max_min_pcm_luma_coding_block_size && (s.log2_diff_max_min_pcm_luma_coding_block_size = data.log2_diff_max_min_pcm_luma_coding_block_size), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.palette_max_size && (s.palette_max_size = data.palette_max_size), void 0 !== data.delta_palette_max_predictor_size && (s.delta_palette_max_predictor_size = data.delta_palette_max_predictor_size), void 0 !== data.motion_vector_resolution_control_idc && (s.motion_vector_resolution_control_idc = data.motion_vector_resolution_control_idc), void 0 !== data.sps_num_palette_predictor_initializers_minus1 && (s.sps_num_palette_predictor_initializers_minus1 = data.sps_num_palette_predictor_initializers_minus1), void 0 !== data.conf_win_left_offset && (s.conf_win_left_offset = data.conf_win_left_offset), void 0 !== data.conf_win_right_offset && (s.conf_win_right_offset = data.conf_win_right_offset), void 0 !== data.conf_win_top_offset && (s.conf_win_top_offset = data.conf_win_top_offset), void 0 !== data.conf_win_bottom_offset && (s.conf_win_bottom_offset = data.conf_win_bottom_offset), void 0 !== data.pProfileTierLevel && (s.pProfileTierLevel = data.pProfileTierLevel), void 0 !== data.pDecPicBufMgr && (s.pDecPicBufMgr = data.pDecPicBufMgr), void 0 !== data.pScalingLists && (s.pScalingLists = data.pScalingLists), void 0 !== data.pShortTermRefPicSet && (s.pShortTermRefPicSet = data.pShortTermRefPicSet), void 0 !== data.pLongTermRefPicsSps && (s.pLongTermRefPicsSps = data.pLongTermRefPicsSps), void 0 !== data.pSequenceParameterSetVui && (s.pSequenceParameterSetVui = data.pSequenceParameterSetVui), void 0 !== data.pPredictorPaletteEntries && (s.pPredictorPaletteEntries = data.pPredictorPaletteEntries), s;
    }
    get flags() {
        return new StdVideoH265SpsFlags(this.#data.subarray(0, 0 + StdVideoH265SpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265SpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get chroma_format_idc() {
        return this.#view.getUint32(120, LE);
    }
    set chroma_format_idc(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pic_width_in_luma_samples() {
        return this.#view.getUint32(124, LE);
    }
    set pic_width_in_luma_samples(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get pic_height_in_luma_samples() {
        return this.#view.getUint32(128, LE);
    }
    set pic_height_in_luma_samples(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(132);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(132, Number(value));
    }
    get sps_max_sub_layers_minus1() {
        return this.#view.getUint8(133);
    }
    set sps_max_sub_layers_minus1(value) {
        this.#view.setUint8(133, Number(value));
    }
    get sps_seq_parameter_set_id() {
        return this.#view.getUint8(134);
    }
    set sps_seq_parameter_set_id(value) {
        this.#view.setUint8(134, Number(value));
    }
    get bit_depth_luma_minus8() {
        return this.#view.getUint8(135);
    }
    set bit_depth_luma_minus8(value) {
        this.#view.setUint8(135, Number(value));
    }
    get bit_depth_chroma_minus8() {
        return this.#view.getUint8(136);
    }
    set bit_depth_chroma_minus8(value) {
        this.#view.setUint8(136, Number(value));
    }
    get log2_max_pic_order_cnt_lsb_minus4() {
        return this.#view.getUint8(137);
    }
    set log2_max_pic_order_cnt_lsb_minus4(value) {
        this.#view.setUint8(137, Number(value));
    }
    get log2_min_luma_coding_block_size_minus3() {
        return this.#view.getUint8(138);
    }
    set log2_min_luma_coding_block_size_minus3(value) {
        this.#view.setUint8(138, Number(value));
    }
    get log2_diff_max_min_luma_coding_block_size() {
        return this.#view.getUint8(139);
    }
    set log2_diff_max_min_luma_coding_block_size(value) {
        this.#view.setUint8(139, Number(value));
    }
    get log2_min_luma_transform_block_size_minus2() {
        return this.#view.getUint8(140);
    }
    set log2_min_luma_transform_block_size_minus2(value) {
        this.#view.setUint8(140, Number(value));
    }
    get log2_diff_max_min_luma_transform_block_size() {
        return this.#view.getUint8(141);
    }
    set log2_diff_max_min_luma_transform_block_size(value) {
        this.#view.setUint8(141, Number(value));
    }
    get max_transform_hierarchy_depth_inter() {
        return this.#view.getUint8(142);
    }
    set max_transform_hierarchy_depth_inter(value) {
        this.#view.setUint8(142, Number(value));
    }
    get max_transform_hierarchy_depth_intra() {
        return this.#view.getUint8(143);
    }
    set max_transform_hierarchy_depth_intra(value) {
        this.#view.setUint8(143, Number(value));
    }
    get num_short_term_ref_pic_sets() {
        return this.#view.getUint8(144);
    }
    set num_short_term_ref_pic_sets(value) {
        this.#view.setUint8(144, Number(value));
    }
    get num_long_term_ref_pics_sps() {
        return this.#view.getUint8(145);
    }
    set num_long_term_ref_pics_sps(value) {
        this.#view.setUint8(145, Number(value));
    }
    get pcm_sample_bit_depth_luma_minus1() {
        return this.#view.getUint8(146);
    }
    set pcm_sample_bit_depth_luma_minus1(value) {
        this.#view.setUint8(146, Number(value));
    }
    get pcm_sample_bit_depth_chroma_minus1() {
        return this.#view.getUint8(147);
    }
    set pcm_sample_bit_depth_chroma_minus1(value) {
        this.#view.setUint8(147, Number(value));
    }
    get log2_min_pcm_luma_coding_block_size_minus3() {
        return this.#view.getUint8(148);
    }
    set log2_min_pcm_luma_coding_block_size_minus3(value) {
        this.#view.setUint8(148, Number(value));
    }
    get log2_diff_max_min_pcm_luma_coding_block_size() {
        return this.#view.getUint8(149);
    }
    set log2_diff_max_min_pcm_luma_coding_block_size(value) {
        this.#view.setUint8(149, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(150);
    }
    set reserved1(value) {
        this.#view.setUint8(150, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(151);
    }
    set reserved2(value) {
        this.#view.setUint8(151, Number(value));
    }
    get palette_max_size() {
        return this.#view.getUint8(152);
    }
    set palette_max_size(value) {
        this.#view.setUint8(152, Number(value));
    }
    get delta_palette_max_predictor_size() {
        return this.#view.getUint8(153);
    }
    set delta_palette_max_predictor_size(value) {
        this.#view.setUint8(153, Number(value));
    }
    get motion_vector_resolution_control_idc() {
        return this.#view.getUint8(154);
    }
    set motion_vector_resolution_control_idc(value) {
        this.#view.setUint8(154, Number(value));
    }
    get sps_num_palette_predictor_initializers_minus1() {
        return this.#view.getUint8(155);
    }
    set sps_num_palette_predictor_initializers_minus1(value) {
        this.#view.setUint8(155, Number(value));
    }
    get conf_win_left_offset() {
        return this.#view.getUint32(156, LE);
    }
    set conf_win_left_offset(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get conf_win_right_offset() {
        return this.#view.getUint32(160, LE);
    }
    set conf_win_right_offset(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get conf_win_top_offset() {
        return this.#view.getUint32(164, LE);
    }
    set conf_win_top_offset(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get conf_win_bottom_offset() {
        return this.#view.getUint32(168, LE);
    }
    set conf_win_bottom_offset(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get pProfileTierLevel() {
        return this.#view.getBigUint64(176, LE);
    }
    set pProfileTierLevel(value) {
        this.#view.setBigUint64(176, BigInt(value), LE);
    }
    get pDecPicBufMgr() {
        return this.#view.getBigUint64(184, LE);
    }
    set pDecPicBufMgr(value) {
        this.#view.setBigUint64(184, BigInt(value), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(192, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(192, BigInt(value), LE);
    }
    get pShortTermRefPicSet() {
        return this.#view.getBigUint64(200, LE);
    }
    set pShortTermRefPicSet(value) {
        this.#view.setBigUint64(200, BigInt(value), LE);
    }
    get pLongTermRefPicsSps() {
        return this.#view.getBigUint64(208, LE);
    }
    set pLongTermRefPicsSps(value) {
        this.#view.setBigUint64(208, BigInt(value), LE);
    }
    get pSequenceParameterSetVui() {
        return this.#view.getBigUint64(216, LE);
    }
    set pSequenceParameterSetVui(value) {
        this.#view.setBigUint64(216, BigInt(value), LE);
    }
    get pPredictorPaletteEntries() {
        return this.#view.getBigUint64(224, LE);
    }
    set pPredictorPaletteEntries(value) {
        this.#view.setBigUint64(224, BigInt(value), LE);
    }
}
export class StdVideoH265PpsFlags {
    static size = 124;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265PpsFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265PpsFlags(new Uint8Array(StdVideoH265PpsFlags.size));
    }
    static create(data) {
        let s = StdVideoH265PpsFlags.alloc();
        return void 0 !== data.dependent_slice_segments_enabled_flag && (s.dependent_slice_segments_enabled_flag = data.dependent_slice_segments_enabled_flag), void 0 !== data.output_flag_present_flag && (s.output_flag_present_flag = data.output_flag_present_flag), void 0 !== data.sign_data_hiding_enabled_flag && (s.sign_data_hiding_enabled_flag = data.sign_data_hiding_enabled_flag), void 0 !== data.cabac_init_present_flag && (s.cabac_init_present_flag = data.cabac_init_present_flag), void 0 !== data.constrained_intra_pred_flag && (s.constrained_intra_pred_flag = data.constrained_intra_pred_flag), void 0 !== data.transform_skip_enabled_flag && (s.transform_skip_enabled_flag = data.transform_skip_enabled_flag), void 0 !== data.cu_qp_delta_enabled_flag && (s.cu_qp_delta_enabled_flag = data.cu_qp_delta_enabled_flag), void 0 !== data.pps_slice_chroma_qp_offsets_present_flag && (s.pps_slice_chroma_qp_offsets_present_flag = data.pps_slice_chroma_qp_offsets_present_flag), void 0 !== data.weighted_pred_flag && (s.weighted_pred_flag = data.weighted_pred_flag), void 0 !== data.weighted_bipred_flag && (s.weighted_bipred_flag = data.weighted_bipred_flag), void 0 !== data.transquant_bypass_enabled_flag && (s.transquant_bypass_enabled_flag = data.transquant_bypass_enabled_flag), void 0 !== data.tiles_enabled_flag && (s.tiles_enabled_flag = data.tiles_enabled_flag), void 0 !== data.entropy_coding_sync_enabled_flag && (s.entropy_coding_sync_enabled_flag = data.entropy_coding_sync_enabled_flag), void 0 !== data.uniform_spacing_flag && (s.uniform_spacing_flag = data.uniform_spacing_flag), void 0 !== data.loop_filter_across_tiles_enabled_flag && (s.loop_filter_across_tiles_enabled_flag = data.loop_filter_across_tiles_enabled_flag), void 0 !== data.pps_loop_filter_across_slices_enabled_flag && (s.pps_loop_filter_across_slices_enabled_flag = data.pps_loop_filter_across_slices_enabled_flag), void 0 !== data.deblocking_filter_control_present_flag && (s.deblocking_filter_control_present_flag = data.deblocking_filter_control_present_flag), void 0 !== data.deblocking_filter_override_enabled_flag && (s.deblocking_filter_override_enabled_flag = data.deblocking_filter_override_enabled_flag), void 0 !== data.pps_deblocking_filter_disabled_flag && (s.pps_deblocking_filter_disabled_flag = data.pps_deblocking_filter_disabled_flag), void 0 !== data.pps_scaling_list_data_present_flag && (s.pps_scaling_list_data_present_flag = data.pps_scaling_list_data_present_flag), void 0 !== data.lists_modification_present_flag && (s.lists_modification_present_flag = data.lists_modification_present_flag), void 0 !== data.slice_segment_header_extension_present_flag && (s.slice_segment_header_extension_present_flag = data.slice_segment_header_extension_present_flag), void 0 !== data.pps_extension_present_flag && (s.pps_extension_present_flag = data.pps_extension_present_flag), void 0 !== data.cross_component_prediction_enabled_flag && (s.cross_component_prediction_enabled_flag = data.cross_component_prediction_enabled_flag), void 0 !== data.chroma_qp_offset_list_enabled_flag && (s.chroma_qp_offset_list_enabled_flag = data.chroma_qp_offset_list_enabled_flag), void 0 !== data.pps_curr_pic_ref_enabled_flag && (s.pps_curr_pic_ref_enabled_flag = data.pps_curr_pic_ref_enabled_flag), void 0 !== data.residual_adaptive_colour_transform_enabled_flag && (s.residual_adaptive_colour_transform_enabled_flag = data.residual_adaptive_colour_transform_enabled_flag), void 0 !== data.pps_slice_act_qp_offsets_present_flag && (s.pps_slice_act_qp_offsets_present_flag = data.pps_slice_act_qp_offsets_present_flag), void 0 !== data.pps_palette_predictor_initializers_present_flag && (s.pps_palette_predictor_initializers_present_flag = data.pps_palette_predictor_initializers_present_flag), void 0 !== data.monochrome_palette_flag && (s.monochrome_palette_flag = data.monochrome_palette_flag), void 0 !== data.pps_range_extension_flag && (s.pps_range_extension_flag = data.pps_range_extension_flag), s;
    }
    get dependent_slice_segments_enabled_flag() {
        return this.#view.getUint32(0, LE);
    }
    set dependent_slice_segments_enabled_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get output_flag_present_flag() {
        return this.#view.getUint32(4, LE);
    }
    set output_flag_present_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sign_data_hiding_enabled_flag() {
        return this.#view.getUint32(8, LE);
    }
    set sign_data_hiding_enabled_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get cabac_init_present_flag() {
        return this.#view.getUint32(12, LE);
    }
    set cabac_init_present_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get constrained_intra_pred_flag() {
        return this.#view.getUint32(16, LE);
    }
    set constrained_intra_pred_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transform_skip_enabled_flag() {
        return this.#view.getUint32(20, LE);
    }
    set transform_skip_enabled_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get cu_qp_delta_enabled_flag() {
        return this.#view.getUint32(24, LE);
    }
    set cu_qp_delta_enabled_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pps_slice_chroma_qp_offsets_present_flag() {
        return this.#view.getUint32(28, LE);
    }
    set pps_slice_chroma_qp_offsets_present_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get weighted_pred_flag() {
        return this.#view.getUint32(32, LE);
    }
    set weighted_pred_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get weighted_bipred_flag() {
        return this.#view.getUint32(36, LE);
    }
    set weighted_bipred_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get transquant_bypass_enabled_flag() {
        return this.#view.getUint32(40, LE);
    }
    set transquant_bypass_enabled_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get tiles_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set tiles_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get entropy_coding_sync_enabled_flag() {
        return this.#view.getUint32(48, LE);
    }
    set entropy_coding_sync_enabled_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get uniform_spacing_flag() {
        return this.#view.getUint32(52, LE);
    }
    set uniform_spacing_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get loop_filter_across_tiles_enabled_flag() {
        return this.#view.getUint32(56, LE);
    }
    set loop_filter_across_tiles_enabled_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pps_loop_filter_across_slices_enabled_flag() {
        return this.#view.getUint32(60, LE);
    }
    set pps_loop_filter_across_slices_enabled_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get deblocking_filter_control_present_flag() {
        return this.#view.getUint32(64, LE);
    }
    set deblocking_filter_control_present_flag(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get deblocking_filter_override_enabled_flag() {
        return this.#view.getUint32(68, LE);
    }
    set deblocking_filter_override_enabled_flag(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get pps_deblocking_filter_disabled_flag() {
        return this.#view.getUint32(72, LE);
    }
    set pps_deblocking_filter_disabled_flag(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pps_scaling_list_data_present_flag() {
        return this.#view.getUint32(76, LE);
    }
    set pps_scaling_list_data_present_flag(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get lists_modification_present_flag() {
        return this.#view.getUint32(80, LE);
    }
    set lists_modification_present_flag(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get slice_segment_header_extension_present_flag() {
        return this.#view.getUint32(84, LE);
    }
    set slice_segment_header_extension_present_flag(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get pps_extension_present_flag() {
        return this.#view.getUint32(88, LE);
    }
    set pps_extension_present_flag(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get cross_component_prediction_enabled_flag() {
        return this.#view.getUint32(92, LE);
    }
    set cross_component_prediction_enabled_flag(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get chroma_qp_offset_list_enabled_flag() {
        return this.#view.getUint32(96, LE);
    }
    set chroma_qp_offset_list_enabled_flag(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get pps_curr_pic_ref_enabled_flag() {
        return this.#view.getUint32(100, LE);
    }
    set pps_curr_pic_ref_enabled_flag(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get residual_adaptive_colour_transform_enabled_flag() {
        return this.#view.getUint32(104, LE);
    }
    set residual_adaptive_colour_transform_enabled_flag(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pps_slice_act_qp_offsets_present_flag() {
        return this.#view.getUint32(108, LE);
    }
    set pps_slice_act_qp_offsets_present_flag(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get pps_palette_predictor_initializers_present_flag() {
        return this.#view.getUint32(112, LE);
    }
    set pps_palette_predictor_initializers_present_flag(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get monochrome_palette_flag() {
        return this.#view.getUint32(116, LE);
    }
    set monochrome_palette_flag(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get pps_range_extension_flag() {
        return this.#view.getUint32(120, LE);
    }
    set pps_range_extension_flag(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
}
export class StdVideoH265PictureParameterSet {
    static size = 264;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoH265PictureParameterSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoH265PictureParameterSet(new Uint8Array(StdVideoH265PictureParameterSet.size));
    }
    static create(data) {
        let s = StdVideoH265PictureParameterSet.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pps_pic_parameter_set_id && (s.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (s.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.sps_video_parameter_set_id && (s.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.num_extra_slice_header_bits && (s.num_extra_slice_header_bits = data.num_extra_slice_header_bits), void 0 !== data.num_ref_idx_l0_default_active_minus1 && (s.num_ref_idx_l0_default_active_minus1 = data.num_ref_idx_l0_default_active_minus1), void 0 !== data.num_ref_idx_l1_default_active_minus1 && (s.num_ref_idx_l1_default_active_minus1 = data.num_ref_idx_l1_default_active_minus1), void 0 !== data.init_qp_minus26 && (s.init_qp_minus26 = data.init_qp_minus26), void 0 !== data.diff_cu_qp_delta_depth && (s.diff_cu_qp_delta_depth = data.diff_cu_qp_delta_depth), void 0 !== data.pps_cb_qp_offset && (s.pps_cb_qp_offset = data.pps_cb_qp_offset), void 0 !== data.pps_cr_qp_offset && (s.pps_cr_qp_offset = data.pps_cr_qp_offset), void 0 !== data.pps_beta_offset_div2 && (s.pps_beta_offset_div2 = data.pps_beta_offset_div2), void 0 !== data.pps_tc_offset_div2 && (s.pps_tc_offset_div2 = data.pps_tc_offset_div2), void 0 !== data.log2_parallel_merge_level_minus2 && (s.log2_parallel_merge_level_minus2 = data.log2_parallel_merge_level_minus2), void 0 !== data.log2_max_transform_skip_block_size_minus2 && (s.log2_max_transform_skip_block_size_minus2 = data.log2_max_transform_skip_block_size_minus2), void 0 !== data.diff_cu_chroma_qp_offset_depth && (s.diff_cu_chroma_qp_offset_depth = data.diff_cu_chroma_qp_offset_depth), void 0 !== data.chroma_qp_offset_list_len_minus1 && (s.chroma_qp_offset_list_len_minus1 = data.chroma_qp_offset_list_len_minus1), void 0 !== data.cb_qp_offset_list && (s.cb_qp_offset_list = data.cb_qp_offset_list), void 0 !== data.cr_qp_offset_list && (s.cr_qp_offset_list = data.cr_qp_offset_list), void 0 !== data.log2_sao_offset_scale_luma && (s.log2_sao_offset_scale_luma = data.log2_sao_offset_scale_luma), void 0 !== data.log2_sao_offset_scale_chroma && (s.log2_sao_offset_scale_chroma = data.log2_sao_offset_scale_chroma), void 0 !== data.pps_act_y_qp_offset_plus5 && (s.pps_act_y_qp_offset_plus5 = data.pps_act_y_qp_offset_plus5), void 0 !== data.pps_act_cb_qp_offset_plus5 && (s.pps_act_cb_qp_offset_plus5 = data.pps_act_cb_qp_offset_plus5), void 0 !== data.pps_act_cr_qp_offset_plus3 && (s.pps_act_cr_qp_offset_plus3 = data.pps_act_cr_qp_offset_plus3), void 0 !== data.pps_num_palette_predictor_initializers && (s.pps_num_palette_predictor_initializers = data.pps_num_palette_predictor_initializers), void 0 !== data.luma_bit_depth_entry_minus8 && (s.luma_bit_depth_entry_minus8 = data.luma_bit_depth_entry_minus8), void 0 !== data.chroma_bit_depth_entry_minus8 && (s.chroma_bit_depth_entry_minus8 = data.chroma_bit_depth_entry_minus8), void 0 !== data.num_tile_columns_minus1 && (s.num_tile_columns_minus1 = data.num_tile_columns_minus1), void 0 !== data.num_tile_rows_minus1 && (s.num_tile_rows_minus1 = data.num_tile_rows_minus1), void 0 !== data.reserved1 && (s.reserved1 = data.reserved1), void 0 !== data.reserved2 && (s.reserved2 = data.reserved2), void 0 !== data.column_width_minus1 && (s.column_width_minus1 = data.column_width_minus1), void 0 !== data.row_height_minus1 && (s.row_height_minus1 = data.row_height_minus1), void 0 !== data.reserved3 && (s.reserved3 = data.reserved3), void 0 !== data.pScalingLists && (s.pScalingLists = data.pScalingLists), void 0 !== data.pPredictorPaletteEntries && (s.pPredictorPaletteEntries = data.pPredictorPaletteEntries), s;
    }
    get flags() {
        return new StdVideoH265PpsFlags(this.#data.subarray(0, 0 + StdVideoH265PpsFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoH265PpsFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(124);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(124, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(125);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(125, Number(value));
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(126);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(126, Number(value));
    }
    get num_extra_slice_header_bits() {
        return this.#view.getUint8(127);
    }
    set num_extra_slice_header_bits(value) {
        this.#view.setUint8(127, Number(value));
    }
    get num_ref_idx_l0_default_active_minus1() {
        return this.#view.getUint8(128);
    }
    set num_ref_idx_l0_default_active_minus1(value) {
        this.#view.setUint8(128, Number(value));
    }
    get num_ref_idx_l1_default_active_minus1() {
        return this.#view.getUint8(129);
    }
    set num_ref_idx_l1_default_active_minus1(value) {
        this.#view.setUint8(129, Number(value));
    }
    get init_qp_minus26() {
        return this.#view.getInt8(130);
    }
    set init_qp_minus26(value) {
        this.#view.setInt8(130, Number(value));
    }
    get diff_cu_qp_delta_depth() {
        return this.#view.getUint8(131);
    }
    set diff_cu_qp_delta_depth(value) {
        this.#view.setUint8(131, Number(value));
    }
    get pps_cb_qp_offset() {
        return this.#view.getInt8(132);
    }
    set pps_cb_qp_offset(value) {
        this.#view.setInt8(132, Number(value));
    }
    get pps_cr_qp_offset() {
        return this.#view.getInt8(133);
    }
    set pps_cr_qp_offset(value) {
        this.#view.setInt8(133, Number(value));
    }
    get pps_beta_offset_div2() {
        return this.#view.getInt8(134);
    }
    set pps_beta_offset_div2(value) {
        this.#view.setInt8(134, Number(value));
    }
    get pps_tc_offset_div2() {
        return this.#view.getInt8(135);
    }
    set pps_tc_offset_div2(value) {
        this.#view.setInt8(135, Number(value));
    }
    get log2_parallel_merge_level_minus2() {
        return this.#view.getUint8(136);
    }
    set log2_parallel_merge_level_minus2(value) {
        this.#view.setUint8(136, Number(value));
    }
    get log2_max_transform_skip_block_size_minus2() {
        return this.#view.getUint8(137);
    }
    set log2_max_transform_skip_block_size_minus2(value) {
        this.#view.setUint8(137, Number(value));
    }
    get diff_cu_chroma_qp_offset_depth() {
        return this.#view.getUint8(138);
    }
    set diff_cu_chroma_qp_offset_depth(value) {
        this.#view.setUint8(138, Number(value));
    }
    get chroma_qp_offset_list_len_minus1() {
        return this.#view.getUint8(139);
    }
    set chroma_qp_offset_list_len_minus1(value) {
        this.#view.setUint8(139, Number(value));
    }
    get cb_qp_offset_list() {
        let result = [];
        for(let i = 0; i < 6; i++)result.push(this.#view.getInt8(140 + 1 * i));
        return result;
    }
    set cb_qp_offset_list(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(140 + 1 * i, Number(value[i]));
    }
    get cr_qp_offset_list() {
        let result = [];
        for(let i = 0; i < 6; i++)result.push(this.#view.getInt8(146 + 1 * i));
        return result;
    }
    set cr_qp_offset_list(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(146 + 1 * i, Number(value[i]));
    }
    get log2_sao_offset_scale_luma() {
        return this.#view.getUint8(152);
    }
    set log2_sao_offset_scale_luma(value) {
        this.#view.setUint8(152, Number(value));
    }
    get log2_sao_offset_scale_chroma() {
        return this.#view.getUint8(153);
    }
    set log2_sao_offset_scale_chroma(value) {
        this.#view.setUint8(153, Number(value));
    }
    get pps_act_y_qp_offset_plus5() {
        return this.#view.getInt8(154);
    }
    set pps_act_y_qp_offset_plus5(value) {
        this.#view.setInt8(154, Number(value));
    }
    get pps_act_cb_qp_offset_plus5() {
        return this.#view.getInt8(155);
    }
    set pps_act_cb_qp_offset_plus5(value) {
        this.#view.setInt8(155, Number(value));
    }
    get pps_act_cr_qp_offset_plus3() {
        return this.#view.getInt8(156);
    }
    set pps_act_cr_qp_offset_plus3(value) {
        this.#view.setInt8(156, Number(value));
    }
    get pps_num_palette_predictor_initializers() {
        return this.#view.getUint8(157);
    }
    set pps_num_palette_predictor_initializers(value) {
        this.#view.setUint8(157, Number(value));
    }
    get luma_bit_depth_entry_minus8() {
        return this.#view.getUint8(158);
    }
    set luma_bit_depth_entry_minus8(value) {
        this.#view.setUint8(158, Number(value));
    }
    get chroma_bit_depth_entry_minus8() {
        return this.#view.getUint8(159);
    }
    set chroma_bit_depth_entry_minus8(value) {
        this.#view.setUint8(159, Number(value));
    }
    get num_tile_columns_minus1() {
        return this.#view.getUint8(160);
    }
    set num_tile_columns_minus1(value) {
        this.#view.setUint8(160, Number(value));
    }
    get num_tile_rows_minus1() {
        return this.#view.getUint8(161);
    }
    set num_tile_rows_minus1(value) {
        this.#view.setUint8(161, Number(value));
    }
    get reserved1() {
        return this.#view.getUint8(162);
    }
    set reserved1(value) {
        this.#view.setUint8(162, Number(value));
    }
    get reserved2() {
        return this.#view.getUint8(163);
    }
    set reserved2(value) {
        this.#view.setUint8(163, Number(value));
    }
    get column_width_minus1() {
        let result = [];
        for(let i = 0; i < 19; i++)result.push(this.#view.getUint16(164 + 2 * i, LE));
        return result;
    }
    set column_width_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(164 + 2 * i, Number(value[i]), LE);
    }
    get row_height_minus1() {
        let result = [];
        for(let i = 0; i < 21; i++)result.push(this.#view.getUint16(202 + 2 * i, LE));
        return result;
    }
    set row_height_minus1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint16(202 + 2 * i, Number(value[i]), LE);
    }
    get reserved3() {
        return this.#view.getUint32(244, LE);
    }
    set reserved3(value) {
        this.#view.setUint32(244, Number(value), LE);
    }
    get pScalingLists() {
        return this.#view.getBigUint64(248, LE);
    }
    set pScalingLists(value) {
        this.#view.setBigUint64(248, BigInt(value), LE);
    }
    get pPredictorPaletteEntries() {
        return this.#view.getBigUint64(256, LE);
    }
    set pPredictorPaletteEntries(value) {
        this.#view.setBigUint64(256, BigInt(value), LE);
    }
}
export class StdVideoDecodeH265PictureInfoFlags {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH265PictureInfoFlags(new Uint8Array(StdVideoDecodeH265PictureInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoDecodeH265PictureInfoFlags.alloc();
        return void 0 !== data.IrapPicFlag && (s.IrapPicFlag = data.IrapPicFlag), void 0 !== data.IdrPicFlag && (s.IdrPicFlag = data.IdrPicFlag), void 0 !== data.IsReference && (s.IsReference = data.IsReference), void 0 !== data.short_term_ref_pic_set_sps_flag && (s.short_term_ref_pic_set_sps_flag = data.short_term_ref_pic_set_sps_flag), s;
    }
    get IrapPicFlag() {
        return this.#view.getUint32(0, LE);
    }
    set IrapPicFlag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get IdrPicFlag() {
        return this.#view.getUint32(4, LE);
    }
    set IdrPicFlag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get IsReference() {
        return this.#view.getUint32(8, LE);
    }
    set IsReference(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get short_term_ref_pic_set_sps_flag() {
        return this.#view.getUint32(12, LE);
    }
    set short_term_ref_pic_set_sps_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class StdVideoDecodeH265PictureInfo {
    static size = 52;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH265PictureInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH265PictureInfo(new Uint8Array(StdVideoDecodeH265PictureInfo.size));
    }
    static create(data) {
        let s = StdVideoDecodeH265PictureInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.sps_video_parameter_set_id && (s.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (s.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.pps_pic_parameter_set_id && (s.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.NumDeltaPocsOfRefRpsIdx && (s.NumDeltaPocsOfRefRpsIdx = data.NumDeltaPocsOfRefRpsIdx), void 0 !== data.PicOrderCntVal && (s.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.NumBitsForSTRefPicSetInSlice && (s.NumBitsForSTRefPicSetInSlice = data.NumBitsForSTRefPicSetInSlice), void 0 !== data.reserved && (s.reserved = data.reserved), void 0 !== data.RefPicSetStCurrBefore && (s.RefPicSetStCurrBefore = data.RefPicSetStCurrBefore), void 0 !== data.RefPicSetStCurrAfter && (s.RefPicSetStCurrAfter = data.RefPicSetStCurrAfter), void 0 !== data.RefPicSetLtCurr && (s.RefPicSetLtCurr = data.RefPicSetLtCurr), s;
    }
    get flags() {
        return new StdVideoDecodeH265PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH265PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(16);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(17);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(17, Number(value));
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(18);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(18, Number(value));
    }
    get NumDeltaPocsOfRefRpsIdx() {
        return this.#view.getUint8(19);
    }
    set NumDeltaPocsOfRefRpsIdx(value) {
        this.#view.setUint8(19, Number(value));
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(20, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(20, Number(value), LE);
    }
    get NumBitsForSTRefPicSetInSlice() {
        return this.#view.getUint16(24, LE);
    }
    set NumBitsForSTRefPicSetInSlice(value) {
        this.#view.setUint16(24, Number(value), LE);
    }
    get reserved() {
        return this.#view.getUint16(26, LE);
    }
    set reserved(value) {
        this.#view.setUint16(26, Number(value), LE);
    }
    get RefPicSetStCurrBefore() {
        let result = [];
        for(let i = 0; i < 8; i++)result.push(this.#view.getUint8(28 + 1 * i));
        return result;
    }
    set RefPicSetStCurrBefore(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(28 + 1 * i, Number(value[i]));
    }
    get RefPicSetStCurrAfter() {
        let result = [];
        for(let i = 0; i < 8; i++)result.push(this.#view.getUint8(36 + 1 * i));
        return result;
    }
    set RefPicSetStCurrAfter(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(36 + 1 * i, Number(value[i]));
    }
    get RefPicSetLtCurr() {
        let result = [];
        for(let i = 0; i < 8; i++)result.push(this.#view.getUint8(44 + 1 * i));
        return result;
    }
    set RefPicSetLtCurr(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(44 + 1 * i, Number(value[i]));
    }
}
export class StdVideoDecodeH265ReferenceInfoFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH265ReferenceInfoFlags(new Uint8Array(StdVideoDecodeH265ReferenceInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoDecodeH265ReferenceInfoFlags.alloc();
        return void 0 !== data.used_for_long_term_reference && (s.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.unused_for_reference && (s.unused_for_reference = data.unused_for_reference), s;
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get unused_for_reference() {
        return this.#view.getUint32(4, LE);
    }
    set unused_for_reference(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoDecodeH265ReferenceInfo {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoDecodeH265ReferenceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoDecodeH265ReferenceInfo(new Uint8Array(StdVideoDecodeH265ReferenceInfo.size));
    }
    static create(data) {
        let s = StdVideoDecodeH265ReferenceInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.PicOrderCntVal && (s.PicOrderCntVal = data.PicOrderCntVal), s;
    }
    get flags() {
        return new StdVideoDecodeH265ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoDecodeH265ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoDecodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class StdVideoEncodeH265WeightTableFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265WeightTableFlags(new Uint8Array(StdVideoEncodeH265WeightTableFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265WeightTableFlags.alloc();
        return void 0 !== data.luma_weight_l0_flag && (s.luma_weight_l0_flag = data.luma_weight_l0_flag), void 0 !== data.chroma_weight_l0_flag && (s.chroma_weight_l0_flag = data.chroma_weight_l0_flag), void 0 !== data.luma_weight_l1_flag && (s.luma_weight_l1_flag = data.luma_weight_l1_flag), void 0 !== data.chroma_weight_l1_flag && (s.chroma_weight_l1_flag = data.chroma_weight_l1_flag), s;
    }
    get luma_weight_l0_flag() {
        return this.#view.getUint16(0, LE);
    }
    set luma_weight_l0_flag(value) {
        this.#view.setUint16(0, Number(value), LE);
    }
    get chroma_weight_l0_flag() {
        return this.#view.getUint16(2, LE);
    }
    set chroma_weight_l0_flag(value) {
        this.#view.setUint16(2, Number(value), LE);
    }
    get luma_weight_l1_flag() {
        return this.#view.getUint16(4, LE);
    }
    set luma_weight_l1_flag(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get chroma_weight_l1_flag() {
        return this.#view.getUint16(6, LE);
    }
    set chroma_weight_l1_flag(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class StdVideoEncodeH265WeightTable {
    static size = 190;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265WeightTable.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265WeightTable(new Uint8Array(StdVideoEncodeH265WeightTable.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265WeightTable.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.luma_log2_weight_denom && (s.luma_log2_weight_denom = data.luma_log2_weight_denom), void 0 !== data.delta_chroma_log2_weight_denom && (s.delta_chroma_log2_weight_denom = data.delta_chroma_log2_weight_denom), void 0 !== data.delta_luma_weight_l0 && (s.delta_luma_weight_l0 = data.delta_luma_weight_l0), void 0 !== data.luma_offset_l0 && (s.luma_offset_l0 = data.luma_offset_l0), void 0 !== data.delta_chroma_weight_l0 && (s.delta_chroma_weight_l0 = data.delta_chroma_weight_l0), void 0 !== data.delta_chroma_offset_l0 && (s.delta_chroma_offset_l0 = data.delta_chroma_offset_l0), void 0 !== data.delta_luma_weight_l1 && (s.delta_luma_weight_l1 = data.delta_luma_weight_l1), void 0 !== data.luma_offset_l1 && (s.luma_offset_l1 = data.luma_offset_l1), void 0 !== data.delta_chroma_weight_l1 && (s.delta_chroma_weight_l1 = data.delta_chroma_weight_l1), void 0 !== data.delta_chroma_offset_l1 && (s.delta_chroma_offset_l1 = data.delta_chroma_offset_l1), s;
    }
    get flags() {
        return new StdVideoEncodeH265WeightTableFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265WeightTableFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265WeightTableFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get luma_log2_weight_denom() {
        return this.#view.getUint8(8);
    }
    set luma_log2_weight_denom(value) {
        this.#view.setUint8(8, Number(value));
    }
    get delta_chroma_log2_weight_denom() {
        return this.#view.getInt8(9);
    }
    set delta_chroma_log2_weight_denom(value) {
        this.#view.setInt8(9, Number(value));
    }
    get delta_luma_weight_l0() {
        let result = [];
        for(let i = 0; i < 15; i++)result.push(this.#view.getInt8(10 + 1 * i));
        return result;
    }
    set delta_luma_weight_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(10 + 1 * i, Number(value[i]));
    }
    get luma_offset_l0() {
        let result = [];
        for(let i = 0; i < 15; i++)result.push(this.#view.getInt8(25 + 1 * i));
        return result;
    }
    set luma_offset_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(25 + 1 * i, Number(value[i]));
    }
    get delta_chroma_weight_l0() {
        let result = [];
        for(let i = 0; i < 30; i++)result.push(this.#view.getInt8(40 + 1 * i));
        return result;
    }
    set delta_chroma_weight_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(40 + 1 * i, Number(value[i]));
    }
    get delta_chroma_offset_l0() {
        let result = [];
        for(let i = 0; i < 30; i++)result.push(this.#view.getInt8(70 + 1 * i));
        return result;
    }
    set delta_chroma_offset_l0(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(70 + 1 * i, Number(value[i]));
    }
    get delta_luma_weight_l1() {
        let result = [];
        for(let i = 0; i < 15; i++)result.push(this.#view.getInt8(100 + 1 * i));
        return result;
    }
    set delta_luma_weight_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(100 + 1 * i, Number(value[i]));
    }
    get luma_offset_l1() {
        let result = [];
        for(let i = 0; i < 15; i++)result.push(this.#view.getInt8(115 + 1 * i));
        return result;
    }
    set luma_offset_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(115 + 1 * i, Number(value[i]));
    }
    get delta_chroma_weight_l1() {
        let result = [];
        for(let i = 0; i < 30; i++)result.push(this.#view.getInt8(130 + 1 * i));
        return result;
    }
    set delta_chroma_weight_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(130 + 1 * i, Number(value[i]));
    }
    get delta_chroma_offset_l1() {
        let result = [];
        for(let i = 0; i < 30; i++)result.push(this.#view.getInt8(160 + 1 * i));
        return result;
    }
    set delta_chroma_offset_l1(value) {
        for(let i = 0; i < value.length; i++)this.#view.setInt8(160 + 1 * i, Number(value[i]));
    }
}
export class StdVideoEncodeH265SliceSegmentLongTermRefPics {
    static size = 148;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265SliceSegmentLongTermRefPics.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265SliceSegmentLongTermRefPics(new Uint8Array(StdVideoEncodeH265SliceSegmentLongTermRefPics.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265SliceSegmentLongTermRefPics.alloc();
        return void 0 !== data.num_long_term_sps && (s.num_long_term_sps = data.num_long_term_sps), void 0 !== data.num_long_term_pics && (s.num_long_term_pics = data.num_long_term_pics), void 0 !== data.lt_idx_sps && (s.lt_idx_sps = data.lt_idx_sps), void 0 !== data.poc_lsb_lt && (s.poc_lsb_lt = data.poc_lsb_lt), void 0 !== data.used_by_curr_pic_lt_flag && (s.used_by_curr_pic_lt_flag = data.used_by_curr_pic_lt_flag), void 0 !== data.delta_poc_msb_present_flag && (s.delta_poc_msb_present_flag = data.delta_poc_msb_present_flag), void 0 !== data.delta_poc_msb_cycle_lt && (s.delta_poc_msb_cycle_lt = data.delta_poc_msb_cycle_lt), s;
    }
    get num_long_term_sps() {
        return this.#view.getUint8(0);
    }
    set num_long_term_sps(value) {
        this.#view.setUint8(0, Number(value));
    }
    get num_long_term_pics() {
        return this.#view.getUint8(1);
    }
    set num_long_term_pics(value) {
        this.#view.setUint8(1, Number(value));
    }
    get lt_idx_sps() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint8(2 + 1 * i));
        return result;
    }
    set lt_idx_sps(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(2 + 1 * i, Number(value[i]));
    }
    get poc_lsb_lt() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(34 + 1 * i));
        return result;
    }
    set poc_lsb_lt(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(34 + 1 * i, Number(value[i]));
    }
    get used_by_curr_pic_lt_flag() {
        return this.#view.getUint16(50, LE);
    }
    set used_by_curr_pic_lt_flag(value) {
        this.#view.setUint16(50, Number(value), LE);
    }
    get delta_poc_msb_present_flag() {
        let result = [];
        for(let i = 0; i < 48; i++)result.push(this.#view.getUint8(52 + 1 * i));
        return result;
    }
    set delta_poc_msb_present_flag(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(52 + 1 * i, Number(value[i]));
    }
    get delta_poc_msb_cycle_lt() {
        let result = [];
        for(let i = 0; i < 48; i++)result.push(this.#view.getUint8(100 + 1 * i));
        return result;
    }
    set delta_poc_msb_cycle_lt(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(100 + 1 * i, Number(value[i]));
    }
}
export class StdVideoEncodeH265SliceSegmentHeaderFlags {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265SliceSegmentHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265SliceSegmentHeaderFlags(new Uint8Array(StdVideoEncodeH265SliceSegmentHeaderFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265SliceSegmentHeaderFlags.alloc();
        return void 0 !== data.first_slice_segment_in_pic_flag && (s.first_slice_segment_in_pic_flag = data.first_slice_segment_in_pic_flag), void 0 !== data.no_output_of_prior_pics_flag && (s.no_output_of_prior_pics_flag = data.no_output_of_prior_pics_flag), void 0 !== data.dependent_slice_segment_flag && (s.dependent_slice_segment_flag = data.dependent_slice_segment_flag), void 0 !== data.pic_output_flag && (s.pic_output_flag = data.pic_output_flag), void 0 !== data.short_term_ref_pic_set_sps_flag && (s.short_term_ref_pic_set_sps_flag = data.short_term_ref_pic_set_sps_flag), void 0 !== data.slice_temporal_mvp_enable_flag && (s.slice_temporal_mvp_enable_flag = data.slice_temporal_mvp_enable_flag), void 0 !== data.slice_sao_luma_flag && (s.slice_sao_luma_flag = data.slice_sao_luma_flag), void 0 !== data.slice_sao_chroma_flag && (s.slice_sao_chroma_flag = data.slice_sao_chroma_flag), void 0 !== data.num_ref_idx_active_override_flag && (s.num_ref_idx_active_override_flag = data.num_ref_idx_active_override_flag), void 0 !== data.mvd_l1_zero_flag && (s.mvd_l1_zero_flag = data.mvd_l1_zero_flag), void 0 !== data.cabac_init_flag && (s.cabac_init_flag = data.cabac_init_flag), void 0 !== data.cu_chroma_qp_offset_enabled_flag && (s.cu_chroma_qp_offset_enabled_flag = data.cu_chroma_qp_offset_enabled_flag), void 0 !== data.deblocking_filter_override_flag && (s.deblocking_filter_override_flag = data.deblocking_filter_override_flag), void 0 !== data.slice_deblocking_filter_disabled_flag && (s.slice_deblocking_filter_disabled_flag = data.slice_deblocking_filter_disabled_flag), void 0 !== data.collocated_from_l0_flag && (s.collocated_from_l0_flag = data.collocated_from_l0_flag), void 0 !== data.slice_loop_filter_across_slices_enabled_flag && (s.slice_loop_filter_across_slices_enabled_flag = data.slice_loop_filter_across_slices_enabled_flag), s;
    }
    get first_slice_segment_in_pic_flag() {
        return this.#view.getUint32(0, LE);
    }
    set first_slice_segment_in_pic_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get no_output_of_prior_pics_flag() {
        return this.#view.getUint32(4, LE);
    }
    set no_output_of_prior_pics_flag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dependent_slice_segment_flag() {
        return this.#view.getUint32(8, LE);
    }
    set dependent_slice_segment_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pic_output_flag() {
        return this.#view.getUint32(12, LE);
    }
    set pic_output_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get short_term_ref_pic_set_sps_flag() {
        return this.#view.getUint32(16, LE);
    }
    set short_term_ref_pic_set_sps_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get slice_temporal_mvp_enable_flag() {
        return this.#view.getUint32(20, LE);
    }
    set slice_temporal_mvp_enable_flag(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get slice_sao_luma_flag() {
        return this.#view.getUint32(24, LE);
    }
    set slice_sao_luma_flag(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get slice_sao_chroma_flag() {
        return this.#view.getUint32(28, LE);
    }
    set slice_sao_chroma_flag(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get num_ref_idx_active_override_flag() {
        return this.#view.getUint32(32, LE);
    }
    set num_ref_idx_active_override_flag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get mvd_l1_zero_flag() {
        return this.#view.getUint32(36, LE);
    }
    set mvd_l1_zero_flag(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get cabac_init_flag() {
        return this.#view.getUint32(40, LE);
    }
    set cabac_init_flag(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get cu_chroma_qp_offset_enabled_flag() {
        return this.#view.getUint32(44, LE);
    }
    set cu_chroma_qp_offset_enabled_flag(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get deblocking_filter_override_flag() {
        return this.#view.getUint32(48, LE);
    }
    set deblocking_filter_override_flag(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get slice_deblocking_filter_disabled_flag() {
        return this.#view.getUint32(52, LE);
    }
    set slice_deblocking_filter_disabled_flag(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get collocated_from_l0_flag() {
        return this.#view.getUint32(56, LE);
    }
    set collocated_from_l0_flag(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get slice_loop_filter_across_slices_enabled_flag() {
        return this.#view.getUint32(60, LE);
    }
    set slice_loop_filter_across_slices_enabled_flag(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class StdVideoEncodeH265SliceSegmentHeader {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265SliceSegmentHeader.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265SliceSegmentHeader(new Uint8Array(StdVideoEncodeH265SliceSegmentHeader.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265SliceSegmentHeader.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.slice_type && (s.slice_type = data.slice_type), void 0 !== data.slice_segment_address && (s.slice_segment_address = data.slice_segment_address), void 0 !== data.short_term_ref_pic_set_idx && (s.short_term_ref_pic_set_idx = data.short_term_ref_pic_set_idx), void 0 !== data.collocated_ref_idx && (s.collocated_ref_idx = data.collocated_ref_idx), void 0 !== data.num_ref_idx_l0_active_minus1 && (s.num_ref_idx_l0_active_minus1 = data.num_ref_idx_l0_active_minus1), void 0 !== data.num_ref_idx_l1_active_minus1 && (s.num_ref_idx_l1_active_minus1 = data.num_ref_idx_l1_active_minus1), void 0 !== data.MaxNumMergeCand && (s.MaxNumMergeCand = data.MaxNumMergeCand), void 0 !== data.slice_cb_qp_offset && (s.slice_cb_qp_offset = data.slice_cb_qp_offset), void 0 !== data.slice_cr_qp_offset && (s.slice_cr_qp_offset = data.slice_cr_qp_offset), void 0 !== data.slice_beta_offset_div2 && (s.slice_beta_offset_div2 = data.slice_beta_offset_div2), void 0 !== data.slice_tc_offset_div2 && (s.slice_tc_offset_div2 = data.slice_tc_offset_div2), void 0 !== data.slice_act_y_qp_offset && (s.slice_act_y_qp_offset = data.slice_act_y_qp_offset), void 0 !== data.slice_act_cb_qp_offset && (s.slice_act_cb_qp_offset = data.slice_act_cb_qp_offset), void 0 !== data.slice_act_cr_qp_offset && (s.slice_act_cr_qp_offset = data.slice_act_cr_qp_offset), void 0 !== data.pShortTermRefPicSet && (s.pShortTermRefPicSet = data.pShortTermRefPicSet), void 0 !== data.pLongTermRefPics && (s.pLongTermRefPics = data.pLongTermRefPics), void 0 !== data.pWeightTable && (s.pWeightTable = data.pWeightTable), s;
    }
    get flags() {
        return new StdVideoEncodeH265SliceSegmentHeaderFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265SliceSegmentHeaderFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265SliceSegmentHeaderFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get slice_type() {
        return this.#view.getUint32(64, LE);
    }
    set slice_type(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get slice_segment_address() {
        return this.#view.getUint32(68, LE);
    }
    set slice_segment_address(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get short_term_ref_pic_set_idx() {
        return this.#view.getUint8(72);
    }
    set short_term_ref_pic_set_idx(value) {
        this.#view.setUint8(72, Number(value));
    }
    get collocated_ref_idx() {
        return this.#view.getUint8(73);
    }
    set collocated_ref_idx(value) {
        this.#view.setUint8(73, Number(value));
    }
    get num_ref_idx_l0_active_minus1() {
        return this.#view.getUint8(74);
    }
    set num_ref_idx_l0_active_minus1(value) {
        this.#view.setUint8(74, Number(value));
    }
    get num_ref_idx_l1_active_minus1() {
        return this.#view.getUint8(75);
    }
    set num_ref_idx_l1_active_minus1(value) {
        this.#view.setUint8(75, Number(value));
    }
    get MaxNumMergeCand() {
        return this.#view.getUint8(76);
    }
    set MaxNumMergeCand(value) {
        this.#view.setUint8(76, Number(value));
    }
    get slice_cb_qp_offset() {
        return this.#view.getInt8(77);
    }
    set slice_cb_qp_offset(value) {
        this.#view.setInt8(77, Number(value));
    }
    get slice_cr_qp_offset() {
        return this.#view.getInt8(78);
    }
    set slice_cr_qp_offset(value) {
        this.#view.setInt8(78, Number(value));
    }
    get slice_beta_offset_div2() {
        return this.#view.getInt8(79);
    }
    set slice_beta_offset_div2(value) {
        this.#view.setInt8(79, Number(value));
    }
    get slice_tc_offset_div2() {
        return this.#view.getInt8(80);
    }
    set slice_tc_offset_div2(value) {
        this.#view.setInt8(80, Number(value));
    }
    get slice_act_y_qp_offset() {
        return this.#view.getInt8(81);
    }
    set slice_act_y_qp_offset(value) {
        this.#view.setInt8(81, Number(value));
    }
    get slice_act_cb_qp_offset() {
        return this.#view.getInt8(82);
    }
    set slice_act_cb_qp_offset(value) {
        this.#view.setInt8(82, Number(value));
    }
    get slice_act_cr_qp_offset() {
        return this.#view.getInt8(83);
    }
    set slice_act_cr_qp_offset(value) {
        this.#view.setInt8(83, Number(value));
    }
    get pShortTermRefPicSet() {
        return this.#view.getBigUint64(88, LE);
    }
    set pShortTermRefPicSet(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get pLongTermRefPics() {
        return this.#view.getBigUint64(96, LE);
    }
    set pLongTermRefPics(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get pWeightTable() {
        return this.#view.getBigUint64(104, LE);
    }
    set pWeightTable(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
}
export class StdVideoEncodeH265ReferenceModificationFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265ReferenceModificationFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265ReferenceModificationFlags(new Uint8Array(StdVideoEncodeH265ReferenceModificationFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265ReferenceModificationFlags.alloc();
        return void 0 !== data.ref_pic_list_modification_flag_l0 && (s.ref_pic_list_modification_flag_l0 = data.ref_pic_list_modification_flag_l0), void 0 !== data.ref_pic_list_modification_flag_l1 && (s.ref_pic_list_modification_flag_l1 = data.ref_pic_list_modification_flag_l1), s;
    }
    get ref_pic_list_modification_flag_l0() {
        return this.#view.getUint32(0, LE);
    }
    set ref_pic_list_modification_flag_l0(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get ref_pic_list_modification_flag_l1() {
        return this.#view.getUint32(4, LE);
    }
    set ref_pic_list_modification_flag_l1(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH265ReferenceModifications {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265ReferenceModifications.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265ReferenceModifications(new Uint8Array(StdVideoEncodeH265ReferenceModifications.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265ReferenceModifications.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.referenceList0ModificationsCount && (s.referenceList0ModificationsCount = data.referenceList0ModificationsCount), void 0 !== data.pReferenceList0Modifications && (s.pReferenceList0Modifications = data.pReferenceList0Modifications), void 0 !== data.referenceList1ModificationsCount && (s.referenceList1ModificationsCount = data.referenceList1ModificationsCount), void 0 !== data.pReferenceList1Modifications && (s.pReferenceList1Modifications = data.pReferenceList1Modifications), s;
    }
    get flags() {
        return new StdVideoEncodeH265ReferenceModificationFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265ReferenceModificationFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265ReferenceModificationFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get referenceList0ModificationsCount() {
        return this.#view.getUint8(8);
    }
    set referenceList0ModificationsCount(value) {
        this.#view.setUint8(8, Number(value));
    }
    get pReferenceList0Modifications() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceList0Modifications(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get referenceList1ModificationsCount() {
        return this.#view.getUint8(24);
    }
    set referenceList1ModificationsCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pReferenceList1Modifications() {
        return this.#view.getBigUint64(32, LE);
    }
    set pReferenceList1Modifications(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class StdVideoEncodeH265PictureInfoFlags {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265PictureInfoFlags(new Uint8Array(StdVideoEncodeH265PictureInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265PictureInfoFlags.alloc();
        return void 0 !== data.is_reference_flag && (s.is_reference_flag = data.is_reference_flag), void 0 !== data.IrapPicFlag && (s.IrapPicFlag = data.IrapPicFlag), void 0 !== data.long_term_flag && (s.long_term_flag = data.long_term_flag), void 0 !== data.discardable_flag && (s.discardable_flag = data.discardable_flag), void 0 !== data.cross_layer_bla_flag && (s.cross_layer_bla_flag = data.cross_layer_bla_flag), s;
    }
    get is_reference_flag() {
        return this.#view.getUint32(0, LE);
    }
    set is_reference_flag(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get IrapPicFlag() {
        return this.#view.getUint32(4, LE);
    }
    set IrapPicFlag(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get long_term_flag() {
        return this.#view.getUint32(8, LE);
    }
    set long_term_flag(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get discardable_flag() {
        return this.#view.getUint32(12, LE);
    }
    set discardable_flag(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get cross_layer_bla_flag() {
        return this.#view.getUint32(16, LE);
    }
    set cross_layer_bla_flag(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class StdVideoEncodeH265PictureInfo {
    static size = 36;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265PictureInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265PictureInfo(new Uint8Array(StdVideoEncodeH265PictureInfo.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265PictureInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.PictureType && (s.PictureType = data.PictureType), void 0 !== data.sps_video_parameter_set_id && (s.sps_video_parameter_set_id = data.sps_video_parameter_set_id), void 0 !== data.pps_seq_parameter_set_id && (s.pps_seq_parameter_set_id = data.pps_seq_parameter_set_id), void 0 !== data.pps_pic_parameter_set_id && (s.pps_pic_parameter_set_id = data.pps_pic_parameter_set_id), void 0 !== data.PicOrderCntVal && (s.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.TemporalId && (s.TemporalId = data.TemporalId), s;
    }
    get flags() {
        return new StdVideoEncodeH265PictureInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265PictureInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265PictureInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PictureType() {
        return this.#view.getUint32(20, LE);
    }
    set PictureType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sps_video_parameter_set_id() {
        return this.#view.getUint8(24);
    }
    set sps_video_parameter_set_id(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pps_seq_parameter_set_id() {
        return this.#view.getUint8(25);
    }
    set pps_seq_parameter_set_id(value) {
        this.#view.setUint8(25, Number(value));
    }
    get pps_pic_parameter_set_id() {
        return this.#view.getUint8(26);
    }
    set pps_pic_parameter_set_id(value) {
        this.#view.setUint8(26, Number(value));
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(28, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(28, Number(value), LE);
    }
    get TemporalId() {
        return this.#view.getUint8(32);
    }
    set TemporalId(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class StdVideoEncodeH265ReferenceInfoFlags {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265ReferenceInfoFlags(new Uint8Array(StdVideoEncodeH265ReferenceInfoFlags.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265ReferenceInfoFlags.alloc();
        return void 0 !== data.used_for_long_term_reference && (s.used_for_long_term_reference = data.used_for_long_term_reference), void 0 !== data.unused_for_reference && (s.unused_for_reference = data.unused_for_reference), s;
    }
    get used_for_long_term_reference() {
        return this.#view.getUint32(0, LE);
    }
    set used_for_long_term_reference(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get unused_for_reference() {
        return this.#view.getUint32(4, LE);
    }
    set unused_for_reference(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class StdVideoEncodeH265ReferenceInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < StdVideoEncodeH265ReferenceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new StdVideoEncodeH265ReferenceInfo(new Uint8Array(StdVideoEncodeH265ReferenceInfo.size));
    }
    static create(data) {
        let s = StdVideoEncodeH265ReferenceInfo.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.PicOrderCntVal && (s.PicOrderCntVal = data.PicOrderCntVal), void 0 !== data.TemporalId && (s.TemporalId = data.TemporalId), s;
    }
    get flags() {
        return new StdVideoEncodeH265ReferenceInfoFlags(this.#data.subarray(0, 0 + StdVideoEncodeH265ReferenceInfoFlags.size));
    }
    set flags(value) {
        if (value[BUFFER].byteLength < StdVideoEncodeH265ReferenceInfoFlags.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get PicOrderCntVal() {
        return this.#view.getInt32(8, LE);
    }
    set PicOrderCntVal(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
    get TemporalId() {
        return this.#view.getUint8(12);
    }
    set TemporalId(value) {
        this.#view.setUint8(12, Number(value));
    }
}
export class VkBaseOutStructure {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBaseOutStructure.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBaseOutStructure(new Uint8Array(VkBaseOutStructure.size));
    }
    static create(data) {
        let s = VkBaseOutStructure.alloc();
        return void 0 !== data.sType && (s.sType = data.sType), void 0 !== data.pNext && (s.pNext = data.pNext), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkBaseInStructure {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBaseInStructure.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBaseInStructure(new Uint8Array(VkBaseInStructure.size));
    }
    static create(data) {
        let s = VkBaseInStructure.alloc();
        return void 0 !== data.sType && (s.sType = data.sType), void 0 !== data.pNext && (s.pNext = data.pNext), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkOffset2D {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOffset2D(new Uint8Array(VkOffset2D.size));
    }
    static create(data) {
        let s = VkOffset2D.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), s;
    }
    get x() {
        return this.#view.getInt32(0, LE);
    }
    set x(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getInt32(4, LE);
    }
    set y(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
}
export class VkOffset3D {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOffset3D(new Uint8Array(VkOffset3D.size));
    }
    static create(data) {
        let s = VkOffset3D.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), void 0 !== data.z && (s.z = data.z), s;
    }
    get x() {
        return this.#view.getInt32(0, LE);
    }
    set x(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getInt32(4, LE);
    }
    set y(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getInt32(8, LE);
    }
    set z(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VkExtent2D {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExtent2D(new Uint8Array(VkExtent2D.size));
    }
    static create(data) {
        let s = VkExtent2D.alloc();
        return void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), s;
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkExtent3D {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExtent3D(new Uint8Array(VkExtent3D.size));
    }
    static create(data) {
        let s = VkExtent3D.alloc();
        return void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.depth && (s.depth = data.depth), s;
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(8, LE);
    }
    set depth(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkViewport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkViewport.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkViewport(new Uint8Array(VkViewport.size));
    }
    static create(data) {
        let s = VkViewport.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.minDepth && (s.minDepth = data.minDepth), void 0 !== data.maxDepth && (s.maxDepth = data.maxDepth), s;
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get width() {
        return this.#view.getFloat32(8, LE);
    }
    set width(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get height() {
        return this.#view.getFloat32(12, LE);
    }
    set height(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get minDepth() {
        return this.#view.getFloat32(16, LE);
    }
    set minDepth(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxDepth() {
        return this.#view.getFloat32(20, LE);
    }
    set maxDepth(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
}
export class VkRect2D {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRect2D(new Uint8Array(VkRect2D.size));
    }
    static create(data) {
        let s = VkRect2D.alloc();
        return void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.extent && (s.extent = data.extent), s;
    }
    get offset() {
        return new VkOffset2D(this.#data.subarray(0, 0 + VkOffset2D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get extent() {
        return new VkExtent2D(this.#data.subarray(8, 8 + VkExtent2D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
}
export class VkClearRect {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkClearRect.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkClearRect(new Uint8Array(VkClearRect.size));
    }
    static create(data) {
        let s = VkClearRect.alloc();
        return void 0 !== data.rect && (s.rect = data.rect), void 0 !== data.baseArrayLayer && (s.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (s.layerCount = data.layerCount), s;
    }
    get rect() {
        return new VkRect2D(this.#data.subarray(0, 0 + VkRect2D.size));
    }
    set rect(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(16, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(20, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkComponentMapping {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkComponentMapping(new Uint8Array(VkComponentMapping.size));
    }
    static create(data) {
        let s = VkComponentMapping.alloc();
        return void 0 !== data.r && (s.r = data.r), void 0 !== data.g && (s.g = data.g), void 0 !== data.b && (s.b = data.b), void 0 !== data.a && (s.a = data.a), s;
    }
    get r() {
        return this.#view.getUint32(0, LE);
    }
    set r(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get g() {
        return this.#view.getUint32(4, LE);
    }
    set g(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get b() {
        return this.#view.getUint32(8, LE);
    }
    set b(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get a() {
        return this.#view.getUint32(12, LE);
    }
    set a(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkPhysicalDeviceProperties {
    static size = 784;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProperties(new Uint8Array(VkPhysicalDeviceProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProperties.alloc();
        return void 0 !== data.apiVersion && (s.apiVersion = data.apiVersion), void 0 !== data.driverVersion && (s.driverVersion = data.driverVersion), void 0 !== data.vendorID && (s.vendorID = data.vendorID), void 0 !== data.deviceID && (s.deviceID = data.deviceID), void 0 !== data.deviceType && (s.deviceType = data.deviceType), void 0 !== data.deviceName && (s.deviceName = data.deviceName), void 0 !== data.pipelineCacheUUID && (s.pipelineCacheUUID = data.pipelineCacheUUID), void 0 !== data.limits && (s.limits = data.limits), void 0 !== data.sparseProperties && (s.sparseProperties = data.sparseProperties), s;
    }
    get apiVersion() {
        return this.#view.getUint32(0, LE);
    }
    set apiVersion(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get driverVersion() {
        return this.#view.getUint32(4, LE);
    }
    set driverVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get deviceType() {
        return this.#view.getUint32(16, LE);
    }
    set deviceType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceName() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set deviceName(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get pipelineCacheUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(276 + 1 * i));
        return result;
    }
    set pipelineCacheUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(276 + 1 * i, Number(value[i]));
    }
    get limits() {
        return new VkPhysicalDeviceLimits(this.#data.subarray(292, 292 + VkPhysicalDeviceLimits.size));
    }
    set limits(value) {
        if (value[BUFFER].byteLength < VkPhysicalDeviceLimits.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 292);
    }
    get sparseProperties() {
        return new VkPhysicalDeviceSparseProperties(this.#data.subarray(764, 764 + VkPhysicalDeviceSparseProperties.size));
    }
    set sparseProperties(value) {
        if (value[BUFFER].byteLength < VkPhysicalDeviceSparseProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 764);
    }
}
export class VkExtensionProperties {
    static size = 260;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExtensionProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExtensionProperties(new Uint8Array(VkExtensionProperties.size));
    }
    static create(data) {
        let s = VkExtensionProperties.alloc();
        return void 0 !== data.extensionName && (s.extensionName = data.extensionName), void 0 !== data.specVersion && (s.specVersion = data.specVersion), s;
    }
    get extensionName() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(0 + 1 * i));
        return result;
    }
    set extensionName(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(0 + 1 * i, Number(value[i]));
    }
    get specVersion() {
        return this.#view.getUint32(256, LE);
    }
    set specVersion(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
}
export class VkLayerProperties {
    static size = 520;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkLayerProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkLayerProperties(new Uint8Array(VkLayerProperties.size));
    }
    static create(data) {
        let s = VkLayerProperties.alloc();
        return void 0 !== data.layerName && (s.layerName = data.layerName), void 0 !== data.specVersion && (s.specVersion = data.specVersion), void 0 !== data.implementationVersion && (s.implementationVersion = data.implementationVersion), void 0 !== data.description && (s.description = data.description), s;
    }
    get layerName() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(0 + 1 * i));
        return result;
    }
    set layerName(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(0 + 1 * i, Number(value[i]));
    }
    get specVersion() {
        return this.#view.getUint32(256, LE);
    }
    set specVersion(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
    get implementationVersion() {
        return this.#view.getUint32(260, LE);
    }
    set implementationVersion(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(264 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(264 + 1 * i, Number(value[i]));
    }
}
export class VkApplicationInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkApplicationInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkApplicationInfo(new Uint8Array(VkApplicationInfo.size));
    }
    static create(data) {
        let s = VkApplicationInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pApplicationName && (s.pApplicationName = data.pApplicationName), void 0 !== data.applicationVersion && (s.applicationVersion = data.applicationVersion), void 0 !== data.pEngineName && (s.pEngineName = data.pEngineName), void 0 !== data.engineVersion && (s.engineVersion = data.engineVersion), void 0 !== data.apiVersion && (s.apiVersion = data.apiVersion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pApplicationName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pApplicationName(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get applicationVersion() {
        return this.#view.getUint32(24, LE);
    }
    set applicationVersion(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pEngineName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pEngineName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get engineVersion() {
        return this.#view.getUint32(40, LE);
    }
    set engineVersion(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get apiVersion() {
        return this.#view.getUint32(44, LE);
    }
    set apiVersion(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class VkAllocationCallbacks {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAllocationCallbacks.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAllocationCallbacks(new Uint8Array(VkAllocationCallbacks.size));
    }
    static create(data) {
        let s = VkAllocationCallbacks.alloc();
        return void 0 !== data.pUserData && (s.pUserData = data.pUserData), void 0 !== data.pfnAllocation && (s.pfnAllocation = data.pfnAllocation), void 0 !== data.pfnReallocation && (s.pfnReallocation = data.pfnReallocation), void 0 !== data.pfnFree && (s.pfnFree = data.pfnFree), void 0 !== data.pfnInternalAllocation && (s.pfnInternalAllocation = data.pfnInternalAllocation), void 0 !== data.pfnInternalFree && (s.pfnInternalFree = data.pfnInternalFree), s;
    }
    get pUserData() {
        return this.#view.getBigUint64(0, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get pfnAllocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnAllocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnReallocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnReallocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnFree() {
        throw new Error('Unknown type: "function"');
    }
    set pfnFree(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnInternalAllocation() {
        throw new Error('Unknown type: "function"');
    }
    set pfnInternalAllocation(value) {
        throw new Error('Unknown type: "function"');
    }
    get pfnInternalFree() {
        throw new Error('Unknown type: "function"');
    }
    set pfnInternalFree(value) {
        throw new Error('Unknown type: "function"');
    }
}
export class VkDeviceQueueCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceQueueCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceQueueCreateInfo(new Uint8Array(VkDeviceQueueCreateInfo.size));
    }
    static create(data) {
        let s = VkDeviceQueueCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.queueFamilyIndex && (s.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.queueCount && (s.queueCount = data.queueCount), void 0 !== data.pQueuePriorities && (s.pQueuePriorities = data.pQueuePriorities), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queueCount() {
        return this.#view.getUint32(24, LE);
    }
    set queueCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pQueuePriorities() {
        return this.#view.getBigUint64(32, LE);
    }
    set pQueuePriorities(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDeviceCreateInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceCreateInfo(new Uint8Array(VkDeviceCreateInfo.size));
    }
    static create(data) {
        let s = VkDeviceCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.queueCreateInfoCount && (s.queueCreateInfoCount = data.queueCreateInfoCount), void 0 !== data.pQueueCreateInfos && (s.pQueueCreateInfos = data.pQueueCreateInfos), void 0 !== data.enabledLayerCount && (s.enabledLayerCount = data.enabledLayerCount), void 0 !== data.ppEnabledLayerNames && (s.ppEnabledLayerNames = data.ppEnabledLayerNames), void 0 !== data.enabledExtensionCount && (s.enabledExtensionCount = data.enabledExtensionCount), void 0 !== data.ppEnabledExtensionNames && (s.ppEnabledExtensionNames = data.ppEnabledExtensionNames), void 0 !== data.pEnabledFeatures && (s.pEnabledFeatures = data.pEnabledFeatures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueCreateInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set queueCreateInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pQueueCreateInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pQueueCreateInfos(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get enabledLayerCount() {
        return this.#view.getUint32(32, LE);
    }
    set enabledLayerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get ppEnabledLayerNames() {
        return this.#view.getBigUint64(40, LE);
    }
    set ppEnabledLayerNames(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get enabledExtensionCount() {
        return this.#view.getUint32(48, LE);
    }
    set enabledExtensionCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get ppEnabledExtensionNames() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppEnabledExtensionNames(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pEnabledFeatures() {
        return this.#view.getBigUint64(64, LE);
    }
    set pEnabledFeatures(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkInstanceCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkInstanceCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkInstanceCreateInfo(new Uint8Array(VkInstanceCreateInfo.size));
    }
    static create(data) {
        let s = VkInstanceCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pApplicationInfo && (s.pApplicationInfo = data.pApplicationInfo), void 0 !== data.enabledLayerCount && (s.enabledLayerCount = data.enabledLayerCount), void 0 !== data.ppEnabledLayerNames && (s.ppEnabledLayerNames = data.ppEnabledLayerNames), void 0 !== data.enabledExtensionCount && (s.enabledExtensionCount = data.enabledExtensionCount), void 0 !== data.ppEnabledExtensionNames && (s.ppEnabledExtensionNames = data.ppEnabledExtensionNames), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pApplicationInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pApplicationInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get enabledLayerCount() {
        return this.#view.getUint32(32, LE);
    }
    set enabledLayerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get ppEnabledLayerNames() {
        return this.#view.getBigUint64(40, LE);
    }
    set ppEnabledLayerNames(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get enabledExtensionCount() {
        return this.#view.getUint32(48, LE);
    }
    set enabledExtensionCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get ppEnabledExtensionNames() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppEnabledExtensionNames(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkQueueFamilyProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyProperties(new Uint8Array(VkQueueFamilyProperties.size));
    }
    static create(data) {
        let s = VkQueueFamilyProperties.alloc();
        return void 0 !== data.queueFlags && (s.queueFlags = data.queueFlags), void 0 !== data.queueCount && (s.queueCount = data.queueCount), void 0 !== data.timestampValidBits && (s.timestampValidBits = data.timestampValidBits), void 0 !== data.minImageTransferGranularity && (s.minImageTransferGranularity = data.minImageTransferGranularity), s;
    }
    get queueFlags() {
        return this.#view.getUint32(0, LE);
    }
    set queueFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get queueCount() {
        return this.#view.getUint32(4, LE);
    }
    set queueCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get timestampValidBits() {
        return this.#view.getUint32(8, LE);
    }
    set timestampValidBits(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get minImageTransferGranularity() {
        return new VkExtent3D(this.#data.subarray(12, 12 + VkExtent3D.size));
    }
    set minImageTransferGranularity(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
}
export class VkPhysicalDeviceMemoryProperties {
    static size = 520;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryProperties(new Uint8Array(VkPhysicalDeviceMemoryProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryProperties.alloc();
        return void 0 !== data.memoryTypeCount && (s.memoryTypeCount = data.memoryTypeCount), void 0 !== data.memoryTypes && (s.memoryTypes = data.memoryTypes), void 0 !== data.memoryHeapCount && (s.memoryHeapCount = data.memoryHeapCount), void 0 !== data.memoryHeaps && (s.memoryHeaps = data.memoryHeaps), s;
    }
    get memoryTypeCount() {
        return this.#view.getUint32(0, LE);
    }
    set memoryTypeCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get memoryTypes() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(new VkMemoryType(this.#data.subarray(4 + 8 * i, 4 + 8 * i + VkMemoryType.size)));
        return result;
    }
    set memoryTypes(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkMemoryType.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 4 + 8 * i);
        }
    }
    get memoryHeapCount() {
        return this.#view.getUint32(260, LE);
    }
    set memoryHeapCount(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get memoryHeaps() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(new VkMemoryHeap(this.#data.subarray(264 + 16 * i, 264 + 16 * i + VkMemoryHeap.size)));
        return result;
    }
    set memoryHeaps(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkMemoryHeap.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 264 + 16 * i);
        }
    }
}
export class VkMemoryAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryAllocateInfo(new Uint8Array(VkMemoryAllocateInfo.size));
    }
    static create(data) {
        let s = VkMemoryAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.allocationSize && (s.allocationSize = data.allocationSize), void 0 !== data.memoryTypeIndex && (s.memoryTypeIndex = data.memoryTypeIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get allocationSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set allocationSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memoryTypeIndex() {
        return this.#view.getUint32(24, LE);
    }
    set memoryTypeIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkMemoryRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryRequirements(new Uint8Array(VkMemoryRequirements.size));
    }
    static create(data) {
        let s = VkMemoryRequirements.alloc();
        return void 0 !== data.size && (s.size = data.size), void 0 !== data.alignment && (s.alignment = data.alignment), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get size() {
        return this.#view.getBigUint64(0, LE);
    }
    set size(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get alignment() {
        return this.#view.getBigUint64(8, LE);
    }
    set alignment(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSparseImageFormatProperties {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageFormatProperties(new Uint8Array(VkSparseImageFormatProperties.size));
    }
    static create(data) {
        let s = VkSparseImageFormatProperties.alloc();
        return void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), void 0 !== data.imageGranularity && (s.imageGranularity = data.imageGranularity), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get imageGranularity() {
        return new VkExtent3D(this.#data.subarray(4, 4 + VkExtent3D.size));
    }
    set imageGranularity(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSparseImageMemoryRequirements {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageMemoryRequirements(new Uint8Array(VkSparseImageMemoryRequirements.size));
    }
    static create(data) {
        let s = VkSparseImageMemoryRequirements.alloc();
        return void 0 !== data.formatProperties && (s.formatProperties = data.formatProperties), void 0 !== data.imageMipTailFirstLod && (s.imageMipTailFirstLod = data.imageMipTailFirstLod), void 0 !== data.imageMipTailSize && (s.imageMipTailSize = data.imageMipTailSize), void 0 !== data.imageMipTailOffset && (s.imageMipTailOffset = data.imageMipTailOffset), void 0 !== data.imageMipTailStride && (s.imageMipTailStride = data.imageMipTailStride), s;
    }
    get formatProperties() {
        return new VkSparseImageFormatProperties(this.#data.subarray(0, 0 + VkSparseImageFormatProperties.size));
    }
    set formatProperties(value) {
        if (value[BUFFER].byteLength < VkSparseImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get imageMipTailFirstLod() {
        return this.#view.getUint32(20, LE);
    }
    set imageMipTailFirstLod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageMipTailSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set imageMipTailSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get imageMipTailOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set imageMipTailOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get imageMipTailStride() {
        return this.#view.getBigUint64(40, LE);
    }
    set imageMipTailStride(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkMemoryType {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryType.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryType(new Uint8Array(VkMemoryType.size));
    }
    static create(data) {
        let s = VkMemoryType.alloc();
        return void 0 !== data.propertyFlags && (s.propertyFlags = data.propertyFlags), void 0 !== data.heapIndex && (s.heapIndex = data.heapIndex), s;
    }
    get propertyFlags() {
        return this.#view.getUint32(0, LE);
    }
    set propertyFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get heapIndex() {
        return this.#view.getUint32(4, LE);
    }
    set heapIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkMemoryHeap {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryHeap.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryHeap(new Uint8Array(VkMemoryHeap.size));
    }
    static create(data) {
        let s = VkMemoryHeap.alloc();
        return void 0 !== data.size && (s.size = data.size), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get size() {
        return this.#view.getBigUint64(0, LE);
    }
    set size(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(8, LE);
    }
    set flags(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkMappedMemoryRange {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMappedMemoryRange.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMappedMemoryRange(new Uint8Array(VkMappedMemoryRange.size));
    }
    static create(data) {
        let s = VkMappedMemoryRange.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(24, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkFormatProperties {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFormatProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFormatProperties(new Uint8Array(VkFormatProperties.size));
    }
    static create(data) {
        let s = VkFormatProperties.alloc();
        return void 0 !== data.linearTilingFeatures && (s.linearTilingFeatures = data.linearTilingFeatures), void 0 !== data.optimalTilingFeatures && (s.optimalTilingFeatures = data.optimalTilingFeatures), void 0 !== data.bufferFeatures && (s.bufferFeatures = data.bufferFeatures), s;
    }
    get linearTilingFeatures() {
        return this.#view.getUint32(0, LE);
    }
    set linearTilingFeatures(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get optimalTilingFeatures() {
        return this.#view.getUint32(4, LE);
    }
    set optimalTilingFeatures(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get bufferFeatures() {
        return this.#view.getUint32(8, LE);
    }
    set bufferFeatures(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkImageFormatProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageFormatProperties(new Uint8Array(VkImageFormatProperties.size));
    }
    static create(data) {
        let s = VkImageFormatProperties.alloc();
        return void 0 !== data.maxExtent && (s.maxExtent = data.maxExtent), void 0 !== data.maxMipLevels && (s.maxMipLevels = data.maxMipLevels), void 0 !== data.maxArrayLayers && (s.maxArrayLayers = data.maxArrayLayers), void 0 !== data.sampleCounts && (s.sampleCounts = data.sampleCounts), void 0 !== data.maxResourceSize && (s.maxResourceSize = data.maxResourceSize), s;
    }
    get maxExtent() {
        return new VkExtent3D(this.#data.subarray(0, 0 + VkExtent3D.size));
    }
    set maxExtent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get maxMipLevels() {
        return this.#view.getUint32(12, LE);
    }
    set maxMipLevels(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get maxArrayLayers() {
        return this.#view.getUint32(16, LE);
    }
    set maxArrayLayers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleCounts() {
        return this.#view.getUint32(20, LE);
    }
    set sampleCounts(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxResourceSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxResourceSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorBufferInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorBufferInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorBufferInfo(new Uint8Array(VkDescriptorBufferInfo.size));
    }
    static create(data) {
        let s = VkDescriptorBufferInfo.alloc();
        return void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.range && (s.range = data.range), s;
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(8, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(16, LE);
    }
    set range(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDescriptorImageInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorImageInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorImageInfo(new Uint8Array(VkDescriptorImageInfo.size));
    }
    static create(data) {
        let s = VkDescriptorImageInfo.alloc();
        return void 0 !== data.sampler && (s.sampler = data.sampler), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.imageLayout && (s.imageLayout = data.imageLayout), s;
    }
    get sampler() {
        return this.#view.getBigUint64(0, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(8, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(16, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkWriteDescriptorSet {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWriteDescriptorSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWriteDescriptorSet(new Uint8Array(VkWriteDescriptorSet.size));
    }
    static create(data) {
        let s = VkWriteDescriptorSet.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dstSet && (s.dstSet = data.dstSet), void 0 !== data.dstBinding && (s.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (s.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (s.descriptorCount = data.descriptorCount), void 0 !== data.descriptorType && (s.descriptorType = data.descriptorType), void 0 !== data.pImageInfo && (s.pImageInfo = data.pImageInfo), void 0 !== data.pBufferInfo && (s.pBufferInfo = data.pBufferInfo), void 0 !== data.pTexelBufferView && (s.pTexelBufferView = data.pTexelBufferView), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dstSet() {
        return this.#view.getBigUint64(16, LE);
    }
    set dstSet(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dstBinding() {
        return this.#view.getUint32(24, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(28, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(32, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(36, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pImageInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pImageInfo(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pBufferInfo() {
        return this.#view.getBigUint64(48, LE);
    }
    set pBufferInfo(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pTexelBufferView() {
        return this.#view.getBigUint64(56, LE);
    }
    set pTexelBufferView(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkCopyDescriptorSet {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyDescriptorSet.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyDescriptorSet(new Uint8Array(VkCopyDescriptorSet.size));
    }
    static create(data) {
        let s = VkCopyDescriptorSet.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcSet && (s.srcSet = data.srcSet), void 0 !== data.srcBinding && (s.srcBinding = data.srcBinding), void 0 !== data.srcArrayElement && (s.srcArrayElement = data.srcArrayElement), void 0 !== data.dstSet && (s.dstSet = data.dstSet), void 0 !== data.dstBinding && (s.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (s.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (s.descriptorCount = data.descriptorCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcSet() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcSet(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcBinding() {
        return this.#view.getUint32(24, LE);
    }
    set srcBinding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get srcArrayElement() {
        return this.#view.getUint32(28, LE);
    }
    set srcArrayElement(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get dstSet() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstSet(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstBinding() {
        return this.#view.getUint32(40, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(44, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(48, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkBufferCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCreateInfo(new Uint8Array(VkBufferCreateInfo.size));
    }
    static create(data) {
        let s = VkBufferCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.size && (s.size = data.size), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.sharingMode && (s.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (s.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (s.pQueueFamilyIndices = data.pQueueFamilyIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(24, LE);
    }
    set size(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(32, LE);
    }
    set usage(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(36, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(40, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkBufferViewCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferViewCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferViewCreateInfo(new Uint8Array(VkBufferViewCreateInfo.size));
    }
    static create(data) {
        let s = VkBufferViewCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.format && (s.format = data.format), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.range && (s.range = data.range), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(32, LE);
    }
    set format(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(40, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(48, LE);
    }
    set range(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkImageSubresource {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSubresource.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSubresource(new Uint8Array(VkImageSubresource.size));
    }
    static create(data) {
        let s = VkImageSubresource.alloc();
        return void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), void 0 !== data.mipLevel && (s.mipLevel = data.mipLevel), void 0 !== data.arrayLayer && (s.arrayLayer = data.arrayLayer), s;
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get mipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set mipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get arrayLayer() {
        return this.#view.getUint32(8, LE);
    }
    set arrayLayer(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkImageSubresourceLayers {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSubresourceLayers(new Uint8Array(VkImageSubresourceLayers.size));
    }
    static create(data) {
        let s = VkImageSubresourceLayers.alloc();
        return void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), void 0 !== data.mipLevel && (s.mipLevel = data.mipLevel), void 0 !== data.baseArrayLayer && (s.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (s.layerCount = data.layerCount), s;
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get mipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set mipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(8, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(12, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkImageSubresourceRange {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSubresourceRange(new Uint8Array(VkImageSubresourceRange.size));
    }
    static create(data) {
        let s = VkImageSubresourceRange.alloc();
        return void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), void 0 !== data.baseMipLevel && (s.baseMipLevel = data.baseMipLevel), void 0 !== data.levelCount && (s.levelCount = data.levelCount), void 0 !== data.baseArrayLayer && (s.baseArrayLayer = data.baseArrayLayer), void 0 !== data.layerCount && (s.layerCount = data.layerCount), s;
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get baseMipLevel() {
        return this.#view.getUint32(4, LE);
    }
    set baseMipLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get levelCount() {
        return this.#view.getUint32(8, LE);
    }
    set levelCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(12, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(16, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryBarrier {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryBarrier.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryBarrier(new Uint8Array(VkMemoryBarrier.size));
    }
    static create(data) {
        let s = VkMemoryBarrier.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkBufferMemoryBarrier {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferMemoryBarrier.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferMemoryBarrier(new Uint8Array(VkBufferMemoryBarrier.size));
    }
    static create(data) {
        let s = VkBufferMemoryBarrier.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.srcQueueFamilyIndex && (s.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (s.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(24, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(28, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(40, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(48, LE);
    }
    set size(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkImageMemoryBarrier {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageMemoryBarrier.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageMemoryBarrier(new Uint8Array(VkImageMemoryBarrier.size));
    }
    static create(data) {
        let s = VkImageMemoryBarrier.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.oldLayout && (s.oldLayout = data.oldLayout), void 0 !== data.newLayout && (s.newLayout = data.newLayout), void 0 !== data.srcQueueFamilyIndex && (s.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (s.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.image && (s.image = data.image), void 0 !== data.subresourceRange && (s.subresourceRange = data.subresourceRange), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get oldLayout() {
        return this.#view.getUint32(24, LE);
    }
    set oldLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get newLayout() {
        return this.#view.getUint32(28, LE);
    }
    set newLayout(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(32, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(36, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(40, LE);
    }
    set image(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get subresourceRange() {
        return new VkImageSubresourceRange(this.#data.subarray(48, 48 + VkImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
}
export class VkImageCreateInfo {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCreateInfo(new Uint8Array(VkImageCreateInfo.size));
    }
    static create(data) {
        let s = VkImageCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.imageType && (s.imageType = data.imageType), void 0 !== data.format && (s.format = data.format), void 0 !== data.extent && (s.extent = data.extent), void 0 !== data.mipLevels && (s.mipLevels = data.mipLevels), void 0 !== data.arrayLayers && (s.arrayLayers = data.arrayLayers), void 0 !== data.samples && (s.samples = data.samples), void 0 !== data.tiling && (s.tiling = data.tiling), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.sharingMode && (s.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (s.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (s.pQueueFamilyIndices = data.pQueueFamilyIndices), void 0 !== data.initialLayout && (s.initialLayout = data.initialLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imageType() {
        return this.#view.getUint32(20, LE);
    }
    set imageType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(24, LE);
    }
    set format(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(28, 28 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get mipLevels() {
        return this.#view.getUint32(40, LE);
    }
    set mipLevels(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get arrayLayers() {
        return this.#view.getUint32(44, LE);
    }
    set arrayLayers(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(48, LE);
    }
    set samples(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(52, LE);
    }
    set tiling(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(56, LE);
    }
    set usage(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(60, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(64, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(72, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(80, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class VkSubresourceLayout {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubresourceLayout.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubresourceLayout(new Uint8Array(VkSubresourceLayout.size));
    }
    static create(data) {
        let s = VkSubresourceLayout.alloc();
        return void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), void 0 !== data.rowPitch && (s.rowPitch = data.rowPitch), void 0 !== data.arrayPitch && (s.arrayPitch = data.arrayPitch), void 0 !== data.depthPitch && (s.depthPitch = data.depthPitch), s;
    }
    get offset() {
        return this.#view.getBigUint64(0, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rowPitch() {
        return this.#view.getBigUint64(16, LE);
    }
    set rowPitch(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get arrayPitch() {
        return this.#view.getBigUint64(24, LE);
    }
    set arrayPitch(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get depthPitch() {
        return this.#view.getBigUint64(32, LE);
    }
    set depthPitch(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageViewCreateInfo {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewCreateInfo(new Uint8Array(VkImageViewCreateInfo.size));
    }
    static create(data) {
        let s = VkImageViewCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.image && (s.image = data.image), void 0 !== data.viewType && (s.viewType = data.viewType), void 0 !== data.format && (s.format = data.format), void 0 !== data.components && (s.components = data.components), void 0 !== data.subresourceRange && (s.subresourceRange = data.subresourceRange), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(24, LE);
    }
    set image(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get viewType() {
        return this.#view.getUint32(32, LE);
    }
    set viewType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(36, LE);
    }
    set format(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get components() {
        return new VkComponentMapping(this.#data.subarray(40, 40 + VkComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get subresourceRange() {
        return new VkImageSubresourceRange(this.#data.subarray(56, 56 + VkImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class VkBufferCopy {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCopy.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCopy(new Uint8Array(VkBufferCopy.size));
    }
    static create(data) {
        let s = VkBufferCopy.alloc();
        return void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.size && (s.size = data.size), s;
    }
    get srcOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstOffset() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstOffset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSparseMemoryBind {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseMemoryBind.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseMemoryBind(new Uint8Array(VkSparseMemoryBind.size));
    }
    static create(data) {
        let s = VkSparseMemoryBind.alloc();
        return void 0 !== data.resourceOffset && (s.resourceOffset = data.resourceOffset), void 0 !== data.size && (s.size = data.size), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get resourceOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set resourceOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkSparseImageMemoryBind {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageMemoryBind.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageMemoryBind(new Uint8Array(VkSparseImageMemoryBind.size));
    }
    static create(data) {
        let s = VkSparseImageMemoryBind.alloc();
        return void 0 !== data.subresource && (s.subresource = data.subresource), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.extent && (s.extent = data.extent), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get subresource() {
        return new VkImageSubresource(this.#data.subarray(0, 0 + VkImageSubresource.size));
    }
    set subresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresource.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get offset() {
        return new VkOffset3D(this.#data.subarray(12, 12 + VkOffset3D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(24, 24 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get memory() {
        return this.#view.getBigUint64(40, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(48, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(56, LE);
    }
    set flags(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkSparseBufferMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseBufferMemoryBindInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseBufferMemoryBindInfo(new Uint8Array(VkSparseBufferMemoryBindInfo.size));
    }
    static create(data) {
        let s = VkSparseBufferMemoryBindInfo.alloc();
        return void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.bindCount && (s.bindCount = data.bindCount), void 0 !== data.pBinds && (s.pBinds = data.pBinds), s;
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSparseImageOpaqueMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageOpaqueMemoryBindInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageOpaqueMemoryBindInfo(new Uint8Array(VkSparseImageOpaqueMemoryBindInfo.size));
    }
    static create(data) {
        let s = VkSparseImageOpaqueMemoryBindInfo.alloc();
        return void 0 !== data.image && (s.image = data.image), void 0 !== data.bindCount && (s.bindCount = data.bindCount), void 0 !== data.pBinds && (s.pBinds = data.pBinds), s;
    }
    get image() {
        return this.#view.getBigUint64(0, LE);
    }
    set image(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSparseImageMemoryBindInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageMemoryBindInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageMemoryBindInfo(new Uint8Array(VkSparseImageMemoryBindInfo.size));
    }
    static create(data) {
        let s = VkSparseImageMemoryBindInfo.alloc();
        return void 0 !== data.image && (s.image = data.image), void 0 !== data.bindCount && (s.bindCount = data.bindCount), void 0 !== data.pBinds && (s.pBinds = data.pBinds), s;
    }
    get image() {
        return this.#view.getBigUint64(0, LE);
    }
    set image(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bindCount() {
        return this.#view.getUint32(8, LE);
    }
    set bindCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pBinds() {
        return this.#view.getBigUint64(16, LE);
    }
    set pBinds(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkBindSparseInfo {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindSparseInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindSparseInfo(new Uint8Array(VkBindSparseInfo.size));
    }
    static create(data) {
        let s = VkBindSparseInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_SPARSE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (s.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (s.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.bufferBindCount && (s.bufferBindCount = data.bufferBindCount), void 0 !== data.pBufferBinds && (s.pBufferBinds = data.pBufferBinds), void 0 !== data.imageOpaqueBindCount && (s.imageOpaqueBindCount = data.imageOpaqueBindCount), void 0 !== data.pImageOpaqueBinds && (s.pImageOpaqueBinds = data.pImageOpaqueBinds), void 0 !== data.imageBindCount && (s.imageBindCount = data.imageBindCount), void 0 !== data.pImageBinds && (s.pImageBinds = data.pImageBinds), void 0 !== data.signalSemaphoreCount && (s.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphores && (s.pSignalSemaphores = data.pSignalSemaphores), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferBindCount() {
        return this.#view.getUint32(32, LE);
    }
    set bufferBindCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pBufferBinds() {
        return this.#view.getBigUint64(40, LE);
    }
    set pBufferBinds(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get imageOpaqueBindCount() {
        return this.#view.getUint32(48, LE);
    }
    set imageOpaqueBindCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pImageOpaqueBinds() {
        return this.#view.getBigUint64(56, LE);
    }
    set pImageOpaqueBinds(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get imageBindCount() {
        return this.#view.getUint32(64, LE);
    }
    set imageBindCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pImageBinds() {
        return this.#view.getBigUint64(72, LE);
    }
    set pImageBinds(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(80, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get pSignalSemaphores() {
        return this.#view.getBigUint64(88, LE);
    }
    set pSignalSemaphores(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class VkImageCopy {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCopy.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCopy(new Uint8Array(VkImageCopy.size));
    }
    static create(data) {
        let s = VkImageCopy.alloc();
        return void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.extent && (s.extent = data.extent), s;
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(0, 0 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffset() {
        return new VkOffset3D(this.#data.subarray(16, 16 + VkOffset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(28, 28 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get dstOffset() {
        return new VkOffset3D(this.#data.subarray(44, 44 + VkOffset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(56, 56 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class VkImageBlit {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageBlit.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageBlit(new Uint8Array(VkImageBlit.size));
    }
    static create(data) {
        let s = VkImageBlit.alloc();
        return void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffsets && (s.srcOffsets = data.srcOffsets), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffsets && (s.dstOffsets = data.dstOffsets), s;
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(0, 0 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new VkOffset3D(this.#data.subarray(16 + 12 * i, 16 + 12 * i + VkOffset3D.size)));
        return result;
    }
    set srcOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 16 + 12 * i);
        }
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(40, 40 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get dstOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new VkOffset3D(this.#data.subarray(56 + 12 * i, 56 + 12 * i + VkOffset3D.size)));
        return result;
    }
    set dstOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 56 + 12 * i);
        }
    }
}
export class VkBufferImageCopy {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferImageCopy.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferImageCopy(new Uint8Array(VkBufferImageCopy.size));
    }
    static create(data) {
        let s = VkBufferImageCopy.alloc();
        return void 0 !== data.bufferOffset && (s.bufferOffset = data.bufferOffset), void 0 !== data.bufferRowLength && (s.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (s.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (s.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (s.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (s.imageExtent = data.imageExtent), s;
    }
    get bufferOffset() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferOffset(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(8, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(12, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get imageSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(16, 16 + VkImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get imageOffset() {
        return new VkOffset3D(this.#data.subarray(32, 32 + VkOffset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageExtent() {
        return new VkExtent3D(this.#data.subarray(44, 44 + VkExtent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
}
export class VkCopyMemoryIndirectCommandNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMemoryIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMemoryIndirectCommandNV(new Uint8Array(VkCopyMemoryIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkCopyMemoryIndirectCommandNV.alloc();
        return void 0 !== data.srcAddress && (s.srcAddress = data.srcAddress), void 0 !== data.dstAddress && (s.dstAddress = data.dstAddress), void 0 !== data.size && (s.size = data.size), s;
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkCopyMemoryToImageIndirectCommandNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMemoryToImageIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMemoryToImageIndirectCommandNV(new Uint8Array(VkCopyMemoryToImageIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkCopyMemoryToImageIndirectCommandNV.alloc();
        return void 0 !== data.srcAddress && (s.srcAddress = data.srcAddress), void 0 !== data.bufferRowLength && (s.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (s.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (s.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (s.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (s.imageExtent = data.imageExtent), s;
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(8, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(12, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get imageSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(16, 16 + VkImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get imageOffset() {
        return new VkOffset3D(this.#data.subarray(32, 32 + VkOffset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageExtent() {
        return new VkExtent3D(this.#data.subarray(44, 44 + VkExtent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
}
export class VkImageResolve {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageResolve.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageResolve(new Uint8Array(VkImageResolve.size));
    }
    static create(data) {
        let s = VkImageResolve.alloc();
        return void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.extent && (s.extent = data.extent), s;
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(0, 0 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get srcOffset() {
        return new VkOffset3D(this.#data.subarray(16, 16 + VkOffset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(28, 28 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get dstOffset() {
        return new VkOffset3D(this.#data.subarray(44, 44 + VkOffset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(56, 56 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
}
export class VkShaderModuleCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShaderModuleCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShaderModuleCreateInfo(new Uint8Array(VkShaderModuleCreateInfo.size));
    }
    static create(data) {
        let s = VkShaderModuleCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.codeSize && (s.codeSize = data.codeSize), void 0 !== data.pCode && (s.pCode = data.pCode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get codeSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set codeSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pCode() {
        return this.#view.getBigUint64(32, LE);
    }
    set pCode(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDescriptorSetLayoutBinding {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetLayoutBinding.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetLayoutBinding(new Uint8Array(VkDescriptorSetLayoutBinding.size));
    }
    static create(data) {
        let s = VkDescriptorSetLayoutBinding.alloc();
        return void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.descriptorType && (s.descriptorType = data.descriptorType), void 0 !== data.descriptorCount && (s.descriptorCount = data.descriptorCount), void 0 !== data.stageFlags && (s.stageFlags = data.stageFlags), void 0 !== data.pImmutableSamplers && (s.pImmutableSamplers = data.pImmutableSamplers), s;
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(4, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(8, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get stageFlags() {
        return this.#view.getUint32(12, LE);
    }
    set stageFlags(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get pImmutableSamplers() {
        return this.#view.getBigUint64(16, LE);
    }
    set pImmutableSamplers(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDescriptorSetLayoutCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetLayoutCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetLayoutCreateInfo(new Uint8Array(VkDescriptorSetLayoutCreateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorSetLayoutCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.bindingCount && (s.bindingCount = data.bindingCount), void 0 !== data.pBindings && (s.pBindings = data.pBindings), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bindingCount() {
        return this.#view.getUint32(20, LE);
    }
    set bindingCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pBindings() {
        return this.#view.getBigUint64(24, LE);
    }
    set pBindings(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorPoolSize {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorPoolSize.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorPoolSize(new Uint8Array(VkDescriptorPoolSize.size));
    }
    static create(data) {
        let s = VkDescriptorPoolSize.alloc();
        return void 0 !== data.type && (s.type = data.type), void 0 !== data.descriptorCount && (s.descriptorCount = data.descriptorCount), s;
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(4, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkDescriptorPoolCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorPoolCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorPoolCreateInfo(new Uint8Array(VkDescriptorPoolCreateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorPoolCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.maxSets && (s.maxSets = data.maxSets), void 0 !== data.poolSizeCount && (s.poolSizeCount = data.poolSizeCount), void 0 !== data.pPoolSizes && (s.pPoolSizes = data.pPoolSizes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSets() {
        return this.#view.getUint32(20, LE);
    }
    set maxSets(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get poolSizeCount() {
        return this.#view.getUint32(24, LE);
    }
    set poolSizeCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPoolSizes() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPoolSizes(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDescriptorSetAllocateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetAllocateInfo(new Uint8Array(VkDescriptorSetAllocateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorSetAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorPool && (s.descriptorPool = data.descriptorPool), void 0 !== data.descriptorSetCount && (s.descriptorSetCount = data.descriptorSetCount), void 0 !== data.pSetLayouts && (s.pSetLayouts = data.pSetLayouts), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorPool() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorPool(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get descriptorSetCount() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorSetCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSetLayouts() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSetLayouts(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkSpecializationMapEntry {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSpecializationMapEntry.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSpecializationMapEntry(new Uint8Array(VkSpecializationMapEntry.size));
    }
    static create(data) {
        let s = VkSpecializationMapEntry.alloc();
        return void 0 !== data.constantID && (s.constantID = data.constantID), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), s;
    }
    get constantID() {
        return this.#view.getUint32(0, LE);
    }
    set constantID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(4, LE);
    }
    set offset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(8, LE);
    }
    set size(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkSpecializationInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSpecializationInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSpecializationInfo(new Uint8Array(VkSpecializationInfo.size));
    }
    static create(data) {
        let s = VkSpecializationInfo.alloc();
        return void 0 !== data.mapEntryCount && (s.mapEntryCount = data.mapEntryCount), void 0 !== data.pMapEntries && (s.pMapEntries = data.pMapEntries), void 0 !== data.dataSize && (s.dataSize = data.dataSize), void 0 !== data.pData && (s.pData = data.pData), s;
    }
    get mapEntryCount() {
        return this.#view.getUint32(0, LE);
    }
    set mapEntryCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pMapEntries() {
        return this.#view.getBigUint64(8, LE);
    }
    set pMapEntries(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPipelineShaderStageCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineShaderStageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineShaderStageCreateInfo(new Uint8Array(VkPipelineShaderStageCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineShaderStageCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.stage && (s.stage = data.stage), void 0 !== data.module && (s.module = data.module), void 0 !== data.pName && (s.pName = data.pName), void 0 !== data.pSpecializationInfo && (s.pSpecializationInfo = data.pSpecializationInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stage() {
        return this.#view.getUint32(20, LE);
    }
    set stage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get module() {
        return this.#view.getBigUint64(24, LE);
    }
    set module(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pSpecializationInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSpecializationInfo(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkComputePipelineCreateInfo {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkComputePipelineCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkComputePipelineCreateInfo(new Uint8Array(VkComputePipelineCreateInfo.size));
    }
    static create(data) {
        let s = VkComputePipelineCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.stage && (s.stage = data.stage), void 0 !== data.layout && (s.layout = data.layout), void 0 !== data.basePipelineHandle && (s.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (s.basePipelineIndex = data.basePipelineIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stage() {
        return new VkPipelineShaderStageCreateInfo(this.#data.subarray(20, 20 + VkPipelineShaderStageCreateInfo.size));
    }
    set stage(value) {
        if (value[BUFFER].byteLength < VkPipelineShaderStageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get layout() {
        return this.#view.getBigUint64(72, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(80, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(88, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(88, Number(value), LE);
    }
}
export class VkVertexInputBindingDescription {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVertexInputBindingDescription.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVertexInputBindingDescription(new Uint8Array(VkVertexInputBindingDescription.size));
    }
    static create(data) {
        let s = VkVertexInputBindingDescription.alloc();
        return void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.stride && (s.stride = data.stride), void 0 !== data.inputRate && (s.inputRate = data.inputRate), s;
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(4, LE);
    }
    set stride(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get inputRate() {
        return this.#view.getUint32(8, LE);
    }
    set inputRate(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkVertexInputAttributeDescription {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVertexInputAttributeDescription.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVertexInputAttributeDescription(new Uint8Array(VkVertexInputAttributeDescription.size));
    }
    static create(data) {
        let s = VkVertexInputAttributeDescription.alloc();
        return void 0 !== data.location && (s.location = data.location), void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.format && (s.format = data.format), void 0 !== data.offset && (s.offset = data.offset), s;
    }
    get location() {
        return this.#view.getUint32(0, LE);
    }
    set location(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get binding() {
        return this.#view.getUint32(4, LE);
    }
    set binding(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(8, LE);
    }
    set format(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(12, LE);
    }
    set offset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkPipelineVertexInputStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineVertexInputStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineVertexInputStateCreateInfo(new Uint8Array(VkPipelineVertexInputStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineVertexInputStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.vertexBindingDescriptionCount && (s.vertexBindingDescriptionCount = data.vertexBindingDescriptionCount), void 0 !== data.pVertexBindingDescriptions && (s.pVertexBindingDescriptions = data.pVertexBindingDescriptions), void 0 !== data.vertexAttributeDescriptionCount && (s.vertexAttributeDescriptionCount = data.vertexAttributeDescriptionCount), void 0 !== data.pVertexAttributeDescriptions && (s.pVertexAttributeDescriptions = data.pVertexAttributeDescriptions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexBindingDescriptionCount() {
        return this.#view.getUint32(20, LE);
    }
    set vertexBindingDescriptionCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pVertexBindingDescriptions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVertexBindingDescriptions(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get vertexAttributeDescriptionCount() {
        return this.#view.getUint32(32, LE);
    }
    set vertexAttributeDescriptionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pVertexAttributeDescriptions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pVertexAttributeDescriptions(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkPipelineInputAssemblyStateCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineInputAssemblyStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineInputAssemblyStateCreateInfo(new Uint8Array(VkPipelineInputAssemblyStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineInputAssemblyStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.topology && (s.topology = data.topology), void 0 !== data.primitiveRestartEnable && (s.primitiveRestartEnable = data.primitiveRestartEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get topology() {
        return this.#view.getUint32(20, LE);
    }
    set topology(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primitiveRestartEnable() {
        return this.#view.getUint32(24, LE);
    }
    set primitiveRestartEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPipelineTessellationStateCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineTessellationStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineTessellationStateCreateInfo(new Uint8Array(VkPipelineTessellationStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineTessellationStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.patchControlPoints && (s.patchControlPoints = data.patchControlPoints), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get patchControlPoints() {
        return this.#view.getUint32(20, LE);
    }
    set patchControlPoints(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPipelineViewportStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportStateCreateInfo(new Uint8Array(VkPipelineViewportStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineViewportStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.viewportCount && (s.viewportCount = data.viewportCount), void 0 !== data.pViewports && (s.pViewports = data.pViewports), void 0 !== data.scissorCount && (s.scissorCount = data.scissorCount), void 0 !== data.pScissors && (s.pScissors = data.pScissors), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewports() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewports(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get scissorCount() {
        return this.#view.getUint32(32, LE);
    }
    set scissorCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pScissors() {
        return this.#view.getBigUint64(40, LE);
    }
    set pScissors(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkPipelineRasterizationStateCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationStateCreateInfo(new Uint8Array(VkPipelineRasterizationStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.depthClampEnable && (s.depthClampEnable = data.depthClampEnable), void 0 !== data.rasterizerDiscardEnable && (s.rasterizerDiscardEnable = data.rasterizerDiscardEnable), void 0 !== data.polygonMode && (s.polygonMode = data.polygonMode), void 0 !== data.cullMode && (s.cullMode = data.cullMode), void 0 !== data.frontFace && (s.frontFace = data.frontFace), void 0 !== data.depthBiasEnable && (s.depthBiasEnable = data.depthBiasEnable), void 0 !== data.depthBiasConstantFactor && (s.depthBiasConstantFactor = data.depthBiasConstantFactor), void 0 !== data.depthBiasClamp && (s.depthBiasClamp = data.depthBiasClamp), void 0 !== data.depthBiasSlopeFactor && (s.depthBiasSlopeFactor = data.depthBiasSlopeFactor), void 0 !== data.lineWidth && (s.lineWidth = data.lineWidth), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthClampEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthClampEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rasterizerDiscardEnable() {
        return this.#view.getUint32(24, LE);
    }
    set rasterizerDiscardEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get polygonMode() {
        return this.#view.getUint32(28, LE);
    }
    set polygonMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get cullMode() {
        return this.#view.getUint32(32, LE);
    }
    set cullMode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get frontFace() {
        return this.#view.getUint32(36, LE);
    }
    set frontFace(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get depthBiasEnable() {
        return this.#view.getUint32(40, LE);
    }
    set depthBiasEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get depthBiasConstantFactor() {
        return this.#view.getFloat32(44, LE);
    }
    set depthBiasConstantFactor(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get depthBiasClamp() {
        return this.#view.getFloat32(48, LE);
    }
    set depthBiasClamp(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get depthBiasSlopeFactor() {
        return this.#view.getFloat32(52, LE);
    }
    set depthBiasSlopeFactor(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get lineWidth() {
        return this.#view.getFloat32(56, LE);
    }
    set lineWidth(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
}
export class VkPipelineMultisampleStateCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineMultisampleStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineMultisampleStateCreateInfo(new Uint8Array(VkPipelineMultisampleStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineMultisampleStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.rasterizationSamples && (s.rasterizationSamples = data.rasterizationSamples), void 0 !== data.sampleShadingEnable && (s.sampleShadingEnable = data.sampleShadingEnable), void 0 !== data.minSampleShading && (s.minSampleShading = data.minSampleShading), void 0 !== data.pSampleMask && (s.pSampleMask = data.pSampleMask), void 0 !== data.alphaToCoverageEnable && (s.alphaToCoverageEnable = data.alphaToCoverageEnable), void 0 !== data.alphaToOneEnable && (s.alphaToOneEnable = data.alphaToOneEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sampleShadingEnable() {
        return this.#view.getUint32(24, LE);
    }
    set sampleShadingEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get minSampleShading() {
        return this.#view.getFloat32(28, LE);
    }
    set minSampleShading(value) {
        this.#view.setFloat32(28, Number(value), LE);
    }
    get pSampleMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSampleMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get alphaToCoverageEnable() {
        return this.#view.getUint32(40, LE);
    }
    set alphaToCoverageEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get alphaToOneEnable() {
        return this.#view.getUint32(44, LE);
    }
    set alphaToOneEnable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class VkPipelineColorBlendAttachmentState {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineColorBlendAttachmentState.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineColorBlendAttachmentState(new Uint8Array(VkPipelineColorBlendAttachmentState.size));
    }
    static create(data) {
        let s = VkPipelineColorBlendAttachmentState.alloc();
        return void 0 !== data.blendEnable && (s.blendEnable = data.blendEnable), void 0 !== data.srcColorBlendFactor && (s.srcColorBlendFactor = data.srcColorBlendFactor), void 0 !== data.dstColorBlendFactor && (s.dstColorBlendFactor = data.dstColorBlendFactor), void 0 !== data.colorBlendOp && (s.colorBlendOp = data.colorBlendOp), void 0 !== data.srcAlphaBlendFactor && (s.srcAlphaBlendFactor = data.srcAlphaBlendFactor), void 0 !== data.dstAlphaBlendFactor && (s.dstAlphaBlendFactor = data.dstAlphaBlendFactor), void 0 !== data.alphaBlendOp && (s.alphaBlendOp = data.alphaBlendOp), void 0 !== data.colorWriteMask && (s.colorWriteMask = data.colorWriteMask), s;
    }
    get blendEnable() {
        return this.#view.getUint32(0, LE);
    }
    set blendEnable(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get srcColorBlendFactor() {
        return this.#view.getUint32(4, LE);
    }
    set srcColorBlendFactor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dstColorBlendFactor() {
        return this.#view.getUint32(8, LE);
    }
    set dstColorBlendFactor(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get colorBlendOp() {
        return this.#view.getUint32(12, LE);
    }
    set colorBlendOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get srcAlphaBlendFactor() {
        return this.#view.getUint32(16, LE);
    }
    set srcAlphaBlendFactor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAlphaBlendFactor() {
        return this.#view.getUint32(20, LE);
    }
    set dstAlphaBlendFactor(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get alphaBlendOp() {
        return this.#view.getUint32(24, LE);
    }
    set alphaBlendOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get colorWriteMask() {
        return this.#view.getUint32(28, LE);
    }
    set colorWriteMask(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPipelineColorBlendStateCreateInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineColorBlendStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineColorBlendStateCreateInfo(new Uint8Array(VkPipelineColorBlendStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineColorBlendStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.logicOpEnable && (s.logicOpEnable = data.logicOpEnable), void 0 !== data.logicOp && (s.logicOp = data.logicOp), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (s.pAttachments = data.pAttachments), void 0 !== data.blendConstants && (s.blendConstants = data.blendConstants), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get logicOpEnable() {
        return this.#view.getUint32(20, LE);
    }
    set logicOpEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get logicOp() {
        return this.#view.getUint32(24, LE);
    }
    set logicOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(28, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get blendConstants() {
        let result = [];
        for(let i = 0; i < 4; i++)result.push(this.#view.getFloat32(40 + 4 * i, LE));
        return result;
    }
    set blendConstants(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(40 + 4 * i, Number(value[i]), LE);
    }
}
export class VkPipelineDynamicStateCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineDynamicStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineDynamicStateCreateInfo(new Uint8Array(VkPipelineDynamicStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineDynamicStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.dynamicStateCount && (s.dynamicStateCount = data.dynamicStateCount), void 0 !== data.pDynamicStates && (s.pDynamicStates = data.pDynamicStates), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dynamicStateCount() {
        return this.#view.getUint32(20, LE);
    }
    set dynamicStateCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDynamicStates() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDynamicStates(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkStencilOpState {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkStencilOpState.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkStencilOpState(new Uint8Array(VkStencilOpState.size));
    }
    static create(data) {
        let s = VkStencilOpState.alloc();
        return void 0 !== data.failOp && (s.failOp = data.failOp), void 0 !== data.passOp && (s.passOp = data.passOp), void 0 !== data.depthFailOp && (s.depthFailOp = data.depthFailOp), void 0 !== data.compareOp && (s.compareOp = data.compareOp), void 0 !== data.compareMask && (s.compareMask = data.compareMask), void 0 !== data.writeMask && (s.writeMask = data.writeMask), void 0 !== data.reference && (s.reference = data.reference), s;
    }
    get failOp() {
        return this.#view.getUint32(0, LE);
    }
    set failOp(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get passOp() {
        return this.#view.getUint32(4, LE);
    }
    set passOp(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depthFailOp() {
        return this.#view.getUint32(8, LE);
    }
    set depthFailOp(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get compareOp() {
        return this.#view.getUint32(12, LE);
    }
    set compareOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get compareMask() {
        return this.#view.getUint32(16, LE);
    }
    set compareMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get writeMask() {
        return this.#view.getUint32(20, LE);
    }
    set writeMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get reference() {
        return this.#view.getUint32(24, LE);
    }
    set reference(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPipelineDepthStencilStateCreateInfo {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineDepthStencilStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineDepthStencilStateCreateInfo(new Uint8Array(VkPipelineDepthStencilStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineDepthStencilStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.depthTestEnable && (s.depthTestEnable = data.depthTestEnable), void 0 !== data.depthWriteEnable && (s.depthWriteEnable = data.depthWriteEnable), void 0 !== data.depthCompareOp && (s.depthCompareOp = data.depthCompareOp), void 0 !== data.depthBoundsTestEnable && (s.depthBoundsTestEnable = data.depthBoundsTestEnable), void 0 !== data.stencilTestEnable && (s.stencilTestEnable = data.stencilTestEnable), void 0 !== data.front && (s.front = data.front), void 0 !== data.back && (s.back = data.back), void 0 !== data.minDepthBounds && (s.minDepthBounds = data.minDepthBounds), void 0 !== data.maxDepthBounds && (s.maxDepthBounds = data.maxDepthBounds), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthTestEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthTestEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get depthWriteEnable() {
        return this.#view.getUint32(24, LE);
    }
    set depthWriteEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get depthCompareOp() {
        return this.#view.getUint32(28, LE);
    }
    set depthCompareOp(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get depthBoundsTestEnable() {
        return this.#view.getUint32(32, LE);
    }
    set depthBoundsTestEnable(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilTestEnable() {
        return this.#view.getUint32(36, LE);
    }
    set stencilTestEnable(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get front() {
        return new VkStencilOpState(this.#data.subarray(40, 40 + VkStencilOpState.size));
    }
    set front(value) {
        if (value[BUFFER].byteLength < VkStencilOpState.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get back() {
        return new VkStencilOpState(this.#data.subarray(68, 68 + VkStencilOpState.size));
    }
    set back(value) {
        if (value[BUFFER].byteLength < VkStencilOpState.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 68);
    }
    get minDepthBounds() {
        return this.#view.getFloat32(96, LE);
    }
    set minDepthBounds(value) {
        this.#view.setFloat32(96, Number(value), LE);
    }
    get maxDepthBounds() {
        return this.#view.getFloat32(100, LE);
    }
    set maxDepthBounds(value) {
        this.#view.setFloat32(100, Number(value), LE);
    }
}
export class VkGraphicsPipelineCreateInfo {
    static size = 144;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGraphicsPipelineCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGraphicsPipelineCreateInfo(new Uint8Array(VkGraphicsPipelineCreateInfo.size));
    }
    static create(data) {
        let s = VkGraphicsPipelineCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.stageCount && (s.stageCount = data.stageCount), void 0 !== data.pStages && (s.pStages = data.pStages), void 0 !== data.pVertexInputState && (s.pVertexInputState = data.pVertexInputState), void 0 !== data.pInputAssemblyState && (s.pInputAssemblyState = data.pInputAssemblyState), void 0 !== data.pTessellationState && (s.pTessellationState = data.pTessellationState), void 0 !== data.pViewportState && (s.pViewportState = data.pViewportState), void 0 !== data.pRasterizationState && (s.pRasterizationState = data.pRasterizationState), void 0 !== data.pMultisampleState && (s.pMultisampleState = data.pMultisampleState), void 0 !== data.pDepthStencilState && (s.pDepthStencilState = data.pDepthStencilState), void 0 !== data.pColorBlendState && (s.pColorBlendState = data.pColorBlendState), void 0 !== data.pDynamicState && (s.pDynamicState = data.pDynamicState), void 0 !== data.layout && (s.layout = data.layout), void 0 !== data.renderPass && (s.renderPass = data.renderPass), void 0 !== data.subpass && (s.subpass = data.subpass), void 0 !== data.basePipelineHandle && (s.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (s.basePipelineIndex = data.basePipelineIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pVertexInputState() {
        return this.#view.getBigUint64(32, LE);
    }
    set pVertexInputState(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pInputAssemblyState() {
        return this.#view.getBigUint64(40, LE);
    }
    set pInputAssemblyState(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pTessellationState() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTessellationState(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pViewportState() {
        return this.#view.getBigUint64(56, LE);
    }
    set pViewportState(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pRasterizationState() {
        return this.#view.getBigUint64(64, LE);
    }
    set pRasterizationState(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get pMultisampleState() {
        return this.#view.getBigUint64(72, LE);
    }
    set pMultisampleState(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get pDepthStencilState() {
        return this.#view.getBigUint64(80, LE);
    }
    set pDepthStencilState(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get pColorBlendState() {
        return this.#view.getBigUint64(88, LE);
    }
    set pColorBlendState(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get pDynamicState() {
        return this.#view.getBigUint64(96, LE);
    }
    set pDynamicState(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get layout() {
        return this.#view.getBigUint64(104, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(112, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get subpass() {
        return this.#view.getUint32(120, LE);
    }
    set subpass(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(128, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(128, BigInt(value), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(136, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(136, Number(value), LE);
    }
}
export class VkPipelineCacheCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCacheCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCacheCreateInfo(new Uint8Array(VkPipelineCacheCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineCacheCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.initialDataSize && (s.initialDataSize = data.initialDataSize), void 0 !== data.pInitialData && (s.pInitialData = data.pInitialData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialDataSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialDataSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pInitialData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInitialData(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkPipelineCacheHeaderVersionOne {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCacheHeaderVersionOne.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCacheHeaderVersionOne(new Uint8Array(VkPipelineCacheHeaderVersionOne.size));
    }
    static create(data) {
        let s = VkPipelineCacheHeaderVersionOne.alloc();
        return void 0 !== data.headerSize && (s.headerSize = data.headerSize), void 0 !== data.headerVersion && (s.headerVersion = data.headerVersion), void 0 !== data.vendorID && (s.vendorID = data.vendorID), void 0 !== data.deviceID && (s.deviceID = data.deviceID), void 0 !== data.pipelineCacheUUID && (s.pipelineCacheUUID = data.pipelineCacheUUID), s;
    }
    get headerSize() {
        return this.#view.getUint32(0, LE);
    }
    set headerSize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get headerVersion() {
        return this.#view.getUint32(4, LE);
    }
    set headerVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get pipelineCacheUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set pipelineCacheUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
}
export class VkPushConstantRange {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPushConstantRange.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPushConstantRange(new Uint8Array(VkPushConstantRange.size));
    }
    static create(data) {
        let s = VkPushConstantRange.alloc();
        return void 0 !== data.stageFlags && (s.stageFlags = data.stageFlags), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), s;
    }
    get stageFlags() {
        return this.#view.getUint32(0, LE);
    }
    set stageFlags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(4, LE);
    }
    set offset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkPipelineLayoutCreateInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineLayoutCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineLayoutCreateInfo(new Uint8Array(VkPipelineLayoutCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineLayoutCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.setLayoutCount && (s.setLayoutCount = data.setLayoutCount), void 0 !== data.pSetLayouts && (s.pSetLayouts = data.pSetLayouts), void 0 !== data.pushConstantRangeCount && (s.pushConstantRangeCount = data.pushConstantRangeCount), void 0 !== data.pPushConstantRanges && (s.pPushConstantRanges = data.pPushConstantRanges), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get setLayoutCount() {
        return this.#view.getUint32(20, LE);
    }
    set setLayoutCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pSetLayouts() {
        return this.#view.getBigUint64(24, LE);
    }
    set pSetLayouts(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pushConstantRangeCount() {
        return this.#view.getUint32(32, LE);
    }
    set pushConstantRangeCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPushConstantRanges() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPushConstantRanges(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkSamplerCreateInfo {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerCreateInfo(new Uint8Array(VkSamplerCreateInfo.size));
    }
    static create(data) {
        let s = VkSamplerCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.magFilter && (s.magFilter = data.magFilter), void 0 !== data.minFilter && (s.minFilter = data.minFilter), void 0 !== data.mipmapMode && (s.mipmapMode = data.mipmapMode), void 0 !== data.addressModeU && (s.addressModeU = data.addressModeU), void 0 !== data.addressModeV && (s.addressModeV = data.addressModeV), void 0 !== data.addressModeW && (s.addressModeW = data.addressModeW), void 0 !== data.mipLodBias && (s.mipLodBias = data.mipLodBias), void 0 !== data.anisotropyEnable && (s.anisotropyEnable = data.anisotropyEnable), void 0 !== data.maxAnisotropy && (s.maxAnisotropy = data.maxAnisotropy), void 0 !== data.compareEnable && (s.compareEnable = data.compareEnable), void 0 !== data.compareOp && (s.compareOp = data.compareOp), void 0 !== data.minLod && (s.minLod = data.minLod), void 0 !== data.maxLod && (s.maxLod = data.maxLod), void 0 !== data.borderColor && (s.borderColor = data.borderColor), void 0 !== data.unnormalizedCoordinates && (s.unnormalizedCoordinates = data.unnormalizedCoordinates), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get magFilter() {
        return this.#view.getUint32(20, LE);
    }
    set magFilter(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get minFilter() {
        return this.#view.getUint32(24, LE);
    }
    set minFilter(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get mipmapMode() {
        return this.#view.getUint32(28, LE);
    }
    set mipmapMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get addressModeU() {
        return this.#view.getUint32(32, LE);
    }
    set addressModeU(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get addressModeV() {
        return this.#view.getUint32(36, LE);
    }
    set addressModeV(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get addressModeW() {
        return this.#view.getUint32(40, LE);
    }
    set addressModeW(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get mipLodBias() {
        return this.#view.getFloat32(44, LE);
    }
    set mipLodBias(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get anisotropyEnable() {
        return this.#view.getUint32(48, LE);
    }
    set anisotropyEnable(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxAnisotropy() {
        return this.#view.getFloat32(52, LE);
    }
    set maxAnisotropy(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get compareEnable() {
        return this.#view.getUint32(56, LE);
    }
    set compareEnable(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get compareOp() {
        return this.#view.getUint32(60, LE);
    }
    set compareOp(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get minLod() {
        return this.#view.getFloat32(64, LE);
    }
    set minLod(value) {
        this.#view.setFloat32(64, Number(value), LE);
    }
    get maxLod() {
        return this.#view.getFloat32(68, LE);
    }
    set maxLod(value) {
        this.#view.setFloat32(68, Number(value), LE);
    }
    get borderColor() {
        return this.#view.getUint32(72, LE);
    }
    set borderColor(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get unnormalizedCoordinates() {
        return this.#view.getUint32(76, LE);
    }
    set unnormalizedCoordinates(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
}
export class VkCommandPoolCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandPoolCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandPoolCreateInfo(new Uint8Array(VkCommandPoolCreateInfo.size));
    }
    static create(data) {
        let s = VkCommandPoolCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.queueFamilyIndex && (s.queueFamilyIndex = data.queueFamilyIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkCommandBufferAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferAllocateInfo(new Uint8Array(VkCommandBufferAllocateInfo.size));
    }
    static create(data) {
        let s = VkCommandBufferAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.commandPool && (s.commandPool = data.commandPool), void 0 !== data.level && (s.level = data.level), void 0 !== data.commandBufferCount && (s.commandBufferCount = data.commandBufferCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get commandPool() {
        return this.#view.getBigUint64(16, LE);
    }
    set commandPool(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get level() {
        return this.#view.getUint32(24, LE);
    }
    set level(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(28, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkCommandBufferInheritanceInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferInheritanceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferInheritanceInfo(new Uint8Array(VkCommandBufferInheritanceInfo.size));
    }
    static create(data) {
        let s = VkCommandBufferInheritanceInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.renderPass && (s.renderPass = data.renderPass), void 0 !== data.subpass && (s.subpass = data.subpass), void 0 !== data.framebuffer && (s.framebuffer = data.framebuffer), void 0 !== data.occlusionQueryEnable && (s.occlusionQueryEnable = data.occlusionQueryEnable), void 0 !== data.queryFlags && (s.queryFlags = data.queryFlags), void 0 !== data.pipelineStatistics && (s.pipelineStatistics = data.pipelineStatistics), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get subpass() {
        return this.#view.getUint32(24, LE);
    }
    set subpass(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get framebuffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set framebuffer(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get occlusionQueryEnable() {
        return this.#view.getUint32(40, LE);
    }
    set occlusionQueryEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get queryFlags() {
        return this.#view.getUint32(44, LE);
    }
    set queryFlags(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pipelineStatistics() {
        return this.#view.getUint32(48, LE);
    }
    set pipelineStatistics(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkCommandBufferBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferBeginInfo(new Uint8Array(VkCommandBufferBeginInfo.size));
    }
    static create(data) {
        let s = VkCommandBufferBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pInheritanceInfo && (s.pInheritanceInfo = data.pInheritanceInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pInheritanceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pInheritanceInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkRenderPassBeginInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassBeginInfo(new Uint8Array(VkRenderPassBeginInfo.size));
    }
    static create(data) {
        let s = VkRenderPassBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.renderPass && (s.renderPass = data.renderPass), void 0 !== data.framebuffer && (s.framebuffer = data.framebuffer), void 0 !== data.renderArea && (s.renderArea = data.renderArea), void 0 !== data.clearValueCount && (s.clearValueCount = data.clearValueCount), void 0 !== data.pClearValues && (s.pClearValues = data.pClearValues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get framebuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set framebuffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get renderArea() {
        return new VkRect2D(this.#data.subarray(32, 32 + VkRect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get clearValueCount() {
        return this.#view.getUint32(48, LE);
    }
    set clearValueCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pClearValues() {
        return this.#view.getBigUint64(56, LE);
    }
    set pClearValues(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkClearDepthStencilValue {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkClearDepthStencilValue.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkClearDepthStencilValue(new Uint8Array(VkClearDepthStencilValue.size));
    }
    static create(data) {
        let s = VkClearDepthStencilValue.alloc();
        return void 0 !== data.depth && (s.depth = data.depth), void 0 !== data.stencil && (s.stencil = data.stencil), s;
    }
    get depth() {
        return this.#view.getFloat32(0, LE);
    }
    set depth(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get stencil() {
        return this.#view.getUint32(4, LE);
    }
    set stencil(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkClearAttachment {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkClearAttachment.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkClearAttachment(new Uint8Array(VkClearAttachment.size));
    }
    static create(data) {
        let s = VkClearAttachment.alloc();
        return void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), void 0 !== data.colorAttachment && (s.colorAttachment = data.colorAttachment), void 0 !== data.clearValue && (s.clearValue = data.clearValue), s;
    }
    get aspectMask() {
        return this.#view.getUint32(0, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get colorAttachment() {
        return this.#view.getUint32(4, LE);
    }
    set colorAttachment(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get clearValue() {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
    set clearValue(value) {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
}
export class VkAttachmentDescription {
    static size = 36;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentDescription.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentDescription(new Uint8Array(VkAttachmentDescription.size));
    }
    static create(data) {
        let s = VkAttachmentDescription.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.format && (s.format = data.format), void 0 !== data.samples && (s.samples = data.samples), void 0 !== data.loadOp && (s.loadOp = data.loadOp), void 0 !== data.storeOp && (s.storeOp = data.storeOp), void 0 !== data.stencilLoadOp && (s.stencilLoadOp = data.stencilLoadOp), void 0 !== data.stencilStoreOp && (s.stencilStoreOp = data.stencilStoreOp), void 0 !== data.initialLayout && (s.initialLayout = data.initialLayout), void 0 !== data.finalLayout && (s.finalLayout = data.finalLayout), s;
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(4, LE);
    }
    set format(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(8, LE);
    }
    set samples(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(12, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(16, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilLoadOp() {
        return this.#view.getUint32(20, LE);
    }
    set stencilLoadOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get stencilStoreOp() {
        return this.#view.getUint32(24, LE);
    }
    set stencilStoreOp(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(28, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get finalLayout() {
        return this.#view.getUint32(32, LE);
    }
    set finalLayout(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkAttachmentReference {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentReference.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentReference(new Uint8Array(VkAttachmentReference.size));
    }
    static create(data) {
        let s = VkAttachmentReference.alloc();
        return void 0 !== data.attachment && (s.attachment = data.attachment), void 0 !== data.layout && (s.layout = data.layout), s;
    }
    get attachment() {
        return this.#view.getUint32(0, LE);
    }
    set attachment(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get layout() {
        return this.#view.getUint32(4, LE);
    }
    set layout(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkSubpassDescription {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassDescription.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassDescription(new Uint8Array(VkSubpassDescription.size));
    }
    static create(data) {
        let s = VkSubpassDescription.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.inputAttachmentCount && (s.inputAttachmentCount = data.inputAttachmentCount), void 0 !== data.pInputAttachments && (s.pInputAttachments = data.pInputAttachments), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (s.pColorAttachments = data.pColorAttachments), void 0 !== data.pResolveAttachments && (s.pResolveAttachments = data.pResolveAttachments), void 0 !== data.pDepthStencilAttachment && (s.pDepthStencilAttachment = data.pDepthStencilAttachment), void 0 !== data.preserveAttachmentCount && (s.preserveAttachmentCount = data.preserveAttachmentCount), void 0 !== data.pPreserveAttachments && (s.pPreserveAttachments = data.pPreserveAttachments), s;
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(4, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get inputAttachmentCount() {
        return this.#view.getUint32(8, LE);
    }
    set inputAttachmentCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pInputAttachments() {
        return this.#view.getBigUint64(16, LE);
    }
    set pInputAttachments(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(24, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pResolveAttachments() {
        return this.#view.getBigUint64(40, LE);
    }
    set pResolveAttachments(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pDepthStencilAttachment() {
        return this.#view.getBigUint64(48, LE);
    }
    set pDepthStencilAttachment(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get preserveAttachmentCount() {
        return this.#view.getUint32(56, LE);
    }
    set preserveAttachmentCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pPreserveAttachments() {
        return this.#view.getBigUint64(64, LE);
    }
    set pPreserveAttachments(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkSubpassDependency {
    static size = 28;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassDependency.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassDependency(new Uint8Array(VkSubpassDependency.size));
    }
    static create(data) {
        let s = VkSubpassDependency.alloc();
        return void 0 !== data.srcSubpass && (s.srcSubpass = data.srcSubpass), void 0 !== data.dstSubpass && (s.dstSubpass = data.dstSubpass), void 0 !== data.srcStageMask && (s.srcStageMask = data.srcStageMask), void 0 !== data.dstStageMask && (s.dstStageMask = data.dstStageMask), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.dependencyFlags && (s.dependencyFlags = data.dependencyFlags), s;
    }
    get srcSubpass() {
        return this.#view.getUint32(0, LE);
    }
    set srcSubpass(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstSubpass() {
        return this.#view.getUint32(4, LE);
    }
    set dstSubpass(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get srcStageMask() {
        return this.#view.getUint32(8, LE);
    }
    set srcStageMask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get dstStageMask() {
        return this.#view.getUint32(12, LE);
    }
    set dstStageMask(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(16, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(20, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(24, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkRenderPassCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassCreateInfo(new Uint8Array(VkRenderPassCreateInfo.size));
    }
    static create(data) {
        let s = VkRenderPassCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (s.pAttachments = data.pAttachments), void 0 !== data.subpassCount && (s.subpassCount = data.subpassCount), void 0 !== data.pSubpasses && (s.pSubpasses = data.pSubpasses), void 0 !== data.dependencyCount && (s.dependencyCount = data.dependencyCount), void 0 !== data.pDependencies && (s.pDependencies = data.pDependencies), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(32, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSubpasses() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSubpasses(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(48, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pDependencies() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDependencies(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkEventCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkEventCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkEventCreateInfo(new Uint8Array(VkEventCreateInfo.size));
    }
    static create(data) {
        let s = VkEventCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EVENT_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkFenceCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFenceCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFenceCreateInfo(new Uint8Array(VkFenceCreateInfo.size));
    }
    static create(data) {
        let s = VkFenceCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FENCE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFeatures {
    static size = 220;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFeatures(new Uint8Array(VkPhysicalDeviceFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFeatures.alloc();
        return void 0 !== data.robustBufferAccess && (s.robustBufferAccess = data.robustBufferAccess), void 0 !== data.fullDrawIndexUint32 && (s.fullDrawIndexUint32 = data.fullDrawIndexUint32), void 0 !== data.imageCubeArray && (s.imageCubeArray = data.imageCubeArray), void 0 !== data.independentBlend && (s.independentBlend = data.independentBlend), void 0 !== data.geometryShader && (s.geometryShader = data.geometryShader), void 0 !== data.tessellationShader && (s.tessellationShader = data.tessellationShader), void 0 !== data.sampleRateShading && (s.sampleRateShading = data.sampleRateShading), void 0 !== data.dualSrcBlend && (s.dualSrcBlend = data.dualSrcBlend), void 0 !== data.logicOp && (s.logicOp = data.logicOp), void 0 !== data.multiDrawIndirect && (s.multiDrawIndirect = data.multiDrawIndirect), void 0 !== data.drawIndirectFirstInstance && (s.drawIndirectFirstInstance = data.drawIndirectFirstInstance), void 0 !== data.depthClamp && (s.depthClamp = data.depthClamp), void 0 !== data.depthBiasClamp && (s.depthBiasClamp = data.depthBiasClamp), void 0 !== data.fillModeNonSolid && (s.fillModeNonSolid = data.fillModeNonSolid), void 0 !== data.depthBounds && (s.depthBounds = data.depthBounds), void 0 !== data.wideLines && (s.wideLines = data.wideLines), void 0 !== data.largePoints && (s.largePoints = data.largePoints), void 0 !== data.alphaToOne && (s.alphaToOne = data.alphaToOne), void 0 !== data.multiViewport && (s.multiViewport = data.multiViewport), void 0 !== data.samplerAnisotropy && (s.samplerAnisotropy = data.samplerAnisotropy), void 0 !== data.textureCompressionETC2 && (s.textureCompressionETC2 = data.textureCompressionETC2), void 0 !== data.textureCompressionASTC_LDR && (s.textureCompressionASTC_LDR = data.textureCompressionASTC_LDR), void 0 !== data.textureCompressionBC && (s.textureCompressionBC = data.textureCompressionBC), void 0 !== data.occlusionQueryPrecise && (s.occlusionQueryPrecise = data.occlusionQueryPrecise), void 0 !== data.pipelineStatisticsQuery && (s.pipelineStatisticsQuery = data.pipelineStatisticsQuery), void 0 !== data.vertexPipelineStoresAndAtomics && (s.vertexPipelineStoresAndAtomics = data.vertexPipelineStoresAndAtomics), void 0 !== data.fragmentStoresAndAtomics && (s.fragmentStoresAndAtomics = data.fragmentStoresAndAtomics), void 0 !== data.shaderTessellationAndGeometryPointSize && (s.shaderTessellationAndGeometryPointSize = data.shaderTessellationAndGeometryPointSize), void 0 !== data.shaderImageGatherExtended && (s.shaderImageGatherExtended = data.shaderImageGatherExtended), void 0 !== data.shaderStorageImageExtendedFormats && (s.shaderStorageImageExtendedFormats = data.shaderStorageImageExtendedFormats), void 0 !== data.shaderStorageImageMultisample && (s.shaderStorageImageMultisample = data.shaderStorageImageMultisample), void 0 !== data.shaderStorageImageReadWithoutFormat && (s.shaderStorageImageReadWithoutFormat = data.shaderStorageImageReadWithoutFormat), void 0 !== data.shaderStorageImageWriteWithoutFormat && (s.shaderStorageImageWriteWithoutFormat = data.shaderStorageImageWriteWithoutFormat), void 0 !== data.shaderUniformBufferArrayDynamicIndexing && (s.shaderUniformBufferArrayDynamicIndexing = data.shaderUniformBufferArrayDynamicIndexing), void 0 !== data.shaderSampledImageArrayDynamicIndexing && (s.shaderSampledImageArrayDynamicIndexing = data.shaderSampledImageArrayDynamicIndexing), void 0 !== data.shaderStorageBufferArrayDynamicIndexing && (s.shaderStorageBufferArrayDynamicIndexing = data.shaderStorageBufferArrayDynamicIndexing), void 0 !== data.shaderStorageImageArrayDynamicIndexing && (s.shaderStorageImageArrayDynamicIndexing = data.shaderStorageImageArrayDynamicIndexing), void 0 !== data.shaderClipDistance && (s.shaderClipDistance = data.shaderClipDistance), void 0 !== data.shaderCullDistance && (s.shaderCullDistance = data.shaderCullDistance), void 0 !== data.shaderFloat64 && (s.shaderFloat64 = data.shaderFloat64), void 0 !== data.shaderInt64 && (s.shaderInt64 = data.shaderInt64), void 0 !== data.shaderInt16 && (s.shaderInt16 = data.shaderInt16), void 0 !== data.shaderResourceResidency && (s.shaderResourceResidency = data.shaderResourceResidency), void 0 !== data.shaderResourceMinLod && (s.shaderResourceMinLod = data.shaderResourceMinLod), void 0 !== data.sparseBinding && (s.sparseBinding = data.sparseBinding), void 0 !== data.sparseResidencyBuffer && (s.sparseResidencyBuffer = data.sparseResidencyBuffer), void 0 !== data.sparseResidencyImage2D && (s.sparseResidencyImage2D = data.sparseResidencyImage2D), void 0 !== data.sparseResidencyImage3D && (s.sparseResidencyImage3D = data.sparseResidencyImage3D), void 0 !== data.sparseResidency2Samples && (s.sparseResidency2Samples = data.sparseResidency2Samples), void 0 !== data.sparseResidency4Samples && (s.sparseResidency4Samples = data.sparseResidency4Samples), void 0 !== data.sparseResidency8Samples && (s.sparseResidency8Samples = data.sparseResidency8Samples), void 0 !== data.sparseResidency16Samples && (s.sparseResidency16Samples = data.sparseResidency16Samples), void 0 !== data.sparseResidencyAliased && (s.sparseResidencyAliased = data.sparseResidencyAliased), void 0 !== data.variableMultisampleRate && (s.variableMultisampleRate = data.variableMultisampleRate), void 0 !== data.inheritedQueries && (s.inheritedQueries = data.inheritedQueries), s;
    }
    get robustBufferAccess() {
        return this.#view.getUint32(0, LE);
    }
    set robustBufferAccess(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get fullDrawIndexUint32() {
        return this.#view.getUint32(4, LE);
    }
    set fullDrawIndexUint32(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get imageCubeArray() {
        return this.#view.getUint32(8, LE);
    }
    set imageCubeArray(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get independentBlend() {
        return this.#view.getUint32(12, LE);
    }
    set independentBlend(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get geometryShader() {
        return this.#view.getUint32(16, LE);
    }
    set geometryShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get tessellationShader() {
        return this.#view.getUint32(20, LE);
    }
    set tessellationShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get sampleRateShading() {
        return this.#view.getUint32(24, LE);
    }
    set sampleRateShading(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dualSrcBlend() {
        return this.#view.getUint32(28, LE);
    }
    set dualSrcBlend(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get logicOp() {
        return this.#view.getUint32(32, LE);
    }
    set logicOp(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multiDrawIndirect() {
        return this.#view.getUint32(36, LE);
    }
    set multiDrawIndirect(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get drawIndirectFirstInstance() {
        return this.#view.getUint32(40, LE);
    }
    set drawIndirectFirstInstance(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get depthClamp() {
        return this.#view.getUint32(44, LE);
    }
    set depthClamp(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get depthBiasClamp() {
        return this.#view.getUint32(48, LE);
    }
    set depthBiasClamp(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get fillModeNonSolid() {
        return this.#view.getUint32(52, LE);
    }
    set fillModeNonSolid(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get depthBounds() {
        return this.#view.getUint32(56, LE);
    }
    set depthBounds(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get wideLines() {
        return this.#view.getUint32(60, LE);
    }
    set wideLines(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get largePoints() {
        return this.#view.getUint32(64, LE);
    }
    set largePoints(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get alphaToOne() {
        return this.#view.getUint32(68, LE);
    }
    set alphaToOne(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get multiViewport() {
        return this.#view.getUint32(72, LE);
    }
    set multiViewport(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get samplerAnisotropy() {
        return this.#view.getUint32(76, LE);
    }
    set samplerAnisotropy(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get textureCompressionETC2() {
        return this.#view.getUint32(80, LE);
    }
    set textureCompressionETC2(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get textureCompressionASTC_LDR() {
        return this.#view.getUint32(84, LE);
    }
    set textureCompressionASTC_LDR(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get textureCompressionBC() {
        return this.#view.getUint32(88, LE);
    }
    set textureCompressionBC(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get occlusionQueryPrecise() {
        return this.#view.getUint32(92, LE);
    }
    set occlusionQueryPrecise(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get pipelineStatisticsQuery() {
        return this.#view.getUint32(96, LE);
    }
    set pipelineStatisticsQuery(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get vertexPipelineStoresAndAtomics() {
        return this.#view.getUint32(100, LE);
    }
    set vertexPipelineStoresAndAtomics(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get fragmentStoresAndAtomics() {
        return this.#view.getUint32(104, LE);
    }
    set fragmentStoresAndAtomics(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get shaderTessellationAndGeometryPointSize() {
        return this.#view.getUint32(108, LE);
    }
    set shaderTessellationAndGeometryPointSize(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get shaderImageGatherExtended() {
        return this.#view.getUint32(112, LE);
    }
    set shaderImageGatherExtended(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get shaderStorageImageExtendedFormats() {
        return this.#view.getUint32(116, LE);
    }
    set shaderStorageImageExtendedFormats(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get shaderStorageImageMultisample() {
        return this.#view.getUint32(120, LE);
    }
    set shaderStorageImageMultisample(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get shaderStorageImageReadWithoutFormat() {
        return this.#view.getUint32(124, LE);
    }
    set shaderStorageImageReadWithoutFormat(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get shaderStorageImageWriteWithoutFormat() {
        return this.#view.getUint32(128, LE);
    }
    set shaderStorageImageWriteWithoutFormat(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get shaderUniformBufferArrayDynamicIndexing() {
        return this.#view.getUint32(132, LE);
    }
    set shaderUniformBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get shaderSampledImageArrayDynamicIndexing() {
        return this.#view.getUint32(136, LE);
    }
    set shaderSampledImageArrayDynamicIndexing(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get shaderStorageBufferArrayDynamicIndexing() {
        return this.#view.getUint32(140, LE);
    }
    set shaderStorageBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get shaderStorageImageArrayDynamicIndexing() {
        return this.#view.getUint32(144, LE);
    }
    set shaderStorageImageArrayDynamicIndexing(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get shaderClipDistance() {
        return this.#view.getUint32(148, LE);
    }
    set shaderClipDistance(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get shaderCullDistance() {
        return this.#view.getUint32(152, LE);
    }
    set shaderCullDistance(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get shaderFloat64() {
        return this.#view.getUint32(156, LE);
    }
    set shaderFloat64(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get shaderInt64() {
        return this.#view.getUint32(160, LE);
    }
    set shaderInt64(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get shaderInt16() {
        return this.#view.getUint32(164, LE);
    }
    set shaderInt16(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get shaderResourceResidency() {
        return this.#view.getUint32(168, LE);
    }
    set shaderResourceResidency(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get shaderResourceMinLod() {
        return this.#view.getUint32(172, LE);
    }
    set shaderResourceMinLod(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get sparseBinding() {
        return this.#view.getUint32(176, LE);
    }
    set sparseBinding(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get sparseResidencyBuffer() {
        return this.#view.getUint32(180, LE);
    }
    set sparseResidencyBuffer(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get sparseResidencyImage2D() {
        return this.#view.getUint32(184, LE);
    }
    set sparseResidencyImage2D(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get sparseResidencyImage3D() {
        return this.#view.getUint32(188, LE);
    }
    set sparseResidencyImage3D(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get sparseResidency2Samples() {
        return this.#view.getUint32(192, LE);
    }
    set sparseResidency2Samples(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get sparseResidency4Samples() {
        return this.#view.getUint32(196, LE);
    }
    set sparseResidency4Samples(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get sparseResidency8Samples() {
        return this.#view.getUint32(200, LE);
    }
    set sparseResidency8Samples(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get sparseResidency16Samples() {
        return this.#view.getUint32(204, LE);
    }
    set sparseResidency16Samples(value) {
        this.#view.setUint32(204, Number(value), LE);
    }
    get sparseResidencyAliased() {
        return this.#view.getUint32(208, LE);
    }
    set sparseResidencyAliased(value) {
        this.#view.setUint32(208, Number(value), LE);
    }
    get variableMultisampleRate() {
        return this.#view.getUint32(212, LE);
    }
    set variableMultisampleRate(value) {
        this.#view.setUint32(212, Number(value), LE);
    }
    get inheritedQueries() {
        return this.#view.getUint32(216, LE);
    }
    set inheritedQueries(value) {
        this.#view.setUint32(216, Number(value), LE);
    }
}
export class VkPhysicalDeviceSparseProperties {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSparseProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSparseProperties(new Uint8Array(VkPhysicalDeviceSparseProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSparseProperties.alloc();
        return void 0 !== data.residencyStandard2DBlockShape && (s.residencyStandard2DBlockShape = data.residencyStandard2DBlockShape), void 0 !== data.residencyStandard2DMultisampleBlockShape && (s.residencyStandard2DMultisampleBlockShape = data.residencyStandard2DMultisampleBlockShape), void 0 !== data.residencyStandard3DBlockShape && (s.residencyStandard3DBlockShape = data.residencyStandard3DBlockShape), void 0 !== data.residencyAlignedMipSize && (s.residencyAlignedMipSize = data.residencyAlignedMipSize), void 0 !== data.residencyNonResidentStrict && (s.residencyNonResidentStrict = data.residencyNonResidentStrict), s;
    }
    get residencyStandard2DBlockShape() {
        return this.#view.getUint32(0, LE);
    }
    set residencyStandard2DBlockShape(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get residencyStandard2DMultisampleBlockShape() {
        return this.#view.getUint32(4, LE);
    }
    set residencyStandard2DMultisampleBlockShape(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get residencyStandard3DBlockShape() {
        return this.#view.getUint32(8, LE);
    }
    set residencyStandard3DBlockShape(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get residencyAlignedMipSize() {
        return this.#view.getUint32(12, LE);
    }
    set residencyAlignedMipSize(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get residencyNonResidentStrict() {
        return this.#view.getUint32(16, LE);
    }
    set residencyNonResidentStrict(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceLimits {
    static size = 504;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceLimits.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceLimits(new Uint8Array(VkPhysicalDeviceLimits.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceLimits.alloc();
        return void 0 !== data.maxImageDimension1D && (s.maxImageDimension1D = data.maxImageDimension1D), void 0 !== data.maxImageDimension2D && (s.maxImageDimension2D = data.maxImageDimension2D), void 0 !== data.maxImageDimension3D && (s.maxImageDimension3D = data.maxImageDimension3D), void 0 !== data.maxImageDimensionCube && (s.maxImageDimensionCube = data.maxImageDimensionCube), void 0 !== data.maxImageArrayLayers && (s.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.maxTexelBufferElements && (s.maxTexelBufferElements = data.maxTexelBufferElements), void 0 !== data.maxUniformBufferRange && (s.maxUniformBufferRange = data.maxUniformBufferRange), void 0 !== data.maxStorageBufferRange && (s.maxStorageBufferRange = data.maxStorageBufferRange), void 0 !== data.maxPushConstantsSize && (s.maxPushConstantsSize = data.maxPushConstantsSize), void 0 !== data.maxMemoryAllocationCount && (s.maxMemoryAllocationCount = data.maxMemoryAllocationCount), void 0 !== data.maxSamplerAllocationCount && (s.maxSamplerAllocationCount = data.maxSamplerAllocationCount), void 0 !== data.bufferImageGranularity && (s.bufferImageGranularity = data.bufferImageGranularity), void 0 !== data.sparseAddressSpaceSize && (s.sparseAddressSpaceSize = data.sparseAddressSpaceSize), void 0 !== data.maxBoundDescriptorSets && (s.maxBoundDescriptorSets = data.maxBoundDescriptorSets), void 0 !== data.maxPerStageDescriptorSamplers && (s.maxPerStageDescriptorSamplers = data.maxPerStageDescriptorSamplers), void 0 !== data.maxPerStageDescriptorUniformBuffers && (s.maxPerStageDescriptorUniformBuffers = data.maxPerStageDescriptorUniformBuffers), void 0 !== data.maxPerStageDescriptorStorageBuffers && (s.maxPerStageDescriptorStorageBuffers = data.maxPerStageDescriptorStorageBuffers), void 0 !== data.maxPerStageDescriptorSampledImages && (s.maxPerStageDescriptorSampledImages = data.maxPerStageDescriptorSampledImages), void 0 !== data.maxPerStageDescriptorStorageImages && (s.maxPerStageDescriptorStorageImages = data.maxPerStageDescriptorStorageImages), void 0 !== data.maxPerStageDescriptorInputAttachments && (s.maxPerStageDescriptorInputAttachments = data.maxPerStageDescriptorInputAttachments), void 0 !== data.maxPerStageResources && (s.maxPerStageResources = data.maxPerStageResources), void 0 !== data.maxDescriptorSetSamplers && (s.maxDescriptorSetSamplers = data.maxDescriptorSetSamplers), void 0 !== data.maxDescriptorSetUniformBuffers && (s.maxDescriptorSetUniformBuffers = data.maxDescriptorSetUniformBuffers), void 0 !== data.maxDescriptorSetUniformBuffersDynamic && (s.maxDescriptorSetUniformBuffersDynamic = data.maxDescriptorSetUniformBuffersDynamic), void 0 !== data.maxDescriptorSetStorageBuffers && (s.maxDescriptorSetStorageBuffers = data.maxDescriptorSetStorageBuffers), void 0 !== data.maxDescriptorSetStorageBuffersDynamic && (s.maxDescriptorSetStorageBuffersDynamic = data.maxDescriptorSetStorageBuffersDynamic), void 0 !== data.maxDescriptorSetSampledImages && (s.maxDescriptorSetSampledImages = data.maxDescriptorSetSampledImages), void 0 !== data.maxDescriptorSetStorageImages && (s.maxDescriptorSetStorageImages = data.maxDescriptorSetStorageImages), void 0 !== data.maxDescriptorSetInputAttachments && (s.maxDescriptorSetInputAttachments = data.maxDescriptorSetInputAttachments), void 0 !== data.maxVertexInputAttributes && (s.maxVertexInputAttributes = data.maxVertexInputAttributes), void 0 !== data.maxVertexInputBindings && (s.maxVertexInputBindings = data.maxVertexInputBindings), void 0 !== data.maxVertexInputAttributeOffset && (s.maxVertexInputAttributeOffset = data.maxVertexInputAttributeOffset), void 0 !== data.maxVertexInputBindingStride && (s.maxVertexInputBindingStride = data.maxVertexInputBindingStride), void 0 !== data.maxVertexOutputComponents && (s.maxVertexOutputComponents = data.maxVertexOutputComponents), void 0 !== data.maxTessellationGenerationLevel && (s.maxTessellationGenerationLevel = data.maxTessellationGenerationLevel), void 0 !== data.maxTessellationPatchSize && (s.maxTessellationPatchSize = data.maxTessellationPatchSize), void 0 !== data.maxTessellationControlPerVertexInputComponents && (s.maxTessellationControlPerVertexInputComponents = data.maxTessellationControlPerVertexInputComponents), void 0 !== data.maxTessellationControlPerVertexOutputComponents && (s.maxTessellationControlPerVertexOutputComponents = data.maxTessellationControlPerVertexOutputComponents), void 0 !== data.maxTessellationControlPerPatchOutputComponents && (s.maxTessellationControlPerPatchOutputComponents = data.maxTessellationControlPerPatchOutputComponents), void 0 !== data.maxTessellationControlTotalOutputComponents && (s.maxTessellationControlTotalOutputComponents = data.maxTessellationControlTotalOutputComponents), void 0 !== data.maxTessellationEvaluationInputComponents && (s.maxTessellationEvaluationInputComponents = data.maxTessellationEvaluationInputComponents), void 0 !== data.maxTessellationEvaluationOutputComponents && (s.maxTessellationEvaluationOutputComponents = data.maxTessellationEvaluationOutputComponents), void 0 !== data.maxGeometryShaderInvocations && (s.maxGeometryShaderInvocations = data.maxGeometryShaderInvocations), void 0 !== data.maxGeometryInputComponents && (s.maxGeometryInputComponents = data.maxGeometryInputComponents), void 0 !== data.maxGeometryOutputComponents && (s.maxGeometryOutputComponents = data.maxGeometryOutputComponents), void 0 !== data.maxGeometryOutputVertices && (s.maxGeometryOutputVertices = data.maxGeometryOutputVertices), void 0 !== data.maxGeometryTotalOutputComponents && (s.maxGeometryTotalOutputComponents = data.maxGeometryTotalOutputComponents), void 0 !== data.maxFragmentInputComponents && (s.maxFragmentInputComponents = data.maxFragmentInputComponents), void 0 !== data.maxFragmentOutputAttachments && (s.maxFragmentOutputAttachments = data.maxFragmentOutputAttachments), void 0 !== data.maxFragmentDualSrcAttachments && (s.maxFragmentDualSrcAttachments = data.maxFragmentDualSrcAttachments), void 0 !== data.maxFragmentCombinedOutputResources && (s.maxFragmentCombinedOutputResources = data.maxFragmentCombinedOutputResources), void 0 !== data.maxComputeSharedMemorySize && (s.maxComputeSharedMemorySize = data.maxComputeSharedMemorySize), void 0 !== data.maxComputeWorkGroupCount && (s.maxComputeWorkGroupCount = data.maxComputeWorkGroupCount), void 0 !== data.maxComputeWorkGroupInvocations && (s.maxComputeWorkGroupInvocations = data.maxComputeWorkGroupInvocations), void 0 !== data.maxComputeWorkGroupSize && (s.maxComputeWorkGroupSize = data.maxComputeWorkGroupSize), void 0 !== data.subPixelPrecisionBits && (s.subPixelPrecisionBits = data.subPixelPrecisionBits), void 0 !== data.subTexelPrecisionBits && (s.subTexelPrecisionBits = data.subTexelPrecisionBits), void 0 !== data.mipmapPrecisionBits && (s.mipmapPrecisionBits = data.mipmapPrecisionBits), void 0 !== data.maxDrawIndexedIndexValue && (s.maxDrawIndexedIndexValue = data.maxDrawIndexedIndexValue), void 0 !== data.maxDrawIndirectCount && (s.maxDrawIndirectCount = data.maxDrawIndirectCount), void 0 !== data.maxSamplerLodBias && (s.maxSamplerLodBias = data.maxSamplerLodBias), void 0 !== data.maxSamplerAnisotropy && (s.maxSamplerAnisotropy = data.maxSamplerAnisotropy), void 0 !== data.maxViewports && (s.maxViewports = data.maxViewports), void 0 !== data.maxViewportDimensions && (s.maxViewportDimensions = data.maxViewportDimensions), void 0 !== data.viewportBoundsRange && (s.viewportBoundsRange = data.viewportBoundsRange), void 0 !== data.viewportSubPixelBits && (s.viewportSubPixelBits = data.viewportSubPixelBits), void 0 !== data.minMemoryMapAlignment && (s.minMemoryMapAlignment = data.minMemoryMapAlignment), void 0 !== data.minTexelBufferOffsetAlignment && (s.minTexelBufferOffsetAlignment = data.minTexelBufferOffsetAlignment), void 0 !== data.minUniformBufferOffsetAlignment && (s.minUniformBufferOffsetAlignment = data.minUniformBufferOffsetAlignment), void 0 !== data.minStorageBufferOffsetAlignment && (s.minStorageBufferOffsetAlignment = data.minStorageBufferOffsetAlignment), void 0 !== data.minTexelOffset && (s.minTexelOffset = data.minTexelOffset), void 0 !== data.maxTexelOffset && (s.maxTexelOffset = data.maxTexelOffset), void 0 !== data.minTexelGatherOffset && (s.minTexelGatherOffset = data.minTexelGatherOffset), void 0 !== data.maxTexelGatherOffset && (s.maxTexelGatherOffset = data.maxTexelGatherOffset), void 0 !== data.minInterpolationOffset && (s.minInterpolationOffset = data.minInterpolationOffset), void 0 !== data.maxInterpolationOffset && (s.maxInterpolationOffset = data.maxInterpolationOffset), void 0 !== data.subPixelInterpolationOffsetBits && (s.subPixelInterpolationOffsetBits = data.subPixelInterpolationOffsetBits), void 0 !== data.maxFramebufferWidth && (s.maxFramebufferWidth = data.maxFramebufferWidth), void 0 !== data.maxFramebufferHeight && (s.maxFramebufferHeight = data.maxFramebufferHeight), void 0 !== data.maxFramebufferLayers && (s.maxFramebufferLayers = data.maxFramebufferLayers), void 0 !== data.framebufferColorSampleCounts && (s.framebufferColorSampleCounts = data.framebufferColorSampleCounts), void 0 !== data.framebufferDepthSampleCounts && (s.framebufferDepthSampleCounts = data.framebufferDepthSampleCounts), void 0 !== data.framebufferStencilSampleCounts && (s.framebufferStencilSampleCounts = data.framebufferStencilSampleCounts), void 0 !== data.framebufferNoAttachmentsSampleCounts && (s.framebufferNoAttachmentsSampleCounts = data.framebufferNoAttachmentsSampleCounts), void 0 !== data.maxColorAttachments && (s.maxColorAttachments = data.maxColorAttachments), void 0 !== data.sampledImageColorSampleCounts && (s.sampledImageColorSampleCounts = data.sampledImageColorSampleCounts), void 0 !== data.sampledImageIntegerSampleCounts && (s.sampledImageIntegerSampleCounts = data.sampledImageIntegerSampleCounts), void 0 !== data.sampledImageDepthSampleCounts && (s.sampledImageDepthSampleCounts = data.sampledImageDepthSampleCounts), void 0 !== data.sampledImageStencilSampleCounts && (s.sampledImageStencilSampleCounts = data.sampledImageStencilSampleCounts), void 0 !== data.storageImageSampleCounts && (s.storageImageSampleCounts = data.storageImageSampleCounts), void 0 !== data.maxSampleMaskWords && (s.maxSampleMaskWords = data.maxSampleMaskWords), void 0 !== data.timestampComputeAndGraphics && (s.timestampComputeAndGraphics = data.timestampComputeAndGraphics), void 0 !== data.timestampPeriod && (s.timestampPeriod = data.timestampPeriod), void 0 !== data.maxClipDistances && (s.maxClipDistances = data.maxClipDistances), void 0 !== data.maxCullDistances && (s.maxCullDistances = data.maxCullDistances), void 0 !== data.maxCombinedClipAndCullDistances && (s.maxCombinedClipAndCullDistances = data.maxCombinedClipAndCullDistances), void 0 !== data.discreteQueuePriorities && (s.discreteQueuePriorities = data.discreteQueuePriorities), void 0 !== data.pointSizeRange && (s.pointSizeRange = data.pointSizeRange), void 0 !== data.lineWidthRange && (s.lineWidthRange = data.lineWidthRange), void 0 !== data.pointSizeGranularity && (s.pointSizeGranularity = data.pointSizeGranularity), void 0 !== data.lineWidthGranularity && (s.lineWidthGranularity = data.lineWidthGranularity), void 0 !== data.strictLines && (s.strictLines = data.strictLines), void 0 !== data.standardSampleLocations && (s.standardSampleLocations = data.standardSampleLocations), void 0 !== data.optimalBufferCopyOffsetAlignment && (s.optimalBufferCopyOffsetAlignment = data.optimalBufferCopyOffsetAlignment), void 0 !== data.optimalBufferCopyRowPitchAlignment && (s.optimalBufferCopyRowPitchAlignment = data.optimalBufferCopyRowPitchAlignment), void 0 !== data.nonCoherentAtomSize && (s.nonCoherentAtomSize = data.nonCoherentAtomSize), s;
    }
    get maxImageDimension1D() {
        return this.#view.getUint32(0, LE);
    }
    set maxImageDimension1D(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get maxImageDimension2D() {
        return this.#view.getUint32(4, LE);
    }
    set maxImageDimension2D(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get maxImageDimension3D() {
        return this.#view.getUint32(8, LE);
    }
    set maxImageDimension3D(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get maxImageDimensionCube() {
        return this.#view.getUint32(12, LE);
    }
    set maxImageDimensionCube(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(16, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTexelBufferElements() {
        return this.#view.getUint32(20, LE);
    }
    set maxTexelBufferElements(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxUniformBufferRange() {
        return this.#view.getUint32(24, LE);
    }
    set maxUniformBufferRange(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxStorageBufferRange() {
        return this.#view.getUint32(28, LE);
    }
    set maxStorageBufferRange(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxPushConstantsSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxPushConstantsSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxMemoryAllocationCount() {
        return this.#view.getUint32(36, LE);
    }
    set maxMemoryAllocationCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxSamplerAllocationCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxSamplerAllocationCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get bufferImageGranularity() {
        return this.#view.getBigUint64(48, LE);
    }
    set bufferImageGranularity(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get sparseAddressSpaceSize() {
        return this.#view.getBigUint64(56, LE);
    }
    set sparseAddressSpaceSize(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get maxBoundDescriptorSets() {
        return this.#view.getUint32(64, LE);
    }
    set maxBoundDescriptorSets(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxPerStageDescriptorSamplers() {
        return this.#view.getUint32(68, LE);
    }
    set maxPerStageDescriptorSamplers(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxPerStageDescriptorUniformBuffers() {
        return this.#view.getUint32(72, LE);
    }
    set maxPerStageDescriptorUniformBuffers(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get maxPerStageDescriptorStorageBuffers() {
        return this.#view.getUint32(76, LE);
    }
    set maxPerStageDescriptorStorageBuffers(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxPerStageDescriptorSampledImages() {
        return this.#view.getUint32(80, LE);
    }
    set maxPerStageDescriptorSampledImages(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxPerStageDescriptorStorageImages() {
        return this.#view.getUint32(84, LE);
    }
    set maxPerStageDescriptorStorageImages(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxPerStageDescriptorInputAttachments() {
        return this.#view.getUint32(88, LE);
    }
    set maxPerStageDescriptorInputAttachments(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get maxPerStageResources() {
        return this.#view.getUint32(92, LE);
    }
    set maxPerStageResources(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxDescriptorSetSamplers() {
        return this.#view.getUint32(96, LE);
    }
    set maxDescriptorSetSamplers(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxDescriptorSetUniformBuffers() {
        return this.#view.getUint32(100, LE);
    }
    set maxDescriptorSetUniformBuffers(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxDescriptorSetUniformBuffersDynamic() {
        return this.#view.getUint32(104, LE);
    }
    set maxDescriptorSetUniformBuffersDynamic(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get maxDescriptorSetStorageBuffers() {
        return this.#view.getUint32(108, LE);
    }
    set maxDescriptorSetStorageBuffers(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get maxDescriptorSetStorageBuffersDynamic() {
        return this.#view.getUint32(112, LE);
    }
    set maxDescriptorSetStorageBuffersDynamic(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get maxDescriptorSetSampledImages() {
        return this.#view.getUint32(116, LE);
    }
    set maxDescriptorSetSampledImages(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get maxDescriptorSetStorageImages() {
        return this.#view.getUint32(120, LE);
    }
    set maxDescriptorSetStorageImages(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get maxDescriptorSetInputAttachments() {
        return this.#view.getUint32(124, LE);
    }
    set maxDescriptorSetInputAttachments(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get maxVertexInputAttributes() {
        return this.#view.getUint32(128, LE);
    }
    set maxVertexInputAttributes(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get maxVertexInputBindings() {
        return this.#view.getUint32(132, LE);
    }
    set maxVertexInputBindings(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get maxVertexInputAttributeOffset() {
        return this.#view.getUint32(136, LE);
    }
    set maxVertexInputAttributeOffset(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get maxVertexInputBindingStride() {
        return this.#view.getUint32(140, LE);
    }
    set maxVertexInputBindingStride(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get maxVertexOutputComponents() {
        return this.#view.getUint32(144, LE);
    }
    set maxVertexOutputComponents(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get maxTessellationGenerationLevel() {
        return this.#view.getUint32(148, LE);
    }
    set maxTessellationGenerationLevel(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get maxTessellationPatchSize() {
        return this.#view.getUint32(152, LE);
    }
    set maxTessellationPatchSize(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get maxTessellationControlPerVertexInputComponents() {
        return this.#view.getUint32(156, LE);
    }
    set maxTessellationControlPerVertexInputComponents(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get maxTessellationControlPerVertexOutputComponents() {
        return this.#view.getUint32(160, LE);
    }
    set maxTessellationControlPerVertexOutputComponents(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get maxTessellationControlPerPatchOutputComponents() {
        return this.#view.getUint32(164, LE);
    }
    set maxTessellationControlPerPatchOutputComponents(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get maxTessellationControlTotalOutputComponents() {
        return this.#view.getUint32(168, LE);
    }
    set maxTessellationControlTotalOutputComponents(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get maxTessellationEvaluationInputComponents() {
        return this.#view.getUint32(172, LE);
    }
    set maxTessellationEvaluationInputComponents(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get maxTessellationEvaluationOutputComponents() {
        return this.#view.getUint32(176, LE);
    }
    set maxTessellationEvaluationOutputComponents(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get maxGeometryShaderInvocations() {
        return this.#view.getUint32(180, LE);
    }
    set maxGeometryShaderInvocations(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get maxGeometryInputComponents() {
        return this.#view.getUint32(184, LE);
    }
    set maxGeometryInputComponents(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get maxGeometryOutputComponents() {
        return this.#view.getUint32(188, LE);
    }
    set maxGeometryOutputComponents(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get maxGeometryOutputVertices() {
        return this.#view.getUint32(192, LE);
    }
    set maxGeometryOutputVertices(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get maxGeometryTotalOutputComponents() {
        return this.#view.getUint32(196, LE);
    }
    set maxGeometryTotalOutputComponents(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get maxFragmentInputComponents() {
        return this.#view.getUint32(200, LE);
    }
    set maxFragmentInputComponents(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get maxFragmentOutputAttachments() {
        return this.#view.getUint32(204, LE);
    }
    set maxFragmentOutputAttachments(value) {
        this.#view.setUint32(204, Number(value), LE);
    }
    get maxFragmentDualSrcAttachments() {
        return this.#view.getUint32(208, LE);
    }
    set maxFragmentDualSrcAttachments(value) {
        this.#view.setUint32(208, Number(value), LE);
    }
    get maxFragmentCombinedOutputResources() {
        return this.#view.getUint32(212, LE);
    }
    set maxFragmentCombinedOutputResources(value) {
        this.#view.setUint32(212, Number(value), LE);
    }
    get maxComputeSharedMemorySize() {
        return this.#view.getUint32(216, LE);
    }
    set maxComputeSharedMemorySize(value) {
        this.#view.setUint32(216, Number(value), LE);
    }
    get maxComputeWorkGroupCount() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(220 + 4 * i, LE));
        return result;
    }
    set maxComputeWorkGroupCount(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(220 + 4 * i, Number(value[i]), LE);
    }
    get maxComputeWorkGroupInvocations() {
        return this.#view.getUint32(232, LE);
    }
    set maxComputeWorkGroupInvocations(value) {
        this.#view.setUint32(232, Number(value), LE);
    }
    get maxComputeWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(236 + 4 * i, LE));
        return result;
    }
    set maxComputeWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(236 + 4 * i, Number(value[i]), LE);
    }
    get subPixelPrecisionBits() {
        return this.#view.getUint32(248, LE);
    }
    set subPixelPrecisionBits(value) {
        this.#view.setUint32(248, Number(value), LE);
    }
    get subTexelPrecisionBits() {
        return this.#view.getUint32(252, LE);
    }
    set subTexelPrecisionBits(value) {
        this.#view.setUint32(252, Number(value), LE);
    }
    get mipmapPrecisionBits() {
        return this.#view.getUint32(256, LE);
    }
    set mipmapPrecisionBits(value) {
        this.#view.setUint32(256, Number(value), LE);
    }
    get maxDrawIndexedIndexValue() {
        return this.#view.getUint32(260, LE);
    }
    set maxDrawIndexedIndexValue(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
    get maxDrawIndirectCount() {
        return this.#view.getUint32(264, LE);
    }
    set maxDrawIndirectCount(value) {
        this.#view.setUint32(264, Number(value), LE);
    }
    get maxSamplerLodBias() {
        return this.#view.getFloat32(268, LE);
    }
    set maxSamplerLodBias(value) {
        this.#view.setFloat32(268, Number(value), LE);
    }
    get maxSamplerAnisotropy() {
        return this.#view.getFloat32(272, LE);
    }
    set maxSamplerAnisotropy(value) {
        this.#view.setFloat32(272, Number(value), LE);
    }
    get maxViewports() {
        return this.#view.getUint32(276, LE);
    }
    set maxViewports(value) {
        this.#view.setUint32(276, Number(value), LE);
    }
    get maxViewportDimensions() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getUint32(280 + 4 * i, LE));
        return result;
    }
    set maxViewportDimensions(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(280 + 4 * i, Number(value[i]), LE);
    }
    get viewportBoundsRange() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getFloat32(288 + 4 * i, LE));
        return result;
    }
    set viewportBoundsRange(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(288 + 4 * i, Number(value[i]), LE);
    }
    get viewportSubPixelBits() {
        return this.#view.getUint32(296, LE);
    }
    set viewportSubPixelBits(value) {
        this.#view.setUint32(296, Number(value), LE);
    }
    get minMemoryMapAlignment() {
        return this.#view.getBigUint64(304, LE);
    }
    set minMemoryMapAlignment(value) {
        this.#view.setBigUint64(304, BigInt(value), LE);
    }
    get minTexelBufferOffsetAlignment() {
        return this.#view.getBigUint64(312, LE);
    }
    set minTexelBufferOffsetAlignment(value) {
        this.#view.setBigUint64(312, BigInt(value), LE);
    }
    get minUniformBufferOffsetAlignment() {
        return this.#view.getBigUint64(320, LE);
    }
    set minUniformBufferOffsetAlignment(value) {
        this.#view.setBigUint64(320, BigInt(value), LE);
    }
    get minStorageBufferOffsetAlignment() {
        return this.#view.getBigUint64(328, LE);
    }
    set minStorageBufferOffsetAlignment(value) {
        this.#view.setBigUint64(328, BigInt(value), LE);
    }
    get minTexelOffset() {
        return this.#view.getInt32(336, LE);
    }
    set minTexelOffset(value) {
        this.#view.setInt32(336, Number(value), LE);
    }
    get maxTexelOffset() {
        return this.#view.getUint32(340, LE);
    }
    set maxTexelOffset(value) {
        this.#view.setUint32(340, Number(value), LE);
    }
    get minTexelGatherOffset() {
        return this.#view.getInt32(344, LE);
    }
    set minTexelGatherOffset(value) {
        this.#view.setInt32(344, Number(value), LE);
    }
    get maxTexelGatherOffset() {
        return this.#view.getUint32(348, LE);
    }
    set maxTexelGatherOffset(value) {
        this.#view.setUint32(348, Number(value), LE);
    }
    get minInterpolationOffset() {
        return this.#view.getFloat32(352, LE);
    }
    set minInterpolationOffset(value) {
        this.#view.setFloat32(352, Number(value), LE);
    }
    get maxInterpolationOffset() {
        return this.#view.getFloat32(356, LE);
    }
    set maxInterpolationOffset(value) {
        this.#view.setFloat32(356, Number(value), LE);
    }
    get subPixelInterpolationOffsetBits() {
        return this.#view.getUint32(360, LE);
    }
    set subPixelInterpolationOffsetBits(value) {
        this.#view.setUint32(360, Number(value), LE);
    }
    get maxFramebufferWidth() {
        return this.#view.getUint32(364, LE);
    }
    set maxFramebufferWidth(value) {
        this.#view.setUint32(364, Number(value), LE);
    }
    get maxFramebufferHeight() {
        return this.#view.getUint32(368, LE);
    }
    set maxFramebufferHeight(value) {
        this.#view.setUint32(368, Number(value), LE);
    }
    get maxFramebufferLayers() {
        return this.#view.getUint32(372, LE);
    }
    set maxFramebufferLayers(value) {
        this.#view.setUint32(372, Number(value), LE);
    }
    get framebufferColorSampleCounts() {
        return this.#view.getUint32(376, LE);
    }
    set framebufferColorSampleCounts(value) {
        this.#view.setUint32(376, Number(value), LE);
    }
    get framebufferDepthSampleCounts() {
        return this.#view.getUint32(380, LE);
    }
    set framebufferDepthSampleCounts(value) {
        this.#view.setUint32(380, Number(value), LE);
    }
    get framebufferStencilSampleCounts() {
        return this.#view.getUint32(384, LE);
    }
    set framebufferStencilSampleCounts(value) {
        this.#view.setUint32(384, Number(value), LE);
    }
    get framebufferNoAttachmentsSampleCounts() {
        return this.#view.getUint32(388, LE);
    }
    set framebufferNoAttachmentsSampleCounts(value) {
        this.#view.setUint32(388, Number(value), LE);
    }
    get maxColorAttachments() {
        return this.#view.getUint32(392, LE);
    }
    set maxColorAttachments(value) {
        this.#view.setUint32(392, Number(value), LE);
    }
    get sampledImageColorSampleCounts() {
        return this.#view.getUint32(396, LE);
    }
    set sampledImageColorSampleCounts(value) {
        this.#view.setUint32(396, Number(value), LE);
    }
    get sampledImageIntegerSampleCounts() {
        return this.#view.getUint32(400, LE);
    }
    set sampledImageIntegerSampleCounts(value) {
        this.#view.setUint32(400, Number(value), LE);
    }
    get sampledImageDepthSampleCounts() {
        return this.#view.getUint32(404, LE);
    }
    set sampledImageDepthSampleCounts(value) {
        this.#view.setUint32(404, Number(value), LE);
    }
    get sampledImageStencilSampleCounts() {
        return this.#view.getUint32(408, LE);
    }
    set sampledImageStencilSampleCounts(value) {
        this.#view.setUint32(408, Number(value), LE);
    }
    get storageImageSampleCounts() {
        return this.#view.getUint32(412, LE);
    }
    set storageImageSampleCounts(value) {
        this.#view.setUint32(412, Number(value), LE);
    }
    get maxSampleMaskWords() {
        return this.#view.getUint32(416, LE);
    }
    set maxSampleMaskWords(value) {
        this.#view.setUint32(416, Number(value), LE);
    }
    get timestampComputeAndGraphics() {
        return this.#view.getUint32(420, LE);
    }
    set timestampComputeAndGraphics(value) {
        this.#view.setUint32(420, Number(value), LE);
    }
    get timestampPeriod() {
        return this.#view.getFloat32(424, LE);
    }
    set timestampPeriod(value) {
        this.#view.setFloat32(424, Number(value), LE);
    }
    get maxClipDistances() {
        return this.#view.getUint32(428, LE);
    }
    set maxClipDistances(value) {
        this.#view.setUint32(428, Number(value), LE);
    }
    get maxCullDistances() {
        return this.#view.getUint32(432, LE);
    }
    set maxCullDistances(value) {
        this.#view.setUint32(432, Number(value), LE);
    }
    get maxCombinedClipAndCullDistances() {
        return this.#view.getUint32(436, LE);
    }
    set maxCombinedClipAndCullDistances(value) {
        this.#view.setUint32(436, Number(value), LE);
    }
    get discreteQueuePriorities() {
        return this.#view.getUint32(440, LE);
    }
    set discreteQueuePriorities(value) {
        this.#view.setUint32(440, Number(value), LE);
    }
    get pointSizeRange() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getFloat32(444 + 4 * i, LE));
        return result;
    }
    set pointSizeRange(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(444 + 4 * i, Number(value[i]), LE);
    }
    get lineWidthRange() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getFloat32(452 + 4 * i, LE));
        return result;
    }
    set lineWidthRange(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(452 + 4 * i, Number(value[i]), LE);
    }
    get pointSizeGranularity() {
        return this.#view.getFloat32(460, LE);
    }
    set pointSizeGranularity(value) {
        this.#view.setFloat32(460, Number(value), LE);
    }
    get lineWidthGranularity() {
        return this.#view.getFloat32(464, LE);
    }
    set lineWidthGranularity(value) {
        this.#view.setFloat32(464, Number(value), LE);
    }
    get strictLines() {
        return this.#view.getUint32(468, LE);
    }
    set strictLines(value) {
        this.#view.setUint32(468, Number(value), LE);
    }
    get standardSampleLocations() {
        return this.#view.getUint32(472, LE);
    }
    set standardSampleLocations(value) {
        this.#view.setUint32(472, Number(value), LE);
    }
    get optimalBufferCopyOffsetAlignment() {
        return this.#view.getBigUint64(480, LE);
    }
    set optimalBufferCopyOffsetAlignment(value) {
        this.#view.setBigUint64(480, BigInt(value), LE);
    }
    get optimalBufferCopyRowPitchAlignment() {
        return this.#view.getBigUint64(488, LE);
    }
    set optimalBufferCopyRowPitchAlignment(value) {
        this.#view.setBigUint64(488, BigInt(value), LE);
    }
    get nonCoherentAtomSize() {
        return this.#view.getBigUint64(496, LE);
    }
    set nonCoherentAtomSize(value) {
        this.#view.setBigUint64(496, BigInt(value), LE);
    }
}
export class VkSemaphoreCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreCreateInfo(new Uint8Array(VkSemaphoreCreateInfo.size));
    }
    static create(data) {
        let s = VkSemaphoreCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkQueryPoolCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueryPoolCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueryPoolCreateInfo(new Uint8Array(VkQueryPoolCreateInfo.size));
    }
    static create(data) {
        let s = VkQueryPoolCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.queryType && (s.queryType = data.queryType), void 0 !== data.queryCount && (s.queryCount = data.queryCount), void 0 !== data.pipelineStatistics && (s.pipelineStatistics = data.pipelineStatistics), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queryType() {
        return this.#view.getUint32(20, LE);
    }
    set queryType(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queryCount() {
        return this.#view.getUint32(24, LE);
    }
    set queryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pipelineStatistics() {
        return this.#view.getUint32(28, LE);
    }
    set pipelineStatistics(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkFramebufferCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFramebufferCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFramebufferCreateInfo(new Uint8Array(VkFramebufferCreateInfo.size));
    }
    static create(data) {
        let s = VkFramebufferCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.renderPass && (s.renderPass = data.renderPass), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (s.pAttachments = data.pAttachments), void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.layers && (s.layers = data.layers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(24, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(32, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get width() {
        return this.#view.getUint32(48, LE);
    }
    set width(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(52, LE);
    }
    set height(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get layers() {
        return this.#view.getUint32(56, LE);
    }
    set layers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkDrawIndirectCommand {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrawIndirectCommand.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrawIndirectCommand(new Uint8Array(VkDrawIndirectCommand.size));
    }
    static create(data) {
        let s = VkDrawIndirectCommand.alloc();
        return void 0 !== data.vertexCount && (s.vertexCount = data.vertexCount), void 0 !== data.instanceCount && (s.instanceCount = data.instanceCount), void 0 !== data.firstVertex && (s.firstVertex = data.firstVertex), void 0 !== data.firstInstance && (s.firstInstance = data.firstInstance), s;
    }
    get vertexCount() {
        return this.#view.getUint32(0, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstVertex() {
        return this.#view.getUint32(8, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get firstInstance() {
        return this.#view.getUint32(12, LE);
    }
    set firstInstance(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkDrawIndexedIndirectCommand {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrawIndexedIndirectCommand.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrawIndexedIndirectCommand(new Uint8Array(VkDrawIndexedIndirectCommand.size));
    }
    static create(data) {
        let s = VkDrawIndexedIndirectCommand.alloc();
        return void 0 !== data.indexCount && (s.indexCount = data.indexCount), void 0 !== data.instanceCount && (s.instanceCount = data.instanceCount), void 0 !== data.firstIndex && (s.firstIndex = data.firstIndex), void 0 !== data.vertexOffset && (s.vertexOffset = data.vertexOffset), void 0 !== data.firstInstance && (s.firstInstance = data.firstInstance), s;
    }
    get indexCount() {
        return this.#view.getUint32(0, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstIndex() {
        return this.#view.getUint32(8, LE);
    }
    set firstIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get vertexOffset() {
        return this.#view.getInt32(12, LE);
    }
    set vertexOffset(value) {
        this.#view.setInt32(12, Number(value), LE);
    }
    get firstInstance() {
        return this.#view.getUint32(16, LE);
    }
    set firstInstance(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDispatchIndirectCommand {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDispatchIndirectCommand.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDispatchIndirectCommand(new Uint8Array(VkDispatchIndirectCommand.size));
    }
    static create(data) {
        let s = VkDispatchIndirectCommand.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), void 0 !== data.z && (s.z = data.z), s;
    }
    get x() {
        return this.#view.getUint32(0, LE);
    }
    set x(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getUint32(4, LE);
    }
    set y(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getUint32(8, LE);
    }
    set z(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkMultiDrawInfoEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMultiDrawInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMultiDrawInfoEXT(new Uint8Array(VkMultiDrawInfoEXT.size));
    }
    static create(data) {
        let s = VkMultiDrawInfoEXT.alloc();
        return void 0 !== data.firstVertex && (s.firstVertex = data.firstVertex), void 0 !== data.vertexCount && (s.vertexCount = data.vertexCount), s;
    }
    get firstVertex() {
        return this.#view.getUint32(0, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get vertexCount() {
        return this.#view.getUint32(4, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkMultiDrawIndexedInfoEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMultiDrawIndexedInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMultiDrawIndexedInfoEXT(new Uint8Array(VkMultiDrawIndexedInfoEXT.size));
    }
    static create(data) {
        let s = VkMultiDrawIndexedInfoEXT.alloc();
        return void 0 !== data.firstIndex && (s.firstIndex = data.firstIndex), void 0 !== data.indexCount && (s.indexCount = data.indexCount), void 0 !== data.vertexOffset && (s.vertexOffset = data.vertexOffset), s;
    }
    get firstIndex() {
        return this.#view.getUint32(0, LE);
    }
    set firstIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get indexCount() {
        return this.#view.getUint32(4, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vertexOffset() {
        return this.#view.getInt32(8, LE);
    }
    set vertexOffset(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VkSubmitInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubmitInfo(new Uint8Array(VkSubmitInfo.size));
    }
    static create(data) {
        let s = VkSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (s.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (s.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.pWaitDstStageMask && (s.pWaitDstStageMask = data.pWaitDstStageMask), void 0 !== data.commandBufferCount && (s.commandBufferCount = data.commandBufferCount), void 0 !== data.pCommandBuffers && (s.pCommandBuffers = data.pCommandBuffers), void 0 !== data.signalSemaphoreCount && (s.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphores && (s.pSignalSemaphores = data.pSignalSemaphores), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pWaitDstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set pWaitDstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(40, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pCommandBuffers() {
        return this.#view.getBigUint64(48, LE);
    }
    set pCommandBuffers(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(56, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get pSignalSemaphores() {
        return this.#view.getBigUint64(64, LE);
    }
    set pSignalSemaphores(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkDisplayPropertiesKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPropertiesKHR(new Uint8Array(VkDisplayPropertiesKHR.size));
    }
    static create(data) {
        let s = VkDisplayPropertiesKHR.alloc();
        return void 0 !== data.display && (s.display = data.display), void 0 !== data.displayName && (s.displayName = data.displayName), void 0 !== data.physicalDimensions && (s.physicalDimensions = data.physicalDimensions), void 0 !== data.physicalResolution && (s.physicalResolution = data.physicalResolution), void 0 !== data.supportedTransforms && (s.supportedTransforms = data.supportedTransforms), void 0 !== data.planeReorderPossible && (s.planeReorderPossible = data.planeReorderPossible), void 0 !== data.persistentContent && (s.persistentContent = data.persistentContent), s;
    }
    get display() {
        return this.#view.getBigUint64(0, LE);
    }
    set display(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get displayName() {
        return this.#view.getBigUint64(8, LE);
    }
    set displayName(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get physicalDimensions() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set physicalDimensions(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get physicalResolution() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set physicalResolution(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get supportedTransforms() {
        return this.#view.getUint32(32, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get planeReorderPossible() {
        return this.#view.getUint32(36, LE);
    }
    set planeReorderPossible(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get persistentContent() {
        return this.#view.getUint32(40, LE);
    }
    set persistentContent(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkDisplayPlanePropertiesKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPlanePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPlanePropertiesKHR(new Uint8Array(VkDisplayPlanePropertiesKHR.size));
    }
    static create(data) {
        let s = VkDisplayPlanePropertiesKHR.alloc();
        return void 0 !== data.currentDisplay && (s.currentDisplay = data.currentDisplay), void 0 !== data.currentStackIndex && (s.currentStackIndex = data.currentStackIndex), s;
    }
    get currentDisplay() {
        return this.#view.getBigUint64(0, LE);
    }
    set currentDisplay(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get currentStackIndex() {
        return this.#view.getUint32(8, LE);
    }
    set currentStackIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkDisplayModeParametersKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayModeParametersKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayModeParametersKHR(new Uint8Array(VkDisplayModeParametersKHR.size));
    }
    static create(data) {
        let s = VkDisplayModeParametersKHR.alloc();
        return void 0 !== data.visibleRegion && (s.visibleRegion = data.visibleRegion), void 0 !== data.refreshRate && (s.refreshRate = data.refreshRate), s;
    }
    get visibleRegion() {
        return new VkExtent2D(this.#data.subarray(0, 0 + VkExtent2D.size));
    }
    set visibleRegion(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get refreshRate() {
        return this.#view.getUint32(8, LE);
    }
    set refreshRate(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkDisplayModePropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayModePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayModePropertiesKHR(new Uint8Array(VkDisplayModePropertiesKHR.size));
    }
    static create(data) {
        let s = VkDisplayModePropertiesKHR.alloc();
        return void 0 !== data.displayMode && (s.displayMode = data.displayMode), void 0 !== data.parameters && (s.parameters = data.parameters), s;
    }
    get displayMode() {
        return this.#view.getBigUint64(0, LE);
    }
    set displayMode(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get parameters() {
        return new VkDisplayModeParametersKHR(this.#data.subarray(8, 8 + VkDisplayModeParametersKHR.size));
    }
    set parameters(value) {
        if (value[BUFFER].byteLength < VkDisplayModeParametersKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
}
export class VkDisplayModeCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayModeCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayModeCreateInfoKHR(new Uint8Array(VkDisplayModeCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkDisplayModeCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.parameters && (s.parameters = data.parameters), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get parameters() {
        return new VkDisplayModeParametersKHR(this.#data.subarray(20, 20 + VkDisplayModeParametersKHR.size));
    }
    set parameters(value) {
        if (value[BUFFER].byteLength < VkDisplayModeParametersKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VkDisplayPlaneCapabilitiesKHR {
    static size = 68;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPlaneCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPlaneCapabilitiesKHR(new Uint8Array(VkDisplayPlaneCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkDisplayPlaneCapabilitiesKHR.alloc();
        return void 0 !== data.supportedAlpha && (s.supportedAlpha = data.supportedAlpha), void 0 !== data.minSrcPosition && (s.minSrcPosition = data.minSrcPosition), void 0 !== data.maxSrcPosition && (s.maxSrcPosition = data.maxSrcPosition), void 0 !== data.minSrcExtent && (s.minSrcExtent = data.minSrcExtent), void 0 !== data.maxSrcExtent && (s.maxSrcExtent = data.maxSrcExtent), void 0 !== data.minDstPosition && (s.minDstPosition = data.minDstPosition), void 0 !== data.maxDstPosition && (s.maxDstPosition = data.maxDstPosition), void 0 !== data.minDstExtent && (s.minDstExtent = data.minDstExtent), void 0 !== data.maxDstExtent && (s.maxDstExtent = data.maxDstExtent), s;
    }
    get supportedAlpha() {
        return this.#view.getUint32(0, LE);
    }
    set supportedAlpha(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get minSrcPosition() {
        return new VkOffset2D(this.#data.subarray(4, 4 + VkOffset2D.size));
    }
    set minSrcPosition(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get maxSrcPosition() {
        return new VkOffset2D(this.#data.subarray(12, 12 + VkOffset2D.size));
    }
    set maxSrcPosition(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 12);
    }
    get minSrcExtent() {
        return new VkExtent2D(this.#data.subarray(20, 20 + VkExtent2D.size));
    }
    set minSrcExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get maxSrcExtent() {
        return new VkExtent2D(this.#data.subarray(28, 28 + VkExtent2D.size));
    }
    set maxSrcExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get minDstPosition() {
        return new VkOffset2D(this.#data.subarray(36, 36 + VkOffset2D.size));
    }
    set minDstPosition(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get maxDstPosition() {
        return new VkOffset2D(this.#data.subarray(44, 44 + VkOffset2D.size));
    }
    set maxDstPosition(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get minDstExtent() {
        return new VkExtent2D(this.#data.subarray(52, 52 + VkExtent2D.size));
    }
    set minDstExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 52);
    }
    get maxDstExtent() {
        return new VkExtent2D(this.#data.subarray(60, 60 + VkExtent2D.size));
    }
    set maxDstExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
}
export class VkDisplaySurfaceCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplaySurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplaySurfaceCreateInfoKHR(new Uint8Array(VkDisplaySurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkDisplaySurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.displayMode && (s.displayMode = data.displayMode), void 0 !== data.planeIndex && (s.planeIndex = data.planeIndex), void 0 !== data.planeStackIndex && (s.planeStackIndex = data.planeStackIndex), void 0 !== data.transform && (s.transform = data.transform), void 0 !== data.globalAlpha && (s.globalAlpha = data.globalAlpha), void 0 !== data.alphaMode && (s.alphaMode = data.alphaMode), void 0 !== data.imageExtent && (s.imageExtent = data.imageExtent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get displayMode() {
        return this.#view.getBigUint64(24, LE);
    }
    set displayMode(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get planeIndex() {
        return this.#view.getUint32(32, LE);
    }
    set planeIndex(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get planeStackIndex() {
        return this.#view.getUint32(36, LE);
    }
    set planeStackIndex(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get transform() {
        return this.#view.getUint32(40, LE);
    }
    set transform(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get globalAlpha() {
        return this.#view.getFloat32(44, LE);
    }
    set globalAlpha(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get alphaMode() {
        return this.#view.getUint32(48, LE);
    }
    set alphaMode(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get imageExtent() {
        return new VkExtent2D(this.#data.subarray(52, 52 + VkExtent2D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 52);
    }
}
export class VkDisplayPresentInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPresentInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPresentInfoKHR(new Uint8Array(VkDisplayPresentInfoKHR.size));
    }
    static create(data) {
        let s = VkDisplayPresentInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcRect && (s.srcRect = data.srcRect), void 0 !== data.dstRect && (s.dstRect = data.dstRect), void 0 !== data.persistent && (s.persistent = data.persistent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcRect() {
        return new VkRect2D(this.#data.subarray(16, 16 + VkRect2D.size));
    }
    set srcRect(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get dstRect() {
        return new VkRect2D(this.#data.subarray(32, 32 + VkRect2D.size));
    }
    set dstRect(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get persistent() {
        return this.#view.getUint32(48, LE);
    }
    set persistent(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkSurfaceCapabilitiesKHR {
    static size = 52;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceCapabilitiesKHR(new Uint8Array(VkSurfaceCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkSurfaceCapabilitiesKHR.alloc();
        return void 0 !== data.minImageCount && (s.minImageCount = data.minImageCount), void 0 !== data.maxImageCount && (s.maxImageCount = data.maxImageCount), void 0 !== data.currentExtent && (s.currentExtent = data.currentExtent), void 0 !== data.minImageExtent && (s.minImageExtent = data.minImageExtent), void 0 !== data.maxImageExtent && (s.maxImageExtent = data.maxImageExtent), void 0 !== data.maxImageArrayLayers && (s.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.supportedTransforms && (s.supportedTransforms = data.supportedTransforms), void 0 !== data.currentTransform && (s.currentTransform = data.currentTransform), void 0 !== data.supportedCompositeAlpha && (s.supportedCompositeAlpha = data.supportedCompositeAlpha), void 0 !== data.supportedUsageFlags && (s.supportedUsageFlags = data.supportedUsageFlags), s;
    }
    get minImageCount() {
        return this.#view.getUint32(0, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get maxImageCount() {
        return this.#view.getUint32(4, LE);
    }
    set maxImageCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get currentExtent() {
        return new VkExtent2D(this.#data.subarray(8, 8 + VkExtent2D.size));
    }
    set currentExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
    get minImageExtent() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set minImageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxImageExtent() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set maxImageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(32, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get supportedTransforms() {
        return this.#view.getUint32(36, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get currentTransform() {
        return this.#view.getUint32(40, LE);
    }
    set currentTransform(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get supportedCompositeAlpha() {
        return this.#view.getUint32(44, LE);
    }
    set supportedCompositeAlpha(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get supportedUsageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set supportedUsageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkAndroidSurfaceCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAndroidSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAndroidSurfaceCreateInfoKHR(new Uint8Array(VkAndroidSurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkAndroidSurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.window && (s.window = data.window), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(24, LE);
    }
    set window(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkViSurfaceCreateInfoNN {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkViSurfaceCreateInfoNN.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkViSurfaceCreateInfoNN(new Uint8Array(VkViSurfaceCreateInfoNN.size));
    }
    static create(data) {
        let s = VkViSurfaceCreateInfoNN.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.window && (s.window = data.window), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(24, LE);
    }
    set window(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkWaylandSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWaylandSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWaylandSurfaceCreateInfoKHR(new Uint8Array(VkWaylandSurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkWaylandSurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.display && (s.display = data.display), void 0 !== data.surface && (s.surface = data.surface), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get display() {
        return this.#view.getBigUint64(24, LE);
    }
    set display(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get surface() {
        return this.#view.getBigUint64(32, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkWin32SurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWin32SurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWin32SurfaceCreateInfoKHR(new Uint8Array(VkWin32SurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkWin32SurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.hinstance && (s.hinstance = data.hinstance), void 0 !== data.hwnd && (s.hwnd = data.hwnd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get hinstance() {
        return this.#view.getBigUint64(24, LE);
    }
    set hinstance(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get hwnd() {
        return this.#view.getBigUint64(32, LE);
    }
    set hwnd(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkXlibSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkXlibSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkXlibSurfaceCreateInfoKHR(new Uint8Array(VkXlibSurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkXlibSurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.dpy && (s.dpy = data.dpy), void 0 !== data.window && (s.window = data.window), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dpy() {
        return this.#view.getBigUint64(24, LE);
    }
    set dpy(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkXcbSurfaceCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkXcbSurfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkXcbSurfaceCreateInfoKHR(new Uint8Array(VkXcbSurfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkXcbSurfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.connection && (s.connection = data.connection), void 0 !== data.window && (s.window = data.window), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get connection() {
        return this.#view.getBigUint64(24, LE);
    }
    set connection(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDirectFBSurfaceCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDirectFBSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDirectFBSurfaceCreateInfoEXT(new Uint8Array(VkDirectFBSurfaceCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkDirectFBSurfaceCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.dfb && (s.dfb = data.dfb), void 0 !== data.surface && (s.surface = data.surface), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dfb() {
        return this.#view.getBigUint64(24, LE);
    }
    set dfb(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get surface() {
        return this.#view.getBigUint64(32, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImagePipeSurfaceCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImagePipeSurfaceCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImagePipeSurfaceCreateInfoFUCHSIA(new Uint8Array(VkImagePipeSurfaceCreateInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkImagePipeSurfaceCreateInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.imagePipeHandle && (s.imagePipeHandle = data.imagePipeHandle), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imagePipeHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set imagePipeHandle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkStreamDescriptorSurfaceCreateInfoGGP {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkStreamDescriptorSurfaceCreateInfoGGP.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkStreamDescriptorSurfaceCreateInfoGGP(new Uint8Array(VkStreamDescriptorSurfaceCreateInfoGGP.size));
    }
    static create(data) {
        let s = VkStreamDescriptorSurfaceCreateInfoGGP.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.streamDescriptor && (s.streamDescriptor = data.streamDescriptor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get streamDescriptor() {
        return this.#view.getBigUint64(24, LE);
    }
    set streamDescriptor(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkScreenSurfaceCreateInfoQNX {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkScreenSurfaceCreateInfoQNX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkScreenSurfaceCreateInfoQNX(new Uint8Array(VkScreenSurfaceCreateInfoQNX.size));
    }
    static create(data) {
        let s = VkScreenSurfaceCreateInfoQNX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.context && (s.context = data.context), void 0 !== data.window && (s.window = data.window), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get context() {
        return this.#view.getBigUint64(24, LE);
    }
    set context(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get window() {
        return this.#view.getBigUint64(32, LE);
    }
    set window(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkSurfaceFormatKHR {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceFormatKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceFormatKHR(new Uint8Array(VkSurfaceFormatKHR.size));
    }
    static create(data) {
        let s = VkSurfaceFormatKHR.alloc();
        return void 0 !== data.format && (s.format = data.format), void 0 !== data.colorSpace && (s.colorSpace = data.colorSpace), s;
    }
    get format() {
        return this.#view.getUint32(0, LE);
    }
    set format(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get colorSpace() {
        return this.#view.getUint32(4, LE);
    }
    set colorSpace(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkSwapchainCreateInfoKHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSwapchainCreateInfoKHR(new Uint8Array(VkSwapchainCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkSwapchainCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.surface && (s.surface = data.surface), void 0 !== data.minImageCount && (s.minImageCount = data.minImageCount), void 0 !== data.imageFormat && (s.imageFormat = data.imageFormat), void 0 !== data.imageColorSpace && (s.imageColorSpace = data.imageColorSpace), void 0 !== data.imageExtent && (s.imageExtent = data.imageExtent), void 0 !== data.imageArrayLayers && (s.imageArrayLayers = data.imageArrayLayers), void 0 !== data.imageUsage && (s.imageUsage = data.imageUsage), void 0 !== data.imageSharingMode && (s.imageSharingMode = data.imageSharingMode), void 0 !== data.queueFamilyIndexCount && (s.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (s.pQueueFamilyIndices = data.pQueueFamilyIndices), void 0 !== data.preTransform && (s.preTransform = data.preTransform), void 0 !== data.compositeAlpha && (s.compositeAlpha = data.compositeAlpha), void 0 !== data.presentMode && (s.presentMode = data.presentMode), void 0 !== data.clipped && (s.clipped = data.clipped), void 0 !== data.oldSwapchain && (s.oldSwapchain = data.oldSwapchain), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get surface() {
        return this.#view.getBigUint64(24, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get minImageCount() {
        return this.#view.getUint32(32, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get imageFormat() {
        return this.#view.getUint32(36, LE);
    }
    set imageFormat(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get imageColorSpace() {
        return this.#view.getUint32(40, LE);
    }
    set imageColorSpace(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get imageExtent() {
        return new VkExtent2D(this.#data.subarray(44, 44 + VkExtent2D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get imageArrayLayers() {
        return this.#view.getUint32(52, LE);
    }
    set imageArrayLayers(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get imageUsage() {
        return this.#view.getUint32(56, LE);
    }
    set imageUsage(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get imageSharingMode() {
        return this.#view.getUint32(60, LE);
    }
    set imageSharingMode(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(64, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(72, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get preTransform() {
        return this.#view.getUint32(80, LE);
    }
    set preTransform(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get compositeAlpha() {
        return this.#view.getUint32(84, LE);
    }
    set compositeAlpha(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get presentMode() {
        return this.#view.getUint32(88, LE);
    }
    set presentMode(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get clipped() {
        return this.#view.getUint32(92, LE);
    }
    set clipped(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get oldSwapchain() {
        return this.#view.getBigUint64(96, LE);
    }
    set oldSwapchain(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
}
export class VkPresentInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentInfoKHR(new Uint8Array(VkPresentInfoKHR.size));
    }
    static create(data) {
        let s = VkPresentInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (s.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphores && (s.pWaitSemaphores = data.pWaitSemaphores), void 0 !== data.swapchainCount && (s.swapchainCount = data.swapchainCount), void 0 !== data.pSwapchains && (s.pSwapchains = data.pSwapchains), void 0 !== data.pImageIndices && (s.pImageIndices = data.pImageIndices), void 0 !== data.pResults && (s.pResults = data.pResults), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(32, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSwapchains() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSwapchains(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pImageIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pImageIndices(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pResults() {
        return this.#view.getBigUint64(56, LE);
    }
    set pResults(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkDebugReportCallbackCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugReportCallbackCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugReportCallbackCreateInfoEXT(new Uint8Array(VkDebugReportCallbackCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugReportCallbackCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pfnCallback && (s.pfnCallback = data.pfnCallback), void 0 !== data.pUserData && (s.pUserData = data.pUserData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pfnCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkValidationFlagsEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkValidationFlagsEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkValidationFlagsEXT(new Uint8Array(VkValidationFlagsEXT.size));
    }
    static create(data) {
        let s = VkValidationFlagsEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.disabledValidationCheckCount && (s.disabledValidationCheckCount = data.disabledValidationCheckCount), void 0 !== data.pDisabledValidationChecks && (s.pDisabledValidationChecks = data.pDisabledValidationChecks), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get disabledValidationCheckCount() {
        return this.#view.getUint32(16, LE);
    }
    set disabledValidationCheckCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDisabledValidationChecks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDisabledValidationChecks(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkValidationFeaturesEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkValidationFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkValidationFeaturesEXT(new Uint8Array(VkValidationFeaturesEXT.size));
    }
    static create(data) {
        let s = VkValidationFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.enabledValidationFeatureCount && (s.enabledValidationFeatureCount = data.enabledValidationFeatureCount), void 0 !== data.pEnabledValidationFeatures && (s.pEnabledValidationFeatures = data.pEnabledValidationFeatures), void 0 !== data.disabledValidationFeatureCount && (s.disabledValidationFeatureCount = data.disabledValidationFeatureCount), void 0 !== data.pDisabledValidationFeatures && (s.pDisabledValidationFeatures = data.pDisabledValidationFeatures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get enabledValidationFeatureCount() {
        return this.#view.getUint32(16, LE);
    }
    set enabledValidationFeatureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pEnabledValidationFeatures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pEnabledValidationFeatures(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get disabledValidationFeatureCount() {
        return this.#view.getUint32(32, LE);
    }
    set disabledValidationFeatureCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pDisabledValidationFeatures() {
        return this.#view.getBigUint64(40, LE);
    }
    set pDisabledValidationFeatures(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkPipelineRasterizationStateRasterizationOrderAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationStateRasterizationOrderAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationStateRasterizationOrderAMD(new Uint8Array(VkPipelineRasterizationStateRasterizationOrderAMD.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationStateRasterizationOrderAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rasterizationOrder && (s.rasterizationOrder = data.rasterizationOrder), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rasterizationOrder() {
        return this.#view.getUint32(16, LE);
    }
    set rasterizationOrder(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDebugMarkerObjectNameInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugMarkerObjectNameInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugMarkerObjectNameInfoEXT(new Uint8Array(VkDebugMarkerObjectNameInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugMarkerObjectNameInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.objectType && (s.objectType = data.objectType), void 0 !== data.object && (s.object = data.object), void 0 !== data.pObjectName && (s.pObjectName = data.pObjectName), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get object() {
        return this.#view.getBigUint64(24, LE);
    }
    set object(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pObjectName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pObjectName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDebugMarkerObjectTagInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugMarkerObjectTagInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugMarkerObjectTagInfoEXT(new Uint8Array(VkDebugMarkerObjectTagInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugMarkerObjectTagInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.objectType && (s.objectType = data.objectType), void 0 !== data.object && (s.object = data.object), void 0 !== data.tagName && (s.tagName = data.tagName), void 0 !== data.tagSize && (s.tagSize = data.tagSize), void 0 !== data.pTag && (s.pTag = data.pTag), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get object() {
        return this.#view.getBigUint64(24, LE);
    }
    set object(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get tagName() {
        return this.#view.getBigUint64(32, LE);
    }
    set tagName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get tagSize() {
        return this.#view.getBigUint64(40, LE);
    }
    set tagSize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pTag() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTag(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkDebugMarkerMarkerInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugMarkerMarkerInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugMarkerMarkerInfoEXT(new Uint8Array(VkDebugMarkerMarkerInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugMarkerMarkerInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pMarkerName && (s.pMarkerName = data.pMarkerName), void 0 !== data.color && (s.color = data.color), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pMarkerName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pMarkerName(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get color() {
        let result = [];
        for(let i = 0; i < 4; i++)result.push(this.#view.getFloat32(24 + 4 * i, LE));
        return result;
    }
    set color(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(24 + 4 * i, Number(value[i]), LE);
    }
}
export class VkDedicatedAllocationImageCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDedicatedAllocationImageCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDedicatedAllocationImageCreateInfoNV(new Uint8Array(VkDedicatedAllocationImageCreateInfoNV.size));
    }
    static create(data) {
        let s = VkDedicatedAllocationImageCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dedicatedAllocation && (s.dedicatedAllocation = data.dedicatedAllocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDedicatedAllocationBufferCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDedicatedAllocationBufferCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDedicatedAllocationBufferCreateInfoNV(new Uint8Array(VkDedicatedAllocationBufferCreateInfoNV.size));
    }
    static create(data) {
        let s = VkDedicatedAllocationBufferCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dedicatedAllocation && (s.dedicatedAllocation = data.dedicatedAllocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDedicatedAllocationMemoryAllocateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDedicatedAllocationMemoryAllocateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDedicatedAllocationMemoryAllocateInfoNV(new Uint8Array(VkDedicatedAllocationMemoryAllocateInfoNV.size));
    }
    static create(data) {
        let s = VkDedicatedAllocationMemoryAllocateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkExternalImageFormatPropertiesNV {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalImageFormatPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalImageFormatPropertiesNV(new Uint8Array(VkExternalImageFormatPropertiesNV.size));
    }
    static create(data) {
        let s = VkExternalImageFormatPropertiesNV.alloc();
        return void 0 !== data.imageFormatProperties && (s.imageFormatProperties = data.imageFormatProperties), void 0 !== data.externalMemoryFeatures && (s.externalMemoryFeatures = data.externalMemoryFeatures), void 0 !== data.exportFromImportedHandleTypes && (s.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (s.compatibleHandleTypes = data.compatibleHandleTypes), s;
    }
    get imageFormatProperties() {
        return new VkImageFormatProperties(this.#data.subarray(0, 0 + VkImageFormatProperties.size));
    }
    set imageFormatProperties(value) {
        if (value[BUFFER].byteLength < VkImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get externalMemoryFeatures() {
        return this.#view.getUint32(32, LE);
    }
    set externalMemoryFeatures(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(36, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(40, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkExternalMemoryImageCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalMemoryImageCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalMemoryImageCreateInfoNV(new Uint8Array(VkExternalMemoryImageCreateInfoNV.size));
    }
    static create(data) {
        let s = VkExternalMemoryImageCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExportMemoryAllocateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMemoryAllocateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMemoryAllocateInfoNV(new Uint8Array(VkExportMemoryAllocateInfoNV.size));
    }
    static create(data) {
        let s = VkExportMemoryAllocateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImportMemoryWin32HandleInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryWin32HandleInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryWin32HandleInfoNV(new Uint8Array(VkImportMemoryWin32HandleInfoNV.size));
    }
    static create(data) {
        let s = VkImportMemoryWin32HandleInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.handle && (s.handle = data.handle), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkExportMemoryWin32HandleInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMemoryWin32HandleInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMemoryWin32HandleInfoNV(new Uint8Array(VkExportMemoryWin32HandleInfoNV.size));
    }
    static create(data) {
        let s = VkExportMemoryWin32HandleInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pAttributes && (s.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (s.dwAccess = data.dwAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkWin32KeyedMutexAcquireReleaseInfoNV {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWin32KeyedMutexAcquireReleaseInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWin32KeyedMutexAcquireReleaseInfoNV(new Uint8Array(VkWin32KeyedMutexAcquireReleaseInfoNV.size));
    }
    static create(data) {
        let s = VkWin32KeyedMutexAcquireReleaseInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.acquireCount && (s.acquireCount = data.acquireCount), void 0 !== data.pAcquireSyncs && (s.pAcquireSyncs = data.pAcquireSyncs), void 0 !== data.pAcquireKeys && (s.pAcquireKeys = data.pAcquireKeys), void 0 !== data.pAcquireTimeoutMilliseconds && (s.pAcquireTimeoutMilliseconds = data.pAcquireTimeoutMilliseconds), void 0 !== data.releaseCount && (s.releaseCount = data.releaseCount), void 0 !== data.pReleaseSyncs && (s.pReleaseSyncs = data.pReleaseSyncs), void 0 !== data.pReleaseKeys && (s.pReleaseKeys = data.pReleaseKeys), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get acquireCount() {
        return this.#view.getUint32(16, LE);
    }
    set acquireCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAcquireSyncs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAcquireSyncs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pAcquireKeys() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAcquireKeys(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pAcquireTimeoutMilliseconds() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAcquireTimeoutMilliseconds(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get releaseCount() {
        return this.#view.getUint32(48, LE);
    }
    set releaseCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pReleaseSyncs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pReleaseSyncs(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pReleaseKeys() {
        return this.#view.getBigUint64(64, LE);
    }
    set pReleaseKeys(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(new Uint8Array(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceGeneratedCommands && (s.deviceGeneratedCommands = data.deviceGeneratedCommands), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceGeneratedCommands() {
        return this.#view.getUint32(16, LE);
    }
    set deviceGeneratedCommands(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDevicePrivateDataCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDevicePrivateDataCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDevicePrivateDataCreateInfo(new Uint8Array(VkDevicePrivateDataCreateInfo.size));
    }
    static create(data) {
        let s = VkDevicePrivateDataCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.privateDataSlotRequestCount && (s.privateDataSlotRequestCount = data.privateDataSlotRequestCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get privateDataSlotRequestCount() {
        return this.#view.getUint32(16, LE);
    }
    set privateDataSlotRequestCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPrivateDataSlotCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPrivateDataSlotCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPrivateDataSlotCreateInfo(new Uint8Array(VkPrivateDataSlotCreateInfo.size));
    }
    static create(data) {
        let s = VkPrivateDataSlotCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePrivateDataFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePrivateDataFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePrivateDataFeatures(new Uint8Array(VkPhysicalDevicePrivateDataFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePrivateDataFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.privateData && (s.privateData = data.privateData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get privateData() {
        return this.#view.getUint32(16, LE);
    }
    set privateData(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(new Uint8Array(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxGraphicsShaderGroupCount && (s.maxGraphicsShaderGroupCount = data.maxGraphicsShaderGroupCount), void 0 !== data.maxIndirectSequenceCount && (s.maxIndirectSequenceCount = data.maxIndirectSequenceCount), void 0 !== data.maxIndirectCommandsTokenCount && (s.maxIndirectCommandsTokenCount = data.maxIndirectCommandsTokenCount), void 0 !== data.maxIndirectCommandsStreamCount && (s.maxIndirectCommandsStreamCount = data.maxIndirectCommandsStreamCount), void 0 !== data.maxIndirectCommandsTokenOffset && (s.maxIndirectCommandsTokenOffset = data.maxIndirectCommandsTokenOffset), void 0 !== data.maxIndirectCommandsStreamStride && (s.maxIndirectCommandsStreamStride = data.maxIndirectCommandsStreamStride), void 0 !== data.minSequencesCountBufferOffsetAlignment && (s.minSequencesCountBufferOffsetAlignment = data.minSequencesCountBufferOffsetAlignment), void 0 !== data.minSequencesIndexBufferOffsetAlignment && (s.minSequencesIndexBufferOffsetAlignment = data.minSequencesIndexBufferOffsetAlignment), void 0 !== data.minIndirectCommandsBufferOffsetAlignment && (s.minIndirectCommandsBufferOffsetAlignment = data.minIndirectCommandsBufferOffsetAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxGraphicsShaderGroupCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxGraphicsShaderGroupCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxIndirectSequenceCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxIndirectSequenceCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxIndirectCommandsTokenCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxIndirectCommandsTokenCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxIndirectCommandsStreamCount() {
        return this.#view.getUint32(28, LE);
    }
    set maxIndirectCommandsStreamCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxIndirectCommandsTokenOffset() {
        return this.#view.getUint32(32, LE);
    }
    set maxIndirectCommandsTokenOffset(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxIndirectCommandsStreamStride() {
        return this.#view.getUint32(36, LE);
    }
    set maxIndirectCommandsStreamStride(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minSequencesCountBufferOffsetAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set minSequencesCountBufferOffsetAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minSequencesIndexBufferOffsetAlignment() {
        return this.#view.getUint32(44, LE);
    }
    set minSequencesIndexBufferOffsetAlignment(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get minIndirectCommandsBufferOffsetAlignment() {
        return this.#view.getUint32(48, LE);
    }
    set minIndirectCommandsBufferOffsetAlignment(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkPhysicalDeviceMultiDrawPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultiDrawPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultiDrawPropertiesEXT(new Uint8Array(VkPhysicalDeviceMultiDrawPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultiDrawPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxMultiDrawCount && (s.maxMultiDrawCount = data.maxMultiDrawCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxMultiDrawCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxMultiDrawCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkGraphicsShaderGroupCreateInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGraphicsShaderGroupCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGraphicsShaderGroupCreateInfoNV(new Uint8Array(VkGraphicsShaderGroupCreateInfoNV.size));
    }
    static create(data) {
        let s = VkGraphicsShaderGroupCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stageCount && (s.stageCount = data.stageCount), void 0 !== data.pStages && (s.pStages = data.pStages), void 0 !== data.pVertexInputState && (s.pVertexInputState = data.pVertexInputState), void 0 !== data.pTessellationState && (s.pTessellationState = data.pTessellationState), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(16, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pVertexInputState() {
        return this.#view.getBigUint64(32, LE);
    }
    set pVertexInputState(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pTessellationState() {
        return this.#view.getBigUint64(40, LE);
    }
    set pTessellationState(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkGraphicsPipelineShaderGroupsCreateInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGraphicsPipelineShaderGroupsCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGraphicsPipelineShaderGroupsCreateInfoNV(new Uint8Array(VkGraphicsPipelineShaderGroupsCreateInfoNV.size));
    }
    static create(data) {
        let s = VkGraphicsPipelineShaderGroupsCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.groupCount && (s.groupCount = data.groupCount), void 0 !== data.pGroups && (s.pGroups = data.pGroups), void 0 !== data.pipelineCount && (s.pipelineCount = data.pipelineCount), void 0 !== data.pPipelines && (s.pPipelines = data.pPipelines), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get groupCount() {
        return this.#view.getUint32(16, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(24, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pipelineCount() {
        return this.#view.getUint32(32, LE);
    }
    set pipelineCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPipelines() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPipelines(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkBindShaderGroupIndirectCommandNV {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindShaderGroupIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindShaderGroupIndirectCommandNV(new Uint8Array(VkBindShaderGroupIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkBindShaderGroupIndirectCommandNV.alloc();
        return void 0 !== data.groupIndex && (s.groupIndex = data.groupIndex), s;
    }
    get groupIndex() {
        return this.#view.getUint32(0, LE);
    }
    set groupIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class VkBindIndexBufferIndirectCommandNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindIndexBufferIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindIndexBufferIndirectCommandNV(new Uint8Array(VkBindIndexBufferIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkBindIndexBufferIndirectCommandNV.alloc();
        return void 0 !== data.bufferAddress && (s.bufferAddress = data.bufferAddress), void 0 !== data.size && (s.size = data.size), void 0 !== data.indexType && (s.indexType = data.indexType), s;
    }
    get bufferAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(12, LE);
    }
    set indexType(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkBindVertexBufferIndirectCommandNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindVertexBufferIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindVertexBufferIndirectCommandNV(new Uint8Array(VkBindVertexBufferIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkBindVertexBufferIndirectCommandNV.alloc();
        return void 0 !== data.bufferAddress && (s.bufferAddress = data.bufferAddress), void 0 !== data.size && (s.size = data.size), void 0 !== data.stride && (s.stride = data.stride), s;
    }
    get bufferAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set bufferAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get size() {
        return this.#view.getUint32(8, LE);
    }
    set size(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(12, LE);
    }
    set stride(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkSetStateFlagsIndirectCommandNV {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSetStateFlagsIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSetStateFlagsIndirectCommandNV(new Uint8Array(VkSetStateFlagsIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkSetStateFlagsIndirectCommandNV.alloc();
        return void 0 !== data.data && (s.data = data.data), s;
    }
    get data() {
        return this.#view.getUint32(0, LE);
    }
    set data(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class VkIndirectCommandsStreamNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkIndirectCommandsStreamNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkIndirectCommandsStreamNV(new Uint8Array(VkIndirectCommandsStreamNV.size));
    }
    static create(data) {
        let s = VkIndirectCommandsStreamNV.alloc();
        return void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), s;
    }
    get buffer() {
        return this.#view.getBigUint64(0, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(8, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkIndirectCommandsLayoutTokenNV {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkIndirectCommandsLayoutTokenNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkIndirectCommandsLayoutTokenNV(new Uint8Array(VkIndirectCommandsLayoutTokenNV.size));
    }
    static create(data) {
        let s = VkIndirectCommandsLayoutTokenNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.tokenType && (s.tokenType = data.tokenType), void 0 !== data.stream && (s.stream = data.stream), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.vertexBindingUnit && (s.vertexBindingUnit = data.vertexBindingUnit), void 0 !== data.vertexDynamicStride && (s.vertexDynamicStride = data.vertexDynamicStride), void 0 !== data.pushconstantPipelineLayout && (s.pushconstantPipelineLayout = data.pushconstantPipelineLayout), void 0 !== data.pushconstantShaderStageFlags && (s.pushconstantShaderStageFlags = data.pushconstantShaderStageFlags), void 0 !== data.pushconstantOffset && (s.pushconstantOffset = data.pushconstantOffset), void 0 !== data.pushconstantSize && (s.pushconstantSize = data.pushconstantSize), void 0 !== data.indirectStateFlags && (s.indirectStateFlags = data.indirectStateFlags), void 0 !== data.indexTypeCount && (s.indexTypeCount = data.indexTypeCount), void 0 !== data.pIndexTypes && (s.pIndexTypes = data.pIndexTypes), void 0 !== data.pIndexTypeValues && (s.pIndexTypeValues = data.pIndexTypeValues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get tokenType() {
        return this.#view.getUint32(16, LE);
    }
    set tokenType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stream() {
        return this.#view.getUint32(20, LE);
    }
    set stream(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(24, LE);
    }
    set offset(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get vertexBindingUnit() {
        return this.#view.getUint32(28, LE);
    }
    set vertexBindingUnit(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get vertexDynamicStride() {
        return this.#view.getUint32(32, LE);
    }
    set vertexDynamicStride(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pushconstantPipelineLayout() {
        return this.#view.getBigUint64(40, LE);
    }
    set pushconstantPipelineLayout(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pushconstantShaderStageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set pushconstantShaderStageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pushconstantOffset() {
        return this.#view.getUint32(52, LE);
    }
    set pushconstantOffset(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get pushconstantSize() {
        return this.#view.getUint32(56, LE);
    }
    set pushconstantSize(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get indirectStateFlags() {
        return this.#view.getUint32(60, LE);
    }
    set indirectStateFlags(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get indexTypeCount() {
        return this.#view.getUint32(64, LE);
    }
    set indexTypeCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pIndexTypes() {
        return this.#view.getBigUint64(72, LE);
    }
    set pIndexTypes(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get pIndexTypeValues() {
        return this.#view.getBigUint64(80, LE);
    }
    set pIndexTypeValues(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
}
export class VkIndirectCommandsLayoutCreateInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkIndirectCommandsLayoutCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkIndirectCommandsLayoutCreateInfoNV(new Uint8Array(VkIndirectCommandsLayoutCreateInfoNV.size));
    }
    static create(data) {
        let s = VkIndirectCommandsLayoutCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.tokenCount && (s.tokenCount = data.tokenCount), void 0 !== data.pTokens && (s.pTokens = data.pTokens), void 0 !== data.streamCount && (s.streamCount = data.streamCount), void 0 !== data.pStreamStrides && (s.pStreamStrides = data.pStreamStrides), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(20, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tokenCount() {
        return this.#view.getUint32(24, LE);
    }
    set tokenCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pTokens() {
        return this.#view.getBigUint64(32, LE);
    }
    set pTokens(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get streamCount() {
        return this.#view.getUint32(40, LE);
    }
    set streamCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pStreamStrides() {
        return this.#view.getBigUint64(48, LE);
    }
    set pStreamStrides(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkGeneratedCommandsInfoNV {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeneratedCommandsInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeneratedCommandsInfoNV(new Uint8Array(VkGeneratedCommandsInfoNV.size));
    }
    static create(data) {
        let s = VkGeneratedCommandsInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipeline && (s.pipeline = data.pipeline), void 0 !== data.indirectCommandsLayout && (s.indirectCommandsLayout = data.indirectCommandsLayout), void 0 !== data.streamCount && (s.streamCount = data.streamCount), void 0 !== data.pStreams && (s.pStreams = data.pStreams), void 0 !== data.sequencesCount && (s.sequencesCount = data.sequencesCount), void 0 !== data.preprocessBuffer && (s.preprocessBuffer = data.preprocessBuffer), void 0 !== data.preprocessOffset && (s.preprocessOffset = data.preprocessOffset), void 0 !== data.preprocessSize && (s.preprocessSize = data.preprocessSize), void 0 !== data.sequencesCountBuffer && (s.sequencesCountBuffer = data.sequencesCountBuffer), void 0 !== data.sequencesCountOffset && (s.sequencesCountOffset = data.sequencesCountOffset), void 0 !== data.sequencesIndexBuffer && (s.sequencesIndexBuffer = data.sequencesIndexBuffer), void 0 !== data.sequencesIndexOffset && (s.sequencesIndexOffset = data.sequencesIndexOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(24, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get indirectCommandsLayout() {
        return this.#view.getBigUint64(32, LE);
    }
    set indirectCommandsLayout(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get streamCount() {
        return this.#view.getUint32(40, LE);
    }
    set streamCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pStreams() {
        return this.#view.getBigUint64(48, LE);
    }
    set pStreams(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get sequencesCount() {
        return this.#view.getUint32(56, LE);
    }
    set sequencesCount(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get preprocessBuffer() {
        return this.#view.getBigUint64(64, LE);
    }
    set preprocessBuffer(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get preprocessOffset() {
        return this.#view.getBigUint64(72, LE);
    }
    set preprocessOffset(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get preprocessSize() {
        return this.#view.getBigUint64(80, LE);
    }
    set preprocessSize(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get sequencesCountBuffer() {
        return this.#view.getBigUint64(88, LE);
    }
    set sequencesCountBuffer(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get sequencesCountOffset() {
        return this.#view.getBigUint64(96, LE);
    }
    set sequencesCountOffset(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get sequencesIndexBuffer() {
        return this.#view.getBigUint64(104, LE);
    }
    set sequencesIndexBuffer(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
    get sequencesIndexOffset() {
        return this.#view.getBigUint64(112, LE);
    }
    set sequencesIndexOffset(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
}
export class VkGeneratedCommandsMemoryRequirementsInfoNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeneratedCommandsMemoryRequirementsInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeneratedCommandsMemoryRequirementsInfoNV(new Uint8Array(VkGeneratedCommandsMemoryRequirementsInfoNV.size));
    }
    static create(data) {
        let s = VkGeneratedCommandsMemoryRequirementsInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipeline && (s.pipeline = data.pipeline), void 0 !== data.indirectCommandsLayout && (s.indirectCommandsLayout = data.indirectCommandsLayout), void 0 !== data.maxSequencesCount && (s.maxSequencesCount = data.maxSequencesCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(24, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get indirectCommandsLayout() {
        return this.#view.getBigUint64(32, LE);
    }
    set indirectCommandsLayout(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxSequencesCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxSequencesCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkPhysicalDeviceFeatures2 {
    static size = 240;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFeatures2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFeatures2(new Uint8Array(VkPhysicalDeviceFeatures2.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFeatures2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.features && (s.features = data.features), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get features() {
        return new VkPhysicalDeviceFeatures(this.#data.subarray(16, 16 + VkPhysicalDeviceFeatures.size));
    }
    set features(value) {
        if (value[BUFFER].byteLength < VkPhysicalDeviceFeatures.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceProperties2 {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProperties2(new Uint8Array(VkPhysicalDeviceProperties2.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.properties && (s.properties = data.properties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get properties() {
        return new VkPhysicalDeviceProperties(this.#data.subarray(16, 16 + VkPhysicalDeviceProperties.size));
    }
    set properties(value) {
        if (value[BUFFER].byteLength < VkPhysicalDeviceProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkFormatProperties2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFormatProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFormatProperties2(new Uint8Array(VkFormatProperties2.size));
    }
    static create(data) {
        let s = VkFormatProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.formatProperties && (s.formatProperties = data.formatProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get formatProperties() {
        return new VkFormatProperties(this.#data.subarray(16, 16 + VkFormatProperties.size));
    }
    set formatProperties(value) {
        if (value[BUFFER].byteLength < VkFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkImageFormatProperties2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageFormatProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageFormatProperties2(new Uint8Array(VkImageFormatProperties2.size));
    }
    static create(data) {
        let s = VkImageFormatProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageFormatProperties && (s.imageFormatProperties = data.imageFormatProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageFormatProperties() {
        return new VkImageFormatProperties(this.#data.subarray(16, 16 + VkImageFormatProperties.size));
    }
    set imageFormatProperties(value) {
        if (value[BUFFER].byteLength < VkImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceImageFormatInfo2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageFormatInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageFormatInfo2(new Uint8Array(VkPhysicalDeviceImageFormatInfo2.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageFormatInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.type && (s.type = data.type), void 0 !== data.tiling && (s.tiling = data.tiling), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(24, LE);
    }
    set tiling(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(28, LE);
    }
    set usage(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkQueueFamilyProperties2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyProperties2(new Uint8Array(VkQueueFamilyProperties2.size));
    }
    static create(data) {
        let s = VkQueueFamilyProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.queueFamilyProperties && (s.queueFamilyProperties = data.queueFamilyProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get queueFamilyProperties() {
        return new VkQueueFamilyProperties(this.#data.subarray(16, 16 + VkQueueFamilyProperties.size));
    }
    set queueFamilyProperties(value) {
        if (value[BUFFER].byteLength < VkQueueFamilyProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceMemoryProperties2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryProperties2(new Uint8Array(VkPhysicalDeviceMemoryProperties2.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryProperties && (s.memoryProperties = data.memoryProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryProperties() {
        return new VkPhysicalDeviceMemoryProperties(this.#data.subarray(16, 16 + VkPhysicalDeviceMemoryProperties.size));
    }
    set memoryProperties(value) {
        if (value[BUFFER].byteLength < VkPhysicalDeviceMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSparseImageFormatProperties2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageFormatProperties2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageFormatProperties2(new Uint8Array(VkSparseImageFormatProperties2.size));
    }
    static create(data) {
        let s = VkSparseImageFormatProperties2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.properties && (s.properties = data.properties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get properties() {
        return new VkSparseImageFormatProperties(this.#data.subarray(16, 16 + VkSparseImageFormatProperties.size));
    }
    set properties(value) {
        if (value[BUFFER].byteLength < VkSparseImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceSparseImageFormatInfo2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSparseImageFormatInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSparseImageFormatInfo2(new Uint8Array(VkPhysicalDeviceSparseImageFormatInfo2.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSparseImageFormatInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.type && (s.type = data.type), void 0 !== data.samples && (s.samples = data.samples), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.tiling && (s.tiling = data.tiling), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(24, LE);
    }
    set samples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(28, LE);
    }
    set usage(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get tiling() {
        return this.#view.getUint32(32, LE);
    }
    set tiling(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDevicePushDescriptorPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePushDescriptorPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePushDescriptorPropertiesKHR(new Uint8Array(VkPhysicalDevicePushDescriptorPropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePushDescriptorPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxPushDescriptors && (s.maxPushDescriptors = data.maxPushDescriptors), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxPushDescriptors() {
        return this.#view.getUint32(16, LE);
    }
    set maxPushDescriptors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkConformanceVersion {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkConformanceVersion.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkConformanceVersion(new Uint8Array(VkConformanceVersion.size));
    }
    static create(data) {
        let s = VkConformanceVersion.alloc();
        return void 0 !== data.major && (s.major = data.major), void 0 !== data.minor && (s.minor = data.minor), void 0 !== data.subminor && (s.subminor = data.subminor), void 0 !== data.patch && (s.patch = data.patch), s;
    }
    get major() {
        return this.#view.getUint8(0);
    }
    set major(value) {
        this.#view.setUint8(0, Number(value));
    }
    get minor() {
        return this.#view.getUint8(1);
    }
    set minor(value) {
        this.#view.setUint8(1, Number(value));
    }
    get subminor() {
        return this.#view.getUint8(2);
    }
    set subminor(value) {
        this.#view.setUint8(2, Number(value));
    }
    get patch() {
        return this.#view.getUint8(3);
    }
    set patch(value) {
        this.#view.setUint8(3, Number(value));
    }
}
export class VkPhysicalDeviceDriverProperties {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDriverProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDriverProperties(new Uint8Array(VkPhysicalDeviceDriverProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDriverProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.driverID && (s.driverID = data.driverID), void 0 !== data.driverName && (s.driverName = data.driverName), void 0 !== data.driverInfo && (s.driverInfo = data.driverInfo), void 0 !== data.conformanceVersion && (s.conformanceVersion = data.conformanceVersion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get driverID() {
        return this.#view.getUint32(16, LE);
    }
    set driverID(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get driverName() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set driverName(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get driverInfo() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(276 + 1 * i));
        return result;
    }
    set driverInfo(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(276 + 1 * i, Number(value[i]));
    }
    get conformanceVersion() {
        return new VkConformanceVersion(this.#data.subarray(532, 532 + VkConformanceVersion.size));
    }
    set conformanceVersion(value) {
        if (value[BUFFER].byteLength < VkConformanceVersion.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 532);
    }
}
export class VkPresentRegionsKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentRegionsKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentRegionsKHR(new Uint8Array(VkPresentRegionsKHR.size));
    }
    static create(data) {
        let s = VkPresentRegionsKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchainCount && (s.swapchainCount = data.swapchainCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPresentRegionKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentRegionKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentRegionKHR(new Uint8Array(VkPresentRegionKHR.size));
    }
    static create(data) {
        let s = VkPresentRegionKHR.alloc();
        return void 0 !== data.rectangleCount && (s.rectangleCount = data.rectangleCount), void 0 !== data.pRectangles && (s.pRectangles = data.pRectangles), s;
    }
    get rectangleCount() {
        return this.#view.getUint32(0, LE);
    }
    set rectangleCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pRectangles() {
        return this.#view.getBigUint64(8, LE);
    }
    set pRectangles(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkRectLayerKHR {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRectLayerKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRectLayerKHR(new Uint8Array(VkRectLayerKHR.size));
    }
    static create(data) {
        let s = VkRectLayerKHR.alloc();
        return void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.extent && (s.extent = data.extent), void 0 !== data.layer && (s.layer = data.layer), s;
    }
    get offset() {
        return new VkOffset2D(this.#data.subarray(0, 0 + VkOffset2D.size));
    }
    set offset(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get extent() {
        return new VkExtent2D(this.#data.subarray(8, 8 + VkExtent2D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 8);
    }
    get layer() {
        return this.#view.getUint32(16, LE);
    }
    set layer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceVariablePointersFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVariablePointersFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVariablePointersFeatures(new Uint8Array(VkPhysicalDeviceVariablePointersFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVariablePointersFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.variablePointersStorageBuffer && (s.variablePointersStorageBuffer = data.variablePointersStorageBuffer), void 0 !== data.variablePointers && (s.variablePointers = data.variablePointers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get variablePointersStorageBuffer() {
        return this.#view.getUint32(16, LE);
    }
    set variablePointersStorageBuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get variablePointers() {
        return this.#view.getUint32(20, LE);
    }
    set variablePointers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkExternalMemoryProperties {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalMemoryProperties(new Uint8Array(VkExternalMemoryProperties.size));
    }
    static create(data) {
        let s = VkExternalMemoryProperties.alloc();
        return void 0 !== data.externalMemoryFeatures && (s.externalMemoryFeatures = data.externalMemoryFeatures), void 0 !== data.exportFromImportedHandleTypes && (s.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (s.compatibleHandleTypes = data.compatibleHandleTypes), s;
    }
    get externalMemoryFeatures() {
        return this.#view.getUint32(0, LE);
    }
    set externalMemoryFeatures(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(4, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(8, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkPhysicalDeviceExternalImageFormatInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalImageFormatInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalImageFormatInfo(new Uint8Array(VkPhysicalDeviceExternalImageFormatInfo.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalImageFormatInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExternalImageFormatProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalImageFormatProperties(new Uint8Array(VkExternalImageFormatProperties.size));
    }
    static create(data) {
        let s = VkExternalImageFormatProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.externalMemoryProperties && (s.externalMemoryProperties = data.externalMemoryProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get externalMemoryProperties() {
        return new VkExternalMemoryProperties(this.#data.subarray(16, 16 + VkExternalMemoryProperties.size));
    }
    set externalMemoryProperties(value) {
        if (value[BUFFER].byteLength < VkExternalMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceExternalBufferInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalBufferInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalBufferInfo(new Uint8Array(VkPhysicalDeviceExternalBufferInfo.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalBufferInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(20, LE);
    }
    set usage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkExternalBufferProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalBufferProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalBufferProperties(new Uint8Array(VkExternalBufferProperties.size));
    }
    static create(data) {
        let s = VkExternalBufferProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.externalMemoryProperties && (s.externalMemoryProperties = data.externalMemoryProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get externalMemoryProperties() {
        return new VkExternalMemoryProperties(this.#data.subarray(16, 16 + VkExternalMemoryProperties.size));
    }
    set externalMemoryProperties(value) {
        if (value[BUFFER].byteLength < VkExternalMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDeviceIDProperties {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceIDProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceIDProperties(new Uint8Array(VkPhysicalDeviceIDProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceIDProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceUUID && (s.deviceUUID = data.deviceUUID), void 0 !== data.driverUUID && (s.driverUUID = data.driverUUID), void 0 !== data.deviceLUID && (s.deviceLUID = data.deviceLUID), void 0 !== data.deviceNodeMask && (s.deviceNodeMask = data.deviceNodeMask), void 0 !== data.deviceLUIDValid && (s.deviceLUIDValid = data.deviceLUIDValid), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set deviceUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get driverUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(32 + 1 * i));
        return result;
    }
    set driverUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(32 + 1 * i, Number(value[i]));
    }
    get deviceLUID() {
        let result = [];
        for(let i = 0; i < 8; i++)result.push(this.#view.getUint8(48 + 1 * i));
        return result;
    }
    set deviceLUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(48 + 1 * i, Number(value[i]));
    }
    get deviceNodeMask() {
        return this.#view.getUint32(56, LE);
    }
    set deviceNodeMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get deviceLUIDValid() {
        return this.#view.getUint32(60, LE);
    }
    set deviceLUIDValid(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class VkExternalMemoryImageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalMemoryImageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalMemoryImageCreateInfo(new Uint8Array(VkExternalMemoryImageCreateInfo.size));
    }
    static create(data) {
        let s = VkExternalMemoryImageCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExternalMemoryBufferCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalMemoryBufferCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalMemoryBufferCreateInfo(new Uint8Array(VkExternalMemoryBufferCreateInfo.size));
    }
    static create(data) {
        let s = VkExternalMemoryBufferCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExportMemoryAllocateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMemoryAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMemoryAllocateInfo(new Uint8Array(VkExportMemoryAllocateInfo.size));
    }
    static create(data) {
        let s = VkExportMemoryAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImportMemoryWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryWin32HandleInfoKHR(new Uint8Array(VkImportMemoryWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkImportMemoryWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.handle && (s.handle = data.handle), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkExportMemoryWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMemoryWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMemoryWin32HandleInfoKHR(new Uint8Array(VkExportMemoryWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkExportMemoryWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pAttributes && (s.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (s.dwAccess = data.dwAccess), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImportMemoryZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryZirconHandleInfoFUCHSIA(new Uint8Array(VkImportMemoryZirconHandleInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkImportMemoryZirconHandleInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.handle && (s.handle = data.handle), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(24, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkMemoryZirconHandlePropertiesFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryZirconHandlePropertiesFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryZirconHandlePropertiesFUCHSIA(new Uint8Array(VkMemoryZirconHandlePropertiesFUCHSIA.size));
    }
    static create(data) {
        let s = VkMemoryZirconHandlePropertiesFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryGetZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryGetZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryGetZirconHandleInfoFUCHSIA(new Uint8Array(VkMemoryGetZirconHandleInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkMemoryGetZirconHandleInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkMemoryWin32HandlePropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryWin32HandlePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryWin32HandlePropertiesKHR(new Uint8Array(VkMemoryWin32HandlePropertiesKHR.size));
    }
    static create(data) {
        let s = VkMemoryWin32HandlePropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryGetWin32HandleInfoKHR(new Uint8Array(VkMemoryGetWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkMemoryGetWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkImportMemoryFdInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryFdInfoKHR(new Uint8Array(VkImportMemoryFdInfoKHR.size));
    }
    static create(data) {
        let s = VkImportMemoryFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.fd && (s.fd = data.fd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(20, LE);
    }
    set fd(value) {
        this.#view.setInt32(20, Number(value), LE);
    }
}
export class VkMemoryFdPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryFdPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryFdPropertiesKHR(new Uint8Array(VkMemoryFdPropertiesKHR.size));
    }
    static create(data) {
        let s = VkMemoryFdPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryGetFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryGetFdInfoKHR(new Uint8Array(VkMemoryGetFdInfoKHR.size));
    }
    static create(data) {
        let s = VkMemoryGetFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkWin32KeyedMutexAcquireReleaseInfoKHR {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWin32KeyedMutexAcquireReleaseInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWin32KeyedMutexAcquireReleaseInfoKHR(new Uint8Array(VkWin32KeyedMutexAcquireReleaseInfoKHR.size));
    }
    static create(data) {
        let s = VkWin32KeyedMutexAcquireReleaseInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.acquireCount && (s.acquireCount = data.acquireCount), void 0 !== data.pAcquireSyncs && (s.pAcquireSyncs = data.pAcquireSyncs), void 0 !== data.pAcquireKeys && (s.pAcquireKeys = data.pAcquireKeys), void 0 !== data.pAcquireTimeouts && (s.pAcquireTimeouts = data.pAcquireTimeouts), void 0 !== data.releaseCount && (s.releaseCount = data.releaseCount), void 0 !== data.pReleaseSyncs && (s.pReleaseSyncs = data.pReleaseSyncs), void 0 !== data.pReleaseKeys && (s.pReleaseKeys = data.pReleaseKeys), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get acquireCount() {
        return this.#view.getUint32(16, LE);
    }
    set acquireCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAcquireSyncs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAcquireSyncs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pAcquireKeys() {
        return this.#view.getBigUint64(32, LE);
    }
    set pAcquireKeys(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pAcquireTimeouts() {
        return this.#view.getBigUint64(40, LE);
    }
    set pAcquireTimeouts(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get releaseCount() {
        return this.#view.getUint32(48, LE);
    }
    set releaseCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pReleaseSyncs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pReleaseSyncs(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pReleaseKeys() {
        return this.#view.getBigUint64(64, LE);
    }
    set pReleaseKeys(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceExternalSemaphoreInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalSemaphoreInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalSemaphoreInfo(new Uint8Array(VkPhysicalDeviceExternalSemaphoreInfo.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalSemaphoreInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExternalSemaphoreProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalSemaphoreProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalSemaphoreProperties(new Uint8Array(VkExternalSemaphoreProperties.size));
    }
    static create(data) {
        let s = VkExternalSemaphoreProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.exportFromImportedHandleTypes && (s.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (s.compatibleHandleTypes = data.compatibleHandleTypes), void 0 !== data.externalSemaphoreFeatures && (s.externalSemaphoreFeatures = data.externalSemaphoreFeatures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(20, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get externalSemaphoreFeatures() {
        return this.#view.getUint32(24, LE);
    }
    set externalSemaphoreFeatures(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkExportSemaphoreCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportSemaphoreCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportSemaphoreCreateInfo(new Uint8Array(VkExportSemaphoreCreateInfo.size));
    }
    static create(data) {
        let s = VkExportSemaphoreCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImportSemaphoreWin32HandleInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportSemaphoreWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportSemaphoreWin32HandleInfoKHR(new Uint8Array(VkImportSemaphoreWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkImportSemaphoreWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.handle && (s.handle = data.handle), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(32, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(40, LE);
    }
    set name(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkExportSemaphoreWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportSemaphoreWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportSemaphoreWin32HandleInfoKHR(new Uint8Array(VkExportSemaphoreWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkExportSemaphoreWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pAttributes && (s.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (s.dwAccess = data.dwAccess), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkD3D12FenceSubmitInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkD3D12FenceSubmitInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkD3D12FenceSubmitInfoKHR(new Uint8Array(VkD3D12FenceSubmitInfoKHR.size));
    }
    static create(data) {
        let s = VkD3D12FenceSubmitInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreValuesCount && (s.waitSemaphoreValuesCount = data.waitSemaphoreValuesCount), void 0 !== data.pWaitSemaphoreValues && (s.pWaitSemaphoreValues = data.pWaitSemaphoreValues), void 0 !== data.signalSemaphoreValuesCount && (s.signalSemaphoreValuesCount = data.signalSemaphoreValuesCount), void 0 !== data.pSignalSemaphoreValues && (s.pSignalSemaphoreValues = data.pSignalSemaphoreValues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreValuesCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreValuesCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreValues() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreValues(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get signalSemaphoreValuesCount() {
        return this.#view.getUint32(32, LE);
    }
    set signalSemaphoreValuesCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSignalSemaphoreValues() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSignalSemaphoreValues(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkSemaphoreGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreGetWin32HandleInfoKHR(new Uint8Array(VkSemaphoreGetWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkSemaphoreGetWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkImportSemaphoreFdInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportSemaphoreFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportSemaphoreFdInfoKHR(new Uint8Array(VkImportSemaphoreFdInfoKHR.size));
    }
    static create(data) {
        let s = VkImportSemaphoreFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.fd && (s.fd = data.fd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(32, LE);
    }
    set fd(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
}
export class VkSemaphoreGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreGetFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreGetFdInfoKHR(new Uint8Array(VkSemaphoreGetFdInfoKHR.size));
    }
    static create(data) {
        let s = VkSemaphoreGetFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkImportSemaphoreZirconHandleInfoFUCHSIA {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportSemaphoreZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportSemaphoreZirconHandleInfoFUCHSIA(new Uint8Array(VkImportSemaphoreZirconHandleInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkImportSemaphoreZirconHandleInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.zirconHandle && (s.zirconHandle = data.zirconHandle), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get zirconHandle() {
        return this.#view.getBigUint64(32, LE);
    }
    set zirconHandle(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkSemaphoreGetZirconHandleInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreGetZirconHandleInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreGetZirconHandleInfoFUCHSIA(new Uint8Array(VkSemaphoreGetZirconHandleInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkSemaphoreGetZirconHandleInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceExternalFenceInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalFenceInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalFenceInfo(new Uint8Array(VkPhysicalDeviceExternalFenceInfo.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalFenceInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExternalFenceProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalFenceProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalFenceProperties(new Uint8Array(VkExternalFenceProperties.size));
    }
    static create(data) {
        let s = VkExternalFenceProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.exportFromImportedHandleTypes && (s.exportFromImportedHandleTypes = data.exportFromImportedHandleTypes), void 0 !== data.compatibleHandleTypes && (s.compatibleHandleTypes = data.compatibleHandleTypes), void 0 !== data.externalFenceFeatures && (s.externalFenceFeatures = data.externalFenceFeatures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get exportFromImportedHandleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set exportFromImportedHandleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compatibleHandleTypes() {
        return this.#view.getUint32(20, LE);
    }
    set compatibleHandleTypes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get externalFenceFeatures() {
        return this.#view.getUint32(24, LE);
    }
    set externalFenceFeatures(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkExportFenceCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportFenceCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportFenceCreateInfo(new Uint8Array(VkExportFenceCreateInfo.size));
    }
    static create(data) {
        let s = VkExportFenceCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleTypes && (s.handleTypes = data.handleTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleTypes() {
        return this.#view.getUint32(16, LE);
    }
    set handleTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImportFenceWin32HandleInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportFenceWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportFenceWin32HandleInfoKHR(new Uint8Array(VkImportFenceWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkImportFenceWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fence && (s.fence = data.fence), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.handle && (s.handle = data.handle), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(32, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(40, LE);
    }
    set name(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkExportFenceWin32HandleInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportFenceWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportFenceWin32HandleInfoKHR(new Uint8Array(VkExportFenceWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkExportFenceWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pAttributes && (s.pAttributes = data.pAttributes), void 0 !== data.dwAccess && (s.dwAccess = data.dwAccess), void 0 !== data.name && (s.name = data.name), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pAttributes() {
        return this.#view.getBigUint64(16, LE);
    }
    set pAttributes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dwAccess() {
        return this.#view.getUint32(24, LE);
    }
    set dwAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get name() {
        return this.#view.getBigUint64(32, LE);
    }
    set name(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkFenceGetWin32HandleInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFenceGetWin32HandleInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFenceGetWin32HandleInfoKHR(new Uint8Array(VkFenceGetWin32HandleInfoKHR.size));
    }
    static create(data) {
        let s = VkFenceGetWin32HandleInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fence && (s.fence = data.fence), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkImportFenceFdInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportFenceFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportFenceFdInfoKHR(new Uint8Array(VkImportFenceFdInfoKHR.size));
    }
    static create(data) {
        let s = VkImportFenceFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fence && (s.fence = data.fence), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.fd && (s.fd = data.fd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(24, LE);
    }
    set flags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(28, LE);
    }
    set handleType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get fd() {
        return this.#view.getInt32(32, LE);
    }
    set fd(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
}
export class VkFenceGetFdInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFenceGetFdInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFenceGetFdInfoKHR(new Uint8Array(VkFenceGetFdInfoKHR.size));
    }
    static create(data) {
        let s = VkFenceGetFdInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fence && (s.fence = data.fence), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fence() {
        return this.#view.getBigUint64(16, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceMultiviewFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultiviewFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultiviewFeatures(new Uint8Array(VkPhysicalDeviceMultiviewFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultiviewFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.multiview && (s.multiview = data.multiview), void 0 !== data.multiviewGeometryShader && (s.multiviewGeometryShader = data.multiviewGeometryShader), void 0 !== data.multiviewTessellationShader && (s.multiviewTessellationShader = data.multiviewTessellationShader), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get multiview() {
        return this.#view.getUint32(16, LE);
    }
    set multiview(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get multiviewGeometryShader() {
        return this.#view.getUint32(20, LE);
    }
    set multiviewGeometryShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get multiviewTessellationShader() {
        return this.#view.getUint32(24, LE);
    }
    set multiviewTessellationShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceMultiviewProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultiviewProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultiviewProperties(new Uint8Array(VkPhysicalDeviceMultiviewProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultiviewProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxMultiviewViewCount && (s.maxMultiviewViewCount = data.maxMultiviewViewCount), void 0 !== data.maxMultiviewInstanceIndex && (s.maxMultiviewInstanceIndex = data.maxMultiviewInstanceIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxMultiviewViewCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxMultiviewViewCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxMultiviewInstanceIndex() {
        return this.#view.getUint32(20, LE);
    }
    set maxMultiviewInstanceIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkRenderPassMultiviewCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassMultiviewCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassMultiviewCreateInfo(new Uint8Array(VkRenderPassMultiviewCreateInfo.size));
    }
    static create(data) {
        let s = VkRenderPassMultiviewCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subpassCount && (s.subpassCount = data.subpassCount), void 0 !== data.pViewMasks && (s.pViewMasks = data.pViewMasks), void 0 !== data.dependencyCount && (s.dependencyCount = data.dependencyCount), void 0 !== data.pViewOffsets && (s.pViewOffsets = data.pViewOffsets), void 0 !== data.correlationMaskCount && (s.correlationMaskCount = data.correlationMaskCount), void 0 !== data.pCorrelationMasks && (s.pCorrelationMasks = data.pCorrelationMasks), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(16, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pViewMasks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewMasks(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(32, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pViewOffsets() {
        return this.#view.getBigUint64(40, LE);
    }
    set pViewOffsets(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get correlationMaskCount() {
        return this.#view.getUint32(48, LE);
    }
    set correlationMaskCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pCorrelationMasks() {
        return this.#view.getBigUint64(56, LE);
    }
    set pCorrelationMasks(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkSurfaceCapabilities2EXT {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceCapabilities2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceCapabilities2EXT(new Uint8Array(VkSurfaceCapabilities2EXT.size));
    }
    static create(data) {
        let s = VkSurfaceCapabilities2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minImageCount && (s.minImageCount = data.minImageCount), void 0 !== data.maxImageCount && (s.maxImageCount = data.maxImageCount), void 0 !== data.currentExtent && (s.currentExtent = data.currentExtent), void 0 !== data.minImageExtent && (s.minImageExtent = data.minImageExtent), void 0 !== data.maxImageExtent && (s.maxImageExtent = data.maxImageExtent), void 0 !== data.maxImageArrayLayers && (s.maxImageArrayLayers = data.maxImageArrayLayers), void 0 !== data.supportedTransforms && (s.supportedTransforms = data.supportedTransforms), void 0 !== data.currentTransform && (s.currentTransform = data.currentTransform), void 0 !== data.supportedCompositeAlpha && (s.supportedCompositeAlpha = data.supportedCompositeAlpha), void 0 !== data.supportedUsageFlags && (s.supportedUsageFlags = data.supportedUsageFlags), void 0 !== data.supportedSurfaceCounters && (s.supportedSurfaceCounters = data.supportedSurfaceCounters), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minImageCount() {
        return this.#view.getUint32(16, LE);
    }
    set minImageCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxImageCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxImageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get currentExtent() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set currentExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get minImageExtent() {
        return new VkExtent2D(this.#data.subarray(32, 32 + VkExtent2D.size));
    }
    set minImageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get maxImageExtent() {
        return new VkExtent2D(this.#data.subarray(40, 40 + VkExtent2D.size));
    }
    set maxImageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get maxImageArrayLayers() {
        return this.#view.getUint32(48, LE);
    }
    set maxImageArrayLayers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get supportedTransforms() {
        return this.#view.getUint32(52, LE);
    }
    set supportedTransforms(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get currentTransform() {
        return this.#view.getUint32(56, LE);
    }
    set currentTransform(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get supportedCompositeAlpha() {
        return this.#view.getUint32(60, LE);
    }
    set supportedCompositeAlpha(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get supportedUsageFlags() {
        return this.#view.getUint32(64, LE);
    }
    set supportedUsageFlags(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get supportedSurfaceCounters() {
        return this.#view.getUint32(68, LE);
    }
    set supportedSurfaceCounters(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class VkDisplayPowerInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPowerInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPowerInfoEXT(new Uint8Array(VkDisplayPowerInfoEXT.size));
    }
    static create(data) {
        let s = VkDisplayPowerInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.powerState && (s.powerState = data.powerState), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get powerState() {
        return this.#view.getUint32(16, LE);
    }
    set powerState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceEventInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceEventInfoEXT(new Uint8Array(VkDeviceEventInfoEXT.size));
    }
    static create(data) {
        let s = VkDeviceEventInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceEvent && (s.deviceEvent = data.deviceEvent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceEvent() {
        return this.#view.getUint32(16, LE);
    }
    set deviceEvent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDisplayEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayEventInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayEventInfoEXT(new Uint8Array(VkDisplayEventInfoEXT.size));
    }
    static create(data) {
        let s = VkDisplayEventInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.displayEvent && (s.displayEvent = data.displayEvent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get displayEvent() {
        return this.#view.getUint32(16, LE);
    }
    set displayEvent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSwapchainCounterCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSwapchainCounterCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSwapchainCounterCreateInfoEXT(new Uint8Array(VkSwapchainCounterCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkSwapchainCounterCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.surfaceCounters && (s.surfaceCounters = data.surfaceCounters), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get surfaceCounters() {
        return this.#view.getUint32(16, LE);
    }
    set surfaceCounters(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceGroupProperties {
    static size = 288;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceGroupProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceGroupProperties(new Uint8Array(VkPhysicalDeviceGroupProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceGroupProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.physicalDeviceCount && (s.physicalDeviceCount = data.physicalDeviceCount), void 0 !== data.physicalDevices && (s.physicalDevices = data.physicalDevices), void 0 !== data.subsetAllocation && (s.subsetAllocation = data.subsetAllocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get physicalDeviceCount() {
        return this.#view.getUint32(16, LE);
    }
    set physicalDeviceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get physicalDevices() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getBigUint64(24 + 8 * i, LE));
        return result;
    }
    set physicalDevices(value) {
        for(let i = 0; i < value.length; i++)this.#view.setBigUint64(24 + 8 * i, BigInt(value[i]), LE);
    }
    get subsetAllocation() {
        return this.#view.getUint32(280, LE);
    }
    set subsetAllocation(value) {
        this.#view.setUint32(280, Number(value), LE);
    }
}
export class VkMemoryAllocateFlagsInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryAllocateFlagsInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryAllocateFlagsInfo(new Uint8Array(VkMemoryAllocateFlagsInfo.size));
    }
    static create(data) {
        let s = VkMemoryAllocateFlagsInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.deviceMask && (s.deviceMask = data.deviceMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(20, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkBindBufferMemoryInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindBufferMemoryInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindBufferMemoryInfo(new Uint8Array(VkBindBufferMemoryInfo.size));
    }
    static create(data) {
        let s = VkBindBufferMemoryInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkBindBufferMemoryDeviceGroupInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindBufferMemoryDeviceGroupInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindBufferMemoryDeviceGroupInfo(new Uint8Array(VkBindBufferMemoryDeviceGroupInfo.size));
    }
    static create(data) {
        let s = VkBindBufferMemoryDeviceGroupInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceIndexCount && (s.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (s.pDeviceIndices = data.pDeviceIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(16, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkBindImageMemoryInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindImageMemoryInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindImageMemoryInfo(new Uint8Array(VkBindImageMemoryInfo.size));
    }
    static create(data) {
        let s = VkBindImageMemoryInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkBindImageMemoryDeviceGroupInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindImageMemoryDeviceGroupInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindImageMemoryDeviceGroupInfo(new Uint8Array(VkBindImageMemoryDeviceGroupInfo.size));
    }
    static create(data) {
        let s = VkBindImageMemoryDeviceGroupInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceIndexCount && (s.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (s.pDeviceIndices = data.pDeviceIndices), void 0 !== data.splitInstanceBindRegionCount && (s.splitInstanceBindRegionCount = data.splitInstanceBindRegionCount), void 0 !== data.pSplitInstanceBindRegions && (s.pSplitInstanceBindRegions = data.pSplitInstanceBindRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(16, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get splitInstanceBindRegionCount() {
        return this.#view.getUint32(32, LE);
    }
    set splitInstanceBindRegionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSplitInstanceBindRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSplitInstanceBindRegions(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkDeviceGroupRenderPassBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupRenderPassBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupRenderPassBeginInfo(new Uint8Array(VkDeviceGroupRenderPassBeginInfo.size));
    }
    static create(data) {
        let s = VkDeviceGroupRenderPassBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceMask && (s.deviceMask = data.deviceMask), void 0 !== data.deviceRenderAreaCount && (s.deviceRenderAreaCount = data.deviceRenderAreaCount), void 0 !== data.pDeviceRenderAreas && (s.pDeviceRenderAreas = data.pDeviceRenderAreas), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceRenderAreaCount() {
        return this.#view.getUint32(20, LE);
    }
    set deviceRenderAreaCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDeviceRenderAreas() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceRenderAreas(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDeviceGroupCommandBufferBeginInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupCommandBufferBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupCommandBufferBeginInfo(new Uint8Array(VkDeviceGroupCommandBufferBeginInfo.size));
    }
    static create(data) {
        let s = VkDeviceGroupCommandBufferBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceMask && (s.deviceMask = data.deviceMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceGroupSubmitInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupSubmitInfo(new Uint8Array(VkDeviceGroupSubmitInfo.size));
    }
    static create(data) {
        let s = VkDeviceGroupSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreCount && (s.waitSemaphoreCount = data.waitSemaphoreCount), void 0 !== data.pWaitSemaphoreDeviceIndices && (s.pWaitSemaphoreDeviceIndices = data.pWaitSemaphoreDeviceIndices), void 0 !== data.commandBufferCount && (s.commandBufferCount = data.commandBufferCount), void 0 !== data.pCommandBufferDeviceMasks && (s.pCommandBufferDeviceMasks = data.pCommandBufferDeviceMasks), void 0 !== data.signalSemaphoreCount && (s.signalSemaphoreCount = data.signalSemaphoreCount), void 0 !== data.pSignalSemaphoreDeviceIndices && (s.pSignalSemaphoreDeviceIndices = data.pSignalSemaphoreDeviceIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreDeviceIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreDeviceIndices(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get commandBufferCount() {
        return this.#view.getUint32(32, LE);
    }
    set commandBufferCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pCommandBufferDeviceMasks() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCommandBufferDeviceMasks(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get signalSemaphoreCount() {
        return this.#view.getUint32(48, LE);
    }
    set signalSemaphoreCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pSignalSemaphoreDeviceIndices() {
        return this.#view.getBigUint64(56, LE);
    }
    set pSignalSemaphoreDeviceIndices(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkDeviceGroupBindSparseInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupBindSparseInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupBindSparseInfo(new Uint8Array(VkDeviceGroupBindSparseInfo.size));
    }
    static create(data) {
        let s = VkDeviceGroupBindSparseInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.resourceDeviceIndex && (s.resourceDeviceIndex = data.resourceDeviceIndex), void 0 !== data.memoryDeviceIndex && (s.memoryDeviceIndex = data.memoryDeviceIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get resourceDeviceIndex() {
        return this.#view.getUint32(16, LE);
    }
    set resourceDeviceIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryDeviceIndex() {
        return this.#view.getUint32(20, LE);
    }
    set memoryDeviceIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkDeviceGroupPresentCapabilitiesKHR {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupPresentCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupPresentCapabilitiesKHR(new Uint8Array(VkDeviceGroupPresentCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkDeviceGroupPresentCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentMask && (s.presentMask = data.presentMask), void 0 !== data.modes && (s.modes = data.modes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentMask() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint32(16 + 4 * i, LE));
        return result;
    }
    set presentMask(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(16 + 4 * i, Number(value[i]), LE);
    }
    get modes() {
        return this.#view.getUint32(144, LE);
    }
    set modes(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
}
export class VkImageSwapchainCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSwapchainCreateInfoKHR(new Uint8Array(VkImageSwapchainCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkImageSwapchainCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchain && (s.swapchain = data.swapchain), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkBindImageMemorySwapchainInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindImageMemorySwapchainInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindImageMemorySwapchainInfoKHR(new Uint8Array(VkBindImageMemorySwapchainInfoKHR.size));
    }
    static create(data) {
        let s = VkBindImageMemorySwapchainInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchain && (s.swapchain = data.swapchain), void 0 !== data.imageIndex && (s.imageIndex = data.imageIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get imageIndex() {
        return this.#view.getUint32(24, LE);
    }
    set imageIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkAcquireNextImageInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAcquireNextImageInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAcquireNextImageInfoKHR(new Uint8Array(VkAcquireNextImageInfoKHR.size));
    }
    static create(data) {
        let s = VkAcquireNextImageInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchain && (s.swapchain = data.swapchain), void 0 !== data.timeout && (s.timeout = data.timeout), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.fence && (s.fence = data.fence), void 0 !== data.deviceMask && (s.deviceMask = data.deviceMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchain() {
        return this.#view.getBigUint64(16, LE);
    }
    set swapchain(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get timeout() {
        return this.#view.getBigUint64(24, LE);
    }
    set timeout(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(32, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get fence() {
        return this.#view.getBigUint64(40, LE);
    }
    set fence(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(48, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkDeviceGroupPresentInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupPresentInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupPresentInfoKHR(new Uint8Array(VkDeviceGroupPresentInfoKHR.size));
    }
    static create(data) {
        let s = VkDeviceGroupPresentInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchainCount && (s.swapchainCount = data.swapchainCount), void 0 !== data.pDeviceMasks && (s.pDeviceMasks = data.pDeviceMasks), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDeviceMasks() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDeviceMasks(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkDeviceGroupDeviceCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupDeviceCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupDeviceCreateInfo(new Uint8Array(VkDeviceGroupDeviceCreateInfo.size));
    }
    static create(data) {
        let s = VkDeviceGroupDeviceCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.physicalDeviceCount && (s.physicalDeviceCount = data.physicalDeviceCount), void 0 !== data.pPhysicalDevices && (s.pPhysicalDevices = data.pPhysicalDevices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get physicalDeviceCount() {
        return this.#view.getUint32(16, LE);
    }
    set physicalDeviceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pPhysicalDevices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPhysicalDevices(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDeviceGroupSwapchainCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceGroupSwapchainCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceGroupSwapchainCreateInfoKHR(new Uint8Array(VkDeviceGroupSwapchainCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkDeviceGroupSwapchainCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.modes && (s.modes = data.modes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get modes() {
        return this.#view.getUint32(16, LE);
    }
    set modes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDescriptorUpdateTemplateEntry {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorUpdateTemplateEntry.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorUpdateTemplateEntry(new Uint8Array(VkDescriptorUpdateTemplateEntry.size));
    }
    static create(data) {
        let s = VkDescriptorUpdateTemplateEntry.alloc();
        return void 0 !== data.dstBinding && (s.dstBinding = data.dstBinding), void 0 !== data.dstArrayElement && (s.dstArrayElement = data.dstArrayElement), void 0 !== data.descriptorCount && (s.descriptorCount = data.descriptorCount), void 0 !== data.descriptorType && (s.descriptorType = data.descriptorType), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.stride && (s.stride = data.stride), s;
    }
    get dstBinding() {
        return this.#view.getUint32(0, LE);
    }
    set dstBinding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstArrayElement() {
        return this.#view.getUint32(4, LE);
    }
    set dstArrayElement(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get descriptorCount() {
        return this.#view.getUint32(8, LE);
    }
    set descriptorCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(12, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(16, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get stride() {
        return this.#view.getBigUint64(24, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorUpdateTemplateCreateInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorUpdateTemplateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorUpdateTemplateCreateInfo(new Uint8Array(VkDescriptorUpdateTemplateCreateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorUpdateTemplateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.descriptorUpdateEntryCount && (s.descriptorUpdateEntryCount = data.descriptorUpdateEntryCount), void 0 !== data.pDescriptorUpdateEntries && (s.pDescriptorUpdateEntries = data.pDescriptorUpdateEntries), void 0 !== data.templateType && (s.templateType = data.templateType), void 0 !== data.descriptorSetLayout && (s.descriptorSetLayout = data.descriptorSetLayout), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.pipelineLayout && (s.pipelineLayout = data.pipelineLayout), void 0 !== data.set && (s.set = data.set), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorUpdateEntryCount() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorUpdateEntryCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDescriptorUpdateEntries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDescriptorUpdateEntries(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get templateType() {
        return this.#view.getUint32(32, LE);
    }
    set templateType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get descriptorSetLayout() {
        return this.#view.getBigUint64(40, LE);
    }
    set descriptorSetLayout(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(48, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pipelineLayout() {
        return this.#view.getBigUint64(56, LE);
    }
    set pipelineLayout(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get set() {
        return this.#view.getUint32(64, LE);
    }
    set set(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
}
export class VkXYColorEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkXYColorEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkXYColorEXT(new Uint8Array(VkXYColorEXT.size));
    }
    static create(data) {
        let s = VkXYColorEXT.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), s;
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class VkPhysicalDevicePresentIdFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePresentIdFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePresentIdFeaturesKHR(new Uint8Array(VkPhysicalDevicePresentIdFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePresentIdFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentId && (s.presentId = data.presentId), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentId() {
        return this.#view.getUint32(16, LE);
    }
    set presentId(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPresentIdKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentIdKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentIdKHR(new Uint8Array(VkPresentIdKHR.size));
    }
    static create(data) {
        let s = VkPresentIdKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_ID_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchainCount && (s.swapchainCount = data.swapchainCount), void 0 !== data.pPresentIds && (s.pPresentIds = data.pPresentIds), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pPresentIds() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPresentIds(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDevicePresentWaitFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePresentWaitFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePresentWaitFeaturesKHR(new Uint8Array(VkPhysicalDevicePresentWaitFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePresentWaitFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentWait && (s.presentWait = data.presentWait), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentWait() {
        return this.#view.getUint32(16, LE);
    }
    set presentWait(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkHdrMetadataEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkHdrMetadataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkHdrMetadataEXT(new Uint8Array(VkHdrMetadataEXT.size));
    }
    static create(data) {
        let s = VkHdrMetadataEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_HDR_METADATA_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.displayPrimaryRed && (s.displayPrimaryRed = data.displayPrimaryRed), void 0 !== data.displayPrimaryGreen && (s.displayPrimaryGreen = data.displayPrimaryGreen), void 0 !== data.displayPrimaryBlue && (s.displayPrimaryBlue = data.displayPrimaryBlue), void 0 !== data.whitePoint && (s.whitePoint = data.whitePoint), void 0 !== data.maxLuminance && (s.maxLuminance = data.maxLuminance), void 0 !== data.minLuminance && (s.minLuminance = data.minLuminance), void 0 !== data.maxContentLightLevel && (s.maxContentLightLevel = data.maxContentLightLevel), void 0 !== data.maxFrameAverageLightLevel && (s.maxFrameAverageLightLevel = data.maxFrameAverageLightLevel), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get displayPrimaryRed() {
        return new VkXYColorEXT(this.#data.subarray(16, 16 + VkXYColorEXT.size));
    }
    set displayPrimaryRed(value) {
        if (value[BUFFER].byteLength < VkXYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get displayPrimaryGreen() {
        return new VkXYColorEXT(this.#data.subarray(24, 24 + VkXYColorEXT.size));
    }
    set displayPrimaryGreen(value) {
        if (value[BUFFER].byteLength < VkXYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get displayPrimaryBlue() {
        return new VkXYColorEXT(this.#data.subarray(32, 32 + VkXYColorEXT.size));
    }
    set displayPrimaryBlue(value) {
        if (value[BUFFER].byteLength < VkXYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get whitePoint() {
        return new VkXYColorEXT(this.#data.subarray(40, 40 + VkXYColorEXT.size));
    }
    set whitePoint(value) {
        if (value[BUFFER].byteLength < VkXYColorEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get maxLuminance() {
        return this.#view.getFloat32(48, LE);
    }
    set maxLuminance(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get minLuminance() {
        return this.#view.getFloat32(52, LE);
    }
    set minLuminance(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get maxContentLightLevel() {
        return this.#view.getFloat32(56, LE);
    }
    set maxContentLightLevel(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
    get maxFrameAverageLightLevel() {
        return this.#view.getFloat32(60, LE);
    }
    set maxFrameAverageLightLevel(value) {
        this.#view.setFloat32(60, Number(value), LE);
    }
}
export class VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayNativeHdrSurfaceCapabilitiesAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayNativeHdrSurfaceCapabilitiesAMD(new Uint8Array(VkDisplayNativeHdrSurfaceCapabilitiesAMD.size));
    }
    static create(data) {
        let s = VkDisplayNativeHdrSurfaceCapabilitiesAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.localDimmingSupport && (s.localDimmingSupport = data.localDimmingSupport), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get localDimmingSupport() {
        return this.#view.getUint32(16, LE);
    }
    set localDimmingSupport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSwapchainDisplayNativeHdrCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSwapchainDisplayNativeHdrCreateInfoAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSwapchainDisplayNativeHdrCreateInfoAMD(new Uint8Array(VkSwapchainDisplayNativeHdrCreateInfoAMD.size));
    }
    static create(data) {
        let s = VkSwapchainDisplayNativeHdrCreateInfoAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.localDimmingEnable && (s.localDimmingEnable = data.localDimmingEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get localDimmingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set localDimmingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkRefreshCycleDurationGOOGLE {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRefreshCycleDurationGOOGLE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRefreshCycleDurationGOOGLE(new Uint8Array(VkRefreshCycleDurationGOOGLE.size));
    }
    static create(data) {
        let s = VkRefreshCycleDurationGOOGLE.alloc();
        return void 0 !== data.refreshDuration && (s.refreshDuration = data.refreshDuration), s;
    }
    get refreshDuration() {
        return this.#view.getBigUint64(0, LE);
    }
    set refreshDuration(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
}
export class VkPastPresentationTimingGOOGLE {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPastPresentationTimingGOOGLE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPastPresentationTimingGOOGLE(new Uint8Array(VkPastPresentationTimingGOOGLE.size));
    }
    static create(data) {
        let s = VkPastPresentationTimingGOOGLE.alloc();
        return void 0 !== data.presentID && (s.presentID = data.presentID), void 0 !== data.desiredPresentTime && (s.desiredPresentTime = data.desiredPresentTime), void 0 !== data.actualPresentTime && (s.actualPresentTime = data.actualPresentTime), void 0 !== data.earliestPresentTime && (s.earliestPresentTime = data.earliestPresentTime), void 0 !== data.presentMargin && (s.presentMargin = data.presentMargin), s;
    }
    get presentID() {
        return this.#view.getUint32(0, LE);
    }
    set presentID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get desiredPresentTime() {
        return this.#view.getBigUint64(8, LE);
    }
    set desiredPresentTime(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get actualPresentTime() {
        return this.#view.getBigUint64(16, LE);
    }
    set actualPresentTime(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get earliestPresentTime() {
        return this.#view.getBigUint64(24, LE);
    }
    set earliestPresentTime(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get presentMargin() {
        return this.#view.getBigUint64(32, LE);
    }
    set presentMargin(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkPresentTimesInfoGOOGLE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentTimesInfoGOOGLE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentTimesInfoGOOGLE(new Uint8Array(VkPresentTimesInfoGOOGLE.size));
    }
    static create(data) {
        let s = VkPresentTimesInfoGOOGLE.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.swapchainCount && (s.swapchainCount = data.swapchainCount), void 0 !== data.pTimes && (s.pTimes = data.pTimes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get swapchainCount() {
        return this.#view.getUint32(16, LE);
    }
    set swapchainCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pTimes() {
        return this.#view.getBigUint64(24, LE);
    }
    set pTimes(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPresentTimeGOOGLE {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentTimeGOOGLE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentTimeGOOGLE(new Uint8Array(VkPresentTimeGOOGLE.size));
    }
    static create(data) {
        let s = VkPresentTimeGOOGLE.alloc();
        return void 0 !== data.presentID && (s.presentID = data.presentID), void 0 !== data.desiredPresentTime && (s.desiredPresentTime = data.desiredPresentTime), s;
    }
    get presentID() {
        return this.#view.getUint32(0, LE);
    }
    set presentID(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get desiredPresentTime() {
        return this.#view.getBigUint64(8, LE);
    }
    set desiredPresentTime(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkIOSSurfaceCreateInfoMVK {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkIOSSurfaceCreateInfoMVK.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkIOSSurfaceCreateInfoMVK(new Uint8Array(VkIOSSurfaceCreateInfoMVK.size));
    }
    static create(data) {
        let s = VkIOSSurfaceCreateInfoMVK.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pView && (s.pView = data.pView), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pView() {
        return this.#view.getBigUint64(24, LE);
    }
    set pView(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkMacOSSurfaceCreateInfoMVK {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMacOSSurfaceCreateInfoMVK.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMacOSSurfaceCreateInfoMVK(new Uint8Array(VkMacOSSurfaceCreateInfoMVK.size));
    }
    static create(data) {
        let s = VkMacOSSurfaceCreateInfoMVK.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pView && (s.pView = data.pView), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pView() {
        return this.#view.getBigUint64(24, LE);
    }
    set pView(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkMetalSurfaceCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMetalSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMetalSurfaceCreateInfoEXT(new Uint8Array(VkMetalSurfaceCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkMetalSurfaceCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pLayer && (s.pLayer = data.pLayer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pLayer() {
        return this.#view.getBigUint64(24, LE);
    }
    set pLayer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkViewportWScalingNV {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkViewportWScalingNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkViewportWScalingNV(new Uint8Array(VkViewportWScalingNV.size));
    }
    static create(data) {
        let s = VkViewportWScalingNV.alloc();
        return void 0 !== data.xcoeff && (s.xcoeff = data.xcoeff), void 0 !== data.ycoeff && (s.ycoeff = data.ycoeff), s;
    }
    get xcoeff() {
        return this.#view.getFloat32(0, LE);
    }
    set xcoeff(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get ycoeff() {
        return this.#view.getFloat32(4, LE);
    }
    set ycoeff(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class VkPipelineViewportWScalingStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportWScalingStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportWScalingStateCreateInfoNV(new Uint8Array(VkPipelineViewportWScalingStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineViewportWScalingStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.viewportWScalingEnable && (s.viewportWScalingEnable = data.viewportWScalingEnable), void 0 !== data.viewportCount && (s.viewportCount = data.viewportCount), void 0 !== data.pViewportWScalings && (s.pViewportWScalings = data.pViewportWScalings), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get viewportWScalingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set viewportWScalingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportWScalings() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportWScalings(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkViewportSwizzleNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkViewportSwizzleNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkViewportSwizzleNV(new Uint8Array(VkViewportSwizzleNV.size));
    }
    static create(data) {
        let s = VkViewportSwizzleNV.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), void 0 !== data.z && (s.z = data.z), void 0 !== data.w && (s.w = data.w), s;
    }
    get x() {
        return this.#view.getUint32(0, LE);
    }
    set x(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getUint32(4, LE);
    }
    set y(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get z() {
        return this.#view.getUint32(8, LE);
    }
    set z(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get w() {
        return this.#view.getUint32(12, LE);
    }
    set w(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkPipelineViewportSwizzleStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportSwizzleStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportSwizzleStateCreateInfoNV(new Uint8Array(VkPipelineViewportSwizzleStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineViewportSwizzleStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.viewportCount && (s.viewportCount = data.viewportCount), void 0 !== data.pViewportSwizzles && (s.pViewportSwizzles = data.pViewportSwizzles), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportSwizzles() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportSwizzles(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDiscardRectanglePropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDiscardRectanglePropertiesEXT(new Uint8Array(VkPhysicalDeviceDiscardRectanglePropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDiscardRectanglePropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxDiscardRectangles && (s.maxDiscardRectangles = data.maxDiscardRectangles), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxDiscardRectangles() {
        return this.#view.getUint32(16, LE);
    }
    set maxDiscardRectangles(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineDiscardRectangleStateCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineDiscardRectangleStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineDiscardRectangleStateCreateInfoEXT(new Uint8Array(VkPipelineDiscardRectangleStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineDiscardRectangleStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.discardRectangleMode && (s.discardRectangleMode = data.discardRectangleMode), void 0 !== data.discardRectangleCount && (s.discardRectangleCount = data.discardRectangleCount), void 0 !== data.pDiscardRectangles && (s.pDiscardRectangles = data.pDiscardRectangles), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get discardRectangleMode() {
        return this.#view.getUint32(20, LE);
    }
    set discardRectangleMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get discardRectangleCount() {
        return this.#view.getUint32(24, LE);
    }
    set discardRectangleCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pDiscardRectangles() {
        return this.#view.getBigUint64(32, LE);
    }
    set pDiscardRectangles(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(new Uint8Array(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.perViewPositionAllComponents && (s.perViewPositionAllComponents = data.perViewPositionAllComponents), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get perViewPositionAllComponents() {
        return this.#view.getUint32(16, LE);
    }
    set perViewPositionAllComponents(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkInputAttachmentAspectReference {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkInputAttachmentAspectReference.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkInputAttachmentAspectReference(new Uint8Array(VkInputAttachmentAspectReference.size));
    }
    static create(data) {
        let s = VkInputAttachmentAspectReference.alloc();
        return void 0 !== data.subpass && (s.subpass = data.subpass), void 0 !== data.inputAttachmentIndex && (s.inputAttachmentIndex = data.inputAttachmentIndex), void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), s;
    }
    get subpass() {
        return this.#view.getUint32(0, LE);
    }
    set subpass(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get inputAttachmentIndex() {
        return this.#view.getUint32(4, LE);
    }
    set inputAttachmentIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get aspectMask() {
        return this.#view.getUint32(8, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkRenderPassInputAttachmentAspectCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassInputAttachmentAspectCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassInputAttachmentAspectCreateInfo(new Uint8Array(VkRenderPassInputAttachmentAspectCreateInfo.size));
    }
    static create(data) {
        let s = VkRenderPassInputAttachmentAspectCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.aspectReferenceCount && (s.aspectReferenceCount = data.aspectReferenceCount), void 0 !== data.pAspectReferences && (s.pAspectReferences = data.pAspectReferences), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get aspectReferenceCount() {
        return this.#view.getUint32(16, LE);
    }
    set aspectReferenceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAspectReferences() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAspectReferences(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceSurfaceInfo2KHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSurfaceInfo2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSurfaceInfo2KHR(new Uint8Array(VkPhysicalDeviceSurfaceInfo2KHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSurfaceInfo2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.surface && (s.surface = data.surface), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get surface() {
        return this.#view.getBigUint64(16, LE);
    }
    set surface(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSurfaceCapabilities2KHR {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceCapabilities2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceCapabilities2KHR(new Uint8Array(VkSurfaceCapabilities2KHR.size));
    }
    static create(data) {
        let s = VkSurfaceCapabilities2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.surfaceCapabilities && (s.surfaceCapabilities = data.surfaceCapabilities), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get surfaceCapabilities() {
        return new VkSurfaceCapabilitiesKHR(this.#data.subarray(16, 16 + VkSurfaceCapabilitiesKHR.size));
    }
    set surfaceCapabilities(value) {
        if (value[BUFFER].byteLength < VkSurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSurfaceFormat2KHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceFormat2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceFormat2KHR(new Uint8Array(VkSurfaceFormat2KHR.size));
    }
    static create(data) {
        let s = VkSurfaceFormat2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.surfaceFormat && (s.surfaceFormat = data.surfaceFormat), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get surfaceFormat() {
        return new VkSurfaceFormatKHR(this.#data.subarray(16, 16 + VkSurfaceFormatKHR.size));
    }
    set surfaceFormat(value) {
        if (value[BUFFER].byteLength < VkSurfaceFormatKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkDisplayProperties2KHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayProperties2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayProperties2KHR(new Uint8Array(VkDisplayProperties2KHR.size));
    }
    static create(data) {
        let s = VkDisplayProperties2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.displayProperties && (s.displayProperties = data.displayProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get displayProperties() {
        return new VkDisplayPropertiesKHR(this.#data.subarray(16, 16 + VkDisplayPropertiesKHR.size));
    }
    set displayProperties(value) {
        if (value[BUFFER].byteLength < VkDisplayPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkDisplayPlaneProperties2KHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPlaneProperties2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPlaneProperties2KHR(new Uint8Array(VkDisplayPlaneProperties2KHR.size));
    }
    static create(data) {
        let s = VkDisplayPlaneProperties2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.displayPlaneProperties && (s.displayPlaneProperties = data.displayPlaneProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get displayPlaneProperties() {
        return new VkDisplayPlanePropertiesKHR(this.#data.subarray(16, 16 + VkDisplayPlanePropertiesKHR.size));
    }
    set displayPlaneProperties(value) {
        if (value[BUFFER].byteLength < VkDisplayPlanePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkDisplayModeProperties2KHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayModeProperties2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayModeProperties2KHR(new Uint8Array(VkDisplayModeProperties2KHR.size));
    }
    static create(data) {
        let s = VkDisplayModeProperties2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.displayModeProperties && (s.displayModeProperties = data.displayModeProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get displayModeProperties() {
        return new VkDisplayModePropertiesKHR(this.#data.subarray(16, 16 + VkDisplayModePropertiesKHR.size));
    }
    set displayModeProperties(value) {
        if (value[BUFFER].byteLength < VkDisplayModePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkDisplayPlaneInfo2KHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPlaneInfo2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPlaneInfo2KHR(new Uint8Array(VkDisplayPlaneInfo2KHR.size));
    }
    static create(data) {
        let s = VkDisplayPlaneInfo2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mode && (s.mode = data.mode), void 0 !== data.planeIndex && (s.planeIndex = data.planeIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getBigUint64(16, LE);
    }
    set mode(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get planeIndex() {
        return this.#view.getUint32(24, LE);
    }
    set planeIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkDisplayPlaneCapabilities2KHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDisplayPlaneCapabilities2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDisplayPlaneCapabilities2KHR(new Uint8Array(VkDisplayPlaneCapabilities2KHR.size));
    }
    static create(data) {
        let s = VkDisplayPlaneCapabilities2KHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.capabilities && (s.capabilities = data.capabilities), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get capabilities() {
        return new VkDisplayPlaneCapabilitiesKHR(this.#data.subarray(16, 16 + VkDisplayPlaneCapabilitiesKHR.size));
    }
    set capabilities(value) {
        if (value[BUFFER].byteLength < VkDisplayPlaneCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSharedPresentSurfaceCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSharedPresentSurfaceCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSharedPresentSurfaceCapabilitiesKHR(new Uint8Array(VkSharedPresentSurfaceCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkSharedPresentSurfaceCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sharedPresentSupportedUsageFlags && (s.sharedPresentSupportedUsageFlags = data.sharedPresentSupportedUsageFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sharedPresentSupportedUsageFlags() {
        return this.#view.getUint32(16, LE);
    }
    set sharedPresentSupportedUsageFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevice16BitStorageFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevice16BitStorageFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevice16BitStorageFeatures(new Uint8Array(VkPhysicalDevice16BitStorageFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDevice16BitStorageFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.storageBuffer16BitAccess && (s.storageBuffer16BitAccess = data.storageBuffer16BitAccess), void 0 !== data.uniformAndStorageBuffer16BitAccess && (s.uniformAndStorageBuffer16BitAccess = data.uniformAndStorageBuffer16BitAccess), void 0 !== data.storagePushConstant16 && (s.storagePushConstant16 = data.storagePushConstant16), void 0 !== data.storageInputOutput16 && (s.storageInputOutput16 = data.storageInputOutput16), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get storageBuffer16BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer16BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer16BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer16BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant16() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get storageInputOutput16() {
        return this.#view.getUint32(28, LE);
    }
    set storageInputOutput16(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceSubgroupProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubgroupProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubgroupProperties(new Uint8Array(VkPhysicalDeviceSubgroupProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubgroupProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subgroupSize && (s.subgroupSize = data.subgroupSize), void 0 !== data.supportedStages && (s.supportedStages = data.supportedStages), void 0 !== data.supportedOperations && (s.supportedOperations = data.supportedOperations), void 0 !== data.quadOperationsInAllStages && (s.quadOperationsInAllStages = data.quadOperationsInAllStages), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedStages() {
        return this.#view.getUint32(20, LE);
    }
    set supportedStages(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get supportedOperations() {
        return this.#view.getUint32(24, LE);
    }
    set supportedOperations(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get quadOperationsInAllStages() {
        return this.#view.getUint32(28, LE);
    }
    set quadOperationsInAllStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(new Uint8Array(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderSubgroupExtendedTypes && (s.shaderSubgroupExtendedTypes = data.shaderSubgroupExtendedTypes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderSubgroupExtendedTypes() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupExtendedTypes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkBufferMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferMemoryRequirementsInfo2(new Uint8Array(VkBufferMemoryRequirementsInfo2.size));
    }
    static create(data) {
        let s = VkBufferMemoryRequirementsInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDeviceBufferMemoryRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceBufferMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceBufferMemoryRequirements(new Uint8Array(VkDeviceBufferMemoryRequirements.size));
    }
    static create(data) {
        let s = VkDeviceBufferMemoryRequirements.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pCreateInfo && (s.pCreateInfo = data.pCreateInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pCreateInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pCreateInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkImageMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageMemoryRequirementsInfo2(new Uint8Array(VkImageMemoryRequirementsInfo2.size));
    }
    static create(data) {
        let s = VkImageMemoryRequirementsInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkImageSparseMemoryRequirementsInfo2 {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSparseMemoryRequirementsInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSparseMemoryRequirementsInfo2(new Uint8Array(VkImageSparseMemoryRequirementsInfo2.size));
    }
    static create(data) {
        let s = VkImageSparseMemoryRequirementsInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDeviceImageMemoryRequirements {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceImageMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceImageMemoryRequirements(new Uint8Array(VkDeviceImageMemoryRequirements.size));
    }
    static create(data) {
        let s = VkDeviceImageMemoryRequirements.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pCreateInfo && (s.pCreateInfo = data.pCreateInfo), void 0 !== data.planeAspect && (s.planeAspect = data.planeAspect), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pCreateInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pCreateInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(24, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkMemoryRequirements2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryRequirements2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryRequirements2(new Uint8Array(VkMemoryRequirements2.size));
    }
    static create(data) {
        let s = VkMemoryRequirements2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryRequirements && (s.memoryRequirements = data.memoryRequirements), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryRequirements() {
        return new VkMemoryRequirements(this.#data.subarray(16, 16 + VkMemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < VkMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSparseImageMemoryRequirements2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSparseImageMemoryRequirements2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSparseImageMemoryRequirements2(new Uint8Array(VkSparseImageMemoryRequirements2.size));
    }
    static create(data) {
        let s = VkSparseImageMemoryRequirements2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryRequirements && (s.memoryRequirements = data.memoryRequirements), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryRequirements() {
        return new VkSparseImageMemoryRequirements(this.#data.subarray(16, 16 + VkSparseImageMemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < VkSparseImageMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkPhysicalDevicePointClippingProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePointClippingProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePointClippingProperties(new Uint8Array(VkPhysicalDevicePointClippingProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePointClippingProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pointClippingBehavior && (s.pointClippingBehavior = data.pointClippingBehavior), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pointClippingBehavior() {
        return this.#view.getUint32(16, LE);
    }
    set pointClippingBehavior(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryDedicatedRequirements {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryDedicatedRequirements.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryDedicatedRequirements(new Uint8Array(VkMemoryDedicatedRequirements.size));
    }
    static create(data) {
        let s = VkMemoryDedicatedRequirements.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.prefersDedicatedAllocation && (s.prefersDedicatedAllocation = data.prefersDedicatedAllocation), void 0 !== data.requiresDedicatedAllocation && (s.requiresDedicatedAllocation = data.requiresDedicatedAllocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get prefersDedicatedAllocation() {
        return this.#view.getUint32(16, LE);
    }
    set prefersDedicatedAllocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get requiresDedicatedAllocation() {
        return this.#view.getUint32(20, LE);
    }
    set requiresDedicatedAllocation(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkMemoryDedicatedAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryDedicatedAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryDedicatedAllocateInfo(new Uint8Array(VkMemoryDedicatedAllocateInfo.size));
    }
    static create(data) {
        let s = VkMemoryDedicatedAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkImageViewUsageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewUsageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewUsageCreateInfo(new Uint8Array(VkImageViewUsageCreateInfo.size));
    }
    static create(data) {
        let s = VkImageViewUsageCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.usage && (s.usage = data.usage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineTessellationDomainOriginStateCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineTessellationDomainOriginStateCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineTessellationDomainOriginStateCreateInfo(new Uint8Array(VkPipelineTessellationDomainOriginStateCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineTessellationDomainOriginStateCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.domainOrigin && (s.domainOrigin = data.domainOrigin), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get domainOrigin() {
        return this.#view.getUint32(16, LE);
    }
    set domainOrigin(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSamplerYcbcrConversionInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerYcbcrConversionInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerYcbcrConversionInfo(new Uint8Array(VkSamplerYcbcrConversionInfo.size));
    }
    static create(data) {
        let s = VkSamplerYcbcrConversionInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.conversion && (s.conversion = data.conversion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get conversion() {
        return this.#view.getBigUint64(16, LE);
    }
    set conversion(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSamplerYcbcrConversionCreateInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerYcbcrConversionCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerYcbcrConversionCreateInfo(new Uint8Array(VkSamplerYcbcrConversionCreateInfo.size));
    }
    static create(data) {
        let s = VkSamplerYcbcrConversionCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.ycbcrModel && (s.ycbcrModel = data.ycbcrModel), void 0 !== data.ycbcrRange && (s.ycbcrRange = data.ycbcrRange), void 0 !== data.components && (s.components = data.components), void 0 !== data.xChromaOffset && (s.xChromaOffset = data.xChromaOffset), void 0 !== data.yChromaOffset && (s.yChromaOffset = data.yChromaOffset), void 0 !== data.chromaFilter && (s.chromaFilter = data.chromaFilter), void 0 !== data.forceExplicitReconstruction && (s.forceExplicitReconstruction = data.forceExplicitReconstruction), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get ycbcrModel() {
        return this.#view.getUint32(20, LE);
    }
    set ycbcrModel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get ycbcrRange() {
        return this.#view.getUint32(24, LE);
    }
    set ycbcrRange(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get components() {
        return new VkComponentMapping(this.#data.subarray(28, 28 + VkComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get xChromaOffset() {
        return this.#view.getUint32(44, LE);
    }
    set xChromaOffset(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get yChromaOffset() {
        return this.#view.getUint32(48, LE);
    }
    set yChromaOffset(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get chromaFilter() {
        return this.#view.getUint32(52, LE);
    }
    set chromaFilter(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get forceExplicitReconstruction() {
        return this.#view.getUint32(56, LE);
    }
    set forceExplicitReconstruction(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkBindImagePlaneMemoryInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindImagePlaneMemoryInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindImagePlaneMemoryInfo(new Uint8Array(VkBindImagePlaneMemoryInfo.size));
    }
    static create(data) {
        let s = VkBindImagePlaneMemoryInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.planeAspect && (s.planeAspect = data.planeAspect), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(16, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImagePlaneMemoryRequirementsInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImagePlaneMemoryRequirementsInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImagePlaneMemoryRequirementsInfo(new Uint8Array(VkImagePlaneMemoryRequirementsInfo.size));
    }
    static create(data) {
        let s = VkImagePlaneMemoryRequirementsInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.planeAspect && (s.planeAspect = data.planeAspect), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get planeAspect() {
        return this.#view.getUint32(16, LE);
    }
    set planeAspect(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSamplerYcbcrConversionFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSamplerYcbcrConversionFeatures(new Uint8Array(VkPhysicalDeviceSamplerYcbcrConversionFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSamplerYcbcrConversionFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.samplerYcbcrConversion && (s.samplerYcbcrConversion = data.samplerYcbcrConversion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get samplerYcbcrConversion() {
        return this.#view.getUint32(16, LE);
    }
    set samplerYcbcrConversion(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSamplerYcbcrConversionImageFormatProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerYcbcrConversionImageFormatProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerYcbcrConversionImageFormatProperties(new Uint8Array(VkSamplerYcbcrConversionImageFormatProperties.size));
    }
    static create(data) {
        let s = VkSamplerYcbcrConversionImageFormatProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.combinedImageSamplerDescriptorCount && (s.combinedImageSamplerDescriptorCount = data.combinedImageSamplerDescriptorCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get combinedImageSamplerDescriptorCount() {
        return this.#view.getUint32(16, LE);
    }
    set combinedImageSamplerDescriptorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkTextureLODGatherFormatPropertiesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTextureLODGatherFormatPropertiesAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTextureLODGatherFormatPropertiesAMD(new Uint8Array(VkTextureLODGatherFormatPropertiesAMD.size));
    }
    static create(data) {
        let s = VkTextureLODGatherFormatPropertiesAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supportsTextureGatherLODBiasAMD && (s.supportsTextureGatherLODBiasAMD = data.supportsTextureGatherLODBiasAMD), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supportsTextureGatherLODBiasAMD() {
        return this.#view.getUint32(16, LE);
    }
    set supportsTextureGatherLODBiasAMD(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkConditionalRenderingBeginInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkConditionalRenderingBeginInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkConditionalRenderingBeginInfoEXT(new Uint8Array(VkConditionalRenderingBeginInfoEXT.size));
    }
    static create(data) {
        let s = VkConditionalRenderingBeginInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(24, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(32, LE);
    }
    set flags(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkProtectedSubmitInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkProtectedSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkProtectedSubmitInfo(new Uint8Array(VkProtectedSubmitInfo.size));
    }
    static create(data) {
        let s = VkProtectedSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.protectedSubmit && (s.protectedSubmit = data.protectedSubmit), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get protectedSubmit() {
        return this.#view.getUint32(16, LE);
    }
    set protectedSubmit(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceProtectedMemoryFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProtectedMemoryFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProtectedMemoryFeatures(new Uint8Array(VkPhysicalDeviceProtectedMemoryFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProtectedMemoryFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.protectedMemory && (s.protectedMemory = data.protectedMemory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get protectedMemory() {
        return this.#view.getUint32(16, LE);
    }
    set protectedMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceProtectedMemoryProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProtectedMemoryProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProtectedMemoryProperties(new Uint8Array(VkPhysicalDeviceProtectedMemoryProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProtectedMemoryProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.protectedNoFault && (s.protectedNoFault = data.protectedNoFault), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get protectedNoFault() {
        return this.#view.getUint32(16, LE);
    }
    set protectedNoFault(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceQueueInfo2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceQueueInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceQueueInfo2(new Uint8Array(VkDeviceQueueInfo2.size));
    }
    static create(data) {
        let s = VkDeviceQueueInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.queueFamilyIndex && (s.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.queueIndex && (s.queueIndex = data.queueIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(20, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get queueIndex() {
        return this.#view.getUint32(24, LE);
    }
    set queueIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPipelineCoverageToColorStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCoverageToColorStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCoverageToColorStateCreateInfoNV(new Uint8Array(VkPipelineCoverageToColorStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineCoverageToColorStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.coverageToColorEnable && (s.coverageToColorEnable = data.coverageToColorEnable), void 0 !== data.coverageToColorLocation && (s.coverageToColorLocation = data.coverageToColorLocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageToColorEnable() {
        return this.#view.getUint32(20, LE);
    }
    set coverageToColorEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get coverageToColorLocation() {
        return this.#view.getUint32(24, LE);
    }
    set coverageToColorLocation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceSamplerFilterMinmaxProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSamplerFilterMinmaxProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSamplerFilterMinmaxProperties(new Uint8Array(VkPhysicalDeviceSamplerFilterMinmaxProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSamplerFilterMinmaxProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.filterMinmaxSingleComponentFormats && (s.filterMinmaxSingleComponentFormats = data.filterMinmaxSingleComponentFormats), void 0 !== data.filterMinmaxImageComponentMapping && (s.filterMinmaxImageComponentMapping = data.filterMinmaxImageComponentMapping), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get filterMinmaxSingleComponentFormats() {
        return this.#view.getUint32(16, LE);
    }
    set filterMinmaxSingleComponentFormats(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get filterMinmaxImageComponentMapping() {
        return this.#view.getUint32(20, LE);
    }
    set filterMinmaxImageComponentMapping(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkSampleLocationEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSampleLocationEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSampleLocationEXT(new Uint8Array(VkSampleLocationEXT.size));
    }
    static create(data) {
        let s = VkSampleLocationEXT.alloc();
        return void 0 !== data.x && (s.x = data.x), void 0 !== data.y && (s.y = data.y), s;
    }
    get x() {
        return this.#view.getFloat32(0, LE);
    }
    set x(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get y() {
        return this.#view.getFloat32(4, LE);
    }
    set y(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
}
export class VkSampleLocationsInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSampleLocationsInfoEXT(new Uint8Array(VkSampleLocationsInfoEXT.size));
    }
    static create(data) {
        let s = VkSampleLocationsInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampleLocationsPerPixel && (s.sampleLocationsPerPixel = data.sampleLocationsPerPixel), void 0 !== data.sampleLocationGridSize && (s.sampleLocationGridSize = data.sampleLocationGridSize), void 0 !== data.sampleLocationsCount && (s.sampleLocationsCount = data.sampleLocationsCount), void 0 !== data.pSampleLocations && (s.pSampleLocations = data.pSampleLocations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampleLocationsPerPixel() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationsPerPixel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleLocationGridSize() {
        return new VkExtent2D(this.#data.subarray(20, 20 + VkExtent2D.size));
    }
    set sampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get sampleLocationsCount() {
        return this.#view.getUint32(28, LE);
    }
    set sampleLocationsCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pSampleLocations() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSampleLocations(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkAttachmentSampleLocationsEXT {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentSampleLocationsEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentSampleLocationsEXT(new Uint8Array(VkAttachmentSampleLocationsEXT.size));
    }
    static create(data) {
        let s = VkAttachmentSampleLocationsEXT.alloc();
        return void 0 !== data.attachmentIndex && (s.attachmentIndex = data.attachmentIndex), void 0 !== data.sampleLocationsInfo && (s.sampleLocationsInfo = data.sampleLocationsInfo), s;
    }
    get attachmentIndex() {
        return this.#view.getUint32(0, LE);
    }
    set attachmentIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new VkSampleLocationsInfoEXT(this.#data.subarray(4, 4 + VkSampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < VkSampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
}
export class VkSubpassSampleLocationsEXT {
    static size = 44;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassSampleLocationsEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassSampleLocationsEXT(new Uint8Array(VkSubpassSampleLocationsEXT.size));
    }
    static create(data) {
        let s = VkSubpassSampleLocationsEXT.alloc();
        return void 0 !== data.subpassIndex && (s.subpassIndex = data.subpassIndex), void 0 !== data.sampleLocationsInfo && (s.sampleLocationsInfo = data.sampleLocationsInfo), s;
    }
    get subpassIndex() {
        return this.#view.getUint32(0, LE);
    }
    set subpassIndex(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new VkSampleLocationsInfoEXT(this.#data.subarray(4, 4 + VkSampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < VkSampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
}
export class VkRenderPassSampleLocationsBeginInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassSampleLocationsBeginInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassSampleLocationsBeginInfoEXT(new Uint8Array(VkRenderPassSampleLocationsBeginInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassSampleLocationsBeginInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachmentInitialSampleLocationsCount && (s.attachmentInitialSampleLocationsCount = data.attachmentInitialSampleLocationsCount), void 0 !== data.pAttachmentInitialSampleLocations && (s.pAttachmentInitialSampleLocations = data.pAttachmentInitialSampleLocations), void 0 !== data.postSubpassSampleLocationsCount && (s.postSubpassSampleLocationsCount = data.postSubpassSampleLocationsCount), void 0 !== data.pPostSubpassSampleLocations && (s.pPostSubpassSampleLocations = data.pPostSubpassSampleLocations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachmentInitialSampleLocationsCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentInitialSampleLocationsCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachmentInitialSampleLocations() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachmentInitialSampleLocations(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get postSubpassSampleLocationsCount() {
        return this.#view.getUint32(32, LE);
    }
    set postSubpassSampleLocationsCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pPostSubpassSampleLocations() {
        return this.#view.getBigUint64(40, LE);
    }
    set pPostSubpassSampleLocations(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkPipelineSampleLocationsStateCreateInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineSampleLocationsStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineSampleLocationsStateCreateInfoEXT(new Uint8Array(VkPipelineSampleLocationsStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineSampleLocationsStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampleLocationsEnable && (s.sampleLocationsEnable = data.sampleLocationsEnable), void 0 !== data.sampleLocationsInfo && (s.sampleLocationsInfo = data.sampleLocationsInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampleLocationsEnable() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationsEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampleLocationsInfo() {
        return new VkSampleLocationsInfoEXT(this.#data.subarray(20, 20 + VkSampleLocationsInfoEXT.size));
    }
    set sampleLocationsInfo(value) {
        if (value[BUFFER].byteLength < VkSampleLocationsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VkPhysicalDeviceSampleLocationsPropertiesEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSampleLocationsPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSampleLocationsPropertiesEXT(new Uint8Array(VkPhysicalDeviceSampleLocationsPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSampleLocationsPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampleLocationSampleCounts && (s.sampleLocationSampleCounts = data.sampleLocationSampleCounts), void 0 !== data.maxSampleLocationGridSize && (s.maxSampleLocationGridSize = data.maxSampleLocationGridSize), void 0 !== data.sampleLocationCoordinateRange && (s.sampleLocationCoordinateRange = data.sampleLocationCoordinateRange), void 0 !== data.sampleLocationSubPixelBits && (s.sampleLocationSubPixelBits = data.sampleLocationSubPixelBits), void 0 !== data.variableSampleLocations && (s.variableSampleLocations = data.variableSampleLocations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampleLocationSampleCounts() {
        return this.#view.getUint32(16, LE);
    }
    set sampleLocationSampleCounts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSampleLocationGridSize() {
        return new VkExtent2D(this.#data.subarray(20, 20 + VkExtent2D.size));
    }
    set maxSampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get sampleLocationCoordinateRange() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getFloat32(28 + 4 * i, LE));
        return result;
    }
    set sampleLocationCoordinateRange(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(28 + 4 * i, Number(value[i]), LE);
    }
    get sampleLocationSubPixelBits() {
        return this.#view.getUint32(36, LE);
    }
    set sampleLocationSubPixelBits(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get variableSampleLocations() {
        return this.#view.getUint32(40, LE);
    }
    set variableSampleLocations(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkMultisamplePropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMultisamplePropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMultisamplePropertiesEXT(new Uint8Array(VkMultisamplePropertiesEXT.size));
    }
    static create(data) {
        let s = VkMultisamplePropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxSampleLocationGridSize && (s.maxSampleLocationGridSize = data.maxSampleLocationGridSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxSampleLocationGridSize() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set maxSampleLocationGridSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSamplerReductionModeCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerReductionModeCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerReductionModeCreateInfo(new Uint8Array(VkSamplerReductionModeCreateInfo.size));
    }
    static create(data) {
        let s = VkSamplerReductionModeCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.reductionMode && (s.reductionMode = data.reductionMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get reductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set reductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(new Uint8Array(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.advancedBlendCoherentOperations && (s.advancedBlendCoherentOperations = data.advancedBlendCoherentOperations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get advancedBlendCoherentOperations() {
        return this.#view.getUint32(16, LE);
    }
    set advancedBlendCoherentOperations(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceMultiDrawFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultiDrawFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultiDrawFeaturesEXT(new Uint8Array(VkPhysicalDeviceMultiDrawFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultiDrawFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.multiDraw && (s.multiDraw = data.multiDraw), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get multiDraw() {
        return this.#view.getUint32(16, LE);
    }
    set multiDraw(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(new Uint8Array(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.advancedBlendMaxColorAttachments && (s.advancedBlendMaxColorAttachments = data.advancedBlendMaxColorAttachments), void 0 !== data.advancedBlendIndependentBlend && (s.advancedBlendIndependentBlend = data.advancedBlendIndependentBlend), void 0 !== data.advancedBlendNonPremultipliedSrcColor && (s.advancedBlendNonPremultipliedSrcColor = data.advancedBlendNonPremultipliedSrcColor), void 0 !== data.advancedBlendNonPremultipliedDstColor && (s.advancedBlendNonPremultipliedDstColor = data.advancedBlendNonPremultipliedDstColor), void 0 !== data.advancedBlendCorrelatedOverlap && (s.advancedBlendCorrelatedOverlap = data.advancedBlendCorrelatedOverlap), void 0 !== data.advancedBlendAllOperations && (s.advancedBlendAllOperations = data.advancedBlendAllOperations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get advancedBlendMaxColorAttachments() {
        return this.#view.getUint32(16, LE);
    }
    set advancedBlendMaxColorAttachments(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get advancedBlendIndependentBlend() {
        return this.#view.getUint32(20, LE);
    }
    set advancedBlendIndependentBlend(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get advancedBlendNonPremultipliedSrcColor() {
        return this.#view.getUint32(24, LE);
    }
    set advancedBlendNonPremultipliedSrcColor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get advancedBlendNonPremultipliedDstColor() {
        return this.#view.getUint32(28, LE);
    }
    set advancedBlendNonPremultipliedDstColor(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get advancedBlendCorrelatedOverlap() {
        return this.#view.getUint32(32, LE);
    }
    set advancedBlendCorrelatedOverlap(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get advancedBlendAllOperations() {
        return this.#view.getUint32(36, LE);
    }
    set advancedBlendAllOperations(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineColorBlendAdvancedStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineColorBlendAdvancedStateCreateInfoEXT(new Uint8Array(VkPipelineColorBlendAdvancedStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineColorBlendAdvancedStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcPremultiplied && (s.srcPremultiplied = data.srcPremultiplied), void 0 !== data.dstPremultiplied && (s.dstPremultiplied = data.dstPremultiplied), void 0 !== data.blendOverlap && (s.blendOverlap = data.blendOverlap), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcPremultiplied() {
        return this.#view.getUint32(16, LE);
    }
    set srcPremultiplied(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstPremultiplied() {
        return this.#view.getUint32(20, LE);
    }
    set dstPremultiplied(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get blendOverlap() {
        return this.#view.getUint32(24, LE);
    }
    set blendOverlap(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceInlineUniformBlockFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceInlineUniformBlockFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceInlineUniformBlockFeatures(new Uint8Array(VkPhysicalDeviceInlineUniformBlockFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceInlineUniformBlockFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.inlineUniformBlock && (s.inlineUniformBlock = data.inlineUniformBlock), void 0 !== data.descriptorBindingInlineUniformBlockUpdateAfterBind && (s.descriptorBindingInlineUniformBlockUpdateAfterBind = data.descriptorBindingInlineUniformBlockUpdateAfterBind), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get inlineUniformBlock() {
        return this.#view.getUint32(16, LE);
    }
    set inlineUniformBlock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorBindingInlineUniformBlockUpdateAfterBind() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceInlineUniformBlockProperties {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceInlineUniformBlockProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceInlineUniformBlockProperties(new Uint8Array(VkPhysicalDeviceInlineUniformBlockProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceInlineUniformBlockProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxInlineUniformBlockSize && (s.maxInlineUniformBlockSize = data.maxInlineUniformBlockSize), void 0 !== data.maxPerStageDescriptorInlineUniformBlocks && (s.maxPerStageDescriptorInlineUniformBlocks = data.maxPerStageDescriptorInlineUniformBlocks), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks && (s.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxDescriptorSetInlineUniformBlocks && (s.maxDescriptorSetInlineUniformBlocks = data.maxDescriptorSetInlineUniformBlocks), void 0 !== data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks && (s.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxInlineUniformBlockSize() {
        return this.#view.getUint32(16, LE);
    }
    set maxInlineUniformBlockSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxPerStageDescriptorInlineUniformBlocks() {
        return this.#view.getUint32(20, LE);
    }
    set maxPerStageDescriptorInlineUniformBlocks(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(24, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxDescriptorSetInlineUniformBlocks() {
        return this.#view.getUint32(28, LE);
    }
    set maxDescriptorSetInlineUniformBlocks(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(32, LE);
    }
    set maxDescriptorSetUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkWriteDescriptorSetInlineUniformBlock {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWriteDescriptorSetInlineUniformBlock.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWriteDescriptorSetInlineUniformBlock(new Uint8Array(VkWriteDescriptorSetInlineUniformBlock.size));
    }
    static create(data) {
        let s = VkWriteDescriptorSetInlineUniformBlock.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dataSize && (s.dataSize = data.dataSize), void 0 !== data.pData && (s.pData = data.pData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dataSize() {
        return this.#view.getUint32(16, LE);
    }
    set dataSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorPoolInlineUniformBlockCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorPoolInlineUniformBlockCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorPoolInlineUniformBlockCreateInfo(new Uint8Array(VkDescriptorPoolInlineUniformBlockCreateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorPoolInlineUniformBlockCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxInlineUniformBlockBindings && (s.maxInlineUniformBlockBindings = data.maxInlineUniformBlockBindings), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxInlineUniformBlockBindings() {
        return this.#view.getUint32(16, LE);
    }
    set maxInlineUniformBlockBindings(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineCoverageModulationStateCreateInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCoverageModulationStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCoverageModulationStateCreateInfoNV(new Uint8Array(VkPipelineCoverageModulationStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineCoverageModulationStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.coverageModulationMode && (s.coverageModulationMode = data.coverageModulationMode), void 0 !== data.coverageModulationTableEnable && (s.coverageModulationTableEnable = data.coverageModulationTableEnable), void 0 !== data.coverageModulationTableCount && (s.coverageModulationTableCount = data.coverageModulationTableCount), void 0 !== data.pCoverageModulationTable && (s.pCoverageModulationTable = data.pCoverageModulationTable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageModulationMode() {
        return this.#view.getUint32(20, LE);
    }
    set coverageModulationMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get coverageModulationTableEnable() {
        return this.#view.getUint32(24, LE);
    }
    set coverageModulationTableEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get coverageModulationTableCount() {
        return this.#view.getUint32(28, LE);
    }
    set coverageModulationTableCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pCoverageModulationTable() {
        return this.#view.getBigUint64(32, LE);
    }
    set pCoverageModulationTable(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageFormatListCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageFormatListCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageFormatListCreateInfo(new Uint8Array(VkImageFormatListCreateInfo.size));
    }
    static create(data) {
        let s = VkImageFormatListCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.viewFormatCount && (s.viewFormatCount = data.viewFormatCount), void 0 !== data.pViewFormats && (s.pViewFormats = data.pViewFormats), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get viewFormatCount() {
        return this.#view.getUint32(16, LE);
    }
    set viewFormatCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pViewFormats() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewFormats(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkValidationCacheCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkValidationCacheCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkValidationCacheCreateInfoEXT(new Uint8Array(VkValidationCacheCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkValidationCacheCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.initialDataSize && (s.initialDataSize = data.initialDataSize), void 0 !== data.pInitialData && (s.pInitialData = data.pInitialData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialDataSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialDataSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pInitialData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInitialData(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkShaderModuleValidationCacheCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShaderModuleValidationCacheCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShaderModuleValidationCacheCreateInfoEXT(new Uint8Array(VkShaderModuleValidationCacheCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkShaderModuleValidationCacheCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.validationCache && (s.validationCache = data.validationCache), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get validationCache() {
        return this.#view.getBigUint64(16, LE);
    }
    set validationCache(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceMaintenance3Properties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMaintenance3Properties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMaintenance3Properties(new Uint8Array(VkPhysicalDeviceMaintenance3Properties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMaintenance3Properties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxPerSetDescriptors && (s.maxPerSetDescriptors = data.maxPerSetDescriptors), void 0 !== data.maxMemoryAllocationSize && (s.maxMemoryAllocationSize = data.maxMemoryAllocationSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxPerSetDescriptors() {
        return this.#view.getUint32(16, LE);
    }
    set maxPerSetDescriptors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxMemoryAllocationSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxMemoryAllocationSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceMaintenance4Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMaintenance4Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMaintenance4Features(new Uint8Array(VkPhysicalDeviceMaintenance4Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMaintenance4Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maintenance4 && (s.maintenance4 = data.maintenance4), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maintenance4() {
        return this.#view.getUint32(16, LE);
    }
    set maintenance4(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceMaintenance4Properties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMaintenance4Properties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMaintenance4Properties(new Uint8Array(VkPhysicalDeviceMaintenance4Properties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMaintenance4Properties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxBufferSize && (s.maxBufferSize = data.maxBufferSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxBufferSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxBufferSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDescriptorSetLayoutSupport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetLayoutSupport.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetLayoutSupport(new Uint8Array(VkDescriptorSetLayoutSupport.size));
    }
    static create(data) {
        let s = VkDescriptorSetLayoutSupport.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supported && (s.supported = data.supported), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supported() {
        return this.#view.getUint32(16, LE);
    }
    set supported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderDrawParametersFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderDrawParametersFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderDrawParametersFeatures(new Uint8Array(VkPhysicalDeviceShaderDrawParametersFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderDrawParametersFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderDrawParameters && (s.shaderDrawParameters = data.shaderDrawParameters), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderDrawParameters() {
        return this.#view.getUint32(16, LE);
    }
    set shaderDrawParameters(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderFloat16Int8Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderFloat16Int8Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderFloat16Int8Features(new Uint8Array(VkPhysicalDeviceShaderFloat16Int8Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderFloat16Int8Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderFloat16 && (s.shaderFloat16 = data.shaderFloat16), void 0 !== data.shaderInt8 && (s.shaderInt8 = data.shaderInt8), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderFloat16() {
        return this.#view.getUint32(16, LE);
    }
    set shaderFloat16(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderInt8() {
        return this.#view.getUint32(20, LE);
    }
    set shaderInt8(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceFloatControlsProperties {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFloatControlsProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFloatControlsProperties(new Uint8Array(VkPhysicalDeviceFloatControlsProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFloatControlsProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.denormBehaviorIndependence && (s.denormBehaviorIndependence = data.denormBehaviorIndependence), void 0 !== data.roundingModeIndependence && (s.roundingModeIndependence = data.roundingModeIndependence), void 0 !== data.shaderSignedZeroInfNanPreserveFloat16 && (s.shaderSignedZeroInfNanPreserveFloat16 = data.shaderSignedZeroInfNanPreserveFloat16), void 0 !== data.shaderSignedZeroInfNanPreserveFloat32 && (s.shaderSignedZeroInfNanPreserveFloat32 = data.shaderSignedZeroInfNanPreserveFloat32), void 0 !== data.shaderSignedZeroInfNanPreserveFloat64 && (s.shaderSignedZeroInfNanPreserveFloat64 = data.shaderSignedZeroInfNanPreserveFloat64), void 0 !== data.shaderDenormPreserveFloat16 && (s.shaderDenormPreserveFloat16 = data.shaderDenormPreserveFloat16), void 0 !== data.shaderDenormPreserveFloat32 && (s.shaderDenormPreserveFloat32 = data.shaderDenormPreserveFloat32), void 0 !== data.shaderDenormPreserveFloat64 && (s.shaderDenormPreserveFloat64 = data.shaderDenormPreserveFloat64), void 0 !== data.shaderDenormFlushToZeroFloat16 && (s.shaderDenormFlushToZeroFloat16 = data.shaderDenormFlushToZeroFloat16), void 0 !== data.shaderDenormFlushToZeroFloat32 && (s.shaderDenormFlushToZeroFloat32 = data.shaderDenormFlushToZeroFloat32), void 0 !== data.shaderDenormFlushToZeroFloat64 && (s.shaderDenormFlushToZeroFloat64 = data.shaderDenormFlushToZeroFloat64), void 0 !== data.shaderRoundingModeRTEFloat16 && (s.shaderRoundingModeRTEFloat16 = data.shaderRoundingModeRTEFloat16), void 0 !== data.shaderRoundingModeRTEFloat32 && (s.shaderRoundingModeRTEFloat32 = data.shaderRoundingModeRTEFloat32), void 0 !== data.shaderRoundingModeRTEFloat64 && (s.shaderRoundingModeRTEFloat64 = data.shaderRoundingModeRTEFloat64), void 0 !== data.shaderRoundingModeRTZFloat16 && (s.shaderRoundingModeRTZFloat16 = data.shaderRoundingModeRTZFloat16), void 0 !== data.shaderRoundingModeRTZFloat32 && (s.shaderRoundingModeRTZFloat32 = data.shaderRoundingModeRTZFloat32), void 0 !== data.shaderRoundingModeRTZFloat64 && (s.shaderRoundingModeRTZFloat64 = data.shaderRoundingModeRTZFloat64), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get denormBehaviorIndependence() {
        return this.#view.getUint32(16, LE);
    }
    set denormBehaviorIndependence(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get roundingModeIndependence() {
        return this.#view.getUint32(20, LE);
    }
    set roundingModeIndependence(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat16() {
        return this.#view.getUint32(24, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat32() {
        return this.#view.getUint32(28, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat32(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat64() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat64(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderDenormPreserveFloat16() {
        return this.#view.getUint32(36, LE);
    }
    set shaderDenormPreserveFloat16(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderDenormPreserveFloat32() {
        return this.#view.getUint32(40, LE);
    }
    set shaderDenormPreserveFloat32(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderDenormPreserveFloat64() {
        return this.#view.getUint32(44, LE);
    }
    set shaderDenormPreserveFloat64(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat16() {
        return this.#view.getUint32(48, LE);
    }
    set shaderDenormFlushToZeroFloat16(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat32() {
        return this.#view.getUint32(52, LE);
    }
    set shaderDenormFlushToZeroFloat32(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat64() {
        return this.#view.getUint32(56, LE);
    }
    set shaderDenormFlushToZeroFloat64(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat16() {
        return this.#view.getUint32(60, LE);
    }
    set shaderRoundingModeRTEFloat16(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat32() {
        return this.#view.getUint32(64, LE);
    }
    set shaderRoundingModeRTEFloat32(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat64() {
        return this.#view.getUint32(68, LE);
    }
    set shaderRoundingModeRTEFloat64(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat16() {
        return this.#view.getUint32(72, LE);
    }
    set shaderRoundingModeRTZFloat16(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat32() {
        return this.#view.getUint32(76, LE);
    }
    set shaderRoundingModeRTZFloat32(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat64() {
        return this.#view.getUint32(80, LE);
    }
    set shaderRoundingModeRTZFloat64(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class VkPhysicalDeviceHostQueryResetFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceHostQueryResetFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceHostQueryResetFeatures(new Uint8Array(VkPhysicalDeviceHostQueryResetFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceHostQueryResetFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.hostQueryReset && (s.hostQueryReset = data.hostQueryReset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get hostQueryReset() {
        return this.#view.getUint32(16, LE);
    }
    set hostQueryReset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkNativeBufferUsage2ANDROID {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkNativeBufferUsage2ANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkNativeBufferUsage2ANDROID(new Uint8Array(VkNativeBufferUsage2ANDROID.size));
    }
    static create(data) {
        let s = VkNativeBufferUsage2ANDROID.alloc();
        return void 0 !== data.consumer && (s.consumer = data.consumer), void 0 !== data.producer && (s.producer = data.producer), s;
    }
    get consumer() {
        return this.#view.getBigUint64(0, LE);
    }
    set consumer(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get producer() {
        return this.#view.getBigUint64(8, LE);
    }
    set producer(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkNativeBufferANDROID {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkNativeBufferANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkNativeBufferANDROID(new Uint8Array(VkNativeBufferANDROID.size));
    }
    static create(data) {
        let s = VkNativeBufferANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handle && (s.handle = data.handle), void 0 !== data.stride && (s.stride = data.stride), void 0 !== data.format && (s.format = data.format), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.usage2 && (s.usage2 = data.usage2), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handle() {
        return this.#view.getBigUint64(16, LE);
    }
    set handle(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get stride() {
        return this.#view.getInt32(24, LE);
    }
    set stride(value) {
        this.#view.setInt32(24, Number(value), LE);
    }
    get format() {
        return this.#view.getInt32(28, LE);
    }
    set format(value) {
        this.#view.setInt32(28, Number(value), LE);
    }
    get usage() {
        return this.#view.getInt32(32, LE);
    }
    set usage(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
    get usage2() {
        return new VkNativeBufferUsage2ANDROID(this.#data.subarray(40, 40 + VkNativeBufferUsage2ANDROID.size));
    }
    set usage2(value) {
        if (value[BUFFER].byteLength < VkNativeBufferUsage2ANDROID.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
}
export class VkSwapchainImageCreateInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSwapchainImageCreateInfoANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSwapchainImageCreateInfoANDROID(new Uint8Array(VkSwapchainImageCreateInfoANDROID.size));
    }
    static create(data) {
        let s = VkSwapchainImageCreateInfoANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.usage && (s.usage = data.usage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePresentationPropertiesANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePresentationPropertiesANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePresentationPropertiesANDROID(new Uint8Array(VkPhysicalDevicePresentationPropertiesANDROID.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePresentationPropertiesANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sharedImage && (s.sharedImage = data.sharedImage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sharedImage() {
        return this.#view.getUint32(16, LE);
    }
    set sharedImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkShaderResourceUsageAMD {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShaderResourceUsageAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShaderResourceUsageAMD(new Uint8Array(VkShaderResourceUsageAMD.size));
    }
    static create(data) {
        let s = VkShaderResourceUsageAMD.alloc();
        return void 0 !== data.numUsedVgprs && (s.numUsedVgprs = data.numUsedVgprs), void 0 !== data.numUsedSgprs && (s.numUsedSgprs = data.numUsedSgprs), void 0 !== data.ldsSizePerLocalWorkGroup && (s.ldsSizePerLocalWorkGroup = data.ldsSizePerLocalWorkGroup), void 0 !== data.ldsUsageSizeInBytes && (s.ldsUsageSizeInBytes = data.ldsUsageSizeInBytes), void 0 !== data.scratchMemUsageInBytes && (s.scratchMemUsageInBytes = data.scratchMemUsageInBytes), s;
    }
    get numUsedVgprs() {
        return this.#view.getUint32(0, LE);
    }
    set numUsedVgprs(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get numUsedSgprs() {
        return this.#view.getUint32(4, LE);
    }
    set numUsedSgprs(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get ldsSizePerLocalWorkGroup() {
        return this.#view.getUint32(8, LE);
    }
    set ldsSizePerLocalWorkGroup(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get ldsUsageSizeInBytes() {
        return this.#view.getBigUint64(16, LE);
    }
    set ldsUsageSizeInBytes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get scratchMemUsageInBytes() {
        return this.#view.getBigUint64(24, LE);
    }
    set scratchMemUsageInBytes(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkShaderStatisticsInfoAMD {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShaderStatisticsInfoAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShaderStatisticsInfoAMD(new Uint8Array(VkShaderStatisticsInfoAMD.size));
    }
    static create(data) {
        let s = VkShaderStatisticsInfoAMD.alloc();
        return void 0 !== data.shaderStageMask && (s.shaderStageMask = data.shaderStageMask), void 0 !== data.resourceUsage && (s.resourceUsage = data.resourceUsage), void 0 !== data.numPhysicalVgprs && (s.numPhysicalVgprs = data.numPhysicalVgprs), void 0 !== data.numPhysicalSgprs && (s.numPhysicalSgprs = data.numPhysicalSgprs), void 0 !== data.numAvailableVgprs && (s.numAvailableVgprs = data.numAvailableVgprs), void 0 !== data.numAvailableSgprs && (s.numAvailableSgprs = data.numAvailableSgprs), void 0 !== data.computeWorkGroupSize && (s.computeWorkGroupSize = data.computeWorkGroupSize), s;
    }
    get shaderStageMask() {
        return this.#view.getUint32(0, LE);
    }
    set shaderStageMask(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get resourceUsage() {
        return new VkShaderResourceUsageAMD(this.#data.subarray(4, 4 + VkShaderResourceUsageAMD.size));
    }
    set resourceUsage(value) {
        if (value[BUFFER].byteLength < VkShaderResourceUsageAMD.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get numPhysicalVgprs() {
        return this.#view.getUint32(36, LE);
    }
    set numPhysicalVgprs(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get numPhysicalSgprs() {
        return this.#view.getUint32(40, LE);
    }
    set numPhysicalSgprs(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get numAvailableVgprs() {
        return this.#view.getUint32(44, LE);
    }
    set numAvailableVgprs(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get numAvailableSgprs() {
        return this.#view.getUint32(48, LE);
    }
    set numAvailableSgprs(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get computeWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(52 + 4 * i, LE));
        return result;
    }
    set computeWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(52 + 4 * i, Number(value[i]), LE);
    }
}
export class VkDeviceQueueGlobalPriorityCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceQueueGlobalPriorityCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceQueueGlobalPriorityCreateInfoKHR(new Uint8Array(VkDeviceQueueGlobalPriorityCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkDeviceQueueGlobalPriorityCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.globalPriority && (s.globalPriority = data.globalPriority), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get globalPriority() {
        return this.#view.getUint32(16, LE);
    }
    set globalPriority(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(new Uint8Array(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.globalPriorityQuery && (s.globalPriorityQuery = data.globalPriorityQuery), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get globalPriorityQuery() {
        return this.#view.getUint32(16, LE);
    }
    set globalPriorityQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkQueueFamilyGlobalPriorityPropertiesKHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyGlobalPriorityPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyGlobalPriorityPropertiesKHR(new Uint8Array(VkQueueFamilyGlobalPriorityPropertiesKHR.size));
    }
    static create(data) {
        let s = VkQueueFamilyGlobalPriorityPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.priorityCount && (s.priorityCount = data.priorityCount), void 0 !== data.priorities && (s.priorities = data.priorities), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get priorityCount() {
        return this.#view.getUint32(16, LE);
    }
    set priorityCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get priorities() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint32(20 + 4 * i, LE));
        return result;
    }
    set priorities(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(20 + 4 * i, Number(value[i]), LE);
    }
}
export class VkDebugUtilsObjectNameInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugUtilsObjectNameInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugUtilsObjectNameInfoEXT(new Uint8Array(VkDebugUtilsObjectNameInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugUtilsObjectNameInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.objectType && (s.objectType = data.objectType), void 0 !== data.objectHandle && (s.objectHandle = data.objectHandle), void 0 !== data.pObjectName && (s.pObjectName = data.pObjectName), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pObjectName() {
        return this.#view.getBigUint64(32, LE);
    }
    set pObjectName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDebugUtilsObjectTagInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugUtilsObjectTagInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugUtilsObjectTagInfoEXT(new Uint8Array(VkDebugUtilsObjectTagInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugUtilsObjectTagInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.objectType && (s.objectType = data.objectType), void 0 !== data.objectHandle && (s.objectHandle = data.objectHandle), void 0 !== data.tagName && (s.tagName = data.tagName), void 0 !== data.tagSize && (s.tagSize = data.tagSize), void 0 !== data.pTag && (s.pTag = data.pTag), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(16, LE);
    }
    set objectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(24, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get tagName() {
        return this.#view.getBigUint64(32, LE);
    }
    set tagName(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get tagSize() {
        return this.#view.getBigUint64(40, LE);
    }
    set tagSize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pTag() {
        return this.#view.getBigUint64(48, LE);
    }
    set pTag(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkDebugUtilsLabelEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugUtilsLabelEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugUtilsLabelEXT(new Uint8Array(VkDebugUtilsLabelEXT.size));
    }
    static create(data) {
        let s = VkDebugUtilsLabelEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pLabelName && (s.pLabelName = data.pLabelName), void 0 !== data.color && (s.color = data.color), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pLabelName() {
        return this.#view.getBigUint64(16, LE);
    }
    set pLabelName(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get color() {
        let result = [];
        for(let i = 0; i < 4; i++)result.push(this.#view.getFloat32(24 + 4 * i, LE));
        return result;
    }
    set color(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(24 + 4 * i, Number(value[i]), LE);
    }
}
export class VkDebugUtilsMessengerCreateInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugUtilsMessengerCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugUtilsMessengerCreateInfoEXT(new Uint8Array(VkDebugUtilsMessengerCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkDebugUtilsMessengerCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.messageSeverity && (s.messageSeverity = data.messageSeverity), void 0 !== data.messageType && (s.messageType = data.messageType), void 0 !== data.pfnUserCallback && (s.pfnUserCallback = data.pfnUserCallback), void 0 !== data.pUserData && (s.pUserData = data.pUserData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get messageSeverity() {
        return this.#view.getUint32(20, LE);
    }
    set messageSeverity(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get messageType() {
        return this.#view.getUint32(24, LE);
    }
    set messageType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pfnUserCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnUserCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(40, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkDebugUtilsMessengerCallbackDataEXT {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDebugUtilsMessengerCallbackDataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDebugUtilsMessengerCallbackDataEXT(new Uint8Array(VkDebugUtilsMessengerCallbackDataEXT.size));
    }
    static create(data) {
        let s = VkDebugUtilsMessengerCallbackDataEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pMessageIdName && (s.pMessageIdName = data.pMessageIdName), void 0 !== data.messageIdNumber && (s.messageIdNumber = data.messageIdNumber), void 0 !== data.pMessage && (s.pMessage = data.pMessage), void 0 !== data.queueLabelCount && (s.queueLabelCount = data.queueLabelCount), void 0 !== data.pQueueLabels && (s.pQueueLabels = data.pQueueLabels), void 0 !== data.cmdBufLabelCount && (s.cmdBufLabelCount = data.cmdBufLabelCount), void 0 !== data.pCmdBufLabels && (s.pCmdBufLabels = data.pCmdBufLabels), void 0 !== data.objectCount && (s.objectCount = data.objectCount), void 0 !== data.pObjects && (s.pObjects = data.pObjects), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pMessageIdName() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMessageIdName(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get messageIdNumber() {
        return this.#view.getInt32(32, LE);
    }
    set messageIdNumber(value) {
        this.#view.setInt32(32, Number(value), LE);
    }
    get pMessage() {
        return this.#view.getBigUint64(40, LE);
    }
    set pMessage(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get queueLabelCount() {
        return this.#view.getUint32(48, LE);
    }
    set queueLabelCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pQueueLabels() {
        return this.#view.getBigUint64(56, LE);
    }
    set pQueueLabels(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get cmdBufLabelCount() {
        return this.#view.getUint32(64, LE);
    }
    set cmdBufLabelCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pCmdBufLabels() {
        return this.#view.getBigUint64(72, LE);
    }
    set pCmdBufLabels(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get objectCount() {
        return this.#view.getUint32(80, LE);
    }
    set objectCount(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get pObjects() {
        return this.#view.getBigUint64(88, LE);
    }
    set pObjects(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(new Uint8Array(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceMemoryReport && (s.deviceMemoryReport = data.deviceMemoryReport), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceMemoryReport() {
        return this.#view.getUint32(16, LE);
    }
    set deviceMemoryReport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceDeviceMemoryReportCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceDeviceMemoryReportCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceDeviceMemoryReportCreateInfoEXT(new Uint8Array(VkDeviceDeviceMemoryReportCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkDeviceDeviceMemoryReportCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pfnUserCallback && (s.pfnUserCallback = data.pfnUserCallback), void 0 !== data.pUserData && (s.pUserData = data.pUserData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pfnUserCallback() {
        throw new Error('Unknown type: "function"');
    }
    set pfnUserCallback(value) {
        throw new Error('Unknown type: "function"');
    }
    get pUserData() {
        return this.#view.getBigUint64(32, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDeviceMemoryReportCallbackDataEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceMemoryReportCallbackDataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceMemoryReportCallbackDataEXT(new Uint8Array(VkDeviceMemoryReportCallbackDataEXT.size));
    }
    static create(data) {
        let s = VkDeviceMemoryReportCallbackDataEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.type && (s.type = data.type), void 0 !== data.memoryObjectId && (s.memoryObjectId = data.memoryObjectId), void 0 !== data.size && (s.size = data.size), void 0 !== data.objectType && (s.objectType = data.objectType), void 0 !== data.objectHandle && (s.objectHandle = data.objectHandle), void 0 !== data.heapIndex && (s.heapIndex = data.heapIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get type() {
        return this.#view.getUint32(20, LE);
    }
    set type(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get memoryObjectId() {
        return this.#view.getBigUint64(24, LE);
    }
    set memoryObjectId(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get objectType() {
        return this.#view.getUint32(40, LE);
    }
    set objectType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get objectHandle() {
        return this.#view.getBigUint64(48, LE);
    }
    set objectHandle(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get heapIndex() {
        return this.#view.getUint32(56, LE);
    }
    set heapIndex(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkImportMemoryHostPointerInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryHostPointerInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryHostPointerInfoEXT(new Uint8Array(VkImportMemoryHostPointerInfoEXT.size));
    }
    static create(data) {
        let s = VkImportMemoryHostPointerInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.handleType && (s.handleType = data.handleType), void 0 !== data.pHostPointer && (s.pHostPointer = data.pHostPointer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(16, LE);
    }
    set handleType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pHostPointer() {
        return this.#view.getBigUint64(24, LE);
    }
    set pHostPointer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkMemoryHostPointerPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryHostPointerPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryHostPointerPropertiesEXT(new Uint8Array(VkMemoryHostPointerPropertiesEXT.size));
    }
    static create(data) {
        let s = VkMemoryHostPointerPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalMemoryHostPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalMemoryHostPropertiesEXT(new Uint8Array(VkPhysicalDeviceExternalMemoryHostPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalMemoryHostPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minImportedHostPointerAlignment && (s.minImportedHostPointerAlignment = data.minImportedHostPointerAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minImportedHostPointerAlignment() {
        return this.#view.getBigUint64(16, LE);
    }
    set minImportedHostPointerAlignment(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceConservativeRasterizationPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceConservativeRasterizationPropertiesEXT(new Uint8Array(VkPhysicalDeviceConservativeRasterizationPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceConservativeRasterizationPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.primitiveOverestimationSize && (s.primitiveOverestimationSize = data.primitiveOverestimationSize), void 0 !== data.maxExtraPrimitiveOverestimationSize && (s.maxExtraPrimitiveOverestimationSize = data.maxExtraPrimitiveOverestimationSize), void 0 !== data.extraPrimitiveOverestimationSizeGranularity && (s.extraPrimitiveOverestimationSizeGranularity = data.extraPrimitiveOverestimationSizeGranularity), void 0 !== data.primitiveUnderestimation && (s.primitiveUnderestimation = data.primitiveUnderestimation), void 0 !== data.conservativePointAndLineRasterization && (s.conservativePointAndLineRasterization = data.conservativePointAndLineRasterization), void 0 !== data.degenerateTrianglesRasterized && (s.degenerateTrianglesRasterized = data.degenerateTrianglesRasterized), void 0 !== data.degenerateLinesRasterized && (s.degenerateLinesRasterized = data.degenerateLinesRasterized), void 0 !== data.fullyCoveredFragmentShaderInputVariable && (s.fullyCoveredFragmentShaderInputVariable = data.fullyCoveredFragmentShaderInputVariable), void 0 !== data.conservativeRasterizationPostDepthCoverage && (s.conservativeRasterizationPostDepthCoverage = data.conservativeRasterizationPostDepthCoverage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get primitiveOverestimationSize() {
        return this.#view.getFloat32(16, LE);
    }
    set primitiveOverestimationSize(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxExtraPrimitiveOverestimationSize() {
        return this.#view.getFloat32(20, LE);
    }
    set maxExtraPrimitiveOverestimationSize(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
    get extraPrimitiveOverestimationSizeGranularity() {
        return this.#view.getFloat32(24, LE);
    }
    set extraPrimitiveOverestimationSizeGranularity(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
    get primitiveUnderestimation() {
        return this.#view.getUint32(28, LE);
    }
    set primitiveUnderestimation(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get conservativePointAndLineRasterization() {
        return this.#view.getUint32(32, LE);
    }
    set conservativePointAndLineRasterization(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get degenerateTrianglesRasterized() {
        return this.#view.getUint32(36, LE);
    }
    set degenerateTrianglesRasterized(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get degenerateLinesRasterized() {
        return this.#view.getUint32(40, LE);
    }
    set degenerateLinesRasterized(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get fullyCoveredFragmentShaderInputVariable() {
        return this.#view.getUint32(44, LE);
    }
    set fullyCoveredFragmentShaderInputVariable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get conservativeRasterizationPostDepthCoverage() {
        return this.#view.getUint32(48, LE);
    }
    set conservativeRasterizationPostDepthCoverage(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkCalibratedTimestampInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCalibratedTimestampInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCalibratedTimestampInfoEXT(new Uint8Array(VkCalibratedTimestampInfoEXT.size));
    }
    static create(data) {
        let s = VkCalibratedTimestampInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.timeDomain && (s.timeDomain = data.timeDomain), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get timeDomain() {
        return this.#view.getUint32(16, LE);
    }
    set timeDomain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderCorePropertiesAMD {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderCorePropertiesAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderCorePropertiesAMD(new Uint8Array(VkPhysicalDeviceShaderCorePropertiesAMD.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderCorePropertiesAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderEngineCount && (s.shaderEngineCount = data.shaderEngineCount), void 0 !== data.shaderArraysPerEngineCount && (s.shaderArraysPerEngineCount = data.shaderArraysPerEngineCount), void 0 !== data.computeUnitsPerShaderArray && (s.computeUnitsPerShaderArray = data.computeUnitsPerShaderArray), void 0 !== data.simdPerComputeUnit && (s.simdPerComputeUnit = data.simdPerComputeUnit), void 0 !== data.wavefrontsPerSimd && (s.wavefrontsPerSimd = data.wavefrontsPerSimd), void 0 !== data.wavefrontSize && (s.wavefrontSize = data.wavefrontSize), void 0 !== data.sgprsPerSimd && (s.sgprsPerSimd = data.sgprsPerSimd), void 0 !== data.minSgprAllocation && (s.minSgprAllocation = data.minSgprAllocation), void 0 !== data.maxSgprAllocation && (s.maxSgprAllocation = data.maxSgprAllocation), void 0 !== data.sgprAllocationGranularity && (s.sgprAllocationGranularity = data.sgprAllocationGranularity), void 0 !== data.vgprsPerSimd && (s.vgprsPerSimd = data.vgprsPerSimd), void 0 !== data.minVgprAllocation && (s.minVgprAllocation = data.minVgprAllocation), void 0 !== data.maxVgprAllocation && (s.maxVgprAllocation = data.maxVgprAllocation), void 0 !== data.vgprAllocationGranularity && (s.vgprAllocationGranularity = data.vgprAllocationGranularity), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderEngineCount() {
        return this.#view.getUint32(16, LE);
    }
    set shaderEngineCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderArraysPerEngineCount() {
        return this.#view.getUint32(20, LE);
    }
    set shaderArraysPerEngineCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get computeUnitsPerShaderArray() {
        return this.#view.getUint32(24, LE);
    }
    set computeUnitsPerShaderArray(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get simdPerComputeUnit() {
        return this.#view.getUint32(28, LE);
    }
    set simdPerComputeUnit(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get wavefrontsPerSimd() {
        return this.#view.getUint32(32, LE);
    }
    set wavefrontsPerSimd(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get wavefrontSize() {
        return this.#view.getUint32(36, LE);
    }
    set wavefrontSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get sgprsPerSimd() {
        return this.#view.getUint32(40, LE);
    }
    set sgprsPerSimd(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minSgprAllocation() {
        return this.#view.getUint32(44, LE);
    }
    set minSgprAllocation(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxSgprAllocation() {
        return this.#view.getUint32(48, LE);
    }
    set maxSgprAllocation(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get sgprAllocationGranularity() {
        return this.#view.getUint32(52, LE);
    }
    set sgprAllocationGranularity(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get vgprsPerSimd() {
        return this.#view.getUint32(56, LE);
    }
    set vgprsPerSimd(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get minVgprAllocation() {
        return this.#view.getUint32(60, LE);
    }
    set minVgprAllocation(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxVgprAllocation() {
        return this.#view.getUint32(64, LE);
    }
    set maxVgprAllocation(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get vgprAllocationGranularity() {
        return this.#view.getUint32(68, LE);
    }
    set vgprAllocationGranularity(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderCoreProperties2AMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderCoreProperties2AMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderCoreProperties2AMD(new Uint8Array(VkPhysicalDeviceShaderCoreProperties2AMD.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderCoreProperties2AMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderCoreFeatures && (s.shaderCoreFeatures = data.shaderCoreFeatures), void 0 !== data.activeComputeUnitCount && (s.activeComputeUnitCount = data.activeComputeUnitCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderCoreFeatures() {
        return this.#view.getUint32(16, LE);
    }
    set shaderCoreFeatures(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get activeComputeUnitCount() {
        return this.#view.getUint32(20, LE);
    }
    set activeComputeUnitCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPipelineRasterizationConservativeStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationConservativeStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationConservativeStateCreateInfoEXT(new Uint8Array(VkPipelineRasterizationConservativeStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationConservativeStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.conservativeRasterizationMode && (s.conservativeRasterizationMode = data.conservativeRasterizationMode), void 0 !== data.extraPrimitiveOverestimationSize && (s.extraPrimitiveOverestimationSize = data.extraPrimitiveOverestimationSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get conservativeRasterizationMode() {
        return this.#view.getUint32(20, LE);
    }
    set conservativeRasterizationMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extraPrimitiveOverestimationSize() {
        return this.#view.getFloat32(24, LE);
    }
    set extraPrimitiveOverestimationSize(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorIndexingFeatures {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorIndexingFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorIndexingFeatures(new Uint8Array(VkPhysicalDeviceDescriptorIndexingFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorIndexingFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderInputAttachmentArrayDynamicIndexing && (s.shaderInputAttachmentArrayDynamicIndexing = data.shaderInputAttachmentArrayDynamicIndexing), void 0 !== data.shaderUniformTexelBufferArrayDynamicIndexing && (s.shaderUniformTexelBufferArrayDynamicIndexing = data.shaderUniformTexelBufferArrayDynamicIndexing), void 0 !== data.shaderStorageTexelBufferArrayDynamicIndexing && (s.shaderStorageTexelBufferArrayDynamicIndexing = data.shaderStorageTexelBufferArrayDynamicIndexing), void 0 !== data.shaderUniformBufferArrayNonUniformIndexing && (s.shaderUniformBufferArrayNonUniformIndexing = data.shaderUniformBufferArrayNonUniformIndexing), void 0 !== data.shaderSampledImageArrayNonUniformIndexing && (s.shaderSampledImageArrayNonUniformIndexing = data.shaderSampledImageArrayNonUniformIndexing), void 0 !== data.shaderStorageBufferArrayNonUniformIndexing && (s.shaderStorageBufferArrayNonUniformIndexing = data.shaderStorageBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageImageArrayNonUniformIndexing && (s.shaderStorageImageArrayNonUniformIndexing = data.shaderStorageImageArrayNonUniformIndexing), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexing && (s.shaderInputAttachmentArrayNonUniformIndexing = data.shaderInputAttachmentArrayNonUniformIndexing), void 0 !== data.shaderUniformTexelBufferArrayNonUniformIndexing && (s.shaderUniformTexelBufferArrayNonUniformIndexing = data.shaderUniformTexelBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageTexelBufferArrayNonUniformIndexing && (s.shaderStorageTexelBufferArrayNonUniformIndexing = data.shaderStorageTexelBufferArrayNonUniformIndexing), void 0 !== data.descriptorBindingUniformBufferUpdateAfterBind && (s.descriptorBindingUniformBufferUpdateAfterBind = data.descriptorBindingUniformBufferUpdateAfterBind), void 0 !== data.descriptorBindingSampledImageUpdateAfterBind && (s.descriptorBindingSampledImageUpdateAfterBind = data.descriptorBindingSampledImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageImageUpdateAfterBind && (s.descriptorBindingStorageImageUpdateAfterBind = data.descriptorBindingStorageImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageBufferUpdateAfterBind && (s.descriptorBindingStorageBufferUpdateAfterBind = data.descriptorBindingStorageBufferUpdateAfterBind), void 0 !== data.descriptorBindingUniformTexelBufferUpdateAfterBind && (s.descriptorBindingUniformTexelBufferUpdateAfterBind = data.descriptorBindingUniformTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingStorageTexelBufferUpdateAfterBind && (s.descriptorBindingStorageTexelBufferUpdateAfterBind = data.descriptorBindingStorageTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingUpdateUnusedWhilePending && (s.descriptorBindingUpdateUnusedWhilePending = data.descriptorBindingUpdateUnusedWhilePending), void 0 !== data.descriptorBindingPartiallyBound && (s.descriptorBindingPartiallyBound = data.descriptorBindingPartiallyBound), void 0 !== data.descriptorBindingVariableDescriptorCount && (s.descriptorBindingVariableDescriptorCount = data.descriptorBindingVariableDescriptorCount), void 0 !== data.runtimeDescriptorArray && (s.runtimeDescriptorArray = data.runtimeDescriptorArray), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderInputAttachmentArrayDynamicIndexing() {
        return this.#view.getUint32(16, LE);
    }
    set shaderInputAttachmentArrayDynamicIndexing(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(20, LE);
    }
    set shaderUniformTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(24, LE);
    }
    set shaderStorageTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(28, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexing() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSampledImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(36, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexing() {
        return this.#view.getUint32(40, LE);
    }
    set shaderStorageImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexing() {
        return this.#view.getUint32(44, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexing(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(48, LE);
    }
    set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(52, LE);
    }
    set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get descriptorBindingUniformBufferUpdateAfterBind() {
        return this.#view.getUint32(56, LE);
    }
    set descriptorBindingUniformBufferUpdateAfterBind(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get descriptorBindingSampledImageUpdateAfterBind() {
        return this.#view.getUint32(60, LE);
    }
    set descriptorBindingSampledImageUpdateAfterBind(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get descriptorBindingStorageImageUpdateAfterBind() {
        return this.#view.getUint32(64, LE);
    }
    set descriptorBindingStorageImageUpdateAfterBind(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get descriptorBindingStorageBufferUpdateAfterBind() {
        return this.#view.getUint32(68, LE);
    }
    set descriptorBindingStorageBufferUpdateAfterBind(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get descriptorBindingUniformTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(72, LE);
    }
    set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get descriptorBindingStorageTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(76, LE);
    }
    set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get descriptorBindingUpdateUnusedWhilePending() {
        return this.#view.getUint32(80, LE);
    }
    set descriptorBindingUpdateUnusedWhilePending(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get descriptorBindingPartiallyBound() {
        return this.#view.getUint32(84, LE);
    }
    set descriptorBindingPartiallyBound(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get descriptorBindingVariableDescriptorCount() {
        return this.#view.getUint32(88, LE);
    }
    set descriptorBindingVariableDescriptorCount(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get runtimeDescriptorArray() {
        return this.#view.getUint32(92, LE);
    }
    set runtimeDescriptorArray(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorIndexingProperties {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorIndexingProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorIndexingProperties(new Uint8Array(VkPhysicalDeviceDescriptorIndexingProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorIndexingProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxUpdateAfterBindDescriptorsInAllPools && (s.maxUpdateAfterBindDescriptorsInAllPools = data.maxUpdateAfterBindDescriptorsInAllPools), void 0 !== data.shaderUniformBufferArrayNonUniformIndexingNative && (s.shaderUniformBufferArrayNonUniformIndexingNative = data.shaderUniformBufferArrayNonUniformIndexingNative), void 0 !== data.shaderSampledImageArrayNonUniformIndexingNative && (s.shaderSampledImageArrayNonUniformIndexingNative = data.shaderSampledImageArrayNonUniformIndexingNative), void 0 !== data.shaderStorageBufferArrayNonUniformIndexingNative && (s.shaderStorageBufferArrayNonUniformIndexingNative = data.shaderStorageBufferArrayNonUniformIndexingNative), void 0 !== data.shaderStorageImageArrayNonUniformIndexingNative && (s.shaderStorageImageArrayNonUniformIndexingNative = data.shaderStorageImageArrayNonUniformIndexingNative), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexingNative && (s.shaderInputAttachmentArrayNonUniformIndexingNative = data.shaderInputAttachmentArrayNonUniformIndexingNative), void 0 !== data.robustBufferAccessUpdateAfterBind && (s.robustBufferAccessUpdateAfterBind = data.robustBufferAccessUpdateAfterBind), void 0 !== data.quadDivergentImplicitLod && (s.quadDivergentImplicitLod = data.quadDivergentImplicitLod), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSamplers && (s.maxPerStageDescriptorUpdateAfterBindSamplers = data.maxPerStageDescriptorUpdateAfterBindSamplers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindUniformBuffers && (s.maxPerStageDescriptorUpdateAfterBindUniformBuffers = data.maxPerStageDescriptorUpdateAfterBindUniformBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageBuffers && (s.maxPerStageDescriptorUpdateAfterBindStorageBuffers = data.maxPerStageDescriptorUpdateAfterBindStorageBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSampledImages && (s.maxPerStageDescriptorUpdateAfterBindSampledImages = data.maxPerStageDescriptorUpdateAfterBindSampledImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageImages && (s.maxPerStageDescriptorUpdateAfterBindStorageImages = data.maxPerStageDescriptorUpdateAfterBindStorageImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInputAttachments && (s.maxPerStageDescriptorUpdateAfterBindInputAttachments = data.maxPerStageDescriptorUpdateAfterBindInputAttachments), void 0 !== data.maxPerStageUpdateAfterBindResources && (s.maxPerStageUpdateAfterBindResources = data.maxPerStageUpdateAfterBindResources), void 0 !== data.maxDescriptorSetUpdateAfterBindSamplers && (s.maxDescriptorSetUpdateAfterBindSamplers = data.maxDescriptorSetUpdateAfterBindSamplers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffers && (s.maxDescriptorSetUpdateAfterBindUniformBuffers = data.maxDescriptorSetUpdateAfterBindUniformBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic && (s.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffers && (s.maxDescriptorSetUpdateAfterBindStorageBuffers = data.maxDescriptorSetUpdateAfterBindStorageBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic && (s.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindSampledImages && (s.maxDescriptorSetUpdateAfterBindSampledImages = data.maxDescriptorSetUpdateAfterBindSampledImages), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageImages && (s.maxDescriptorSetUpdateAfterBindStorageImages = data.maxDescriptorSetUpdateAfterBindStorageImages), void 0 !== data.maxDescriptorSetUpdateAfterBindInputAttachments && (s.maxDescriptorSetUpdateAfterBindInputAttachments = data.maxDescriptorSetUpdateAfterBindInputAttachments), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxUpdateAfterBindDescriptorsInAllPools() {
        return this.#view.getUint32(16, LE);
    }
    set maxUpdateAfterBindDescriptorsInAllPools(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(20, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(24, LE);
    }
    set shaderSampledImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(28, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(32, LE);
    }
    set shaderStorageImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexingNative() {
        return this.#view.getUint32(36, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get robustBufferAccessUpdateAfterBind() {
        return this.#view.getUint32(40, LE);
    }
    set robustBufferAccessUpdateAfterBind(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get quadDivergentImplicitLod() {
        return this.#view.getUint32(44, LE);
    }
    set quadDivergentImplicitLod(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSamplers() {
        return this.#view.getUint32(48, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSamplers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(52, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(56, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSampledImages() {
        return this.#view.getUint32(60, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageImages() {
        return this.#view.getUint32(64, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(68, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxPerStageUpdateAfterBindResources() {
        return this.#view.getUint32(72, LE);
    }
    set maxPerStageUpdateAfterBindResources(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSamplers() {
        return this.#view.getUint32(76, LE);
    }
    set maxDescriptorSetUpdateAfterBindSamplers(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(80, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
        return this.#view.getUint32(84, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(88, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
        return this.#view.getUint32(92, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSampledImages() {
        return this.#view.getUint32(96, LE);
    }
    set maxDescriptorSetUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageImages() {
        return this.#view.getUint32(100, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(104, LE);
    }
    set maxDescriptorSetUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
}
export class VkDescriptorSetLayoutBindingFlagsCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetLayoutBindingFlagsCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetLayoutBindingFlagsCreateInfo(new Uint8Array(VkDescriptorSetLayoutBindingFlagsCreateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorSetLayoutBindingFlagsCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.bindingCount && (s.bindingCount = data.bindingCount), void 0 !== data.pBindingFlags && (s.pBindingFlags = data.pBindingFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get bindingCount() {
        return this.#view.getUint32(16, LE);
    }
    set bindingCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pBindingFlags() {
        return this.#view.getBigUint64(24, LE);
    }
    set pBindingFlags(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorSetVariableDescriptorCountAllocateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetVariableDescriptorCountAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetVariableDescriptorCountAllocateInfo(new Uint8Array(VkDescriptorSetVariableDescriptorCountAllocateInfo.size));
    }
    static create(data) {
        let s = VkDescriptorSetVariableDescriptorCountAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorSetCount && (s.descriptorSetCount = data.descriptorSetCount), void 0 !== data.pDescriptorCounts && (s.pDescriptorCounts = data.pDescriptorCounts), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorSetCount() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorSetCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDescriptorCounts() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDescriptorCounts(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDescriptorSetVariableDescriptorCountLayoutSupport {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetVariableDescriptorCountLayoutSupport.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetVariableDescriptorCountLayoutSupport(new Uint8Array(VkDescriptorSetVariableDescriptorCountLayoutSupport.size));
    }
    static create(data) {
        let s = VkDescriptorSetVariableDescriptorCountLayoutSupport.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxVariableDescriptorCount && (s.maxVariableDescriptorCount = data.maxVariableDescriptorCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxVariableDescriptorCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxVariableDescriptorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkAttachmentDescription2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentDescription2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentDescription2(new Uint8Array(VkAttachmentDescription2.size));
    }
    static create(data) {
        let s = VkAttachmentDescription2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.format && (s.format = data.format), void 0 !== data.samples && (s.samples = data.samples), void 0 !== data.loadOp && (s.loadOp = data.loadOp), void 0 !== data.storeOp && (s.storeOp = data.storeOp), void 0 !== data.stencilLoadOp && (s.stencilLoadOp = data.stencilLoadOp), void 0 !== data.stencilStoreOp && (s.stencilStoreOp = data.stencilStoreOp), void 0 !== data.initialLayout && (s.initialLayout = data.initialLayout), void 0 !== data.finalLayout && (s.finalLayout = data.finalLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(20, LE);
    }
    set format(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get samples() {
        return this.#view.getUint32(24, LE);
    }
    set samples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(28, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(32, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilLoadOp() {
        return this.#view.getUint32(36, LE);
    }
    set stencilLoadOp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get stencilStoreOp() {
        return this.#view.getUint32(40, LE);
    }
    set stencilStoreOp(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get initialLayout() {
        return this.#view.getUint32(44, LE);
    }
    set initialLayout(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get finalLayout() {
        return this.#view.getUint32(48, LE);
    }
    set finalLayout(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkAttachmentReference2 {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentReference2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentReference2(new Uint8Array(VkAttachmentReference2.size));
    }
    static create(data) {
        let s = VkAttachmentReference2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachment && (s.attachment = data.attachment), void 0 !== data.layout && (s.layout = data.layout), void 0 !== data.aspectMask && (s.aspectMask = data.aspectMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachment() {
        return this.#view.getUint32(16, LE);
    }
    set attachment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get layout() {
        return this.#view.getUint32(20, LE);
    }
    set layout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get aspectMask() {
        return this.#view.getUint32(24, LE);
    }
    set aspectMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkSubpassDescription2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassDescription2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassDescription2(new Uint8Array(VkSubpassDescription2.size));
    }
    static create(data) {
        let s = VkSubpassDescription2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pipelineBindPoint && (s.pipelineBindPoint = data.pipelineBindPoint), void 0 !== data.viewMask && (s.viewMask = data.viewMask), void 0 !== data.inputAttachmentCount && (s.inputAttachmentCount = data.inputAttachmentCount), void 0 !== data.pInputAttachments && (s.pInputAttachments = data.pInputAttachments), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (s.pColorAttachments = data.pColorAttachments), void 0 !== data.pResolveAttachments && (s.pResolveAttachments = data.pResolveAttachments), void 0 !== data.pDepthStencilAttachment && (s.pDepthStencilAttachment = data.pDepthStencilAttachment), void 0 !== data.preserveAttachmentCount && (s.preserveAttachmentCount = data.preserveAttachmentCount), void 0 !== data.pPreserveAttachments && (s.pPreserveAttachments = data.pPreserveAttachments), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineBindPoint() {
        return this.#view.getUint32(20, LE);
    }
    set pipelineBindPoint(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(24, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get inputAttachmentCount() {
        return this.#view.getUint32(28, LE);
    }
    set inputAttachmentCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pInputAttachments() {
        return this.#view.getBigUint64(32, LE);
    }
    set pInputAttachments(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(40, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(48, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pResolveAttachments() {
        return this.#view.getBigUint64(56, LE);
    }
    set pResolveAttachments(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pDepthStencilAttachment() {
        return this.#view.getBigUint64(64, LE);
    }
    set pDepthStencilAttachment(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get preserveAttachmentCount() {
        return this.#view.getUint32(72, LE);
    }
    set preserveAttachmentCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get pPreserveAttachments() {
        return this.#view.getBigUint64(80, LE);
    }
    set pPreserveAttachments(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
}
export class VkSubpassDependency2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassDependency2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassDependency2(new Uint8Array(VkSubpassDependency2.size));
    }
    static create(data) {
        let s = VkSubpassDependency2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcSubpass && (s.srcSubpass = data.srcSubpass), void 0 !== data.dstSubpass && (s.dstSubpass = data.dstSubpass), void 0 !== data.srcStageMask && (s.srcStageMask = data.srcStageMask), void 0 !== data.dstStageMask && (s.dstStageMask = data.dstStageMask), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.dependencyFlags && (s.dependencyFlags = data.dependencyFlags), void 0 !== data.viewOffset && (s.viewOffset = data.viewOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcSubpass() {
        return this.#view.getUint32(16, LE);
    }
    set srcSubpass(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get dstSubpass() {
        return this.#view.getUint32(20, LE);
    }
    set dstSubpass(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get srcStageMask() {
        return this.#view.getUint32(24, LE);
    }
    set srcStageMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstStageMask() {
        return this.#view.getUint32(28, LE);
    }
    set dstStageMask(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getUint32(32, LE);
    }
    set srcAccessMask(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getUint32(36, LE);
    }
    set dstAccessMask(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(40, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get viewOffset() {
        return this.#view.getInt32(44, LE);
    }
    set viewOffset(value) {
        this.#view.setInt32(44, Number(value), LE);
    }
}
export class VkRenderPassCreateInfo2 {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassCreateInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassCreateInfo2(new Uint8Array(VkRenderPassCreateInfo2.size));
    }
    static create(data) {
        let s = VkRenderPassCreateInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (s.pAttachments = data.pAttachments), void 0 !== data.subpassCount && (s.subpassCount = data.subpassCount), void 0 !== data.pSubpasses && (s.pSubpasses = data.pSubpasses), void 0 !== data.dependencyCount && (s.dependencyCount = data.dependencyCount), void 0 !== data.pDependencies && (s.pDependencies = data.pDependencies), void 0 !== data.correlatedViewMaskCount && (s.correlatedViewMaskCount = data.correlatedViewMaskCount), void 0 !== data.pCorrelatedViewMasks && (s.pCorrelatedViewMasks = data.pCorrelatedViewMasks), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get subpassCount() {
        return this.#view.getUint32(32, LE);
    }
    set subpassCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSubpasses() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSubpasses(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get dependencyCount() {
        return this.#view.getUint32(48, LE);
    }
    set dependencyCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pDependencies() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDependencies(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get correlatedViewMaskCount() {
        return this.#view.getUint32(64, LE);
    }
    set correlatedViewMaskCount(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get pCorrelatedViewMasks() {
        return this.#view.getBigUint64(72, LE);
    }
    set pCorrelatedViewMasks(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
}
export class VkSubpassBeginInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassBeginInfo(new Uint8Array(VkSubpassBeginInfo.size));
    }
    static create(data) {
        let s = VkSubpassBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.contents && (s.contents = data.contents), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get contents() {
        return this.#view.getUint32(16, LE);
    }
    set contents(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSubpassEndInfo {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassEndInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassEndInfo(new Uint8Array(VkSubpassEndInfo.size));
    }
    static create(data) {
        let s = VkSubpassEndInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_END_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceTimelineSemaphoreFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTimelineSemaphoreFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTimelineSemaphoreFeatures(new Uint8Array(VkPhysicalDeviceTimelineSemaphoreFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTimelineSemaphoreFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.timelineSemaphore && (s.timelineSemaphore = data.timelineSemaphore), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get timelineSemaphore() {
        return this.#view.getUint32(16, LE);
    }
    set timelineSemaphore(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceTimelineSemaphoreProperties {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTimelineSemaphoreProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTimelineSemaphoreProperties(new Uint8Array(VkPhysicalDeviceTimelineSemaphoreProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTimelineSemaphoreProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxTimelineSemaphoreValueDifference && (s.maxTimelineSemaphoreValueDifference = data.maxTimelineSemaphoreValueDifference), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxTimelineSemaphoreValueDifference() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxTimelineSemaphoreValueDifference(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSemaphoreTypeCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreTypeCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreTypeCreateInfo(new Uint8Array(VkSemaphoreTypeCreateInfo.size));
    }
    static create(data) {
        let s = VkSemaphoreTypeCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphoreType && (s.semaphoreType = data.semaphoreType), void 0 !== data.initialValue && (s.initialValue = data.initialValue), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphoreType() {
        return this.#view.getUint32(16, LE);
    }
    set semaphoreType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get initialValue() {
        return this.#view.getBigUint64(24, LE);
    }
    set initialValue(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkTimelineSemaphoreSubmitInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTimelineSemaphoreSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTimelineSemaphoreSubmitInfo(new Uint8Array(VkTimelineSemaphoreSubmitInfo.size));
    }
    static create(data) {
        let s = VkTimelineSemaphoreSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.waitSemaphoreValueCount && (s.waitSemaphoreValueCount = data.waitSemaphoreValueCount), void 0 !== data.pWaitSemaphoreValues && (s.pWaitSemaphoreValues = data.pWaitSemaphoreValues), void 0 !== data.signalSemaphoreValueCount && (s.signalSemaphoreValueCount = data.signalSemaphoreValueCount), void 0 !== data.pSignalSemaphoreValues && (s.pSignalSemaphoreValues = data.pSignalSemaphoreValues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get waitSemaphoreValueCount() {
        return this.#view.getUint32(16, LE);
    }
    set waitSemaphoreValueCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pWaitSemaphoreValues() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreValues(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get signalSemaphoreValueCount() {
        return this.#view.getUint32(32, LE);
    }
    set signalSemaphoreValueCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pSignalSemaphoreValues() {
        return this.#view.getBigUint64(40, LE);
    }
    set pSignalSemaphoreValues(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkSemaphoreWaitInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreWaitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreWaitInfo(new Uint8Array(VkSemaphoreWaitInfo.size));
    }
    static create(data) {
        let s = VkSemaphoreWaitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.semaphoreCount && (s.semaphoreCount = data.semaphoreCount), void 0 !== data.pSemaphores && (s.pSemaphores = data.pSemaphores), void 0 !== data.pValues && (s.pValues = data.pValues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get semaphoreCount() {
        return this.#view.getUint32(20, LE);
    }
    set semaphoreCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pSemaphores() {
        return this.#view.getBigUint64(24, LE);
    }
    set pSemaphores(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pValues() {
        return this.#view.getBigUint64(32, LE);
    }
    set pValues(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkSemaphoreSignalInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreSignalInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreSignalInfo(new Uint8Array(VkSemaphoreSignalInfo.size));
    }
    static create(data) {
        let s = VkSemaphoreSignalInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.value && (s.value = data.value), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get value() {
        return this.#view.getBigUint64(24, LE);
    }
    set value(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVertexInputBindingDivisorDescriptionEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVertexInputBindingDivisorDescriptionEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVertexInputBindingDivisorDescriptionEXT(new Uint8Array(VkVertexInputBindingDivisorDescriptionEXT.size));
    }
    static create(data) {
        let s = VkVertexInputBindingDivisorDescriptionEXT.alloc();
        return void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.divisor && (s.divisor = data.divisor), s;
    }
    get binding() {
        return this.#view.getUint32(0, LE);
    }
    set binding(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get divisor() {
        return this.#view.getUint32(4, LE);
    }
    set divisor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkPipelineVertexInputDivisorStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineVertexInputDivisorStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineVertexInputDivisorStateCreateInfoEXT(new Uint8Array(VkPipelineVertexInputDivisorStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineVertexInputDivisorStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexBindingDivisorCount && (s.vertexBindingDivisorCount = data.vertexBindingDivisorCount), void 0 !== data.pVertexBindingDivisors && (s.pVertexBindingDivisors = data.pVertexBindingDivisors), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexBindingDivisorCount() {
        return this.#view.getUint32(16, LE);
    }
    set vertexBindingDivisorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pVertexBindingDivisors() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVertexBindingDivisors(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(new Uint8Array(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxVertexAttribDivisor && (s.maxVertexAttribDivisor = data.maxVertexAttribDivisor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxVertexAttribDivisor() {
        return this.#view.getUint32(16, LE);
    }
    set maxVertexAttribDivisor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePCIBusInfoPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePCIBusInfoPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePCIBusInfoPropertiesEXT(new Uint8Array(VkPhysicalDevicePCIBusInfoPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePCIBusInfoPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pciDomain && (s.pciDomain = data.pciDomain), void 0 !== data.pciBus && (s.pciBus = data.pciBus), void 0 !== data.pciDevice && (s.pciDevice = data.pciDevice), void 0 !== data.pciFunction && (s.pciFunction = data.pciFunction), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pciDomain() {
        return this.#view.getUint32(16, LE);
    }
    set pciDomain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pciBus() {
        return this.#view.getUint32(20, LE);
    }
    set pciBus(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pciDevice() {
        return this.#view.getUint32(24, LE);
    }
    set pciDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pciFunction() {
        return this.#view.getUint32(28, LE);
    }
    set pciFunction(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkImportAndroidHardwareBufferInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportAndroidHardwareBufferInfoANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportAndroidHardwareBufferInfoANDROID(new Uint8Array(VkImportAndroidHardwareBufferInfoANDROID.size));
    }
    static create(data) {
        let s = VkImportAndroidHardwareBufferInfoANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAndroidHardwareBufferUsageANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAndroidHardwareBufferUsageANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAndroidHardwareBufferUsageANDROID(new Uint8Array(VkAndroidHardwareBufferUsageANDROID.size));
    }
    static create(data) {
        let s = VkAndroidHardwareBufferUsageANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.androidHardwareBufferUsage && (s.androidHardwareBufferUsage = data.androidHardwareBufferUsage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get androidHardwareBufferUsage() {
        return this.#view.getBigUint64(16, LE);
    }
    set androidHardwareBufferUsage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAndroidHardwareBufferPropertiesANDROID {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAndroidHardwareBufferPropertiesANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAndroidHardwareBufferPropertiesANDROID(new Uint8Array(VkAndroidHardwareBufferPropertiesANDROID.size));
    }
    static create(data) {
        let s = VkAndroidHardwareBufferPropertiesANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.allocationSize && (s.allocationSize = data.allocationSize), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get allocationSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set allocationSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(24, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkMemoryGetAndroidHardwareBufferInfoANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryGetAndroidHardwareBufferInfoANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryGetAndroidHardwareBufferInfoANDROID(new Uint8Array(VkMemoryGetAndroidHardwareBufferInfoANDROID.size));
    }
    static create(data) {
        let s = VkMemoryGetAndroidHardwareBufferInfoANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAndroidHardwareBufferFormatPropertiesANDROID {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAndroidHardwareBufferFormatPropertiesANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAndroidHardwareBufferFormatPropertiesANDROID(new Uint8Array(VkAndroidHardwareBufferFormatPropertiesANDROID.size));
    }
    static create(data) {
        let s = VkAndroidHardwareBufferFormatPropertiesANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.externalFormat && (s.externalFormat = data.externalFormat), void 0 !== data.formatFeatures && (s.formatFeatures = data.formatFeatures), void 0 !== data.samplerYcbcrConversionComponents && (s.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (s.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (s.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (s.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (s.suggestedYChromaOffset = data.suggestedYChromaOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(24, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getUint32(32, LE);
    }
    set formatFeatures(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get samplerYcbcrConversionComponents() {
        return new VkComponentMapping(this.#data.subarray(36, 36 + VkComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(52, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(56, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(60, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(64, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
}
export class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferInheritanceConditionalRenderingInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferInheritanceConditionalRenderingInfoEXT(new Uint8Array(VkCommandBufferInheritanceConditionalRenderingInfoEXT.size));
    }
    static create(data) {
        let s = VkCommandBufferInheritanceConditionalRenderingInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.conditionalRenderingEnable && (s.conditionalRenderingEnable = data.conditionalRenderingEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get conditionalRenderingEnable() {
        return this.#view.getUint32(16, LE);
    }
    set conditionalRenderingEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExternalFormatANDROID {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExternalFormatANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExternalFormatANDROID(new Uint8Array(VkExternalFormatANDROID.size));
    }
    static create(data) {
        let s = VkExternalFormatANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.externalFormat && (s.externalFormat = data.externalFormat), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(16, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDevice8BitStorageFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevice8BitStorageFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevice8BitStorageFeatures(new Uint8Array(VkPhysicalDevice8BitStorageFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDevice8BitStorageFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.storageBuffer8BitAccess && (s.storageBuffer8BitAccess = data.storageBuffer8BitAccess), void 0 !== data.uniformAndStorageBuffer8BitAccess && (s.uniformAndStorageBuffer8BitAccess = data.uniformAndStorageBuffer8BitAccess), void 0 !== data.storagePushConstant8 && (s.storagePushConstant8 = data.storagePushConstant8), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get storageBuffer8BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer8BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer8BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer8BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant8() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant8(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceConditionalRenderingFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceConditionalRenderingFeaturesEXT(new Uint8Array(VkPhysicalDeviceConditionalRenderingFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceConditionalRenderingFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.conditionalRendering && (s.conditionalRendering = data.conditionalRendering), void 0 !== data.inheritedConditionalRendering && (s.inheritedConditionalRendering = data.inheritedConditionalRendering), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get conditionalRendering() {
        return this.#view.getUint32(16, LE);
    }
    set conditionalRendering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inheritedConditionalRendering() {
        return this.#view.getUint32(20, LE);
    }
    set inheritedConditionalRendering(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkanMemoryModelFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkanMemoryModelFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkanMemoryModelFeatures(new Uint8Array(VkPhysicalDeviceVulkanMemoryModelFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkanMemoryModelFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vulkanMemoryModel && (s.vulkanMemoryModel = data.vulkanMemoryModel), void 0 !== data.vulkanMemoryModelDeviceScope && (s.vulkanMemoryModelDeviceScope = data.vulkanMemoryModelDeviceScope), void 0 !== data.vulkanMemoryModelAvailabilityVisibilityChains && (s.vulkanMemoryModelAvailabilityVisibilityChains = data.vulkanMemoryModelAvailabilityVisibilityChains), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vulkanMemoryModel() {
        return this.#view.getUint32(16, LE);
    }
    set vulkanMemoryModel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vulkanMemoryModelDeviceScope() {
        return this.#view.getUint32(20, LE);
    }
    set vulkanMemoryModelDeviceScope(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vulkanMemoryModelAvailabilityVisibilityChains() {
        return this.#view.getUint32(24, LE);
    }
    set vulkanMemoryModelAvailabilityVisibilityChains(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderAtomicInt64Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderAtomicInt64Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderAtomicInt64Features(new Uint8Array(VkPhysicalDeviceShaderAtomicInt64Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderAtomicInt64Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderBufferInt64Atomics && (s.shaderBufferInt64Atomics = data.shaderBufferInt64Atomics), void 0 !== data.shaderSharedInt64Atomics && (s.shaderSharedInt64Atomics = data.shaderSharedInt64Atomics), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderBufferInt64Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferInt64Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderSharedInt64Atomics() {
        return this.#view.getUint32(20, LE);
    }
    set shaderSharedInt64Atomics(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(new Uint8Array(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderBufferFloat32Atomics && (s.shaderBufferFloat32Atomics = data.shaderBufferFloat32Atomics), void 0 !== data.shaderBufferFloat32AtomicAdd && (s.shaderBufferFloat32AtomicAdd = data.shaderBufferFloat32AtomicAdd), void 0 !== data.shaderBufferFloat64Atomics && (s.shaderBufferFloat64Atomics = data.shaderBufferFloat64Atomics), void 0 !== data.shaderBufferFloat64AtomicAdd && (s.shaderBufferFloat64AtomicAdd = data.shaderBufferFloat64AtomicAdd), void 0 !== data.shaderSharedFloat32Atomics && (s.shaderSharedFloat32Atomics = data.shaderSharedFloat32Atomics), void 0 !== data.shaderSharedFloat32AtomicAdd && (s.shaderSharedFloat32AtomicAdd = data.shaderSharedFloat32AtomicAdd), void 0 !== data.shaderSharedFloat64Atomics && (s.shaderSharedFloat64Atomics = data.shaderSharedFloat64Atomics), void 0 !== data.shaderSharedFloat64AtomicAdd && (s.shaderSharedFloat64AtomicAdd = data.shaderSharedFloat64AtomicAdd), void 0 !== data.shaderImageFloat32Atomics && (s.shaderImageFloat32Atomics = data.shaderImageFloat32Atomics), void 0 !== data.shaderImageFloat32AtomicAdd && (s.shaderImageFloat32AtomicAdd = data.shaderImageFloat32AtomicAdd), void 0 !== data.sparseImageFloat32Atomics && (s.sparseImageFloat32Atomics = data.sparseImageFloat32Atomics), void 0 !== data.sparseImageFloat32AtomicAdd && (s.sparseImageFloat32AtomicAdd = data.sparseImageFloat32AtomicAdd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderBufferFloat32Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferFloat32Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderBufferFloat32AtomicAdd() {
        return this.#view.getUint32(20, LE);
    }
    set shaderBufferFloat32AtomicAdd(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderBufferFloat64Atomics() {
        return this.#view.getUint32(24, LE);
    }
    set shaderBufferFloat64Atomics(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderBufferFloat64AtomicAdd() {
        return this.#view.getUint32(28, LE);
    }
    set shaderBufferFloat64AtomicAdd(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderSharedFloat32Atomics() {
        return this.#view.getUint32(32, LE);
    }
    set shaderSharedFloat32Atomics(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderSharedFloat32AtomicAdd() {
        return this.#view.getUint32(36, LE);
    }
    set shaderSharedFloat32AtomicAdd(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedFloat64Atomics() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedFloat64Atomics(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderSharedFloat64AtomicAdd() {
        return this.#view.getUint32(44, LE);
    }
    set shaderSharedFloat64AtomicAdd(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderImageFloat32Atomics() {
        return this.#view.getUint32(48, LE);
    }
    set shaderImageFloat32Atomics(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderImageFloat32AtomicAdd() {
        return this.#view.getUint32(52, LE);
    }
    set shaderImageFloat32AtomicAdd(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get sparseImageFloat32Atomics() {
        return this.#view.getUint32(56, LE);
    }
    set sparseImageFloat32Atomics(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sparseImageFloat32AtomicAdd() {
        return this.#view.getUint32(60, LE);
    }
    set sparseImageFloat32AtomicAdd(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(new Uint8Array(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderBufferFloat16Atomics && (s.shaderBufferFloat16Atomics = data.shaderBufferFloat16Atomics), void 0 !== data.shaderBufferFloat16AtomicAdd && (s.shaderBufferFloat16AtomicAdd = data.shaderBufferFloat16AtomicAdd), void 0 !== data.shaderBufferFloat16AtomicMinMax && (s.shaderBufferFloat16AtomicMinMax = data.shaderBufferFloat16AtomicMinMax), void 0 !== data.shaderBufferFloat32AtomicMinMax && (s.shaderBufferFloat32AtomicMinMax = data.shaderBufferFloat32AtomicMinMax), void 0 !== data.shaderBufferFloat64AtomicMinMax && (s.shaderBufferFloat64AtomicMinMax = data.shaderBufferFloat64AtomicMinMax), void 0 !== data.shaderSharedFloat16Atomics && (s.shaderSharedFloat16Atomics = data.shaderSharedFloat16Atomics), void 0 !== data.shaderSharedFloat16AtomicAdd && (s.shaderSharedFloat16AtomicAdd = data.shaderSharedFloat16AtomicAdd), void 0 !== data.shaderSharedFloat16AtomicMinMax && (s.shaderSharedFloat16AtomicMinMax = data.shaderSharedFloat16AtomicMinMax), void 0 !== data.shaderSharedFloat32AtomicMinMax && (s.shaderSharedFloat32AtomicMinMax = data.shaderSharedFloat32AtomicMinMax), void 0 !== data.shaderSharedFloat64AtomicMinMax && (s.shaderSharedFloat64AtomicMinMax = data.shaderSharedFloat64AtomicMinMax), void 0 !== data.shaderImageFloat32AtomicMinMax && (s.shaderImageFloat32AtomicMinMax = data.shaderImageFloat32AtomicMinMax), void 0 !== data.sparseImageFloat32AtomicMinMax && (s.sparseImageFloat32AtomicMinMax = data.sparseImageFloat32AtomicMinMax), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderBufferFloat16Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderBufferFloat16Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderBufferFloat16AtomicAdd() {
        return this.#view.getUint32(20, LE);
    }
    set shaderBufferFloat16AtomicAdd(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get shaderBufferFloat16AtomicMinMax() {
        return this.#view.getUint32(24, LE);
    }
    set shaderBufferFloat16AtomicMinMax(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderBufferFloat32AtomicMinMax() {
        return this.#view.getUint32(28, LE);
    }
    set shaderBufferFloat32AtomicMinMax(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderBufferFloat64AtomicMinMax() {
        return this.#view.getUint32(32, LE);
    }
    set shaderBufferFloat64AtomicMinMax(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderSharedFloat16Atomics() {
        return this.#view.getUint32(36, LE);
    }
    set shaderSharedFloat16Atomics(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedFloat16AtomicAdd() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedFloat16AtomicAdd(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderSharedFloat16AtomicMinMax() {
        return this.#view.getUint32(44, LE);
    }
    set shaderSharedFloat16AtomicMinMax(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderSharedFloat32AtomicMinMax() {
        return this.#view.getUint32(48, LE);
    }
    set shaderSharedFloat32AtomicMinMax(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get shaderSharedFloat64AtomicMinMax() {
        return this.#view.getUint32(52, LE);
    }
    set shaderSharedFloat64AtomicMinMax(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderImageFloat32AtomicMinMax() {
        return this.#view.getUint32(56, LE);
    }
    set shaderImageFloat32AtomicMinMax(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get sparseImageFloat32AtomicMinMax() {
        return this.#view.getUint32(60, LE);
    }
    set sparseImageFloat32AtomicMinMax(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(new Uint8Array(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexAttributeInstanceRateDivisor && (s.vertexAttributeInstanceRateDivisor = data.vertexAttributeInstanceRateDivisor), void 0 !== data.vertexAttributeInstanceRateZeroDivisor && (s.vertexAttributeInstanceRateZeroDivisor = data.vertexAttributeInstanceRateZeroDivisor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexAttributeInstanceRateDivisor() {
        return this.#view.getUint32(16, LE);
    }
    set vertexAttributeInstanceRateDivisor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexAttributeInstanceRateZeroDivisor() {
        return this.#view.getUint32(20, LE);
    }
    set vertexAttributeInstanceRateZeroDivisor(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkQueueFamilyCheckpointPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyCheckpointPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyCheckpointPropertiesNV(new Uint8Array(VkQueueFamilyCheckpointPropertiesNV.size));
    }
    static create(data) {
        let s = VkQueueFamilyCheckpointPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.checkpointExecutionStageMask && (s.checkpointExecutionStageMask = data.checkpointExecutionStageMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get checkpointExecutionStageMask() {
        return this.#view.getUint32(16, LE);
    }
    set checkpointExecutionStageMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCheckpointDataNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCheckpointDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCheckpointDataNV(new Uint8Array(VkCheckpointDataNV.size));
    }
    static create(data) {
        let s = VkCheckpointDataNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stage && (s.stage = data.stage), void 0 !== data.pCheckpointMarker && (s.pCheckpointMarker = data.pCheckpointMarker), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stage() {
        return this.#view.getUint32(16, LE);
    }
    set stage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pCheckpointMarker() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCheckpointMarker(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDepthStencilResolveProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDepthStencilResolveProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDepthStencilResolveProperties(new Uint8Array(VkPhysicalDeviceDepthStencilResolveProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDepthStencilResolveProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supportedDepthResolveModes && (s.supportedDepthResolveModes = data.supportedDepthResolveModes), void 0 !== data.supportedStencilResolveModes && (s.supportedStencilResolveModes = data.supportedStencilResolveModes), void 0 !== data.independentResolveNone && (s.independentResolveNone = data.independentResolveNone), void 0 !== data.independentResolve && (s.independentResolve = data.independentResolve), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supportedDepthResolveModes() {
        return this.#view.getUint32(16, LE);
    }
    set supportedDepthResolveModes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedStencilResolveModes() {
        return this.#view.getUint32(20, LE);
    }
    set supportedStencilResolveModes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get independentResolveNone() {
        return this.#view.getUint32(24, LE);
    }
    set independentResolveNone(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get independentResolve() {
        return this.#view.getUint32(28, LE);
    }
    set independentResolve(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkSubpassDescriptionDepthStencilResolve {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassDescriptionDepthStencilResolve.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassDescriptionDepthStencilResolve(new Uint8Array(VkSubpassDescriptionDepthStencilResolve.size));
    }
    static create(data) {
        let s = VkSubpassDescriptionDepthStencilResolve.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.depthResolveMode && (s.depthResolveMode = data.depthResolveMode), void 0 !== data.stencilResolveMode && (s.stencilResolveMode = data.stencilResolveMode), void 0 !== data.pDepthStencilResolveAttachment && (s.pDepthStencilResolveAttachment = data.pDepthStencilResolveAttachment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get depthResolveMode() {
        return this.#view.getUint32(16, LE);
    }
    set depthResolveMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilResolveMode() {
        return this.#view.getUint32(20, LE);
    }
    set stencilResolveMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pDepthStencilResolveAttachment() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDepthStencilResolveAttachment(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkImageViewASTCDecodeModeEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewASTCDecodeModeEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewASTCDecodeModeEXT(new Uint8Array(VkImageViewASTCDecodeModeEXT.size));
    }
    static create(data) {
        let s = VkImageViewASTCDecodeModeEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.decodeMode && (s.decodeMode = data.decodeMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get decodeMode() {
        return this.#view.getUint32(16, LE);
    }
    set decodeMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceASTCDecodeFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceASTCDecodeFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceASTCDecodeFeaturesEXT(new Uint8Array(VkPhysicalDeviceASTCDecodeFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceASTCDecodeFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.decodeModeSharedExponent && (s.decodeModeSharedExponent = data.decodeModeSharedExponent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get decodeModeSharedExponent() {
        return this.#view.getUint32(16, LE);
    }
    set decodeModeSharedExponent(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTransformFeedbackFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTransformFeedbackFeaturesEXT(new Uint8Array(VkPhysicalDeviceTransformFeedbackFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTransformFeedbackFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.transformFeedback && (s.transformFeedback = data.transformFeedback), void 0 !== data.geometryStreams && (s.geometryStreams = data.geometryStreams), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get transformFeedback() {
        return this.#view.getUint32(16, LE);
    }
    set transformFeedback(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometryStreams() {
        return this.#view.getUint32(20, LE);
    }
    set geometryStreams(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTransformFeedbackPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTransformFeedbackPropertiesEXT(new Uint8Array(VkPhysicalDeviceTransformFeedbackPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTransformFeedbackPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxTransformFeedbackStreams && (s.maxTransformFeedbackStreams = data.maxTransformFeedbackStreams), void 0 !== data.maxTransformFeedbackBuffers && (s.maxTransformFeedbackBuffers = data.maxTransformFeedbackBuffers), void 0 !== data.maxTransformFeedbackBufferSize && (s.maxTransformFeedbackBufferSize = data.maxTransformFeedbackBufferSize), void 0 !== data.maxTransformFeedbackStreamDataSize && (s.maxTransformFeedbackStreamDataSize = data.maxTransformFeedbackStreamDataSize), void 0 !== data.maxTransformFeedbackBufferDataSize && (s.maxTransformFeedbackBufferDataSize = data.maxTransformFeedbackBufferDataSize), void 0 !== data.maxTransformFeedbackBufferDataStride && (s.maxTransformFeedbackBufferDataStride = data.maxTransformFeedbackBufferDataStride), void 0 !== data.transformFeedbackQueries && (s.transformFeedbackQueries = data.transformFeedbackQueries), void 0 !== data.transformFeedbackStreamsLinesTriangles && (s.transformFeedbackStreamsLinesTriangles = data.transformFeedbackStreamsLinesTriangles), void 0 !== data.transformFeedbackRasterizationStreamSelect && (s.transformFeedbackRasterizationStreamSelect = data.transformFeedbackRasterizationStreamSelect), void 0 !== data.transformFeedbackDraw && (s.transformFeedbackDraw = data.transformFeedbackDraw), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxTransformFeedbackStreams() {
        return this.#view.getUint32(16, LE);
    }
    set maxTransformFeedbackStreams(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTransformFeedbackBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set maxTransformFeedbackBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxTransformFeedbackBufferSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxTransformFeedbackBufferSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get maxTransformFeedbackStreamDataSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxTransformFeedbackStreamDataSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxTransformFeedbackBufferDataSize() {
        return this.#view.getUint32(36, LE);
    }
    set maxTransformFeedbackBufferDataSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxTransformFeedbackBufferDataStride() {
        return this.#view.getUint32(40, LE);
    }
    set maxTransformFeedbackBufferDataStride(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get transformFeedbackQueries() {
        return this.#view.getUint32(44, LE);
    }
    set transformFeedbackQueries(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get transformFeedbackStreamsLinesTriangles() {
        return this.#view.getUint32(48, LE);
    }
    set transformFeedbackStreamsLinesTriangles(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get transformFeedbackRasterizationStreamSelect() {
        return this.#view.getUint32(52, LE);
    }
    set transformFeedbackRasterizationStreamSelect(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get transformFeedbackDraw() {
        return this.#view.getUint32(56, LE);
    }
    set transformFeedbackDraw(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkPipelineRasterizationStateStreamCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationStateStreamCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationStateStreamCreateInfoEXT(new Uint8Array(VkPipelineRasterizationStateStreamCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationStateStreamCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.rasterizationStream && (s.rasterizationStream = data.rasterizationStream), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationStream() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationStream(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(new Uint8Array(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.representativeFragmentTest && (s.representativeFragmentTest = data.representativeFragmentTest), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get representativeFragmentTest() {
        return this.#view.getUint32(16, LE);
    }
    set representativeFragmentTest(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRepresentativeFragmentTestStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRepresentativeFragmentTestStateCreateInfoNV(new Uint8Array(VkPipelineRepresentativeFragmentTestStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineRepresentativeFragmentTestStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.representativeFragmentTestEnable && (s.representativeFragmentTestEnable = data.representativeFragmentTestEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get representativeFragmentTestEnable() {
        return this.#view.getUint32(16, LE);
    }
    set representativeFragmentTestEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceExclusiveScissorFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExclusiveScissorFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExclusiveScissorFeaturesNV(new Uint8Array(VkPhysicalDeviceExclusiveScissorFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExclusiveScissorFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.exclusiveScissor && (s.exclusiveScissor = data.exclusiveScissor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get exclusiveScissor() {
        return this.#view.getUint32(16, LE);
    }
    set exclusiveScissor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportExclusiveScissorStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportExclusiveScissorStateCreateInfoNV(new Uint8Array(VkPipelineViewportExclusiveScissorStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineViewportExclusiveScissorStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.exclusiveScissorCount && (s.exclusiveScissorCount = data.exclusiveScissorCount), void 0 !== data.pExclusiveScissors && (s.pExclusiveScissors = data.pExclusiveScissors), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get exclusiveScissorCount() {
        return this.#view.getUint32(16, LE);
    }
    set exclusiveScissorCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pExclusiveScissors() {
        return this.#view.getBigUint64(24, LE);
    }
    set pExclusiveScissors(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceCornerSampledImageFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCornerSampledImageFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCornerSampledImageFeaturesNV(new Uint8Array(VkPhysicalDeviceCornerSampledImageFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCornerSampledImageFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.cornerSampledImage && (s.cornerSampledImage = data.cornerSampledImage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get cornerSampledImage() {
        return this.#view.getUint32(16, LE);
    }
    set cornerSampledImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(new Uint8Array(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.computeDerivativeGroupQuads && (s.computeDerivativeGroupQuads = data.computeDerivativeGroupQuads), void 0 !== data.computeDerivativeGroupLinear && (s.computeDerivativeGroupLinear = data.computeDerivativeGroupLinear), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get computeDerivativeGroupQuads() {
        return this.#view.getUint32(16, LE);
    }
    set computeDerivativeGroupQuads(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get computeDerivativeGroupLinear() {
        return this.#view.getUint32(20, LE);
    }
    set computeDerivativeGroupLinear(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderImageFootprintFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderImageFootprintFeaturesNV(new Uint8Array(VkPhysicalDeviceShaderImageFootprintFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderImageFootprintFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageFootprint && (s.imageFootprint = data.imageFootprint), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageFootprint() {
        return this.#view.getUint32(16, LE);
    }
    set imageFootprint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(new Uint8Array(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dedicatedAllocationImageAliasing && (s.dedicatedAllocationImageAliasing = data.dedicatedAllocationImageAliasing), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dedicatedAllocationImageAliasing() {
        return this.#view.getUint32(16, LE);
    }
    set dedicatedAllocationImageAliasing(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(new Uint8Array(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.indirectCopy && (s.indirectCopy = data.indirectCopy), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get indirectCopy() {
        return this.#view.getUint32(16, LE);
    }
    set indirectCopy(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCopyMemoryIndirectPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(new Uint8Array(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCopyMemoryIndirectPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supportedQueues && (s.supportedQueues = data.supportedQueues), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supportedQueues() {
        return this.#view.getUint32(16, LE);
    }
    set supportedQueues(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryDecompressionFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryDecompressionFeaturesNV(new Uint8Array(VkPhysicalDeviceMemoryDecompressionFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryDecompressionFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryDecompression && (s.memoryDecompression = data.memoryDecompression), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryDecompression() {
        return this.#view.getUint32(16, LE);
    }
    set memoryDecompression(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryDecompressionPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryDecompressionPropertiesNV(new Uint8Array(VkPhysicalDeviceMemoryDecompressionPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryDecompressionPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.decompressionMethods && (s.decompressionMethods = data.decompressionMethods), void 0 !== data.maxDecompressionIndirectCount && (s.maxDecompressionIndirectCount = data.maxDecompressionIndirectCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get decompressionMethods() {
        return this.#view.getBigUint64(16, LE);
    }
    set decompressionMethods(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get maxDecompressionIndirectCount() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxDecompressionIndirectCount(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkShadingRatePaletteNV {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShadingRatePaletteNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShadingRatePaletteNV(new Uint8Array(VkShadingRatePaletteNV.size));
    }
    static create(data) {
        let s = VkShadingRatePaletteNV.alloc();
        return void 0 !== data.shadingRatePaletteEntryCount && (s.shadingRatePaletteEntryCount = data.shadingRatePaletteEntryCount), void 0 !== data.pShadingRatePaletteEntries && (s.pShadingRatePaletteEntries = data.pShadingRatePaletteEntries), s;
    }
    get shadingRatePaletteEntryCount() {
        return this.#view.getUint32(0, LE);
    }
    set shadingRatePaletteEntryCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pShadingRatePaletteEntries() {
        return this.#view.getBigUint64(8, LE);
    }
    set pShadingRatePaletteEntries(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkPipelineViewportShadingRateImageStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportShadingRateImageStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportShadingRateImageStateCreateInfoNV(new Uint8Array(VkPipelineViewportShadingRateImageStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineViewportShadingRateImageStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shadingRateImageEnable && (s.shadingRateImageEnable = data.shadingRateImageEnable), void 0 !== data.viewportCount && (s.viewportCount = data.viewportCount), void 0 !== data.pShadingRatePalettes && (s.pShadingRatePalettes = data.pShadingRatePalettes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shadingRateImageEnable() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateImageEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pShadingRatePalettes() {
        return this.#view.getBigUint64(24, LE);
    }
    set pShadingRatePalettes(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceShadingRateImageFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShadingRateImageFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShadingRateImageFeaturesNV(new Uint8Array(VkPhysicalDeviceShadingRateImageFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShadingRateImageFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shadingRateImage && (s.shadingRateImage = data.shadingRateImage), void 0 !== data.shadingRateCoarseSampleOrder && (s.shadingRateCoarseSampleOrder = data.shadingRateCoarseSampleOrder), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shadingRateImage() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateImage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shadingRateCoarseSampleOrder() {
        return this.#view.getUint32(20, LE);
    }
    set shadingRateCoarseSampleOrder(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceShadingRateImagePropertiesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShadingRateImagePropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShadingRateImagePropertiesNV(new Uint8Array(VkPhysicalDeviceShadingRateImagePropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShadingRateImagePropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shadingRateTexelSize && (s.shadingRateTexelSize = data.shadingRateTexelSize), void 0 !== data.shadingRatePaletteSize && (s.shadingRatePaletteSize = data.shadingRatePaletteSize), void 0 !== data.shadingRateMaxCoarseSamples && (s.shadingRateMaxCoarseSamples = data.shadingRateMaxCoarseSamples), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shadingRateTexelSize() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set shadingRateTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get shadingRatePaletteSize() {
        return this.#view.getUint32(24, LE);
    }
    set shadingRatePaletteSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shadingRateMaxCoarseSamples() {
        return this.#view.getUint32(28, LE);
    }
    set shadingRateMaxCoarseSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(new Uint8Array(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.invocationMask && (s.invocationMask = data.invocationMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get invocationMask() {
        return this.#view.getUint32(16, LE);
    }
    set invocationMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCoarseSampleLocationNV {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCoarseSampleLocationNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCoarseSampleLocationNV(new Uint8Array(VkCoarseSampleLocationNV.size));
    }
    static create(data) {
        let s = VkCoarseSampleLocationNV.alloc();
        return void 0 !== data.pixelX && (s.pixelX = data.pixelX), void 0 !== data.pixelY && (s.pixelY = data.pixelY), void 0 !== data.sample && (s.sample = data.sample), s;
    }
    get pixelX() {
        return this.#view.getUint32(0, LE);
    }
    set pixelX(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pixelY() {
        return this.#view.getUint32(4, LE);
    }
    set pixelY(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sample() {
        return this.#view.getUint32(8, LE);
    }
    set sample(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkCoarseSampleOrderCustomNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCoarseSampleOrderCustomNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCoarseSampleOrderCustomNV(new Uint8Array(VkCoarseSampleOrderCustomNV.size));
    }
    static create(data) {
        let s = VkCoarseSampleOrderCustomNV.alloc();
        return void 0 !== data.shadingRate && (s.shadingRate = data.shadingRate), void 0 !== data.sampleCount && (s.sampleCount = data.sampleCount), void 0 !== data.sampleLocationCount && (s.sampleLocationCount = data.sampleLocationCount), void 0 !== data.pSampleLocations && (s.pSampleLocations = data.pSampleLocations), s;
    }
    get shadingRate() {
        return this.#view.getUint32(0, LE);
    }
    set shadingRate(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get sampleCount() {
        return this.#view.getUint32(4, LE);
    }
    set sampleCount(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get sampleLocationCount() {
        return this.#view.getUint32(8, LE);
    }
    set sampleLocationCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get pSampleLocations() {
        return this.#view.getBigUint64(16, LE);
    }
    set pSampleLocations(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(new Uint8Array(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampleOrderType && (s.sampleOrderType = data.sampleOrderType), void 0 !== data.customSampleOrderCount && (s.customSampleOrderCount = data.customSampleOrderCount), void 0 !== data.pCustomSampleOrders && (s.pCustomSampleOrders = data.pCustomSampleOrders), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampleOrderType() {
        return this.#view.getUint32(16, LE);
    }
    set sampleOrderType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get customSampleOrderCount() {
        return this.#view.getUint32(20, LE);
    }
    set customSampleOrderCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pCustomSampleOrders() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCustomSampleOrders(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceMeshShaderFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMeshShaderFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMeshShaderFeaturesNV(new Uint8Array(VkPhysicalDeviceMeshShaderFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMeshShaderFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.taskShader && (s.taskShader = data.taskShader), void 0 !== data.meshShader && (s.meshShader = data.meshShader), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get taskShader() {
        return this.#view.getUint32(16, LE);
    }
    set taskShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get meshShader() {
        return this.#view.getUint32(20, LE);
    }
    set meshShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceMeshShaderPropertiesNV {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMeshShaderPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMeshShaderPropertiesNV(new Uint8Array(VkPhysicalDeviceMeshShaderPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMeshShaderPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxDrawMeshTasksCount && (s.maxDrawMeshTasksCount = data.maxDrawMeshTasksCount), void 0 !== data.maxTaskWorkGroupInvocations && (s.maxTaskWorkGroupInvocations = data.maxTaskWorkGroupInvocations), void 0 !== data.maxTaskWorkGroupSize && (s.maxTaskWorkGroupSize = data.maxTaskWorkGroupSize), void 0 !== data.maxTaskTotalMemorySize && (s.maxTaskTotalMemorySize = data.maxTaskTotalMemorySize), void 0 !== data.maxTaskOutputCount && (s.maxTaskOutputCount = data.maxTaskOutputCount), void 0 !== data.maxMeshWorkGroupInvocations && (s.maxMeshWorkGroupInvocations = data.maxMeshWorkGroupInvocations), void 0 !== data.maxMeshWorkGroupSize && (s.maxMeshWorkGroupSize = data.maxMeshWorkGroupSize), void 0 !== data.maxMeshTotalMemorySize && (s.maxMeshTotalMemorySize = data.maxMeshTotalMemorySize), void 0 !== data.maxMeshOutputVertices && (s.maxMeshOutputVertices = data.maxMeshOutputVertices), void 0 !== data.maxMeshOutputPrimitives && (s.maxMeshOutputPrimitives = data.maxMeshOutputPrimitives), void 0 !== data.maxMeshMultiviewViewCount && (s.maxMeshMultiviewViewCount = data.maxMeshMultiviewViewCount), void 0 !== data.meshOutputPerVertexGranularity && (s.meshOutputPerVertexGranularity = data.meshOutputPerVertexGranularity), void 0 !== data.meshOutputPerPrimitiveGranularity && (s.meshOutputPerPrimitiveGranularity = data.meshOutputPerPrimitiveGranularity), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxDrawMeshTasksCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxDrawMeshTasksCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTaskWorkGroupInvocations() {
        return this.#view.getUint32(20, LE);
    }
    set maxTaskWorkGroupInvocations(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxTaskWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(24 + 4 * i, LE));
        return result;
    }
    set maxTaskWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(24 + 4 * i, Number(value[i]), LE);
    }
    get maxTaskTotalMemorySize() {
        return this.#view.getUint32(36, LE);
    }
    set maxTaskTotalMemorySize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxTaskOutputCount() {
        return this.#view.getUint32(40, LE);
    }
    set maxTaskOutputCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxMeshWorkGroupInvocations() {
        return this.#view.getUint32(44, LE);
    }
    set maxMeshWorkGroupInvocations(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxMeshWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(48 + 4 * i, LE));
        return result;
    }
    set maxMeshWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(48 + 4 * i, Number(value[i]), LE);
    }
    get maxMeshTotalMemorySize() {
        return this.#view.getUint32(60, LE);
    }
    set maxMeshTotalMemorySize(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxMeshOutputVertices() {
        return this.#view.getUint32(64, LE);
    }
    set maxMeshOutputVertices(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxMeshOutputPrimitives() {
        return this.#view.getUint32(68, LE);
    }
    set maxMeshOutputPrimitives(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxMeshMultiviewViewCount() {
        return this.#view.getUint32(72, LE);
    }
    set maxMeshMultiviewViewCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get meshOutputPerVertexGranularity() {
        return this.#view.getUint32(76, LE);
    }
    set meshOutputPerVertexGranularity(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get meshOutputPerPrimitiveGranularity() {
        return this.#view.getUint32(80, LE);
    }
    set meshOutputPerPrimitiveGranularity(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
}
export class VkDrawMeshTasksIndirectCommandNV {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrawMeshTasksIndirectCommandNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrawMeshTasksIndirectCommandNV(new Uint8Array(VkDrawMeshTasksIndirectCommandNV.size));
    }
    static create(data) {
        let s = VkDrawMeshTasksIndirectCommandNV.alloc();
        return void 0 !== data.taskCount && (s.taskCount = data.taskCount), void 0 !== data.firstTask && (s.firstTask = data.firstTask), s;
    }
    get taskCount() {
        return this.#view.getUint32(0, LE);
    }
    set taskCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get firstTask() {
        return this.#view.getUint32(4, LE);
    }
    set firstTask(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
}
export class VkPhysicalDeviceMeshShaderFeaturesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMeshShaderFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMeshShaderFeaturesEXT(new Uint8Array(VkPhysicalDeviceMeshShaderFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMeshShaderFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.taskShader && (s.taskShader = data.taskShader), void 0 !== data.meshShader && (s.meshShader = data.meshShader), void 0 !== data.multiviewMeshShader && (s.multiviewMeshShader = data.multiviewMeshShader), void 0 !== data.primitiveFragmentShadingRateMeshShader && (s.primitiveFragmentShadingRateMeshShader = data.primitiveFragmentShadingRateMeshShader), void 0 !== data.meshShaderQueries && (s.meshShaderQueries = data.meshShaderQueries), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get taskShader() {
        return this.#view.getUint32(16, LE);
    }
    set taskShader(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get meshShader() {
        return this.#view.getUint32(20, LE);
    }
    set meshShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get multiviewMeshShader() {
        return this.#view.getUint32(24, LE);
    }
    set multiviewMeshShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get primitiveFragmentShadingRateMeshShader() {
        return this.#view.getUint32(28, LE);
    }
    set primitiveFragmentShadingRateMeshShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get meshShaderQueries() {
        return this.#view.getUint32(32, LE);
    }
    set meshShaderQueries(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceMeshShaderPropertiesEXT {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMeshShaderPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMeshShaderPropertiesEXT(new Uint8Array(VkPhysicalDeviceMeshShaderPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMeshShaderPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxTaskWorkGroupTotalCount && (s.maxTaskWorkGroupTotalCount = data.maxTaskWorkGroupTotalCount), void 0 !== data.maxTaskWorkGroupCount && (s.maxTaskWorkGroupCount = data.maxTaskWorkGroupCount), void 0 !== data.maxTaskWorkGroupInvocations && (s.maxTaskWorkGroupInvocations = data.maxTaskWorkGroupInvocations), void 0 !== data.maxTaskWorkGroupSize && (s.maxTaskWorkGroupSize = data.maxTaskWorkGroupSize), void 0 !== data.maxTaskPayloadSize && (s.maxTaskPayloadSize = data.maxTaskPayloadSize), void 0 !== data.maxTaskSharedMemorySize && (s.maxTaskSharedMemorySize = data.maxTaskSharedMemorySize), void 0 !== data.maxTaskPayloadAndSharedMemorySize && (s.maxTaskPayloadAndSharedMemorySize = data.maxTaskPayloadAndSharedMemorySize), void 0 !== data.maxMeshWorkGroupTotalCount && (s.maxMeshWorkGroupTotalCount = data.maxMeshWorkGroupTotalCount), void 0 !== data.maxMeshWorkGroupCount && (s.maxMeshWorkGroupCount = data.maxMeshWorkGroupCount), void 0 !== data.maxMeshWorkGroupInvocations && (s.maxMeshWorkGroupInvocations = data.maxMeshWorkGroupInvocations), void 0 !== data.maxMeshWorkGroupSize && (s.maxMeshWorkGroupSize = data.maxMeshWorkGroupSize), void 0 !== data.maxMeshSharedMemorySize && (s.maxMeshSharedMemorySize = data.maxMeshSharedMemorySize), void 0 !== data.maxMeshPayloadAndSharedMemorySize && (s.maxMeshPayloadAndSharedMemorySize = data.maxMeshPayloadAndSharedMemorySize), void 0 !== data.maxMeshOutputMemorySize && (s.maxMeshOutputMemorySize = data.maxMeshOutputMemorySize), void 0 !== data.maxMeshPayloadAndOutputMemorySize && (s.maxMeshPayloadAndOutputMemorySize = data.maxMeshPayloadAndOutputMemorySize), void 0 !== data.maxMeshOutputComponents && (s.maxMeshOutputComponents = data.maxMeshOutputComponents), void 0 !== data.maxMeshOutputVertices && (s.maxMeshOutputVertices = data.maxMeshOutputVertices), void 0 !== data.maxMeshOutputPrimitives && (s.maxMeshOutputPrimitives = data.maxMeshOutputPrimitives), void 0 !== data.maxMeshOutputLayers && (s.maxMeshOutputLayers = data.maxMeshOutputLayers), void 0 !== data.maxMeshMultiviewViewCount && (s.maxMeshMultiviewViewCount = data.maxMeshMultiviewViewCount), void 0 !== data.meshOutputPerVertexGranularity && (s.meshOutputPerVertexGranularity = data.meshOutputPerVertexGranularity), void 0 !== data.meshOutputPerPrimitiveGranularity && (s.meshOutputPerPrimitiveGranularity = data.meshOutputPerPrimitiveGranularity), void 0 !== data.maxPreferredTaskWorkGroupInvocations && (s.maxPreferredTaskWorkGroupInvocations = data.maxPreferredTaskWorkGroupInvocations), void 0 !== data.maxPreferredMeshWorkGroupInvocations && (s.maxPreferredMeshWorkGroupInvocations = data.maxPreferredMeshWorkGroupInvocations), void 0 !== data.prefersLocalInvocationVertexOutput && (s.prefersLocalInvocationVertexOutput = data.prefersLocalInvocationVertexOutput), void 0 !== data.prefersLocalInvocationPrimitiveOutput && (s.prefersLocalInvocationPrimitiveOutput = data.prefersLocalInvocationPrimitiveOutput), void 0 !== data.prefersCompactVertexOutput && (s.prefersCompactVertexOutput = data.prefersCompactVertexOutput), void 0 !== data.prefersCompactPrimitiveOutput && (s.prefersCompactPrimitiveOutput = data.prefersCompactPrimitiveOutput), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxTaskWorkGroupTotalCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxTaskWorkGroupTotalCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxTaskWorkGroupCount() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(20 + 4 * i, LE));
        return result;
    }
    set maxTaskWorkGroupCount(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(20 + 4 * i, Number(value[i]), LE);
    }
    get maxTaskWorkGroupInvocations() {
        return this.#view.getUint32(32, LE);
    }
    set maxTaskWorkGroupInvocations(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxTaskWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(36 + 4 * i, LE));
        return result;
    }
    set maxTaskWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(36 + 4 * i, Number(value[i]), LE);
    }
    get maxTaskPayloadSize() {
        return this.#view.getUint32(48, LE);
    }
    set maxTaskPayloadSize(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxTaskSharedMemorySize() {
        return this.#view.getUint32(52, LE);
    }
    set maxTaskSharedMemorySize(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxTaskPayloadAndSharedMemorySize() {
        return this.#view.getUint32(56, LE);
    }
    set maxTaskPayloadAndSharedMemorySize(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxMeshWorkGroupTotalCount() {
        return this.#view.getUint32(60, LE);
    }
    set maxMeshWorkGroupTotalCount(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxMeshWorkGroupCount() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(64 + 4 * i, LE));
        return result;
    }
    set maxMeshWorkGroupCount(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(64 + 4 * i, Number(value[i]), LE);
    }
    get maxMeshWorkGroupInvocations() {
        return this.#view.getUint32(76, LE);
    }
    set maxMeshWorkGroupInvocations(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get maxMeshWorkGroupSize() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getUint32(80 + 4 * i, LE));
        return result;
    }
    set maxMeshWorkGroupSize(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(80 + 4 * i, Number(value[i]), LE);
    }
    get maxMeshSharedMemorySize() {
        return this.#view.getUint32(92, LE);
    }
    set maxMeshSharedMemorySize(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxMeshPayloadAndSharedMemorySize() {
        return this.#view.getUint32(96, LE);
    }
    set maxMeshPayloadAndSharedMemorySize(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxMeshOutputMemorySize() {
        return this.#view.getUint32(100, LE);
    }
    set maxMeshOutputMemorySize(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get maxMeshPayloadAndOutputMemorySize() {
        return this.#view.getUint32(104, LE);
    }
    set maxMeshPayloadAndOutputMemorySize(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get maxMeshOutputComponents() {
        return this.#view.getUint32(108, LE);
    }
    set maxMeshOutputComponents(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get maxMeshOutputVertices() {
        return this.#view.getUint32(112, LE);
    }
    set maxMeshOutputVertices(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get maxMeshOutputPrimitives() {
        return this.#view.getUint32(116, LE);
    }
    set maxMeshOutputPrimitives(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get maxMeshOutputLayers() {
        return this.#view.getUint32(120, LE);
    }
    set maxMeshOutputLayers(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get maxMeshMultiviewViewCount() {
        return this.#view.getUint32(124, LE);
    }
    set maxMeshMultiviewViewCount(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get meshOutputPerVertexGranularity() {
        return this.#view.getUint32(128, LE);
    }
    set meshOutputPerVertexGranularity(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get meshOutputPerPrimitiveGranularity() {
        return this.#view.getUint32(132, LE);
    }
    set meshOutputPerPrimitiveGranularity(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get maxPreferredTaskWorkGroupInvocations() {
        return this.#view.getUint32(136, LE);
    }
    set maxPreferredTaskWorkGroupInvocations(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get maxPreferredMeshWorkGroupInvocations() {
        return this.#view.getUint32(140, LE);
    }
    set maxPreferredMeshWorkGroupInvocations(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get prefersLocalInvocationVertexOutput() {
        return this.#view.getUint32(144, LE);
    }
    set prefersLocalInvocationVertexOutput(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get prefersLocalInvocationPrimitiveOutput() {
        return this.#view.getUint32(148, LE);
    }
    set prefersLocalInvocationPrimitiveOutput(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get prefersCompactVertexOutput() {
        return this.#view.getUint32(152, LE);
    }
    set prefersCompactVertexOutput(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get prefersCompactPrimitiveOutput() {
        return this.#view.getUint32(156, LE);
    }
    set prefersCompactPrimitiveOutput(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
}
export class VkDrawMeshTasksIndirectCommandEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrawMeshTasksIndirectCommandEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrawMeshTasksIndirectCommandEXT(new Uint8Array(VkDrawMeshTasksIndirectCommandEXT.size));
    }
    static create(data) {
        let s = VkDrawMeshTasksIndirectCommandEXT.alloc();
        return void 0 !== data.groupCountX && (s.groupCountX = data.groupCountX), void 0 !== data.groupCountY && (s.groupCountY = data.groupCountY), void 0 !== data.groupCountZ && (s.groupCountZ = data.groupCountZ), s;
    }
    get groupCountX() {
        return this.#view.getUint32(0, LE);
    }
    set groupCountX(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get groupCountY() {
        return this.#view.getUint32(4, LE);
    }
    set groupCountY(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get groupCountZ() {
        return this.#view.getUint32(8, LE);
    }
    set groupCountZ(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkRayTracingShaderGroupCreateInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRayTracingShaderGroupCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRayTracingShaderGroupCreateInfoNV(new Uint8Array(VkRayTracingShaderGroupCreateInfoNV.size));
    }
    static create(data) {
        let s = VkRayTracingShaderGroupCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.generalShader && (s.generalShader = data.generalShader), void 0 !== data.closestHitShader && (s.closestHitShader = data.closestHitShader), void 0 !== data.anyHitShader && (s.anyHitShader = data.anyHitShader), void 0 !== data.intersectionShader && (s.intersectionShader = data.intersectionShader), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get generalShader() {
        return this.#view.getUint32(20, LE);
    }
    set generalShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get closestHitShader() {
        return this.#view.getUint32(24, LE);
    }
    set closestHitShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get anyHitShader() {
        return this.#view.getUint32(28, LE);
    }
    set anyHitShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get intersectionShader() {
        return this.#view.getUint32(32, LE);
    }
    set intersectionShader(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkRayTracingShaderGroupCreateInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRayTracingShaderGroupCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRayTracingShaderGroupCreateInfoKHR(new Uint8Array(VkRayTracingShaderGroupCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkRayTracingShaderGroupCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.generalShader && (s.generalShader = data.generalShader), void 0 !== data.closestHitShader && (s.closestHitShader = data.closestHitShader), void 0 !== data.anyHitShader && (s.anyHitShader = data.anyHitShader), void 0 !== data.intersectionShader && (s.intersectionShader = data.intersectionShader), void 0 !== data.pShaderGroupCaptureReplayHandle && (s.pShaderGroupCaptureReplayHandle = data.pShaderGroupCaptureReplayHandle), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get generalShader() {
        return this.#view.getUint32(20, LE);
    }
    set generalShader(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get closestHitShader() {
        return this.#view.getUint32(24, LE);
    }
    set closestHitShader(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get anyHitShader() {
        return this.#view.getUint32(28, LE);
    }
    set anyHitShader(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get intersectionShader() {
        return this.#view.getUint32(32, LE);
    }
    set intersectionShader(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pShaderGroupCaptureReplayHandle() {
        return this.#view.getBigUint64(40, LE);
    }
    set pShaderGroupCaptureReplayHandle(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkRayTracingPipelineCreateInfoNV {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRayTracingPipelineCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRayTracingPipelineCreateInfoNV(new Uint8Array(VkRayTracingPipelineCreateInfoNV.size));
    }
    static create(data) {
        let s = VkRayTracingPipelineCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.stageCount && (s.stageCount = data.stageCount), void 0 !== data.pStages && (s.pStages = data.pStages), void 0 !== data.groupCount && (s.groupCount = data.groupCount), void 0 !== data.pGroups && (s.pGroups = data.pGroups), void 0 !== data.maxRecursionDepth && (s.maxRecursionDepth = data.maxRecursionDepth), void 0 !== data.layout && (s.layout = data.layout), void 0 !== data.basePipelineHandle && (s.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (s.basePipelineIndex = data.basePipelineIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get groupCount() {
        return this.#view.getUint32(32, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(40, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get maxRecursionDepth() {
        return this.#view.getUint32(48, LE);
    }
    set maxRecursionDepth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get layout() {
        return this.#view.getBigUint64(56, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(64, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(72, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(72, Number(value), LE);
    }
}
export class VkRayTracingPipelineCreateInfoKHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRayTracingPipelineCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRayTracingPipelineCreateInfoKHR(new Uint8Array(VkRayTracingPipelineCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkRayTracingPipelineCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.stageCount && (s.stageCount = data.stageCount), void 0 !== data.pStages && (s.pStages = data.pStages), void 0 !== data.groupCount && (s.groupCount = data.groupCount), void 0 !== data.pGroups && (s.pGroups = data.pGroups), void 0 !== data.maxPipelineRayRecursionDepth && (s.maxPipelineRayRecursionDepth = data.maxPipelineRayRecursionDepth), void 0 !== data.pLibraryInfo && (s.pLibraryInfo = data.pLibraryInfo), void 0 !== data.pLibraryInterface && (s.pLibraryInterface = data.pLibraryInterface), void 0 !== data.pDynamicState && (s.pDynamicState = data.pDynamicState), void 0 !== data.layout && (s.layout = data.layout), void 0 !== data.basePipelineHandle && (s.basePipelineHandle = data.basePipelineHandle), void 0 !== data.basePipelineIndex && (s.basePipelineIndex = data.basePipelineIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stageCount() {
        return this.#view.getUint32(20, LE);
    }
    set stageCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pStages() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStages(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get groupCount() {
        return this.#view.getUint32(32, LE);
    }
    set groupCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pGroups() {
        return this.#view.getBigUint64(40, LE);
    }
    set pGroups(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get maxPipelineRayRecursionDepth() {
        return this.#view.getUint32(48, LE);
    }
    set maxPipelineRayRecursionDepth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pLibraryInfo() {
        return this.#view.getBigUint64(56, LE);
    }
    set pLibraryInfo(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pLibraryInterface() {
        return this.#view.getBigUint64(64, LE);
    }
    set pLibraryInterface(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get pDynamicState() {
        return this.#view.getBigUint64(72, LE);
    }
    set pDynamicState(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get layout() {
        return this.#view.getBigUint64(80, LE);
    }
    set layout(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get basePipelineHandle() {
        return this.#view.getBigUint64(88, LE);
    }
    set basePipelineHandle(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get basePipelineIndex() {
        return this.#view.getInt32(96, LE);
    }
    set basePipelineIndex(value) {
        this.#view.setInt32(96, Number(value), LE);
    }
}
export class VkGeometryTrianglesNV {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeometryTrianglesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeometryTrianglesNV(new Uint8Array(VkGeometryTrianglesNV.size));
    }
    static create(data) {
        let s = VkGeometryTrianglesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexData && (s.vertexData = data.vertexData), void 0 !== data.vertexOffset && (s.vertexOffset = data.vertexOffset), void 0 !== data.vertexCount && (s.vertexCount = data.vertexCount), void 0 !== data.vertexStride && (s.vertexStride = data.vertexStride), void 0 !== data.vertexFormat && (s.vertexFormat = data.vertexFormat), void 0 !== data.indexData && (s.indexData = data.indexData), void 0 !== data.indexOffset && (s.indexOffset = data.indexOffset), void 0 !== data.indexCount && (s.indexCount = data.indexCount), void 0 !== data.indexType && (s.indexType = data.indexType), void 0 !== data.transformData && (s.transformData = data.transformData), void 0 !== data.transformOffset && (s.transformOffset = data.transformOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexData() {
        return this.#view.getBigUint64(16, LE);
    }
    set vertexData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get vertexOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set vertexOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get vertexCount() {
        return this.#view.getUint32(32, LE);
    }
    set vertexCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get vertexStride() {
        return this.#view.getBigUint64(40, LE);
    }
    set vertexStride(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get vertexFormat() {
        return this.#view.getUint32(48, LE);
    }
    set vertexFormat(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get indexData() {
        return this.#view.getBigUint64(56, LE);
    }
    set indexData(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get indexOffset() {
        return this.#view.getBigUint64(64, LE);
    }
    set indexOffset(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get indexCount() {
        return this.#view.getUint32(72, LE);
    }
    set indexCount(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(76, LE);
    }
    set indexType(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get transformData() {
        return this.#view.getBigUint64(80, LE);
    }
    set transformData(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get transformOffset() {
        return this.#view.getBigUint64(88, LE);
    }
    set transformOffset(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class VkGeometryAABBNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeometryAABBNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeometryAABBNV(new Uint8Array(VkGeometryAABBNV.size));
    }
    static create(data) {
        let s = VkGeometryAABBNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.aabbData && (s.aabbData = data.aabbData), void 0 !== data.numAABBs && (s.numAABBs = data.numAABBs), void 0 !== data.stride && (s.stride = data.stride), void 0 !== data.offset && (s.offset = data.offset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get aabbData() {
        return this.#view.getBigUint64(16, LE);
    }
    set aabbData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get numAABBs() {
        return this.#view.getUint32(24, LE);
    }
    set numAABBs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(28, LE);
    }
    set stride(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkGeometryDataNV {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeometryDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeometryDataNV(new Uint8Array(VkGeometryDataNV.size));
    }
    static create(data) {
        let s = VkGeometryDataNV.alloc();
        return void 0 !== data.triangles && (s.triangles = data.triangles), void 0 !== data.aabbs && (s.aabbs = data.aabbs), s;
    }
    get triangles() {
        return new VkGeometryTrianglesNV(this.#data.subarray(0, 0 + VkGeometryTrianglesNV.size));
    }
    set triangles(value) {
        if (value[BUFFER].byteLength < VkGeometryTrianglesNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get aabbs() {
        return new VkGeometryAABBNV(this.#data.subarray(96, 96 + VkGeometryAABBNV.size));
    }
    set aabbs(value) {
        if (value[BUFFER].byteLength < VkGeometryAABBNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 96);
    }
}
export class VkGeometryNV {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGeometryNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGeometryNV(new Uint8Array(VkGeometryNV.size));
    }
    static create(data) {
        let s = VkGeometryNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GEOMETRY_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.geometryType && (s.geometryType = data.geometryType), void 0 !== data.geometry && (s.geometry = data.geometry), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get geometryType() {
        return this.#view.getUint32(16, LE);
    }
    set geometryType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometry() {
        return new VkGeometryDataNV(this.#data.subarray(20, 20 + VkGeometryDataNV.size));
    }
    set geometry(value) {
        if (value[BUFFER].byteLength < VkGeometryDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get flags() {
        return this.#view.getUint32(156, LE);
    }
    set flags(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
}
export class VkAccelerationStructureInfoNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureInfoNV(new Uint8Array(VkAccelerationStructureInfoNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.instanceCount && (s.instanceCount = data.instanceCount), void 0 !== data.geometryCount && (s.geometryCount = data.geometryCount), void 0 !== data.pGeometries && (s.pGeometries = data.pGeometries), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get instanceCount() {
        return this.#view.getUint32(24, LE);
    }
    set instanceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get geometryCount() {
        return this.#view.getUint32(28, LE);
    }
    set geometryCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pGeometries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pGeometries(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkAccelerationStructureCreateInfoNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureCreateInfoNV(new Uint8Array(VkAccelerationStructureCreateInfoNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.compactedSize && (s.compactedSize = data.compactedSize), void 0 !== data.info && (s.info = data.info), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get compactedSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set compactedSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get info() {
        return new VkAccelerationStructureInfoNV(this.#data.subarray(24, 24 + VkAccelerationStructureInfoNV.size));
    }
    set info(value) {
        if (value[BUFFER].byteLength < VkAccelerationStructureInfoNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class VkBindAccelerationStructureMemoryInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindAccelerationStructureMemoryInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindAccelerationStructureMemoryInfoNV(new Uint8Array(VkBindAccelerationStructureMemoryInfoNV.size));
    }
    static create(data) {
        let s = VkBindAccelerationStructureMemoryInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructure && (s.accelerationStructure = data.accelerationStructure), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), void 0 !== data.deviceIndexCount && (s.deviceIndexCount = data.deviceIndexCount), void 0 !== data.pDeviceIndices && (s.pDeviceIndices = data.pDeviceIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get deviceIndexCount() {
        return this.#view.getUint32(40, LE);
    }
    set deviceIndexCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pDeviceIndices() {
        return this.#view.getBigUint64(48, LE);
    }
    set pDeviceIndices(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkWriteDescriptorSetAccelerationStructureKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWriteDescriptorSetAccelerationStructureKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWriteDescriptorSetAccelerationStructureKHR(new Uint8Array(VkWriteDescriptorSetAccelerationStructureKHR.size));
    }
    static create(data) {
        let s = VkWriteDescriptorSetAccelerationStructureKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructureCount && (s.accelerationStructureCount = data.accelerationStructureCount), void 0 !== data.pAccelerationStructures && (s.pAccelerationStructures = data.pAccelerationStructures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructureCount() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAccelerationStructures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAccelerationStructures(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkWriteDescriptorSetAccelerationStructureNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkWriteDescriptorSetAccelerationStructureNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkWriteDescriptorSetAccelerationStructureNV(new Uint8Array(VkWriteDescriptorSetAccelerationStructureNV.size));
    }
    static create(data) {
        let s = VkWriteDescriptorSetAccelerationStructureNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructureCount && (s.accelerationStructureCount = data.accelerationStructureCount), void 0 !== data.pAccelerationStructures && (s.pAccelerationStructures = data.pAccelerationStructures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructureCount() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructureCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAccelerationStructures() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAccelerationStructures(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkAccelerationStructureMemoryRequirementsInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureMemoryRequirementsInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureMemoryRequirementsInfoNV(new Uint8Array(VkAccelerationStructureMemoryRequirementsInfoNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureMemoryRequirementsInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.accelerationStructure && (s.accelerationStructure = data.accelerationStructure), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceAccelerationStructureFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceAccelerationStructureFeaturesKHR(new Uint8Array(VkPhysicalDeviceAccelerationStructureFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceAccelerationStructureFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructure && (s.accelerationStructure = data.accelerationStructure), void 0 !== data.accelerationStructureCaptureReplay && (s.accelerationStructureCaptureReplay = data.accelerationStructureCaptureReplay), void 0 !== data.accelerationStructureIndirectBuild && (s.accelerationStructureIndirectBuild = data.accelerationStructureIndirectBuild), void 0 !== data.accelerationStructureHostCommands && (s.accelerationStructureHostCommands = data.accelerationStructureHostCommands), void 0 !== data.descriptorBindingAccelerationStructureUpdateAfterBind && (s.descriptorBindingAccelerationStructureUpdateAfterBind = data.descriptorBindingAccelerationStructureUpdateAfterBind), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getUint32(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructureCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set accelerationStructureCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get accelerationStructureIndirectBuild() {
        return this.#view.getUint32(24, LE);
    }
    set accelerationStructureIndirectBuild(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get accelerationStructureHostCommands() {
        return this.#view.getUint32(28, LE);
    }
    set accelerationStructureHostCommands(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get descriptorBindingAccelerationStructureUpdateAfterBind() {
        return this.#view.getUint32(32, LE);
    }
    set descriptorBindingAccelerationStructureUpdateAfterBind(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingPipelineFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingPipelineFeaturesKHR(new Uint8Array(VkPhysicalDeviceRayTracingPipelineFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingPipelineFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayTracingPipeline && (s.rayTracingPipeline = data.rayTracingPipeline), void 0 !== data.rayTracingPipelineShaderGroupHandleCaptureReplay && (s.rayTracingPipelineShaderGroupHandleCaptureReplay = data.rayTracingPipelineShaderGroupHandleCaptureReplay), void 0 !== data.rayTracingPipelineShaderGroupHandleCaptureReplayMixed && (s.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = data.rayTracingPipelineShaderGroupHandleCaptureReplayMixed), void 0 !== data.rayTracingPipelineTraceRaysIndirect && (s.rayTracingPipelineTraceRaysIndirect = data.rayTracingPipelineTraceRaysIndirect), void 0 !== data.rayTraversalPrimitiveCulling && (s.rayTraversalPrimitiveCulling = data.rayTraversalPrimitiveCulling), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayTracingPipeline() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingPipeline(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingPipelineShaderGroupHandleCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingPipelineShaderGroupHandleCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rayTracingPipelineShaderGroupHandleCaptureReplayMixed() {
        return this.#view.getUint32(24, LE);
    }
    set rayTracingPipelineShaderGroupHandleCaptureReplayMixed(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rayTracingPipelineTraceRaysIndirect() {
        return this.#view.getUint32(28, LE);
    }
    set rayTracingPipelineTraceRaysIndirect(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get rayTraversalPrimitiveCulling() {
        return this.#view.getUint32(32, LE);
    }
    set rayTraversalPrimitiveCulling(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayQueryFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayQueryFeaturesKHR(new Uint8Array(VkPhysicalDeviceRayQueryFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayQueryFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayQuery && (s.rayQuery = data.rayQuery), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayQuery() {
        return this.#view.getUint32(16, LE);
    }
    set rayQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceAccelerationStructurePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceAccelerationStructurePropertiesKHR(new Uint8Array(VkPhysicalDeviceAccelerationStructurePropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceAccelerationStructurePropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxGeometryCount && (s.maxGeometryCount = data.maxGeometryCount), void 0 !== data.maxInstanceCount && (s.maxInstanceCount = data.maxInstanceCount), void 0 !== data.maxPrimitiveCount && (s.maxPrimitiveCount = data.maxPrimitiveCount), void 0 !== data.maxPerStageDescriptorAccelerationStructures && (s.maxPerStageDescriptorAccelerationStructures = data.maxPerStageDescriptorAccelerationStructures), void 0 !== data.maxPerStageDescriptorUpdateAfterBindAccelerationStructures && (s.maxPerStageDescriptorUpdateAfterBindAccelerationStructures = data.maxPerStageDescriptorUpdateAfterBindAccelerationStructures), void 0 !== data.maxDescriptorSetAccelerationStructures && (s.maxDescriptorSetAccelerationStructures = data.maxDescriptorSetAccelerationStructures), void 0 !== data.maxDescriptorSetUpdateAfterBindAccelerationStructures && (s.maxDescriptorSetUpdateAfterBindAccelerationStructures = data.maxDescriptorSetUpdateAfterBindAccelerationStructures), void 0 !== data.minAccelerationStructureScratchOffsetAlignment && (s.minAccelerationStructureScratchOffsetAlignment = data.minAccelerationStructureScratchOffsetAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxGeometryCount() {
        return this.#view.getBigUint64(16, LE);
    }
    set maxGeometryCount(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get maxInstanceCount() {
        return this.#view.getBigUint64(24, LE);
    }
    set maxInstanceCount(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get maxPrimitiveCount() {
        return this.#view.getBigUint64(32, LE);
    }
    set maxPrimitiveCount(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxPerStageDescriptorAccelerationStructures() {
        return this.#view.getUint32(40, LE);
    }
    set maxPerStageDescriptorAccelerationStructures(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindAccelerationStructures() {
        return this.#view.getUint32(44, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindAccelerationStructures(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDescriptorSetAccelerationStructures() {
        return this.#view.getUint32(48, LE);
    }
    set maxDescriptorSetAccelerationStructures(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindAccelerationStructures() {
        return this.#view.getUint32(52, LE);
    }
    set maxDescriptorSetUpdateAfterBindAccelerationStructures(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get minAccelerationStructureScratchOffsetAlignment() {
        return this.#view.getUint32(56, LE);
    }
    set minAccelerationStructureScratchOffsetAlignment(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingPipelinePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingPipelinePropertiesKHR(new Uint8Array(VkPhysicalDeviceRayTracingPipelinePropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingPipelinePropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderGroupHandleSize && (s.shaderGroupHandleSize = data.shaderGroupHandleSize), void 0 !== data.maxRayRecursionDepth && (s.maxRayRecursionDepth = data.maxRayRecursionDepth), void 0 !== data.maxShaderGroupStride && (s.maxShaderGroupStride = data.maxShaderGroupStride), void 0 !== data.shaderGroupBaseAlignment && (s.shaderGroupBaseAlignment = data.shaderGroupBaseAlignment), void 0 !== data.shaderGroupHandleCaptureReplaySize && (s.shaderGroupHandleCaptureReplaySize = data.shaderGroupHandleCaptureReplaySize), void 0 !== data.maxRayDispatchInvocationCount && (s.maxRayDispatchInvocationCount = data.maxRayDispatchInvocationCount), void 0 !== data.shaderGroupHandleAlignment && (s.shaderGroupHandleAlignment = data.shaderGroupHandleAlignment), void 0 !== data.maxRayHitAttributeSize && (s.maxRayHitAttributeSize = data.maxRayHitAttributeSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderGroupHandleSize() {
        return this.#view.getUint32(16, LE);
    }
    set shaderGroupHandleSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxRayRecursionDepth() {
        return this.#view.getUint32(20, LE);
    }
    set maxRayRecursionDepth(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxShaderGroupStride() {
        return this.#view.getUint32(24, LE);
    }
    set maxShaderGroupStride(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderGroupBaseAlignment() {
        return this.#view.getUint32(28, LE);
    }
    set shaderGroupBaseAlignment(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get shaderGroupHandleCaptureReplaySize() {
        return this.#view.getUint32(32, LE);
    }
    set shaderGroupHandleCaptureReplaySize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxRayDispatchInvocationCount() {
        return this.#view.getUint32(36, LE);
    }
    set maxRayDispatchInvocationCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderGroupHandleAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set shaderGroupHandleAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxRayHitAttributeSize() {
        return this.#view.getUint32(44, LE);
    }
    set maxRayHitAttributeSize(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingPropertiesNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingPropertiesNV(new Uint8Array(VkPhysicalDeviceRayTracingPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderGroupHandleSize && (s.shaderGroupHandleSize = data.shaderGroupHandleSize), void 0 !== data.maxRecursionDepth && (s.maxRecursionDepth = data.maxRecursionDepth), void 0 !== data.maxShaderGroupStride && (s.maxShaderGroupStride = data.maxShaderGroupStride), void 0 !== data.shaderGroupBaseAlignment && (s.shaderGroupBaseAlignment = data.shaderGroupBaseAlignment), void 0 !== data.maxGeometryCount && (s.maxGeometryCount = data.maxGeometryCount), void 0 !== data.maxInstanceCount && (s.maxInstanceCount = data.maxInstanceCount), void 0 !== data.maxTriangleCount && (s.maxTriangleCount = data.maxTriangleCount), void 0 !== data.maxDescriptorSetAccelerationStructures && (s.maxDescriptorSetAccelerationStructures = data.maxDescriptorSetAccelerationStructures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderGroupHandleSize() {
        return this.#view.getUint32(16, LE);
    }
    set shaderGroupHandleSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxRecursionDepth() {
        return this.#view.getUint32(20, LE);
    }
    set maxRecursionDepth(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxShaderGroupStride() {
        return this.#view.getUint32(24, LE);
    }
    set maxShaderGroupStride(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderGroupBaseAlignment() {
        return this.#view.getUint32(28, LE);
    }
    set shaderGroupBaseAlignment(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxGeometryCount() {
        return this.#view.getBigUint64(32, LE);
    }
    set maxGeometryCount(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxInstanceCount() {
        return this.#view.getBigUint64(40, LE);
    }
    set maxInstanceCount(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get maxTriangleCount() {
        return this.#view.getBigUint64(48, LE);
    }
    set maxTriangleCount(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get maxDescriptorSetAccelerationStructures() {
        return this.#view.getUint32(56, LE);
    }
    set maxDescriptorSetAccelerationStructures(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkStridedDeviceAddressRegionKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkStridedDeviceAddressRegionKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkStridedDeviceAddressRegionKHR(new Uint8Array(VkStridedDeviceAddressRegionKHR.size));
    }
    static create(data) {
        let s = VkStridedDeviceAddressRegionKHR.alloc();
        return void 0 !== data.deviceAddress && (s.deviceAddress = data.deviceAddress), void 0 !== data.stride && (s.stride = data.stride), void 0 !== data.size && (s.size = data.size), s;
    }
    get deviceAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get stride() {
        return this.#view.getBigUint64(8, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(16, LE);
    }
    set size(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkTraceRaysIndirectCommandKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTraceRaysIndirectCommandKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTraceRaysIndirectCommandKHR(new Uint8Array(VkTraceRaysIndirectCommandKHR.size));
    }
    static create(data) {
        let s = VkTraceRaysIndirectCommandKHR.alloc();
        return void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.depth && (s.depth = data.depth), s;
    }
    get width() {
        return this.#view.getUint32(0, LE);
    }
    set width(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(4, LE);
    }
    set height(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(8, LE);
    }
    set depth(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkTraceRaysIndirectCommand2KHR {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTraceRaysIndirectCommand2KHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTraceRaysIndirectCommand2KHR(new Uint8Array(VkTraceRaysIndirectCommand2KHR.size));
    }
    static create(data) {
        let s = VkTraceRaysIndirectCommand2KHR.alloc();
        return void 0 !== data.raygenShaderRecordAddress && (s.raygenShaderRecordAddress = data.raygenShaderRecordAddress), void 0 !== data.raygenShaderRecordSize && (s.raygenShaderRecordSize = data.raygenShaderRecordSize), void 0 !== data.missShaderBindingTableAddress && (s.missShaderBindingTableAddress = data.missShaderBindingTableAddress), void 0 !== data.missShaderBindingTableSize && (s.missShaderBindingTableSize = data.missShaderBindingTableSize), void 0 !== data.missShaderBindingTableStride && (s.missShaderBindingTableStride = data.missShaderBindingTableStride), void 0 !== data.hitShaderBindingTableAddress && (s.hitShaderBindingTableAddress = data.hitShaderBindingTableAddress), void 0 !== data.hitShaderBindingTableSize && (s.hitShaderBindingTableSize = data.hitShaderBindingTableSize), void 0 !== data.hitShaderBindingTableStride && (s.hitShaderBindingTableStride = data.hitShaderBindingTableStride), void 0 !== data.callableShaderBindingTableAddress && (s.callableShaderBindingTableAddress = data.callableShaderBindingTableAddress), void 0 !== data.callableShaderBindingTableSize && (s.callableShaderBindingTableSize = data.callableShaderBindingTableSize), void 0 !== data.callableShaderBindingTableStride && (s.callableShaderBindingTableStride = data.callableShaderBindingTableStride), void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.depth && (s.depth = data.depth), s;
    }
    get raygenShaderRecordAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set raygenShaderRecordAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get raygenShaderRecordSize() {
        return this.#view.getBigUint64(8, LE);
    }
    set raygenShaderRecordSize(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get missShaderBindingTableAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set missShaderBindingTableAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get missShaderBindingTableSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set missShaderBindingTableSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get missShaderBindingTableStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set missShaderBindingTableStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get hitShaderBindingTableAddress() {
        return this.#view.getBigUint64(40, LE);
    }
    set hitShaderBindingTableAddress(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get hitShaderBindingTableSize() {
        return this.#view.getBigUint64(48, LE);
    }
    set hitShaderBindingTableSize(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get hitShaderBindingTableStride() {
        return this.#view.getBigUint64(56, LE);
    }
    set hitShaderBindingTableStride(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get callableShaderBindingTableAddress() {
        return this.#view.getBigUint64(64, LE);
    }
    set callableShaderBindingTableAddress(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get callableShaderBindingTableSize() {
        return this.#view.getBigUint64(72, LE);
    }
    set callableShaderBindingTableSize(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get callableShaderBindingTableStride() {
        return this.#view.getBigUint64(80, LE);
    }
    set callableShaderBindingTableStride(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get width() {
        return this.#view.getUint32(88, LE);
    }
    set width(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(92, LE);
    }
    set height(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get depth() {
        return this.#view.getUint32(96, LE);
    }
    set depth(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(new Uint8Array(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayTracingMaintenance1 && (s.rayTracingMaintenance1 = data.rayTracingMaintenance1), void 0 !== data.rayTracingPipelineTraceRaysIndirect2 && (s.rayTracingPipelineTraceRaysIndirect2 = data.rayTracingPipelineTraceRaysIndirect2), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayTracingMaintenance1() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingMaintenance1(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingPipelineTraceRaysIndirect2() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingPipelineTraceRaysIndirect2(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkDrmFormatModifierPropertiesListEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrmFormatModifierPropertiesListEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrmFormatModifierPropertiesListEXT(new Uint8Array(VkDrmFormatModifierPropertiesListEXT.size));
    }
    static create(data) {
        let s = VkDrmFormatModifierPropertiesListEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (s.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifierProperties && (s.pDrmFormatModifierProperties = data.pDrmFormatModifierProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifierProperties() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifierProperties(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDrmFormatModifierPropertiesEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrmFormatModifierPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrmFormatModifierPropertiesEXT(new Uint8Array(VkDrmFormatModifierPropertiesEXT.size));
    }
    static create(data) {
        let s = VkDrmFormatModifierPropertiesEXT.alloc();
        return void 0 !== data.drmFormatModifier && (s.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (s.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.drmFormatModifierTilingFeatures && (s.drmFormatModifierTilingFeatures = data.drmFormatModifierTilingFeatures), s;
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(0, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(8, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get drmFormatModifierTilingFeatures() {
        return this.#view.getUint32(12, LE);
    }
    set drmFormatModifierTilingFeatures(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageDrmFormatModifierInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageDrmFormatModifierInfoEXT(new Uint8Array(VkPhysicalDeviceImageDrmFormatModifierInfoEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageDrmFormatModifierInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifier && (s.drmFormatModifier = data.drmFormatModifier), void 0 !== data.sharingMode && (s.sharingMode = data.sharingMode), void 0 !== data.queueFamilyIndexCount && (s.queueFamilyIndexCount = data.queueFamilyIndexCount), void 0 !== data.pQueueFamilyIndices && (s.pQueueFamilyIndices = data.pQueueFamilyIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get sharingMode() {
        return this.#view.getUint32(24, LE);
    }
    set sharingMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get queueFamilyIndexCount() {
        return this.#view.getUint32(28, LE);
    }
    set queueFamilyIndexCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get pQueueFamilyIndices() {
        return this.#view.getBigUint64(32, LE);
    }
    set pQueueFamilyIndices(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageDrmFormatModifierListCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageDrmFormatModifierListCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageDrmFormatModifierListCreateInfoEXT(new Uint8Array(VkImageDrmFormatModifierListCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkImageDrmFormatModifierListCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (s.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifiers && (s.pDrmFormatModifiers = data.pDrmFormatModifiers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifiers() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifiers(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkImageDrmFormatModifierExplicitCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageDrmFormatModifierExplicitCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageDrmFormatModifierExplicitCreateInfoEXT(new Uint8Array(VkImageDrmFormatModifierExplicitCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkImageDrmFormatModifierExplicitCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifier && (s.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (s.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.pPlaneLayouts && (s.pPlaneLayouts = data.pPlaneLayouts), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(24, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPlaneLayouts() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPlaneLayouts(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageDrmFormatModifierPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageDrmFormatModifierPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageDrmFormatModifierPropertiesEXT(new Uint8Array(VkImageDrmFormatModifierPropertiesEXT.size));
    }
    static create(data) {
        let s = VkImageDrmFormatModifierPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifier && (s.drmFormatModifier = data.drmFormatModifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkImageStencilUsageCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageStencilUsageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageStencilUsageCreateInfo(new Uint8Array(VkImageStencilUsageCreateInfo.size));
    }
    static create(data) {
        let s = VkImageStencilUsageCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stencilUsage && (s.stencilUsage = data.stencilUsage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stencilUsage() {
        return this.#view.getUint32(16, LE);
    }
    set stencilUsage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceMemoryOverallocationCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceMemoryOverallocationCreateInfoAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceMemoryOverallocationCreateInfoAMD(new Uint8Array(VkDeviceMemoryOverallocationCreateInfoAMD.size));
    }
    static create(data) {
        let s = VkDeviceMemoryOverallocationCreateInfoAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.overallocationBehavior && (s.overallocationBehavior = data.overallocationBehavior), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get overallocationBehavior() {
        return this.#view.getUint32(16, LE);
    }
    set overallocationBehavior(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMapFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMapFeaturesEXT(new Uint8Array(VkPhysicalDeviceFragmentDensityMapFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMapFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityMap && (s.fragmentDensityMap = data.fragmentDensityMap), void 0 !== data.fragmentDensityMapDynamic && (s.fragmentDensityMapDynamic = data.fragmentDensityMapDynamic), void 0 !== data.fragmentDensityMapNonSubsampledImages && (s.fragmentDensityMapNonSubsampledImages = data.fragmentDensityMapNonSubsampledImages), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityMap() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentDensityMapDynamic() {
        return this.#view.getUint32(20, LE);
    }
    set fragmentDensityMapDynamic(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get fragmentDensityMapNonSubsampledImages() {
        return this.#view.getUint32(24, LE);
    }
    set fragmentDensityMapNonSubsampledImages(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(new Uint8Array(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityMapDeferred && (s.fragmentDensityMapDeferred = data.fragmentDensityMapDeferred), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityMapDeferred() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMapDeferred(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(new Uint8Array(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityMapOffset && (s.fragmentDensityMapOffset = data.fragmentDensityMapOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityMapOffset() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityMapOffset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMapPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMapPropertiesEXT(new Uint8Array(VkPhysicalDeviceFragmentDensityMapPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMapPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minFragmentDensityTexelSize && (s.minFragmentDensityTexelSize = data.minFragmentDensityTexelSize), void 0 !== data.maxFragmentDensityTexelSize && (s.maxFragmentDensityTexelSize = data.maxFragmentDensityTexelSize), void 0 !== data.fragmentDensityInvocations && (s.fragmentDensityInvocations = data.fragmentDensityInvocations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minFragmentDensityTexelSize() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set minFragmentDensityTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxFragmentDensityTexelSize() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set maxFragmentDensityTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get fragmentDensityInvocations() {
        return this.#view.getUint32(32, LE);
    }
    set fragmentDensityInvocations(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(new Uint8Array(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subsampledLoads && (s.subsampledLoads = data.subsampledLoads), void 0 !== data.subsampledCoarseReconstructionEarlyAccess && (s.subsampledCoarseReconstructionEarlyAccess = data.subsampledCoarseReconstructionEarlyAccess), void 0 !== data.maxSubsampledArrayLayers && (s.maxSubsampledArrayLayers = data.maxSubsampledArrayLayers), void 0 !== data.maxDescriptorSetSubsampledSamplers && (s.maxDescriptorSetSubsampledSamplers = data.maxDescriptorSetSubsampledSamplers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subsampledLoads() {
        return this.#view.getUint32(16, LE);
    }
    set subsampledLoads(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get subsampledCoarseReconstructionEarlyAccess() {
        return this.#view.getUint32(20, LE);
    }
    set subsampledCoarseReconstructionEarlyAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxSubsampledArrayLayers() {
        return this.#view.getUint32(24, LE);
    }
    set maxSubsampledArrayLayers(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxDescriptorSetSubsampledSamplers() {
        return this.#view.getUint32(28, LE);
    }
    set maxDescriptorSetSubsampledSamplers(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(new Uint8Array(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityOffsetGranularity && (s.fragmentDensityOffsetGranularity = data.fragmentDensityOffsetGranularity), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityOffsetGranularity() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set fragmentDensityOffsetGranularity(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkRenderPassFragmentDensityMapCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassFragmentDensityMapCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassFragmentDensityMapCreateInfoEXT(new Uint8Array(VkRenderPassFragmentDensityMapCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassFragmentDensityMapCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityMapAttachment && (s.fragmentDensityMapAttachment = data.fragmentDensityMapAttachment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityMapAttachment() {
        return new VkAttachmentReference(this.#data.subarray(16, 16 + VkAttachmentReference.size));
    }
    set fragmentDensityMapAttachment(value) {
        if (value[BUFFER].byteLength < VkAttachmentReference.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassFragmentDensityMapOffsetEndInfoQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassFragmentDensityMapOffsetEndInfoQCOM(new Uint8Array(VkSubpassFragmentDensityMapOffsetEndInfoQCOM.size));
    }
    static create(data) {
        let s = VkSubpassFragmentDensityMapOffsetEndInfoQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentDensityOffsetCount && (s.fragmentDensityOffsetCount = data.fragmentDensityOffsetCount), void 0 !== data.pFragmentDensityOffsets && (s.pFragmentDensityOffsets = data.pFragmentDensityOffsets), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentDensityOffsetCount() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentDensityOffsetCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pFragmentDensityOffsets() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFragmentDensityOffsets(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceScalarBlockLayoutFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceScalarBlockLayoutFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceScalarBlockLayoutFeatures(new Uint8Array(VkPhysicalDeviceScalarBlockLayoutFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceScalarBlockLayoutFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.scalarBlockLayout && (s.scalarBlockLayout = data.scalarBlockLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get scalarBlockLayout() {
        return this.#view.getUint32(16, LE);
    }
    set scalarBlockLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSurfaceProtectedCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceProtectedCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceProtectedCapabilitiesKHR(new Uint8Array(VkSurfaceProtectedCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkSurfaceProtectedCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supportsProtected && (s.supportsProtected = data.supportsProtected), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supportsProtected() {
        return this.#view.getUint32(16, LE);
    }
    set supportsProtected(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceUniformBufferStandardLayoutFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceUniformBufferStandardLayoutFeatures(new Uint8Array(VkPhysicalDeviceUniformBufferStandardLayoutFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceUniformBufferStandardLayoutFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.uniformBufferStandardLayout && (s.uniformBufferStandardLayout = data.uniformBufferStandardLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get uniformBufferStandardLayout() {
        return this.#view.getUint32(16, LE);
    }
    set uniformBufferStandardLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDepthClipEnableFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDepthClipEnableFeaturesEXT(new Uint8Array(VkPhysicalDeviceDepthClipEnableFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDepthClipEnableFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.depthClipEnable && (s.depthClipEnable = data.depthClipEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get depthClipEnable() {
        return this.#view.getUint32(16, LE);
    }
    set depthClipEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationDepthClipStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationDepthClipStateCreateInfoEXT(new Uint8Array(VkPipelineRasterizationDepthClipStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationDepthClipStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.depthClipEnable && (s.depthClipEnable = data.depthClipEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get depthClipEnable() {
        return this.#view.getUint32(20, LE);
    }
    set depthClipEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    static size = 272;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryBudgetPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryBudgetPropertiesEXT(new Uint8Array(VkPhysicalDeviceMemoryBudgetPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryBudgetPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.heapBudget && (s.heapBudget = data.heapBudget), void 0 !== data.heapUsage && (s.heapUsage = data.heapUsage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get heapBudget() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getBigUint64(16 + 8 * i, LE));
        return result;
    }
    set heapBudget(value) {
        for(let i = 0; i < value.length; i++)this.#view.setBigUint64(16 + 8 * i, BigInt(value[i]), LE);
    }
    get heapUsage() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getBigUint64(144 + 8 * i, LE));
        return result;
    }
    set heapUsage(value) {
        for(let i = 0; i < value.length; i++)this.#view.setBigUint64(144 + 8 * i, BigInt(value[i]), LE);
    }
}
export class VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMemoryPriorityFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMemoryPriorityFeaturesEXT(new Uint8Array(VkPhysicalDeviceMemoryPriorityFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMemoryPriorityFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryPriority && (s.memoryPriority = data.memoryPriority), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryPriority() {
        return this.#view.getUint32(16, LE);
    }
    set memoryPriority(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryPriorityAllocateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryPriorityAllocateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryPriorityAllocateInfoEXT(new Uint8Array(VkMemoryPriorityAllocateInfoEXT.size));
    }
    static create(data) {
        let s = VkMemoryPriorityAllocateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.priority && (s.priority = data.priority), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get priority() {
        return this.#view.getFloat32(16, LE);
    }
    set priority(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(new Uint8Array(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pageableDeviceLocalMemory && (s.pageableDeviceLocalMemory = data.pageableDeviceLocalMemory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pageableDeviceLocalMemory() {
        return this.#view.getUint32(16, LE);
    }
    set pageableDeviceLocalMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceBufferDeviceAddressFeatures {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceBufferDeviceAddressFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceBufferDeviceAddressFeatures(new Uint8Array(VkPhysicalDeviceBufferDeviceAddressFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceBufferDeviceAddressFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.bufferDeviceAddress && (s.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (s.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (s.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(16, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(24, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(new Uint8Array(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.bufferDeviceAddress && (s.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (s.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (s.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(16, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(24, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkBufferDeviceAddressInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferDeviceAddressInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferDeviceAddressInfo(new Uint8Array(VkBufferDeviceAddressInfo.size));
    }
    static create(data) {
        let s = VkBufferDeviceAddressInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkBufferOpaqueCaptureAddressCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferOpaqueCaptureAddressCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferOpaqueCaptureAddressCreateInfo(new Uint8Array(VkBufferOpaqueCaptureAddressCreateInfo.size));
    }
    static create(data) {
        let s = VkBufferOpaqueCaptureAddressCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.opaqueCaptureAddress && (s.opaqueCaptureAddress = data.opaqueCaptureAddress), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get opaqueCaptureAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkBufferDeviceAddressCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferDeviceAddressCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferDeviceAddressCreateInfoEXT(new Uint8Array(VkBufferDeviceAddressCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkBufferDeviceAddressCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceAddress && (s.deviceAddress = data.deviceAddress), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceImageViewImageFormatInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageViewImageFormatInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageViewImageFormatInfoEXT(new Uint8Array(VkPhysicalDeviceImageViewImageFormatInfoEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageViewImageFormatInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageViewType && (s.imageViewType = data.imageViewType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageViewType() {
        return this.#view.getUint32(16, LE);
    }
    set imageViewType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkFilterCubicImageViewImageFormatPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFilterCubicImageViewImageFormatPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFilterCubicImageViewImageFormatPropertiesEXT(new Uint8Array(VkFilterCubicImageViewImageFormatPropertiesEXT.size));
    }
    static create(data) {
        let s = VkFilterCubicImageViewImageFormatPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.filterCubic && (s.filterCubic = data.filterCubic), void 0 !== data.filterCubicMinmax && (s.filterCubicMinmax = data.filterCubicMinmax), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get filterCubic() {
        return this.#view.getUint32(16, LE);
    }
    set filterCubic(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get filterCubicMinmax() {
        return this.#view.getUint32(20, LE);
    }
    set filterCubicMinmax(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceImagelessFramebufferFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImagelessFramebufferFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImagelessFramebufferFeatures(new Uint8Array(VkPhysicalDeviceImagelessFramebufferFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImagelessFramebufferFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imagelessFramebuffer && (s.imagelessFramebuffer = data.imagelessFramebuffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imagelessFramebuffer() {
        return this.#view.getUint32(16, LE);
    }
    set imagelessFramebuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkFramebufferAttachmentsCreateInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFramebufferAttachmentsCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFramebufferAttachmentsCreateInfo(new Uint8Array(VkFramebufferAttachmentsCreateInfo.size));
    }
    static create(data) {
        let s = VkFramebufferAttachmentsCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachmentImageInfoCount && (s.attachmentImageInfoCount = data.attachmentImageInfoCount), void 0 !== data.pAttachmentImageInfos && (s.pAttachmentImageInfos = data.pAttachmentImageInfos), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachmentImageInfoCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentImageInfoCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachmentImageInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachmentImageInfos(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkFramebufferAttachmentImageInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFramebufferAttachmentImageInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFramebufferAttachmentImageInfo(new Uint8Array(VkFramebufferAttachmentImageInfo.size));
    }
    static create(data) {
        let s = VkFramebufferAttachmentImageInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.usage && (s.usage = data.usage), void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.layerCount && (s.layerCount = data.layerCount), void 0 !== data.viewFormatCount && (s.viewFormatCount = data.viewFormatCount), void 0 !== data.pViewFormats && (s.pViewFormats = data.pViewFormats), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get usage() {
        return this.#view.getUint32(20, LE);
    }
    set usage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get width() {
        return this.#view.getUint32(24, LE);
    }
    set width(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(28, LE);
    }
    set height(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint32(32, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get viewFormatCount() {
        return this.#view.getUint32(36, LE);
    }
    set viewFormatCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pViewFormats() {
        return this.#view.getBigUint64(40, LE);
    }
    set pViewFormats(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkRenderPassAttachmentBeginInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassAttachmentBeginInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassAttachmentBeginInfo(new Uint8Array(VkRenderPassAttachmentBeginInfo.size));
    }
    static create(data) {
        let s = VkRenderPassAttachmentBeginInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pAttachments && (s.pAttachments = data.pAttachments), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pAttachments() {
        return this.#view.getBigUint64(24, LE);
    }
    set pAttachments(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTextureCompressionASTCHDRFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTextureCompressionASTCHDRFeatures(new Uint8Array(VkPhysicalDeviceTextureCompressionASTCHDRFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTextureCompressionASTCHDRFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.textureCompressionASTC_HDR && (s.textureCompressionASTC_HDR = data.textureCompressionASTC_HDR), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get textureCompressionASTC_HDR() {
        return this.#view.getUint32(16, LE);
    }
    set textureCompressionASTC_HDR(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCooperativeMatrixFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCooperativeMatrixFeaturesNV(new Uint8Array(VkPhysicalDeviceCooperativeMatrixFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCooperativeMatrixFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.cooperativeMatrix && (s.cooperativeMatrix = data.cooperativeMatrix), void 0 !== data.cooperativeMatrixRobustBufferAccess && (s.cooperativeMatrixRobustBufferAccess = data.cooperativeMatrixRobustBufferAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get cooperativeMatrix() {
        return this.#view.getUint32(16, LE);
    }
    set cooperativeMatrix(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get cooperativeMatrixRobustBufferAccess() {
        return this.#view.getUint32(20, LE);
    }
    set cooperativeMatrixRobustBufferAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCooperativeMatrixPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCooperativeMatrixPropertiesNV(new Uint8Array(VkPhysicalDeviceCooperativeMatrixPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCooperativeMatrixPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.cooperativeMatrixSupportedStages && (s.cooperativeMatrixSupportedStages = data.cooperativeMatrixSupportedStages), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get cooperativeMatrixSupportedStages() {
        return this.#view.getUint32(16, LE);
    }
    set cooperativeMatrixSupportedStages(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCooperativeMatrixPropertiesNV {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCooperativeMatrixPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCooperativeMatrixPropertiesNV(new Uint8Array(VkCooperativeMatrixPropertiesNV.size));
    }
    static create(data) {
        let s = VkCooperativeMatrixPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.MSize && (s.MSize = data.MSize), void 0 !== data.NSize && (s.NSize = data.NSize), void 0 !== data.KSize && (s.KSize = data.KSize), void 0 !== data.AType && (s.AType = data.AType), void 0 !== data.BType && (s.BType = data.BType), void 0 !== data.CType && (s.CType = data.CType), void 0 !== data.DType && (s.DType = data.DType), void 0 !== data.scope && (s.scope = data.scope), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get MSize() {
        return this.#view.getUint32(16, LE);
    }
    set MSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get NSize() {
        return this.#view.getUint32(20, LE);
    }
    set NSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get KSize() {
        return this.#view.getUint32(24, LE);
    }
    set KSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get AType() {
        return this.#view.getUint32(28, LE);
    }
    set AType(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get BType() {
        return this.#view.getUint32(32, LE);
    }
    set BType(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get CType() {
        return this.#view.getUint32(36, LE);
    }
    set CType(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get DType() {
        return this.#view.getUint32(40, LE);
    }
    set DType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get scope() {
        return this.#view.getUint32(44, LE);
    }
    set scope(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(new Uint8Array(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.ycbcrImageArrays && (s.ycbcrImageArrays = data.ycbcrImageArrays), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get ycbcrImageArrays() {
        return this.#view.getUint32(16, LE);
    }
    set ycbcrImageArrays(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImageViewHandleInfoNVX {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewHandleInfoNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewHandleInfoNVX(new Uint8Array(VkImageViewHandleInfoNVX.size));
    }
    static create(data) {
        let s = VkImageViewHandleInfoNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.descriptorType && (s.descriptorType = data.descriptorType), void 0 !== data.sampler && (s.sampler = data.sampler), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get descriptorType() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sampler() {
        return this.#view.getBigUint64(32, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageViewAddressPropertiesNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewAddressPropertiesNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewAddressPropertiesNVX(new Uint8Array(VkImageViewAddressPropertiesNVX.size));
    }
    static create(data) {
        let s = VkImageViewAddressPropertiesNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceAddress && (s.deviceAddress = data.deviceAddress), void 0 !== data.size && (s.size = data.size), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(24, LE);
    }
    set size(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPresentFrameTokenGGP {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPresentFrameTokenGGP.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPresentFrameTokenGGP(new Uint8Array(VkPresentFrameTokenGGP.size));
    }
    static create(data) {
        let s = VkPresentFrameTokenGGP.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.frameToken && (s.frameToken = data.frameToken), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get frameToken() {
        return this.#view.getBigUint64(16, LE);
    }
    set frameToken(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPipelineCreationFeedback {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCreationFeedback.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCreationFeedback(new Uint8Array(VkPipelineCreationFeedback.size));
    }
    static create(data) {
        let s = VkPipelineCreationFeedback.alloc();
        return void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.duration && (s.duration = data.duration), s;
    }
    get flags() {
        return this.#view.getUint32(0, LE);
    }
    set flags(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get duration() {
        return this.#view.getBigUint64(8, LE);
    }
    set duration(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkPipelineCreationFeedbackCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCreationFeedbackCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCreationFeedbackCreateInfo(new Uint8Array(VkPipelineCreationFeedbackCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineCreationFeedbackCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pPipelineCreationFeedback && (s.pPipelineCreationFeedback = data.pPipelineCreationFeedback), void 0 !== data.pipelineStageCreationFeedbackCount && (s.pipelineStageCreationFeedbackCount = data.pipelineStageCreationFeedbackCount), void 0 !== data.pPipelineStageCreationFeedbacks && (s.pPipelineStageCreationFeedbacks = data.pPipelineStageCreationFeedbacks), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pPipelineCreationFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pPipelineCreationFeedback(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pipelineStageCreationFeedbackCount() {
        return this.#view.getUint32(24, LE);
    }
    set pipelineStageCreationFeedbackCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pPipelineStageCreationFeedbacks() {
        return this.#view.getBigUint64(32, LE);
    }
    set pPipelineStageCreationFeedbacks(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkSurfaceFullScreenExclusiveInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceFullScreenExclusiveInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceFullScreenExclusiveInfoEXT(new Uint8Array(VkSurfaceFullScreenExclusiveInfoEXT.size));
    }
    static create(data) {
        let s = VkSurfaceFullScreenExclusiveInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fullScreenExclusive && (s.fullScreenExclusive = data.fullScreenExclusive), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fullScreenExclusive() {
        return this.#view.getUint32(16, LE);
    }
    set fullScreenExclusive(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSurfaceFullScreenExclusiveWin32InfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceFullScreenExclusiveWin32InfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceFullScreenExclusiveWin32InfoEXT(new Uint8Array(VkSurfaceFullScreenExclusiveWin32InfoEXT.size));
    }
    static create(data) {
        let s = VkSurfaceFullScreenExclusiveWin32InfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.hmonitor && (s.hmonitor = data.hmonitor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get hmonitor() {
        return this.#view.getBigUint64(16, LE);
    }
    set hmonitor(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceCapabilitiesFullScreenExclusiveEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceCapabilitiesFullScreenExclusiveEXT(new Uint8Array(VkSurfaceCapabilitiesFullScreenExclusiveEXT.size));
    }
    static create(data) {
        let s = VkSurfaceCapabilitiesFullScreenExclusiveEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fullScreenExclusiveSupported && (s.fullScreenExclusiveSupported = data.fullScreenExclusiveSupported), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fullScreenExclusiveSupported() {
        return this.#view.getUint32(16, LE);
    }
    set fullScreenExclusiveSupported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePresentBarrierFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePresentBarrierFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePresentBarrierFeaturesNV(new Uint8Array(VkPhysicalDevicePresentBarrierFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePresentBarrierFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentBarrier && (s.presentBarrier = data.presentBarrier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentBarrier() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSurfaceCapabilitiesPresentBarrierNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSurfaceCapabilitiesPresentBarrierNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSurfaceCapabilitiesPresentBarrierNV(new Uint8Array(VkSurfaceCapabilitiesPresentBarrierNV.size));
    }
    static create(data) {
        let s = VkSurfaceCapabilitiesPresentBarrierNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentBarrierSupported && (s.presentBarrierSupported = data.presentBarrierSupported), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentBarrierSupported() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrierSupported(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSwapchainPresentBarrierCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSwapchainPresentBarrierCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSwapchainPresentBarrierCreateInfoNV(new Uint8Array(VkSwapchainPresentBarrierCreateInfoNV.size));
    }
    static create(data) {
        let s = VkSwapchainPresentBarrierCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.presentBarrierEnable && (s.presentBarrierEnable = data.presentBarrierEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get presentBarrierEnable() {
        return this.#view.getUint32(16, LE);
    }
    set presentBarrierEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePerformanceQueryFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePerformanceQueryFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePerformanceQueryFeaturesKHR(new Uint8Array(VkPhysicalDevicePerformanceQueryFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePerformanceQueryFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.performanceCounterQueryPools && (s.performanceCounterQueryPools = data.performanceCounterQueryPools), void 0 !== data.performanceCounterMultipleQueryPools && (s.performanceCounterMultipleQueryPools = data.performanceCounterMultipleQueryPools), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get performanceCounterQueryPools() {
        return this.#view.getUint32(16, LE);
    }
    set performanceCounterQueryPools(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get performanceCounterMultipleQueryPools() {
        return this.#view.getUint32(20, LE);
    }
    set performanceCounterMultipleQueryPools(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDevicePerformanceQueryPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePerformanceQueryPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePerformanceQueryPropertiesKHR(new Uint8Array(VkPhysicalDevicePerformanceQueryPropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePerformanceQueryPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.allowCommandBufferQueryCopies && (s.allowCommandBufferQueryCopies = data.allowCommandBufferQueryCopies), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get allowCommandBufferQueryCopies() {
        return this.#view.getUint32(16, LE);
    }
    set allowCommandBufferQueryCopies(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPerformanceCounterKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceCounterKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceCounterKHR(new Uint8Array(VkPerformanceCounterKHR.size));
    }
    static create(data) {
        let s = VkPerformanceCounterKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.unit && (s.unit = data.unit), void 0 !== data.scope && (s.scope = data.scope), void 0 !== data.storage && (s.storage = data.storage), void 0 !== data.uuid && (s.uuid = data.uuid), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get unit() {
        return this.#view.getUint32(16, LE);
    }
    set unit(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get scope() {
        return this.#view.getUint32(20, LE);
    }
    set scope(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storage() {
        return this.#view.getUint32(24, LE);
    }
    set storage(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uuid() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(28 + 1 * i));
        return result;
    }
    set uuid(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(28 + 1 * i, Number(value[i]));
    }
}
export class VkPerformanceCounterDescriptionKHR {
    static size = 792;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceCounterDescriptionKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceCounterDescriptionKHR(new Uint8Array(VkPerformanceCounterDescriptionKHR.size));
    }
    static create(data) {
        let s = VkPerformanceCounterDescriptionKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.name && (s.name = data.name), void 0 !== data.category && (s.category = data.category), void 0 !== data.description && (s.description = data.description), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get name() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set name(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get category() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(276 + 1 * i));
        return result;
    }
    set category(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(276 + 1 * i, Number(value[i]));
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(532 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(532 + 1 * i, Number(value[i]));
    }
}
export class VkQueryPoolPerformanceCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueryPoolPerformanceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueryPoolPerformanceCreateInfoKHR(new Uint8Array(VkQueryPoolPerformanceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkQueryPoolPerformanceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.queueFamilyIndex && (s.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.counterIndexCount && (s.counterIndexCount = data.counterIndexCount), void 0 !== data.pCounterIndices && (s.pCounterIndices = data.pCounterIndices), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(16, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get counterIndexCount() {
        return this.#view.getUint32(20, LE);
    }
    set counterIndexCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pCounterIndices() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCounterIndices(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkAcquireProfilingLockInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAcquireProfilingLockInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAcquireProfilingLockInfoKHR(new Uint8Array(VkAcquireProfilingLockInfoKHR.size));
    }
    static create(data) {
        let s = VkAcquireProfilingLockInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.timeout && (s.timeout = data.timeout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get timeout() {
        return this.#view.getBigUint64(24, LE);
    }
    set timeout(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPerformanceQuerySubmitInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceQuerySubmitInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceQuerySubmitInfoKHR(new Uint8Array(VkPerformanceQuerySubmitInfoKHR.size));
    }
    static create(data) {
        let s = VkPerformanceQuerySubmitInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.counterPassIndex && (s.counterPassIndex = data.counterPassIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get counterPassIndex() {
        return this.#view.getUint32(16, LE);
    }
    set counterPassIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkHeadlessSurfaceCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkHeadlessSurfaceCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkHeadlessSurfaceCreateInfoEXT(new Uint8Array(VkHeadlessSurfaceCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkHeadlessSurfaceCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCoverageReductionModeFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCoverageReductionModeFeaturesNV(new Uint8Array(VkPhysicalDeviceCoverageReductionModeFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCoverageReductionModeFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.coverageReductionMode && (s.coverageReductionMode = data.coverageReductionMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineCoverageReductionStateCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCoverageReductionStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCoverageReductionStateCreateInfoNV(new Uint8Array(VkPipelineCoverageReductionStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineCoverageReductionStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.coverageReductionMode && (s.coverageReductionMode = data.coverageReductionMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(20, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkFramebufferMixedSamplesCombinationNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFramebufferMixedSamplesCombinationNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFramebufferMixedSamplesCombinationNV(new Uint8Array(VkFramebufferMixedSamplesCombinationNV.size));
    }
    static create(data) {
        let s = VkFramebufferMixedSamplesCombinationNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.coverageReductionMode && (s.coverageReductionMode = data.coverageReductionMode), void 0 !== data.rasterizationSamples && (s.rasterizationSamples = data.rasterizationSamples), void 0 !== data.depthStencilSamples && (s.depthStencilSamples = data.depthStencilSamples), void 0 !== data.colorSamples && (s.colorSamples = data.colorSamples), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get coverageReductionMode() {
        return this.#view.getUint32(16, LE);
    }
    set coverageReductionMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get depthStencilSamples() {
        return this.#view.getUint32(24, LE);
    }
    set depthStencilSamples(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get colorSamples() {
        return this.#view.getUint32(28, LE);
    }
    set colorSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(new Uint8Array(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderIntegerFunctions2 && (s.shaderIntegerFunctions2 = data.shaderIntegerFunctions2), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderIntegerFunctions2() {
        return this.#view.getUint32(16, LE);
    }
    set shaderIntegerFunctions2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPerformanceValueINTEL {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceValueINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceValueINTEL(new Uint8Array(VkPerformanceValueINTEL.size));
    }
    static create(data) {
        let s = VkPerformanceValueINTEL.alloc();
        return void 0 !== data.type && (s.type = data.type), void 0 !== data.data && (s.data = data.data), s;
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u32","u64","f32","u32","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u32","u64","f32","u32","buffer"]}');
    }
}
export class VkInitializePerformanceApiInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkInitializePerformanceApiInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkInitializePerformanceApiInfoINTEL(new Uint8Array(VkInitializePerformanceApiInfoINTEL.size));
    }
    static create(data) {
        let s = VkInitializePerformanceApiInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pUserData && (s.pUserData = data.pUserData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pUserData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pUserData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkQueryPoolPerformanceQueryCreateInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueryPoolPerformanceQueryCreateInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueryPoolPerformanceQueryCreateInfoINTEL(new Uint8Array(VkQueryPoolPerformanceQueryCreateInfoINTEL.size));
    }
    static create(data) {
        let s = VkQueryPoolPerformanceQueryCreateInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.performanceCountersSampling && (s.performanceCountersSampling = data.performanceCountersSampling), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get performanceCountersSampling() {
        return this.#view.getUint32(16, LE);
    }
    set performanceCountersSampling(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPerformanceMarkerInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceMarkerInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceMarkerInfoINTEL(new Uint8Array(VkPerformanceMarkerInfoINTEL.size));
    }
    static create(data) {
        let s = VkPerformanceMarkerInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.marker && (s.marker = data.marker), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get marker() {
        return this.#view.getBigUint64(16, LE);
    }
    set marker(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPerformanceStreamMarkerInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceStreamMarkerInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceStreamMarkerInfoINTEL(new Uint8Array(VkPerformanceStreamMarkerInfoINTEL.size));
    }
    static create(data) {
        let s = VkPerformanceStreamMarkerInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.marker && (s.marker = data.marker), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get marker() {
        return this.#view.getUint32(16, LE);
    }
    set marker(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPerformanceOverrideInfoINTEL {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceOverrideInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceOverrideInfoINTEL(new Uint8Array(VkPerformanceOverrideInfoINTEL.size));
    }
    static create(data) {
        let s = VkPerformanceOverrideInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.enable && (s.enable = data.enable), void 0 !== data.parameter && (s.parameter = data.parameter), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get enable() {
        return this.#view.getUint32(20, LE);
    }
    set enable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get parameter() {
        return this.#view.getBigUint64(24, LE);
    }
    set parameter(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPerformanceConfigurationAcquireInfoINTEL {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPerformanceConfigurationAcquireInfoINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPerformanceConfigurationAcquireInfoINTEL(new Uint8Array(VkPerformanceConfigurationAcquireInfoINTEL.size));
    }
    static create(data) {
        let s = VkPerformanceConfigurationAcquireInfoINTEL.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderClockFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderClockFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderClockFeaturesKHR(new Uint8Array(VkPhysicalDeviceShaderClockFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderClockFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderSubgroupClock && (s.shaderSubgroupClock = data.shaderSubgroupClock), void 0 !== data.shaderDeviceClock && (s.shaderDeviceClock = data.shaderDeviceClock), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderSubgroupClock() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupClock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderDeviceClock() {
        return this.#view.getUint32(20, LE);
    }
    set shaderDeviceClock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceIndexTypeUint8FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceIndexTypeUint8FeaturesEXT(new Uint8Array(VkPhysicalDeviceIndexTypeUint8FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceIndexTypeUint8FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.indexTypeUint8 && (s.indexTypeUint8 = data.indexTypeUint8), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get indexTypeUint8() {
        return this.#view.getUint32(16, LE);
    }
    set indexTypeUint8(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(new Uint8Array(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderSMCount && (s.shaderSMCount = data.shaderSMCount), void 0 !== data.shaderWarpsPerSM && (s.shaderWarpsPerSM = data.shaderWarpsPerSM), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderSMCount() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSMCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shaderWarpsPerSM() {
        return this.#view.getUint32(20, LE);
    }
    set shaderWarpsPerSM(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(new Uint8Array(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderSMBuiltins && (s.shaderSMBuiltins = data.shaderSMBuiltins), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderSMBuiltins() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSMBuiltins(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(new Uint8Array(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentShaderSampleInterlock && (s.fragmentShaderSampleInterlock = data.fragmentShaderSampleInterlock), void 0 !== data.fragmentShaderPixelInterlock && (s.fragmentShaderPixelInterlock = data.fragmentShaderPixelInterlock), void 0 !== data.fragmentShaderShadingRateInterlock && (s.fragmentShaderShadingRateInterlock = data.fragmentShaderShadingRateInterlock), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentShaderSampleInterlock() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShaderSampleInterlock(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentShaderPixelInterlock() {
        return this.#view.getUint32(20, LE);
    }
    set fragmentShaderPixelInterlock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get fragmentShaderShadingRateInterlock() {
        return this.#view.getUint32(24, LE);
    }
    set fragmentShaderShadingRateInterlock(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(new Uint8Array(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.separateDepthStencilLayouts && (s.separateDepthStencilLayouts = data.separateDepthStencilLayouts), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get separateDepthStencilLayouts() {
        return this.#view.getUint32(16, LE);
    }
    set separateDepthStencilLayouts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkAttachmentReferenceStencilLayout {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentReferenceStencilLayout.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentReferenceStencilLayout(new Uint8Array(VkAttachmentReferenceStencilLayout.size));
    }
    static create(data) {
        let s = VkAttachmentReferenceStencilLayout.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stencilLayout && (s.stencilLayout = data.stencilLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stencilLayout() {
        return this.#view.getUint32(16, LE);
    }
    set stencilLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(new Uint8Array(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.primitiveTopologyListRestart && (s.primitiveTopologyListRestart = data.primitiveTopologyListRestart), void 0 !== data.primitiveTopologyPatchListRestart && (s.primitiveTopologyPatchListRestart = data.primitiveTopologyPatchListRestart), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get primitiveTopologyListRestart() {
        return this.#view.getUint32(16, LE);
    }
    set primitiveTopologyListRestart(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitiveTopologyPatchListRestart() {
        return this.#view.getUint32(20, LE);
    }
    set primitiveTopologyPatchListRestart(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkAttachmentDescriptionStencilLayout {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentDescriptionStencilLayout.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentDescriptionStencilLayout(new Uint8Array(VkAttachmentDescriptionStencilLayout.size));
    }
    static create(data) {
        let s = VkAttachmentDescriptionStencilLayout.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stencilInitialLayout && (s.stencilInitialLayout = data.stencilInitialLayout), void 0 !== data.stencilFinalLayout && (s.stencilFinalLayout = data.stencilFinalLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stencilInitialLayout() {
        return this.#view.getUint32(16, LE);
    }
    set stencilInitialLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stencilFinalLayout() {
        return this.#view.getUint32(20, LE);
    }
    set stencilFinalLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(new Uint8Array(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineExecutableInfo && (s.pipelineExecutableInfo = data.pipelineExecutableInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineExecutableInfo() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineExecutableInfo(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineInfoKHR(new Uint8Array(VkPipelineInfoKHR.size));
    }
    static create(data) {
        let s = VkPipelineInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipeline && (s.pipeline = data.pipeline), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(16, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPipelineExecutablePropertiesKHR {
    static size = 536;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineExecutablePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineExecutablePropertiesKHR(new Uint8Array(VkPipelineExecutablePropertiesKHR.size));
    }
    static create(data) {
        let s = VkPipelineExecutablePropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stages && (s.stages = data.stages), void 0 !== data.name && (s.name = data.name), void 0 !== data.description && (s.description = data.description), void 0 !== data.subgroupSize && (s.subgroupSize = data.subgroupSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stages() {
        return this.#view.getUint32(16, LE);
    }
    set stages(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get name() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set name(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(276 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(276 + 1 * i, Number(value[i]));
    }
    get subgroupSize() {
        return this.#view.getUint32(532, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(532, Number(value), LE);
    }
}
export class VkPipelineExecutableInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineExecutableInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineExecutableInfoKHR(new Uint8Array(VkPipelineExecutableInfoKHR.size));
    }
    static create(data) {
        let s = VkPipelineExecutableInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipeline && (s.pipeline = data.pipeline), void 0 !== data.executableIndex && (s.executableIndex = data.executableIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipeline() {
        return this.#view.getBigUint64(16, LE);
    }
    set pipeline(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get executableIndex() {
        return this.#view.getUint32(24, LE);
    }
    set executableIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPipelineExecutableStatisticKHR {
    static size = 544;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineExecutableStatisticKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineExecutableStatisticKHR(new Uint8Array(VkPipelineExecutableStatisticKHR.size));
    }
    static create(data) {
        let s = VkPipelineExecutableStatisticKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.name && (s.name = data.name), void 0 !== data.description && (s.description = data.description), void 0 !== data.format && (s.format = data.format), void 0 !== data.value && (s.value = data.value), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get name() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set name(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(272 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(272 + 1 * i, Number(value[i]));
    }
    get format() {
        return this.#view.getUint32(528, LE);
    }
    set format(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get value() {
        throw new Error('Unknown type: {"union":["u32","i64","u64","f64"]}');
    }
    set value(value) {
        throw new Error('Unknown type: {"union":["u32","i64","u64","f64"]}');
    }
}
export class VkPipelineExecutableInternalRepresentationKHR {
    static size = 552;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineExecutableInternalRepresentationKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineExecutableInternalRepresentationKHR(new Uint8Array(VkPipelineExecutableInternalRepresentationKHR.size));
    }
    static create(data) {
        let s = VkPipelineExecutableInternalRepresentationKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.name && (s.name = data.name), void 0 !== data.description && (s.description = data.description), void 0 !== data.isText && (s.isText = data.isText), void 0 !== data.dataSize && (s.dataSize = data.dataSize), void 0 !== data.pData && (s.pData = data.pData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get name() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set name(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(272 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(272 + 1 * i, Number(value[i]));
    }
    get isText() {
        return this.#view.getUint32(528, LE);
    }
    set isText(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(536, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(536, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(544, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(544, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(new Uint8Array(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderDemoteToHelperInvocation && (s.shaderDemoteToHelperInvocation = data.shaderDemoteToHelperInvocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderDemoteToHelperInvocation() {
        return this.#view.getUint32(16, LE);
    }
    set shaderDemoteToHelperInvocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(new Uint8Array(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.texelBufferAlignment && (s.texelBufferAlignment = data.texelBufferAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get texelBufferAlignment() {
        return this.#view.getUint32(16, LE);
    }
    set texelBufferAlignment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceTexelBufferAlignmentProperties {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTexelBufferAlignmentProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTexelBufferAlignmentProperties(new Uint8Array(VkPhysicalDeviceTexelBufferAlignmentProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTexelBufferAlignmentProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.storageTexelBufferOffsetAlignmentBytes && (s.storageTexelBufferOffsetAlignmentBytes = data.storageTexelBufferOffsetAlignmentBytes), void 0 !== data.storageTexelBufferOffsetSingleTexelAlignment && (s.storageTexelBufferOffsetSingleTexelAlignment = data.storageTexelBufferOffsetSingleTexelAlignment), void 0 !== data.uniformTexelBufferOffsetAlignmentBytes && (s.uniformTexelBufferOffsetAlignmentBytes = data.uniformTexelBufferOffsetAlignmentBytes), void 0 !== data.uniformTexelBufferOffsetSingleTexelAlignment && (s.uniformTexelBufferOffsetSingleTexelAlignment = data.uniformTexelBufferOffsetSingleTexelAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get storageTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(16, LE);
    }
    set storageTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get storageTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(24, LE);
    }
    set storageTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uniformTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(32, LE);
    }
    set uniformTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get uniformTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(40, LE);
    }
    set uniformTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkPhysicalDeviceSubgroupSizeControlFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubgroupSizeControlFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubgroupSizeControlFeatures(new Uint8Array(VkPhysicalDeviceSubgroupSizeControlFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubgroupSizeControlFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subgroupSizeControl && (s.subgroupSizeControl = data.subgroupSizeControl), void 0 !== data.computeFullSubgroups && (s.computeFullSubgroups = data.computeFullSubgroups), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subgroupSizeControl() {
        return this.#view.getUint32(16, LE);
    }
    set subgroupSizeControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get computeFullSubgroups() {
        return this.#view.getUint32(20, LE);
    }
    set computeFullSubgroups(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceSubgroupSizeControlProperties {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubgroupSizeControlProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubgroupSizeControlProperties(new Uint8Array(VkPhysicalDeviceSubgroupSizeControlProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubgroupSizeControlProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minSubgroupSize && (s.minSubgroupSize = data.minSubgroupSize), void 0 !== data.maxSubgroupSize && (s.maxSubgroupSize = data.maxSubgroupSize), void 0 !== data.maxComputeWorkgroupSubgroups && (s.maxComputeWorkgroupSubgroups = data.maxComputeWorkgroupSubgroups), void 0 !== data.requiredSubgroupSizeStages && (s.requiredSubgroupSizeStages = data.requiredSubgroupSizeStages), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set minSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSubgroupSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxSubgroupSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxComputeWorkgroupSubgroups() {
        return this.#view.getUint32(24, LE);
    }
    set maxComputeWorkgroupSubgroups(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get requiredSubgroupSizeStages() {
        return this.#view.getUint32(28, LE);
    }
    set requiredSubgroupSizeStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(new Uint8Array(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.requiredSubgroupSize && (s.requiredSubgroupSize = data.requiredSubgroupSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get requiredSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set requiredSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSubpassShadingPipelineCreateInfoHUAWEI {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassShadingPipelineCreateInfoHUAWEI.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassShadingPipelineCreateInfoHUAWEI(new Uint8Array(VkSubpassShadingPipelineCreateInfoHUAWEI.size));
    }
    static create(data) {
        let s = VkSubpassShadingPipelineCreateInfoHUAWEI.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.renderPass && (s.renderPass = data.renderPass), void 0 !== data.subpass && (s.subpass = data.subpass), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get renderPass() {
        return this.#view.getBigUint64(16, LE);
    }
    set renderPass(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get subpass() {
        return this.#view.getUint32(24, LE);
    }
    set subpass(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(new Uint8Array(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxSubpassShadingWorkgroupSizeAspectRatio && (s.maxSubpassShadingWorkgroupSizeAspectRatio = data.maxSubpassShadingWorkgroupSizeAspectRatio), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxSubpassShadingWorkgroupSizeAspectRatio() {
        return this.#view.getUint32(16, LE);
    }
    set maxSubpassShadingWorkgroupSizeAspectRatio(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMemoryOpaqueCaptureAddressAllocateInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryOpaqueCaptureAddressAllocateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryOpaqueCaptureAddressAllocateInfo(new Uint8Array(VkMemoryOpaqueCaptureAddressAllocateInfo.size));
    }
    static create(data) {
        let s = VkMemoryOpaqueCaptureAddressAllocateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.opaqueCaptureAddress && (s.opaqueCaptureAddress = data.opaqueCaptureAddress), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get opaqueCaptureAddress() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureAddress(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDeviceMemoryOpaqueCaptureAddressInfo {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceMemoryOpaqueCaptureAddressInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceMemoryOpaqueCaptureAddressInfo(new Uint8Array(VkDeviceMemoryOpaqueCaptureAddressInfo.size));
    }
    static create(data) {
        let s = VkDeviceMemoryOpaqueCaptureAddressInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceLineRasterizationFeaturesEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceLineRasterizationFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceLineRasterizationFeaturesEXT(new Uint8Array(VkPhysicalDeviceLineRasterizationFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceLineRasterizationFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rectangularLines && (s.rectangularLines = data.rectangularLines), void 0 !== data.bresenhamLines && (s.bresenhamLines = data.bresenhamLines), void 0 !== data.smoothLines && (s.smoothLines = data.smoothLines), void 0 !== data.stippledRectangularLines && (s.stippledRectangularLines = data.stippledRectangularLines), void 0 !== data.stippledBresenhamLines && (s.stippledBresenhamLines = data.stippledBresenhamLines), void 0 !== data.stippledSmoothLines && (s.stippledSmoothLines = data.stippledSmoothLines), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rectangularLines() {
        return this.#view.getUint32(16, LE);
    }
    set rectangularLines(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bresenhamLines() {
        return this.#view.getUint32(20, LE);
    }
    set bresenhamLines(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get smoothLines() {
        return this.#view.getUint32(24, LE);
    }
    set smoothLines(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get stippledRectangularLines() {
        return this.#view.getUint32(28, LE);
    }
    set stippledRectangularLines(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get stippledBresenhamLines() {
        return this.#view.getUint32(32, LE);
    }
    set stippledBresenhamLines(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stippledSmoothLines() {
        return this.#view.getUint32(36, LE);
    }
    set stippledSmoothLines(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class VkPhysicalDeviceLineRasterizationPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceLineRasterizationPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceLineRasterizationPropertiesEXT(new Uint8Array(VkPhysicalDeviceLineRasterizationPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceLineRasterizationPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.lineSubPixelPrecisionBits && (s.lineSubPixelPrecisionBits = data.lineSubPixelPrecisionBits), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get lineSubPixelPrecisionBits() {
        return this.#view.getUint32(16, LE);
    }
    set lineSubPixelPrecisionBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineRasterizationLineStateCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationLineStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationLineStateCreateInfoEXT(new Uint8Array(VkPipelineRasterizationLineStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationLineStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.lineRasterizationMode && (s.lineRasterizationMode = data.lineRasterizationMode), void 0 !== data.stippledLineEnable && (s.stippledLineEnable = data.stippledLineEnable), void 0 !== data.lineStippleFactor && (s.lineStippleFactor = data.lineStippleFactor), void 0 !== data.lineStipplePattern && (s.lineStipplePattern = data.lineStipplePattern), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get lineRasterizationMode() {
        return this.#view.getUint32(16, LE);
    }
    set lineRasterizationMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stippledLineEnable() {
        return this.#view.getUint32(20, LE);
    }
    set stippledLineEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get lineStippleFactor() {
        return this.#view.getUint32(24, LE);
    }
    set lineStippleFactor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get lineStipplePattern() {
        return this.#view.getUint16(28, LE);
    }
    set lineStipplePattern(value) {
        this.#view.setUint16(28, Number(value), LE);
    }
}
export class VkPhysicalDevicePipelineCreationCacheControlFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelineCreationCacheControlFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelineCreationCacheControlFeatures(new Uint8Array(VkPhysicalDevicePipelineCreationCacheControlFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelineCreationCacheControlFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineCreationCacheControl && (s.pipelineCreationCacheControl = data.pipelineCreationCacheControl), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineCreationCacheControl() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineCreationCacheControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkan11Features {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan11Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan11Features(new Uint8Array(VkPhysicalDeviceVulkan11Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan11Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.storageBuffer16BitAccess && (s.storageBuffer16BitAccess = data.storageBuffer16BitAccess), void 0 !== data.uniformAndStorageBuffer16BitAccess && (s.uniformAndStorageBuffer16BitAccess = data.uniformAndStorageBuffer16BitAccess), void 0 !== data.storagePushConstant16 && (s.storagePushConstant16 = data.storagePushConstant16), void 0 !== data.storageInputOutput16 && (s.storageInputOutput16 = data.storageInputOutput16), void 0 !== data.multiview && (s.multiview = data.multiview), void 0 !== data.multiviewGeometryShader && (s.multiviewGeometryShader = data.multiviewGeometryShader), void 0 !== data.multiviewTessellationShader && (s.multiviewTessellationShader = data.multiviewTessellationShader), void 0 !== data.variablePointersStorageBuffer && (s.variablePointersStorageBuffer = data.variablePointersStorageBuffer), void 0 !== data.variablePointers && (s.variablePointers = data.variablePointers), void 0 !== data.protectedMemory && (s.protectedMemory = data.protectedMemory), void 0 !== data.samplerYcbcrConversion && (s.samplerYcbcrConversion = data.samplerYcbcrConversion), void 0 !== data.shaderDrawParameters && (s.shaderDrawParameters = data.shaderDrawParameters), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get storageBuffer16BitAccess() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffer16BitAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformAndStorageBuffer16BitAccess() {
        return this.#view.getUint32(20, LE);
    }
    set uniformAndStorageBuffer16BitAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storagePushConstant16() {
        return this.#view.getUint32(24, LE);
    }
    set storagePushConstant16(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get storageInputOutput16() {
        return this.#view.getUint32(28, LE);
    }
    set storageInputOutput16(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get multiview() {
        return this.#view.getUint32(32, LE);
    }
    set multiview(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multiviewGeometryShader() {
        return this.#view.getUint32(36, LE);
    }
    set multiviewGeometryShader(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get multiviewTessellationShader() {
        return this.#view.getUint32(40, LE);
    }
    set multiviewTessellationShader(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get variablePointersStorageBuffer() {
        return this.#view.getUint32(44, LE);
    }
    set variablePointersStorageBuffer(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get variablePointers() {
        return this.#view.getUint32(48, LE);
    }
    set variablePointers(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get protectedMemory() {
        return this.#view.getUint32(52, LE);
    }
    set protectedMemory(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get samplerYcbcrConversion() {
        return this.#view.getUint32(56, LE);
    }
    set samplerYcbcrConversion(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderDrawParameters() {
        return this.#view.getUint32(60, LE);
    }
    set shaderDrawParameters(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkan11Properties {
    static size = 112;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan11Properties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan11Properties(new Uint8Array(VkPhysicalDeviceVulkan11Properties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan11Properties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceUUID && (s.deviceUUID = data.deviceUUID), void 0 !== data.driverUUID && (s.driverUUID = data.driverUUID), void 0 !== data.deviceLUID && (s.deviceLUID = data.deviceLUID), void 0 !== data.deviceNodeMask && (s.deviceNodeMask = data.deviceNodeMask), void 0 !== data.deviceLUIDValid && (s.deviceLUIDValid = data.deviceLUIDValid), void 0 !== data.subgroupSize && (s.subgroupSize = data.subgroupSize), void 0 !== data.subgroupSupportedStages && (s.subgroupSupportedStages = data.subgroupSupportedStages), void 0 !== data.subgroupSupportedOperations && (s.subgroupSupportedOperations = data.subgroupSupportedOperations), void 0 !== data.subgroupQuadOperationsInAllStages && (s.subgroupQuadOperationsInAllStages = data.subgroupQuadOperationsInAllStages), void 0 !== data.pointClippingBehavior && (s.pointClippingBehavior = data.pointClippingBehavior), void 0 !== data.maxMultiviewViewCount && (s.maxMultiviewViewCount = data.maxMultiviewViewCount), void 0 !== data.maxMultiviewInstanceIndex && (s.maxMultiviewInstanceIndex = data.maxMultiviewInstanceIndex), void 0 !== data.protectedNoFault && (s.protectedNoFault = data.protectedNoFault), void 0 !== data.maxPerSetDescriptors && (s.maxPerSetDescriptors = data.maxPerSetDescriptors), void 0 !== data.maxMemoryAllocationSize && (s.maxMemoryAllocationSize = data.maxMemoryAllocationSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set deviceUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get driverUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(32 + 1 * i));
        return result;
    }
    set driverUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(32 + 1 * i, Number(value[i]));
    }
    get deviceLUID() {
        let result = [];
        for(let i = 0; i < 8; i++)result.push(this.#view.getUint8(48 + 1 * i));
        return result;
    }
    set deviceLUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(48 + 1 * i, Number(value[i]));
    }
    get deviceNodeMask() {
        return this.#view.getUint32(56, LE);
    }
    set deviceNodeMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get deviceLUIDValid() {
        return this.#view.getUint32(60, LE);
    }
    set deviceLUIDValid(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get subgroupSize() {
        return this.#view.getUint32(64, LE);
    }
    set subgroupSize(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get subgroupSupportedStages() {
        return this.#view.getUint32(68, LE);
    }
    set subgroupSupportedStages(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get subgroupSupportedOperations() {
        return this.#view.getUint32(72, LE);
    }
    set subgroupSupportedOperations(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get subgroupQuadOperationsInAllStages() {
        return this.#view.getUint32(76, LE);
    }
    set subgroupQuadOperationsInAllStages(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get pointClippingBehavior() {
        return this.#view.getUint32(80, LE);
    }
    set pointClippingBehavior(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get maxMultiviewViewCount() {
        return this.#view.getUint32(84, LE);
    }
    set maxMultiviewViewCount(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get maxMultiviewInstanceIndex() {
        return this.#view.getUint32(88, LE);
    }
    set maxMultiviewInstanceIndex(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get protectedNoFault() {
        return this.#view.getUint32(92, LE);
    }
    set protectedNoFault(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get maxPerSetDescriptors() {
        return this.#view.getUint32(96, LE);
    }
    set maxPerSetDescriptors(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get maxMemoryAllocationSize() {
        return this.#view.getBigUint64(104, LE);
    }
    set maxMemoryAllocationSize(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceVulkan12Features {
    static size = 208;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan12Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan12Features(new Uint8Array(VkPhysicalDeviceVulkan12Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan12Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.samplerMirrorClampToEdge && (s.samplerMirrorClampToEdge = data.samplerMirrorClampToEdge), void 0 !== data.drawIndirectCount && (s.drawIndirectCount = data.drawIndirectCount), void 0 !== data.storageBuffer8BitAccess && (s.storageBuffer8BitAccess = data.storageBuffer8BitAccess), void 0 !== data.uniformAndStorageBuffer8BitAccess && (s.uniformAndStorageBuffer8BitAccess = data.uniformAndStorageBuffer8BitAccess), void 0 !== data.storagePushConstant8 && (s.storagePushConstant8 = data.storagePushConstant8), void 0 !== data.shaderBufferInt64Atomics && (s.shaderBufferInt64Atomics = data.shaderBufferInt64Atomics), void 0 !== data.shaderSharedInt64Atomics && (s.shaderSharedInt64Atomics = data.shaderSharedInt64Atomics), void 0 !== data.shaderFloat16 && (s.shaderFloat16 = data.shaderFloat16), void 0 !== data.shaderInt8 && (s.shaderInt8 = data.shaderInt8), void 0 !== data.descriptorIndexing && (s.descriptorIndexing = data.descriptorIndexing), void 0 !== data.shaderInputAttachmentArrayDynamicIndexing && (s.shaderInputAttachmentArrayDynamicIndexing = data.shaderInputAttachmentArrayDynamicIndexing), void 0 !== data.shaderUniformTexelBufferArrayDynamicIndexing && (s.shaderUniformTexelBufferArrayDynamicIndexing = data.shaderUniformTexelBufferArrayDynamicIndexing), void 0 !== data.shaderStorageTexelBufferArrayDynamicIndexing && (s.shaderStorageTexelBufferArrayDynamicIndexing = data.shaderStorageTexelBufferArrayDynamicIndexing), void 0 !== data.shaderUniformBufferArrayNonUniformIndexing && (s.shaderUniformBufferArrayNonUniformIndexing = data.shaderUniformBufferArrayNonUniformIndexing), void 0 !== data.shaderSampledImageArrayNonUniformIndexing && (s.shaderSampledImageArrayNonUniformIndexing = data.shaderSampledImageArrayNonUniformIndexing), void 0 !== data.shaderStorageBufferArrayNonUniformIndexing && (s.shaderStorageBufferArrayNonUniformIndexing = data.shaderStorageBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageImageArrayNonUniformIndexing && (s.shaderStorageImageArrayNonUniformIndexing = data.shaderStorageImageArrayNonUniformIndexing), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexing && (s.shaderInputAttachmentArrayNonUniformIndexing = data.shaderInputAttachmentArrayNonUniformIndexing), void 0 !== data.shaderUniformTexelBufferArrayNonUniformIndexing && (s.shaderUniformTexelBufferArrayNonUniformIndexing = data.shaderUniformTexelBufferArrayNonUniformIndexing), void 0 !== data.shaderStorageTexelBufferArrayNonUniformIndexing && (s.shaderStorageTexelBufferArrayNonUniformIndexing = data.shaderStorageTexelBufferArrayNonUniformIndexing), void 0 !== data.descriptorBindingUniformBufferUpdateAfterBind && (s.descriptorBindingUniformBufferUpdateAfterBind = data.descriptorBindingUniformBufferUpdateAfterBind), void 0 !== data.descriptorBindingSampledImageUpdateAfterBind && (s.descriptorBindingSampledImageUpdateAfterBind = data.descriptorBindingSampledImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageImageUpdateAfterBind && (s.descriptorBindingStorageImageUpdateAfterBind = data.descriptorBindingStorageImageUpdateAfterBind), void 0 !== data.descriptorBindingStorageBufferUpdateAfterBind && (s.descriptorBindingStorageBufferUpdateAfterBind = data.descriptorBindingStorageBufferUpdateAfterBind), void 0 !== data.descriptorBindingUniformTexelBufferUpdateAfterBind && (s.descriptorBindingUniformTexelBufferUpdateAfterBind = data.descriptorBindingUniformTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingStorageTexelBufferUpdateAfterBind && (s.descriptorBindingStorageTexelBufferUpdateAfterBind = data.descriptorBindingStorageTexelBufferUpdateAfterBind), void 0 !== data.descriptorBindingUpdateUnusedWhilePending && (s.descriptorBindingUpdateUnusedWhilePending = data.descriptorBindingUpdateUnusedWhilePending), void 0 !== data.descriptorBindingPartiallyBound && (s.descriptorBindingPartiallyBound = data.descriptorBindingPartiallyBound), void 0 !== data.descriptorBindingVariableDescriptorCount && (s.descriptorBindingVariableDescriptorCount = data.descriptorBindingVariableDescriptorCount), void 0 !== data.runtimeDescriptorArray && (s.runtimeDescriptorArray = data.runtimeDescriptorArray), void 0 !== data.samplerFilterMinmax && (s.samplerFilterMinmax = data.samplerFilterMinmax), void 0 !== data.scalarBlockLayout && (s.scalarBlockLayout = data.scalarBlockLayout), void 0 !== data.imagelessFramebuffer && (s.imagelessFramebuffer = data.imagelessFramebuffer), void 0 !== data.uniformBufferStandardLayout && (s.uniformBufferStandardLayout = data.uniformBufferStandardLayout), void 0 !== data.shaderSubgroupExtendedTypes && (s.shaderSubgroupExtendedTypes = data.shaderSubgroupExtendedTypes), void 0 !== data.separateDepthStencilLayouts && (s.separateDepthStencilLayouts = data.separateDepthStencilLayouts), void 0 !== data.hostQueryReset && (s.hostQueryReset = data.hostQueryReset), void 0 !== data.timelineSemaphore && (s.timelineSemaphore = data.timelineSemaphore), void 0 !== data.bufferDeviceAddress && (s.bufferDeviceAddress = data.bufferDeviceAddress), void 0 !== data.bufferDeviceAddressCaptureReplay && (s.bufferDeviceAddressCaptureReplay = data.bufferDeviceAddressCaptureReplay), void 0 !== data.bufferDeviceAddressMultiDevice && (s.bufferDeviceAddressMultiDevice = data.bufferDeviceAddressMultiDevice), void 0 !== data.vulkanMemoryModel && (s.vulkanMemoryModel = data.vulkanMemoryModel), void 0 !== data.vulkanMemoryModelDeviceScope && (s.vulkanMemoryModelDeviceScope = data.vulkanMemoryModelDeviceScope), void 0 !== data.vulkanMemoryModelAvailabilityVisibilityChains && (s.vulkanMemoryModelAvailabilityVisibilityChains = data.vulkanMemoryModelAvailabilityVisibilityChains), void 0 !== data.shaderOutputViewportIndex && (s.shaderOutputViewportIndex = data.shaderOutputViewportIndex), void 0 !== data.shaderOutputLayer && (s.shaderOutputLayer = data.shaderOutputLayer), void 0 !== data.subgroupBroadcastDynamicId && (s.subgroupBroadcastDynamicId = data.subgroupBroadcastDynamicId), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get samplerMirrorClampToEdge() {
        return this.#view.getUint32(16, LE);
    }
    set samplerMirrorClampToEdge(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get drawIndirectCount() {
        return this.#view.getUint32(20, LE);
    }
    set drawIndirectCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get storageBuffer8BitAccess() {
        return this.#view.getUint32(24, LE);
    }
    set storageBuffer8BitAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get uniformAndStorageBuffer8BitAccess() {
        return this.#view.getUint32(28, LE);
    }
    set uniformAndStorageBuffer8BitAccess(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get storagePushConstant8() {
        return this.#view.getUint32(32, LE);
    }
    set storagePushConstant8(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderBufferInt64Atomics() {
        return this.#view.getUint32(36, LE);
    }
    set shaderBufferInt64Atomics(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderSharedInt64Atomics() {
        return this.#view.getUint32(40, LE);
    }
    set shaderSharedInt64Atomics(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get shaderFloat16() {
        return this.#view.getUint32(44, LE);
    }
    set shaderFloat16(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get shaderInt8() {
        return this.#view.getUint32(48, LE);
    }
    set shaderInt8(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get descriptorIndexing() {
        return this.#view.getUint32(52, LE);
    }
    set descriptorIndexing(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderInputAttachmentArrayDynamicIndexing() {
        return this.#view.getUint32(56, LE);
    }
    set shaderInputAttachmentArrayDynamicIndexing(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(60, LE);
    }
    set shaderUniformTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayDynamicIndexing() {
        return this.#view.getUint32(64, LE);
    }
    set shaderStorageTexelBufferArrayDynamicIndexing(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(68, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexing() {
        return this.#view.getUint32(72, LE);
    }
    set shaderSampledImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(76, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexing() {
        return this.#view.getUint32(80, LE);
    }
    set shaderStorageImageArrayNonUniformIndexing(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexing() {
        return this.#view.getUint32(84, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexing(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get shaderUniformTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(88, LE);
    }
    set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get shaderStorageTexelBufferArrayNonUniformIndexing() {
        return this.#view.getUint32(92, LE);
    }
    set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get descriptorBindingUniformBufferUpdateAfterBind() {
        return this.#view.getUint32(96, LE);
    }
    set descriptorBindingUniformBufferUpdateAfterBind(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get descriptorBindingSampledImageUpdateAfterBind() {
        return this.#view.getUint32(100, LE);
    }
    set descriptorBindingSampledImageUpdateAfterBind(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get descriptorBindingStorageImageUpdateAfterBind() {
        return this.#view.getUint32(104, LE);
    }
    set descriptorBindingStorageImageUpdateAfterBind(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get descriptorBindingStorageBufferUpdateAfterBind() {
        return this.#view.getUint32(108, LE);
    }
    set descriptorBindingStorageBufferUpdateAfterBind(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get descriptorBindingUniformTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(112, LE);
    }
    set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get descriptorBindingStorageTexelBufferUpdateAfterBind() {
        return this.#view.getUint32(116, LE);
    }
    set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get descriptorBindingUpdateUnusedWhilePending() {
        return this.#view.getUint32(120, LE);
    }
    set descriptorBindingUpdateUnusedWhilePending(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get descriptorBindingPartiallyBound() {
        return this.#view.getUint32(124, LE);
    }
    set descriptorBindingPartiallyBound(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get descriptorBindingVariableDescriptorCount() {
        return this.#view.getUint32(128, LE);
    }
    set descriptorBindingVariableDescriptorCount(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get runtimeDescriptorArray() {
        return this.#view.getUint32(132, LE);
    }
    set runtimeDescriptorArray(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get samplerFilterMinmax() {
        return this.#view.getUint32(136, LE);
    }
    set samplerFilterMinmax(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get scalarBlockLayout() {
        return this.#view.getUint32(140, LE);
    }
    set scalarBlockLayout(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get imagelessFramebuffer() {
        return this.#view.getUint32(144, LE);
    }
    set imagelessFramebuffer(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get uniformBufferStandardLayout() {
        return this.#view.getUint32(148, LE);
    }
    set uniformBufferStandardLayout(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get shaderSubgroupExtendedTypes() {
        return this.#view.getUint32(152, LE);
    }
    set shaderSubgroupExtendedTypes(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get separateDepthStencilLayouts() {
        return this.#view.getUint32(156, LE);
    }
    set separateDepthStencilLayouts(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get hostQueryReset() {
        return this.#view.getUint32(160, LE);
    }
    set hostQueryReset(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get timelineSemaphore() {
        return this.#view.getUint32(164, LE);
    }
    set timelineSemaphore(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get bufferDeviceAddress() {
        return this.#view.getUint32(168, LE);
    }
    set bufferDeviceAddress(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get bufferDeviceAddressCaptureReplay() {
        return this.#view.getUint32(172, LE);
    }
    set bufferDeviceAddressCaptureReplay(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get bufferDeviceAddressMultiDevice() {
        return this.#view.getUint32(176, LE);
    }
    set bufferDeviceAddressMultiDevice(value) {
        this.#view.setUint32(176, Number(value), LE);
    }
    get vulkanMemoryModel() {
        return this.#view.getUint32(180, LE);
    }
    set vulkanMemoryModel(value) {
        this.#view.setUint32(180, Number(value), LE);
    }
    get vulkanMemoryModelDeviceScope() {
        return this.#view.getUint32(184, LE);
    }
    set vulkanMemoryModelDeviceScope(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get vulkanMemoryModelAvailabilityVisibilityChains() {
        return this.#view.getUint32(188, LE);
    }
    set vulkanMemoryModelAvailabilityVisibilityChains(value) {
        this.#view.setUint32(188, Number(value), LE);
    }
    get shaderOutputViewportIndex() {
        return this.#view.getUint32(192, LE);
    }
    set shaderOutputViewportIndex(value) {
        this.#view.setUint32(192, Number(value), LE);
    }
    get shaderOutputLayer() {
        return this.#view.getUint32(196, LE);
    }
    set shaderOutputLayer(value) {
        this.#view.setUint32(196, Number(value), LE);
    }
    get subgroupBroadcastDynamicId() {
        return this.#view.getUint32(200, LE);
    }
    set subgroupBroadcastDynamicId(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkan12Properties {
    static size = 736;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan12Properties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan12Properties(new Uint8Array(VkPhysicalDeviceVulkan12Properties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan12Properties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.driverID && (s.driverID = data.driverID), void 0 !== data.driverName && (s.driverName = data.driverName), void 0 !== data.driverInfo && (s.driverInfo = data.driverInfo), void 0 !== data.conformanceVersion && (s.conformanceVersion = data.conformanceVersion), void 0 !== data.denormBehaviorIndependence && (s.denormBehaviorIndependence = data.denormBehaviorIndependence), void 0 !== data.roundingModeIndependence && (s.roundingModeIndependence = data.roundingModeIndependence), void 0 !== data.shaderSignedZeroInfNanPreserveFloat16 && (s.shaderSignedZeroInfNanPreserveFloat16 = data.shaderSignedZeroInfNanPreserveFloat16), void 0 !== data.shaderSignedZeroInfNanPreserveFloat32 && (s.shaderSignedZeroInfNanPreserveFloat32 = data.shaderSignedZeroInfNanPreserveFloat32), void 0 !== data.shaderSignedZeroInfNanPreserveFloat64 && (s.shaderSignedZeroInfNanPreserveFloat64 = data.shaderSignedZeroInfNanPreserveFloat64), void 0 !== data.shaderDenormPreserveFloat16 && (s.shaderDenormPreserveFloat16 = data.shaderDenormPreserveFloat16), void 0 !== data.shaderDenormPreserveFloat32 && (s.shaderDenormPreserveFloat32 = data.shaderDenormPreserveFloat32), void 0 !== data.shaderDenormPreserveFloat64 && (s.shaderDenormPreserveFloat64 = data.shaderDenormPreserveFloat64), void 0 !== data.shaderDenormFlushToZeroFloat16 && (s.shaderDenormFlushToZeroFloat16 = data.shaderDenormFlushToZeroFloat16), void 0 !== data.shaderDenormFlushToZeroFloat32 && (s.shaderDenormFlushToZeroFloat32 = data.shaderDenormFlushToZeroFloat32), void 0 !== data.shaderDenormFlushToZeroFloat64 && (s.shaderDenormFlushToZeroFloat64 = data.shaderDenormFlushToZeroFloat64), void 0 !== data.shaderRoundingModeRTEFloat16 && (s.shaderRoundingModeRTEFloat16 = data.shaderRoundingModeRTEFloat16), void 0 !== data.shaderRoundingModeRTEFloat32 && (s.shaderRoundingModeRTEFloat32 = data.shaderRoundingModeRTEFloat32), void 0 !== data.shaderRoundingModeRTEFloat64 && (s.shaderRoundingModeRTEFloat64 = data.shaderRoundingModeRTEFloat64), void 0 !== data.shaderRoundingModeRTZFloat16 && (s.shaderRoundingModeRTZFloat16 = data.shaderRoundingModeRTZFloat16), void 0 !== data.shaderRoundingModeRTZFloat32 && (s.shaderRoundingModeRTZFloat32 = data.shaderRoundingModeRTZFloat32), void 0 !== data.shaderRoundingModeRTZFloat64 && (s.shaderRoundingModeRTZFloat64 = data.shaderRoundingModeRTZFloat64), void 0 !== data.maxUpdateAfterBindDescriptorsInAllPools && (s.maxUpdateAfterBindDescriptorsInAllPools = data.maxUpdateAfterBindDescriptorsInAllPools), void 0 !== data.shaderUniformBufferArrayNonUniformIndexingNative && (s.shaderUniformBufferArrayNonUniformIndexingNative = data.shaderUniformBufferArrayNonUniformIndexingNative), void 0 !== data.shaderSampledImageArrayNonUniformIndexingNative && (s.shaderSampledImageArrayNonUniformIndexingNative = data.shaderSampledImageArrayNonUniformIndexingNative), void 0 !== data.shaderStorageBufferArrayNonUniformIndexingNative && (s.shaderStorageBufferArrayNonUniformIndexingNative = data.shaderStorageBufferArrayNonUniformIndexingNative), void 0 !== data.shaderStorageImageArrayNonUniformIndexingNative && (s.shaderStorageImageArrayNonUniformIndexingNative = data.shaderStorageImageArrayNonUniformIndexingNative), void 0 !== data.shaderInputAttachmentArrayNonUniformIndexingNative && (s.shaderInputAttachmentArrayNonUniformIndexingNative = data.shaderInputAttachmentArrayNonUniformIndexingNative), void 0 !== data.robustBufferAccessUpdateAfterBind && (s.robustBufferAccessUpdateAfterBind = data.robustBufferAccessUpdateAfterBind), void 0 !== data.quadDivergentImplicitLod && (s.quadDivergentImplicitLod = data.quadDivergentImplicitLod), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSamplers && (s.maxPerStageDescriptorUpdateAfterBindSamplers = data.maxPerStageDescriptorUpdateAfterBindSamplers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindUniformBuffers && (s.maxPerStageDescriptorUpdateAfterBindUniformBuffers = data.maxPerStageDescriptorUpdateAfterBindUniformBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageBuffers && (s.maxPerStageDescriptorUpdateAfterBindStorageBuffers = data.maxPerStageDescriptorUpdateAfterBindStorageBuffers), void 0 !== data.maxPerStageDescriptorUpdateAfterBindSampledImages && (s.maxPerStageDescriptorUpdateAfterBindSampledImages = data.maxPerStageDescriptorUpdateAfterBindSampledImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindStorageImages && (s.maxPerStageDescriptorUpdateAfterBindStorageImages = data.maxPerStageDescriptorUpdateAfterBindStorageImages), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInputAttachments && (s.maxPerStageDescriptorUpdateAfterBindInputAttachments = data.maxPerStageDescriptorUpdateAfterBindInputAttachments), void 0 !== data.maxPerStageUpdateAfterBindResources && (s.maxPerStageUpdateAfterBindResources = data.maxPerStageUpdateAfterBindResources), void 0 !== data.maxDescriptorSetUpdateAfterBindSamplers && (s.maxDescriptorSetUpdateAfterBindSamplers = data.maxDescriptorSetUpdateAfterBindSamplers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffers && (s.maxDescriptorSetUpdateAfterBindUniformBuffers = data.maxDescriptorSetUpdateAfterBindUniformBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic && (s.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = data.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffers && (s.maxDescriptorSetUpdateAfterBindStorageBuffers = data.maxDescriptorSetUpdateAfterBindStorageBuffers), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic && (s.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = data.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic), void 0 !== data.maxDescriptorSetUpdateAfterBindSampledImages && (s.maxDescriptorSetUpdateAfterBindSampledImages = data.maxDescriptorSetUpdateAfterBindSampledImages), void 0 !== data.maxDescriptorSetUpdateAfterBindStorageImages && (s.maxDescriptorSetUpdateAfterBindStorageImages = data.maxDescriptorSetUpdateAfterBindStorageImages), void 0 !== data.maxDescriptorSetUpdateAfterBindInputAttachments && (s.maxDescriptorSetUpdateAfterBindInputAttachments = data.maxDescriptorSetUpdateAfterBindInputAttachments), void 0 !== data.supportedDepthResolveModes && (s.supportedDepthResolveModes = data.supportedDepthResolveModes), void 0 !== data.supportedStencilResolveModes && (s.supportedStencilResolveModes = data.supportedStencilResolveModes), void 0 !== data.independentResolveNone && (s.independentResolveNone = data.independentResolveNone), void 0 !== data.independentResolve && (s.independentResolve = data.independentResolve), void 0 !== data.filterMinmaxSingleComponentFormats && (s.filterMinmaxSingleComponentFormats = data.filterMinmaxSingleComponentFormats), void 0 !== data.filterMinmaxImageComponentMapping && (s.filterMinmaxImageComponentMapping = data.filterMinmaxImageComponentMapping), void 0 !== data.maxTimelineSemaphoreValueDifference && (s.maxTimelineSemaphoreValueDifference = data.maxTimelineSemaphoreValueDifference), void 0 !== data.framebufferIntegerColorSampleCounts && (s.framebufferIntegerColorSampleCounts = data.framebufferIntegerColorSampleCounts), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get driverID() {
        return this.#view.getUint32(16, LE);
    }
    set driverID(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get driverName() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set driverName(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get driverInfo() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(276 + 1 * i));
        return result;
    }
    set driverInfo(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(276 + 1 * i, Number(value[i]));
    }
    get conformanceVersion() {
        return new VkConformanceVersion(this.#data.subarray(532, 532 + VkConformanceVersion.size));
    }
    set conformanceVersion(value) {
        if (value[BUFFER].byteLength < VkConformanceVersion.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 532);
    }
    get denormBehaviorIndependence() {
        return this.#view.getUint32(536, LE);
    }
    set denormBehaviorIndependence(value) {
        this.#view.setUint32(536, Number(value), LE);
    }
    get roundingModeIndependence() {
        return this.#view.getUint32(540, LE);
    }
    set roundingModeIndependence(value) {
        this.#view.setUint32(540, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat16() {
        return this.#view.getUint32(544, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat16(value) {
        this.#view.setUint32(544, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat32() {
        return this.#view.getUint32(548, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat32(value) {
        this.#view.setUint32(548, Number(value), LE);
    }
    get shaderSignedZeroInfNanPreserveFloat64() {
        return this.#view.getUint32(552, LE);
    }
    set shaderSignedZeroInfNanPreserveFloat64(value) {
        this.#view.setUint32(552, Number(value), LE);
    }
    get shaderDenormPreserveFloat16() {
        return this.#view.getUint32(556, LE);
    }
    set shaderDenormPreserveFloat16(value) {
        this.#view.setUint32(556, Number(value), LE);
    }
    get shaderDenormPreserveFloat32() {
        return this.#view.getUint32(560, LE);
    }
    set shaderDenormPreserveFloat32(value) {
        this.#view.setUint32(560, Number(value), LE);
    }
    get shaderDenormPreserveFloat64() {
        return this.#view.getUint32(564, LE);
    }
    set shaderDenormPreserveFloat64(value) {
        this.#view.setUint32(564, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat16() {
        return this.#view.getUint32(568, LE);
    }
    set shaderDenormFlushToZeroFloat16(value) {
        this.#view.setUint32(568, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat32() {
        return this.#view.getUint32(572, LE);
    }
    set shaderDenormFlushToZeroFloat32(value) {
        this.#view.setUint32(572, Number(value), LE);
    }
    get shaderDenormFlushToZeroFloat64() {
        return this.#view.getUint32(576, LE);
    }
    set shaderDenormFlushToZeroFloat64(value) {
        this.#view.setUint32(576, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat16() {
        return this.#view.getUint32(580, LE);
    }
    set shaderRoundingModeRTEFloat16(value) {
        this.#view.setUint32(580, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat32() {
        return this.#view.getUint32(584, LE);
    }
    set shaderRoundingModeRTEFloat32(value) {
        this.#view.setUint32(584, Number(value), LE);
    }
    get shaderRoundingModeRTEFloat64() {
        return this.#view.getUint32(588, LE);
    }
    set shaderRoundingModeRTEFloat64(value) {
        this.#view.setUint32(588, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat16() {
        return this.#view.getUint32(592, LE);
    }
    set shaderRoundingModeRTZFloat16(value) {
        this.#view.setUint32(592, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat32() {
        return this.#view.getUint32(596, LE);
    }
    set shaderRoundingModeRTZFloat32(value) {
        this.#view.setUint32(596, Number(value), LE);
    }
    get shaderRoundingModeRTZFloat64() {
        return this.#view.getUint32(600, LE);
    }
    set shaderRoundingModeRTZFloat64(value) {
        this.#view.setUint32(600, Number(value), LE);
    }
    get maxUpdateAfterBindDescriptorsInAllPools() {
        return this.#view.getUint32(604, LE);
    }
    set maxUpdateAfterBindDescriptorsInAllPools(value) {
        this.#view.setUint32(604, Number(value), LE);
    }
    get shaderUniformBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(608, LE);
    }
    set shaderUniformBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(608, Number(value), LE);
    }
    get shaderSampledImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(612, LE);
    }
    set shaderSampledImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(612, Number(value), LE);
    }
    get shaderStorageBufferArrayNonUniformIndexingNative() {
        return this.#view.getUint32(616, LE);
    }
    set shaderStorageBufferArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(616, Number(value), LE);
    }
    get shaderStorageImageArrayNonUniformIndexingNative() {
        return this.#view.getUint32(620, LE);
    }
    set shaderStorageImageArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(620, Number(value), LE);
    }
    get shaderInputAttachmentArrayNonUniformIndexingNative() {
        return this.#view.getUint32(624, LE);
    }
    set shaderInputAttachmentArrayNonUniformIndexingNative(value) {
        this.#view.setUint32(624, Number(value), LE);
    }
    get robustBufferAccessUpdateAfterBind() {
        return this.#view.getUint32(628, LE);
    }
    set robustBufferAccessUpdateAfterBind(value) {
        this.#view.setUint32(628, Number(value), LE);
    }
    get quadDivergentImplicitLod() {
        return this.#view.getUint32(632, LE);
    }
    set quadDivergentImplicitLod(value) {
        this.#view.setUint32(632, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSamplers() {
        return this.#view.getUint32(636, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSamplers(value) {
        this.#view.setUint32(636, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(640, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(640, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(644, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(644, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindSampledImages() {
        return this.#view.getUint32(648, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(648, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindStorageImages() {
        return this.#view.getUint32(652, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(652, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(656, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(656, Number(value), LE);
    }
    get maxPerStageUpdateAfterBindResources() {
        return this.#view.getUint32(660, LE);
    }
    set maxPerStageUpdateAfterBindResources(value) {
        this.#view.setUint32(660, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSamplers() {
        return this.#view.getUint32(664, LE);
    }
    set maxDescriptorSetUpdateAfterBindSamplers(value) {
        this.#view.setUint32(664, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffers() {
        return this.#view.getUint32(668, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffers(value) {
        this.#view.setUint32(668, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
        return this.#view.getUint32(672, LE);
    }
    set maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(value) {
        this.#view.setUint32(672, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffers() {
        return this.#view.getUint32(676, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffers(value) {
        this.#view.setUint32(676, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
        return this.#view.getUint32(680, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(value) {
        this.#view.setUint32(680, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindSampledImages() {
        return this.#view.getUint32(684, LE);
    }
    set maxDescriptorSetUpdateAfterBindSampledImages(value) {
        this.#view.setUint32(684, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindStorageImages() {
        return this.#view.getUint32(688, LE);
    }
    set maxDescriptorSetUpdateAfterBindStorageImages(value) {
        this.#view.setUint32(688, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInputAttachments() {
        return this.#view.getUint32(692, LE);
    }
    set maxDescriptorSetUpdateAfterBindInputAttachments(value) {
        this.#view.setUint32(692, Number(value), LE);
    }
    get supportedDepthResolveModes() {
        return this.#view.getUint32(696, LE);
    }
    set supportedDepthResolveModes(value) {
        this.#view.setUint32(696, Number(value), LE);
    }
    get supportedStencilResolveModes() {
        return this.#view.getUint32(700, LE);
    }
    set supportedStencilResolveModes(value) {
        this.#view.setUint32(700, Number(value), LE);
    }
    get independentResolveNone() {
        return this.#view.getUint32(704, LE);
    }
    set independentResolveNone(value) {
        this.#view.setUint32(704, Number(value), LE);
    }
    get independentResolve() {
        return this.#view.getUint32(708, LE);
    }
    set independentResolve(value) {
        this.#view.setUint32(708, Number(value), LE);
    }
    get filterMinmaxSingleComponentFormats() {
        return this.#view.getUint32(712, LE);
    }
    set filterMinmaxSingleComponentFormats(value) {
        this.#view.setUint32(712, Number(value), LE);
    }
    get filterMinmaxImageComponentMapping() {
        return this.#view.getUint32(716, LE);
    }
    set filterMinmaxImageComponentMapping(value) {
        this.#view.setUint32(716, Number(value), LE);
    }
    get maxTimelineSemaphoreValueDifference() {
        return this.#view.getBigUint64(720, LE);
    }
    set maxTimelineSemaphoreValueDifference(value) {
        this.#view.setBigUint64(720, BigInt(value), LE);
    }
    get framebufferIntegerColorSampleCounts() {
        return this.#view.getUint32(728, LE);
    }
    set framebufferIntegerColorSampleCounts(value) {
        this.#view.setUint32(728, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkan13Features {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan13Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan13Features(new Uint8Array(VkPhysicalDeviceVulkan13Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan13Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.robustImageAccess && (s.robustImageAccess = data.robustImageAccess), void 0 !== data.inlineUniformBlock && (s.inlineUniformBlock = data.inlineUniformBlock), void 0 !== data.descriptorBindingInlineUniformBlockUpdateAfterBind && (s.descriptorBindingInlineUniformBlockUpdateAfterBind = data.descriptorBindingInlineUniformBlockUpdateAfterBind), void 0 !== data.pipelineCreationCacheControl && (s.pipelineCreationCacheControl = data.pipelineCreationCacheControl), void 0 !== data.privateData && (s.privateData = data.privateData), void 0 !== data.shaderDemoteToHelperInvocation && (s.shaderDemoteToHelperInvocation = data.shaderDemoteToHelperInvocation), void 0 !== data.shaderTerminateInvocation && (s.shaderTerminateInvocation = data.shaderTerminateInvocation), void 0 !== data.subgroupSizeControl && (s.subgroupSizeControl = data.subgroupSizeControl), void 0 !== data.computeFullSubgroups && (s.computeFullSubgroups = data.computeFullSubgroups), void 0 !== data.synchronization2 && (s.synchronization2 = data.synchronization2), void 0 !== data.textureCompressionASTC_HDR && (s.textureCompressionASTC_HDR = data.textureCompressionASTC_HDR), void 0 !== data.shaderZeroInitializeWorkgroupMemory && (s.shaderZeroInitializeWorkgroupMemory = data.shaderZeroInitializeWorkgroupMemory), void 0 !== data.dynamicRendering && (s.dynamicRendering = data.dynamicRendering), void 0 !== data.shaderIntegerDotProduct && (s.shaderIntegerDotProduct = data.shaderIntegerDotProduct), void 0 !== data.maintenance4 && (s.maintenance4 = data.maintenance4), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get robustImageAccess() {
        return this.#view.getUint32(16, LE);
    }
    set robustImageAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inlineUniformBlock() {
        return this.#view.getUint32(20, LE);
    }
    set inlineUniformBlock(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get descriptorBindingInlineUniformBlockUpdateAfterBind() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pipelineCreationCacheControl() {
        return this.#view.getUint32(28, LE);
    }
    set pipelineCreationCacheControl(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get privateData() {
        return this.#view.getUint32(32, LE);
    }
    set privateData(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get shaderDemoteToHelperInvocation() {
        return this.#view.getUint32(36, LE);
    }
    set shaderDemoteToHelperInvocation(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get shaderTerminateInvocation() {
        return this.#view.getUint32(40, LE);
    }
    set shaderTerminateInvocation(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get subgroupSizeControl() {
        return this.#view.getUint32(44, LE);
    }
    set subgroupSizeControl(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get computeFullSubgroups() {
        return this.#view.getUint32(48, LE);
    }
    set computeFullSubgroups(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get synchronization2() {
        return this.#view.getUint32(52, LE);
    }
    set synchronization2(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get textureCompressionASTC_HDR() {
        return this.#view.getUint32(56, LE);
    }
    set textureCompressionASTC_HDR(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get shaderZeroInitializeWorkgroupMemory() {
        return this.#view.getUint32(60, LE);
    }
    set shaderZeroInitializeWorkgroupMemory(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get dynamicRendering() {
        return this.#view.getUint32(64, LE);
    }
    set dynamicRendering(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get shaderIntegerDotProduct() {
        return this.#view.getUint32(68, LE);
    }
    set shaderIntegerDotProduct(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maintenance4() {
        return this.#view.getUint32(72, LE);
    }
    set maintenance4(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class VkPhysicalDeviceVulkan13Properties {
    static size = 216;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVulkan13Properties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVulkan13Properties(new Uint8Array(VkPhysicalDeviceVulkan13Properties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVulkan13Properties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minSubgroupSize && (s.minSubgroupSize = data.minSubgroupSize), void 0 !== data.maxSubgroupSize && (s.maxSubgroupSize = data.maxSubgroupSize), void 0 !== data.maxComputeWorkgroupSubgroups && (s.maxComputeWorkgroupSubgroups = data.maxComputeWorkgroupSubgroups), void 0 !== data.requiredSubgroupSizeStages && (s.requiredSubgroupSizeStages = data.requiredSubgroupSizeStages), void 0 !== data.maxInlineUniformBlockSize && (s.maxInlineUniformBlockSize = data.maxInlineUniformBlockSize), void 0 !== data.maxPerStageDescriptorInlineUniformBlocks && (s.maxPerStageDescriptorInlineUniformBlocks = data.maxPerStageDescriptorInlineUniformBlocks), void 0 !== data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks && (s.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = data.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxDescriptorSetInlineUniformBlocks && (s.maxDescriptorSetInlineUniformBlocks = data.maxDescriptorSetInlineUniformBlocks), void 0 !== data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks && (s.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = data.maxDescriptorSetUpdateAfterBindInlineUniformBlocks), void 0 !== data.maxInlineUniformTotalSize && (s.maxInlineUniformTotalSize = data.maxInlineUniformTotalSize), void 0 !== data.integerDotProduct8BitUnsignedAccelerated && (s.integerDotProduct8BitUnsignedAccelerated = data.integerDotProduct8BitUnsignedAccelerated), void 0 !== data.integerDotProduct8BitSignedAccelerated && (s.integerDotProduct8BitSignedAccelerated = data.integerDotProduct8BitSignedAccelerated), void 0 !== data.integerDotProduct8BitMixedSignednessAccelerated && (s.integerDotProduct8BitMixedSignednessAccelerated = data.integerDotProduct8BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct4x8BitPackedUnsignedAccelerated && (s.integerDotProduct4x8BitPackedUnsignedAccelerated = data.integerDotProduct4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedSignedAccelerated && (s.integerDotProduct4x8BitPackedSignedAccelerated = data.integerDotProduct4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedMixedSignednessAccelerated && (s.integerDotProduct4x8BitPackedMixedSignednessAccelerated = data.integerDotProduct4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProduct16BitUnsignedAccelerated && (s.integerDotProduct16BitUnsignedAccelerated = data.integerDotProduct16BitUnsignedAccelerated), void 0 !== data.integerDotProduct16BitSignedAccelerated && (s.integerDotProduct16BitSignedAccelerated = data.integerDotProduct16BitSignedAccelerated), void 0 !== data.integerDotProduct16BitMixedSignednessAccelerated && (s.integerDotProduct16BitMixedSignednessAccelerated = data.integerDotProduct16BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct32BitUnsignedAccelerated && (s.integerDotProduct32BitUnsignedAccelerated = data.integerDotProduct32BitUnsignedAccelerated), void 0 !== data.integerDotProduct32BitSignedAccelerated && (s.integerDotProduct32BitSignedAccelerated = data.integerDotProduct32BitSignedAccelerated), void 0 !== data.integerDotProduct32BitMixedSignednessAccelerated && (s.integerDotProduct32BitMixedSignednessAccelerated = data.integerDotProduct32BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct64BitUnsignedAccelerated && (s.integerDotProduct64BitUnsignedAccelerated = data.integerDotProduct64BitUnsignedAccelerated), void 0 !== data.integerDotProduct64BitSignedAccelerated && (s.integerDotProduct64BitSignedAccelerated = data.integerDotProduct64BitSignedAccelerated), void 0 !== data.integerDotProduct64BitMixedSignednessAccelerated && (s.integerDotProduct64BitMixedSignednessAccelerated = data.integerDotProduct64BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating8BitSignedAccelerated = data.integerDotProductAccumulatingSaturating8BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating16BitSignedAccelerated = data.integerDotProductAccumulatingSaturating16BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating32BitSignedAccelerated = data.integerDotProductAccumulatingSaturating32BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating64BitSignedAccelerated = data.integerDotProductAccumulatingSaturating64BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated), void 0 !== data.storageTexelBufferOffsetAlignmentBytes && (s.storageTexelBufferOffsetAlignmentBytes = data.storageTexelBufferOffsetAlignmentBytes), void 0 !== data.storageTexelBufferOffsetSingleTexelAlignment && (s.storageTexelBufferOffsetSingleTexelAlignment = data.storageTexelBufferOffsetSingleTexelAlignment), void 0 !== data.uniformTexelBufferOffsetAlignmentBytes && (s.uniformTexelBufferOffsetAlignmentBytes = data.uniformTexelBufferOffsetAlignmentBytes), void 0 !== data.uniformTexelBufferOffsetSingleTexelAlignment && (s.uniformTexelBufferOffsetSingleTexelAlignment = data.uniformTexelBufferOffsetSingleTexelAlignment), void 0 !== data.maxBufferSize && (s.maxBufferSize = data.maxBufferSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minSubgroupSize() {
        return this.#view.getUint32(16, LE);
    }
    set minSubgroupSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxSubgroupSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxSubgroupSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxComputeWorkgroupSubgroups() {
        return this.#view.getUint32(24, LE);
    }
    set maxComputeWorkgroupSubgroups(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get requiredSubgroupSizeStages() {
        return this.#view.getUint32(28, LE);
    }
    set requiredSubgroupSizeStages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get maxInlineUniformBlockSize() {
        return this.#view.getUint32(32, LE);
    }
    set maxInlineUniformBlockSize(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxPerStageDescriptorInlineUniformBlocks() {
        return this.#view.getUint32(36, LE);
    }
    set maxPerStageDescriptorInlineUniformBlocks(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(40, LE);
    }
    set maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxDescriptorSetInlineUniformBlocks() {
        return this.#view.getUint32(44, LE);
    }
    set maxDescriptorSetInlineUniformBlocks(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
        return this.#view.getUint32(48, LE);
    }
    set maxDescriptorSetUpdateAfterBindInlineUniformBlocks(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxInlineUniformTotalSize() {
        return this.#view.getUint32(52, LE);
    }
    set maxInlineUniformTotalSize(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get integerDotProduct8BitUnsignedAccelerated() {
        return this.#view.getUint32(56, LE);
    }
    set integerDotProduct8BitUnsignedAccelerated(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get integerDotProduct8BitSignedAccelerated() {
        return this.#view.getUint32(60, LE);
    }
    set integerDotProduct8BitSignedAccelerated(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get integerDotProduct8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(64, LE);
    }
    set integerDotProduct8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(68, LE);
    }
    set integerDotProduct4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(72, LE);
    }
    set integerDotProduct4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(76, LE);
    }
    set integerDotProduct4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get integerDotProduct16BitUnsignedAccelerated() {
        return this.#view.getUint32(80, LE);
    }
    set integerDotProduct16BitUnsignedAccelerated(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get integerDotProduct16BitSignedAccelerated() {
        return this.#view.getUint32(84, LE);
    }
    set integerDotProduct16BitSignedAccelerated(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get integerDotProduct16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(88, LE);
    }
    set integerDotProduct16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get integerDotProduct32BitUnsignedAccelerated() {
        return this.#view.getUint32(92, LE);
    }
    set integerDotProduct32BitUnsignedAccelerated(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get integerDotProduct32BitSignedAccelerated() {
        return this.#view.getUint32(96, LE);
    }
    set integerDotProduct32BitSignedAccelerated(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get integerDotProduct32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(100, LE);
    }
    set integerDotProduct32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get integerDotProduct64BitUnsignedAccelerated() {
        return this.#view.getUint32(104, LE);
    }
    set integerDotProduct64BitUnsignedAccelerated(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get integerDotProduct64BitSignedAccelerated() {
        return this.#view.getUint32(108, LE);
    }
    set integerDotProduct64BitSignedAccelerated(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get integerDotProduct64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(112, LE);
    }
    set integerDotProduct64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitUnsignedAccelerated() {
        return this.#view.getUint32(116, LE);
    }
    set integerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitSignedAccelerated() {
        return this.#view.getUint32(120, LE);
    }
    set integerDotProductAccumulatingSaturating8BitSignedAccelerated(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(124, LE);
    }
    set integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(128, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(132, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(136, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitUnsignedAccelerated() {
        return this.#view.getUint32(140, LE);
    }
    set integerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitSignedAccelerated() {
        return this.#view.getUint32(144, LE);
    }
    set integerDotProductAccumulatingSaturating16BitSignedAccelerated(value) {
        this.#view.setUint32(144, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(148, LE);
    }
    set integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(148, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitUnsignedAccelerated() {
        return this.#view.getUint32(152, LE);
    }
    set integerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value) {
        this.#view.setUint32(152, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitSignedAccelerated() {
        return this.#view.getUint32(156, LE);
    }
    set integerDotProductAccumulatingSaturating32BitSignedAccelerated(value) {
        this.#view.setUint32(156, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(160, LE);
    }
    set integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(160, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitUnsignedAccelerated() {
        return this.#view.getUint32(164, LE);
    }
    set integerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value) {
        this.#view.setUint32(164, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitSignedAccelerated() {
        return this.#view.getUint32(168, LE);
    }
    set integerDotProductAccumulatingSaturating64BitSignedAccelerated(value) {
        this.#view.setUint32(168, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(172, LE);
    }
    set integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(172, Number(value), LE);
    }
    get storageTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(176, LE);
    }
    set storageTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(176, BigInt(value), LE);
    }
    get storageTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(184, LE);
    }
    set storageTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(184, Number(value), LE);
    }
    get uniformTexelBufferOffsetAlignmentBytes() {
        return this.#view.getBigUint64(192, LE);
    }
    set uniformTexelBufferOffsetAlignmentBytes(value) {
        this.#view.setBigUint64(192, BigInt(value), LE);
    }
    get uniformTexelBufferOffsetSingleTexelAlignment() {
        return this.#view.getUint32(200, LE);
    }
    set uniformTexelBufferOffsetSingleTexelAlignment(value) {
        this.#view.setUint32(200, Number(value), LE);
    }
    get maxBufferSize() {
        return this.#view.getBigUint64(208, LE);
    }
    set maxBufferSize(value) {
        this.#view.setBigUint64(208, BigInt(value), LE);
    }
}
export class VkPipelineCompilerControlCreateInfoAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineCompilerControlCreateInfoAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineCompilerControlCreateInfoAMD(new Uint8Array(VkPipelineCompilerControlCreateInfoAMD.size));
    }
    static create(data) {
        let s = VkPipelineCompilerControlCreateInfoAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.compilerControlFlags && (s.compilerControlFlags = data.compilerControlFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get compilerControlFlags() {
        return this.#view.getUint32(16, LE);
    }
    set compilerControlFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCoherentMemoryFeaturesAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCoherentMemoryFeaturesAMD(new Uint8Array(VkPhysicalDeviceCoherentMemoryFeaturesAMD.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCoherentMemoryFeaturesAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceCoherentMemory && (s.deviceCoherentMemory = data.deviceCoherentMemory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceCoherentMemory() {
        return this.#view.getUint32(16, LE);
    }
    set deviceCoherentMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceToolProperties {
    static size = 1048;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceToolProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceToolProperties(new Uint8Array(VkPhysicalDeviceToolProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceToolProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.name && (s.name = data.name), void 0 !== data.version && (s.version = data.version), void 0 !== data.purposes && (s.purposes = data.purposes), void 0 !== data.description && (s.description = data.description), void 0 !== data.layer && (s.layer = data.layer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get name() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set name(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get version() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(272 + 1 * i));
        return result;
    }
    set version(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(272 + 1 * i, Number(value[i]));
    }
    get purposes() {
        return this.#view.getUint32(528, LE);
    }
    set purposes(value) {
        this.#view.setUint32(528, Number(value), LE);
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(532 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(532 + 1 * i, Number(value[i]));
    }
    get layer() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(788 + 1 * i));
        return result;
    }
    set layer(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(788 + 1 * i, Number(value[i]));
    }
}
export class VkSamplerCustomBorderColorCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerCustomBorderColorCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerCustomBorderColorCreateInfoEXT(new Uint8Array(VkSamplerCustomBorderColorCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkSamplerCustomBorderColorCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.customBorderColor && (s.customBorderColor = data.customBorderColor), void 0 !== data.format && (s.format = data.format), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get customBorderColor() {
        throw new Error('Unknown type: {"union":["f32","i32","u32"]}');
    }
    set customBorderColor(value) {
        throw new Error('Unknown type: {"union":["f32","i32","u32"]}');
    }
    get format() {
        return this.#view.getUint32(20, LE);
    }
    set format(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCustomBorderColorPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCustomBorderColorPropertiesEXT(new Uint8Array(VkPhysicalDeviceCustomBorderColorPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCustomBorderColorPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxCustomBorderColorSamplers && (s.maxCustomBorderColorSamplers = data.maxCustomBorderColorSamplers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxCustomBorderColorSamplers() {
        return this.#view.getUint32(16, LE);
    }
    set maxCustomBorderColorSamplers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceCustomBorderColorFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceCustomBorderColorFeaturesEXT(new Uint8Array(VkPhysicalDeviceCustomBorderColorFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceCustomBorderColorFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.customBorderColors && (s.customBorderColors = data.customBorderColors), void 0 !== data.customBorderColorWithoutFormat && (s.customBorderColorWithoutFormat = data.customBorderColorWithoutFormat), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get customBorderColors() {
        return this.#view.getUint32(16, LE);
    }
    set customBorderColors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get customBorderColorWithoutFormat() {
        return this.#view.getUint32(20, LE);
    }
    set customBorderColorWithoutFormat(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkSamplerBorderColorComponentMappingCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerBorderColorComponentMappingCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerBorderColorComponentMappingCreateInfoEXT(new Uint8Array(VkSamplerBorderColorComponentMappingCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkSamplerBorderColorComponentMappingCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.components && (s.components = data.components), void 0 !== data.srgb && (s.srgb = data.srgb), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get components() {
        return new VkComponentMapping(this.#data.subarray(16, 16 + VkComponentMapping.size));
    }
    set components(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srgb() {
        return this.#view.getUint32(32, LE);
    }
    set srgb(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(new Uint8Array(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.borderColorSwizzle && (s.borderColorSwizzle = data.borderColorSwizzle), void 0 !== data.borderColorSwizzleFromImage && (s.borderColorSwizzleFromImage = data.borderColorSwizzleFromImage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get borderColorSwizzle() {
        return this.#view.getUint32(16, LE);
    }
    set borderColorSwizzle(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get borderColorSwizzleFromImage() {
        return this.#view.getUint32(20, LE);
    }
    set borderColorSwizzleFromImage(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkAccelerationStructureGeometryTrianglesDataKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryTrianglesDataKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureGeometryTrianglesDataKHR(new Uint8Array(VkAccelerationStructureGeometryTrianglesDataKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureGeometryTrianglesDataKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexFormat && (s.vertexFormat = data.vertexFormat), void 0 !== data.vertexData && (s.vertexData = data.vertexData), void 0 !== data.vertexStride && (s.vertexStride = data.vertexStride), void 0 !== data.maxVertex && (s.maxVertex = data.maxVertex), void 0 !== data.indexType && (s.indexType = data.indexType), void 0 !== data.indexData && (s.indexData = data.indexData), void 0 !== data.transformData && (s.transformData = data.transformData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexFormat() {
        return this.#view.getUint32(16, LE);
    }
    set vertexFormat(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vertexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set vertexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get vertexStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set vertexStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxVertex() {
        return this.#view.getUint32(40, LE);
    }
    set maxVertex(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(44, LE);
    }
    set indexType(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get indexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set indexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get transformData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set transformData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class VkAccelerationStructureGeometryAabbsDataKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryAabbsDataKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureGeometryAabbsDataKHR(new Uint8Array(VkAccelerationStructureGeometryAabbsDataKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureGeometryAabbsDataKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.data && (s.data = data.data), void 0 !== data.stride && (s.stride = data.stride), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get stride() {
        return this.#view.getBigUint64(24, LE);
    }
    set stride(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkAccelerationStructureGeometryInstancesDataKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryInstancesDataKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureGeometryInstancesDataKHR(new Uint8Array(VkAccelerationStructureGeometryInstancesDataKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureGeometryInstancesDataKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.arrayOfPointers && (s.arrayOfPointers = data.arrayOfPointers), void 0 !== data.data && (s.data = data.data), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get arrayOfPointers() {
        return this.#view.getUint32(16, LE);
    }
    set arrayOfPointers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class VkAccelerationStructureGeometryKHR {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureGeometryKHR(new Uint8Array(VkAccelerationStructureGeometryKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureGeometryKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.geometryType && (s.geometryType = data.geometryType), void 0 !== data.geometry && (s.geometry = data.geometry), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get geometryType() {
        return this.#view.getUint32(16, LE);
    }
    set geometryType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get geometry() {
        throw new Error('Unknown type: {"union":[{"struct":["u32","buffer","u32",{"union":["u64","buffer"]},"u64","u32","u32",{"union":["u64","buffer"]},{"union":["u64","buffer"]}]},{"struct":["u32","buffer",{"union":["u64","buffer"]},"u64"]},{"struct":["u32","buffer","u32",{"union":["u64","buffer"]}]}]}');
    }
    set geometry(value) {
        throw new Error('Unknown type: {"union":[{"struct":["u32","buffer","u32",{"union":["u64","buffer"]},"u64","u32","u32",{"union":["u64","buffer"]},{"union":["u64","buffer"]}]},{"struct":["u32","buffer",{"union":["u64","buffer"]},"u64"]},{"struct":["u32","buffer","u32",{"union":["u64","buffer"]}]}]}');
    }
    get flags() {
        return this.#view.getUint32(84, LE);
    }
    set flags(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
}
export class VkAccelerationStructureBuildGeometryInfoKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureBuildGeometryInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureBuildGeometryInfoKHR(new Uint8Array(VkAccelerationStructureBuildGeometryInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureBuildGeometryInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.mode && (s.mode = data.mode), void 0 !== data.srcAccelerationStructure && (s.srcAccelerationStructure = data.srcAccelerationStructure), void 0 !== data.dstAccelerationStructure && (s.dstAccelerationStructure = data.dstAccelerationStructure), void 0 !== data.geometryCount && (s.geometryCount = data.geometryCount), void 0 !== data.pGeometries && (s.pGeometries = data.pGeometries), void 0 !== data.ppGeometries && (s.ppGeometries = data.ppGeometries), void 0 !== data.scratchData && (s.scratchData = data.scratchData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get mode() {
        return this.#view.getUint32(24, LE);
    }
    set mode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get srcAccelerationStructure() {
        return this.#view.getBigUint64(32, LE);
    }
    set srcAccelerationStructure(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccelerationStructure() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccelerationStructure(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get geometryCount() {
        return this.#view.getUint32(48, LE);
    }
    set geometryCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pGeometries() {
        return this.#view.getBigUint64(56, LE);
    }
    set pGeometries(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get ppGeometries() {
        return this.#view.getBigUint64(64, LE);
    }
    set ppGeometries(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get scratchData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set scratchData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class VkAccelerationStructureBuildRangeInfoKHR {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureBuildRangeInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureBuildRangeInfoKHR(new Uint8Array(VkAccelerationStructureBuildRangeInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureBuildRangeInfoKHR.alloc();
        return void 0 !== data.primitiveCount && (s.primitiveCount = data.primitiveCount), void 0 !== data.primitiveOffset && (s.primitiveOffset = data.primitiveOffset), void 0 !== data.firstVertex && (s.firstVertex = data.firstVertex), void 0 !== data.transformOffset && (s.transformOffset = data.transformOffset), s;
    }
    get primitiveCount() {
        return this.#view.getUint32(0, LE);
    }
    set primitiveCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get primitiveOffset() {
        return this.#view.getUint32(4, LE);
    }
    set primitiveOffset(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get firstVertex() {
        return this.#view.getUint32(8, LE);
    }
    set firstVertex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get transformOffset() {
        return this.#view.getUint32(12, LE);
    }
    set transformOffset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
}
export class VkAccelerationStructureCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureCreateInfoKHR(new Uint8Array(VkAccelerationStructureCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.createFlags && (s.createFlags = data.createFlags), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), void 0 !== data.type && (s.type = data.type), void 0 !== data.deviceAddress && (s.deviceAddress = data.deviceAddress), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get createFlags() {
        return this.#view.getUint32(16, LE);
    }
    set createFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(40, LE);
    }
    set size(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(48, LE);
    }
    set type(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(56, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkAabbPositionsKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAabbPositionsKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAabbPositionsKHR(new Uint8Array(VkAabbPositionsKHR.size));
    }
    static create(data) {
        let s = VkAabbPositionsKHR.alloc();
        return void 0 !== data.minX && (s.minX = data.minX), void 0 !== data.minY && (s.minY = data.minY), void 0 !== data.minZ && (s.minZ = data.minZ), void 0 !== data.maxX && (s.maxX = data.maxX), void 0 !== data.maxY && (s.maxY = data.maxY), void 0 !== data.maxZ && (s.maxZ = data.maxZ), s;
    }
    get minX() {
        return this.#view.getFloat32(0, LE);
    }
    set minX(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get minY() {
        return this.#view.getFloat32(4, LE);
    }
    set minY(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get minZ() {
        return this.#view.getFloat32(8, LE);
    }
    set minZ(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get maxX() {
        return this.#view.getFloat32(12, LE);
    }
    set maxX(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get maxY() {
        return this.#view.getFloat32(16, LE);
    }
    set maxY(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get maxZ() {
        return this.#view.getFloat32(20, LE);
    }
    set maxZ(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
}
export class VkTransformMatrixKHR {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTransformMatrixKHR(new Uint8Array(VkTransformMatrixKHR.size));
    }
    static create(data) {
        let s = VkTransformMatrixKHR.alloc();
        return void 0 !== data.matrix && (s.matrix = data.matrix), s;
    }
    get matrix() {
        let result = [];
        for(let i = 0; i < 3; i++)result.push(this.#view.getFloat32(0 + 4 * i, LE));
        return result;
    }
    set matrix(value) {
        for(let i = 0; i < value.length; i++)this.#view.setFloat32(0 + 4 * i, Number(value[i]), LE);
    }
}
export class VkAccelerationStructureInstanceKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureInstanceKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureInstanceKHR(new Uint8Array(VkAccelerationStructureInstanceKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureInstanceKHR.alloc();
        return void 0 !== data.transform && (s.transform = data.transform), void 0 !== data.instanceCustomIndex && (s.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (s.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (s.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.accelerationStructureReference && (s.accelerationStructureReference = data.accelerationStructureReference), s;
    }
    get transform() {
        return new VkTransformMatrixKHR(this.#data.subarray(0, 0 + VkTransformMatrixKHR.size));
    }
    set transform(value) {
        if (value[BUFFER].byteLength < VkTransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(4, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(8, LE);
    }
    set mask(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(12, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkAccelerationStructureDeviceAddressInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureDeviceAddressInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureDeviceAddressInfoKHR(new Uint8Array(VkAccelerationStructureDeviceAddressInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureDeviceAddressInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructure && (s.accelerationStructure = data.accelerationStructure), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAccelerationStructureVersionInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureVersionInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureVersionInfoKHR(new Uint8Array(VkAccelerationStructureVersionInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureVersionInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pVersionData && (s.pVersionData = data.pVersionData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pVersionData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pVersionData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkCopyAccelerationStructureInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyAccelerationStructureInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyAccelerationStructureInfoKHR(new Uint8Array(VkCopyAccelerationStructureInfoKHR.size));
    }
    static create(data) {
        let s = VkCopyAccelerationStructureInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkCopyAccelerationStructureToMemoryInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyAccelerationStructureToMemoryInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyAccelerationStructureToMemoryInfoKHR(new Uint8Array(VkCopyAccelerationStructureToMemoryInfoKHR.size));
    }
    static create(data) {
        let s = VkCopyAccelerationStructureToMemoryInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dst() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set dst(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkCopyMemoryToAccelerationStructureInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMemoryToAccelerationStructureInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMemoryToAccelerationStructureInfoKHR(new Uint8Array(VkCopyMemoryToAccelerationStructureInfoKHR.size));
    }
    static create(data) {
        let s = VkCopyMemoryToAccelerationStructureInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set src(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkRayTracingPipelineInterfaceCreateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRayTracingPipelineInterfaceCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRayTracingPipelineInterfaceCreateInfoKHR(new Uint8Array(VkRayTracingPipelineInterfaceCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkRayTracingPipelineInterfaceCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxPipelineRayPayloadSize && (s.maxPipelineRayPayloadSize = data.maxPipelineRayPayloadSize), void 0 !== data.maxPipelineRayHitAttributeSize && (s.maxPipelineRayHitAttributeSize = data.maxPipelineRayHitAttributeSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxPipelineRayPayloadSize() {
        return this.#view.getUint32(16, LE);
    }
    set maxPipelineRayPayloadSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxPipelineRayHitAttributeSize() {
        return this.#view.getUint32(20, LE);
    }
    set maxPipelineRayHitAttributeSize(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPipelineLibraryCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineLibraryCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineLibraryCreateInfoKHR(new Uint8Array(VkPipelineLibraryCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkPipelineLibraryCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.libraryCount && (s.libraryCount = data.libraryCount), void 0 !== data.pLibraries && (s.pLibraries = data.pLibraries), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get libraryCount() {
        return this.#view.getUint32(16, LE);
    }
    set libraryCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pLibraries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pLibraries(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(new Uint8Array(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.extendedDynamicState && (s.extendedDynamicState = data.extendedDynamicState), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get extendedDynamicState() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(new Uint8Array(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.extendedDynamicState2 && (s.extendedDynamicState2 = data.extendedDynamicState2), void 0 !== data.extendedDynamicState2LogicOp && (s.extendedDynamicState2LogicOp = data.extendedDynamicState2LogicOp), void 0 !== data.extendedDynamicState2PatchControlPoints && (s.extendedDynamicState2PatchControlPoints = data.extendedDynamicState2PatchControlPoints), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get extendedDynamicState2() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get extendedDynamicState2LogicOp() {
        return this.#view.getUint32(20, LE);
    }
    set extendedDynamicState2LogicOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extendedDynamicState2PatchControlPoints() {
        return this.#view.getUint32(24, LE);
    }
    set extendedDynamicState2PatchControlPoints(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    static size = 144;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(new Uint8Array(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.extendedDynamicState3TessellationDomainOrigin && (s.extendedDynamicState3TessellationDomainOrigin = data.extendedDynamicState3TessellationDomainOrigin), void 0 !== data.extendedDynamicState3DepthClampEnable && (s.extendedDynamicState3DepthClampEnable = data.extendedDynamicState3DepthClampEnable), void 0 !== data.extendedDynamicState3PolygonMode && (s.extendedDynamicState3PolygonMode = data.extendedDynamicState3PolygonMode), void 0 !== data.extendedDynamicState3RasterizationSamples && (s.extendedDynamicState3RasterizationSamples = data.extendedDynamicState3RasterizationSamples), void 0 !== data.extendedDynamicState3SampleMask && (s.extendedDynamicState3SampleMask = data.extendedDynamicState3SampleMask), void 0 !== data.extendedDynamicState3AlphaToCoverageEnable && (s.extendedDynamicState3AlphaToCoverageEnable = data.extendedDynamicState3AlphaToCoverageEnable), void 0 !== data.extendedDynamicState3AlphaToOneEnable && (s.extendedDynamicState3AlphaToOneEnable = data.extendedDynamicState3AlphaToOneEnable), void 0 !== data.extendedDynamicState3LogicOpEnable && (s.extendedDynamicState3LogicOpEnable = data.extendedDynamicState3LogicOpEnable), void 0 !== data.extendedDynamicState3ColorBlendEnable && (s.extendedDynamicState3ColorBlendEnable = data.extendedDynamicState3ColorBlendEnable), void 0 !== data.extendedDynamicState3ColorBlendEquation && (s.extendedDynamicState3ColorBlendEquation = data.extendedDynamicState3ColorBlendEquation), void 0 !== data.extendedDynamicState3ColorWriteMask && (s.extendedDynamicState3ColorWriteMask = data.extendedDynamicState3ColorWriteMask), void 0 !== data.extendedDynamicState3RasterizationStream && (s.extendedDynamicState3RasterizationStream = data.extendedDynamicState3RasterizationStream), void 0 !== data.extendedDynamicState3ConservativeRasterizationMode && (s.extendedDynamicState3ConservativeRasterizationMode = data.extendedDynamicState3ConservativeRasterizationMode), void 0 !== data.extendedDynamicState3ExtraPrimitiveOverestimationSize && (s.extendedDynamicState3ExtraPrimitiveOverestimationSize = data.extendedDynamicState3ExtraPrimitiveOverestimationSize), void 0 !== data.extendedDynamicState3DepthClipEnable && (s.extendedDynamicState3DepthClipEnable = data.extendedDynamicState3DepthClipEnable), void 0 !== data.extendedDynamicState3SampleLocationsEnable && (s.extendedDynamicState3SampleLocationsEnable = data.extendedDynamicState3SampleLocationsEnable), void 0 !== data.extendedDynamicState3ColorBlendAdvanced && (s.extendedDynamicState3ColorBlendAdvanced = data.extendedDynamicState3ColorBlendAdvanced), void 0 !== data.extendedDynamicState3ProvokingVertexMode && (s.extendedDynamicState3ProvokingVertexMode = data.extendedDynamicState3ProvokingVertexMode), void 0 !== data.extendedDynamicState3LineRasterizationMode && (s.extendedDynamicState3LineRasterizationMode = data.extendedDynamicState3LineRasterizationMode), void 0 !== data.extendedDynamicState3LineStippleEnable && (s.extendedDynamicState3LineStippleEnable = data.extendedDynamicState3LineStippleEnable), void 0 !== data.extendedDynamicState3DepthClipNegativeOneToOne && (s.extendedDynamicState3DepthClipNegativeOneToOne = data.extendedDynamicState3DepthClipNegativeOneToOne), void 0 !== data.extendedDynamicState3ViewportWScalingEnable && (s.extendedDynamicState3ViewportWScalingEnable = data.extendedDynamicState3ViewportWScalingEnable), void 0 !== data.extendedDynamicState3ViewportSwizzle && (s.extendedDynamicState3ViewportSwizzle = data.extendedDynamicState3ViewportSwizzle), void 0 !== data.extendedDynamicState3CoverageToColorEnable && (s.extendedDynamicState3CoverageToColorEnable = data.extendedDynamicState3CoverageToColorEnable), void 0 !== data.extendedDynamicState3CoverageToColorLocation && (s.extendedDynamicState3CoverageToColorLocation = data.extendedDynamicState3CoverageToColorLocation), void 0 !== data.extendedDynamicState3CoverageModulationMode && (s.extendedDynamicState3CoverageModulationMode = data.extendedDynamicState3CoverageModulationMode), void 0 !== data.extendedDynamicState3CoverageModulationTableEnable && (s.extendedDynamicState3CoverageModulationTableEnable = data.extendedDynamicState3CoverageModulationTableEnable), void 0 !== data.extendedDynamicState3CoverageModulationTable && (s.extendedDynamicState3CoverageModulationTable = data.extendedDynamicState3CoverageModulationTable), void 0 !== data.extendedDynamicState3CoverageReductionMode && (s.extendedDynamicState3CoverageReductionMode = data.extendedDynamicState3CoverageReductionMode), void 0 !== data.extendedDynamicState3RepresentativeFragmentTestEnable && (s.extendedDynamicState3RepresentativeFragmentTestEnable = data.extendedDynamicState3RepresentativeFragmentTestEnable), void 0 !== data.extendedDynamicState3ShadingRateImageEnable && (s.extendedDynamicState3ShadingRateImageEnable = data.extendedDynamicState3ShadingRateImageEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get extendedDynamicState3TessellationDomainOrigin() {
        return this.#view.getUint32(16, LE);
    }
    set extendedDynamicState3TessellationDomainOrigin(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get extendedDynamicState3DepthClampEnable() {
        return this.#view.getUint32(20, LE);
    }
    set extendedDynamicState3DepthClampEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get extendedDynamicState3PolygonMode() {
        return this.#view.getUint32(24, LE);
    }
    set extendedDynamicState3PolygonMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get extendedDynamicState3RasterizationSamples() {
        return this.#view.getUint32(28, LE);
    }
    set extendedDynamicState3RasterizationSamples(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get extendedDynamicState3SampleMask() {
        return this.#view.getUint32(32, LE);
    }
    set extendedDynamicState3SampleMask(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get extendedDynamicState3AlphaToCoverageEnable() {
        return this.#view.getUint32(36, LE);
    }
    set extendedDynamicState3AlphaToCoverageEnable(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get extendedDynamicState3AlphaToOneEnable() {
        return this.#view.getUint32(40, LE);
    }
    set extendedDynamicState3AlphaToOneEnable(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get extendedDynamicState3LogicOpEnable() {
        return this.#view.getUint32(44, LE);
    }
    set extendedDynamicState3LogicOpEnable(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendEnable() {
        return this.#view.getUint32(48, LE);
    }
    set extendedDynamicState3ColorBlendEnable(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendEquation() {
        return this.#view.getUint32(52, LE);
    }
    set extendedDynamicState3ColorBlendEquation(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get extendedDynamicState3ColorWriteMask() {
        return this.#view.getUint32(56, LE);
    }
    set extendedDynamicState3ColorWriteMask(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get extendedDynamicState3RasterizationStream() {
        return this.#view.getUint32(60, LE);
    }
    set extendedDynamicState3RasterizationStream(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get extendedDynamicState3ConservativeRasterizationMode() {
        return this.#view.getUint32(64, LE);
    }
    set extendedDynamicState3ConservativeRasterizationMode(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get extendedDynamicState3ExtraPrimitiveOverestimationSize() {
        return this.#view.getUint32(68, LE);
    }
    set extendedDynamicState3ExtraPrimitiveOverestimationSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get extendedDynamicState3DepthClipEnable() {
        return this.#view.getUint32(72, LE);
    }
    set extendedDynamicState3DepthClipEnable(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get extendedDynamicState3SampleLocationsEnable() {
        return this.#view.getUint32(76, LE);
    }
    set extendedDynamicState3SampleLocationsEnable(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get extendedDynamicState3ColorBlendAdvanced() {
        return this.#view.getUint32(80, LE);
    }
    set extendedDynamicState3ColorBlendAdvanced(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get extendedDynamicState3ProvokingVertexMode() {
        return this.#view.getUint32(84, LE);
    }
    set extendedDynamicState3ProvokingVertexMode(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get extendedDynamicState3LineRasterizationMode() {
        return this.#view.getUint32(88, LE);
    }
    set extendedDynamicState3LineRasterizationMode(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get extendedDynamicState3LineStippleEnable() {
        return this.#view.getUint32(92, LE);
    }
    set extendedDynamicState3LineStippleEnable(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get extendedDynamicState3DepthClipNegativeOneToOne() {
        return this.#view.getUint32(96, LE);
    }
    set extendedDynamicState3DepthClipNegativeOneToOne(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get extendedDynamicState3ViewportWScalingEnable() {
        return this.#view.getUint32(100, LE);
    }
    set extendedDynamicState3ViewportWScalingEnable(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get extendedDynamicState3ViewportSwizzle() {
        return this.#view.getUint32(104, LE);
    }
    set extendedDynamicState3ViewportSwizzle(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get extendedDynamicState3CoverageToColorEnable() {
        return this.#view.getUint32(108, LE);
    }
    set extendedDynamicState3CoverageToColorEnable(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get extendedDynamicState3CoverageToColorLocation() {
        return this.#view.getUint32(112, LE);
    }
    set extendedDynamicState3CoverageToColorLocation(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationMode() {
        return this.#view.getUint32(116, LE);
    }
    set extendedDynamicState3CoverageModulationMode(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationTableEnable() {
        return this.#view.getUint32(120, LE);
    }
    set extendedDynamicState3CoverageModulationTableEnable(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get extendedDynamicState3CoverageModulationTable() {
        return this.#view.getUint32(124, LE);
    }
    set extendedDynamicState3CoverageModulationTable(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get extendedDynamicState3CoverageReductionMode() {
        return this.#view.getUint32(128, LE);
    }
    set extendedDynamicState3CoverageReductionMode(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get extendedDynamicState3RepresentativeFragmentTestEnable() {
        return this.#view.getUint32(132, LE);
    }
    set extendedDynamicState3RepresentativeFragmentTestEnable(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get extendedDynamicState3ShadingRateImageEnable() {
        return this.#view.getUint32(136, LE);
    }
    set extendedDynamicState3ShadingRateImageEnable(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
}
export class VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExtendedDynamicState3PropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(new Uint8Array(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExtendedDynamicState3PropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dynamicPrimitiveTopologyUnrestricted && (s.dynamicPrimitiveTopologyUnrestricted = data.dynamicPrimitiveTopologyUnrestricted), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dynamicPrimitiveTopologyUnrestricted() {
        return this.#view.getUint32(16, LE);
    }
    set dynamicPrimitiveTopologyUnrestricted(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkColorBlendEquationEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkColorBlendEquationEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkColorBlendEquationEXT(new Uint8Array(VkColorBlendEquationEXT.size));
    }
    static create(data) {
        let s = VkColorBlendEquationEXT.alloc();
        return void 0 !== data.srcColorBlendFactor && (s.srcColorBlendFactor = data.srcColorBlendFactor), void 0 !== data.dstColorBlendFactor && (s.dstColorBlendFactor = data.dstColorBlendFactor), void 0 !== data.colorBlendOp && (s.colorBlendOp = data.colorBlendOp), void 0 !== data.srcAlphaBlendFactor && (s.srcAlphaBlendFactor = data.srcAlphaBlendFactor), void 0 !== data.dstAlphaBlendFactor && (s.dstAlphaBlendFactor = data.dstAlphaBlendFactor), void 0 !== data.alphaBlendOp && (s.alphaBlendOp = data.alphaBlendOp), s;
    }
    get srcColorBlendFactor() {
        return this.#view.getUint32(0, LE);
    }
    set srcColorBlendFactor(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get dstColorBlendFactor() {
        return this.#view.getUint32(4, LE);
    }
    set dstColorBlendFactor(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get colorBlendOp() {
        return this.#view.getUint32(8, LE);
    }
    set colorBlendOp(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get srcAlphaBlendFactor() {
        return this.#view.getUint32(12, LE);
    }
    set srcAlphaBlendFactor(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get dstAlphaBlendFactor() {
        return this.#view.getUint32(16, LE);
    }
    set dstAlphaBlendFactor(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get alphaBlendOp() {
        return this.#view.getUint32(20, LE);
    }
    set alphaBlendOp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkColorBlendAdvancedEXT {
    static size = 20;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkColorBlendAdvancedEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkColorBlendAdvancedEXT(new Uint8Array(VkColorBlendAdvancedEXT.size));
    }
    static create(data) {
        let s = VkColorBlendAdvancedEXT.alloc();
        return void 0 !== data.advancedBlendOp && (s.advancedBlendOp = data.advancedBlendOp), void 0 !== data.srcPremultiplied && (s.srcPremultiplied = data.srcPremultiplied), void 0 !== data.dstPremultiplied && (s.dstPremultiplied = data.dstPremultiplied), void 0 !== data.blendOverlap && (s.blendOverlap = data.blendOverlap), void 0 !== data.clampResults && (s.clampResults = data.clampResults), s;
    }
    get advancedBlendOp() {
        return this.#view.getUint32(0, LE);
    }
    set advancedBlendOp(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get srcPremultiplied() {
        return this.#view.getUint32(4, LE);
    }
    set srcPremultiplied(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get dstPremultiplied() {
        return this.#view.getUint32(8, LE);
    }
    set dstPremultiplied(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get blendOverlap() {
        return this.#view.getUint32(12, LE);
    }
    set blendOverlap(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get clampResults() {
        return this.#view.getUint32(16, LE);
    }
    set clampResults(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkRenderPassTransformBeginInfoQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassTransformBeginInfoQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassTransformBeginInfoQCOM(new Uint8Array(VkRenderPassTransformBeginInfoQCOM.size));
    }
    static create(data) {
        let s = VkRenderPassTransformBeginInfoQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.transform && (s.transform = data.transform), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCopyCommandTransformInfoQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyCommandTransformInfoQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyCommandTransformInfoQCOM(new Uint8Array(VkCopyCommandTransformInfoQCOM.size));
    }
    static create(data) {
        let s = VkCopyCommandTransformInfoQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.transform && (s.transform = data.transform), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferInheritanceRenderPassTransformInfoQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferInheritanceRenderPassTransformInfoQCOM(new Uint8Array(VkCommandBufferInheritanceRenderPassTransformInfoQCOM.size));
    }
    static create(data) {
        let s = VkCommandBufferInheritanceRenderPassTransformInfoQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.transform && (s.transform = data.transform), void 0 !== data.renderArea && (s.renderArea = data.renderArea), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get transform() {
        return this.#view.getUint32(16, LE);
    }
    set transform(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderArea() {
        return new VkRect2D(this.#data.subarray(20, 20 + VkRect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDiagnosticsConfigFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDiagnosticsConfigFeaturesNV(new Uint8Array(VkPhysicalDeviceDiagnosticsConfigFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDiagnosticsConfigFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.diagnosticsConfig && (s.diagnosticsConfig = data.diagnosticsConfig), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get diagnosticsConfig() {
        return this.#view.getUint32(16, LE);
    }
    set diagnosticsConfig(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceDiagnosticsConfigCreateInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceDiagnosticsConfigCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceDiagnosticsConfigCreateInfoNV(new Uint8Array(VkDeviceDiagnosticsConfigCreateInfoNV.size));
    }
    static create(data) {
        let s = VkDeviceDiagnosticsConfigCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(new Uint8Array(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderZeroInitializeWorkgroupMemory && (s.shaderZeroInitializeWorkgroupMemory = data.shaderZeroInitializeWorkgroupMemory), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderZeroInitializeWorkgroupMemory() {
        return this.#view.getUint32(16, LE);
    }
    set shaderZeroInitializeWorkgroupMemory(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(new Uint8Array(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderSubgroupUniformControlFlow && (s.shaderSubgroupUniformControlFlow = data.shaderSubgroupUniformControlFlow), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderSubgroupUniformControlFlow() {
        return this.#view.getUint32(16, LE);
    }
    set shaderSubgroupUniformControlFlow(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceRobustness2FeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRobustness2FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRobustness2FeaturesEXT(new Uint8Array(VkPhysicalDeviceRobustness2FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRobustness2FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.robustBufferAccess2 && (s.robustBufferAccess2 = data.robustBufferAccess2), void 0 !== data.robustImageAccess2 && (s.robustImageAccess2 = data.robustImageAccess2), void 0 !== data.nullDescriptor && (s.nullDescriptor = data.nullDescriptor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get robustBufferAccess2() {
        return this.#view.getUint32(16, LE);
    }
    set robustBufferAccess2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get robustImageAccess2() {
        return this.#view.getUint32(20, LE);
    }
    set robustImageAccess2(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get nullDescriptor() {
        return this.#view.getUint32(24, LE);
    }
    set nullDescriptor(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceRobustness2PropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRobustness2PropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRobustness2PropertiesEXT(new Uint8Array(VkPhysicalDeviceRobustness2PropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRobustness2PropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.robustStorageBufferAccessSizeAlignment && (s.robustStorageBufferAccessSizeAlignment = data.robustStorageBufferAccessSizeAlignment), void 0 !== data.robustUniformBufferAccessSizeAlignment && (s.robustUniformBufferAccessSizeAlignment = data.robustUniformBufferAccessSizeAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get robustStorageBufferAccessSizeAlignment() {
        return this.#view.getBigUint64(16, LE);
    }
    set robustStorageBufferAccessSizeAlignment(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get robustUniformBufferAccessSizeAlignment() {
        return this.#view.getBigUint64(24, LE);
    }
    set robustUniformBufferAccessSizeAlignment(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceImageRobustnessFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageRobustnessFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageRobustnessFeatures(new Uint8Array(VkPhysicalDeviceImageRobustnessFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageRobustnessFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.robustImageAccess && (s.robustImageAccess = data.robustImageAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get robustImageAccess() {
        return this.#view.getUint32(16, LE);
    }
    set robustImageAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(new Uint8Array(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.workgroupMemoryExplicitLayout && (s.workgroupMemoryExplicitLayout = data.workgroupMemoryExplicitLayout), void 0 !== data.workgroupMemoryExplicitLayoutScalarBlockLayout && (s.workgroupMemoryExplicitLayoutScalarBlockLayout = data.workgroupMemoryExplicitLayoutScalarBlockLayout), void 0 !== data.workgroupMemoryExplicitLayout8BitAccess && (s.workgroupMemoryExplicitLayout8BitAccess = data.workgroupMemoryExplicitLayout8BitAccess), void 0 !== data.workgroupMemoryExplicitLayout16BitAccess && (s.workgroupMemoryExplicitLayout16BitAccess = data.workgroupMemoryExplicitLayout16BitAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get workgroupMemoryExplicitLayout() {
        return this.#view.getUint32(16, LE);
    }
    set workgroupMemoryExplicitLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get workgroupMemoryExplicitLayoutScalarBlockLayout() {
        return this.#view.getUint32(20, LE);
    }
    set workgroupMemoryExplicitLayoutScalarBlockLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get workgroupMemoryExplicitLayout8BitAccess() {
        return this.#view.getUint32(24, LE);
    }
    set workgroupMemoryExplicitLayout8BitAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get workgroupMemoryExplicitLayout16BitAccess() {
        return this.#view.getUint32(28, LE);
    }
    set workgroupMemoryExplicitLayout16BitAccess(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDevicePortabilitySubsetFeaturesKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePortabilitySubsetFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePortabilitySubsetFeaturesKHR(new Uint8Array(VkPhysicalDevicePortabilitySubsetFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePortabilitySubsetFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.constantAlphaColorBlendFactors && (s.constantAlphaColorBlendFactors = data.constantAlphaColorBlendFactors), void 0 !== data.events && (s.events = data.events), void 0 !== data.imageViewFormatReinterpretation && (s.imageViewFormatReinterpretation = data.imageViewFormatReinterpretation), void 0 !== data.imageViewFormatSwizzle && (s.imageViewFormatSwizzle = data.imageViewFormatSwizzle), void 0 !== data.imageView2DOn3DImage && (s.imageView2DOn3DImage = data.imageView2DOn3DImage), void 0 !== data.multisampleArrayImage && (s.multisampleArrayImage = data.multisampleArrayImage), void 0 !== data.mutableComparisonSamplers && (s.mutableComparisonSamplers = data.mutableComparisonSamplers), void 0 !== data.pointPolygons && (s.pointPolygons = data.pointPolygons), void 0 !== data.samplerMipLodBias && (s.samplerMipLodBias = data.samplerMipLodBias), void 0 !== data.separateStencilMaskRef && (s.separateStencilMaskRef = data.separateStencilMaskRef), void 0 !== data.shaderSampleRateInterpolationFunctions && (s.shaderSampleRateInterpolationFunctions = data.shaderSampleRateInterpolationFunctions), void 0 !== data.tessellationIsolines && (s.tessellationIsolines = data.tessellationIsolines), void 0 !== data.tessellationPointMode && (s.tessellationPointMode = data.tessellationPointMode), void 0 !== data.triangleFans && (s.triangleFans = data.triangleFans), void 0 !== data.vertexAttributeAccessBeyondStride && (s.vertexAttributeAccessBeyondStride = data.vertexAttributeAccessBeyondStride), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get constantAlphaColorBlendFactors() {
        return this.#view.getUint32(16, LE);
    }
    set constantAlphaColorBlendFactors(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get events() {
        return this.#view.getUint32(20, LE);
    }
    set events(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageViewFormatReinterpretation() {
        return this.#view.getUint32(24, LE);
    }
    set imageViewFormatReinterpretation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get imageViewFormatSwizzle() {
        return this.#view.getUint32(28, LE);
    }
    set imageViewFormatSwizzle(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get imageView2DOn3DImage() {
        return this.#view.getUint32(32, LE);
    }
    set imageView2DOn3DImage(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get multisampleArrayImage() {
        return this.#view.getUint32(36, LE);
    }
    set multisampleArrayImage(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get mutableComparisonSamplers() {
        return this.#view.getUint32(40, LE);
    }
    set mutableComparisonSamplers(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pointPolygons() {
        return this.#view.getUint32(44, LE);
    }
    set pointPolygons(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get samplerMipLodBias() {
        return this.#view.getUint32(48, LE);
    }
    set samplerMipLodBias(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get separateStencilMaskRef() {
        return this.#view.getUint32(52, LE);
    }
    set separateStencilMaskRef(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get shaderSampleRateInterpolationFunctions() {
        return this.#view.getUint32(56, LE);
    }
    set shaderSampleRateInterpolationFunctions(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get tessellationIsolines() {
        return this.#view.getUint32(60, LE);
    }
    set tessellationIsolines(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get tessellationPointMode() {
        return this.#view.getUint32(64, LE);
    }
    set tessellationPointMode(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get triangleFans() {
        return this.#view.getUint32(68, LE);
    }
    set triangleFans(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get vertexAttributeAccessBeyondStride() {
        return this.#view.getUint32(72, LE);
    }
    set vertexAttributeAccessBeyondStride(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class VkPhysicalDevicePortabilitySubsetPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePortabilitySubsetPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePortabilitySubsetPropertiesKHR(new Uint8Array(VkPhysicalDevicePortabilitySubsetPropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePortabilitySubsetPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minVertexInputBindingStrideAlignment && (s.minVertexInputBindingStrideAlignment = data.minVertexInputBindingStrideAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minVertexInputBindingStrideAlignment() {
        return this.#view.getUint32(16, LE);
    }
    set minVertexInputBindingStrideAlignment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevice4444FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevice4444FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevice4444FormatsFeaturesEXT(new Uint8Array(VkPhysicalDevice4444FormatsFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevice4444FormatsFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.formatA4R4G4B4 && (s.formatA4R4G4B4 = data.formatA4R4G4B4), void 0 !== data.formatA4B4G4R4 && (s.formatA4B4G4R4 = data.formatA4B4G4R4), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get formatA4R4G4B4() {
        return this.#view.getUint32(16, LE);
    }
    set formatA4R4G4B4(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get formatA4B4G4R4() {
        return this.#view.getUint32(20, LE);
    }
    set formatA4B4G4R4(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(new Uint8Array(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subpassShading && (s.subpassShading = data.subpassShading), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subpassShading() {
        return this.#view.getUint32(16, LE);
    }
    set subpassShading(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkBufferCopy2 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCopy2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCopy2(new Uint8Array(VkBufferCopy2.size));
    }
    static create(data) {
        let s = VkBufferCopy2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COPY_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.size && (s.size = data.size), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dstOffset() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstOffset(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImageCopy2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCopy2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCopy2(new Uint8Array(VkImageCopy2.size));
    }
    static create(data) {
        let s = VkImageCopy2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COPY_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.extent && (s.extent = data.extent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(16, 16 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffset() {
        return new VkOffset3D(this.#data.subarray(32, 32 + VkOffset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(44, 44 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get dstOffset() {
        return new VkOffset3D(this.#data.subarray(60, 60 + VkOffset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(72, 72 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkImageBlit2 {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageBlit2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageBlit2(new Uint8Array(VkImageBlit2.size));
    }
    static create(data) {
        let s = VkImageBlit2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_BLIT_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffsets && (s.srcOffsets = data.srcOffsets), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffsets && (s.dstOffsets = data.dstOffsets), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(16, 16 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new VkOffset3D(this.#data.subarray(32 + 12 * i, 32 + 12 * i + VkOffset3D.size)));
        return result;
    }
    set srcOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 32 + 12 * i);
        }
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(56, 56 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get dstOffsets() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(new VkOffset3D(this.#data.subarray(72 + 12 * i, 72 + 12 * i + VkOffset3D.size)));
        return result;
    }
    set dstOffsets(value) {
        for(let i = 0; i < value.length; i++){
            if (value[i][BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
            this.#data.set(value[i][BUFFER], 72 + 12 * i);
        }
    }
}
export class VkBufferImageCopy2 {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferImageCopy2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferImageCopy2(new Uint8Array(VkBufferImageCopy2.size));
    }
    static create(data) {
        let s = VkBufferImageCopy2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.bufferOffset && (s.bufferOffset = data.bufferOffset), void 0 !== data.bufferRowLength && (s.bufferRowLength = data.bufferRowLength), void 0 !== data.bufferImageHeight && (s.bufferImageHeight = data.bufferImageHeight), void 0 !== data.imageSubresource && (s.imageSubresource = data.imageSubresource), void 0 !== data.imageOffset && (s.imageOffset = data.imageOffset), void 0 !== data.imageExtent && (s.imageExtent = data.imageExtent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get bufferOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set bufferOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get bufferRowLength() {
        return this.#view.getUint32(24, LE);
    }
    set bufferRowLength(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get bufferImageHeight() {
        return this.#view.getUint32(28, LE);
    }
    set bufferImageHeight(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get imageSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(32, 32 + VkImageSubresourceLayers.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get imageOffset() {
        return new VkOffset3D(this.#data.subarray(48, 48 + VkOffset3D.size));
    }
    set imageOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get imageExtent() {
        return new VkExtent3D(this.#data.subarray(60, 60 + VkExtent3D.size));
    }
    set imageExtent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
}
export class VkImageResolve2 {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageResolve2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageResolve2(new Uint8Array(VkImageResolve2.size));
    }
    static create(data) {
        let s = VkImageResolve2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcSubresource && (s.srcSubresource = data.srcSubresource), void 0 !== data.srcOffset && (s.srcOffset = data.srcOffset), void 0 !== data.dstSubresource && (s.dstSubresource = data.dstSubresource), void 0 !== data.dstOffset && (s.dstOffset = data.dstOffset), void 0 !== data.extent && (s.extent = data.extent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(16, 16 + VkImageSubresourceLayers.size));
    }
    set srcSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get srcOffset() {
        return new VkOffset3D(this.#data.subarray(32, 32 + VkOffset3D.size));
    }
    set srcOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get dstSubresource() {
        return new VkImageSubresourceLayers(this.#data.subarray(44, 44 + VkImageSubresourceLayers.size));
    }
    set dstSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceLayers.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get dstOffset() {
        return new VkOffset3D(this.#data.subarray(60, 60 + VkOffset3D.size));
    }
    set dstOffset(value) {
        if (value[BUFFER].byteLength < VkOffset3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 60);
    }
    get extent() {
        return new VkExtent3D(this.#data.subarray(72, 72 + VkExtent3D.size));
    }
    set extent(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkCopyBufferInfo2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyBufferInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyBufferInfo2(new Uint8Array(VkCopyBufferInfo2.size));
    }
    static create(data) {
        let s = VkCopyBufferInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcBuffer && (s.srcBuffer = data.srcBuffer), void 0 !== data.dstBuffer && (s.dstBuffer = data.dstBuffer), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dstBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstBuffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(32, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkCopyImageInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyImageInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyImageInfo2(new Uint8Array(VkCopyImageInfo2.size));
    }
    static create(data) {
        let s = VkCopyImageInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcImage && (s.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (s.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (s.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (s.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkBlitImageInfo2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBlitImageInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBlitImageInfo2(new Uint8Array(VkBlitImageInfo2.size));
    }
    static create(data) {
        let s = VkBlitImageInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcImage && (s.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (s.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (s.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (s.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), void 0 !== data.filter && (s.filter = data.filter), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get filter() {
        return this.#view.getUint32(56, LE);
    }
    set filter(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkCopyBufferToImageInfo2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyBufferToImageInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyBufferToImageInfo2(new Uint8Array(VkCopyBufferToImageInfo2.size));
    }
    static create(data) {
        let s = VkCopyBufferToImageInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcBuffer && (s.srcBuffer = data.srcBuffer), void 0 !== data.dstImage && (s.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (s.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(32, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(36, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(40, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkCopyImageToBufferInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyImageToBufferInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyImageToBufferInfo2(new Uint8Array(VkCopyImageToBufferInfo2.size));
    }
    static create(data) {
        let s = VkCopyImageToBufferInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcImage && (s.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (s.srcImageLayout = data.srcImageLayout), void 0 !== data.dstBuffer && (s.dstBuffer = data.dstBuffer), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstBuffer() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstBuffer(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(40, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkResolveImageInfo2 {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkResolveImageInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkResolveImageInfo2(new Uint8Array(VkResolveImageInfo2.size));
    }
    static create(data) {
        let s = VkResolveImageInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcImage && (s.srcImage = data.srcImage), void 0 !== data.srcImageLayout && (s.srcImageLayout = data.srcImageLayout), void 0 !== data.dstImage && (s.dstImage = data.dstImage), void 0 !== data.dstImageLayout && (s.dstImageLayout = data.dstImageLayout), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcImage() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcImage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcImageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set srcImageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstImage() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstImage(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set dstImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(44, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(48, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(new Uint8Array(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderImageInt64Atomics && (s.shaderImageInt64Atomics = data.shaderImageInt64Atomics), void 0 !== data.sparseImageInt64Atomics && (s.sparseImageInt64Atomics = data.sparseImageInt64Atomics), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderImageInt64Atomics() {
        return this.#view.getUint32(16, LE);
    }
    set shaderImageInt64Atomics(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sparseImageInt64Atomics() {
        return this.#view.getUint32(20, LE);
    }
    set sparseImageInt64Atomics(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkFragmentShadingRateAttachmentInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFragmentShadingRateAttachmentInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFragmentShadingRateAttachmentInfoKHR(new Uint8Array(VkFragmentShadingRateAttachmentInfoKHR.size));
    }
    static create(data) {
        let s = VkFragmentShadingRateAttachmentInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pFragmentShadingRateAttachment && (s.pFragmentShadingRateAttachment = data.pFragmentShadingRateAttachment), void 0 !== data.shadingRateAttachmentTexelSize && (s.shadingRateAttachmentTexelSize = data.shadingRateAttachmentTexelSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pFragmentShadingRateAttachment() {
        return this.#view.getBigUint64(16, LE);
    }
    set pFragmentShadingRateAttachment(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get shadingRateAttachmentTexelSize() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set shadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class VkPipelineFragmentShadingRateStateCreateInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineFragmentShadingRateStateCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineFragmentShadingRateStateCreateInfoKHR(new Uint8Array(VkPipelineFragmentShadingRateStateCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkPipelineFragmentShadingRateStateCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentSize && (s.fragmentSize = data.fragmentSize), void 0 !== data.combinerOps && (s.combinerOps = data.combinerOps), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentSize() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set fragmentSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get combinerOps() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getUint32(24 + 4 * i, LE));
        return result;
    }
    set combinerOps(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(24 + 4 * i, Number(value[i]), LE);
    }
}
export class VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShadingRateFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShadingRateFeaturesKHR(new Uint8Array(VkPhysicalDeviceFragmentShadingRateFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShadingRateFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineFragmentShadingRate && (s.pipelineFragmentShadingRate = data.pipelineFragmentShadingRate), void 0 !== data.primitiveFragmentShadingRate && (s.primitiveFragmentShadingRate = data.primitiveFragmentShadingRate), void 0 !== data.attachmentFragmentShadingRate && (s.attachmentFragmentShadingRate = data.attachmentFragmentShadingRate), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineFragmentShadingRate() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineFragmentShadingRate(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitiveFragmentShadingRate() {
        return this.#view.getUint32(20, LE);
    }
    set primitiveFragmentShadingRate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get attachmentFragmentShadingRate() {
        return this.#view.getUint32(24, LE);
    }
    set attachmentFragmentShadingRate(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShadingRatePropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShadingRatePropertiesKHR(new Uint8Array(VkPhysicalDeviceFragmentShadingRatePropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShadingRatePropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minFragmentShadingRateAttachmentTexelSize && (s.minFragmentShadingRateAttachmentTexelSize = data.minFragmentShadingRateAttachmentTexelSize), void 0 !== data.maxFragmentShadingRateAttachmentTexelSize && (s.maxFragmentShadingRateAttachmentTexelSize = data.maxFragmentShadingRateAttachmentTexelSize), void 0 !== data.maxFragmentShadingRateAttachmentTexelSizeAspectRatio && (s.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = data.maxFragmentShadingRateAttachmentTexelSizeAspectRatio), void 0 !== data.primitiveFragmentShadingRateWithMultipleViewports && (s.primitiveFragmentShadingRateWithMultipleViewports = data.primitiveFragmentShadingRateWithMultipleViewports), void 0 !== data.layeredShadingRateAttachments && (s.layeredShadingRateAttachments = data.layeredShadingRateAttachments), void 0 !== data.fragmentShadingRateNonTrivialCombinerOps && (s.fragmentShadingRateNonTrivialCombinerOps = data.fragmentShadingRateNonTrivialCombinerOps), void 0 !== data.maxFragmentSize && (s.maxFragmentSize = data.maxFragmentSize), void 0 !== data.maxFragmentSizeAspectRatio && (s.maxFragmentSizeAspectRatio = data.maxFragmentSizeAspectRatio), void 0 !== data.maxFragmentShadingRateCoverageSamples && (s.maxFragmentShadingRateCoverageSamples = data.maxFragmentShadingRateCoverageSamples), void 0 !== data.maxFragmentShadingRateRasterizationSamples && (s.maxFragmentShadingRateRasterizationSamples = data.maxFragmentShadingRateRasterizationSamples), void 0 !== data.fragmentShadingRateWithShaderDepthStencilWrites && (s.fragmentShadingRateWithShaderDepthStencilWrites = data.fragmentShadingRateWithShaderDepthStencilWrites), void 0 !== data.fragmentShadingRateWithSampleMask && (s.fragmentShadingRateWithSampleMask = data.fragmentShadingRateWithSampleMask), void 0 !== data.fragmentShadingRateWithShaderSampleMask && (s.fragmentShadingRateWithShaderSampleMask = data.fragmentShadingRateWithShaderSampleMask), void 0 !== data.fragmentShadingRateWithConservativeRasterization && (s.fragmentShadingRateWithConservativeRasterization = data.fragmentShadingRateWithConservativeRasterization), void 0 !== data.fragmentShadingRateWithFragmentShaderInterlock && (s.fragmentShadingRateWithFragmentShaderInterlock = data.fragmentShadingRateWithFragmentShaderInterlock), void 0 !== data.fragmentShadingRateWithCustomSampleLocations && (s.fragmentShadingRateWithCustomSampleLocations = data.fragmentShadingRateWithCustomSampleLocations), void 0 !== data.fragmentShadingRateStrictMultiplyCombiner && (s.fragmentShadingRateStrictMultiplyCombiner = data.fragmentShadingRateStrictMultiplyCombiner), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minFragmentShadingRateAttachmentTexelSize() {
        return new VkExtent2D(this.#data.subarray(16, 16 + VkExtent2D.size));
    }
    set minFragmentShadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get maxFragmentShadingRateAttachmentTexelSize() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set maxFragmentShadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get maxFragmentShadingRateAttachmentTexelSizeAspectRatio() {
        return this.#view.getUint32(32, LE);
    }
    set maxFragmentShadingRateAttachmentTexelSizeAspectRatio(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get primitiveFragmentShadingRateWithMultipleViewports() {
        return this.#view.getUint32(36, LE);
    }
    set primitiveFragmentShadingRateWithMultipleViewports(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get layeredShadingRateAttachments() {
        return this.#view.getUint32(40, LE);
    }
    set layeredShadingRateAttachments(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get fragmentShadingRateNonTrivialCombinerOps() {
        return this.#view.getUint32(44, LE);
    }
    set fragmentShadingRateNonTrivialCombinerOps(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxFragmentSize() {
        return new VkExtent2D(this.#data.subarray(48, 48 + VkExtent2D.size));
    }
    set maxFragmentSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get maxFragmentSizeAspectRatio() {
        return this.#view.getUint32(56, LE);
    }
    set maxFragmentSizeAspectRatio(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get maxFragmentShadingRateCoverageSamples() {
        return this.#view.getUint32(60, LE);
    }
    set maxFragmentShadingRateCoverageSamples(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get maxFragmentShadingRateRasterizationSamples() {
        return this.#view.getUint32(64, LE);
    }
    set maxFragmentShadingRateRasterizationSamples(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get fragmentShadingRateWithShaderDepthStencilWrites() {
        return this.#view.getUint32(68, LE);
    }
    set fragmentShadingRateWithShaderDepthStencilWrites(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get fragmentShadingRateWithSampleMask() {
        return this.#view.getUint32(72, LE);
    }
    set fragmentShadingRateWithSampleMask(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get fragmentShadingRateWithShaderSampleMask() {
        return this.#view.getUint32(76, LE);
    }
    set fragmentShadingRateWithShaderSampleMask(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get fragmentShadingRateWithConservativeRasterization() {
        return this.#view.getUint32(80, LE);
    }
    set fragmentShadingRateWithConservativeRasterization(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get fragmentShadingRateWithFragmentShaderInterlock() {
        return this.#view.getUint32(84, LE);
    }
    set fragmentShadingRateWithFragmentShaderInterlock(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get fragmentShadingRateWithCustomSampleLocations() {
        return this.#view.getUint32(88, LE);
    }
    set fragmentShadingRateWithCustomSampleLocations(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get fragmentShadingRateStrictMultiplyCombiner() {
        return this.#view.getUint32(92, LE);
    }
    set fragmentShadingRateStrictMultiplyCombiner(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShadingRateKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShadingRateKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShadingRateKHR(new Uint8Array(VkPhysicalDeviceFragmentShadingRateKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShadingRateKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampleCounts && (s.sampleCounts = data.sampleCounts), void 0 !== data.fragmentSize && (s.fragmentSize = data.fragmentSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampleCounts() {
        return this.#view.getUint32(16, LE);
    }
    set sampleCounts(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fragmentSize() {
        return new VkExtent2D(this.#data.subarray(20, 20 + VkExtent2D.size));
    }
    set fragmentSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VkPhysicalDeviceShaderTerminateInvocationFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderTerminateInvocationFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderTerminateInvocationFeatures(new Uint8Array(VkPhysicalDeviceShaderTerminateInvocationFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderTerminateInvocationFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderTerminateInvocation && (s.shaderTerminateInvocation = data.shaderTerminateInvocation), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderTerminateInvocation() {
        return this.#view.getUint32(16, LE);
    }
    set shaderTerminateInvocation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(new Uint8Array(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentShadingRateEnums && (s.fragmentShadingRateEnums = data.fragmentShadingRateEnums), void 0 !== data.supersampleFragmentShadingRates && (s.supersampleFragmentShadingRates = data.supersampleFragmentShadingRates), void 0 !== data.noInvocationFragmentShadingRates && (s.noInvocationFragmentShadingRates = data.noInvocationFragmentShadingRates), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentShadingRateEnums() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShadingRateEnums(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supersampleFragmentShadingRates() {
        return this.#view.getUint32(20, LE);
    }
    set supersampleFragmentShadingRates(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get noInvocationFragmentShadingRates() {
        return this.#view.getUint32(24, LE);
    }
    set noInvocationFragmentShadingRates(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(new Uint8Array(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxFragmentShadingRateInvocationCount && (s.maxFragmentShadingRateInvocationCount = data.maxFragmentShadingRateInvocationCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxFragmentShadingRateInvocationCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxFragmentShadingRateInvocationCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineFragmentShadingRateEnumStateCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineFragmentShadingRateEnumStateCreateInfoNV(new Uint8Array(VkPipelineFragmentShadingRateEnumStateCreateInfoNV.size));
    }
    static create(data) {
        let s = VkPipelineFragmentShadingRateEnumStateCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shadingRateType && (s.shadingRateType = data.shadingRateType), void 0 !== data.shadingRate && (s.shadingRate = data.shadingRate), void 0 !== data.combinerOps && (s.combinerOps = data.combinerOps), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shadingRateType() {
        return this.#view.getUint32(16, LE);
    }
    set shadingRateType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get shadingRate() {
        return this.#view.getUint32(20, LE);
    }
    set shadingRate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get combinerOps() {
        let result = [];
        for(let i = 0; i < 2; i++)result.push(this.#view.getUint32(24 + 4 * i, LE));
        return result;
    }
    set combinerOps(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint32(24 + 4 * i, Number(value[i]), LE);
    }
}
export class VkAccelerationStructureBuildSizesInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureBuildSizesInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureBuildSizesInfoKHR(new Uint8Array(VkAccelerationStructureBuildSizesInfoKHR.size));
    }
    static create(data) {
        let s = VkAccelerationStructureBuildSizesInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructureSize && (s.accelerationStructureSize = data.accelerationStructureSize), void 0 !== data.updateScratchSize && (s.updateScratchSize = data.updateScratchSize), void 0 !== data.buildScratchSize && (s.buildScratchSize = data.buildScratchSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructureSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructureSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get updateScratchSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set updateScratchSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get buildScratchSize() {
        return this.#view.getBigUint64(32, LE);
    }
    set buildScratchSize(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(new Uint8Array(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image2DViewOf3D && (s.image2DViewOf3D = data.image2DViewOf3D), void 0 !== data.sampler2DViewOf3D && (s.sampler2DViewOf3D = data.sampler2DViewOf3D), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image2DViewOf3D() {
        return this.#view.getUint32(16, LE);
    }
    set image2DViewOf3D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get sampler2DViewOf3D() {
        return this.#view.getUint32(20, LE);
    }
    set sampler2DViewOf3D(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(new Uint8Array(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mutableDescriptorType && (s.mutableDescriptorType = data.mutableDescriptorType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mutableDescriptorType() {
        return this.#view.getUint32(16, LE);
    }
    set mutableDescriptorType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMutableDescriptorTypeListEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMutableDescriptorTypeListEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMutableDescriptorTypeListEXT(new Uint8Array(VkMutableDescriptorTypeListEXT.size));
    }
    static create(data) {
        let s = VkMutableDescriptorTypeListEXT.alloc();
        return void 0 !== data.descriptorTypeCount && (s.descriptorTypeCount = data.descriptorTypeCount), void 0 !== data.pDescriptorTypes && (s.pDescriptorTypes = data.pDescriptorTypes), s;
    }
    get descriptorTypeCount() {
        return this.#view.getUint32(0, LE);
    }
    set descriptorTypeCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pDescriptorTypes() {
        return this.#view.getBigUint64(8, LE);
    }
    set pDescriptorTypes(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkMutableDescriptorTypeCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMutableDescriptorTypeCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMutableDescriptorTypeCreateInfoEXT(new Uint8Array(VkMutableDescriptorTypeCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkMutableDescriptorTypeCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mutableDescriptorTypeListCount && (s.mutableDescriptorTypeListCount = data.mutableDescriptorTypeListCount), void 0 !== data.pMutableDescriptorTypeLists && (s.pMutableDescriptorTypeLists = data.pMutableDescriptorTypeLists), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mutableDescriptorTypeListCount() {
        return this.#view.getUint32(16, LE);
    }
    set mutableDescriptorTypeListCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pMutableDescriptorTypeLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMutableDescriptorTypeLists(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDepthClipControlFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDepthClipControlFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDepthClipControlFeaturesEXT(new Uint8Array(VkPhysicalDeviceDepthClipControlFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDepthClipControlFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.depthClipControl && (s.depthClipControl = data.depthClipControl), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get depthClipControl() {
        return this.#view.getUint32(16, LE);
    }
    set depthClipControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineViewportDepthClipControlCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineViewportDepthClipControlCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineViewportDepthClipControlCreateInfoEXT(new Uint8Array(VkPipelineViewportDepthClipControlCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineViewportDepthClipControlCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.negativeOneToOne && (s.negativeOneToOne = data.negativeOneToOne), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get negativeOneToOne() {
        return this.#view.getUint32(16, LE);
    }
    set negativeOneToOne(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(new Uint8Array(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexInputDynamicState && (s.vertexInputDynamicState = data.vertexInputDynamicState), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexInputDynamicState() {
        return this.#view.getUint32(16, LE);
    }
    set vertexInputDynamicState(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(new Uint8Array(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.externalMemoryRDMA && (s.externalMemoryRDMA = data.externalMemoryRDMA), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get externalMemoryRDMA() {
        return this.#view.getUint32(16, LE);
    }
    set externalMemoryRDMA(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVertexInputBindingDescription2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVertexInputBindingDescription2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVertexInputBindingDescription2EXT(new Uint8Array(VkVertexInputBindingDescription2EXT.size));
    }
    static create(data) {
        let s = VkVertexInputBindingDescription2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.stride && (s.stride = data.stride), void 0 !== data.inputRate && (s.inputRate = data.inputRate), void 0 !== data.divisor && (s.divisor = data.divisor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get binding() {
        return this.#view.getUint32(16, LE);
    }
    set binding(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get stride() {
        return this.#view.getUint32(20, LE);
    }
    set stride(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get inputRate() {
        return this.#view.getUint32(24, LE);
    }
    set inputRate(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get divisor() {
        return this.#view.getUint32(28, LE);
    }
    set divisor(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkVertexInputAttributeDescription2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVertexInputAttributeDescription2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVertexInputAttributeDescription2EXT(new Uint8Array(VkVertexInputAttributeDescription2EXT.size));
    }
    static create(data) {
        let s = VkVertexInputAttributeDescription2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.location && (s.location = data.location), void 0 !== data.binding && (s.binding = data.binding), void 0 !== data.format && (s.format = data.format), void 0 !== data.offset && (s.offset = data.offset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get location() {
        return this.#view.getUint32(16, LE);
    }
    set location(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get binding() {
        return this.#view.getUint32(20, LE);
    }
    set binding(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(24, LE);
    }
    set format(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get offset() {
        return this.#view.getUint32(28, LE);
    }
    set offset(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceColorWriteEnableFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceColorWriteEnableFeaturesEXT(new Uint8Array(VkPhysicalDeviceColorWriteEnableFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceColorWriteEnableFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.colorWriteEnable && (s.colorWriteEnable = data.colorWriteEnable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get colorWriteEnable() {
        return this.#view.getUint32(16, LE);
    }
    set colorWriteEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineColorWriteCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineColorWriteCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineColorWriteCreateInfoEXT(new Uint8Array(VkPipelineColorWriteCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineColorWriteCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachmentCount && (s.attachmentCount = data.attachmentCount), void 0 !== data.pColorWriteEnables && (s.pColorWriteEnables = data.pColorWriteEnables), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pColorWriteEnables() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorWriteEnables(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkMemoryBarrier2 {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryBarrier2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryBarrier2(new Uint8Array(VkMemoryBarrier2.size));
    }
    static create(data) {
        let s = VkMemoryBarrier2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_BARRIER_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcStageMask && (s.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (s.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkImageMemoryBarrier2 {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageMemoryBarrier2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageMemoryBarrier2(new Uint8Array(VkImageMemoryBarrier2.size));
    }
    static create(data) {
        let s = VkImageMemoryBarrier2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcStageMask && (s.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (s.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.oldLayout && (s.oldLayout = data.oldLayout), void 0 !== data.newLayout && (s.newLayout = data.newLayout), void 0 !== data.srcQueueFamilyIndex && (s.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (s.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.image && (s.image = data.image), void 0 !== data.subresourceRange && (s.subresourceRange = data.subresourceRange), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get oldLayout() {
        return this.#view.getUint32(48, LE);
    }
    set oldLayout(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get newLayout() {
        return this.#view.getUint32(52, LE);
    }
    set newLayout(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(56, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(60, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(64, LE);
    }
    set image(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get subresourceRange() {
        return new VkImageSubresourceRange(this.#data.subarray(72, 72 + VkImageSubresourceRange.size));
    }
    set subresourceRange(value) {
        if (value[BUFFER].byteLength < VkImageSubresourceRange.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkBufferMemoryBarrier2 {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferMemoryBarrier2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferMemoryBarrier2(new Uint8Array(VkBufferMemoryBarrier2.size));
    }
    static create(data) {
        let s = VkBufferMemoryBarrier2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.srcStageMask && (s.srcStageMask = data.srcStageMask), void 0 !== data.srcAccessMask && (s.srcAccessMask = data.srcAccessMask), void 0 !== data.dstStageMask && (s.dstStageMask = data.dstStageMask), void 0 !== data.dstAccessMask && (s.dstAccessMask = data.dstAccessMask), void 0 !== data.srcQueueFamilyIndex && (s.srcQueueFamilyIndex = data.srcQueueFamilyIndex), void 0 !== data.dstQueueFamilyIndex && (s.dstQueueFamilyIndex = data.dstQueueFamilyIndex), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get srcStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set srcStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get srcAccessMask() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcAccessMask(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstStageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstStageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstAccessMask() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstAccessMask(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get srcQueueFamilyIndex() {
        return this.#view.getUint32(48, LE);
    }
    set srcQueueFamilyIndex(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get dstQueueFamilyIndex() {
        return this.#view.getUint32(52, LE);
    }
    set dstQueueFamilyIndex(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(56, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(64, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(72, LE);
    }
    set size(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
}
export class VkDependencyInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDependencyInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDependencyInfo(new Uint8Array(VkDependencyInfo.size));
    }
    static create(data) {
        let s = VkDependencyInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEPENDENCY_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dependencyFlags && (s.dependencyFlags = data.dependencyFlags), void 0 !== data.memoryBarrierCount && (s.memoryBarrierCount = data.memoryBarrierCount), void 0 !== data.pMemoryBarriers && (s.pMemoryBarriers = data.pMemoryBarriers), void 0 !== data.bufferMemoryBarrierCount && (s.bufferMemoryBarrierCount = data.bufferMemoryBarrierCount), void 0 !== data.pBufferMemoryBarriers && (s.pBufferMemoryBarriers = data.pBufferMemoryBarriers), void 0 !== data.imageMemoryBarrierCount && (s.imageMemoryBarrierCount = data.imageMemoryBarrierCount), void 0 !== data.pImageMemoryBarriers && (s.pImageMemoryBarriers = data.pImageMemoryBarriers), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dependencyFlags() {
        return this.#view.getUint32(16, LE);
    }
    set dependencyFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryBarrierCount() {
        return this.#view.getUint32(20, LE);
    }
    set memoryBarrierCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pMemoryBarriers() {
        return this.#view.getBigUint64(24, LE);
    }
    set pMemoryBarriers(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferMemoryBarrierCount() {
        return this.#view.getUint32(32, LE);
    }
    set bufferMemoryBarrierCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pBufferMemoryBarriers() {
        return this.#view.getBigUint64(40, LE);
    }
    set pBufferMemoryBarriers(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get imageMemoryBarrierCount() {
        return this.#view.getUint32(48, LE);
    }
    set imageMemoryBarrierCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pImageMemoryBarriers() {
        return this.#view.getBigUint64(56, LE);
    }
    set pImageMemoryBarriers(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkSemaphoreSubmitInfo {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSemaphoreSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSemaphoreSubmitInfo(new Uint8Array(VkSemaphoreSubmitInfo.size));
    }
    static create(data) {
        let s = VkSemaphoreSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.value && (s.value = data.value), void 0 !== data.stageMask && (s.stageMask = data.stageMask), void 0 !== data.deviceIndex && (s.deviceIndex = data.deviceIndex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get value() {
        return this.#view.getBigUint64(24, LE);
    }
    set value(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stageMask() {
        return this.#view.getBigUint64(32, LE);
    }
    set stageMask(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get deviceIndex() {
        return this.#view.getUint32(40, LE);
    }
    set deviceIndex(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkCommandBufferSubmitInfo {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferSubmitInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferSubmitInfo(new Uint8Array(VkCommandBufferSubmitInfo.size));
    }
    static create(data) {
        let s = VkCommandBufferSubmitInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.commandBuffer && (s.commandBuffer = data.commandBuffer), void 0 !== data.deviceMask && (s.deviceMask = data.deviceMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get commandBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set commandBuffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get deviceMask() {
        return this.#view.getUint32(24, LE);
    }
    set deviceMask(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkSubmitInfo2 {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubmitInfo2.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubmitInfo2(new Uint8Array(VkSubmitInfo2.size));
    }
    static create(data) {
        let s = VkSubmitInfo2.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO_2, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.waitSemaphoreInfoCount && (s.waitSemaphoreInfoCount = data.waitSemaphoreInfoCount), void 0 !== data.pWaitSemaphoreInfos && (s.pWaitSemaphoreInfos = data.pWaitSemaphoreInfos), void 0 !== data.commandBufferInfoCount && (s.commandBufferInfoCount = data.commandBufferInfoCount), void 0 !== data.pCommandBufferInfos && (s.pCommandBufferInfos = data.pCommandBufferInfos), void 0 !== data.signalSemaphoreInfoCount && (s.signalSemaphoreInfoCount = data.signalSemaphoreInfoCount), void 0 !== data.pSignalSemaphoreInfos && (s.pSignalSemaphoreInfos = data.pSignalSemaphoreInfos), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get waitSemaphoreInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set waitSemaphoreInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pWaitSemaphoreInfos() {
        return this.#view.getBigUint64(24, LE);
    }
    set pWaitSemaphoreInfos(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get commandBufferInfoCount() {
        return this.#view.getUint32(32, LE);
    }
    set commandBufferInfoCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pCommandBufferInfos() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCommandBufferInfos(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get signalSemaphoreInfoCount() {
        return this.#view.getUint32(48, LE);
    }
    set signalSemaphoreInfoCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pSignalSemaphoreInfos() {
        return this.#view.getBigUint64(56, LE);
    }
    set pSignalSemaphoreInfos(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkQueueFamilyCheckpointProperties2NV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyCheckpointProperties2NV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyCheckpointProperties2NV(new Uint8Array(VkQueueFamilyCheckpointProperties2NV.size));
    }
    static create(data) {
        let s = VkQueueFamilyCheckpointProperties2NV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.checkpointExecutionStageMask && (s.checkpointExecutionStageMask = data.checkpointExecutionStageMask), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get checkpointExecutionStageMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set checkpointExecutionStageMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkCheckpointData2NV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCheckpointData2NV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCheckpointData2NV(new Uint8Array(VkCheckpointData2NV.size));
    }
    static create(data) {
        let s = VkCheckpointData2NV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stage && (s.stage = data.stage), void 0 !== data.pCheckpointMarker && (s.pCheckpointMarker = data.pCheckpointMarker), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stage() {
        return this.#view.getBigUint64(16, LE);
    }
    set stage(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pCheckpointMarker() {
        return this.#view.getBigUint64(24, LE);
    }
    set pCheckpointMarker(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceSynchronization2Features {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSynchronization2Features.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSynchronization2Features(new Uint8Array(VkPhysicalDeviceSynchronization2Features.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSynchronization2Features.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.synchronization2 && (s.synchronization2 = data.synchronization2), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get synchronization2() {
        return this.#view.getUint32(16, LE);
    }
    set synchronization2(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(new Uint8Array(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.primitivesGeneratedQuery && (s.primitivesGeneratedQuery = data.primitivesGeneratedQuery), void 0 !== data.primitivesGeneratedQueryWithRasterizerDiscard && (s.primitivesGeneratedQueryWithRasterizerDiscard = data.primitivesGeneratedQueryWithRasterizerDiscard), void 0 !== data.primitivesGeneratedQueryWithNonZeroStreams && (s.primitivesGeneratedQueryWithNonZeroStreams = data.primitivesGeneratedQueryWithNonZeroStreams), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get primitivesGeneratedQuery() {
        return this.#view.getUint32(16, LE);
    }
    set primitivesGeneratedQuery(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get primitivesGeneratedQueryWithRasterizerDiscard() {
        return this.#view.getUint32(20, LE);
    }
    set primitivesGeneratedQueryWithRasterizerDiscard(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primitivesGeneratedQueryWithNonZeroStreams() {
        return this.#view.getUint32(24, LE);
    }
    set primitivesGeneratedQueryWithNonZeroStreams(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceLegacyDitheringFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceLegacyDitheringFeaturesEXT(new Uint8Array(VkPhysicalDeviceLegacyDitheringFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceLegacyDitheringFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.legacyDithering && (s.legacyDithering = data.legacyDithering), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get legacyDithering() {
        return this.#view.getUint32(16, LE);
    }
    set legacyDithering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(new Uint8Array(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.multisampledRenderToSingleSampled && (s.multisampledRenderToSingleSampled = data.multisampledRenderToSingleSampled), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get multisampledRenderToSingleSampled() {
        return this.#view.getUint32(16, LE);
    }
    set multisampledRenderToSingleSampled(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkSubpassResolvePerformanceQueryEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubpassResolvePerformanceQueryEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubpassResolvePerformanceQueryEXT(new Uint8Array(VkSubpassResolvePerformanceQueryEXT.size));
    }
    static create(data) {
        let s = VkSubpassResolvePerformanceQueryEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.optimal && (s.optimal = data.optimal), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get optimal() {
        return this.#view.getUint32(16, LE);
    }
    set optimal(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMultisampledRenderToSingleSampledInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMultisampledRenderToSingleSampledInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMultisampledRenderToSingleSampledInfoEXT(new Uint8Array(VkMultisampledRenderToSingleSampledInfoEXT.size));
    }
    static create(data) {
        let s = VkMultisampledRenderToSingleSampledInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.multisampledRenderToSingleSampledEnable && (s.multisampledRenderToSingleSampledEnable = data.multisampledRenderToSingleSampledEnable), void 0 !== data.rasterizationSamples && (s.rasterizationSamples = data.rasterizationSamples), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get multisampledRenderToSingleSampledEnable() {
        return this.#view.getUint32(16, LE);
    }
    set multisampledRenderToSingleSampledEnable(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelineProtectedAccessFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(new Uint8Array(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelineProtectedAccessFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineProtectedAccess && (s.pipelineProtectedAccess = data.pipelineProtectedAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineProtectedAccess() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineProtectedAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkQueueFamilyVideoPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyVideoPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyVideoPropertiesKHR(new Uint8Array(VkQueueFamilyVideoPropertiesKHR.size));
    }
    static create(data) {
        let s = VkQueueFamilyVideoPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.videoCodecOperations && (s.videoCodecOperations = data.videoCodecOperations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get videoCodecOperations() {
        return this.#view.getUint32(16, LE);
    }
    set videoCodecOperations(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkQueueFamilyQueryResultStatusPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkQueueFamilyQueryResultStatusPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkQueueFamilyQueryResultStatusPropertiesKHR(new Uint8Array(VkQueueFamilyQueryResultStatusPropertiesKHR.size));
    }
    static create(data) {
        let s = VkQueueFamilyQueryResultStatusPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.queryResultStatusSupport && (s.queryResultStatusSupport = data.queryResultStatusSupport), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get queryResultStatusSupport() {
        return this.#view.getUint32(16, LE);
    }
    set queryResultStatusSupport(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoProfileListInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoProfileListInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoProfileListInfoKHR(new Uint8Array(VkVideoProfileListInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoProfileListInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.profileCount && (s.profileCount = data.profileCount), void 0 !== data.pProfiles && (s.pProfiles = data.pProfiles), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get profileCount() {
        return this.#view.getUint32(16, LE);
    }
    set profileCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pProfiles() {
        return this.#view.getBigUint64(24, LE);
    }
    set pProfiles(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceVideoFormatInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceVideoFormatInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceVideoFormatInfoKHR(new Uint8Array(VkPhysicalDeviceVideoFormatInfoKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceVideoFormatInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageUsage && (s.imageUsage = data.imageUsage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageUsage() {
        return this.#view.getUint32(16, LE);
    }
    set imageUsage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoFormatPropertiesKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoFormatPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoFormatPropertiesKHR(new Uint8Array(VkVideoFormatPropertiesKHR.size));
    }
    static create(data) {
        let s = VkVideoFormatPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.componentMapping && (s.componentMapping = data.componentMapping), void 0 !== data.imageCreateFlags && (s.imageCreateFlags = data.imageCreateFlags), void 0 !== data.imageType && (s.imageType = data.imageType), void 0 !== data.imageTiling && (s.imageTiling = data.imageTiling), void 0 !== data.imageUsageFlags && (s.imageUsageFlags = data.imageUsageFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get componentMapping() {
        return new VkComponentMapping(this.#data.subarray(20, 20 + VkComponentMapping.size));
    }
    set componentMapping(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get imageCreateFlags() {
        return this.#view.getUint32(36, LE);
    }
    set imageCreateFlags(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get imageType() {
        return this.#view.getUint32(40, LE);
    }
    set imageType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get imageTiling() {
        return this.#view.getUint32(44, LE);
    }
    set imageTiling(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get imageUsageFlags() {
        return this.#view.getUint32(48, LE);
    }
    set imageUsageFlags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkVideoProfileInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoProfileInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoProfileInfoKHR(new Uint8Array(VkVideoProfileInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoProfileInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.videoCodecOperation && (s.videoCodecOperation = data.videoCodecOperation), void 0 !== data.chromaSubsampling && (s.chromaSubsampling = data.chromaSubsampling), void 0 !== data.lumaBitDepth && (s.lumaBitDepth = data.lumaBitDepth), void 0 !== data.chromaBitDepth && (s.chromaBitDepth = data.chromaBitDepth), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get videoCodecOperation() {
        return this.#view.getUint32(16, LE);
    }
    set videoCodecOperation(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get chromaSubsampling() {
        return this.#view.getUint32(20, LE);
    }
    set chromaSubsampling(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get lumaBitDepth() {
        return this.#view.getUint32(24, LE);
    }
    set lumaBitDepth(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get chromaBitDepth() {
        return this.#view.getUint32(28, LE);
    }
    set chromaBitDepth(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkVideoCapabilitiesKHR {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoCapabilitiesKHR(new Uint8Array(VkVideoCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkVideoCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.minBitstreamBufferOffsetAlignment && (s.minBitstreamBufferOffsetAlignment = data.minBitstreamBufferOffsetAlignment), void 0 !== data.minBitstreamBufferSizeAlignment && (s.minBitstreamBufferSizeAlignment = data.minBitstreamBufferSizeAlignment), void 0 !== data.pictureAccessGranularity && (s.pictureAccessGranularity = data.pictureAccessGranularity), void 0 !== data.minCodedExtent && (s.minCodedExtent = data.minCodedExtent), void 0 !== data.maxCodedExtent && (s.maxCodedExtent = data.maxCodedExtent), void 0 !== data.maxDpbSlots && (s.maxDpbSlots = data.maxDpbSlots), void 0 !== data.maxActiveReferencePictures && (s.maxActiveReferencePictures = data.maxActiveReferencePictures), void 0 !== data.stdHeaderVersion && (s.stdHeaderVersion = data.stdHeaderVersion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get minBitstreamBufferOffsetAlignment() {
        return this.#view.getBigUint64(24, LE);
    }
    set minBitstreamBufferOffsetAlignment(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get minBitstreamBufferSizeAlignment() {
        return this.#view.getBigUint64(32, LE);
    }
    set minBitstreamBufferSizeAlignment(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pictureAccessGranularity() {
        return new VkExtent2D(this.#data.subarray(40, 40 + VkExtent2D.size));
    }
    set pictureAccessGranularity(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get minCodedExtent() {
        return new VkExtent2D(this.#data.subarray(48, 48 + VkExtent2D.size));
    }
    set minCodedExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get maxCodedExtent() {
        return new VkExtent2D(this.#data.subarray(56, 56 + VkExtent2D.size));
    }
    set maxCodedExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get maxDpbSlots() {
        return this.#view.getUint32(64, LE);
    }
    set maxDpbSlots(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get maxActiveReferencePictures() {
        return this.#view.getUint32(68, LE);
    }
    set maxActiveReferencePictures(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get stdHeaderVersion() {
        return new VkExtensionProperties(this.#data.subarray(72, 72 + VkExtensionProperties.size));
    }
    set stdHeaderVersion(value) {
        if (value[BUFFER].byteLength < VkExtensionProperties.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkVideoSessionMemoryRequirementsKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoSessionMemoryRequirementsKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoSessionMemoryRequirementsKHR(new Uint8Array(VkVideoSessionMemoryRequirementsKHR.size));
    }
    static create(data) {
        let s = VkVideoSessionMemoryRequirementsKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryBindIndex && (s.memoryBindIndex = data.memoryBindIndex), void 0 !== data.memoryRequirements && (s.memoryRequirements = data.memoryRequirements), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryBindIndex() {
        return this.#view.getUint32(16, LE);
    }
    set memoryBindIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memoryRequirements() {
        return new VkMemoryRequirements(this.#data.subarray(24, 24 + VkMemoryRequirements.size));
    }
    set memoryRequirements(value) {
        if (value[BUFFER].byteLength < VkMemoryRequirements.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
}
export class VkBindVideoSessionMemoryInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBindVideoSessionMemoryInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBindVideoSessionMemoryInfoKHR(new Uint8Array(VkBindVideoSessionMemoryInfoKHR.size));
    }
    static create(data) {
        let s = VkBindVideoSessionMemoryInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryBindIndex && (s.memoryBindIndex = data.memoryBindIndex), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.memoryOffset && (s.memoryOffset = data.memoryOffset), void 0 !== data.memorySize && (s.memorySize = data.memorySize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryBindIndex() {
        return this.#view.getUint32(16, LE);
    }
    set memoryBindIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(24, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get memoryOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set memoryOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get memorySize() {
        return this.#view.getBigUint64(40, LE);
    }
    set memorySize(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoPictureResourceInfoKHR {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoPictureResourceInfoKHR(new Uint8Array(VkVideoPictureResourceInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoPictureResourceInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.codedOffset && (s.codedOffset = data.codedOffset), void 0 !== data.codedExtent && (s.codedExtent = data.codedExtent), void 0 !== data.baseArrayLayer && (s.baseArrayLayer = data.baseArrayLayer), void 0 !== data.imageViewBinding && (s.imageViewBinding = data.imageViewBinding), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get codedOffset() {
        return new VkOffset2D(this.#data.subarray(16, 16 + VkOffset2D.size));
    }
    set codedOffset(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get codedExtent() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set codedExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get baseArrayLayer() {
        return this.#view.getUint32(32, LE);
    }
    set baseArrayLayer(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get imageViewBinding() {
        return this.#view.getBigUint64(40, LE);
    }
    set imageViewBinding(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoReferenceSlotInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoReferenceSlotInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoReferenceSlotInfoKHR(new Uint8Array(VkVideoReferenceSlotInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoReferenceSlotInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.slotIndex && (s.slotIndex = data.slotIndex), void 0 !== data.pPictureResource && (s.pPictureResource = data.pPictureResource), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get slotIndex() {
        return this.#view.getInt32(16, LE);
    }
    set slotIndex(value) {
        this.#view.setInt32(16, Number(value), LE);
    }
    get pPictureResource() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPictureResource(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVideoDecodeCapabilitiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeCapabilitiesKHR(new Uint8Array(VkVideoDecodeCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkVideoDecodeCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoDecodeUsageInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeUsageInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeUsageInfoKHR(new Uint8Array(VkVideoDecodeUsageInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoDecodeUsageInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.videoUsageHints && (s.videoUsageHints = data.videoUsageHints), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get videoUsageHints() {
        return this.#view.getUint32(16, LE);
    }
    set videoUsageHints(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoDecodeInfoKHR {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeInfoKHR(new Uint8Array(VkVideoDecodeInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoDecodeInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.srcBuffer && (s.srcBuffer = data.srcBuffer), void 0 !== data.srcBufferOffset && (s.srcBufferOffset = data.srcBufferOffset), void 0 !== data.srcBufferRange && (s.srcBufferRange = data.srcBufferRange), void 0 !== data.dstPictureResource && (s.dstPictureResource = data.dstPictureResource), void 0 !== data.pSetupReferenceSlot && (s.pSetupReferenceSlot = data.pSetupReferenceSlot), void 0 !== data.referenceSlotCount && (s.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (s.pReferenceSlots = data.pReferenceSlots), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get srcBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set srcBuffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get srcBufferOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set srcBufferOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get srcBufferRange() {
        return this.#view.getBigUint64(40, LE);
    }
    set srcBufferRange(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get dstPictureResource() {
        return new VkVideoPictureResourceInfoKHR(this.#data.subarray(48, 48 + VkVideoPictureResourceInfoKHR.size));
    }
    set dstPictureResource(value) {
        if (value[BUFFER].byteLength < VkVideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get pSetupReferenceSlot() {
        return this.#view.getBigUint64(96, LE);
    }
    set pSetupReferenceSlot(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(104, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(112, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
}
export class VkVideoDecodeH264ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264ProfileInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264ProfileInfoEXT(new Uint8Array(VkVideoDecodeH264ProfileInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264ProfileInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdProfileIdc && (s.stdProfileIdc = data.stdProfileIdc), void 0 !== data.pictureLayout && (s.pictureLayout = data.pictureLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pictureLayout() {
        return this.#view.getUint32(20, LE);
    }
    set pictureLayout(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkVideoDecodeH264CapabilitiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264CapabilitiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264CapabilitiesEXT(new Uint8Array(VkVideoDecodeH264CapabilitiesEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264CapabilitiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxLevelIdc && (s.maxLevelIdc = data.maxLevelIdc), void 0 !== data.fieldOffsetGranularity && (s.fieldOffsetGranularity = data.fieldOffsetGranularity), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxLevelIdc() {
        return this.#view.getUint32(16, LE);
    }
    set maxLevelIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get fieldOffsetGranularity() {
        return new VkOffset2D(this.#data.subarray(20, 20 + VkOffset2D.size));
    }
    set fieldOffsetGranularity(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
}
export class VkVideoDecodeH264SessionParametersAddInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264SessionParametersAddInfoEXT(new Uint8Array(VkVideoDecodeH264SessionParametersAddInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264SessionParametersAddInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdSPSCount && (s.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (s.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (s.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (s.pStdPPSs = data.pStdPPSs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoDecodeH264SessionParametersCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264SessionParametersCreateInfoEXT(new Uint8Array(VkVideoDecodeH264SessionParametersCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264SessionParametersCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxStdSPSCount && (s.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (s.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (s.pParametersAddInfo = data.pParametersAddInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVideoDecodeH264PictureInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264PictureInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264PictureInfoEXT(new Uint8Array(VkVideoDecodeH264PictureInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264PictureInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pStdPictureInfo && (s.pStdPictureInfo = data.pStdPictureInfo), void 0 !== data.sliceCount && (s.sliceCount = data.sliceCount), void 0 !== data.pSliceOffsets && (s.pSliceOffsets = data.pSliceOffsets), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pStdPictureInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdPictureInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get sliceCount() {
        return this.#view.getUint32(24, LE);
    }
    set sliceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSliceOffsets() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceOffsets(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoDecodeH264DpbSlotInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH264DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH264DpbSlotInfoEXT(new Uint8Array(VkVideoDecodeH264DpbSlotInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH264DpbSlotInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pStdReferenceInfo && (s.pStdReferenceInfo = data.pStdReferenceInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkVideoDecodeH265ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265ProfileInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265ProfileInfoEXT(new Uint8Array(VkVideoDecodeH265ProfileInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265ProfileInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdProfileIdc && (s.stdProfileIdc = data.stdProfileIdc), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoDecodeH265CapabilitiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265CapabilitiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265CapabilitiesEXT(new Uint8Array(VkVideoDecodeH265CapabilitiesEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265CapabilitiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxLevelIdc && (s.maxLevelIdc = data.maxLevelIdc), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxLevelIdc() {
        return this.#view.getUint32(16, LE);
    }
    set maxLevelIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoDecodeH265SessionParametersAddInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265SessionParametersAddInfoEXT(new Uint8Array(VkVideoDecodeH265SessionParametersAddInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265SessionParametersAddInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdVPSCount && (s.stdVPSCount = data.stdVPSCount), void 0 !== data.pStdVPSs && (s.pStdVPSs = data.pStdVPSs), void 0 !== data.stdSPSCount && (s.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (s.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (s.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (s.pStdPPSs = data.pStdPPSs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdVPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdVPSs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(48, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkVideoDecodeH265SessionParametersCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265SessionParametersCreateInfoEXT(new Uint8Array(VkVideoDecodeH265SessionParametersCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265SessionParametersCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxStdVPSCount && (s.maxStdVPSCount = data.maxStdVPSCount), void 0 !== data.maxStdSPSCount && (s.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (s.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (s.pParametersAddInfo = data.pParametersAddInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxStdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(32, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoDecodeH265PictureInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265PictureInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265PictureInfoEXT(new Uint8Array(VkVideoDecodeH265PictureInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265PictureInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pStdPictureInfo && (s.pStdPictureInfo = data.pStdPictureInfo), void 0 !== data.sliceCount && (s.sliceCount = data.sliceCount), void 0 !== data.pSliceOffsets && (s.pSliceOffsets = data.pSliceOffsets), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pStdPictureInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdPictureInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get sliceCount() {
        return this.#view.getUint32(24, LE);
    }
    set sliceCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pSliceOffsets() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceOffsets(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoDecodeH265DpbSlotInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoDecodeH265DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoDecodeH265DpbSlotInfoEXT(new Uint8Array(VkVideoDecodeH265DpbSlotInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoDecodeH265DpbSlotInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pStdReferenceInfo && (s.pStdReferenceInfo = data.pStdReferenceInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(16, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkVideoSessionCreateInfoKHR {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoSessionCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoSessionCreateInfoKHR(new Uint8Array(VkVideoSessionCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoSessionCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.queueFamilyIndex && (s.queueFamilyIndex = data.queueFamilyIndex), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.pVideoProfile && (s.pVideoProfile = data.pVideoProfile), void 0 !== data.pictureFormat && (s.pictureFormat = data.pictureFormat), void 0 !== data.maxCodedExtent && (s.maxCodedExtent = data.maxCodedExtent), void 0 !== data.referencePictureFormat && (s.referencePictureFormat = data.referencePictureFormat), void 0 !== data.maxDpbSlots && (s.maxDpbSlots = data.maxDpbSlots), void 0 !== data.maxActiveReferencePictures && (s.maxActiveReferencePictures = data.maxActiveReferencePictures), void 0 !== data.pStdHeaderVersion && (s.pStdHeaderVersion = data.pStdHeaderVersion), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get queueFamilyIndex() {
        return this.#view.getUint32(16, LE);
    }
    set queueFamilyIndex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pVideoProfile() {
        return this.#view.getBigUint64(24, LE);
    }
    set pVideoProfile(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pictureFormat() {
        return this.#view.getUint32(32, LE);
    }
    set pictureFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxCodedExtent() {
        return new VkExtent2D(this.#data.subarray(36, 36 + VkExtent2D.size));
    }
    set maxCodedExtent(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
    get referencePictureFormat() {
        return this.#view.getUint32(44, LE);
    }
    set referencePictureFormat(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxDpbSlots() {
        return this.#view.getUint32(48, LE);
    }
    set maxDpbSlots(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxActiveReferencePictures() {
        return this.#view.getUint32(52, LE);
    }
    set maxActiveReferencePictures(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get pStdHeaderVersion() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdHeaderVersion(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkVideoSessionParametersCreateInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoSessionParametersCreateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoSessionParametersCreateInfoKHR(new Uint8Array(VkVideoSessionParametersCreateInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoSessionParametersCreateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.videoSessionParametersTemplate && (s.videoSessionParametersTemplate = data.videoSessionParametersTemplate), void 0 !== data.videoSession && (s.videoSession = data.videoSession), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoSessionParametersTemplate() {
        return this.#view.getBigUint64(24, LE);
    }
    set videoSessionParametersTemplate(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get videoSession() {
        return this.#view.getBigUint64(32, LE);
    }
    set videoSession(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoSessionParametersUpdateInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoSessionParametersUpdateInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoSessionParametersUpdateInfoKHR(new Uint8Array(VkVideoSessionParametersUpdateInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoSessionParametersUpdateInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.updateSequenceCount && (s.updateSequenceCount = data.updateSequenceCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get updateSequenceCount() {
        return this.#view.getUint32(16, LE);
    }
    set updateSequenceCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoBeginCodingInfoKHR {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoBeginCodingInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoBeginCodingInfoKHR(new Uint8Array(VkVideoBeginCodingInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoBeginCodingInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.videoSession && (s.videoSession = data.videoSession), void 0 !== data.videoSessionParameters && (s.videoSessionParameters = data.videoSessionParameters), void 0 !== data.referenceSlotCount && (s.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (s.pReferenceSlots = data.pReferenceSlots), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoSession() {
        return this.#view.getBigUint64(24, LE);
    }
    set videoSession(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get videoSessionParameters() {
        return this.#view.getBigUint64(32, LE);
    }
    set videoSessionParameters(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(40, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(48, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkVideoEndCodingInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEndCodingInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEndCodingInfoKHR(new Uint8Array(VkVideoEndCodingInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoEndCodingInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoCodingControlInfoKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoCodingControlInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoCodingControlInfoKHR(new Uint8Array(VkVideoCodingControlInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoCodingControlInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoEncodeUsageInfoKHR {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeUsageInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeUsageInfoKHR(new Uint8Array(VkVideoEncodeUsageInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoEncodeUsageInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.videoUsageHints && (s.videoUsageHints = data.videoUsageHints), void 0 !== data.videoContentHints && (s.videoContentHints = data.videoContentHints), void 0 !== data.tuningMode && (s.tuningMode = data.tuningMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get videoUsageHints() {
        return this.#view.getUint32(16, LE);
    }
    set videoUsageHints(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get videoContentHints() {
        return this.#view.getUint32(20, LE);
    }
    set videoContentHints(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get tuningMode() {
        return this.#view.getUint32(24, LE);
    }
    set tuningMode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkVideoEncodeInfoKHR {
    static size = 128;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeInfoKHR(new Uint8Array(VkVideoEncodeInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoEncodeInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.qualityLevel && (s.qualityLevel = data.qualityLevel), void 0 !== data.dstBitstreamBuffer && (s.dstBitstreamBuffer = data.dstBitstreamBuffer), void 0 !== data.dstBitstreamBufferOffset && (s.dstBitstreamBufferOffset = data.dstBitstreamBufferOffset), void 0 !== data.dstBitstreamBufferMaxRange && (s.dstBitstreamBufferMaxRange = data.dstBitstreamBufferMaxRange), void 0 !== data.srcPictureResource && (s.srcPictureResource = data.srcPictureResource), void 0 !== data.pSetupReferenceSlot && (s.pSetupReferenceSlot = data.pSetupReferenceSlot), void 0 !== data.referenceSlotCount && (s.referenceSlotCount = data.referenceSlotCount), void 0 !== data.pReferenceSlots && (s.pReferenceSlots = data.pReferenceSlots), void 0 !== data.precedingExternallyEncodedBytes && (s.precedingExternallyEncodedBytes = data.precedingExternallyEncodedBytes), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get qualityLevel() {
        return this.#view.getUint32(20, LE);
    }
    set qualityLevel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get dstBitstreamBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set dstBitstreamBuffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get dstBitstreamBufferOffset() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstBitstreamBufferOffset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get dstBitstreamBufferMaxRange() {
        return this.#view.getBigUint64(40, LE);
    }
    set dstBitstreamBufferMaxRange(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get srcPictureResource() {
        return new VkVideoPictureResourceInfoKHR(this.#data.subarray(48, 48 + VkVideoPictureResourceInfoKHR.size));
    }
    set srcPictureResource(value) {
        if (value[BUFFER].byteLength < VkVideoPictureResourceInfoKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 48);
    }
    get pSetupReferenceSlot() {
        return this.#view.getBigUint64(96, LE);
    }
    set pSetupReferenceSlot(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get referenceSlotCount() {
        return this.#view.getUint32(104, LE);
    }
    set referenceSlotCount(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get pReferenceSlots() {
        return this.#view.getBigUint64(112, LE);
    }
    set pReferenceSlots(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get precedingExternallyEncodedBytes() {
        return this.#view.getUint32(120, LE);
    }
    set precedingExternallyEncodedBytes(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
}
export class VkVideoEncodeRateControlInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeRateControlInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeRateControlInfoKHR(new Uint8Array(VkVideoEncodeRateControlInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoEncodeRateControlInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.rateControlMode && (s.rateControlMode = data.rateControlMode), void 0 !== data.layerCount && (s.layerCount = data.layerCount), void 0 !== data.pLayerConfigs && (s.pLayerConfigs = data.pLayerConfigs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rateControlMode() {
        return this.#view.getUint32(20, LE);
    }
    set rateControlMode(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get layerCount() {
        return this.#view.getUint8(24);
    }
    set layerCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get pLayerConfigs() {
        return this.#view.getBigUint64(32, LE);
    }
    set pLayerConfigs(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeRateControlLayerInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeRateControlLayerInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeRateControlLayerInfoKHR(new Uint8Array(VkVideoEncodeRateControlLayerInfoKHR.size));
    }
    static create(data) {
        let s = VkVideoEncodeRateControlLayerInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.averageBitrate && (s.averageBitrate = data.averageBitrate), void 0 !== data.maxBitrate && (s.maxBitrate = data.maxBitrate), void 0 !== data.frameRateNumerator && (s.frameRateNumerator = data.frameRateNumerator), void 0 !== data.frameRateDenominator && (s.frameRateDenominator = data.frameRateDenominator), void 0 !== data.virtualBufferSizeInMs && (s.virtualBufferSizeInMs = data.virtualBufferSizeInMs), void 0 !== data.initialVirtualBufferSizeInMs && (s.initialVirtualBufferSizeInMs = data.initialVirtualBufferSizeInMs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get averageBitrate() {
        return this.#view.getUint32(16, LE);
    }
    set averageBitrate(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxBitrate() {
        return this.#view.getUint32(20, LE);
    }
    set maxBitrate(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get frameRateNumerator() {
        return this.#view.getUint32(24, LE);
    }
    set frameRateNumerator(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get frameRateDenominator() {
        return this.#view.getUint32(28, LE);
    }
    set frameRateDenominator(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get virtualBufferSizeInMs() {
        return this.#view.getUint32(32, LE);
    }
    set virtualBufferSizeInMs(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get initialVirtualBufferSizeInMs() {
        return this.#view.getUint32(36, LE);
    }
    set initialVirtualBufferSizeInMs(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class VkVideoEncodeCapabilitiesKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeCapabilitiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeCapabilitiesKHR(new Uint8Array(VkVideoEncodeCapabilitiesKHR.size));
    }
    static create(data) {
        let s = VkVideoEncodeCapabilitiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.rateControlModes && (s.rateControlModes = data.rateControlModes), void 0 !== data.rateControlLayerCount && (s.rateControlLayerCount = data.rateControlLayerCount), void 0 !== data.qualityLevelCount && (s.qualityLevelCount = data.qualityLevelCount), void 0 !== data.inputImageDataFillAlignment && (s.inputImageDataFillAlignment = data.inputImageDataFillAlignment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rateControlModes() {
        return this.#view.getUint32(20, LE);
    }
    set rateControlModes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rateControlLayerCount() {
        return this.#view.getUint8(24);
    }
    set rateControlLayerCount(value) {
        this.#view.setUint8(24, Number(value));
    }
    get qualityLevelCount() {
        return this.#view.getUint8(25);
    }
    set qualityLevelCount(value) {
        this.#view.setUint8(25, Number(value));
    }
    get inputImageDataFillAlignment() {
        return new VkExtent2D(this.#data.subarray(28, 28 + VkExtent2D.size));
    }
    set inputImageDataFillAlignment(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
}
export class VkVideoEncodeH264CapabilitiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264CapabilitiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264CapabilitiesEXT(new Uint8Array(VkVideoEncodeH264CapabilitiesEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264CapabilitiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.inputModeFlags && (s.inputModeFlags = data.inputModeFlags), void 0 !== data.outputModeFlags && (s.outputModeFlags = data.outputModeFlags), void 0 !== data.maxPPictureL0ReferenceCount && (s.maxPPictureL0ReferenceCount = data.maxPPictureL0ReferenceCount), void 0 !== data.maxBPictureL0ReferenceCount && (s.maxBPictureL0ReferenceCount = data.maxBPictureL0ReferenceCount), void 0 !== data.maxL1ReferenceCount && (s.maxL1ReferenceCount = data.maxL1ReferenceCount), void 0 !== data.motionVectorsOverPicBoundariesFlag && (s.motionVectorsOverPicBoundariesFlag = data.motionVectorsOverPicBoundariesFlag), void 0 !== data.maxBytesPerPicDenom && (s.maxBytesPerPicDenom = data.maxBytesPerPicDenom), void 0 !== data.maxBitsPerMbDenom && (s.maxBitsPerMbDenom = data.maxBitsPerMbDenom), void 0 !== data.log2MaxMvLengthHorizontal && (s.log2MaxMvLengthHorizontal = data.log2MaxMvLengthHorizontal), void 0 !== data.log2MaxMvLengthVertical && (s.log2MaxMvLengthVertical = data.log2MaxMvLengthVertical), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inputModeFlags() {
        return this.#view.getUint32(20, LE);
    }
    set inputModeFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get outputModeFlags() {
        return this.#view.getUint32(24, LE);
    }
    set outputModeFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get maxPPictureL0ReferenceCount() {
        return this.#view.getUint8(28);
    }
    set maxPPictureL0ReferenceCount(value) {
        this.#view.setUint8(28, Number(value));
    }
    get maxBPictureL0ReferenceCount() {
        return this.#view.getUint8(29);
    }
    set maxBPictureL0ReferenceCount(value) {
        this.#view.setUint8(29, Number(value));
    }
    get maxL1ReferenceCount() {
        return this.#view.getUint8(30);
    }
    set maxL1ReferenceCount(value) {
        this.#view.setUint8(30, Number(value));
    }
    get motionVectorsOverPicBoundariesFlag() {
        return this.#view.getUint32(32, LE);
    }
    set motionVectorsOverPicBoundariesFlag(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxBytesPerPicDenom() {
        return this.#view.getUint32(36, LE);
    }
    set maxBytesPerPicDenom(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get maxBitsPerMbDenom() {
        return this.#view.getUint32(40, LE);
    }
    set maxBitsPerMbDenom(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get log2MaxMvLengthHorizontal() {
        return this.#view.getUint32(44, LE);
    }
    set log2MaxMvLengthHorizontal(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get log2MaxMvLengthVertical() {
        return this.#view.getUint32(48, LE);
    }
    set log2MaxMvLengthVertical(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkVideoEncodeH264SessionParametersAddInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264SessionParametersAddInfoEXT(new Uint8Array(VkVideoEncodeH264SessionParametersAddInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264SessionParametersAddInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdSPSCount && (s.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (s.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (s.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (s.pStdPPSs = data.pStdPPSs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264SessionParametersCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264SessionParametersCreateInfoEXT(new Uint8Array(VkVideoEncodeH264SessionParametersCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264SessionParametersCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxStdSPSCount && (s.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (s.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (s.pParametersAddInfo = data.pParametersAddInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264DpbSlotInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264DpbSlotInfoEXT(new Uint8Array(VkVideoEncodeH264DpbSlotInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264DpbSlotInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.slotIndex && (s.slotIndex = data.slotIndex), void 0 !== data.pStdReferenceInfo && (s.pStdReferenceInfo = data.pStdReferenceInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get slotIndex() {
        return this.#view.getInt8(16);
    }
    set slotIndex(value) {
        this.#view.setInt8(16, Number(value));
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264VclFrameInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264VclFrameInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264VclFrameInfoEXT(new Uint8Array(VkVideoEncodeH264VclFrameInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264VclFrameInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pReferenceFinalLists && (s.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.naluSliceEntryCount && (s.naluSliceEntryCount = data.naluSliceEntryCount), void 0 !== data.pNaluSliceEntries && (s.pNaluSliceEntries = data.pNaluSliceEntries), void 0 !== data.pCurrentPictureInfo && (s.pCurrentPictureInfo = data.pCurrentPictureInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get naluSliceEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set naluSliceEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pNaluSliceEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pNaluSliceEntries(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pCurrentPictureInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCurrentPictureInfo(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264ReferenceListsInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264ReferenceListsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264ReferenceListsInfoEXT(new Uint8Array(VkVideoEncodeH264ReferenceListsInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264ReferenceListsInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.referenceList0EntryCount && (s.referenceList0EntryCount = data.referenceList0EntryCount), void 0 !== data.pReferenceList0Entries && (s.pReferenceList0Entries = data.pReferenceList0Entries), void 0 !== data.referenceList1EntryCount && (s.referenceList1EntryCount = data.referenceList1EntryCount), void 0 !== data.pReferenceList1Entries && (s.pReferenceList1Entries = data.pReferenceList1Entries), void 0 !== data.pMemMgmtCtrlOperations && (s.pMemMgmtCtrlOperations = data.pMemMgmtCtrlOperations), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get referenceList0EntryCount() {
        return this.#view.getUint8(16);
    }
    set referenceList0EntryCount(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pReferenceList0Entries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceList0Entries(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get referenceList1EntryCount() {
        return this.#view.getUint8(32);
    }
    set referenceList1EntryCount(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pReferenceList1Entries() {
        return this.#view.getBigUint64(40, LE);
    }
    set pReferenceList1Entries(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pMemMgmtCtrlOperations() {
        return this.#view.getBigUint64(48, LE);
    }
    set pMemMgmtCtrlOperations(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264EmitPictureParametersInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264EmitPictureParametersInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264EmitPictureParametersInfoEXT(new Uint8Array(VkVideoEncodeH264EmitPictureParametersInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264EmitPictureParametersInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.spsId && (s.spsId = data.spsId), void 0 !== data.emitSpsEnable && (s.emitSpsEnable = data.emitSpsEnable), void 0 !== data.ppsIdEntryCount && (s.ppsIdEntryCount = data.ppsIdEntryCount), void 0 !== data.ppsIdEntries && (s.ppsIdEntries = data.ppsIdEntries), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get spsId() {
        return this.#view.getUint8(16);
    }
    set spsId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get emitSpsEnable() {
        return this.#view.getUint32(20, LE);
    }
    set emitSpsEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get ppsIdEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set ppsIdEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ppsIdEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set ppsIdEntries(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264ProfileInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264ProfileInfoEXT(new Uint8Array(VkVideoEncodeH264ProfileInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264ProfileInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdProfileIdc && (s.stdProfileIdc = data.stdProfileIdc), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoEncodeH264NaluSliceInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264NaluSliceInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264NaluSliceInfoEXT(new Uint8Array(VkVideoEncodeH264NaluSliceInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264NaluSliceInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mbCount && (s.mbCount = data.mbCount), void 0 !== data.pReferenceFinalLists && (s.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.pSliceHeaderStd && (s.pSliceHeaderStd = data.pSliceHeaderStd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mbCount() {
        return this.#view.getUint32(16, LE);
    }
    set mbCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pSliceHeaderStd() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceHeaderStd(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeH264RateControlInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264RateControlInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264RateControlInfoEXT(new Uint8Array(VkVideoEncodeH264RateControlInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264RateControlInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.gopFrameCount && (s.gopFrameCount = data.gopFrameCount), void 0 !== data.idrPeriod && (s.idrPeriod = data.idrPeriod), void 0 !== data.consecutiveBFrameCount && (s.consecutiveBFrameCount = data.consecutiveBFrameCount), void 0 !== data.rateControlStructure && (s.rateControlStructure = data.rateControlStructure), void 0 !== data.temporalLayerCount && (s.temporalLayerCount = data.temporalLayerCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get gopFrameCount() {
        return this.#view.getUint32(16, LE);
    }
    set gopFrameCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get idrPeriod() {
        return this.#view.getUint32(20, LE);
    }
    set idrPeriod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get consecutiveBFrameCount() {
        return this.#view.getUint32(24, LE);
    }
    set consecutiveBFrameCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rateControlStructure() {
        return this.#view.getUint32(28, LE);
    }
    set rateControlStructure(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get temporalLayerCount() {
        return this.#view.getUint8(32);
    }
    set temporalLayerCount(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class VkVideoEncodeH264QpEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264QpEXT(new Uint8Array(VkVideoEncodeH264QpEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264QpEXT.alloc();
        return void 0 !== data.qpI && (s.qpI = data.qpI), void 0 !== data.qpP && (s.qpP = data.qpP), void 0 !== data.qpB && (s.qpB = data.qpB), s;
    }
    get qpI() {
        return this.#view.getInt32(0, LE);
    }
    set qpI(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get qpP() {
        return this.#view.getInt32(4, LE);
    }
    set qpP(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get qpB() {
        return this.#view.getInt32(8, LE);
    }
    set qpB(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VkVideoEncodeH264FrameSizeEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264FrameSizeEXT(new Uint8Array(VkVideoEncodeH264FrameSizeEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264FrameSizeEXT.alloc();
        return void 0 !== data.frameISize && (s.frameISize = data.frameISize), void 0 !== data.framePSize && (s.framePSize = data.framePSize), void 0 !== data.frameBSize && (s.frameBSize = data.frameBSize), s;
    }
    get frameISize() {
        return this.#view.getUint32(0, LE);
    }
    set frameISize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get framePSize() {
        return this.#view.getUint32(4, LE);
    }
    set framePSize(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get frameBSize() {
        return this.#view.getUint32(8, LE);
    }
    set frameBSize(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkVideoEncodeH264RateControlLayerInfoEXT {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH264RateControlLayerInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH264RateControlLayerInfoEXT(new Uint8Array(VkVideoEncodeH264RateControlLayerInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH264RateControlLayerInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.temporalLayerId && (s.temporalLayerId = data.temporalLayerId), void 0 !== data.useInitialRcQp && (s.useInitialRcQp = data.useInitialRcQp), void 0 !== data.initialRcQp && (s.initialRcQp = data.initialRcQp), void 0 !== data.useMinQp && (s.useMinQp = data.useMinQp), void 0 !== data.minQp && (s.minQp = data.minQp), void 0 !== data.useMaxQp && (s.useMaxQp = data.useMaxQp), void 0 !== data.maxQp && (s.maxQp = data.maxQp), void 0 !== data.useMaxFrameSize && (s.useMaxFrameSize = data.useMaxFrameSize), void 0 !== data.maxFrameSize && (s.maxFrameSize = data.maxFrameSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get temporalLayerId() {
        return this.#view.getUint8(16);
    }
    set temporalLayerId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get useInitialRcQp() {
        return this.#view.getUint32(20, LE);
    }
    set useInitialRcQp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get initialRcQp() {
        return new VkVideoEncodeH264QpEXT(this.#data.subarray(24, 24 + VkVideoEncodeH264QpEXT.size));
    }
    set initialRcQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get useMinQp() {
        return this.#view.getUint32(36, LE);
    }
    set useMinQp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minQp() {
        return new VkVideoEncodeH264QpEXT(this.#data.subarray(40, 40 + VkVideoEncodeH264QpEXT.size));
    }
    set minQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get useMaxQp() {
        return this.#view.getUint32(52, LE);
    }
    set useMaxQp(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxQp() {
        return new VkVideoEncodeH264QpEXT(this.#data.subarray(56, 56 + VkVideoEncodeH264QpEXT.size));
    }
    set maxQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH264QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get useMaxFrameSize() {
        return this.#view.getUint32(68, LE);
    }
    set useMaxFrameSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxFrameSize() {
        return new VkVideoEncodeH264FrameSizeEXT(this.#data.subarray(72, 72 + VkVideoEncodeH264FrameSizeEXT.size));
    }
    set maxFrameSize(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH264FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkVideoEncodeH265CapabilitiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265CapabilitiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265CapabilitiesEXT(new Uint8Array(VkVideoEncodeH265CapabilitiesEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265CapabilitiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.inputModeFlags && (s.inputModeFlags = data.inputModeFlags), void 0 !== data.outputModeFlags && (s.outputModeFlags = data.outputModeFlags), void 0 !== data.ctbSizes && (s.ctbSizes = data.ctbSizes), void 0 !== data.transformBlockSizes && (s.transformBlockSizes = data.transformBlockSizes), void 0 !== data.maxPPictureL0ReferenceCount && (s.maxPPictureL0ReferenceCount = data.maxPPictureL0ReferenceCount), void 0 !== data.maxBPictureL0ReferenceCount && (s.maxBPictureL0ReferenceCount = data.maxBPictureL0ReferenceCount), void 0 !== data.maxL1ReferenceCount && (s.maxL1ReferenceCount = data.maxL1ReferenceCount), void 0 !== data.maxSubLayersCount && (s.maxSubLayersCount = data.maxSubLayersCount), void 0 !== data.minLog2MinLumaCodingBlockSizeMinus3 && (s.minLog2MinLumaCodingBlockSizeMinus3 = data.minLog2MinLumaCodingBlockSizeMinus3), void 0 !== data.maxLog2MinLumaCodingBlockSizeMinus3 && (s.maxLog2MinLumaCodingBlockSizeMinus3 = data.maxLog2MinLumaCodingBlockSizeMinus3), void 0 !== data.minLog2MinLumaTransformBlockSizeMinus2 && (s.minLog2MinLumaTransformBlockSizeMinus2 = data.minLog2MinLumaTransformBlockSizeMinus2), void 0 !== data.maxLog2MinLumaTransformBlockSizeMinus2 && (s.maxLog2MinLumaTransformBlockSizeMinus2 = data.maxLog2MinLumaTransformBlockSizeMinus2), void 0 !== data.minMaxTransformHierarchyDepthInter && (s.minMaxTransformHierarchyDepthInter = data.minMaxTransformHierarchyDepthInter), void 0 !== data.maxMaxTransformHierarchyDepthInter && (s.maxMaxTransformHierarchyDepthInter = data.maxMaxTransformHierarchyDepthInter), void 0 !== data.minMaxTransformHierarchyDepthIntra && (s.minMaxTransformHierarchyDepthIntra = data.minMaxTransformHierarchyDepthIntra), void 0 !== data.maxMaxTransformHierarchyDepthIntra && (s.maxMaxTransformHierarchyDepthIntra = data.maxMaxTransformHierarchyDepthIntra), void 0 !== data.maxDiffCuQpDeltaDepth && (s.maxDiffCuQpDeltaDepth = data.maxDiffCuQpDeltaDepth), void 0 !== data.minMaxNumMergeCand && (s.minMaxNumMergeCand = data.minMaxNumMergeCand), void 0 !== data.maxMaxNumMergeCand && (s.maxMaxNumMergeCand = data.maxMaxNumMergeCand), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get inputModeFlags() {
        return this.#view.getUint32(20, LE);
    }
    set inputModeFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get outputModeFlags() {
        return this.#view.getUint32(24, LE);
    }
    set outputModeFlags(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ctbSizes() {
        return this.#view.getUint32(28, LE);
    }
    set ctbSizes(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get transformBlockSizes() {
        return this.#view.getUint32(32, LE);
    }
    set transformBlockSizes(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get maxPPictureL0ReferenceCount() {
        return this.#view.getUint8(36);
    }
    set maxPPictureL0ReferenceCount(value) {
        this.#view.setUint8(36, Number(value));
    }
    get maxBPictureL0ReferenceCount() {
        return this.#view.getUint8(37);
    }
    set maxBPictureL0ReferenceCount(value) {
        this.#view.setUint8(37, Number(value));
    }
    get maxL1ReferenceCount() {
        return this.#view.getUint8(38);
    }
    set maxL1ReferenceCount(value) {
        this.#view.setUint8(38, Number(value));
    }
    get maxSubLayersCount() {
        return this.#view.getUint8(39);
    }
    set maxSubLayersCount(value) {
        this.#view.setUint8(39, Number(value));
    }
    get minLog2MinLumaCodingBlockSizeMinus3() {
        return this.#view.getUint8(40);
    }
    set minLog2MinLumaCodingBlockSizeMinus3(value) {
        this.#view.setUint8(40, Number(value));
    }
    get maxLog2MinLumaCodingBlockSizeMinus3() {
        return this.#view.getUint8(41);
    }
    set maxLog2MinLumaCodingBlockSizeMinus3(value) {
        this.#view.setUint8(41, Number(value));
    }
    get minLog2MinLumaTransformBlockSizeMinus2() {
        return this.#view.getUint8(42);
    }
    set minLog2MinLumaTransformBlockSizeMinus2(value) {
        this.#view.setUint8(42, Number(value));
    }
    get maxLog2MinLumaTransformBlockSizeMinus2() {
        return this.#view.getUint8(43);
    }
    set maxLog2MinLumaTransformBlockSizeMinus2(value) {
        this.#view.setUint8(43, Number(value));
    }
    get minMaxTransformHierarchyDepthInter() {
        return this.#view.getUint8(44);
    }
    set minMaxTransformHierarchyDepthInter(value) {
        this.#view.setUint8(44, Number(value));
    }
    get maxMaxTransformHierarchyDepthInter() {
        return this.#view.getUint8(45);
    }
    set maxMaxTransformHierarchyDepthInter(value) {
        this.#view.setUint8(45, Number(value));
    }
    get minMaxTransformHierarchyDepthIntra() {
        return this.#view.getUint8(46);
    }
    set minMaxTransformHierarchyDepthIntra(value) {
        this.#view.setUint8(46, Number(value));
    }
    get maxMaxTransformHierarchyDepthIntra() {
        return this.#view.getUint8(47);
    }
    set maxMaxTransformHierarchyDepthIntra(value) {
        this.#view.setUint8(47, Number(value));
    }
    get maxDiffCuQpDeltaDepth() {
        return this.#view.getUint8(48);
    }
    set maxDiffCuQpDeltaDepth(value) {
        this.#view.setUint8(48, Number(value));
    }
    get minMaxNumMergeCand() {
        return this.#view.getUint8(49);
    }
    set minMaxNumMergeCand(value) {
        this.#view.setUint8(49, Number(value));
    }
    get maxMaxNumMergeCand() {
        return this.#view.getUint8(50);
    }
    set maxMaxNumMergeCand(value) {
        this.#view.setUint8(50, Number(value));
    }
}
export class VkVideoEncodeH265SessionParametersAddInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265SessionParametersAddInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265SessionParametersAddInfoEXT(new Uint8Array(VkVideoEncodeH265SessionParametersAddInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265SessionParametersAddInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdVPSCount && (s.stdVPSCount = data.stdVPSCount), void 0 !== data.pStdVPSs && (s.pStdVPSs = data.pStdVPSs), void 0 !== data.stdSPSCount && (s.stdSPSCount = data.stdSPSCount), void 0 !== data.pStdSPSs && (s.pStdSPSs = data.pStdSPSs), void 0 !== data.stdPPSCount && (s.stdPPSCount = data.stdPPSCount), void 0 !== data.pStdPPSs && (s.pStdPPSs = data.pStdPPSs), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set stdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pStdVPSs() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdVPSs(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get stdSPSCount() {
        return this.#view.getUint32(32, LE);
    }
    set stdSPSCount(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get pStdSPSs() {
        return this.#view.getBigUint64(40, LE);
    }
    set pStdSPSs(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get stdPPSCount() {
        return this.#view.getUint32(48, LE);
    }
    set stdPPSCount(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get pStdPPSs() {
        return this.#view.getBigUint64(56, LE);
    }
    set pStdPPSs(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265SessionParametersCreateInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265SessionParametersCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265SessionParametersCreateInfoEXT(new Uint8Array(VkVideoEncodeH265SessionParametersCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265SessionParametersCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxStdVPSCount && (s.maxStdVPSCount = data.maxStdVPSCount), void 0 !== data.maxStdSPSCount && (s.maxStdSPSCount = data.maxStdSPSCount), void 0 !== data.maxStdPPSCount && (s.maxStdPPSCount = data.maxStdPPSCount), void 0 !== data.pParametersAddInfo && (s.pParametersAddInfo = data.pParametersAddInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxStdVPSCount() {
        return this.#view.getUint32(16, LE);
    }
    set maxStdVPSCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxStdSPSCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxStdSPSCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get maxStdPPSCount() {
        return this.#view.getUint32(24, LE);
    }
    set maxStdPPSCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pParametersAddInfo() {
        return this.#view.getBigUint64(32, LE);
    }
    set pParametersAddInfo(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265VclFrameInfoEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265VclFrameInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265VclFrameInfoEXT(new Uint8Array(VkVideoEncodeH265VclFrameInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265VclFrameInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pReferenceFinalLists && (s.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.naluSliceSegmentEntryCount && (s.naluSliceSegmentEntryCount = data.naluSliceSegmentEntryCount), void 0 !== data.pNaluSliceSegmentEntries && (s.pNaluSliceSegmentEntries = data.pNaluSliceSegmentEntries), void 0 !== data.pCurrentPictureInfo && (s.pCurrentPictureInfo = data.pCurrentPictureInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(16, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get naluSliceSegmentEntryCount() {
        return this.#view.getUint32(24, LE);
    }
    set naluSliceSegmentEntryCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pNaluSliceSegmentEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set pNaluSliceSegmentEntries(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get pCurrentPictureInfo() {
        return this.#view.getBigUint64(40, LE);
    }
    set pCurrentPictureInfo(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265EmitPictureParametersInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265EmitPictureParametersInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265EmitPictureParametersInfoEXT(new Uint8Array(VkVideoEncodeH265EmitPictureParametersInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265EmitPictureParametersInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vpsId && (s.vpsId = data.vpsId), void 0 !== data.spsId && (s.spsId = data.spsId), void 0 !== data.emitVpsEnable && (s.emitVpsEnable = data.emitVpsEnable), void 0 !== data.emitSpsEnable && (s.emitSpsEnable = data.emitSpsEnable), void 0 !== data.ppsIdEntryCount && (s.ppsIdEntryCount = data.ppsIdEntryCount), void 0 !== data.ppsIdEntries && (s.ppsIdEntries = data.ppsIdEntries), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vpsId() {
        return this.#view.getUint8(16);
    }
    set vpsId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get spsId() {
        return this.#view.getUint8(17);
    }
    set spsId(value) {
        this.#view.setUint8(17, Number(value));
    }
    get emitVpsEnable() {
        return this.#view.getUint32(20, LE);
    }
    set emitVpsEnable(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get emitSpsEnable() {
        return this.#view.getUint32(24, LE);
    }
    set emitSpsEnable(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get ppsIdEntryCount() {
        return this.#view.getUint32(28, LE);
    }
    set ppsIdEntryCount(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get ppsIdEntries() {
        return this.#view.getBigUint64(32, LE);
    }
    set ppsIdEntries(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265NaluSliceSegmentInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265NaluSliceSegmentInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265NaluSliceSegmentInfoEXT(new Uint8Array(VkVideoEncodeH265NaluSliceSegmentInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265NaluSliceSegmentInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.ctbCount && (s.ctbCount = data.ctbCount), void 0 !== data.pReferenceFinalLists && (s.pReferenceFinalLists = data.pReferenceFinalLists), void 0 !== data.pSliceSegmentHeaderStd && (s.pSliceSegmentHeaderStd = data.pSliceSegmentHeaderStd), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get ctbCount() {
        return this.#view.getUint32(16, LE);
    }
    set ctbCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pReferenceFinalLists() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceFinalLists(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get pSliceSegmentHeaderStd() {
        return this.#view.getBigUint64(32, LE);
    }
    set pSliceSegmentHeaderStd(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265RateControlInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265RateControlInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265RateControlInfoEXT(new Uint8Array(VkVideoEncodeH265RateControlInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265RateControlInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.gopFrameCount && (s.gopFrameCount = data.gopFrameCount), void 0 !== data.idrPeriod && (s.idrPeriod = data.idrPeriod), void 0 !== data.consecutiveBFrameCount && (s.consecutiveBFrameCount = data.consecutiveBFrameCount), void 0 !== data.rateControlStructure && (s.rateControlStructure = data.rateControlStructure), void 0 !== data.subLayerCount && (s.subLayerCount = data.subLayerCount), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get gopFrameCount() {
        return this.#view.getUint32(16, LE);
    }
    set gopFrameCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get idrPeriod() {
        return this.#view.getUint32(20, LE);
    }
    set idrPeriod(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get consecutiveBFrameCount() {
        return this.#view.getUint32(24, LE);
    }
    set consecutiveBFrameCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get rateControlStructure() {
        return this.#view.getUint32(28, LE);
    }
    set rateControlStructure(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get subLayerCount() {
        return this.#view.getUint8(32);
    }
    set subLayerCount(value) {
        this.#view.setUint8(32, Number(value));
    }
}
export class VkVideoEncodeH265QpEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265QpEXT(new Uint8Array(VkVideoEncodeH265QpEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265QpEXT.alloc();
        return void 0 !== data.qpI && (s.qpI = data.qpI), void 0 !== data.qpP && (s.qpP = data.qpP), void 0 !== data.qpB && (s.qpB = data.qpB), s;
    }
    get qpI() {
        return this.#view.getInt32(0, LE);
    }
    set qpI(value) {
        this.#view.setInt32(0, Number(value), LE);
    }
    get qpP() {
        return this.#view.getInt32(4, LE);
    }
    set qpP(value) {
        this.#view.setInt32(4, Number(value), LE);
    }
    get qpB() {
        return this.#view.getInt32(8, LE);
    }
    set qpB(value) {
        this.#view.setInt32(8, Number(value), LE);
    }
}
export class VkVideoEncodeH265FrameSizeEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265FrameSizeEXT(new Uint8Array(VkVideoEncodeH265FrameSizeEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265FrameSizeEXT.alloc();
        return void 0 !== data.frameISize && (s.frameISize = data.frameISize), void 0 !== data.framePSize && (s.framePSize = data.framePSize), void 0 !== data.frameBSize && (s.frameBSize = data.frameBSize), s;
    }
    get frameISize() {
        return this.#view.getUint32(0, LE);
    }
    set frameISize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get framePSize() {
        return this.#view.getUint32(4, LE);
    }
    set framePSize(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get frameBSize() {
        return this.#view.getUint32(8, LE);
    }
    set frameBSize(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkVideoEncodeH265RateControlLayerInfoEXT {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265RateControlLayerInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265RateControlLayerInfoEXT(new Uint8Array(VkVideoEncodeH265RateControlLayerInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265RateControlLayerInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.temporalId && (s.temporalId = data.temporalId), void 0 !== data.useInitialRcQp && (s.useInitialRcQp = data.useInitialRcQp), void 0 !== data.initialRcQp && (s.initialRcQp = data.initialRcQp), void 0 !== data.useMinQp && (s.useMinQp = data.useMinQp), void 0 !== data.minQp && (s.minQp = data.minQp), void 0 !== data.useMaxQp && (s.useMaxQp = data.useMaxQp), void 0 !== data.maxQp && (s.maxQp = data.maxQp), void 0 !== data.useMaxFrameSize && (s.useMaxFrameSize = data.useMaxFrameSize), void 0 !== data.maxFrameSize && (s.maxFrameSize = data.maxFrameSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get temporalId() {
        return this.#view.getUint8(16);
    }
    set temporalId(value) {
        this.#view.setUint8(16, Number(value));
    }
    get useInitialRcQp() {
        return this.#view.getUint32(20, LE);
    }
    set useInitialRcQp(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get initialRcQp() {
        return new VkVideoEncodeH265QpEXT(this.#data.subarray(24, 24 + VkVideoEncodeH265QpEXT.size));
    }
    set initialRcQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get useMinQp() {
        return this.#view.getUint32(36, LE);
    }
    set useMinQp(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minQp() {
        return new VkVideoEncodeH265QpEXT(this.#data.subarray(40, 40 + VkVideoEncodeH265QpEXT.size));
    }
    set minQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get useMaxQp() {
        return this.#view.getUint32(52, LE);
    }
    set useMaxQp(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxQp() {
        return new VkVideoEncodeH265QpEXT(this.#data.subarray(56, 56 + VkVideoEncodeH265QpEXT.size));
    }
    set maxQp(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH265QpEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 56);
    }
    get useMaxFrameSize() {
        return this.#view.getUint32(68, LE);
    }
    set useMaxFrameSize(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get maxFrameSize() {
        return new VkVideoEncodeH265FrameSizeEXT(this.#data.subarray(72, 72 + VkVideoEncodeH265FrameSizeEXT.size));
    }
    set maxFrameSize(value) {
        if (value[BUFFER].byteLength < VkVideoEncodeH265FrameSizeEXT.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 72);
    }
}
export class VkVideoEncodeH265ProfileInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265ProfileInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265ProfileInfoEXT(new Uint8Array(VkVideoEncodeH265ProfileInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265ProfileInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.stdProfileIdc && (s.stdProfileIdc = data.stdProfileIdc), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get stdProfileIdc() {
        return this.#view.getUint32(16, LE);
    }
    set stdProfileIdc(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkVideoEncodeH265DpbSlotInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265DpbSlotInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265DpbSlotInfoEXT(new Uint8Array(VkVideoEncodeH265DpbSlotInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265DpbSlotInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.slotIndex && (s.slotIndex = data.slotIndex), void 0 !== data.pStdReferenceInfo && (s.pStdReferenceInfo = data.pStdReferenceInfo), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get slotIndex() {
        return this.#view.getInt8(16);
    }
    set slotIndex(value) {
        this.#view.setInt8(16, Number(value));
    }
    get pStdReferenceInfo() {
        return this.#view.getBigUint64(24, LE);
    }
    set pStdReferenceInfo(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkVideoEncodeH265ReferenceListsInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkVideoEncodeH265ReferenceListsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkVideoEncodeH265ReferenceListsInfoEXT(new Uint8Array(VkVideoEncodeH265ReferenceListsInfoEXT.size));
    }
    static create(data) {
        let s = VkVideoEncodeH265ReferenceListsInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.referenceList0EntryCount && (s.referenceList0EntryCount = data.referenceList0EntryCount), void 0 !== data.pReferenceList0Entries && (s.pReferenceList0Entries = data.pReferenceList0Entries), void 0 !== data.referenceList1EntryCount && (s.referenceList1EntryCount = data.referenceList1EntryCount), void 0 !== data.pReferenceList1Entries && (s.pReferenceList1Entries = data.pReferenceList1Entries), void 0 !== data.pReferenceModifications && (s.pReferenceModifications = data.pReferenceModifications), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get referenceList0EntryCount() {
        return this.#view.getUint8(16);
    }
    set referenceList0EntryCount(value) {
        this.#view.setUint8(16, Number(value));
    }
    get pReferenceList0Entries() {
        return this.#view.getBigUint64(24, LE);
    }
    set pReferenceList0Entries(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get referenceList1EntryCount() {
        return this.#view.getUint8(32);
    }
    set referenceList1EntryCount(value) {
        this.#view.setUint8(32, Number(value));
    }
    get pReferenceList1Entries() {
        return this.#view.getBigUint64(40, LE);
    }
    set pReferenceList1Entries(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get pReferenceModifications() {
        return this.#view.getBigUint64(48, LE);
    }
    set pReferenceModifications(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceInheritedViewportScissorFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceInheritedViewportScissorFeaturesNV(new Uint8Array(VkPhysicalDeviceInheritedViewportScissorFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceInheritedViewportScissorFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.inheritedViewportScissor2D && (s.inheritedViewportScissor2D = data.inheritedViewportScissor2D), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get inheritedViewportScissor2D() {
        return this.#view.getUint32(16, LE);
    }
    set inheritedViewportScissor2D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCommandBufferInheritanceViewportScissorInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferInheritanceViewportScissorInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferInheritanceViewportScissorInfoNV(new Uint8Array(VkCommandBufferInheritanceViewportScissorInfoNV.size));
    }
    static create(data) {
        let s = VkCommandBufferInheritanceViewportScissorInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.viewportScissor2D && (s.viewportScissor2D = data.viewportScissor2D), void 0 !== data.viewportDepthCount && (s.viewportDepthCount = data.viewportDepthCount), void 0 !== data.pViewportDepths && (s.pViewportDepths = data.pViewportDepths), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get viewportScissor2D() {
        return this.#view.getUint32(16, LE);
    }
    set viewportScissor2D(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewportDepthCount() {
        return this.#view.getUint32(20, LE);
    }
    set viewportDepthCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pViewportDepths() {
        return this.#view.getBigUint64(24, LE);
    }
    set pViewportDepths(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(new Uint8Array(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.ycbcr2plane444Formats && (s.ycbcr2plane444Formats = data.ycbcr2plane444Formats), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get ycbcr2plane444Formats() {
        return this.#view.getUint32(16, LE);
    }
    set ycbcr2plane444Formats(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceProvokingVertexFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProvokingVertexFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProvokingVertexFeaturesEXT(new Uint8Array(VkPhysicalDeviceProvokingVertexFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProvokingVertexFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.provokingVertexLast && (s.provokingVertexLast = data.provokingVertexLast), void 0 !== data.transformFeedbackPreservesProvokingVertex && (s.transformFeedbackPreservesProvokingVertex = data.transformFeedbackPreservesProvokingVertex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get provokingVertexLast() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexLast(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transformFeedbackPreservesProvokingVertex() {
        return this.#view.getUint32(20, LE);
    }
    set transformFeedbackPreservesProvokingVertex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceProvokingVertexPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceProvokingVertexPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceProvokingVertexPropertiesEXT(new Uint8Array(VkPhysicalDeviceProvokingVertexPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceProvokingVertexPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.provokingVertexModePerPipeline && (s.provokingVertexModePerPipeline = data.provokingVertexModePerPipeline), void 0 !== data.transformFeedbackPreservesTriangleFanProvokingVertex && (s.transformFeedbackPreservesTriangleFanProvokingVertex = data.transformFeedbackPreservesTriangleFanProvokingVertex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get provokingVertexModePerPipeline() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexModePerPipeline(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get transformFeedbackPreservesTriangleFanProvokingVertex() {
        return this.#view.getUint32(20, LE);
    }
    set transformFeedbackPreservesTriangleFanProvokingVertex(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(new Uint8Array(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.provokingVertexMode && (s.provokingVertexMode = data.provokingVertexMode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get provokingVertexMode() {
        return this.#view.getUint32(16, LE);
    }
    set provokingVertexMode(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCuModuleCreateInfoNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCuModuleCreateInfoNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCuModuleCreateInfoNVX(new Uint8Array(VkCuModuleCreateInfoNVX.size));
    }
    static create(data) {
        let s = VkCuModuleCreateInfoNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dataSize && (s.dataSize = data.dataSize), void 0 !== data.pData && (s.pData = data.pData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dataSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set dataSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pData(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkCuFunctionCreateInfoNVX {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCuFunctionCreateInfoNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCuFunctionCreateInfoNVX(new Uint8Array(VkCuFunctionCreateInfoNVX.size));
    }
    static create(data) {
        let s = VkCuFunctionCreateInfoNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.module && (s.module = data.module), void 0 !== data.pName && (s.pName = data.pName), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get module() {
        return this.#view.getBigUint64(16, LE);
    }
    set module(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get pName() {
        return this.#view.getBigUint64(24, LE);
    }
    set pName(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkCuLaunchInfoNVX {
    static size = 88;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCuLaunchInfoNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCuLaunchInfoNVX(new Uint8Array(VkCuLaunchInfoNVX.size));
    }
    static create(data) {
        let s = VkCuLaunchInfoNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vk_function && (s.vk_function = data.vk_function), void 0 !== data.gridDimX && (s.gridDimX = data.gridDimX), void 0 !== data.gridDimY && (s.gridDimY = data.gridDimY), void 0 !== data.gridDimZ && (s.gridDimZ = data.gridDimZ), void 0 !== data.blockDimX && (s.blockDimX = data.blockDimX), void 0 !== data.blockDimY && (s.blockDimY = data.blockDimY), void 0 !== data.blockDimZ && (s.blockDimZ = data.blockDimZ), void 0 !== data.sharedMemBytes && (s.sharedMemBytes = data.sharedMemBytes), void 0 !== data.paramCount && (s.paramCount = data.paramCount), void 0 !== data.pParams && (s.pParams = data.pParams), void 0 !== data.extraCount && (s.extraCount = data.extraCount), void 0 !== data.pExtras && (s.pExtras = data.pExtras), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vk_function() {
        return this.#view.getBigUint64(16, LE);
    }
    set vk_function(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get gridDimX() {
        return this.#view.getUint32(24, LE);
    }
    set gridDimX(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get gridDimY() {
        return this.#view.getUint32(28, LE);
    }
    set gridDimY(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get gridDimZ() {
        return this.#view.getUint32(32, LE);
    }
    set gridDimZ(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get blockDimX() {
        return this.#view.getUint32(36, LE);
    }
    set blockDimX(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get blockDimY() {
        return this.#view.getUint32(40, LE);
    }
    set blockDimY(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get blockDimZ() {
        return this.#view.getUint32(44, LE);
    }
    set blockDimZ(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get sharedMemBytes() {
        return this.#view.getUint32(48, LE);
    }
    set sharedMemBytes(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get paramCount() {
        return this.#view.getBigUint64(56, LE);
    }
    set paramCount(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pParams() {
        return this.#view.getBigUint64(64, LE);
    }
    set pParams(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get extraCount() {
        return this.#view.getBigUint64(72, LE);
    }
    set extraCount(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get pExtras() {
        return this.#view.getBigUint64(80, LE);
    }
    set pExtras(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorBufferFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorBufferFeaturesEXT(new Uint8Array(VkPhysicalDeviceDescriptorBufferFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorBufferFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorBuffer && (s.descriptorBuffer = data.descriptorBuffer), void 0 !== data.descriptorBufferCaptureReplay && (s.descriptorBufferCaptureReplay = data.descriptorBufferCaptureReplay), void 0 !== data.descriptorBufferImageLayoutIgnored && (s.descriptorBufferImageLayoutIgnored = data.descriptorBufferImageLayoutIgnored), void 0 !== data.descriptorBufferPushDescriptors && (s.descriptorBufferPushDescriptors = data.descriptorBufferPushDescriptors), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorBuffer() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorBuffer(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get descriptorBufferCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set descriptorBufferCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get descriptorBufferImageLayoutIgnored() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorBufferImageLayoutIgnored(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get descriptorBufferPushDescriptors() {
        return this.#view.getUint32(28, LE);
    }
    set descriptorBufferPushDescriptors(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    static size = 256;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorBufferPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorBufferPropertiesEXT(new Uint8Array(VkPhysicalDeviceDescriptorBufferPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorBufferPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.combinedImageSamplerDescriptorSingleArray && (s.combinedImageSamplerDescriptorSingleArray = data.combinedImageSamplerDescriptorSingleArray), void 0 !== data.bufferlessPushDescriptors && (s.bufferlessPushDescriptors = data.bufferlessPushDescriptors), void 0 !== data.allowSamplerImageViewPostSubmitCreation && (s.allowSamplerImageViewPostSubmitCreation = data.allowSamplerImageViewPostSubmitCreation), void 0 !== data.descriptorBufferOffsetAlignment && (s.descriptorBufferOffsetAlignment = data.descriptorBufferOffsetAlignment), void 0 !== data.maxDescriptorBufferBindings && (s.maxDescriptorBufferBindings = data.maxDescriptorBufferBindings), void 0 !== data.maxResourceDescriptorBufferBindings && (s.maxResourceDescriptorBufferBindings = data.maxResourceDescriptorBufferBindings), void 0 !== data.maxSamplerDescriptorBufferBindings && (s.maxSamplerDescriptorBufferBindings = data.maxSamplerDescriptorBufferBindings), void 0 !== data.maxEmbeddedImmutableSamplerBindings && (s.maxEmbeddedImmutableSamplerBindings = data.maxEmbeddedImmutableSamplerBindings), void 0 !== data.maxEmbeddedImmutableSamplers && (s.maxEmbeddedImmutableSamplers = data.maxEmbeddedImmutableSamplers), void 0 !== data.bufferCaptureReplayDescriptorDataSize && (s.bufferCaptureReplayDescriptorDataSize = data.bufferCaptureReplayDescriptorDataSize), void 0 !== data.imageCaptureReplayDescriptorDataSize && (s.imageCaptureReplayDescriptorDataSize = data.imageCaptureReplayDescriptorDataSize), void 0 !== data.imageViewCaptureReplayDescriptorDataSize && (s.imageViewCaptureReplayDescriptorDataSize = data.imageViewCaptureReplayDescriptorDataSize), void 0 !== data.samplerCaptureReplayDescriptorDataSize && (s.samplerCaptureReplayDescriptorDataSize = data.samplerCaptureReplayDescriptorDataSize), void 0 !== data.accelerationStructureCaptureReplayDescriptorDataSize && (s.accelerationStructureCaptureReplayDescriptorDataSize = data.accelerationStructureCaptureReplayDescriptorDataSize), void 0 !== data.samplerDescriptorSize && (s.samplerDescriptorSize = data.samplerDescriptorSize), void 0 !== data.combinedImageSamplerDescriptorSize && (s.combinedImageSamplerDescriptorSize = data.combinedImageSamplerDescriptorSize), void 0 !== data.sampledImageDescriptorSize && (s.sampledImageDescriptorSize = data.sampledImageDescriptorSize), void 0 !== data.storageImageDescriptorSize && (s.storageImageDescriptorSize = data.storageImageDescriptorSize), void 0 !== data.uniformTexelBufferDescriptorSize && (s.uniformTexelBufferDescriptorSize = data.uniformTexelBufferDescriptorSize), void 0 !== data.robustUniformTexelBufferDescriptorSize && (s.robustUniformTexelBufferDescriptorSize = data.robustUniformTexelBufferDescriptorSize), void 0 !== data.storageTexelBufferDescriptorSize && (s.storageTexelBufferDescriptorSize = data.storageTexelBufferDescriptorSize), void 0 !== data.robustStorageTexelBufferDescriptorSize && (s.robustStorageTexelBufferDescriptorSize = data.robustStorageTexelBufferDescriptorSize), void 0 !== data.uniformBufferDescriptorSize && (s.uniformBufferDescriptorSize = data.uniformBufferDescriptorSize), void 0 !== data.robustUniformBufferDescriptorSize && (s.robustUniformBufferDescriptorSize = data.robustUniformBufferDescriptorSize), void 0 !== data.storageBufferDescriptorSize && (s.storageBufferDescriptorSize = data.storageBufferDescriptorSize), void 0 !== data.robustStorageBufferDescriptorSize && (s.robustStorageBufferDescriptorSize = data.robustStorageBufferDescriptorSize), void 0 !== data.inputAttachmentDescriptorSize && (s.inputAttachmentDescriptorSize = data.inputAttachmentDescriptorSize), void 0 !== data.accelerationStructureDescriptorSize && (s.accelerationStructureDescriptorSize = data.accelerationStructureDescriptorSize), void 0 !== data.maxSamplerDescriptorBufferRange && (s.maxSamplerDescriptorBufferRange = data.maxSamplerDescriptorBufferRange), void 0 !== data.maxResourceDescriptorBufferRange && (s.maxResourceDescriptorBufferRange = data.maxResourceDescriptorBufferRange), void 0 !== data.samplerDescriptorBufferAddressSpaceSize && (s.samplerDescriptorBufferAddressSpaceSize = data.samplerDescriptorBufferAddressSpaceSize), void 0 !== data.resourceDescriptorBufferAddressSpaceSize && (s.resourceDescriptorBufferAddressSpaceSize = data.resourceDescriptorBufferAddressSpaceSize), void 0 !== data.descriptorBufferAddressSpaceSize && (s.descriptorBufferAddressSpaceSize = data.descriptorBufferAddressSpaceSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get combinedImageSamplerDescriptorSingleArray() {
        return this.#view.getUint32(16, LE);
    }
    set combinedImageSamplerDescriptorSingleArray(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferlessPushDescriptors() {
        return this.#view.getUint32(20, LE);
    }
    set bufferlessPushDescriptors(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get allowSamplerImageViewPostSubmitCreation() {
        return this.#view.getUint32(24, LE);
    }
    set allowSamplerImageViewPostSubmitCreation(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get descriptorBufferOffsetAlignment() {
        return this.#view.getBigUint64(32, LE);
    }
    set descriptorBufferOffsetAlignment(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get maxDescriptorBufferBindings() {
        return this.#view.getUint32(40, LE);
    }
    set maxDescriptorBufferBindings(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get maxResourceDescriptorBufferBindings() {
        return this.#view.getUint32(44, LE);
    }
    set maxResourceDescriptorBufferBindings(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxSamplerDescriptorBufferBindings() {
        return this.#view.getUint32(48, LE);
    }
    set maxSamplerDescriptorBufferBindings(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxEmbeddedImmutableSamplerBindings() {
        return this.#view.getUint32(52, LE);
    }
    set maxEmbeddedImmutableSamplerBindings(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxEmbeddedImmutableSamplers() {
        return this.#view.getUint32(56, LE);
    }
    set maxEmbeddedImmutableSamplers(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get bufferCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(64, LE);
    }
    set bufferCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
    get imageCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(72, LE);
    }
    set imageCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(72, BigInt(value), LE);
    }
    get imageViewCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(80, LE);
    }
    set imageViewCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(80, BigInt(value), LE);
    }
    get samplerCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(88, LE);
    }
    set samplerCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
    get accelerationStructureCaptureReplayDescriptorDataSize() {
        return this.#view.getBigUint64(96, LE);
    }
    set accelerationStructureCaptureReplayDescriptorDataSize(value) {
        this.#view.setBigUint64(96, BigInt(value), LE);
    }
    get samplerDescriptorSize() {
        return this.#view.getBigUint64(104, LE);
    }
    set samplerDescriptorSize(value) {
        this.#view.setBigUint64(104, BigInt(value), LE);
    }
    get combinedImageSamplerDescriptorSize() {
        return this.#view.getBigUint64(112, LE);
    }
    set combinedImageSamplerDescriptorSize(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get sampledImageDescriptorSize() {
        return this.#view.getBigUint64(120, LE);
    }
    set sampledImageDescriptorSize(value) {
        this.#view.setBigUint64(120, BigInt(value), LE);
    }
    get storageImageDescriptorSize() {
        return this.#view.getBigUint64(128, LE);
    }
    set storageImageDescriptorSize(value) {
        this.#view.setBigUint64(128, BigInt(value), LE);
    }
    get uniformTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(136, LE);
    }
    set uniformTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(136, BigInt(value), LE);
    }
    get robustUniformTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(144, LE);
    }
    set robustUniformTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(144, BigInt(value), LE);
    }
    get storageTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(152, LE);
    }
    set storageTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(152, BigInt(value), LE);
    }
    get robustStorageTexelBufferDescriptorSize() {
        return this.#view.getBigUint64(160, LE);
    }
    set robustStorageTexelBufferDescriptorSize(value) {
        this.#view.setBigUint64(160, BigInt(value), LE);
    }
    get uniformBufferDescriptorSize() {
        return this.#view.getBigUint64(168, LE);
    }
    set uniformBufferDescriptorSize(value) {
        this.#view.setBigUint64(168, BigInt(value), LE);
    }
    get robustUniformBufferDescriptorSize() {
        return this.#view.getBigUint64(176, LE);
    }
    set robustUniformBufferDescriptorSize(value) {
        this.#view.setBigUint64(176, BigInt(value), LE);
    }
    get storageBufferDescriptorSize() {
        return this.#view.getBigUint64(184, LE);
    }
    set storageBufferDescriptorSize(value) {
        this.#view.setBigUint64(184, BigInt(value), LE);
    }
    get robustStorageBufferDescriptorSize() {
        return this.#view.getBigUint64(192, LE);
    }
    set robustStorageBufferDescriptorSize(value) {
        this.#view.setBigUint64(192, BigInt(value), LE);
    }
    get inputAttachmentDescriptorSize() {
        return this.#view.getBigUint64(200, LE);
    }
    set inputAttachmentDescriptorSize(value) {
        this.#view.setBigUint64(200, BigInt(value), LE);
    }
    get accelerationStructureDescriptorSize() {
        return this.#view.getBigUint64(208, LE);
    }
    set accelerationStructureDescriptorSize(value) {
        this.#view.setBigUint64(208, BigInt(value), LE);
    }
    get maxSamplerDescriptorBufferRange() {
        return this.#view.getBigUint64(216, LE);
    }
    set maxSamplerDescriptorBufferRange(value) {
        this.#view.setBigUint64(216, BigInt(value), LE);
    }
    get maxResourceDescriptorBufferRange() {
        return this.#view.getBigUint64(224, LE);
    }
    set maxResourceDescriptorBufferRange(value) {
        this.#view.setBigUint64(224, BigInt(value), LE);
    }
    get samplerDescriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(232, LE);
    }
    set samplerDescriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(232, BigInt(value), LE);
    }
    get resourceDescriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(240, LE);
    }
    set resourceDescriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(240, BigInt(value), LE);
    }
    get descriptorBufferAddressSpaceSize() {
        return this.#view.getBigUint64(248, LE);
    }
    set descriptorBufferAddressSpaceSize(value) {
        this.#view.setBigUint64(248, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(new Uint8Array(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.combinedImageSamplerDensityMapDescriptorSize && (s.combinedImageSamplerDensityMapDescriptorSize = data.combinedImageSamplerDensityMapDescriptorSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get combinedImageSamplerDensityMapDescriptorSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set combinedImageSamplerDensityMapDescriptorSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDescriptorAddressInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorAddressInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorAddressInfoEXT(new Uint8Array(VkDescriptorAddressInfoEXT.size));
    }
    static create(data) {
        let s = VkDescriptorAddressInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.address && (s.address = data.address), void 0 !== data.range && (s.range = data.range), void 0 !== data.format && (s.format = data.format), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get address() {
        return this.#view.getBigUint64(16, LE);
    }
    set address(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get range() {
        return this.#view.getBigUint64(24, LE);
    }
    set range(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(32, LE);
    }
    set format(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkDescriptorBufferBindingInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorBufferBindingInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorBufferBindingInfoEXT(new Uint8Array(VkDescriptorBufferBindingInfoEXT.size));
    }
    static create(data) {
        let s = VkDescriptorBufferBindingInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.address && (s.address = data.address), void 0 !== data.usage && (s.usage = data.usage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get address() {
        return this.#view.getBigUint64(16, LE);
    }
    set address(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(24, LE);
    }
    set usage(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorBufferBindingPushDescriptorBufferHandleEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(new Uint8Array(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT.size));
    }
    static create(data) {
        let s = VkDescriptorBufferBindingPushDescriptorBufferHandleEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDescriptorGetInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorGetInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorGetInfoEXT(new Uint8Array(VkDescriptorGetInfoEXT.size));
    }
    static create(data) {
        let s = VkDescriptorGetInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.data && (s.data = data.data), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","u64"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","u64"]}');
    }
}
export class VkBufferCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCaptureDescriptorDataInfoEXT(new Uint8Array(VkBufferCaptureDescriptorDataInfoEXT.size));
    }
    static create(data) {
        let s = VkBufferCaptureDescriptorDataInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.buffer && (s.buffer = data.buffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkImageCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCaptureDescriptorDataInfoEXT(new Uint8Array(VkImageCaptureDescriptorDataInfoEXT.size));
    }
    static create(data) {
        let s = VkImageCaptureDescriptorDataInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkImageViewCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewCaptureDescriptorDataInfoEXT(new Uint8Array(VkImageViewCaptureDescriptorDataInfoEXT.size));
    }
    static create(data) {
        let s = VkImageViewCaptureDescriptorDataInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageView && (s.imageView = data.imageView), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkSamplerCaptureDescriptorDataInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSamplerCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSamplerCaptureDescriptorDataInfoEXT(new Uint8Array(VkSamplerCaptureDescriptorDataInfoEXT.size));
    }
    static create(data) {
        let s = VkSamplerCaptureDescriptorDataInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.sampler && (s.sampler = data.sampler), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get sampler() {
        return this.#view.getBigUint64(16, LE);
    }
    set sampler(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureCaptureDescriptorDataInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureCaptureDescriptorDataInfoEXT(new Uint8Array(VkAccelerationStructureCaptureDescriptorDataInfoEXT.size));
    }
    static create(data) {
        let s = VkAccelerationStructureCaptureDescriptorDataInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.accelerationStructure && (s.accelerationStructure = data.accelerationStructure), void 0 !== data.accelerationStructureNV && (s.accelerationStructureNV = data.accelerationStructureNV), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get accelerationStructure() {
        return this.#view.getBigUint64(16, LE);
    }
    set accelerationStructure(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get accelerationStructureNV() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureNV(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpaqueCaptureDescriptorDataCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpaqueCaptureDescriptorDataCreateInfoEXT(new Uint8Array(VkOpaqueCaptureDescriptorDataCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkOpaqueCaptureDescriptorDataCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.opaqueCaptureDescriptorData && (s.opaqueCaptureDescriptorData = data.opaqueCaptureDescriptorData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get opaqueCaptureDescriptorData() {
        return this.#view.getBigUint64(16, LE);
    }
    set opaqueCaptureDescriptorData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceShaderIntegerDotProductFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderIntegerDotProductFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderIntegerDotProductFeatures(new Uint8Array(VkPhysicalDeviceShaderIntegerDotProductFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderIntegerDotProductFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderIntegerDotProduct && (s.shaderIntegerDotProduct = data.shaderIntegerDotProduct), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderIntegerDotProduct() {
        return this.#view.getUint32(16, LE);
    }
    set shaderIntegerDotProduct(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderIntegerDotProductProperties {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderIntegerDotProductProperties.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderIntegerDotProductProperties(new Uint8Array(VkPhysicalDeviceShaderIntegerDotProductProperties.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderIntegerDotProductProperties.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.integerDotProduct8BitUnsignedAccelerated && (s.integerDotProduct8BitUnsignedAccelerated = data.integerDotProduct8BitUnsignedAccelerated), void 0 !== data.integerDotProduct8BitSignedAccelerated && (s.integerDotProduct8BitSignedAccelerated = data.integerDotProduct8BitSignedAccelerated), void 0 !== data.integerDotProduct8BitMixedSignednessAccelerated && (s.integerDotProduct8BitMixedSignednessAccelerated = data.integerDotProduct8BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct4x8BitPackedUnsignedAccelerated && (s.integerDotProduct4x8BitPackedUnsignedAccelerated = data.integerDotProduct4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedSignedAccelerated && (s.integerDotProduct4x8BitPackedSignedAccelerated = data.integerDotProduct4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProduct4x8BitPackedMixedSignednessAccelerated && (s.integerDotProduct4x8BitPackedMixedSignednessAccelerated = data.integerDotProduct4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProduct16BitUnsignedAccelerated && (s.integerDotProduct16BitUnsignedAccelerated = data.integerDotProduct16BitUnsignedAccelerated), void 0 !== data.integerDotProduct16BitSignedAccelerated && (s.integerDotProduct16BitSignedAccelerated = data.integerDotProduct16BitSignedAccelerated), void 0 !== data.integerDotProduct16BitMixedSignednessAccelerated && (s.integerDotProduct16BitMixedSignednessAccelerated = data.integerDotProduct16BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct32BitUnsignedAccelerated && (s.integerDotProduct32BitUnsignedAccelerated = data.integerDotProduct32BitUnsignedAccelerated), void 0 !== data.integerDotProduct32BitSignedAccelerated && (s.integerDotProduct32BitSignedAccelerated = data.integerDotProduct32BitSignedAccelerated), void 0 !== data.integerDotProduct32BitMixedSignednessAccelerated && (s.integerDotProduct32BitMixedSignednessAccelerated = data.integerDotProduct32BitMixedSignednessAccelerated), void 0 !== data.integerDotProduct64BitUnsignedAccelerated && (s.integerDotProduct64BitUnsignedAccelerated = data.integerDotProduct64BitUnsignedAccelerated), void 0 !== data.integerDotProduct64BitSignedAccelerated && (s.integerDotProduct64BitSignedAccelerated = data.integerDotProduct64BitSignedAccelerated), void 0 !== data.integerDotProduct64BitMixedSignednessAccelerated && (s.integerDotProduct64BitMixedSignednessAccelerated = data.integerDotProduct64BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating8BitSignedAccelerated = data.integerDotProductAccumulatingSaturating8BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating16BitSignedAccelerated = data.integerDotProductAccumulatingSaturating16BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating32BitSignedAccelerated = data.integerDotProductAccumulatingSaturating32BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated && (s.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated = data.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitSignedAccelerated && (s.integerDotProductAccumulatingSaturating64BitSignedAccelerated = data.integerDotProductAccumulatingSaturating64BitSignedAccelerated), void 0 !== data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated && (s.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated = data.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get integerDotProduct8BitUnsignedAccelerated() {
        return this.#view.getUint32(16, LE);
    }
    set integerDotProduct8BitUnsignedAccelerated(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get integerDotProduct8BitSignedAccelerated() {
        return this.#view.getUint32(20, LE);
    }
    set integerDotProduct8BitSignedAccelerated(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get integerDotProduct8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(24, LE);
    }
    set integerDotProduct8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(28, LE);
    }
    set integerDotProduct4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(32, LE);
    }
    set integerDotProduct4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get integerDotProduct4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(36, LE);
    }
    set integerDotProduct4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get integerDotProduct16BitUnsignedAccelerated() {
        return this.#view.getUint32(40, LE);
    }
    set integerDotProduct16BitUnsignedAccelerated(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get integerDotProduct16BitSignedAccelerated() {
        return this.#view.getUint32(44, LE);
    }
    set integerDotProduct16BitSignedAccelerated(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get integerDotProduct16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(48, LE);
    }
    set integerDotProduct16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get integerDotProduct32BitUnsignedAccelerated() {
        return this.#view.getUint32(52, LE);
    }
    set integerDotProduct32BitUnsignedAccelerated(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get integerDotProduct32BitSignedAccelerated() {
        return this.#view.getUint32(56, LE);
    }
    set integerDotProduct32BitSignedAccelerated(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get integerDotProduct32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(60, LE);
    }
    set integerDotProduct32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get integerDotProduct64BitUnsignedAccelerated() {
        return this.#view.getUint32(64, LE);
    }
    set integerDotProduct64BitUnsignedAccelerated(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get integerDotProduct64BitSignedAccelerated() {
        return this.#view.getUint32(68, LE);
    }
    set integerDotProduct64BitSignedAccelerated(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
    get integerDotProduct64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(72, LE);
    }
    set integerDotProduct64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitUnsignedAccelerated() {
        return this.#view.getUint32(76, LE);
    }
    set integerDotProductAccumulatingSaturating8BitUnsignedAccelerated(value) {
        this.#view.setUint32(76, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitSignedAccelerated() {
        return this.#view.getUint32(80, LE);
    }
    set integerDotProductAccumulatingSaturating8BitSignedAccelerated(value) {
        this.#view.setUint32(80, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated() {
        return this.#view.getUint32(84, LE);
    }
    set integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated() {
        return this.#view.getUint32(88, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated() {
        return this.#view.getUint32(92, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated() {
        return this.#view.getUint32(96, LE);
    }
    set integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitUnsignedAccelerated() {
        return this.#view.getUint32(100, LE);
    }
    set integerDotProductAccumulatingSaturating16BitUnsignedAccelerated(value) {
        this.#view.setUint32(100, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitSignedAccelerated() {
        return this.#view.getUint32(104, LE);
    }
    set integerDotProductAccumulatingSaturating16BitSignedAccelerated(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated() {
        return this.#view.getUint32(108, LE);
    }
    set integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitUnsignedAccelerated() {
        return this.#view.getUint32(112, LE);
    }
    set integerDotProductAccumulatingSaturating32BitUnsignedAccelerated(value) {
        this.#view.setUint32(112, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitSignedAccelerated() {
        return this.#view.getUint32(116, LE);
    }
    set integerDotProductAccumulatingSaturating32BitSignedAccelerated(value) {
        this.#view.setUint32(116, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated() {
        return this.#view.getUint32(120, LE);
    }
    set integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitUnsignedAccelerated() {
        return this.#view.getUint32(124, LE);
    }
    set integerDotProductAccumulatingSaturating64BitUnsignedAccelerated(value) {
        this.#view.setUint32(124, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitSignedAccelerated() {
        return this.#view.getUint32(128, LE);
    }
    set integerDotProductAccumulatingSaturating64BitSignedAccelerated(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated() {
        return this.#view.getUint32(132, LE);
    }
    set integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
}
export class VkPhysicalDeviceDrmPropertiesEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDrmPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDrmPropertiesEXT(new Uint8Array(VkPhysicalDeviceDrmPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDrmPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.hasPrimary && (s.hasPrimary = data.hasPrimary), void 0 !== data.hasRender && (s.hasRender = data.hasRender), void 0 !== data.primaryMajor && (s.primaryMajor = data.primaryMajor), void 0 !== data.primaryMinor && (s.primaryMinor = data.primaryMinor), void 0 !== data.renderMajor && (s.renderMajor = data.renderMajor), void 0 !== data.renderMinor && (s.renderMinor = data.renderMinor), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get hasPrimary() {
        return this.#view.getUint32(16, LE);
    }
    set hasPrimary(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get hasRender() {
        return this.#view.getUint32(20, LE);
    }
    set hasRender(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get primaryMajor() {
        return this.#view.getBigInt64(24, LE);
    }
    set primaryMajor(value) {
        this.#view.setBigInt64(24, BigInt(value), LE);
    }
    get primaryMinor() {
        return this.#view.getBigInt64(32, LE);
    }
    set primaryMinor(value) {
        this.#view.setBigInt64(32, BigInt(value), LE);
    }
    get renderMajor() {
        return this.#view.getBigInt64(40, LE);
    }
    set renderMajor(value) {
        this.#view.setBigInt64(40, BigInt(value), LE);
    }
    get renderMinor() {
        return this.#view.getBigInt64(48, LE);
    }
    set renderMinor(value) {
        this.#view.setBigInt64(48, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(new Uint8Array(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.fragmentShaderBarycentric && (s.fragmentShaderBarycentric = data.fragmentShaderBarycentric), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get fragmentShaderBarycentric() {
        return this.#view.getUint32(16, LE);
    }
    set fragmentShaderBarycentric(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(new Uint8Array(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.triStripVertexOrderIndependentOfProvokingVertex && (s.triStripVertexOrderIndependentOfProvokingVertex = data.triStripVertexOrderIndependentOfProvokingVertex), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get triStripVertexOrderIndependentOfProvokingVertex() {
        return this.#view.getUint32(16, LE);
    }
    set triStripVertexOrderIndependentOfProvokingVertex(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(new Uint8Array(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayTracingMotionBlur && (s.rayTracingMotionBlur = data.rayTracingMotionBlur), void 0 !== data.rayTracingMotionBlurPipelineTraceRaysIndirect && (s.rayTracingMotionBlurPipelineTraceRaysIndirect = data.rayTracingMotionBlurPipelineTraceRaysIndirect), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayTracingMotionBlur() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingMotionBlur(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rayTracingMotionBlurPipelineTraceRaysIndirect() {
        return this.#view.getUint32(20, LE);
    }
    set rayTracingMotionBlurPipelineTraceRaysIndirect(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkAccelerationStructureGeometryMotionTrianglesDataNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryMotionTrianglesDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureGeometryMotionTrianglesDataNV(new Uint8Array(VkAccelerationStructureGeometryMotionTrianglesDataNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureGeometryMotionTrianglesDataNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.vertexData && (s.vertexData = data.vertexData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get vertexData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set vertexData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
}
export class VkAccelerationStructureMotionInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureMotionInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureMotionInfoNV(new Uint8Array(VkAccelerationStructureMotionInfoNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureMotionInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxInstances && (s.maxInstances = data.maxInstances), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxInstances() {
        return this.#view.getUint32(16, LE);
    }
    set maxInstances(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkSRTDataNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSRTDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSRTDataNV(new Uint8Array(VkSRTDataNV.size));
    }
    static create(data) {
        let s = VkSRTDataNV.alloc();
        return void 0 !== data.sx && (s.sx = data.sx), void 0 !== data.a && (s.a = data.a), void 0 !== data.b && (s.b = data.b), void 0 !== data.pvx && (s.pvx = data.pvx), void 0 !== data.sy && (s.sy = data.sy), void 0 !== data.c && (s.c = data.c), void 0 !== data.pvy && (s.pvy = data.pvy), void 0 !== data.sz && (s.sz = data.sz), void 0 !== data.pvz && (s.pvz = data.pvz), void 0 !== data.qx && (s.qx = data.qx), void 0 !== data.qy && (s.qy = data.qy), void 0 !== data.qz && (s.qz = data.qz), void 0 !== data.qw && (s.qw = data.qw), void 0 !== data.tx && (s.tx = data.tx), void 0 !== data.ty && (s.ty = data.ty), void 0 !== data.tz && (s.tz = data.tz), s;
    }
    get sx() {
        return this.#view.getFloat32(0, LE);
    }
    set sx(value) {
        this.#view.setFloat32(0, Number(value), LE);
    }
    get a() {
        return this.#view.getFloat32(4, LE);
    }
    set a(value) {
        this.#view.setFloat32(4, Number(value), LE);
    }
    get b() {
        return this.#view.getFloat32(8, LE);
    }
    set b(value) {
        this.#view.setFloat32(8, Number(value), LE);
    }
    get pvx() {
        return this.#view.getFloat32(12, LE);
    }
    set pvx(value) {
        this.#view.setFloat32(12, Number(value), LE);
    }
    get sy() {
        return this.#view.getFloat32(16, LE);
    }
    set sy(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
    get c() {
        return this.#view.getFloat32(20, LE);
    }
    set c(value) {
        this.#view.setFloat32(20, Number(value), LE);
    }
    get pvy() {
        return this.#view.getFloat32(24, LE);
    }
    set pvy(value) {
        this.#view.setFloat32(24, Number(value), LE);
    }
    get sz() {
        return this.#view.getFloat32(28, LE);
    }
    set sz(value) {
        this.#view.setFloat32(28, Number(value), LE);
    }
    get pvz() {
        return this.#view.getFloat32(32, LE);
    }
    set pvz(value) {
        this.#view.setFloat32(32, Number(value), LE);
    }
    get qx() {
        return this.#view.getFloat32(36, LE);
    }
    set qx(value) {
        this.#view.setFloat32(36, Number(value), LE);
    }
    get qy() {
        return this.#view.getFloat32(40, LE);
    }
    set qy(value) {
        this.#view.setFloat32(40, Number(value), LE);
    }
    get qz() {
        return this.#view.getFloat32(44, LE);
    }
    set qz(value) {
        this.#view.setFloat32(44, Number(value), LE);
    }
    get qw() {
        return this.#view.getFloat32(48, LE);
    }
    set qw(value) {
        this.#view.setFloat32(48, Number(value), LE);
    }
    get tx() {
        return this.#view.getFloat32(52, LE);
    }
    set tx(value) {
        this.#view.setFloat32(52, Number(value), LE);
    }
    get ty() {
        return this.#view.getFloat32(56, LE);
    }
    set ty(value) {
        this.#view.setFloat32(56, Number(value), LE);
    }
    get tz() {
        return this.#view.getFloat32(60, LE);
    }
    set tz(value) {
        this.#view.setFloat32(60, Number(value), LE);
    }
}
export class VkAccelerationStructureSRTMotionInstanceNV {
    static size = 152;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureSRTMotionInstanceNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureSRTMotionInstanceNV(new Uint8Array(VkAccelerationStructureSRTMotionInstanceNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureSRTMotionInstanceNV.alloc();
        return void 0 !== data.transformT0 && (s.transformT0 = data.transformT0), void 0 !== data.transformT1 && (s.transformT1 = data.transformT1), void 0 !== data.instanceCustomIndex && (s.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (s.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (s.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.accelerationStructureReference && (s.accelerationStructureReference = data.accelerationStructureReference), s;
    }
    get transformT0() {
        return new VkSRTDataNV(this.#data.subarray(0, 0 + VkSRTDataNV.size));
    }
    set transformT0(value) {
        if (value[BUFFER].byteLength < VkSRTDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get transformT1() {
        return new VkSRTDataNV(this.#data.subarray(64, 64 + VkSRTDataNV.size));
    }
    set transformT1(value) {
        if (value[BUFFER].byteLength < VkSRTDataNV.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 64);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(128, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(128, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(132, LE);
    }
    set mask(value) {
        this.#view.setUint32(132, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(136, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(136, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(140, LE);
    }
    set flags(value) {
        this.#view.setUint32(140, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(144, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(144, BigInt(value), LE);
    }
}
export class VkAccelerationStructureMatrixMotionInstanceNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureMatrixMotionInstanceNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureMatrixMotionInstanceNV(new Uint8Array(VkAccelerationStructureMatrixMotionInstanceNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureMatrixMotionInstanceNV.alloc();
        return void 0 !== data.transformT0 && (s.transformT0 = data.transformT0), void 0 !== data.transformT1 && (s.transformT1 = data.transformT1), void 0 !== data.instanceCustomIndex && (s.instanceCustomIndex = data.instanceCustomIndex), void 0 !== data.mask && (s.mask = data.mask), void 0 !== data.instanceShaderBindingTableRecordOffset && (s.instanceShaderBindingTableRecordOffset = data.instanceShaderBindingTableRecordOffset), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.accelerationStructureReference && (s.accelerationStructureReference = data.accelerationStructureReference), s;
    }
    get transformT0() {
        return new VkTransformMatrixKHR(this.#data.subarray(0, 0 + VkTransformMatrixKHR.size));
    }
    set transformT0(value) {
        if (value[BUFFER].byteLength < VkTransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 0);
    }
    get transformT1() {
        return new VkTransformMatrixKHR(this.#data.subarray(4, 4 + VkTransformMatrixKHR.size));
    }
    set transformT1(value) {
        if (value[BUFFER].byteLength < VkTransformMatrixKHR.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 4);
    }
    get instanceCustomIndex() {
        return this.#view.getUint32(8, LE);
    }
    set instanceCustomIndex(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get mask() {
        return this.#view.getUint32(12, LE);
    }
    set mask(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get instanceShaderBindingTableRecordOffset() {
        return this.#view.getUint32(16, LE);
    }
    set instanceShaderBindingTableRecordOffset(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get accelerationStructureReference() {
        return this.#view.getBigUint64(24, LE);
    }
    set accelerationStructureReference(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkAccelerationStructureMotionInstanceNV {
    static size = 160;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureMotionInstanceNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureMotionInstanceNV(new Uint8Array(VkAccelerationStructureMotionInstanceNV.size));
    }
    static create(data) {
        let s = VkAccelerationStructureMotionInstanceNV.alloc();
        return void 0 !== data.type && (s.type = data.type), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.data && (s.data = data.data), s;
    }
    get type() {
        return this.#view.getUint32(0, LE);
    }
    set type(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(4, LE);
    }
    set flags(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":[{"struct":[{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32"]},{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},"u32","u32","u32","u32","u64"]}]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":[{"struct":[{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32"]},{"struct":["f32"]},"u32","u32","u32","u32","u64"]},{"struct":[{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},{"struct":["f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32","f32"]},"u32","u32","u32","u32","u64"]}]}');
    }
}
export class VkMemoryGetRemoteAddressInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMemoryGetRemoteAddressInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMemoryGetRemoteAddressInfoNV(new Uint8Array(VkMemoryGetRemoteAddressInfoNV.size));
    }
    static create(data) {
        let s = VkMemoryGetRemoteAddressInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.handleType && (s.handleType = data.handleType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get handleType() {
        return this.#view.getUint32(24, LE);
    }
    set handleType(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkImportMemoryBufferCollectionFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMemoryBufferCollectionFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMemoryBufferCollectionFUCHSIA(new Uint8Array(VkImportMemoryBufferCollectionFUCHSIA.size));
    }
    static create(data) {
        let s = VkImportMemoryBufferCollectionFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.collection && (s.collection = data.collection), void 0 !== data.index && (s.index = data.index), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkBufferCollectionImageCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCollectionImageCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCollectionImageCreateInfoFUCHSIA(new Uint8Array(VkBufferCollectionImageCreateInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferCollectionImageCreateInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.collection && (s.collection = data.collection), void 0 !== data.index && (s.index = data.index), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkBufferCollectionBufferCreateInfoFUCHSIA {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCollectionBufferCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCollectionBufferCreateInfoFUCHSIA(new Uint8Array(VkBufferCollectionBufferCreateInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferCollectionBufferCreateInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.collection && (s.collection = data.collection), void 0 !== data.index && (s.index = data.index), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get collection() {
        return this.#view.getBigUint64(16, LE);
    }
    set collection(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get index() {
        return this.#view.getUint32(24, LE);
    }
    set index(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkBufferCollectionCreateInfoFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCollectionCreateInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCollectionCreateInfoFUCHSIA(new Uint8Array(VkBufferCollectionCreateInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferCollectionCreateInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.collectionToken && (s.collectionToken = data.collectionToken), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get collectionToken() {
        return this.#view.getBigUint64(16, LE);
    }
    set collectionToken(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkBufferCollectionPropertiesFUCHSIA {
    static size = 104;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCollectionPropertiesFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCollectionPropertiesFUCHSIA(new Uint8Array(VkBufferCollectionPropertiesFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferCollectionPropertiesFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memoryTypeBits && (s.memoryTypeBits = data.memoryTypeBits), void 0 !== data.bufferCount && (s.bufferCount = data.bufferCount), void 0 !== data.createInfoIndex && (s.createInfoIndex = data.createInfoIndex), void 0 !== data.sysmemPixelFormat && (s.sysmemPixelFormat = data.sysmemPixelFormat), void 0 !== data.formatFeatures && (s.formatFeatures = data.formatFeatures), void 0 !== data.sysmemColorSpaceIndex && (s.sysmemColorSpaceIndex = data.sysmemColorSpaceIndex), void 0 !== data.samplerYcbcrConversionComponents && (s.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (s.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (s.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (s.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (s.suggestedYChromaOffset = data.suggestedYChromaOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memoryTypeBits() {
        return this.#view.getUint32(16, LE);
    }
    set memoryTypeBits(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get bufferCount() {
        return this.#view.getUint32(20, LE);
    }
    set bufferCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get createInfoIndex() {
        return this.#view.getUint32(24, LE);
    }
    set createInfoIndex(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get sysmemPixelFormat() {
        return this.#view.getBigUint64(32, LE);
    }
    set sysmemPixelFormat(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getUint32(40, LE);
    }
    set formatFeatures(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get sysmemColorSpaceIndex() {
        return new VkSysmemColorSpaceFUCHSIA(this.#data.subarray(44, 44 + VkSysmemColorSpaceFUCHSIA.size));
    }
    set sysmemColorSpaceIndex(value) {
        if (value[BUFFER].byteLength < VkSysmemColorSpaceFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 44);
    }
    get samplerYcbcrConversionComponents() {
        return new VkComponentMapping(this.#data.subarray(68, 68 + VkComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 68);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(84, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(84, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(88, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(88, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(92, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(92, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(96, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(96, Number(value), LE);
    }
}
export class VkBufferConstraintsInfoFUCHSIA {
    static size = 120;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferConstraintsInfoFUCHSIA(new Uint8Array(VkBufferConstraintsInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferConstraintsInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.createInfo && (s.createInfo = data.createInfo), void 0 !== data.requiredFormatFeatures && (s.requiredFormatFeatures = data.requiredFormatFeatures), void 0 !== data.bufferCollectionConstraints && (s.bufferCollectionConstraints = data.bufferCollectionConstraints), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get createInfo() {
        return new VkBufferCreateInfo(this.#data.subarray(16, 16 + VkBufferCreateInfo.size));
    }
    set createInfo(value) {
        if (value[BUFFER].byteLength < VkBufferCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get requiredFormatFeatures() {
        return this.#view.getUint32(72, LE);
    }
    set requiredFormatFeatures(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
    get bufferCollectionConstraints() {
        return new VkBufferCollectionConstraintsInfoFUCHSIA(this.#data.subarray(76, 76 + VkBufferCollectionConstraintsInfoFUCHSIA.size));
    }
    set bufferCollectionConstraints(value) {
        if (value[BUFFER].byteLength < VkBufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 76);
    }
}
export class VkSysmemColorSpaceFUCHSIA {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSysmemColorSpaceFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSysmemColorSpaceFUCHSIA(new Uint8Array(VkSysmemColorSpaceFUCHSIA.size));
    }
    static create(data) {
        let s = VkSysmemColorSpaceFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.colorSpace && (s.colorSpace = data.colorSpace), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get colorSpace() {
        return this.#view.getUint32(16, LE);
    }
    set colorSpace(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImageFormatConstraintsInfoFUCHSIA {
    static size = 136;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageFormatConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageFormatConstraintsInfoFUCHSIA(new Uint8Array(VkImageFormatConstraintsInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkImageFormatConstraintsInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageCreateInfo && (s.imageCreateInfo = data.imageCreateInfo), void 0 !== data.requiredFormatFeatures && (s.requiredFormatFeatures = data.requiredFormatFeatures), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.sysmemPixelFormat && (s.sysmemPixelFormat = data.sysmemPixelFormat), void 0 !== data.colorSpaceCount && (s.colorSpaceCount = data.colorSpaceCount), void 0 !== data.pColorSpaces && (s.pColorSpaces = data.pColorSpaces), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageCreateInfo() {
        return new VkImageCreateInfo(this.#data.subarray(16, 16 + VkImageCreateInfo.size));
    }
    set imageCreateInfo(value) {
        if (value[BUFFER].byteLength < VkImageCreateInfo.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get requiredFormatFeatures() {
        return this.#view.getUint32(104, LE);
    }
    set requiredFormatFeatures(value) {
        this.#view.setUint32(104, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(108, LE);
    }
    set flags(value) {
        this.#view.setUint32(108, Number(value), LE);
    }
    get sysmemPixelFormat() {
        return this.#view.getBigUint64(112, LE);
    }
    set sysmemPixelFormat(value) {
        this.#view.setBigUint64(112, BigInt(value), LE);
    }
    get colorSpaceCount() {
        return this.#view.getUint32(120, LE);
    }
    set colorSpaceCount(value) {
        this.#view.setUint32(120, Number(value), LE);
    }
    get pColorSpaces() {
        return this.#view.getBigUint64(128, LE);
    }
    set pColorSpaces(value) {
        this.#view.setBigUint64(128, BigInt(value), LE);
    }
}
export class VkImageConstraintsInfoFUCHSIA {
    static size = 80;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageConstraintsInfoFUCHSIA(new Uint8Array(VkImageConstraintsInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkImageConstraintsInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.formatConstraintsCount && (s.formatConstraintsCount = data.formatConstraintsCount), void 0 !== data.pFormatConstraints && (s.pFormatConstraints = data.pFormatConstraints), void 0 !== data.bufferCollectionConstraints && (s.bufferCollectionConstraints = data.bufferCollectionConstraints), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get formatConstraintsCount() {
        return this.#view.getUint32(16, LE);
    }
    set formatConstraintsCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pFormatConstraints() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFormatConstraints(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferCollectionConstraints() {
        return new VkBufferCollectionConstraintsInfoFUCHSIA(this.#data.subarray(32, 32 + VkBufferCollectionConstraintsInfoFUCHSIA.size));
    }
    set bufferCollectionConstraints(value) {
        if (value[BUFFER].byteLength < VkBufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 32);
    }
    get flags() {
        return this.#view.getUint32(72, LE);
    }
    set flags(value) {
        this.#view.setUint32(72, Number(value), LE);
    }
}
export class VkBufferCollectionConstraintsInfoFUCHSIA {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkBufferCollectionConstraintsInfoFUCHSIA.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkBufferCollectionConstraintsInfoFUCHSIA(new Uint8Array(VkBufferCollectionConstraintsInfoFUCHSIA.size));
    }
    static create(data) {
        let s = VkBufferCollectionConstraintsInfoFUCHSIA.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minBufferCount && (s.minBufferCount = data.minBufferCount), void 0 !== data.maxBufferCount && (s.maxBufferCount = data.maxBufferCount), void 0 !== data.minBufferCountForCamping && (s.minBufferCountForCamping = data.minBufferCountForCamping), void 0 !== data.minBufferCountForDedicatedSlack && (s.minBufferCountForDedicatedSlack = data.minBufferCountForDedicatedSlack), void 0 !== data.minBufferCountForSharedSlack && (s.minBufferCountForSharedSlack = data.minBufferCountForSharedSlack), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minBufferCount() {
        return this.#view.getUint32(16, LE);
    }
    set minBufferCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxBufferCount() {
        return this.#view.getUint32(20, LE);
    }
    set maxBufferCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get minBufferCountForCamping() {
        return this.#view.getUint32(24, LE);
    }
    set minBufferCountForCamping(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get minBufferCountForDedicatedSlack() {
        return this.#view.getUint32(28, LE);
    }
    set minBufferCountForDedicatedSlack(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get minBufferCountForSharedSlack() {
        return this.#view.getUint32(32, LE);
    }
    set minBufferCountForSharedSlack(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(new Uint8Array(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.formatRgba10x6WithoutYCbCrSampler && (s.formatRgba10x6WithoutYCbCrSampler = data.formatRgba10x6WithoutYCbCrSampler), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get formatRgba10x6WithoutYCbCrSampler() {
        return this.#view.getUint32(16, LE);
    }
    set formatRgba10x6WithoutYCbCrSampler(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkFormatProperties3 {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkFormatProperties3.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkFormatProperties3(new Uint8Array(VkFormatProperties3.size));
    }
    static create(data) {
        let s = VkFormatProperties3.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.linearTilingFeatures && (s.linearTilingFeatures = data.linearTilingFeatures), void 0 !== data.optimalTilingFeatures && (s.optimalTilingFeatures = data.optimalTilingFeatures), void 0 !== data.bufferFeatures && (s.bufferFeatures = data.bufferFeatures), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get linearTilingFeatures() {
        return this.#view.getBigUint64(16, LE);
    }
    set linearTilingFeatures(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get optimalTilingFeatures() {
        return this.#view.getBigUint64(24, LE);
    }
    set optimalTilingFeatures(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferFeatures() {
        return this.#view.getBigUint64(32, LE);
    }
    set bufferFeatures(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkDrmFormatModifierPropertiesList2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrmFormatModifierPropertiesList2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrmFormatModifierPropertiesList2EXT(new Uint8Array(VkDrmFormatModifierPropertiesList2EXT.size));
    }
    static create(data) {
        let s = VkDrmFormatModifierPropertiesList2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.drmFormatModifierCount && (s.drmFormatModifierCount = data.drmFormatModifierCount), void 0 !== data.pDrmFormatModifierProperties && (s.pDrmFormatModifierProperties = data.pDrmFormatModifierProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get drmFormatModifierCount() {
        return this.#view.getUint32(16, LE);
    }
    set drmFormatModifierCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pDrmFormatModifierProperties() {
        return this.#view.getBigUint64(24, LE);
    }
    set pDrmFormatModifierProperties(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDrmFormatModifierProperties2EXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDrmFormatModifierProperties2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDrmFormatModifierProperties2EXT(new Uint8Array(VkDrmFormatModifierProperties2EXT.size));
    }
    static create(data) {
        let s = VkDrmFormatModifierProperties2EXT.alloc();
        return void 0 !== data.drmFormatModifier && (s.drmFormatModifier = data.drmFormatModifier), void 0 !== data.drmFormatModifierPlaneCount && (s.drmFormatModifierPlaneCount = data.drmFormatModifierPlaneCount), void 0 !== data.drmFormatModifierTilingFeatures && (s.drmFormatModifierTilingFeatures = data.drmFormatModifierTilingFeatures), s;
    }
    get drmFormatModifier() {
        return this.#view.getBigUint64(0, LE);
    }
    set drmFormatModifier(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get drmFormatModifierPlaneCount() {
        return this.#view.getUint32(8, LE);
    }
    set drmFormatModifierPlaneCount(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get drmFormatModifierTilingFeatures() {
        return this.#view.getBigUint64(16, LE);
    }
    set drmFormatModifierTilingFeatures(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkAndroidHardwareBufferFormatProperties2ANDROID {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAndroidHardwareBufferFormatProperties2ANDROID.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAndroidHardwareBufferFormatProperties2ANDROID(new Uint8Array(VkAndroidHardwareBufferFormatProperties2ANDROID.size));
    }
    static create(data) {
        let s = VkAndroidHardwareBufferFormatProperties2ANDROID.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), void 0 !== data.externalFormat && (s.externalFormat = data.externalFormat), void 0 !== data.formatFeatures && (s.formatFeatures = data.formatFeatures), void 0 !== data.samplerYcbcrConversionComponents && (s.samplerYcbcrConversionComponents = data.samplerYcbcrConversionComponents), void 0 !== data.suggestedYcbcrModel && (s.suggestedYcbcrModel = data.suggestedYcbcrModel), void 0 !== data.suggestedYcbcrRange && (s.suggestedYcbcrRange = data.suggestedYcbcrRange), void 0 !== data.suggestedXChromaOffset && (s.suggestedXChromaOffset = data.suggestedXChromaOffset), void 0 !== data.suggestedYChromaOffset && (s.suggestedYChromaOffset = data.suggestedYChromaOffset), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get externalFormat() {
        return this.#view.getBigUint64(24, LE);
    }
    set externalFormat(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get formatFeatures() {
        return this.#view.getBigUint64(32, LE);
    }
    set formatFeatures(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get samplerYcbcrConversionComponents() {
        return new VkComponentMapping(this.#data.subarray(40, 40 + VkComponentMapping.size));
    }
    set samplerYcbcrConversionComponents(value) {
        if (value[BUFFER].byteLength < VkComponentMapping.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 40);
    }
    get suggestedYcbcrModel() {
        return this.#view.getUint32(56, LE);
    }
    set suggestedYcbcrModel(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
    get suggestedYcbcrRange() {
        return this.#view.getUint32(60, LE);
    }
    set suggestedYcbcrRange(value) {
        this.#view.setUint32(60, Number(value), LE);
    }
    get suggestedXChromaOffset() {
        return this.#view.getUint32(64, LE);
    }
    set suggestedXChromaOffset(value) {
        this.#view.setUint32(64, Number(value), LE);
    }
    get suggestedYChromaOffset() {
        return this.#view.getUint32(68, LE);
    }
    set suggestedYChromaOffset(value) {
        this.#view.setUint32(68, Number(value), LE);
    }
}
export class VkPipelineRenderingCreateInfo {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRenderingCreateInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRenderingCreateInfo(new Uint8Array(VkPipelineRenderingCreateInfo.size));
    }
    static create(data) {
        let s = VkPipelineRenderingCreateInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.viewMask && (s.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentFormats && (s.pColorAttachmentFormats = data.pColorAttachmentFormats), void 0 !== data.depthAttachmentFormat && (s.depthAttachmentFormat = data.depthAttachmentFormat), void 0 !== data.stencilAttachmentFormat && (s.stencilAttachmentFormat = data.stencilAttachmentFormat), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(16, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(20, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pColorAttachmentFormats() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorAttachmentFormats(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get depthAttachmentFormat() {
        return this.#view.getUint32(32, LE);
    }
    set depthAttachmentFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get stencilAttachmentFormat() {
        return this.#view.getUint32(36, LE);
    }
    set stencilAttachmentFormat(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
}
export class VkRenderingInfo {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderingInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderingInfo(new Uint8Array(VkRenderingInfo.size));
    }
    static create(data) {
        let s = VkRenderingInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.renderArea && (s.renderArea = data.renderArea), void 0 !== data.layerCount && (s.layerCount = data.layerCount), void 0 !== data.viewMask && (s.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachments && (s.pColorAttachments = data.pColorAttachments), void 0 !== data.pDepthAttachment && (s.pDepthAttachment = data.pDepthAttachment), void 0 !== data.pStencilAttachment && (s.pStencilAttachment = data.pStencilAttachment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get renderArea() {
        return new VkRect2D(this.#data.subarray(20, 20 + VkRect2D.size));
    }
    set renderArea(value) {
        if (value[BUFFER].byteLength < VkRect2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get layerCount() {
        return this.#view.getUint32(36, LE);
    }
    set layerCount(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(40, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(44, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pColorAttachments() {
        return this.#view.getBigUint64(48, LE);
    }
    set pColorAttachments(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get pDepthAttachment() {
        return this.#view.getBigUint64(56, LE);
    }
    set pDepthAttachment(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get pStencilAttachment() {
        return this.#view.getBigUint64(64, LE);
    }
    set pStencilAttachment(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkRenderingAttachmentInfo {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderingAttachmentInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderingAttachmentInfo(new Uint8Array(VkRenderingAttachmentInfo.size));
    }
    static create(data) {
        let s = VkRenderingAttachmentInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.imageLayout && (s.imageLayout = data.imageLayout), void 0 !== data.resolveMode && (s.resolveMode = data.resolveMode), void 0 !== data.resolveImageView && (s.resolveImageView = data.resolveImageView), void 0 !== data.resolveImageLayout && (s.resolveImageLayout = data.resolveImageLayout), void 0 !== data.loadOp && (s.loadOp = data.loadOp), void 0 !== data.storeOp && (s.storeOp = data.storeOp), void 0 !== data.clearValue && (s.clearValue = data.clearValue), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get resolveMode() {
        return this.#view.getUint32(28, LE);
    }
    set resolveMode(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get resolveImageView() {
        return this.#view.getBigUint64(32, LE);
    }
    set resolveImageView(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get resolveImageLayout() {
        return this.#view.getUint32(40, LE);
    }
    set resolveImageLayout(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get loadOp() {
        return this.#view.getUint32(44, LE);
    }
    set loadOp(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get storeOp() {
        return this.#view.getUint32(48, LE);
    }
    set storeOp(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get clearValue() {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
    set clearValue(value) {
        throw new Error('Unknown type: {"union":[{"union":["f32","i32","u32"]},{"struct":["f32","u32"]}]}');
    }
}
export class VkRenderingFragmentShadingRateAttachmentInfoKHR {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderingFragmentShadingRateAttachmentInfoKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderingFragmentShadingRateAttachmentInfoKHR(new Uint8Array(VkRenderingFragmentShadingRateAttachmentInfoKHR.size));
    }
    static create(data) {
        let s = VkRenderingFragmentShadingRateAttachmentInfoKHR.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.imageLayout && (s.imageLayout = data.imageLayout), void 0 !== data.shadingRateAttachmentTexelSize && (s.shadingRateAttachmentTexelSize = data.shadingRateAttachmentTexelSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shadingRateAttachmentTexelSize() {
        return new VkExtent2D(this.#data.subarray(28, 28 + VkExtent2D.size));
    }
    set shadingRateAttachmentTexelSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
}
export class VkRenderingFragmentDensityMapAttachmentInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderingFragmentDensityMapAttachmentInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderingFragmentDensityMapAttachmentInfoEXT(new Uint8Array(VkRenderingFragmentDensityMapAttachmentInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderingFragmentDensityMapAttachmentInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.imageLayout && (s.imageLayout = data.imageLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(16, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get imageLayout() {
        return this.#view.getUint32(24, LE);
    }
    set imageLayout(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceDynamicRenderingFeatures {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDynamicRenderingFeatures.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDynamicRenderingFeatures(new Uint8Array(VkPhysicalDeviceDynamicRenderingFeatures.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDynamicRenderingFeatures.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.dynamicRendering && (s.dynamicRendering = data.dynamicRendering), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get dynamicRendering() {
        return this.#view.getUint32(16, LE);
    }
    set dynamicRendering(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkCommandBufferInheritanceRenderingInfo {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCommandBufferInheritanceRenderingInfo.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCommandBufferInheritanceRenderingInfo(new Uint8Array(VkCommandBufferInheritanceRenderingInfo.size));
    }
    static create(data) {
        let s = VkCommandBufferInheritanceRenderingInfo.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.viewMask && (s.viewMask = data.viewMask), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentFormats && (s.pColorAttachmentFormats = data.pColorAttachmentFormats), void 0 !== data.depthAttachmentFormat && (s.depthAttachmentFormat = data.depthAttachmentFormat), void 0 !== data.stencilAttachmentFormat && (s.stencilAttachmentFormat = data.stencilAttachmentFormat), void 0 !== data.rasterizationSamples && (s.rasterizationSamples = data.rasterizationSamples), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get viewMask() {
        return this.#view.getUint32(20, LE);
    }
    set viewMask(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(24, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get pColorAttachmentFormats() {
        return this.#view.getBigUint64(32, LE);
    }
    set pColorAttachmentFormats(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get depthAttachmentFormat() {
        return this.#view.getUint32(40, LE);
    }
    set depthAttachmentFormat(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get stencilAttachmentFormat() {
        return this.#view.getUint32(44, LE);
    }
    set stencilAttachmentFormat(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get rasterizationSamples() {
        return this.#view.getUint32(48, LE);
    }
    set rasterizationSamples(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkAttachmentSampleCountInfoAMD {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAttachmentSampleCountInfoAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAttachmentSampleCountInfoAMD(new Uint8Array(VkAttachmentSampleCountInfoAMD.size));
    }
    static create(data) {
        let s = VkAttachmentSampleCountInfoAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.colorAttachmentCount && (s.colorAttachmentCount = data.colorAttachmentCount), void 0 !== data.pColorAttachmentSamples && (s.pColorAttachmentSamples = data.pColorAttachmentSamples), void 0 !== data.depthStencilAttachmentSamples && (s.depthStencilAttachmentSamples = data.depthStencilAttachmentSamples), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get colorAttachmentCount() {
        return this.#view.getUint32(16, LE);
    }
    set colorAttachmentCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pColorAttachmentSamples() {
        return this.#view.getBigUint64(24, LE);
    }
    set pColorAttachmentSamples(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get depthStencilAttachmentSamples() {
        return this.#view.getUint32(32, LE);
    }
    set depthStencilAttachmentSamples(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkMultiviewPerViewAttributesInfoNVX {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMultiviewPerViewAttributesInfoNVX.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMultiviewPerViewAttributesInfoNVX(new Uint8Array(VkMultiviewPerViewAttributesInfoNVX.size));
    }
    static create(data) {
        let s = VkMultiviewPerViewAttributesInfoNVX.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.perViewAttributes && (s.perViewAttributes = data.perViewAttributes), void 0 !== data.perViewAttributesPositionXOnly && (s.perViewAttributesPositionXOnly = data.perViewAttributesPositionXOnly), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get perViewAttributes() {
        return this.#view.getUint32(16, LE);
    }
    set perViewAttributes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get perViewAttributesPositionXOnly() {
        return this.#view.getUint32(20, LE);
    }
    set perViewAttributesPositionXOnly(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageViewMinLodFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageViewMinLodFeaturesEXT(new Uint8Array(VkPhysicalDeviceImageViewMinLodFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageViewMinLodFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minLod && (s.minLod = data.minLod), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minLod() {
        return this.#view.getUint32(16, LE);
    }
    set minLod(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImageViewMinLodCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewMinLodCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewMinLodCreateInfoEXT(new Uint8Array(VkImageViewMinLodCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkImageViewMinLodCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.minLod && (s.minLod = data.minLod), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get minLod() {
        return this.#view.getFloat32(16, LE);
    }
    set minLod(value) {
        this.#view.setFloat32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(new Uint8Array(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rasterizationOrderColorAttachmentAccess && (s.rasterizationOrderColorAttachmentAccess = data.rasterizationOrderColorAttachmentAccess), void 0 !== data.rasterizationOrderDepthAttachmentAccess && (s.rasterizationOrderDepthAttachmentAccess = data.rasterizationOrderDepthAttachmentAccess), void 0 !== data.rasterizationOrderStencilAttachmentAccess && (s.rasterizationOrderStencilAttachmentAccess = data.rasterizationOrderStencilAttachmentAccess), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rasterizationOrderColorAttachmentAccess() {
        return this.#view.getUint32(16, LE);
    }
    set rasterizationOrderColorAttachmentAccess(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get rasterizationOrderDepthAttachmentAccess() {
        return this.#view.getUint32(20, LE);
    }
    set rasterizationOrderDepthAttachmentAccess(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get rasterizationOrderStencilAttachmentAccess() {
        return this.#view.getUint32(24, LE);
    }
    set rasterizationOrderStencilAttachmentAccess(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceLinearColorAttachmentFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceLinearColorAttachmentFeaturesNV(new Uint8Array(VkPhysicalDeviceLinearColorAttachmentFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceLinearColorAttachmentFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.linearColorAttachment && (s.linearColorAttachment = data.linearColorAttachment), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get linearColorAttachment() {
        return this.#view.getUint32(16, LE);
    }
    set linearColorAttachment(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(new Uint8Array(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.graphicsPipelineLibrary && (s.graphicsPipelineLibrary = data.graphicsPipelineLibrary), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get graphicsPipelineLibrary() {
        return this.#view.getUint32(16, LE);
    }
    set graphicsPipelineLibrary(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(new Uint8Array(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.graphicsPipelineLibraryFastLinking && (s.graphicsPipelineLibraryFastLinking = data.graphicsPipelineLibraryFastLinking), void 0 !== data.graphicsPipelineLibraryIndependentInterpolationDecoration && (s.graphicsPipelineLibraryIndependentInterpolationDecoration = data.graphicsPipelineLibraryIndependentInterpolationDecoration), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get graphicsPipelineLibraryFastLinking() {
        return this.#view.getUint32(16, LE);
    }
    set graphicsPipelineLibraryFastLinking(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get graphicsPipelineLibraryIndependentInterpolationDecoration() {
        return this.#view.getUint32(20, LE);
    }
    set graphicsPipelineLibraryIndependentInterpolationDecoration(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkGraphicsPipelineLibraryCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkGraphicsPipelineLibraryCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkGraphicsPipelineLibraryCreateInfoEXT(new Uint8Array(VkGraphicsPipelineLibraryCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkGraphicsPipelineLibraryCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(new Uint8Array(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorSetHostMapping && (s.descriptorSetHostMapping = data.descriptorSetHostMapping), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorSetHostMapping() {
        return this.#view.getUint32(16, LE);
    }
    set descriptorSetHostMapping(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDescriptorSetBindingReferenceVALVE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetBindingReferenceVALVE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetBindingReferenceVALVE(new Uint8Array(VkDescriptorSetBindingReferenceVALVE.size));
    }
    static create(data) {
        let s = VkDescriptorSetBindingReferenceVALVE.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorSetLayout && (s.descriptorSetLayout = data.descriptorSetLayout), void 0 !== data.binding && (s.binding = data.binding), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorSetLayout() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorSetLayout(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get binding() {
        return this.#view.getUint32(24, LE);
    }
    set binding(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkDescriptorSetLayoutHostMappingInfoVALVE {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDescriptorSetLayoutHostMappingInfoVALVE.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDescriptorSetLayoutHostMappingInfoVALVE(new Uint8Array(VkDescriptorSetLayoutHostMappingInfoVALVE.size));
    }
    static create(data) {
        let s = VkDescriptorSetLayoutHostMappingInfoVALVE.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.descriptorOffset && (s.descriptorOffset = data.descriptorOffset), void 0 !== data.descriptorSize && (s.descriptorSize = data.descriptorSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get descriptorOffset() {
        return this.#view.getBigUint64(16, LE);
    }
    set descriptorOffset(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get descriptorSize() {
        return this.#view.getUint32(24, LE);
    }
    set descriptorSize(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(new Uint8Array(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderModuleIdentifier && (s.shaderModuleIdentifier = data.shaderModuleIdentifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderModuleIdentifier() {
        return this.#view.getUint32(16, LE);
    }
    set shaderModuleIdentifier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(new Uint8Array(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderModuleIdentifierAlgorithmUUID && (s.shaderModuleIdentifierAlgorithmUUID = data.shaderModuleIdentifierAlgorithmUUID), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderModuleIdentifierAlgorithmUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set shaderModuleIdentifierAlgorithmUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
}
export class VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineShaderStageModuleIdentifierCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineShaderStageModuleIdentifierCreateInfoEXT(new Uint8Array(VkPipelineShaderStageModuleIdentifierCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineShaderStageModuleIdentifierCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.identifierSize && (s.identifierSize = data.identifierSize), void 0 !== data.pIdentifier && (s.pIdentifier = data.pIdentifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get identifierSize() {
        return this.#view.getUint32(16, LE);
    }
    set identifierSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pIdentifier() {
        return this.#view.getBigUint64(24, LE);
    }
    set pIdentifier(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkShaderModuleIdentifierEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkShaderModuleIdentifierEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkShaderModuleIdentifierEXT(new Uint8Array(VkShaderModuleIdentifierEXT.size));
    }
    static create(data) {
        let s = VkShaderModuleIdentifierEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.identifierSize && (s.identifierSize = data.identifierSize), void 0 !== data.identifier && (s.identifier = data.identifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get identifierSize() {
        return this.#view.getUint32(16, LE);
    }
    set identifierSize(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get identifier() {
        let result = [];
        for(let i = 0; i < 32; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set identifier(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
}
export class VkImageCompressionControlEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCompressionControlEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCompressionControlEXT(new Uint8Array(VkImageCompressionControlEXT.size));
    }
    static create(data) {
        let s = VkImageCompressionControlEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.compressionControlPlaneCount && (s.compressionControlPlaneCount = data.compressionControlPlaneCount), void 0 !== data.pFixedRateFlags && (s.pFixedRateFlags = data.pFixedRateFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get compressionControlPlaneCount() {
        return this.#view.getUint32(20, LE);
    }
    set compressionControlPlaneCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pFixedRateFlags() {
        return this.#view.getBigUint64(24, LE);
    }
    set pFixedRateFlags(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageCompressionControlFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageCompressionControlFeaturesEXT(new Uint8Array(VkPhysicalDeviceImageCompressionControlFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageCompressionControlFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageCompressionControl && (s.imageCompressionControl = data.imageCompressionControl), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageCompressionControl() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionControl(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImageCompressionPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageCompressionPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageCompressionPropertiesEXT(new Uint8Array(VkImageCompressionPropertiesEXT.size));
    }
    static create(data) {
        let s = VkImageCompressionPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageCompressionFlags && (s.imageCompressionFlags = data.imageCompressionFlags), void 0 !== data.imageCompressionFixedRateFlags && (s.imageCompressionFixedRateFlags = data.imageCompressionFixedRateFlags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageCompressionFlags() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get imageCompressionFixedRateFlags() {
        return this.#view.getUint32(20, LE);
    }
    set imageCompressionFixedRateFlags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(new Uint8Array(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageCompressionControlSwapchain && (s.imageCompressionControlSwapchain = data.imageCompressionControlSwapchain), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageCompressionControlSwapchain() {
        return this.#view.getUint32(16, LE);
    }
    set imageCompressionControlSwapchain(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkImageSubresource2EXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageSubresource2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageSubresource2EXT(new Uint8Array(VkImageSubresource2EXT.size));
    }
    static create(data) {
        let s = VkImageSubresource2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.imageSubresource && (s.imageSubresource = data.imageSubresource), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get imageSubresource() {
        return new VkImageSubresource(this.#data.subarray(16, 16 + VkImageSubresource.size));
    }
    set imageSubresource(value) {
        if (value[BUFFER].byteLength < VkImageSubresource.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkSubresourceLayout2EXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkSubresourceLayout2EXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkSubresourceLayout2EXT(new Uint8Array(VkSubresourceLayout2EXT.size));
    }
    static create(data) {
        let s = VkSubresourceLayout2EXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subresourceLayout && (s.subresourceLayout = data.subresourceLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subresourceLayout() {
        return new VkSubresourceLayout(this.#data.subarray(16, 16 + VkSubresourceLayout.size));
    }
    set subresourceLayout(value) {
        if (value[BUFFER].byteLength < VkSubresourceLayout.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
}
export class VkRenderPassCreationControlEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassCreationControlEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassCreationControlEXT(new Uint8Array(VkRenderPassCreationControlEXT.size));
    }
    static create(data) {
        let s = VkRenderPassCreationControlEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.disallowMerging && (s.disallowMerging = data.disallowMerging), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get disallowMerging() {
        return this.#view.getUint32(16, LE);
    }
    set disallowMerging(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkRenderPassCreationFeedbackInfoEXT {
    static size = 4;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassCreationFeedbackInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassCreationFeedbackInfoEXT(new Uint8Array(VkRenderPassCreationFeedbackInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassCreationFeedbackInfoEXT.alloc();
        return void 0 !== data.postMergeSubpassCount && (s.postMergeSubpassCount = data.postMergeSubpassCount), s;
    }
    get postMergeSubpassCount() {
        return this.#view.getUint32(0, LE);
    }
    set postMergeSubpassCount(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
}
export class VkRenderPassCreationFeedbackCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassCreationFeedbackCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassCreationFeedbackCreateInfoEXT(new Uint8Array(VkRenderPassCreationFeedbackCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassCreationFeedbackCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pRenderPassFeedback && (s.pRenderPassFeedback = data.pRenderPassFeedback), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pRenderPassFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pRenderPassFeedback(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkRenderPassSubpassFeedbackInfoEXT {
    static size = 264;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassSubpassFeedbackInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassSubpassFeedbackInfoEXT(new Uint8Array(VkRenderPassSubpassFeedbackInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassSubpassFeedbackInfoEXT.alloc();
        return void 0 !== data.subpassMergeStatus && (s.subpassMergeStatus = data.subpassMergeStatus), void 0 !== data.description && (s.description = data.description), void 0 !== data.postMergeIndex && (s.postMergeIndex = data.postMergeIndex), s;
    }
    get subpassMergeStatus() {
        return this.#view.getUint32(0, LE);
    }
    set subpassMergeStatus(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(4 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(4 + 1 * i, Number(value[i]));
    }
    get postMergeIndex() {
        return this.#view.getUint32(260, LE);
    }
    set postMergeIndex(value) {
        this.#view.setUint32(260, Number(value), LE);
    }
}
export class VkRenderPassSubpassFeedbackCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkRenderPassSubpassFeedbackCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkRenderPassSubpassFeedbackCreateInfoEXT(new Uint8Array(VkRenderPassSubpassFeedbackCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkRenderPassSubpassFeedbackCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pSubpassFeedback && (s.pSubpassFeedback = data.pSubpassFeedback), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pSubpassFeedback() {
        return this.#view.getBigUint64(16, LE);
    }
    set pSubpassFeedback(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(new Uint8Array(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.subpassMergeFeedback && (s.subpassMergeFeedback = data.subpassMergeFeedback), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get subpassMergeFeedback() {
        return this.#view.getUint32(16, LE);
    }
    set subpassMergeFeedback(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkMicromapBuildInfoEXT {
    static size = 96;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapBuildInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapBuildInfoEXT(new Uint8Array(VkMicromapBuildInfoEXT.size));
    }
    static create(data) {
        let s = VkMicromapBuildInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.type && (s.type = data.type), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.mode && (s.mode = data.mode), void 0 !== data.dstMicromap && (s.dstMicromap = data.dstMicromap), void 0 !== data.usageCountsCount && (s.usageCountsCount = data.usageCountsCount), void 0 !== data.pUsageCounts && (s.pUsageCounts = data.pUsageCounts), void 0 !== data.ppUsageCounts && (s.ppUsageCounts = data.ppUsageCounts), void 0 !== data.data && (s.data = data.data), void 0 !== data.scratchData && (s.scratchData = data.scratchData), void 0 !== data.triangleArray && (s.triangleArray = data.triangleArray), void 0 !== data.triangleArrayStride && (s.triangleArrayStride = data.triangleArrayStride), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(16, LE);
    }
    set type(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(20, LE);
    }
    set flags(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get mode() {
        return this.#view.getUint32(24, LE);
    }
    set mode(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get dstMicromap() {
        return this.#view.getBigUint64(32, LE);
    }
    set dstMicromap(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get usageCountsCount() {
        return this.#view.getUint32(40, LE);
    }
    set usageCountsCount(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get pUsageCounts() {
        return this.#view.getBigUint64(48, LE);
    }
    set pUsageCounts(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get ppUsageCounts() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppUsageCounts(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get data() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set data(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get scratchData() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set scratchData(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get triangleArray() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set triangleArray(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get triangleArrayStride() {
        return this.#view.getBigUint64(88, LE);
    }
    set triangleArrayStride(value) {
        this.#view.setBigUint64(88, BigInt(value), LE);
    }
}
export class VkMicromapCreateInfoEXT {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapCreateInfoEXT(new Uint8Array(VkMicromapCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkMicromapCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.createFlags && (s.createFlags = data.createFlags), void 0 !== data.buffer && (s.buffer = data.buffer), void 0 !== data.offset && (s.offset = data.offset), void 0 !== data.size && (s.size = data.size), void 0 !== data.type && (s.type = data.type), void 0 !== data.deviceAddress && (s.deviceAddress = data.deviceAddress), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get createFlags() {
        return this.#view.getUint32(16, LE);
    }
    set createFlags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get buffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set buffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get offset() {
        return this.#view.getBigUint64(32, LE);
    }
    set offset(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(40, LE);
    }
    set size(value) {
        this.#view.setBigUint64(40, BigInt(value), LE);
    }
    get type() {
        return this.#view.getUint32(48, LE);
    }
    set type(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get deviceAddress() {
        return this.#view.getBigUint64(56, LE);
    }
    set deviceAddress(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
}
export class VkMicromapVersionInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapVersionInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapVersionInfoEXT(new Uint8Array(VkMicromapVersionInfoEXT.size));
    }
    static create(data) {
        let s = VkMicromapVersionInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pVersionData && (s.pVersionData = data.pVersionData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pVersionData() {
        return this.#view.getBigUint64(16, LE);
    }
    set pVersionData(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkCopyMicromapInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMicromapInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMicromapInfoEXT(new Uint8Array(VkCopyMicromapInfoEXT.size));
    }
    static create(data) {
        let s = VkCopyMicromapInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkCopyMicromapToMemoryInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMicromapToMemoryInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMicromapToMemoryInfoEXT(new Uint8Array(VkCopyMicromapToMemoryInfoEXT.size));
    }
    static create(data) {
        let s = VkCopyMicromapToMemoryInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        return this.#view.getBigUint64(16, LE);
    }
    set src(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get dst() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set dst(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkCopyMemoryToMicromapInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkCopyMemoryToMicromapInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkCopyMemoryToMicromapInfoEXT(new Uint8Array(VkCopyMemoryToMicromapInfoEXT.size));
    }
    static create(data) {
        let s = VkCopyMemoryToMicromapInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.src && (s.src = data.src), void 0 !== data.dst && (s.dst = data.dst), void 0 !== data.mode && (s.mode = data.mode), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get src() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set src(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get dst() {
        return this.#view.getBigUint64(24, LE);
    }
    set dst(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mode() {
        return this.#view.getUint32(32, LE);
    }
    set mode(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkMicromapBuildSizesInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapBuildSizesInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapBuildSizesInfoEXT(new Uint8Array(VkMicromapBuildSizesInfoEXT.size));
    }
    static create(data) {
        let s = VkMicromapBuildSizesInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.micromapSize && (s.micromapSize = data.micromapSize), void 0 !== data.buildScratchSize && (s.buildScratchSize = data.buildScratchSize), void 0 !== data.discardable && (s.discardable = data.discardable), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get micromapSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set micromapSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get buildScratchSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set buildScratchSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get discardable() {
        return this.#view.getUint32(32, LE);
    }
    set discardable(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkMicromapUsageEXT {
    static size = 12;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapUsageEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapUsageEXT(new Uint8Array(VkMicromapUsageEXT.size));
    }
    static create(data) {
        let s = VkMicromapUsageEXT.alloc();
        return void 0 !== data.count && (s.count = data.count), void 0 !== data.subdivisionLevel && (s.subdivisionLevel = data.subdivisionLevel), void 0 !== data.format && (s.format = data.format), s;
    }
    get count() {
        return this.#view.getUint32(0, LE);
    }
    set count(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get subdivisionLevel() {
        return this.#view.getUint32(4, LE);
    }
    set subdivisionLevel(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint32(8, LE);
    }
    set format(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
}
export class VkMicromapTriangleEXT {
    static size = 8;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkMicromapTriangleEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkMicromapTriangleEXT(new Uint8Array(VkMicromapTriangleEXT.size));
    }
    static create(data) {
        let s = VkMicromapTriangleEXT.alloc();
        return void 0 !== data.dataOffset && (s.dataOffset = data.dataOffset), void 0 !== data.subdivisionLevel && (s.subdivisionLevel = data.subdivisionLevel), void 0 !== data.format && (s.format = data.format), s;
    }
    get dataOffset() {
        return this.#view.getUint32(0, LE);
    }
    set dataOffset(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get subdivisionLevel() {
        return this.#view.getUint16(4, LE);
    }
    set subdivisionLevel(value) {
        this.#view.setUint16(4, Number(value), LE);
    }
    get format() {
        return this.#view.getUint16(6, LE);
    }
    set format(value) {
        this.#view.setUint16(6, Number(value), LE);
    }
}
export class VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceOpacityMicromapFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceOpacityMicromapFeaturesEXT(new Uint8Array(VkPhysicalDeviceOpacityMicromapFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceOpacityMicromapFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.micromap && (s.micromap = data.micromap), void 0 !== data.micromapCaptureReplay && (s.micromapCaptureReplay = data.micromapCaptureReplay), void 0 !== data.micromapHostCommands && (s.micromapHostCommands = data.micromapHostCommands), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get micromap() {
        return this.#view.getUint32(16, LE);
    }
    set micromap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get micromapCaptureReplay() {
        return this.#view.getUint32(20, LE);
    }
    set micromapCaptureReplay(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get micromapHostCommands() {
        return this.#view.getUint32(24, LE);
    }
    set micromapHostCommands(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceOpacityMicromapPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceOpacityMicromapPropertiesEXT(new Uint8Array(VkPhysicalDeviceOpacityMicromapPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceOpacityMicromapPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxOpacity2StateSubdivisionLevel && (s.maxOpacity2StateSubdivisionLevel = data.maxOpacity2StateSubdivisionLevel), void 0 !== data.maxOpacity4StateSubdivisionLevel && (s.maxOpacity4StateSubdivisionLevel = data.maxOpacity4StateSubdivisionLevel), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxOpacity2StateSubdivisionLevel() {
        return this.#view.getUint32(16, LE);
    }
    set maxOpacity2StateSubdivisionLevel(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxOpacity4StateSubdivisionLevel() {
        return this.#view.getUint32(20, LE);
    }
    set maxOpacity4StateSubdivisionLevel(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkAccelerationStructureTrianglesOpacityMicromapEXT {
    static size = 72;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAccelerationStructureTrianglesOpacityMicromapEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAccelerationStructureTrianglesOpacityMicromapEXT(new Uint8Array(VkAccelerationStructureTrianglesOpacityMicromapEXT.size));
    }
    static create(data) {
        let s = VkAccelerationStructureTrianglesOpacityMicromapEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.indexType && (s.indexType = data.indexType), void 0 !== data.indexBuffer && (s.indexBuffer = data.indexBuffer), void 0 !== data.indexStride && (s.indexStride = data.indexStride), void 0 !== data.baseTriangle && (s.baseTriangle = data.baseTriangle), void 0 !== data.usageCountsCount && (s.usageCountsCount = data.usageCountsCount), void 0 !== data.pUsageCounts && (s.pUsageCounts = data.pUsageCounts), void 0 !== data.ppUsageCounts && (s.ppUsageCounts = data.ppUsageCounts), void 0 !== data.micromap && (s.micromap = data.micromap), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get indexType() {
        return this.#view.getUint32(16, LE);
    }
    set indexType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get indexBuffer() {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    set indexBuffer(value) {
        throw new Error('Unknown type: {"union":["u64","buffer"]}');
    }
    get indexStride() {
        return this.#view.getBigUint64(32, LE);
    }
    set indexStride(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get baseTriangle() {
        return this.#view.getUint32(40, LE);
    }
    set baseTriangle(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get usageCountsCount() {
        return this.#view.getUint32(44, LE);
    }
    set usageCountsCount(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get pUsageCounts() {
        return this.#view.getBigUint64(48, LE);
    }
    set pUsageCounts(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
    get ppUsageCounts() {
        return this.#view.getBigUint64(56, LE);
    }
    set ppUsageCounts(value) {
        this.#view.setBigUint64(56, BigInt(value), LE);
    }
    get micromap() {
        return this.#view.getBigUint64(64, LE);
    }
    set micromap(value) {
        this.#view.setBigUint64(64, BigInt(value), LE);
    }
}
export class VkPipelinePropertiesIdentifierEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelinePropertiesIdentifierEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelinePropertiesIdentifierEXT(new Uint8Array(VkPipelinePropertiesIdentifierEXT.size));
    }
    static create(data) {
        let s = VkPipelinePropertiesIdentifierEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineIdentifier && (s.pipelineIdentifier = data.pipelineIdentifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineIdentifier() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set pipelineIdentifier(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
}
export class VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelinePropertiesFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelinePropertiesFeaturesEXT(new Uint8Array(VkPhysicalDevicePipelinePropertiesFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelinePropertiesFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelinePropertiesIdentifier && (s.pipelinePropertiesIdentifier = data.pipelinePropertiesIdentifier), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelinePropertiesIdentifier() {
        return this.#view.getUint32(16, LE);
    }
    set pipelinePropertiesIdentifier(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(new Uint8Array(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderEarlyAndLateFragmentTests && (s.shaderEarlyAndLateFragmentTests = data.shaderEarlyAndLateFragmentTests), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderEarlyAndLateFragmentTests() {
        return this.#view.getUint32(16, LE);
    }
    set shaderEarlyAndLateFragmentTests(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExportMetalObjectCreateInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalObjectCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalObjectCreateInfoEXT(new Uint8Array(VkExportMetalObjectCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalObjectCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.exportObjectType && (s.exportObjectType = data.exportObjectType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get exportObjectType() {
        return this.#view.getUint32(16, LE);
    }
    set exportObjectType(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkExportMetalObjectsInfoEXT {
    static size = 16;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalObjectsInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalObjectsInfoEXT(new Uint8Array(VkExportMetalObjectsInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalObjectsInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
}
export class VkExportMetalDeviceInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalDeviceInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalDeviceInfoEXT(new Uint8Array(VkExportMetalDeviceInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalDeviceInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mtlDevice && (s.mtlDevice = data.mtlDevice), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mtlDevice() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlDevice(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkExportMetalCommandQueueInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalCommandQueueInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalCommandQueueInfoEXT(new Uint8Array(VkExportMetalCommandQueueInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalCommandQueueInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.queue && (s.queue = data.queue), void 0 !== data.mtlCommandQueue && (s.mtlCommandQueue = data.mtlCommandQueue), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get queue() {
        return this.#view.getBigUint64(16, LE);
    }
    set queue(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get mtlCommandQueue() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlCommandQueue(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkExportMetalBufferInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalBufferInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalBufferInfoEXT(new Uint8Array(VkExportMetalBufferInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalBufferInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.memory && (s.memory = data.memory), void 0 !== data.mtlBuffer && (s.mtlBuffer = data.mtlBuffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get memory() {
        return this.#view.getBigUint64(16, LE);
    }
    set memory(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get mtlBuffer() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlBuffer(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkImportMetalBufferInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMetalBufferInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMetalBufferInfoEXT(new Uint8Array(VkImportMetalBufferInfoEXT.size));
    }
    static create(data) {
        let s = VkImportMetalBufferInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mtlBuffer && (s.mtlBuffer = data.mtlBuffer), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mtlBuffer() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlBuffer(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkExportMetalTextureInfoEXT {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalTextureInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalTextureInfoEXT(new Uint8Array(VkExportMetalTextureInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalTextureInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), void 0 !== data.imageView && (s.imageView = data.imageView), void 0 !== data.bufferView && (s.bufferView = data.bufferView), void 0 !== data.plane && (s.plane = data.plane), void 0 !== data.mtlTexture && (s.mtlTexture = data.mtlTexture), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get imageView() {
        return this.#view.getBigUint64(24, LE);
    }
    set imageView(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get bufferView() {
        return this.#view.getBigUint64(32, LE);
    }
    set bufferView(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get plane() {
        return this.#view.getUint32(40, LE);
    }
    set plane(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get mtlTexture() {
        return this.#view.getBigUint64(48, LE);
    }
    set mtlTexture(value) {
        this.#view.setBigUint64(48, BigInt(value), LE);
    }
}
export class VkImportMetalTextureInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMetalTextureInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMetalTextureInfoEXT(new Uint8Array(VkImportMetalTextureInfoEXT.size));
    }
    static create(data) {
        let s = VkImportMetalTextureInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.plane && (s.plane = data.plane), void 0 !== data.mtlTexture && (s.mtlTexture = data.mtlTexture), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get plane() {
        return this.#view.getUint32(16, LE);
    }
    set plane(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get mtlTexture() {
        return this.#view.getBigUint64(24, LE);
    }
    set mtlTexture(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkExportMetalIOSurfaceInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalIOSurfaceInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalIOSurfaceInfoEXT(new Uint8Array(VkExportMetalIOSurfaceInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalIOSurfaceInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.image && (s.image = data.image), void 0 !== data.ioSurface && (s.ioSurface = data.ioSurface), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get image() {
        return this.#view.getBigUint64(16, LE);
    }
    set image(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get ioSurface() {
        return this.#view.getBigUint64(24, LE);
    }
    set ioSurface(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkImportMetalIOSurfaceInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMetalIOSurfaceInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMetalIOSurfaceInfoEXT(new Uint8Array(VkImportMetalIOSurfaceInfoEXT.size));
    }
    static create(data) {
        let s = VkImportMetalIOSurfaceInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.ioSurface && (s.ioSurface = data.ioSurface), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get ioSurface() {
        return this.#view.getBigUint64(16, LE);
    }
    set ioSurface(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkExportMetalSharedEventInfoEXT {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkExportMetalSharedEventInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkExportMetalSharedEventInfoEXT(new Uint8Array(VkExportMetalSharedEventInfoEXT.size));
    }
    static create(data) {
        let s = VkExportMetalSharedEventInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.semaphore && (s.semaphore = data.semaphore), void 0 !== data.event && (s.event = data.event), void 0 !== data.mtlSharedEvent && (s.mtlSharedEvent = data.mtlSharedEvent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get semaphore() {
        return this.#view.getBigUint64(16, LE);
    }
    set semaphore(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get event() {
        return this.#view.getBigUint64(24, LE);
    }
    set event(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get mtlSharedEvent() {
        return this.#view.getBigUint64(32, LE);
    }
    set mtlSharedEvent(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkImportMetalSharedEventInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImportMetalSharedEventInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImportMetalSharedEventInfoEXT(new Uint8Array(VkImportMetalSharedEventInfoEXT.size));
    }
    static create(data) {
        let s = VkImportMetalSharedEventInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.mtlSharedEvent && (s.mtlSharedEvent = data.mtlSharedEvent), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get mtlSharedEvent() {
        return this.#view.getBigUint64(16, LE);
    }
    set mtlSharedEvent(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(new Uint8Array(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.nonSeamlessCubeMap && (s.nonSeamlessCubeMap = data.nonSeamlessCubeMap), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get nonSeamlessCubeMap() {
        return this.#view.getUint32(16, LE);
    }
    set nonSeamlessCubeMap(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDevicePipelineRobustnessFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelineRobustnessFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelineRobustnessFeaturesEXT(new Uint8Array(VkPhysicalDevicePipelineRobustnessFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelineRobustnessFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.pipelineRobustness && (s.pipelineRobustness = data.pipelineRobustness), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get pipelineRobustness() {
        return this.#view.getUint32(16, LE);
    }
    set pipelineRobustness(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPipelineRobustnessCreateInfoEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPipelineRobustnessCreateInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPipelineRobustnessCreateInfoEXT(new Uint8Array(VkPipelineRobustnessCreateInfoEXT.size));
    }
    static create(data) {
        let s = VkPipelineRobustnessCreateInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.storageBuffers && (s.storageBuffers = data.storageBuffers), void 0 !== data.uniformBuffers && (s.uniformBuffers = data.uniformBuffers), void 0 !== data.vertexInputs && (s.vertexInputs = data.vertexInputs), void 0 !== data.images && (s.images = data.images), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get storageBuffers() {
        return this.#view.getUint32(16, LE);
    }
    set storageBuffers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get uniformBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set uniformBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vertexInputs() {
        return this.#view.getUint32(24, LE);
    }
    set vertexInputs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get images() {
        return this.#view.getUint32(28, LE);
    }
    set images(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDevicePipelineRobustnessPropertiesEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDevicePipelineRobustnessPropertiesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDevicePipelineRobustnessPropertiesEXT(new Uint8Array(VkPhysicalDevicePipelineRobustnessPropertiesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDevicePipelineRobustnessPropertiesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.defaultRobustnessStorageBuffers && (s.defaultRobustnessStorageBuffers = data.defaultRobustnessStorageBuffers), void 0 !== data.defaultRobustnessUniformBuffers && (s.defaultRobustnessUniformBuffers = data.defaultRobustnessUniformBuffers), void 0 !== data.defaultRobustnessVertexInputs && (s.defaultRobustnessVertexInputs = data.defaultRobustnessVertexInputs), void 0 !== data.defaultRobustnessImages && (s.defaultRobustnessImages = data.defaultRobustnessImages), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get defaultRobustnessStorageBuffers() {
        return this.#view.getUint32(16, LE);
    }
    set defaultRobustnessStorageBuffers(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get defaultRobustnessUniformBuffers() {
        return this.#view.getUint32(20, LE);
    }
    set defaultRobustnessUniformBuffers(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get defaultRobustnessVertexInputs() {
        return this.#view.getUint32(24, LE);
    }
    set defaultRobustnessVertexInputs(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get defaultRobustnessImages() {
        return this.#view.getUint32(28, LE);
    }
    set defaultRobustnessImages(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkImageViewSampleWeightCreateInfoQCOM {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkImageViewSampleWeightCreateInfoQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkImageViewSampleWeightCreateInfoQCOM(new Uint8Array(VkImageViewSampleWeightCreateInfoQCOM.size));
    }
    static create(data) {
        let s = VkImageViewSampleWeightCreateInfoQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.filterCenter && (s.filterCenter = data.filterCenter), void 0 !== data.filterSize && (s.filterSize = data.filterSize), void 0 !== data.numPhases && (s.numPhases = data.numPhases), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get filterCenter() {
        return new VkOffset2D(this.#data.subarray(16, 16 + VkOffset2D.size));
    }
    set filterCenter(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get filterSize() {
        return new VkExtent2D(this.#data.subarray(24, 24 + VkExtent2D.size));
    }
    set filterSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 24);
    }
    get numPhases() {
        return this.#view.getUint32(32, LE);
    }
    set numPhases(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
}
export class VkPhysicalDeviceImageProcessingFeaturesQCOM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageProcessingFeaturesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageProcessingFeaturesQCOM(new Uint8Array(VkPhysicalDeviceImageProcessingFeaturesQCOM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageProcessingFeaturesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.textureSampleWeighted && (s.textureSampleWeighted = data.textureSampleWeighted), void 0 !== data.textureBoxFilter && (s.textureBoxFilter = data.textureBoxFilter), void 0 !== data.textureBlockMatch && (s.textureBlockMatch = data.textureBlockMatch), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get textureSampleWeighted() {
        return this.#view.getUint32(16, LE);
    }
    set textureSampleWeighted(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get textureBoxFilter() {
        return this.#view.getUint32(20, LE);
    }
    set textureBoxFilter(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get textureBlockMatch() {
        return this.#view.getUint32(24, LE);
    }
    set textureBlockMatch(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
}
export class VkPhysicalDeviceImageProcessingPropertiesQCOM {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceImageProcessingPropertiesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceImageProcessingPropertiesQCOM(new Uint8Array(VkPhysicalDeviceImageProcessingPropertiesQCOM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceImageProcessingPropertiesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.maxWeightFilterPhases && (s.maxWeightFilterPhases = data.maxWeightFilterPhases), void 0 !== data.maxWeightFilterDimension && (s.maxWeightFilterDimension = data.maxWeightFilterDimension), void 0 !== data.maxBlockMatchRegion && (s.maxBlockMatchRegion = data.maxBlockMatchRegion), void 0 !== data.maxBoxFilterBlockSize && (s.maxBoxFilterBlockSize = data.maxBoxFilterBlockSize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get maxWeightFilterPhases() {
        return this.#view.getUint32(16, LE);
    }
    set maxWeightFilterPhases(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get maxWeightFilterDimension() {
        return new VkExtent2D(this.#data.subarray(20, 20 + VkExtent2D.size));
    }
    set maxWeightFilterDimension(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 20);
    }
    get maxBlockMatchRegion() {
        return new VkExtent2D(this.#data.subarray(28, 28 + VkExtent2D.size));
    }
    set maxBlockMatchRegion(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get maxBoxFilterBlockSize() {
        return new VkExtent2D(this.#data.subarray(36, 36 + VkExtent2D.size));
    }
    set maxBoxFilterBlockSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
}
export class VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceTilePropertiesFeaturesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceTilePropertiesFeaturesQCOM(new Uint8Array(VkPhysicalDeviceTilePropertiesFeaturesQCOM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceTilePropertiesFeaturesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.tileProperties && (s.tileProperties = data.tileProperties), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get tileProperties() {
        return this.#view.getUint32(16, LE);
    }
    set tileProperties(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkTilePropertiesQCOM {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkTilePropertiesQCOM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkTilePropertiesQCOM(new Uint8Array(VkTilePropertiesQCOM.size));
    }
    static create(data) {
        let s = VkTilePropertiesQCOM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.tileSize && (s.tileSize = data.tileSize), void 0 !== data.apronSize && (s.apronSize = data.apronSize), void 0 !== data.origin && (s.origin = data.origin), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get tileSize() {
        return new VkExtent3D(this.#data.subarray(16, 16 + VkExtent3D.size));
    }
    set tileSize(value) {
        if (value[BUFFER].byteLength < VkExtent3D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 16);
    }
    get apronSize() {
        return new VkExtent2D(this.#data.subarray(28, 28 + VkExtent2D.size));
    }
    set apronSize(value) {
        if (value[BUFFER].byteLength < VkExtent2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 28);
    }
    get origin() {
        return new VkOffset2D(this.#data.subarray(36, 36 + VkOffset2D.size));
    }
    set origin(value) {
        if (value[BUFFER].byteLength < VkOffset2D.size) throw new Error("Data buffer too small");
        this.#data.set(value[BUFFER], 36);
    }
}
export class VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceAmigoProfilingFeaturesSEC.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceAmigoProfilingFeaturesSEC(new Uint8Array(VkPhysicalDeviceAmigoProfilingFeaturesSEC.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceAmigoProfilingFeaturesSEC.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.amigoProfiling && (s.amigoProfiling = data.amigoProfiling), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get amigoProfiling() {
        return this.#view.getUint32(16, LE);
    }
    set amigoProfiling(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkAmigoProfilingSubmitInfoSEC {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkAmigoProfilingSubmitInfoSEC.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkAmigoProfilingSubmitInfoSEC(new Uint8Array(VkAmigoProfilingSubmitInfoSEC.size));
    }
    static create(data) {
        let s = VkAmigoProfilingSubmitInfoSEC.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.firstDrawTimestamp && (s.firstDrawTimestamp = data.firstDrawTimestamp), void 0 !== data.swapBufferTimestamp && (s.swapBufferTimestamp = data.swapBufferTimestamp), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get firstDrawTimestamp() {
        return this.#view.getBigUint64(16, LE);
    }
    set firstDrawTimestamp(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get swapBufferTimestamp() {
        return this.#view.getBigUint64(24, LE);
    }
    set swapBufferTimestamp(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(new Uint8Array(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.attachmentFeedbackLoopLayout && (s.attachmentFeedbackLoopLayout = data.attachmentFeedbackLoopLayout), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get attachmentFeedbackLoopLayout() {
        return this.#view.getUint32(16, LE);
    }
    set attachmentFeedbackLoopLayout(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(new Uint8Array(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.depthClampZeroOne && (s.depthClampZeroOne = data.depthClampZeroOne), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get depthClampZeroOne() {
        return this.#view.getUint32(16, LE);
    }
    set depthClampZeroOne(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceAddressBindingReportFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceAddressBindingReportFeaturesEXT(new Uint8Array(VkPhysicalDeviceAddressBindingReportFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceAddressBindingReportFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.reportAddressBinding && (s.reportAddressBinding = data.reportAddressBinding), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get reportAddressBinding() {
        return this.#view.getUint32(16, LE);
    }
    set reportAddressBinding(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkDeviceAddressBindingCallbackDataEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceAddressBindingCallbackDataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceAddressBindingCallbackDataEXT(new Uint8Array(VkDeviceAddressBindingCallbackDataEXT.size));
    }
    static create(data) {
        let s = VkDeviceAddressBindingCallbackDataEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.baseAddress && (s.baseAddress = data.baseAddress), void 0 !== data.size && (s.size = data.size), void 0 !== data.bindingType && (s.bindingType = data.bindingType), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get baseAddress() {
        return this.#view.getBigUint64(24, LE);
    }
    set baseAddress(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get size() {
        return this.#view.getBigUint64(32, LE);
    }
    set size(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
    get bindingType() {
        return this.#view.getUint32(40, LE);
    }
    set bindingType(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
}
export class VkPhysicalDeviceOpticalFlowFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceOpticalFlowFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceOpticalFlowFeaturesNV(new Uint8Array(VkPhysicalDeviceOpticalFlowFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceOpticalFlowFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.opticalFlow && (s.opticalFlow = data.opticalFlow), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get opticalFlow() {
        return this.#view.getUint32(16, LE);
    }
    set opticalFlow(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceOpticalFlowPropertiesNV {
    static size = 64;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceOpticalFlowPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceOpticalFlowPropertiesNV(new Uint8Array(VkPhysicalDeviceOpticalFlowPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceOpticalFlowPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.supportedOutputGridSizes && (s.supportedOutputGridSizes = data.supportedOutputGridSizes), void 0 !== data.supportedHintGridSizes && (s.supportedHintGridSizes = data.supportedHintGridSizes), void 0 !== data.hintSupported && (s.hintSupported = data.hintSupported), void 0 !== data.costSupported && (s.costSupported = data.costSupported), void 0 !== data.bidirectionalFlowSupported && (s.bidirectionalFlowSupported = data.bidirectionalFlowSupported), void 0 !== data.globalFlowSupported && (s.globalFlowSupported = data.globalFlowSupported), void 0 !== data.minWidth && (s.minWidth = data.minWidth), void 0 !== data.minHeight && (s.minHeight = data.minHeight), void 0 !== data.maxWidth && (s.maxWidth = data.maxWidth), void 0 !== data.maxHeight && (s.maxHeight = data.maxHeight), void 0 !== data.maxNumRegionsOfInterest && (s.maxNumRegionsOfInterest = data.maxNumRegionsOfInterest), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get supportedOutputGridSizes() {
        return this.#view.getUint32(16, LE);
    }
    set supportedOutputGridSizes(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get supportedHintGridSizes() {
        return this.#view.getUint32(20, LE);
    }
    set supportedHintGridSizes(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get hintSupported() {
        return this.#view.getUint32(24, LE);
    }
    set hintSupported(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get costSupported() {
        return this.#view.getUint32(28, LE);
    }
    set costSupported(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get bidirectionalFlowSupported() {
        return this.#view.getUint32(32, LE);
    }
    set bidirectionalFlowSupported(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get globalFlowSupported() {
        return this.#view.getUint32(36, LE);
    }
    set globalFlowSupported(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get minWidth() {
        return this.#view.getUint32(40, LE);
    }
    set minWidth(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get minHeight() {
        return this.#view.getUint32(44, LE);
    }
    set minHeight(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get maxWidth() {
        return this.#view.getUint32(48, LE);
    }
    set maxWidth(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
    get maxHeight() {
        return this.#view.getUint32(52, LE);
    }
    set maxHeight(value) {
        this.#view.setUint32(52, Number(value), LE);
    }
    get maxNumRegionsOfInterest() {
        return this.#view.getUint32(56, LE);
    }
    set maxNumRegionsOfInterest(value) {
        this.#view.setUint32(56, Number(value), LE);
    }
}
export class VkOpticalFlowImageFormatInfoNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpticalFlowImageFormatInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpticalFlowImageFormatInfoNV(new Uint8Array(VkOpticalFlowImageFormatInfoNV.size));
    }
    static create(data) {
        let s = VkOpticalFlowImageFormatInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.usage && (s.usage = data.usage), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get usage() {
        return this.#view.getUint32(16, LE);
    }
    set usage(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkOpticalFlowImageFormatPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpticalFlowImageFormatPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpticalFlowImageFormatPropertiesNV(new Uint8Array(VkOpticalFlowImageFormatPropertiesNV.size));
    }
    static create(data) {
        let s = VkOpticalFlowImageFormatPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.format && (s.format = data.format), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get format() {
        return this.#view.getUint32(16, LE);
    }
    set format(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkOpticalFlowSessionCreateInfoNV {
    static size = 56;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpticalFlowSessionCreateInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpticalFlowSessionCreateInfoNV(new Uint8Array(VkOpticalFlowSessionCreateInfoNV.size));
    }
    static create(data) {
        let s = VkOpticalFlowSessionCreateInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.width && (s.width = data.width), void 0 !== data.height && (s.height = data.height), void 0 !== data.imageFormat && (s.imageFormat = data.imageFormat), void 0 !== data.flowVectorFormat && (s.flowVectorFormat = data.flowVectorFormat), void 0 !== data.costFormat && (s.costFormat = data.costFormat), void 0 !== data.outputGridSize && (s.outputGridSize = data.outputGridSize), void 0 !== data.hintGridSize && (s.hintGridSize = data.hintGridSize), void 0 !== data.performanceLevel && (s.performanceLevel = data.performanceLevel), void 0 !== data.flags && (s.flags = data.flags), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get width() {
        return this.#view.getUint32(16, LE);
    }
    set width(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get height() {
        return this.#view.getUint32(20, LE);
    }
    set height(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get imageFormat() {
        return this.#view.getUint32(24, LE);
    }
    set imageFormat(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get flowVectorFormat() {
        return this.#view.getUint32(28, LE);
    }
    set flowVectorFormat(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
    get costFormat() {
        return this.#view.getUint32(32, LE);
    }
    set costFormat(value) {
        this.#view.setUint32(32, Number(value), LE);
    }
    get outputGridSize() {
        return this.#view.getUint32(36, LE);
    }
    set outputGridSize(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get hintGridSize() {
        return this.#view.getUint32(40, LE);
    }
    set hintGridSize(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get performanceLevel() {
        return this.#view.getUint32(44, LE);
    }
    set performanceLevel(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
    get flags() {
        return this.#view.getUint32(48, LE);
    }
    set flags(value) {
        this.#view.setUint32(48, Number(value), LE);
    }
}
export class VkOpticalFlowSessionCreatePrivateDataInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpticalFlowSessionCreatePrivateDataInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpticalFlowSessionCreatePrivateDataInfoNV(new Uint8Array(VkOpticalFlowSessionCreatePrivateDataInfoNV.size));
    }
    static create(data) {
        let s = VkOpticalFlowSessionCreatePrivateDataInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.id && (s.id = data.id), void 0 !== data.size && (s.size = data.size), void 0 !== data.pPrivateData && (s.pPrivateData = data.pPrivateData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get id() {
        return this.#view.getUint32(16, LE);
    }
    set id(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get size() {
        return this.#view.getUint32(20, LE);
    }
    set size(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pPrivateData() {
        return this.#view.getBigUint64(24, LE);
    }
    set pPrivateData(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkOpticalFlowExecuteInfoNV {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkOpticalFlowExecuteInfoNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkOpticalFlowExecuteInfoNV(new Uint8Array(VkOpticalFlowExecuteInfoNV.size));
    }
    static create(data) {
        let s = VkOpticalFlowExecuteInfoNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.flags && (s.flags = data.flags), void 0 !== data.regionCount && (s.regionCount = data.regionCount), void 0 !== data.pRegions && (s.pRegions = data.pRegions), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get flags() {
        return this.#view.getUint32(16, LE);
    }
    set flags(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get regionCount() {
        return this.#view.getUint32(20, LE);
    }
    set regionCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get pRegions() {
        return this.#view.getBigUint64(24, LE);
    }
    set pRegions(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceFaultFeaturesEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceFaultFeaturesEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceFaultFeaturesEXT(new Uint8Array(VkPhysicalDeviceFaultFeaturesEXT.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceFaultFeaturesEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.deviceFault && (s.deviceFault = data.deviceFault), void 0 !== data.deviceFaultVendorBinary && (s.deviceFaultVendorBinary = data.deviceFaultVendorBinary), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get deviceFault() {
        return this.#view.getUint32(16, LE);
    }
    set deviceFault(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get deviceFaultVendorBinary() {
        return this.#view.getUint32(20, LE);
    }
    set deviceFaultVendorBinary(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
}
export class VkDeviceFaultAddressInfoEXT {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceFaultAddressInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceFaultAddressInfoEXT(new Uint8Array(VkDeviceFaultAddressInfoEXT.size));
    }
    static create(data) {
        let s = VkDeviceFaultAddressInfoEXT.alloc();
        return void 0 !== data.addressType && (s.addressType = data.addressType), void 0 !== data.reportedAddress && (s.reportedAddress = data.reportedAddress), void 0 !== data.addressPrecision && (s.addressPrecision = data.addressPrecision), s;
    }
    get addressType() {
        return this.#view.getUint32(0, LE);
    }
    set addressType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get reportedAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set reportedAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get addressPrecision() {
        return this.#view.getBigUint64(16, LE);
    }
    set addressPrecision(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
}
export class VkDeviceFaultVendorInfoEXT {
    static size = 272;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceFaultVendorInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceFaultVendorInfoEXT(new Uint8Array(VkDeviceFaultVendorInfoEXT.size));
    }
    static create(data) {
        let s = VkDeviceFaultVendorInfoEXT.alloc();
        return void 0 !== data.description && (s.description = data.description), void 0 !== data.vendorFaultCode && (s.vendorFaultCode = data.vendorFaultCode), void 0 !== data.vendorFaultData && (s.vendorFaultData = data.vendorFaultData), s;
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(0 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(0 + 1 * i, Number(value[i]));
    }
    get vendorFaultCode() {
        return this.#view.getBigUint64(256, LE);
    }
    set vendorFaultCode(value) {
        this.#view.setBigUint64(256, BigInt(value), LE);
    }
    get vendorFaultData() {
        return this.#view.getBigUint64(264, LE);
    }
    set vendorFaultData(value) {
        this.#view.setBigUint64(264, BigInt(value), LE);
    }
}
export class VkDeviceFaultCountsEXT {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceFaultCountsEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceFaultCountsEXT(new Uint8Array(VkDeviceFaultCountsEXT.size));
    }
    static create(data) {
        let s = VkDeviceFaultCountsEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.addressInfoCount && (s.addressInfoCount = data.addressInfoCount), void 0 !== data.vendorInfoCount && (s.vendorInfoCount = data.vendorInfoCount), void 0 !== data.vendorBinarySize && (s.vendorBinarySize = data.vendorBinarySize), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get addressInfoCount() {
        return this.#view.getUint32(16, LE);
    }
    set addressInfoCount(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get vendorInfoCount() {
        return this.#view.getUint32(20, LE);
    }
    set vendorInfoCount(value) {
        this.#view.setUint32(20, Number(value), LE);
    }
    get vendorBinarySize() {
        return this.#view.getBigUint64(24, LE);
    }
    set vendorBinarySize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
}
export class VkDeviceFaultInfoEXT {
    static size = 296;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceFaultInfoEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceFaultInfoEXT(new Uint8Array(VkDeviceFaultInfoEXT.size));
    }
    static create(data) {
        let s = VkDeviceFaultInfoEXT.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.description && (s.description = data.description), void 0 !== data.pAddressInfos && (s.pAddressInfos = data.pAddressInfos), void 0 !== data.pVendorInfos && (s.pVendorInfos = data.pVendorInfos), void 0 !== data.pVendorBinaryData && (s.pVendorBinaryData = data.pVendorBinaryData), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get description() {
        let result = [];
        for(let i = 0; i < 256; i++)result.push(this.#view.getUint8(16 + 1 * i));
        return result;
    }
    set description(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(16 + 1 * i, Number(value[i]));
    }
    get pAddressInfos() {
        return this.#view.getBigUint64(272, LE);
    }
    set pAddressInfos(value) {
        this.#view.setBigUint64(272, BigInt(value), LE);
    }
    get pVendorInfos() {
        return this.#view.getBigUint64(280, LE);
    }
    set pVendorInfos(value) {
        this.#view.setBigUint64(280, BigInt(value), LE);
    }
    get pVendorBinaryData() {
        return this.#view.getBigUint64(288, LE);
    }
    set pVendorBinaryData(value) {
        this.#view.setBigUint64(288, BigInt(value), LE);
    }
}
export class VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    static size = 48;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDeviceFaultVendorBinaryHeaderVersionOneEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDeviceFaultVendorBinaryHeaderVersionOneEXT(new Uint8Array(VkDeviceFaultVendorBinaryHeaderVersionOneEXT.size));
    }
    static create(data) {
        let s = VkDeviceFaultVendorBinaryHeaderVersionOneEXT.alloc();
        return void 0 !== data.headerSize && (s.headerSize = data.headerSize), void 0 !== data.headerVersion && (s.headerVersion = data.headerVersion), void 0 !== data.vendorID && (s.vendorID = data.vendorID), void 0 !== data.deviceID && (s.deviceID = data.deviceID), void 0 !== data.driverVersion && (s.driverVersion = data.driverVersion), void 0 !== data.pipelineCacheUUID && (s.pipelineCacheUUID = data.pipelineCacheUUID), void 0 !== data.applicationNameOffset && (s.applicationNameOffset = data.applicationNameOffset), void 0 !== data.applicationVersion && (s.applicationVersion = data.applicationVersion), void 0 !== data.engineNameOffset && (s.engineNameOffset = data.engineNameOffset), s;
    }
    get headerSize() {
        return this.#view.getUint32(0, LE);
    }
    set headerSize(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get headerVersion() {
        return this.#view.getUint32(4, LE);
    }
    set headerVersion(value) {
        this.#view.setUint32(4, Number(value), LE);
    }
    get vendorID() {
        return this.#view.getUint32(8, LE);
    }
    set vendorID(value) {
        this.#view.setUint32(8, Number(value), LE);
    }
    get deviceID() {
        return this.#view.getUint32(12, LE);
    }
    set deviceID(value) {
        this.#view.setUint32(12, Number(value), LE);
    }
    get driverVersion() {
        return this.#view.getUint32(16, LE);
    }
    set driverVersion(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
    get pipelineCacheUUID() {
        let result = [];
        for(let i = 0; i < 16; i++)result.push(this.#view.getUint8(20 + 1 * i));
        return result;
    }
    set pipelineCacheUUID(value) {
        for(let i = 0; i < value.length; i++)this.#view.setUint8(20 + 1 * i, Number(value[i]));
    }
    get applicationNameOffset() {
        return this.#view.getUint32(36, LE);
    }
    set applicationNameOffset(value) {
        this.#view.setUint32(36, Number(value), LE);
    }
    get applicationVersion() {
        return this.#view.getUint32(40, LE);
    }
    set applicationVersion(value) {
        this.#view.setUint32(40, Number(value), LE);
    }
    get engineNameOffset() {
        return this.#view.getUint32(44, LE);
    }
    set engineNameOffset(value) {
        this.#view.setUint32(44, Number(value), LE);
    }
}
export class VkDecompressMemoryRegionNV {
    static size = 40;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkDecompressMemoryRegionNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkDecompressMemoryRegionNV(new Uint8Array(VkDecompressMemoryRegionNV.size));
    }
    static create(data) {
        let s = VkDecompressMemoryRegionNV.alloc();
        return void 0 !== data.srcAddress && (s.srcAddress = data.srcAddress), void 0 !== data.dstAddress && (s.dstAddress = data.dstAddress), void 0 !== data.compressedSize && (s.compressedSize = data.compressedSize), void 0 !== data.decompressedSize && (s.decompressedSize = data.decompressedSize), void 0 !== data.decompressionMethod && (s.decompressionMethod = data.decompressionMethod), s;
    }
    get srcAddress() {
        return this.#view.getBigUint64(0, LE);
    }
    set srcAddress(value) {
        this.#view.setBigUint64(0, BigInt(value), LE);
    }
    get dstAddress() {
        return this.#view.getBigUint64(8, LE);
    }
    set dstAddress(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get compressedSize() {
        return this.#view.getBigUint64(16, LE);
    }
    set compressedSize(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get decompressedSize() {
        return this.#view.getBigUint64(24, LE);
    }
    set decompressedSize(value) {
        this.#view.setBigUint64(24, BigInt(value), LE);
    }
    get decompressionMethod() {
        return this.#view.getBigUint64(32, LE);
    }
    set decompressionMethod(value) {
        this.#view.setBigUint64(32, BigInt(value), LE);
    }
}
export class VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    static size = 32;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(new Uint8Array(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderCoreMask && (s.shaderCoreMask = data.shaderCoreMask), void 0 !== data.shaderCoreCount && (s.shaderCoreCount = data.shaderCoreCount), void 0 !== data.shaderWarpsPerCore && (s.shaderWarpsPerCore = data.shaderWarpsPerCore), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderCoreMask() {
        return this.#view.getBigUint64(16, LE);
    }
    set shaderCoreMask(value) {
        this.#view.setBigUint64(16, BigInt(value), LE);
    }
    get shaderCoreCount() {
        return this.#view.getUint32(24, LE);
    }
    set shaderCoreCount(value) {
        this.#view.setUint32(24, Number(value), LE);
    }
    get shaderWarpsPerCore() {
        return this.#view.getUint32(28, LE);
    }
    set shaderWarpsPerCore(value) {
        this.#view.setUint32(28, Number(value), LE);
    }
}
export class VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(new Uint8Array(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.shaderCoreBuiltins && (s.shaderCoreBuiltins = data.shaderCoreBuiltins), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get shaderCoreBuiltins() {
        return this.#view.getUint32(16, LE);
    }
    set shaderCoreBuiltins(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(new Uint8Array(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayTracingInvocationReorder && (s.rayTracingInvocationReorder = data.rayTracingInvocationReorder), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayTracingInvocationReorder() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingInvocationReorder(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    static size = 24;
    #data;
    #view;
    get [BUFFER]() {
        return this.#data;
    }
    get [DATAVIEW]() {
        return this.#view;
    }
    constructor(data){
        if (data.byteLength < VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer, data.byteOffset);
    }
    static alloc() {
        return new VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(new Uint8Array(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV.size));
    }
    static create(data) {
        let s = VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV.alloc();
        return s.sType = VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV, void 0 !== data.pNext && (s.pNext = data.pNext), void 0 !== data.rayTracingInvocationReorderReorderingHint && (s.rayTracingInvocationReorderReorderingHint = data.rayTracingInvocationReorderReorderingHint), s;
    }
    get sType() {
        return this.#view.getUint32(0, LE);
    }
    set sType(value) {
        this.#view.setUint32(0, Number(value), LE);
    }
    get pNext() {
        return this.#view.getBigUint64(8, LE);
    }
    set pNext(value) {
        this.#view.setBigUint64(8, BigInt(value), LE);
    }
    get rayTracingInvocationReorderReorderingHint() {
        return this.#view.getUint32(16, LE);
    }
    set rayTracingInvocationReorderReorderingHint(value) {
        this.#view.setUint32(16, Number(value), LE);
    }
}
export class VkClearColorValue {
    static size = 4;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkClearColorValue.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkClearValue {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkClearValue.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkPerformanceCounterResultKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkPerformanceCounterResultKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkPerformanceValueDataINTEL {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkPerformanceValueDataINTEL.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkPipelineExecutableStatisticValueKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkPipelineExecutableStatisticValueKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkDeviceOrHostAddressKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkDeviceOrHostAddressKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkDeviceOrHostAddressConstKHR {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkDeviceOrHostAddressConstKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkAccelerationStructureGeometryDataKHR {
    static size = 64;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkAccelerationStructureGeometryDataKHR.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkDescriptorDataEXT {
    static size = 8;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkDescriptorDataEXT.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
export class VkAccelerationStructureMotionInstanceDataNV {
    static size = 152;
    #data;
    #view;
    constructor(data){
        if (data.byteLength < VkAccelerationStructureMotionInstanceDataNV.size) throw new Error("Data buffer too small");
        this.#data = data, this.#view = new DataView(data.buffer);
    }
}
let lib = Deno.dlopen("vulkan-1", {
    vkCreateInstance: {
        parameters: [
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyInstance: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumeratePhysicalDevices: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceProcAddr: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "function"
    },
    vkGetInstanceProcAddr: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "function"
    },
    vkGetPhysicalDeviceProperties: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceQueueFamilyProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceMemoryProperties: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFeatures: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceImageFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateDevice: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDevice: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumerateInstanceVersion: {
        parameters: [
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateInstanceLayerProperties: {
        parameters: [
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateInstanceExtensionProperties: {
        parameters: [
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateDeviceLayerProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkEnumerateDeviceExtensionProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceQueue: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkQueueSubmit: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkQueueWaitIdle: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkDeviceWaitIdle: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkAllocateMemory: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeMemory: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkMapMemory: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkUnmapMemory: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "void"
    },
    vkFlushMappedMemoryRanges: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkInvalidateMappedMemoryRanges: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceMemoryCommitment: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetBufferMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkBindBufferMemory: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetImageMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkBindImageMemory: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetImageSparseMemoryRequirements: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSparseImageFormatProperties: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkQueueBindSparse: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkCreateFence: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyFence: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetFences: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkGetFenceStatus: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkWaitForFences: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "u64"
        ],
        result: "u32"
    },
    vkCreateSemaphore: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySemaphore: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateEvent: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyEvent: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetEventStatus: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkSetEvent: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkResetEvent: {
        parameters: [
            "pointer",
            "pointer"
        ],
        result: "u32"
    },
    vkCreateQueryPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetQueryPoolResults: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "usize",
            "buffer",
            "u64",
            "u32"
        ],
        result: "u32"
    },
    vkResetQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCreateBuffer: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateBufferView: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyBufferView: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateImage: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyImage: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageSubresourceLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateImageView: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyImageView: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateShaderModule: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyShaderModule: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreatePipelineCache: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipelineCache: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPipelineCacheData: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkMergePipelineCaches: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateGraphicsPipelines: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateComputePipelines: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipeline: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreatePipelineLayout: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPipelineLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateSampler: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySampler: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateDescriptorSetLayout: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorSetLayout: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateDescriptorPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetDescriptorPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkAllocateDescriptorSets: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeDescriptorSets: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkUpdateDescriptorSets: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCreateFramebuffer: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyFramebuffer: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateRenderPass: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyRenderPass: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetRenderAreaGranularity: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateCommandPool: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkResetCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkAllocateCommandBuffers: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkFreeCommandBuffers: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkBeginCommandBuffer: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkEndCommandBuffer: {
        parameters: [
            "pointer"
        ],
        result: "u32"
    },
    vkResetCommandBuffer: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "u32"
    },
    vkCmdBindPipeline: {
        parameters: [
            "pointer",
            "u32",
            "pointer"
        ],
        result: "void"
    },
    vkCmdSetViewport: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetScissor: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetLineWidth: {
        parameters: [
            "pointer",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetDepthBias: {
        parameters: [
            "pointer",
            "f32",
            "f32",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetBlendConstants: {
        parameters: [
            "pointer",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetDepthBounds: {
        parameters: [
            "pointer",
            "f32",
            "f32"
        ],
        result: "void"
    },
    vkCmdSetStencilCompareMask: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilWriteMask: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilReference: {
        parameters: [
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdBindDescriptorSets: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBindIndexBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdBindVertexBuffers: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdDraw: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexed: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "i32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexedIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatch: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatchIndirect: {
        parameters: [
            "pointer",
            "pointer",
            "u64"
        ],
        result: "void"
    },
    vkCmdCopyBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBlitImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer",
            "u32"
        ],
        result: "void"
    },
    vkCmdCopyBufferToImage: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImageToBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdUpdateBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "buffer"
        ],
        result: "void"
    },
    vkCmdFillBuffer: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdClearColorImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdClearDepthStencilImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdClearAttachments: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResolveImage: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "pointer",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetEvent: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdResetEvent: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdWaitEvents: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "u32",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdPipelineBarrier: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "buffer",
            "u32",
            "buffer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBeginQuery: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdEndQuery: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdResetQueryPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdWriteTimestamp: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdCopyQueryPoolResults: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "pointer",
            "u64",
            "u64",
            "u32"
        ],
        result: "void"
    },
    vkCmdPushConstants: {
        parameters: [
            "pointer",
            "pointer",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBeginRenderPass: {
        parameters: [
            "pointer",
            "buffer",
            "u32"
        ],
        result: "void"
    },
    vkCmdNextSubpass: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdEndRenderPass: {
        parameters: [
            "pointer"
        ],
        result: "void"
    },
    vkCmdExecuteCommands: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSurfaceSupportKHR: {
        parameters: [
            "pointer",
            "u32",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfaceCapabilitiesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfaceFormatsKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceSurfacePresentModesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCreateSwapchainKHR: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySwapchainKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetSwapchainImagesKHR: {
        parameters: [
            "pointer",
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkAcquireNextImageKHR: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkQueuePresentKHR: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceFeatures2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceProperties2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceFormatProperties2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceImageFormatProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetPhysicalDeviceQueueFamilyProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceMemoryProperties2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceSparseImageFormatProperties2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkTrimCommandPool: {
        parameters: [
            "pointer",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalBufferProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalSemaphoreProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetPhysicalDeviceExternalFenceProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkEnumeratePhysicalDeviceGroups: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkGetDeviceGroupPeerMemoryFeatures: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkBindBufferMemory2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkBindImageMemory2: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdSetDeviceMask: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdDispatchBase: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCreateDescriptorUpdateTemplate: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyDescriptorUpdateTemplate: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkUpdateDescriptorSetWithTemplate: {
        parameters: [
            "pointer",
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetBufferMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetImageSparseMemoryRequirements2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceBufferMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceImageMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceImageSparseMemoryRequirements: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateSamplerYcbcrConversion: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroySamplerYcbcrConversion: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDeviceQueue2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkGetDescriptorSetLayoutSupport: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCreateRenderPass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdBeginRenderPass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdNextSubpass2: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdEndRenderPass2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkGetSemaphoreCounterValue: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkWaitSemaphores: {
        parameters: [
            "pointer",
            "buffer",
            "u64"
        ],
        result: "u32"
    },
    vkSignalSemaphore: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdDrawIndirectCount: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdDrawIndexedIndirectCount: {
        parameters: [
            "pointer",
            "pointer",
            "u64",
            "pointer",
            "u64",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkGetBufferOpaqueCaptureAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetBufferDeviceAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetDeviceMemoryOpaqueCaptureAddress: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "u64"
    },
    vkGetPhysicalDeviceToolProperties: {
        parameters: [
            "pointer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkCmdSetCullMode: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetFrontFace: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetPrimitiveTopology: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetViewportWithCount: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetScissorWithCount: {
        parameters: [
            "pointer",
            "u32",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBindVertexBuffers2: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "buffer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetDepthTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthWriteEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthCompareOp: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthBoundsTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilTestEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetStencilOp: {
        parameters: [
            "pointer",
            "u32",
            "u32",
            "u32",
            "u32",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetRasterizerDiscardEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetDepthBiasEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdSetPrimitiveRestartEnable: {
        parameters: [
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCreatePrivateDataSlot: {
        parameters: [
            "pointer",
            "buffer",
            "buffer",
            "buffer"
        ],
        result: "u32"
    },
    vkDestroyPrivateDataSlot: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkSetPrivateData: {
        parameters: [
            "pointer",
            "u32",
            "u64",
            "pointer",
            "u64"
        ],
        result: "u32"
    },
    vkGetPrivateData: {
        parameters: [
            "pointer",
            "u32",
            "u64",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyBuffer2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdBlitImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyBufferToImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdCopyImageToBuffer2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResolveImage2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdSetEvent2: {
        parameters: [
            "pointer",
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdResetEvent2: {
        parameters: [
            "pointer",
            "pointer",
            "u64"
        ],
        result: "void"
    },
    vkCmdWaitEvents2: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdPipelineBarrier2: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkQueueSubmit2: {
        parameters: [
            "pointer",
            "u32",
            "buffer",
            "pointer"
        ],
        result: "u32"
    },
    vkCmdWriteTimestamp2: {
        parameters: [
            "pointer",
            "u64",
            "pointer",
            "u32"
        ],
        result: "void"
    },
    vkCmdBeginRendering: {
        parameters: [
            "pointer",
            "buffer"
        ],
        result: "void"
    },
    vkCmdEndRendering: {
        parameters: [
            "pointer"
        ],
        result: "void"
    }
}).symbols;
export class VkError extends Error {
    constructor(code){
        super(`Vulkan error: ${code} (${VkResult[code]})`), this.code = code;
    }
}
export function vkCreateInstance(pCreateInfo, pAllocator, pInstance) {
    let ret = lib.vkCreateInstance(null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pInstance ? null : pInstance instanceof Uint8Array ? pInstance : pInstance[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyInstance(instance, pAllocator) {
    lib.vkDestroyInstance(instance, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) {
    let ret = lib.vkEnumeratePhysicalDevices(instance, null === pPhysicalDeviceCount ? null : pPhysicalDeviceCount instanceof Uint8Array ? pPhysicalDeviceCount : pPhysicalDeviceCount[BUFFER], null === pPhysicalDevices ? null : pPhysicalDevices instanceof Uint8Array ? pPhysicalDevices : pPhysicalDevices[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkGetDeviceProcAddr(device, pName) {
    let ret = lib.vkGetDeviceProcAddr(device, null === pName ? null : pName instanceof Uint8Array ? pName : pName[BUFFER]);
    return ret;
}
export function vkGetInstanceProcAddr(instance, pName) {
    let ret = lib.vkGetInstanceProcAddr(instance, null === pName ? null : pName instanceof Uint8Array ? pName : pName[BUFFER]);
    return ret;
}
export function vkGetPhysicalDeviceProperties(physicalDevice, pProperties) {
    lib.vkGetPhysicalDeviceProperties(physicalDevice, null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
}
export function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) {
    lib.vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, null === pQueueFamilyPropertyCount ? null : pQueueFamilyPropertyCount instanceof Uint8Array ? pQueueFamilyPropertyCount : pQueueFamilyPropertyCount[BUFFER], null === pQueueFamilyProperties ? null : pQueueFamilyProperties instanceof Uint8Array ? pQueueFamilyProperties : pQueueFamilyProperties[BUFFER]);
}
export function vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties) {
    lib.vkGetPhysicalDeviceMemoryProperties(physicalDevice, null === pMemoryProperties ? null : pMemoryProperties instanceof Uint8Array ? pMemoryProperties : pMemoryProperties[BUFFER]);
}
export function vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures) {
    lib.vkGetPhysicalDeviceFeatures(physicalDevice, null === pFeatures ? null : pFeatures instanceof Uint8Array ? pFeatures : pFeatures[BUFFER]);
}
export function vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties) {
    lib.vkGetPhysicalDeviceFormatProperties(physicalDevice, format, null === pFormatProperties ? null : pFormatProperties instanceof Uint8Array ? pFormatProperties : pFormatProperties[BUFFER]);
}
export function vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) {
    let ret = lib.vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, null === pImageFormatProperties ? null : pImageFormatProperties instanceof Uint8Array ? pImageFormatProperties : pImageFormatProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice) {
    let ret = lib.vkCreateDevice(physicalDevice, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pDevice ? null : pDevice instanceof Uint8Array ? pDevice : pDevice[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyDevice(device, pAllocator) {
    lib.vkDestroyDevice(device, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkEnumerateInstanceVersion(pApiVersion) {
    let ret = lib.vkEnumerateInstanceVersion(null === pApiVersion ? null : pApiVersion instanceof Uint8Array ? pApiVersion : pApiVersion[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateInstanceLayerProperties(null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateInstanceExtensionProperties(null === pLayerName ? null : pLayerName instanceof Uint8Array ? pLayerName : pLayerName[BUFFER], null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateDeviceLayerProperties(physicalDevice, null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties) {
    let ret = lib.vkEnumerateDeviceExtensionProperties(physicalDevice, null === pLayerName ? null : pLayerName instanceof Uint8Array ? pLayerName : pLayerName[BUFFER], null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue) {
    lib.vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, null === pQueue ? null : pQueue instanceof Uint8Array ? pQueue : pQueue[BUFFER]);
}
export function vkQueueSubmit(queue, submitCount, pSubmits, fence) {
    let ret = lib.vkQueueSubmit(queue, submitCount, null === pSubmits ? null : pSubmits instanceof Uint8Array ? pSubmits : pSubmits[BUFFER], fence);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkQueueWaitIdle(queue) {
    let ret = lib.vkQueueWaitIdle(queue);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDeviceWaitIdle(device) {
    let ret = lib.vkDeviceWaitIdle(device);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory) {
    let ret = lib.vkAllocateMemory(device, null === pAllocateInfo ? null : pAllocateInfo instanceof Uint8Array ? pAllocateInfo : pAllocateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pMemory ? null : pMemory instanceof Uint8Array ? pMemory : pMemory[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkFreeMemory(device, memory, pAllocator) {
    lib.vkFreeMemory(device, memory, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkMapMemory(device, memory, offset, size, flags, ppData) {
    let ret = lib.vkMapMemory(device, memory, offset, size, flags, null === ppData ? null : ppData instanceof Uint8Array ? ppData : ppData[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkUnmapMemory(device, memory) {
    lib.vkUnmapMemory(device, memory);
}
export function vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) {
    let ret = lib.vkFlushMappedMemoryRanges(device, memoryRangeCount, null === pMemoryRanges ? null : pMemoryRanges instanceof Uint8Array ? pMemoryRanges : pMemoryRanges[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges) {
    let ret = lib.vkInvalidateMappedMemoryRanges(device, memoryRangeCount, null === pMemoryRanges ? null : pMemoryRanges instanceof Uint8Array ? pMemoryRanges : pMemoryRanges[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes) {
    lib.vkGetDeviceMemoryCommitment(device, memory, null === pCommittedMemoryInBytes ? null : pCommittedMemoryInBytes instanceof Uint8Array ? pCommittedMemoryInBytes : pCommittedMemoryInBytes[BUFFER]);
}
export function vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements) {
    lib.vkGetBufferMemoryRequirements(device, buffer, null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkBindBufferMemory(device, buffer, memory, memoryOffset) {
    let ret = lib.vkBindBufferMemory(device, buffer, memory, memoryOffset);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetImageMemoryRequirements(device, image, pMemoryRequirements) {
    lib.vkGetImageMemoryRequirements(device, image, null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkBindImageMemory(device, image, memory, memoryOffset) {
    let ret = lib.vkBindImageMemory(device, image, memory, memoryOffset);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetImageSparseMemoryRequirements(device, image, null === pSparseMemoryRequirementCount ? null : pSparseMemoryRequirementCount instanceof Uint8Array ? pSparseMemoryRequirementCount : pSparseMemoryRequirementCount[BUFFER], null === pSparseMemoryRequirements ? null : pSparseMemoryRequirements instanceof Uint8Array ? pSparseMemoryRequirements : pSparseMemoryRequirements[BUFFER]);
}
export function vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties) {
    lib.vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
}
export function vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence) {
    let ret = lib.vkQueueBindSparse(queue, bindInfoCount, null === pBindInfo ? null : pBindInfo instanceof Uint8Array ? pBindInfo : pBindInfo[BUFFER], fence);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCreateFence(device, pCreateInfo, pAllocator, pFence) {
    let ret = lib.vkCreateFence(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pFence ? null : pFence instanceof Uint8Array ? pFence : pFence[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyFence(device, fence, pAllocator) {
    lib.vkDestroyFence(device, fence, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkResetFences(device, fenceCount, pFences) {
    let ret = lib.vkResetFences(device, fenceCount, null === pFences ? null : pFences instanceof Uint8Array ? pFences : pFences[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetFenceStatus(device, fence) {
    let ret = lib.vkGetFenceStatus(device, fence);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_NOT_READY) return ret;
    throw new VkError(ret);
}
export function vkWaitForFences(device, fenceCount, pFences, waitAll, timeout) {
    let ret = lib.vkWaitForFences(device, fenceCount, null === pFences ? null : pFences instanceof Uint8Array ? pFences : pFences[BUFFER], waitAll, timeout);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_TIMEOUT) return ret;
    throw new VkError(ret);
}
export function vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore) {
    let ret = lib.vkCreateSemaphore(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pSemaphore ? null : pSemaphore instanceof Uint8Array ? pSemaphore : pSemaphore[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroySemaphore(device, semaphore, pAllocator) {
    lib.vkDestroySemaphore(device, semaphore, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateEvent(device, pCreateInfo, pAllocator, pEvent) {
    let ret = lib.vkCreateEvent(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pEvent ? null : pEvent instanceof Uint8Array ? pEvent : pEvent[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyEvent(device, event, pAllocator) {
    lib.vkDestroyEvent(device, event, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetEventStatus(device, event) {
    let ret = lib.vkGetEventStatus(device, event);
    if (ret === VkResult.VK_EVENT_SET || ret === VkResult.VK_EVENT_RESET) return ret;
    throw new VkError(ret);
}
export function vkSetEvent(device, event) {
    let ret = lib.vkSetEvent(device, event);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkResetEvent(device, event) {
    let ret = lib.vkResetEvent(device, event);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool) {
    let ret = lib.vkCreateQueryPool(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pQueryPool ? null : pQueryPool instanceof Uint8Array ? pQueryPool : pQueryPool[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyQueryPool(device, queryPool, pAllocator) {
    lib.vkDestroyQueryPool(device, queryPool, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags) {
    let ret = lib.vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, null === pData ? null : pData instanceof Uint8Array ? pData : pData[BUFFER], stride, flags);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_NOT_READY) return ret;
    throw new VkError(ret);
}
export function vkResetQueryPool(device, queryPool, firstQuery, queryCount) {
    lib.vkResetQueryPool(device, queryPool, firstQuery, queryCount);
}
export function vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer) {
    let ret = lib.vkCreateBuffer(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pBuffer ? null : pBuffer instanceof Uint8Array ? pBuffer : pBuffer[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyBuffer(device, buffer, pAllocator) {
    lib.vkDestroyBuffer(device, buffer, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateBufferView(device, pCreateInfo, pAllocator, pView) {
    let ret = lib.vkCreateBufferView(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pView ? null : pView instanceof Uint8Array ? pView : pView[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyBufferView(device, bufferView, pAllocator) {
    lib.vkDestroyBufferView(device, bufferView, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateImage(device, pCreateInfo, pAllocator, pImage) {
    let ret = lib.vkCreateImage(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pImage ? null : pImage instanceof Uint8Array ? pImage : pImage[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyImage(device, image, pAllocator) {
    lib.vkDestroyImage(device, image, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetImageSubresourceLayout(device, image, pSubresource, pLayout) {
    lib.vkGetImageSubresourceLayout(device, image, null === pSubresource ? null : pSubresource instanceof Uint8Array ? pSubresource : pSubresource[BUFFER], null === pLayout ? null : pLayout instanceof Uint8Array ? pLayout : pLayout[BUFFER]);
}
export function vkCreateImageView(device, pCreateInfo, pAllocator, pView) {
    let ret = lib.vkCreateImageView(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pView ? null : pView instanceof Uint8Array ? pView : pView[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyImageView(device, imageView, pAllocator) {
    lib.vkDestroyImageView(device, imageView, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule) {
    let ret = lib.vkCreateShaderModule(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pShaderModule ? null : pShaderModule instanceof Uint8Array ? pShaderModule : pShaderModule[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyShaderModule(device, shaderModule, pAllocator) {
    lib.vkDestroyShaderModule(device, shaderModule, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache) {
    let ret = lib.vkCreatePipelineCache(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pPipelineCache ? null : pPipelineCache instanceof Uint8Array ? pPipelineCache : pPipelineCache[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyPipelineCache(device, pipelineCache, pAllocator) {
    lib.vkDestroyPipelineCache(device, pipelineCache, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData) {
    let ret = lib.vkGetPipelineCacheData(device, pipelineCache, null === pDataSize ? null : pDataSize instanceof Uint8Array ? pDataSize : pDataSize[BUFFER], null === pData ? null : pData instanceof Uint8Array ? pData : pData[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches) {
    let ret = lib.vkMergePipelineCaches(device, dstCache, srcCacheCount, null === pSrcCaches ? null : pSrcCaches instanceof Uint8Array ? pSrcCaches : pSrcCaches[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) {
    let ret = lib.vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, null === pCreateInfos ? null : pCreateInfos instanceof Uint8Array ? pCreateInfos : pCreateInfos[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pPipelines ? null : pPipelines instanceof Uint8Array ? pPipelines : pPipelines[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT) return ret;
    throw new VkError(ret);
}
export function vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) {
    let ret = lib.vkCreateComputePipelines(device, pipelineCache, createInfoCount, null === pCreateInfos ? null : pCreateInfos instanceof Uint8Array ? pCreateInfos : pCreateInfos[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pPipelines ? null : pPipelines instanceof Uint8Array ? pPipelines : pPipelines[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT) return ret;
    throw new VkError(ret);
}
export function vkDestroyPipeline(device, pipeline, pAllocator) {
    lib.vkDestroyPipeline(device, pipeline, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout) {
    let ret = lib.vkCreatePipelineLayout(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pPipelineLayout ? null : pPipelineLayout instanceof Uint8Array ? pPipelineLayout : pPipelineLayout[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyPipelineLayout(device, pipelineLayout, pAllocator) {
    lib.vkDestroyPipelineLayout(device, pipelineLayout, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateSampler(device, pCreateInfo, pAllocator, pSampler) {
    let ret = lib.vkCreateSampler(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pSampler ? null : pSampler instanceof Uint8Array ? pSampler : pSampler[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroySampler(device, sampler, pAllocator) {
    lib.vkDestroySampler(device, sampler, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout) {
    let ret = lib.vkCreateDescriptorSetLayout(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pSetLayout ? null : pSetLayout instanceof Uint8Array ? pSetLayout : pSetLayout[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator) {
    lib.vkDestroyDescriptorSetLayout(device, descriptorSetLayout, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool) {
    let ret = lib.vkCreateDescriptorPool(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pDescriptorPool ? null : pDescriptorPool instanceof Uint8Array ? pDescriptorPool : pDescriptorPool[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyDescriptorPool(device, descriptorPool, pAllocator) {
    lib.vkDestroyDescriptorPool(device, descriptorPool, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkResetDescriptorPool(device, descriptorPool, flags) {
    let ret = lib.vkResetDescriptorPool(device, descriptorPool, flags);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets) {
    let ret = lib.vkAllocateDescriptorSets(device, null === pAllocateInfo ? null : pAllocateInfo instanceof Uint8Array ? pAllocateInfo : pAllocateInfo[BUFFER], null === pDescriptorSets ? null : pDescriptorSets instanceof Uint8Array ? pDescriptorSets : pDescriptorSets[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets) {
    let ret = lib.vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, null === pDescriptorSets ? null : pDescriptorSets instanceof Uint8Array ? pDescriptorSets : pDescriptorSets[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) {
    lib.vkUpdateDescriptorSets(device, descriptorWriteCount, null === pDescriptorWrites ? null : pDescriptorWrites instanceof Uint8Array ? pDescriptorWrites : pDescriptorWrites[BUFFER], descriptorCopyCount, null === pDescriptorCopies ? null : pDescriptorCopies instanceof Uint8Array ? pDescriptorCopies : pDescriptorCopies[BUFFER]);
}
export function vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer) {
    let ret = lib.vkCreateFramebuffer(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pFramebuffer ? null : pFramebuffer instanceof Uint8Array ? pFramebuffer : pFramebuffer[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyFramebuffer(device, framebuffer, pAllocator) {
    lib.vkDestroyFramebuffer(device, framebuffer, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass) {
    let ret = lib.vkCreateRenderPass(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pRenderPass ? null : pRenderPass instanceof Uint8Array ? pRenderPass : pRenderPass[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyRenderPass(device, renderPass, pAllocator) {
    lib.vkDestroyRenderPass(device, renderPass, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetRenderAreaGranularity(device, renderPass, pGranularity) {
    lib.vkGetRenderAreaGranularity(device, renderPass, null === pGranularity ? null : pGranularity instanceof Uint8Array ? pGranularity : pGranularity[BUFFER]);
}
export function vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool) {
    let ret = lib.vkCreateCommandPool(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pCommandPool ? null : pCommandPool instanceof Uint8Array ? pCommandPool : pCommandPool[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyCommandPool(device, commandPool, pAllocator) {
    lib.vkDestroyCommandPool(device, commandPool, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkResetCommandPool(device, commandPool, flags) {
    let ret = lib.vkResetCommandPool(device, commandPool, flags);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers) {
    let ret = lib.vkAllocateCommandBuffers(device, null === pAllocateInfo ? null : pAllocateInfo instanceof Uint8Array ? pAllocateInfo : pAllocateInfo[BUFFER], null === pCommandBuffers ? null : pCommandBuffers instanceof Uint8Array ? pCommandBuffers : pCommandBuffers[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers) {
    lib.vkFreeCommandBuffers(device, commandPool, commandBufferCount, null === pCommandBuffers ? null : pCommandBuffers instanceof Uint8Array ? pCommandBuffers : pCommandBuffers[BUFFER]);
}
export function vkBeginCommandBuffer(commandBuffer, pBeginInfo) {
    let ret = lib.vkBeginCommandBuffer(commandBuffer, null === pBeginInfo ? null : pBeginInfo instanceof Uint8Array ? pBeginInfo : pBeginInfo[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkEndCommandBuffer(commandBuffer) {
    let ret = lib.vkEndCommandBuffer(commandBuffer);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkResetCommandBuffer(commandBuffer, flags) {
    let ret = lib.vkResetCommandBuffer(commandBuffer, flags);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline) {
    lib.vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}
export function vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports) {
    lib.vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, null === pViewports ? null : pViewports instanceof Uint8Array ? pViewports : pViewports[BUFFER]);
}
export function vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors) {
    lib.vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, null === pScissors ? null : pScissors instanceof Uint8Array ? pScissors : pScissors[BUFFER]);
}
export function vkCmdSetLineWidth(commandBuffer, lineWidth) {
    lib.vkCmdSetLineWidth(commandBuffer, lineWidth);
}
export function vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
    lib.vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
export function vkCmdSetBlendConstants(commandBuffer, blendConstants) {
    lib.vkCmdSetBlendConstants(commandBuffer, blendConstants);
}
export function vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds) {
    lib.vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}
export function vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask) {
    lib.vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}
export function vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask) {
    lib.vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}
export function vkCmdSetStencilReference(commandBuffer, faceMask, reference) {
    lib.vkCmdSetStencilReference(commandBuffer, faceMask, reference);
}
export function vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) {
    lib.vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, null === pDescriptorSets ? null : pDescriptorSets instanceof Uint8Array ? pDescriptorSets : pDescriptorSets[BUFFER], dynamicOffsetCount, null === pDynamicOffsets ? null : pDynamicOffsets instanceof Uint8Array ? pDynamicOffsets : pDynamicOffsets[BUFFER]);
}
export function vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType) {
    lib.vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}
export function vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) {
    lib.vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, null === pBuffers ? null : pBuffers instanceof Uint8Array ? pBuffers : pBuffers[BUFFER], null === pOffsets ? null : pOffsets instanceof Uint8Array ? pOffsets : pOffsets[BUFFER]);
}
export function vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) {
    lib.vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
export function vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) {
    lib.vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
export function vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride) {
    lib.vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
export function vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride) {
    lib.vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
export function vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ) {
    lib.vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}
export function vkCmdDispatchIndirect(commandBuffer, buffer, offset) {
    lib.vkCmdDispatchIndirect(commandBuffer, buffer, offset);
}
export function vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) {
    lib.vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER]);
}
export function vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER]);
}
export function vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) {
    lib.vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER], filter);
}
export function vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER]);
}
export function vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) {
    lib.vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER]);
}
export function vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData) {
    lib.vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, null === pData ? null : pData instanceof Uint8Array ? pData : pData[BUFFER]);
}
export function vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data) {
    lib.vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}
export function vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges) {
    lib.vkCmdClearColorImage(commandBuffer, image, imageLayout, null === pColor ? null : pColor instanceof Uint8Array ? pColor : pColor[BUFFER], rangeCount, null === pRanges ? null : pRanges instanceof Uint8Array ? pRanges : pRanges[BUFFER]);
}
export function vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges) {
    lib.vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, null === pDepthStencil ? null : pDepthStencil instanceof Uint8Array ? pDepthStencil : pDepthStencil[BUFFER], rangeCount, null === pRanges ? null : pRanges instanceof Uint8Array ? pRanges : pRanges[BUFFER]);
}
export function vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects) {
    lib.vkCmdClearAttachments(commandBuffer, attachmentCount, null === pAttachments ? null : pAttachments instanceof Uint8Array ? pAttachments : pAttachments[BUFFER], rectCount, null === pRects ? null : pRects instanceof Uint8Array ? pRects : pRects[BUFFER]);
}
export function vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) {
    lib.vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, null === pRegions ? null : pRegions instanceof Uint8Array ? pRegions : pRegions[BUFFER]);
}
export function vkCmdSetEvent(commandBuffer, event, stageMask) {
    lib.vkCmdSetEvent(commandBuffer, event, stageMask);
}
export function vkCmdResetEvent(commandBuffer, event, stageMask) {
    lib.vkCmdResetEvent(commandBuffer, event, stageMask);
}
export function vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) {
    lib.vkCmdWaitEvents(commandBuffer, eventCount, null === pEvents ? null : pEvents instanceof Uint8Array ? pEvents : pEvents[BUFFER], srcStageMask, dstStageMask, memoryBarrierCount, null === pMemoryBarriers ? null : pMemoryBarriers instanceof Uint8Array ? pMemoryBarriers : pMemoryBarriers[BUFFER], bufferMemoryBarrierCount, null === pBufferMemoryBarriers ? null : pBufferMemoryBarriers instanceof Uint8Array ? pBufferMemoryBarriers : pBufferMemoryBarriers[BUFFER], imageMemoryBarrierCount, null === pImageMemoryBarriers ? null : pImageMemoryBarriers instanceof Uint8Array ? pImageMemoryBarriers : pImageMemoryBarriers[BUFFER]);
}
export function vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) {
    lib.vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, null === pMemoryBarriers ? null : pMemoryBarriers instanceof Uint8Array ? pMemoryBarriers : pMemoryBarriers[BUFFER], bufferMemoryBarrierCount, null === pBufferMemoryBarriers ? null : pBufferMemoryBarriers instanceof Uint8Array ? pBufferMemoryBarriers : pBufferMemoryBarriers[BUFFER], imageMemoryBarrierCount, null === pImageMemoryBarriers ? null : pImageMemoryBarriers instanceof Uint8Array ? pImageMemoryBarriers : pImageMemoryBarriers[BUFFER]);
}
export function vkCmdBeginQuery(commandBuffer, queryPool, query, flags) {
    lib.vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
}
export function vkCmdEndQuery(commandBuffer, queryPool, query) {
    lib.vkCmdEndQuery(commandBuffer, queryPool, query);
}
export function vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount) {
    lib.vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}
export function vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query) {
    lib.vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}
export function vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) {
    lib.vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
export function vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues) {
    lib.vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, null === pValues ? null : pValues instanceof Uint8Array ? pValues : pValues[BUFFER]);
}
export function vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents) {
    lib.vkCmdBeginRenderPass(commandBuffer, null === pRenderPassBegin ? null : pRenderPassBegin instanceof Uint8Array ? pRenderPassBegin : pRenderPassBegin[BUFFER], contents);
}
export function vkCmdNextSubpass(commandBuffer, contents) {
    lib.vkCmdNextSubpass(commandBuffer, contents);
}
export function vkCmdEndRenderPass(commandBuffer) {
    lib.vkCmdEndRenderPass(commandBuffer);
}
export function vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers) {
    lib.vkCmdExecuteCommands(commandBuffer, commandBufferCount, null === pCommandBuffers ? null : pCommandBuffers instanceof Uint8Array ? pCommandBuffers : pCommandBuffers[BUFFER]);
}
export function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported) {
    let ret = lib.vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, null === pSupported ? null : pSupported instanceof Uint8Array ? pSupported : pSupported[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities) {
    let ret = lib.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, null === pSurfaceCapabilities ? null : pSurfaceCapabilities instanceof Uint8Array ? pSurfaceCapabilities : pSurfaceCapabilities[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) {
    let ret = lib.vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, null === pSurfaceFormatCount ? null : pSurfaceFormatCount instanceof Uint8Array ? pSurfaceFormatCount : pSurfaceFormatCount[BUFFER], null === pSurfaceFormats ? null : pSurfaceFormats instanceof Uint8Array ? pSurfaceFormats : pSurfaceFormats[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes) {
    let ret = lib.vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, null === pPresentModeCount ? null : pPresentModeCount instanceof Uint8Array ? pPresentModeCount : pPresentModeCount[BUFFER], null === pPresentModes ? null : pPresentModes instanceof Uint8Array ? pPresentModes : pPresentModes[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain) {
    let ret = lib.vkCreateSwapchainKHR(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pSwapchain ? null : pSwapchain instanceof Uint8Array ? pSwapchain : pSwapchain[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroySwapchainKHR(device, swapchain, pAllocator) {
    lib.vkDestroySwapchainKHR(device, swapchain, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages) {
    let ret = lib.vkGetSwapchainImagesKHR(device, swapchain, null === pSwapchainImageCount ? null : pSwapchainImageCount instanceof Uint8Array ? pSwapchainImageCount : pSwapchainImageCount[BUFFER], null === pSwapchainImages ? null : pSwapchainImages instanceof Uint8Array ? pSwapchainImages : pSwapchainImages[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex) {
    let ret = lib.vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, null === pImageIndex ? null : pImageIndex instanceof Uint8Array ? pImageIndex : pImageIndex[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_TIMEOUT || ret === VkResult.VK_NOT_READY || ret === VkResult.VK_SUBOPTIMAL_KHR) return ret;
    throw new VkError(ret);
}
export function vkQueuePresentKHR(queue, pPresentInfo) {
    let ret = lib.vkQueuePresentKHR(queue, null === pPresentInfo ? null : pPresentInfo instanceof Uint8Array ? pPresentInfo : pPresentInfo[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_SUBOPTIMAL_KHR) return ret;
    throw new VkError(ret);
}
export function vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures) {
    lib.vkGetPhysicalDeviceFeatures2(physicalDevice, null === pFeatures ? null : pFeatures instanceof Uint8Array ? pFeatures : pFeatures[BUFFER]);
}
export function vkGetPhysicalDeviceProperties2(physicalDevice, pProperties) {
    lib.vkGetPhysicalDeviceProperties2(physicalDevice, null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
}
export function vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties) {
    lib.vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, null === pFormatProperties ? null : pFormatProperties instanceof Uint8Array ? pFormatProperties : pFormatProperties[BUFFER]);
}
export function vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties) {
    let ret = lib.vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, null === pImageFormatInfo ? null : pImageFormatInfo instanceof Uint8Array ? pImageFormatInfo : pImageFormatInfo[BUFFER], null === pImageFormatProperties ? null : pImageFormatProperties instanceof Uint8Array ? pImageFormatProperties : pImageFormatProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) {
    lib.vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, null === pQueueFamilyPropertyCount ? null : pQueueFamilyPropertyCount instanceof Uint8Array ? pQueueFamilyPropertyCount : pQueueFamilyPropertyCount[BUFFER], null === pQueueFamilyProperties ? null : pQueueFamilyProperties instanceof Uint8Array ? pQueueFamilyProperties : pQueueFamilyProperties[BUFFER]);
}
export function vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties) {
    lib.vkGetPhysicalDeviceMemoryProperties2(physicalDevice, null === pMemoryProperties ? null : pMemoryProperties instanceof Uint8Array ? pMemoryProperties : pMemoryProperties[BUFFER]);
}
export function vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties) {
    lib.vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, null === pFormatInfo ? null : pFormatInfo instanceof Uint8Array ? pFormatInfo : pFormatInfo[BUFFER], null === pPropertyCount ? null : pPropertyCount instanceof Uint8Array ? pPropertyCount : pPropertyCount[BUFFER], null === pProperties ? null : pProperties instanceof Uint8Array ? pProperties : pProperties[BUFFER]);
}
export function vkTrimCommandPool(device, commandPool, flags) {
    lib.vkTrimCommandPool(device, commandPool, flags);
}
export function vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties) {
    lib.vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, null === pExternalBufferInfo ? null : pExternalBufferInfo instanceof Uint8Array ? pExternalBufferInfo : pExternalBufferInfo[BUFFER], null === pExternalBufferProperties ? null : pExternalBufferProperties instanceof Uint8Array ? pExternalBufferProperties : pExternalBufferProperties[BUFFER]);
}
export function vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) {
    lib.vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, null === pExternalSemaphoreInfo ? null : pExternalSemaphoreInfo instanceof Uint8Array ? pExternalSemaphoreInfo : pExternalSemaphoreInfo[BUFFER], null === pExternalSemaphoreProperties ? null : pExternalSemaphoreProperties instanceof Uint8Array ? pExternalSemaphoreProperties : pExternalSemaphoreProperties[BUFFER]);
}
export function vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties) {
    lib.vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, null === pExternalFenceInfo ? null : pExternalFenceInfo instanceof Uint8Array ? pExternalFenceInfo : pExternalFenceInfo[BUFFER], null === pExternalFenceProperties ? null : pExternalFenceProperties instanceof Uint8Array ? pExternalFenceProperties : pExternalFenceProperties[BUFFER]);
}
export function vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) {
    let ret = lib.vkEnumeratePhysicalDeviceGroups(instance, null === pPhysicalDeviceGroupCount ? null : pPhysicalDeviceGroupCount instanceof Uint8Array ? pPhysicalDeviceGroupCount : pPhysicalDeviceGroupCount[BUFFER], null === pPhysicalDeviceGroupProperties ? null : pPhysicalDeviceGroupProperties instanceof Uint8Array ? pPhysicalDeviceGroupProperties : pPhysicalDeviceGroupProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) {
    lib.vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, null === pPeerMemoryFeatures ? null : pPeerMemoryFeatures instanceof Uint8Array ? pPeerMemoryFeatures : pPeerMemoryFeatures[BUFFER]);
}
export function vkBindBufferMemory2(device, bindInfoCount, pBindInfos) {
    let ret = lib.vkBindBufferMemory2(device, bindInfoCount, null === pBindInfos ? null : pBindInfos instanceof Uint8Array ? pBindInfos : pBindInfos[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkBindImageMemory2(device, bindInfoCount, pBindInfos) {
    let ret = lib.vkBindImageMemory2(device, bindInfoCount, null === pBindInfos ? null : pBindInfos instanceof Uint8Array ? pBindInfos : pBindInfos[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCmdSetDeviceMask(commandBuffer, deviceMask) {
    lib.vkCmdSetDeviceMask(commandBuffer, deviceMask);
}
export function vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) {
    lib.vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
export function vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) {
    let ret = lib.vkCreateDescriptorUpdateTemplate(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pDescriptorUpdateTemplate ? null : pDescriptorUpdateTemplate instanceof Uint8Array ? pDescriptorUpdateTemplate : pDescriptorUpdateTemplate[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator) {
    lib.vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData) {
    lib.vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, null === pData ? null : pData instanceof Uint8Array ? pData : pData[BUFFER]);
}
export function vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements) {
    lib.vkGetBufferMemoryRequirements2(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements) {
    lib.vkGetImageMemoryRequirements2(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetImageSparseMemoryRequirements2(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pSparseMemoryRequirementCount ? null : pSparseMemoryRequirementCount instanceof Uint8Array ? pSparseMemoryRequirementCount : pSparseMemoryRequirementCount[BUFFER], null === pSparseMemoryRequirements ? null : pSparseMemoryRequirements instanceof Uint8Array ? pSparseMemoryRequirements : pSparseMemoryRequirements[BUFFER]);
}
export function vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements) {
    lib.vkGetDeviceBufferMemoryRequirements(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements) {
    lib.vkGetDeviceImageMemoryRequirements(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pMemoryRequirements ? null : pMemoryRequirements instanceof Uint8Array ? pMemoryRequirements : pMemoryRequirements[BUFFER]);
}
export function vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) {
    lib.vkGetDeviceImageSparseMemoryRequirements(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER], null === pSparseMemoryRequirementCount ? null : pSparseMemoryRequirementCount instanceof Uint8Array ? pSparseMemoryRequirementCount : pSparseMemoryRequirementCount[BUFFER], null === pSparseMemoryRequirements ? null : pSparseMemoryRequirements instanceof Uint8Array ? pSparseMemoryRequirements : pSparseMemoryRequirements[BUFFER]);
}
export function vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion) {
    let ret = lib.vkCreateSamplerYcbcrConversion(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pYcbcrConversion ? null : pYcbcrConversion instanceof Uint8Array ? pYcbcrConversion : pYcbcrConversion[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator) {
    lib.vkDestroySamplerYcbcrConversion(device, ycbcrConversion, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkGetDeviceQueue2(device, pQueueInfo, pQueue) {
    lib.vkGetDeviceQueue2(device, null === pQueueInfo ? null : pQueueInfo instanceof Uint8Array ? pQueueInfo : pQueueInfo[BUFFER], null === pQueue ? null : pQueue instanceof Uint8Array ? pQueue : pQueue[BUFFER]);
}
export function vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport) {
    lib.vkGetDescriptorSetLayoutSupport(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pSupport ? null : pSupport instanceof Uint8Array ? pSupport : pSupport[BUFFER]);
}
export function vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass) {
    let ret = lib.vkCreateRenderPass2(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pRenderPass ? null : pRenderPass instanceof Uint8Array ? pRenderPass : pRenderPass[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo) {
    lib.vkCmdBeginRenderPass2(commandBuffer, null === pRenderPassBegin ? null : pRenderPassBegin instanceof Uint8Array ? pRenderPassBegin : pRenderPassBegin[BUFFER], null === pSubpassBeginInfo ? null : pSubpassBeginInfo instanceof Uint8Array ? pSubpassBeginInfo : pSubpassBeginInfo[BUFFER]);
}
export function vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) {
    lib.vkCmdNextSubpass2(commandBuffer, null === pSubpassBeginInfo ? null : pSubpassBeginInfo instanceof Uint8Array ? pSubpassBeginInfo : pSubpassBeginInfo[BUFFER], null === pSubpassEndInfo ? null : pSubpassEndInfo instanceof Uint8Array ? pSubpassEndInfo : pSubpassEndInfo[BUFFER]);
}
export function vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo) {
    lib.vkCmdEndRenderPass2(commandBuffer, null === pSubpassEndInfo ? null : pSubpassEndInfo instanceof Uint8Array ? pSubpassEndInfo : pSubpassEndInfo[BUFFER]);
}
export function vkGetSemaphoreCounterValue(device, semaphore, pValue) {
    let ret = lib.vkGetSemaphoreCounterValue(device, semaphore, null === pValue ? null : pValue instanceof Uint8Array ? pValue : pValue[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkWaitSemaphores(device, pWaitInfo, timeout) {
    let ret = lib.vkWaitSemaphores(device, null === pWaitInfo ? null : pWaitInfo instanceof Uint8Array ? pWaitInfo : pWaitInfo[BUFFER], timeout);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_TIMEOUT) return ret;
    throw new VkError(ret);
}
export function vkSignalSemaphore(device, pSignalInfo) {
    let ret = lib.vkSignalSemaphore(device, null === pSignalInfo ? null : pSignalInfo instanceof Uint8Array ? pSignalInfo : pSignalInfo[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) {
    lib.vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
export function vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) {
    lib.vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
export function vkGetBufferOpaqueCaptureAddress(device, pInfo) {
    let ret = lib.vkGetBufferOpaqueCaptureAddress(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER]);
    return ret;
}
export function vkGetBufferDeviceAddress(device, pInfo) {
    let ret = lib.vkGetBufferDeviceAddress(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER]);
    return ret;
}
export function vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo) {
    let ret = lib.vkGetDeviceMemoryOpaqueCaptureAddress(device, null === pInfo ? null : pInfo instanceof Uint8Array ? pInfo : pInfo[BUFFER]);
    return ret;
}
export function vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties) {
    let ret = lib.vkGetPhysicalDeviceToolProperties(physicalDevice, null === pToolCount ? null : pToolCount instanceof Uint8Array ? pToolCount : pToolCount[BUFFER], null === pToolProperties ? null : pToolProperties instanceof Uint8Array ? pToolProperties : pToolProperties[BUFFER]);
    if (ret === VkResult.VK_SUCCESS || ret === VkResult.VK_INCOMPLETE) return ret;
    throw new VkError(ret);
}
export function vkCmdSetCullMode(commandBuffer, cullMode) {
    lib.vkCmdSetCullMode(commandBuffer, cullMode);
}
export function vkCmdSetFrontFace(commandBuffer, frontFace) {
    lib.vkCmdSetFrontFace(commandBuffer, frontFace);
}
export function vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology) {
    lib.vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
}
export function vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports) {
    lib.vkCmdSetViewportWithCount(commandBuffer, viewportCount, null === pViewports ? null : pViewports instanceof Uint8Array ? pViewports : pViewports[BUFFER]);
}
export function vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors) {
    lib.vkCmdSetScissorWithCount(commandBuffer, scissorCount, null === pScissors ? null : pScissors instanceof Uint8Array ? pScissors : pScissors[BUFFER]);
}
export function vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides) {
    lib.vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, null === pBuffers ? null : pBuffers instanceof Uint8Array ? pBuffers : pBuffers[BUFFER], null === pOffsets ? null : pOffsets instanceof Uint8Array ? pOffsets : pOffsets[BUFFER], null === pSizes ? null : pSizes instanceof Uint8Array ? pSizes : pSizes[BUFFER], null === pStrides ? null : pStrides instanceof Uint8Array ? pStrides : pStrides[BUFFER]);
}
export function vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable) {
    lib.vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
}
export function vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable) {
    lib.vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
}
export function vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp) {
    lib.vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
}
export function vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable) {
    lib.vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
}
export function vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable) {
    lib.vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
}
export function vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp) {
    lib.vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
export function vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable) {
    lib.vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
}
export function vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable) {
    lib.vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
}
export function vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable) {
    lib.vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
}
export function vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot) {
    let ret = lib.vkCreatePrivateDataSlot(device, null === pCreateInfo ? null : pCreateInfo instanceof Uint8Array ? pCreateInfo : pCreateInfo[BUFFER], null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER], null === pPrivateDataSlot ? null : pPrivateDataSlot instanceof Uint8Array ? pPrivateDataSlot : pPrivateDataSlot[BUFFER]);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator) {
    lib.vkDestroyPrivateDataSlot(device, privateDataSlot, null === pAllocator ? null : pAllocator instanceof Uint8Array ? pAllocator : pAllocator[BUFFER]);
}
export function vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data) {
    let ret = lib.vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData) {
    lib.vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, null === pData ? null : pData instanceof Uint8Array ? pData : pData[BUFFER]);
}
export function vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo) {
    lib.vkCmdCopyBuffer2(commandBuffer, null === pCopyBufferInfo ? null : pCopyBufferInfo instanceof Uint8Array ? pCopyBufferInfo : pCopyBufferInfo[BUFFER]);
}
export function vkCmdCopyImage2(commandBuffer, pCopyImageInfo) {
    lib.vkCmdCopyImage2(commandBuffer, null === pCopyImageInfo ? null : pCopyImageInfo instanceof Uint8Array ? pCopyImageInfo : pCopyImageInfo[BUFFER]);
}
export function vkCmdBlitImage2(commandBuffer, pBlitImageInfo) {
    lib.vkCmdBlitImage2(commandBuffer, null === pBlitImageInfo ? null : pBlitImageInfo instanceof Uint8Array ? pBlitImageInfo : pBlitImageInfo[BUFFER]);
}
export function vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo) {
    lib.vkCmdCopyBufferToImage2(commandBuffer, null === pCopyBufferToImageInfo ? null : pCopyBufferToImageInfo instanceof Uint8Array ? pCopyBufferToImageInfo : pCopyBufferToImageInfo[BUFFER]);
}
export function vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo) {
    lib.vkCmdCopyImageToBuffer2(commandBuffer, null === pCopyImageToBufferInfo ? null : pCopyImageToBufferInfo instanceof Uint8Array ? pCopyImageToBufferInfo : pCopyImageToBufferInfo[BUFFER]);
}
export function vkCmdResolveImage2(commandBuffer, pResolveImageInfo) {
    lib.vkCmdResolveImage2(commandBuffer, null === pResolveImageInfo ? null : pResolveImageInfo instanceof Uint8Array ? pResolveImageInfo : pResolveImageInfo[BUFFER]);
}
export function vkCmdSetEvent2(commandBuffer, event, pDependencyInfo) {
    lib.vkCmdSetEvent2(commandBuffer, event, null === pDependencyInfo ? null : pDependencyInfo instanceof Uint8Array ? pDependencyInfo : pDependencyInfo[BUFFER]);
}
export function vkCmdResetEvent2(commandBuffer, event, stageMask) {
    lib.vkCmdResetEvent2(commandBuffer, event, stageMask);
}
export function vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos) {
    lib.vkCmdWaitEvents2(commandBuffer, eventCount, null === pEvents ? null : pEvents instanceof Uint8Array ? pEvents : pEvents[BUFFER], null === pDependencyInfos ? null : pDependencyInfos instanceof Uint8Array ? pDependencyInfos : pDependencyInfos[BUFFER]);
}
export function vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo) {
    lib.vkCmdPipelineBarrier2(commandBuffer, null === pDependencyInfo ? null : pDependencyInfo instanceof Uint8Array ? pDependencyInfo : pDependencyInfo[BUFFER]);
}
export function vkQueueSubmit2(queue, submitCount, pSubmits, fence) {
    let ret = lib.vkQueueSubmit2(queue, submitCount, null === pSubmits ? null : pSubmits instanceof Uint8Array ? pSubmits : pSubmits[BUFFER], fence);
    if (ret === VkResult.VK_SUCCESS) return ret;
    throw new VkError(ret);
}
export function vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query) {
    lib.vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
}
export function vkCmdBeginRendering(commandBuffer, pRenderingInfo) {
    lib.vkCmdBeginRendering(commandBuffer, null === pRenderingInfo ? null : pRenderingInfo instanceof Uint8Array ? pRenderingInfo : pRenderingInfo[BUFFER]);
}
export function vkCmdEndRendering(commandBuffer) {
    lib.vkCmdEndRendering(commandBuffer);
}
