{
  "?xml": {
    "$version": 1,
    "$encoding": "UTF-8"
  },
  "registry": {
    "comment": [
      {
        "#text": "Copyright 2015-2022 The Khronos Group Inc.\n\nSPDX-License-Identifier: Apache-2.0 OR MIT"
      },
      {
        "#text": "This file, vk.xml, is the Vulkan API Registry. It is a critically important\nand normative part of the Vulkan Specification, including a canonical\nmachine-readable definition of the API, parameter and member validation\nlanguage incorporated into the Specification and reference pages, and other\nmaterial which is registered by Khronos, such as tags used by extension and\nlayer authors. The authoritative public version of vk.xml is maintained in\nthe default branch (currently named main) of the Khronos Vulkan GitHub\nproject. The authoritative private version is maintained in the default\nbranch of the member gitlab server."
      },
      {
        "#text": "Vulkan enumerant (token) definitions"
      },
      {
        "#text": "Unlike OpenGL, most tokens in Vulkan are actual typed enumerants in\n        their own numeric namespaces. The \"name\" attribute is the C enum\n        type name, and is pulled in from a type tag definition above\n        (slightly clunky, but retains the type / enum distinction). \"type\"\n        attributes of \"enum\" or \"bitmask\" indicate that these values should\n        be generated inside an appropriate definition."
      },
      {
        "#text": "Flags"
      },
      {
        "#text": "WSI Extensions"
      }
    ],
    "platforms": {
      "platform": [
        {
          "$name": "xlib",
          "$protect": "VK_USE_PLATFORM_XLIB_KHR",
          "$comment": "X Window System, Xlib client library"
        },
        {
          "$name": "xlib_xrandr",
          "$protect": "VK_USE_PLATFORM_XLIB_XRANDR_EXT",
          "$comment": "X Window System, Xlib client library, XRandR extension"
        },
        {
          "$name": "xcb",
          "$protect": "VK_USE_PLATFORM_XCB_KHR",
          "$comment": "X Window System, Xcb client library"
        },
        {
          "$name": "wayland",
          "$protect": "VK_USE_PLATFORM_WAYLAND_KHR",
          "$comment": "Wayland display server protocol"
        },
        {
          "$name": "directfb",
          "$protect": "VK_USE_PLATFORM_DIRECTFB_EXT",
          "$comment": "DirectFB library"
        },
        {
          "$name": "android",
          "$protect": "VK_USE_PLATFORM_ANDROID_KHR",
          "$comment": "Android OS"
        },
        {
          "$name": "win32",
          "$protect": "VK_USE_PLATFORM_WIN32_KHR",
          "$comment": "Microsoft Win32 API (also refers to Win64 apps)"
        },
        {
          "$name": "vi",
          "$protect": "VK_USE_PLATFORM_VI_NN",
          "$comment": "Nintendo Vi"
        },
        {
          "$name": "ios",
          "$protect": "VK_USE_PLATFORM_IOS_MVK",
          "$comment": "Apple IOS"
        },
        {
          "$name": "macos",
          "$protect": "VK_USE_PLATFORM_MACOS_MVK",
          "$comment": "Apple MacOS"
        },
        {
          "$name": "metal",
          "$protect": "VK_USE_PLATFORM_METAL_EXT",
          "$comment": "Metal on CoreAnimation on Apple platforms"
        },
        {
          "$name": "fuchsia",
          "$protect": "VK_USE_PLATFORM_FUCHSIA",
          "$comment": "Fuchsia"
        },
        {
          "$name": "ggp",
          "$protect": "VK_USE_PLATFORM_GGP",
          "$comment": "Google Games Platform"
        },
        {
          "$name": "provisional",
          "$protect": "VK_ENABLE_BETA_EXTENSIONS",
          "$comment": "Enable declarations for beta/provisional extensions"
        },
        {
          "$name": "screen",
          "$protect": "VK_USE_PLATFORM_SCREEN_QNX",
          "$comment": "QNX Screen Graphics Subsystem"
        }
      ],
      "$comment": "Vulkan platform names, reserved for use with platform- and window system-specific extensions"
    },
    "tags": {
      "tag": [
        {
          "$name": "IMG",
          "$author": "Imagination Technologies",
          "$contact": "Michael Worcester @michaelworcester"
        },
        {
          "$name": "AMD",
          "$author": "Advanced Micro Devices, Inc.",
          "$contact": "Daniel Rakos @drakos-amd"
        },
        {
          "$name": "AMDX",
          "$author": "Advanced Micro Devices, Inc.",
          "$contact": "Daniel Rakos @drakos-amd"
        },
        {
          "$name": "ARM",
          "$author": "ARM Limited",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm"
        },
        {
          "$name": "FSL",
          "$author": "Freescale Semiconductor, Inc.",
          "$contact": "Norbert Nopper @FslNopper"
        },
        {
          "$name": "BRCM",
          "$author": "Broadcom Corporation",
          "$contact": "Graeme Leese @gnl21"
        },
        {
          "$name": "NXP",
          "$author": "NXP Semiconductors N.V.",
          "$contact": "Norbert Nopper @FslNopper"
        },
        {
          "$name": "NV",
          "$author": "NVIDIA Corporation",
          "$contact": "Daniel Koch @dgkoch"
        },
        {
          "$name": "NVX",
          "$author": "NVIDIA Corporation",
          "$contact": "Daniel Koch @dgkoch"
        },
        {
          "$name": "VIV",
          "$author": "Vivante Corporation",
          "$contact": "Yanjun Zhang gitlab:@yanjunzhang"
        },
        {
          "$name": "VSI",
          "$author": "VeriSilicon Holdings Co., Ltd.",
          "$contact": "Yanjun Zhang gitlab:@yanjunzhang"
        },
        {
          "$name": "KDAB",
          "$author": "KDAB",
          "$contact": "Sean Harmer @seanharmer"
        },
        {
          "$name": "ANDROID",
          "$author": "Google LLC",
          "$contact": "Jesse Hall @critsec"
        },
        {
          "$name": "CHROMIUM",
          "$author": "Google LLC",
          "$contact": "Jesse Hall @critsec"
        },
        {
          "$name": "FUCHSIA",
          "$author": "Google LLC",
          "$contact": "Craig Stout @cdotstout, Jesse Hall @critsec, John Rosasco @rosasco"
        },
        {
          "$name": "GGP",
          "$author": "Google, LLC",
          "$contact": "Jean-Francois Roy @jfroy, Hai Nguyen @chaoticbob, Jesse Hall @critsec"
        },
        {
          "$name": "GOOGLE",
          "$author": "Google LLC",
          "$contact": "Jesse Hall @critsec"
        },
        {
          "$name": "QCOM",
          "$author": "Qualcomm Technologies, Inc.",
          "$contact": "Jeff Leger @jackohounhd"
        },
        {
          "$name": "LUNARG",
          "$author": "LunarG, Inc.",
          "$contact": "Karen Ghavam @karenghavam-lunarg"
        },
        {
          "$name": "NZXT",
          "$author": "NZXT Inc.",
          "$contact": "Jacob Kiesel @xaeroxe"
        },
        {
          "$name": "SAMSUNG",
          "$author": "Samsung Electronics Co., Ltd.",
          "$contact": "Alon Or-bach @alonorbach"
        },
        {
          "$name": "SEC",
          "$author": "Samsung Electronics Co., Ltd.",
          "$contact": "Alon Or-bach @alonorbach"
        },
        {
          "$name": "TIZEN",
          "$author": "Samsung Electronics Co., Ltd.",
          "$contact": "Alon Or-bach @alonorbach"
        },
        {
          "$name": "RENDERDOC",
          "$author": "RenderDoc (renderdoc.org)",
          "$contact": "Baldur Karlsson @baldurk"
        },
        {
          "$name": "NN",
          "$author": "Nintendo Co., Ltd.",
          "$contact": "Yasuhiro Yoshioka gitlab:@yoshioka_yasuhiro"
        },
        {
          "$name": "MVK",
          "$author": "The Brenwill Workshop Ltd.",
          "$contact": "Bill Hollings @billhollings"
        },
        {
          "$name": "KHR",
          "$author": "Khronos",
          "$contact": "Tom Olson @tomolson"
        },
        {
          "$name": "KHX",
          "$author": "Khronos",
          "$contact": "Tom Olson @tomolson"
        },
        {
          "$name": "EXT",
          "$author": "Multivendor",
          "$contact": "Jon Leech @oddhack"
        },
        {
          "$name": "MESA",
          "$author": "Mesa open source project",
          "$contact": "Chad Versace @chadversary, Daniel Stone @fooishbar, David Airlie @airlied, Jason Ekstrand @jekstrand"
        },
        {
          "$name": "INTEL",
          "$author": "Intel Corporation",
          "$contact": "Slawek Grajewski @sgrajewski"
        },
        {
          "$name": "HUAWEI",
          "$author": "Huawei Technologies Co. Ltd.",
          "$contact": "Pan Gao @PanGao-h, Juntao Li @Lawrenceleehw"
        },
        {
          "$name": "VALVE",
          "$author": "Valve Corporation",
          "$contact": "Pierre-Loup Griffais @plagman, Joshua Ashton @Joshua-Ashton, Hans-Kristian Arntzen @HansKristian-Work"
        },
        {
          "$name": "QNX",
          "$author": "BlackBerry Limited",
          "$contact": "Mike Gorchak @mgorchak-blackberry"
        },
        {
          "$name": "JUICE",
          "$author": "Juice Technologies, Inc.",
          "$contact": "David McCloskey @damcclos, Dean Beeler @canadacow"
        },
        {
          "$name": "FB",
          "$author": "Facebook, Inc",
          "$contact": "Artem Bolgar @artyom17"
        },
        {
          "$name": "RASTERGRID",
          "$author": "RasterGrid Kft.",
          "$contact": "Daniel Rakos @aqnuep1"
        }
      ],
      "$comment": "Vulkan vendor/author tags for extensions and layers"
    },
    "types": {
      "type": [
        {
          "#text": "#include <stdint.h>",
          "$name": "stdint",
          "$category": "include"
        },
        {
          "$name": "uint32_t",
          "$requires": "stdint"
        },
        {
          "$name": "uint16_t",
          "$requires": "stdint"
        },
        {
          "$name": "uint8_t",
          "$requires": "stdint"
        },
        {
          "$name": "int32_t",
          "$requires": "stdint"
        },
        {
          "$name": "int8_t",
          "$requires": "stdint"
        },
        {
          "name": {
            "#text": "VK_MAKE_VIDEO_STD_VERSION"
          },
          "#text": "#define(major, minor, patch) \\\n    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_0_9_8"
          },
          "type": {
            "#text": "VK_MAKE_VIDEO_STD_VERSION"
          },
          "#text": "// Vulkan 0.9 provisional Vulkan video H.264 decode std specification version number\n#define(0, 9, 8) // Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_VIDEO_STD_VERSION"
        },
        {
          "name": {
            "#text": "VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_0_9_8"
          },
          "type": {
            "#text": "VK_MAKE_VIDEO_STD_VERSION"
          },
          "#text": "// Vulkan 0.9 provisional Vulkan video H.264 encode std specification version number\n#define(0, 9, 8) // Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_VIDEO_STD_VERSION"
        },
        {
          "name": {
            "#text": "VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_0_9_9"
          },
          "type": {
            "#text": "VK_MAKE_VIDEO_STD_VERSION"
          },
          "#text": "// Vulkan 0.9 provisional Vulkan video H.265 decode std specification version number\n#define(0, 9, 9) // Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_VIDEO_STD_VERSION"
        },
        {
          "name": {
            "#text": "VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_0_9_9"
          },
          "type": {
            "#text": "VK_MAKE_VIDEO_STD_VERSION"
          },
          "#text": "// Vulkan 0.9 provisional Vulkan video H.265 encode std specification version number\n#define(0, 9, 9) // Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_VIDEO_STD_VERSION"
        },
        {
          "$name": "StdVideoH264ChromaFormatIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264ProfileIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264LevelIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264PocType",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264AspectRatioIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264WeightedBipredIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264ModificationOfPicNumsIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264MemMgmtControlOp",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264CabacInitIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264DisableDeblockingFilterIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264SliceType",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264PictureType",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH264NonVclNaluType",
          "$category": "enum"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "aspect_ratio_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "overscan_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "overscan_appropriate_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "video_signal_type_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "video_full_range_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "color_description_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "chroma_loc_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "timing_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fixed_frame_rate_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bitstream_restriction_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "nal_hrd_parameters_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vcl_hrd_parameters_present_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264SpsVuiFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cpb_cnt_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_rate_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cpb_size_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bit_rate_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_CPB_CNT_LIST_SIZE"
              },
              "comment": {
                "#text": "cpb_cnt_minus1 number of valid elements"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cpb_size_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_CPB_CNT_LIST_SIZE"
              },
              "comment": {
                "#text": "cpb_cnt_minus1 number of valid elements"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cbr_flag"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_CPB_CNT_LIST_SIZE"
              },
              "comment": {
                "#text": "cpb_cnt_minus1 number of valid elements"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "initial_cpb_removal_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cpb_removal_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dpb_output_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "time_offset_length"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264HrdParameters",
          "$comment": "hrd_parameters"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH264SpsVuiFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264AspectRatioIdc"
              },
              "name": {
                "#text": "aspect_ratio_idc"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "sar_width"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "sar_height"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "video_format"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "colour_primaries"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "transfer_characteristics"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "matrix_coefficients"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "num_units_in_tick"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "time_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_num_reorder_frames"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_dec_frame_buffering"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_sample_loc_type_top_field"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_sample_loc_type_bottom_field"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "StdVideoH264HrdParameters"
              },
              "name": {
                "#text": "pHrdParameters"
              },
              "comment": {
                "#text": "must be a valid ptr to hrd_parameters, if nal_hrd_parameters_present_flag or vcl_hrd_parameters_present_flag are set"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264SequenceParameterSetVui"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set0_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set1_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set2_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set3_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set4_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constraint_set5_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "direct_8x8_inference_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mb_adaptive_frame_field_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_mbs_only_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "delta_pic_order_always_zero_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "separate_colour_plane_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gaps_in_frame_num_value_allowed_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "qpprime_y_zero_transform_bypass_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_cropping_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "seq_scaling_matrix_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_parameters_present_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264SpsFlags"
        },
        {
          "comment": [
            {
              "#text": "scaling_list_present_mask has one bit for each\n                seq_scaling_list_present_flag[i] for SPS OR\n                pic_scaling_list_present_flag[i] for PPS,\n                bit 0 - 5 are for each entry of ScalingList4x4\n                bit 6 - 11 are for each entry plus 6 for ScalingList8x8"
            },
            {
              "#text": "use_default_scaling_matrix_mask has one bit for each\n                UseDefaultScalingMatrix4x4Flag[ i ] and\n                UseDefaultScalingMatrix8x8Flag[ i - 6 ] for SPS OR PPS\n                bit 0 - 5 are for each entry of ScalingList4x4\n                bit 6 - 11 are for each entry plus 6 for ScalingList8x8"
            }
          ],
          "member": [
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "scaling_list_present_mask"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "use_default_scaling_matrix_mask"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList4x4"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS"
                }
              ],
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList8x8"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS"
                }
              ],
              "#text": "[][]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264ScalingLists"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH264SpsFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264ProfileIdc"
              },
              "name": {
                "#text": "profile_idc"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264LevelIdc"
              },
              "name": {
                "#text": "level_idc"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264ChromaFormatIdc"
              },
              "name": {
                "#text": "chroma_format_idc"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "seq_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_depth_luma_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_depth_chroma_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_frame_num_minus4"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264PocType"
              },
              "name": {
                "#text": "pic_order_cnt_type"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "offset_for_non_ref_pic"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "offset_for_top_to_bottom_field"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_pic_order_cnt_lsb_minus4"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_frames_in_pic_order_cnt_cycle"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_num_ref_frames"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_width_in_mbs_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_height_in_map_units_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_crop_left_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_crop_right_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_crop_top_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_crop_bottom_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "pOffsetForRefFrame"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH264ScalingLists"
              },
              "name": {
                "#text": "pScalingLists"
              },
              "comment": {
                "#text": "Must be a valid pointer if seq_scaling_matrix_present_flag is set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH264SequenceParameterSetVui"
              },
              "name": {
                "#text": "pSequenceParameterSetVui"
              },
              "comment": {
                "#text": "Must be a valid pointer if StdVideoH264SpsFlags:vui_parameters_present_flag is set"
              },
              "#text": "const*"
            }
          ],
          "comment": {
            "#text": "pOffsetForRefFrame is a pointer representing the offset_for_ref_frame array with num_ref_frames_in_pic_order_cnt_cycle number of elements.\n                If pOffsetForRefFrame has nullptr value, then num_ref_frames_in_pic_order_cnt_cycle must also be \"0\"."
          },
          "$category": "struct",
          "$name": "StdVideoH264SequenceParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transform_8x8_mode_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "redundant_pic_cnt_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constrained_intra_pred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deblocking_filter_control_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "weighted_pred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bottom_field_pic_order_in_frame_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "entropy_coding_mode_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_scaling_matrix_present_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264PpsFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH264PpsFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "seq_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pic_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l0_default_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l1_default_active_minus1"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264WeightedBipredIdc"
              },
              "name": {
                "#text": "weighted_bipred_idc"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pic_init_qp_minus26"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pic_init_qs_minus26"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "chroma_qp_index_offset"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "second_chroma_qp_index_offset"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264ScalingLists"
              },
              "name": {
                "#text": "pScalingLists"
              },
              "comment": {
                "#text": "Must be a valid pointer if StdVideoH264PpsFlags::pic_scaling_matrix_present_flag is set."
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH264PictureParameterSet"
        },
        {
          "$name": "StdVideoDecodeH264FieldOrderCount",
          "$category": "enum"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "field_pic_flag"
              },
              "comment": {
                "#text": "Is field picture"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "is_intra"
              },
              "comment": {
                "#text": "Is intra picture"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "IdrPicFlag"
              },
              "comment": {
                "#text": "instantaneous decoding refresh (IDR) picture"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bottom_field_flag"
              },
              "comment": {
                "#text": "bottom (true) or top (false) field if field_pic_flag is set."
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "is_reference"
              },
              "comment": {
                "#text": "This only applies to picture info, and not to the DPB lists."
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "complementary_field_pair"
              },
              "comment": {
                "#text": "complementary field pair, complementary non-reference field pair, complementary reference field pair"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH264PictureInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoDecodeH264PictureInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "seq_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting SPS id from the Sequence Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pic_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting PPS id from the Picture Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "frame_num"
              },
              "comment": {
                "#text": "7.4.3 Slice header semantics"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "idr_pic_id"
              },
              "comment": {
                "#text": "7.4.3 Slice header semantics"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCnt"
              },
              "enum": {
                "#text": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE"
              },
              "comment": {
                "#text": "TopFieldOrderCnt and BottomFieldOrderCnt fields."
              },
              "#text": "[]"
            }
          ],
          "comment": {
            "#text": "PicOrderCnt is based on TopFieldOrderCnt and BottomFieldOrderCnt. See 8.2.1 Decoding process for picture order count type 0 - 2"
          },
          "$category": "struct",
          "$name": "StdVideoDecodeH264PictureInfo",
          "$requires": "StdVideoDecodeH264FieldOrderCount",
          "$comment": "requires tag is for PicOrderCnt, which needs the enum type"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "top_field_flag"
              },
              "comment": {
                "#text": "Reference is used for top field reference."
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bottom_field_flag"
              },
              "comment": {
                "#text": "Reference is used for bottom field reference."
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "used_for_long_term_reference"
              },
              "comment": {
                "#text": ": A picture that is marked as \"used for long-term reference\", derived binary value from clause 8.2.5.1 Sequence of operations for decoded reference picture marking process"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "is_non_existing"
              },
              "comment": {
                "#text": "Must be handled in accordance with 8.2.5.2: Decoding process for gaps in frame_num"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH264ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoDecodeH264ReferenceInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "FrameNum"
              },
              "comment": {
                "#text": "7.4.3.3 Decoded reference picture marking semantics"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "reserved"
              },
              "comment": {
                "#text": "for structure members 32-bit packing/alignment"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCnt"
              },
              "enum": {
                "#text": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE"
              },
              "comment": {
                "#text": "TopFieldOrderCnt and BottomFieldOrderCnt fields."
              },
              "#text": "[]"
            }
          ],
          "comment": {
            "#text": "FrameNum = used_for_long_term_reference ?  long_term_frame_idx : frame_num"
          },
          "$category": "struct",
          "$name": "StdVideoDecodeH264ReferenceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "luma_weight_l0_flag"
              },
              "comment": {
                "#text": "each bit n represents the nth entry in reference list l0, n <= num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "chroma_weight_l0_flag"
              },
              "comment": {
                "#text": "each bit n represents the nth entry in reference list l0, n <= num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "luma_weight_l1_flag"
              },
              "comment": {
                "#text": "each bit n represents the nth entry in reference list l1, n <= num_ref_idx_l1_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "chroma_weight_l1_flag"
              },
              "comment": {
                "#text": "each bit n represents the nth entry in reference list l1, n <= num_ref_idx_l1_active_minus1"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264WeightTableFlags"
        },
        {
          "comment": {
            "#text": "StdVideoEncodeH264WeightTable corresponds to the values produced by pred_weight_table() for the h.264 specification.\n                For details, refer to weighted_pred_flag, weighted_bipred_idc, pre_pred_weight_table_src and pred_weight_table()."
          },
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH264WeightTableFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": ""
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "luma_log2_weight_denom"
              },
              "comment": {
                "#text": ""
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_log2_weight_denom"
              },
              "comment": {
                "#text": ""
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_weight_l0"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "valid entry range is [0, num_ref_idx_l0_active_minus1]"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_offset_l0"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "valid entry range is [0, num_ref_idx_l0_active_minus1]"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "chroma_weight_l0"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H264_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l0_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "chroma_offset_l0"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H264_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l0_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_weight_l1"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "valid entry range is [0, num_ref_idx_l1_active_minus1]"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_offset_l1"
              },
              "enum": {
                "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "valid entry range is [0, num_ref_idx_l1_active_minus1]"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "chroma_weight_l1"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H264_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l1_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "chroma_offset_l1"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H264_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H264_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l1_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264WeightTable"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "direct_spatial_mv_pred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "num_ref_idx_active_override_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "no_output_of_prior_pics_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "adaptive_ref_pic_marking_mode_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "no_prior_references_available_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264SliceHeaderFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "idr_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "is_reference_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "used_for_long_term_reference"
              },
              "comment": {
                "#text": ": A picture that is marked as \"used for long-term reference\", derived binary value from clause 8.2.5.1 Sequence of operations for decoded reference picture marking process"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264PictureInfoFlags"
        },
        {
          "member": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "used_for_long_term_reference"
            },
            "comment": {
              "#text": ": A picture that is marked as \"used for long-term reference\", derived binary value from clause 8.2.5.1 Sequence of operations for decoded reference picture marking process"
            },
            "#text": ": 1"
          },
          "$category": "struct",
          "$name": "StdVideoEncodeH264ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ref_pic_list_modification_l0_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ref_pic_list_modification_l1_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264RefMgmtFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH264ModificationOfPicNumsIdc"
              },
              "name": {
                "#text": "modification_of_pic_nums_idc"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "abs_diff_pic_num_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "long_term_pic_num"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264RefListModEntry"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH264MemMgmtControlOp"
              },
              "name": {
                "#text": "operation"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "difference_of_pic_nums_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "long_term_pic_num"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "long_term_frame_idx"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "max_long_term_frame_idx_plus1"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264RefPicMarkingEntry"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH264RefMgmtFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "refList0ModOpCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264RefListModEntry"
              },
              "name": {
                "#text": "pRefList0ModOperations"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "refList1ModOpCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264RefListModEntry"
              },
              "name": {
                "#text": "pRefList1ModOperations"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "refPicMarkingOpCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264RefPicMarkingEntry"
              },
              "name": {
                "#text": "pRefPicMarkingOperations"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264RefMemMgmtCtrlOperations"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH264PictureInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "seq_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting SPS id from the Sequence Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pic_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting PPS from the Picture Parameters for all StdVideoEncodeH264SliceHeader(s)"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264PictureType"
              },
              "name": {
                "#text": "pictureType"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_num"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCnt"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264PictureInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH264ReferenceInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "FrameNum"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCnt"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "long_term_pic_num"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "long_term_frame_idx"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264ReferenceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH264SliceHeaderFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "first_mb_in_slice"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264SliceType"
              },
              "name": {
                "#text": "slice_type"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "idr_pic_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l1_active_minus1"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264CabacInitIdc"
              },
              "name": {
                "#text": "cabac_init_idc"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264DisableDeblockingFilterIdc"
              },
              "name": {
                "#text": "disable_deblocking_filter_idc"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_alpha_c0_offset_div2"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_beta_offset_div2"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264WeightTable"
              },
              "name": {
                "#text": "pWeightTable"
              },
              "comment": {
                "#text": ""
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH264SliceHeader"
        },
        {
          "$name": "StdVideoH265ChromaFormatIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH265ProfileIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH265LevelIdc",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH265SliceType",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH265PictureType",
          "$category": "enum"
        },
        {
          "$name": "StdVideoH265AspectRatioIdc",
          "$category": "enum"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "general_tier_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "general_progressive_source_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "general_interlaced_source_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "general_non_packed_constraint_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "general_frame_only_constraint_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265ProfileTierLevelFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265ProfileTierLevelFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265ProfileIdc"
              },
              "name": {
                "#text": "general_profile_idc"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265LevelIdc"
              },
              "name": {
                "#text": "general_level_idc"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265ProfileTierLevel",
          "$comment": "profile_tier_level"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "max_latency_increase_plus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE"
              },
              "comment": {
                "#text": "represents sps_max_latency_increase_plus1 or vps_max_latency_increase_plus1"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_dec_pic_buffering_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE"
              },
              "comment": {
                "#text": "represents sps_max_dec_pic_buffering_minus1 or vps_max_dec_pic_buffering_minus1"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_num_reorder_pics"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE"
              },
              "comment": {
                "#text": "represents sps_max_num_reorder_pics or vps_max_num_reorder_pics"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265DecPicBufMgr",
          "$comment": "sps_ or vps_ parameters, based on if the StdVideoH265DecPicBufMgr is used within the StdVideoH265SequenceParameterSet or StdVideoH265VideoParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bit_rate_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CPB_CNT_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cpb_size_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CPB_CNT_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cpb_size_du_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CPB_CNT_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bit_rate_du_value_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CPB_CNT_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cbr_flag"
              },
              "comment": {
                "#text": "each bit represents a range of CpbCounts (bit 0 - cpb_cnt_minus1) per sub-layer"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265SubLayerHrdParameters",
          "$comment": "sub_layer_hrd_parameters"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "nal_hrd_parameters_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vcl_hrd_parameters_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sub_pic_hrd_params_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sub_pic_cpb_params_in_pic_timing_sei_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fixed_pic_rate_general_flag"
              },
              "comment": {
                "#text": "each bit represents a sublayer, bit 0 - vps_max_sub_layers_minus1"
              },
              "#text": ": 8"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fixed_pic_rate_within_cvs_flag"
              },
              "comment": {
                "#text": "each bit represents a sublayer, bit 0 - vps_max_sub_layers_minus1"
              },
              "#text": ": 8"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "low_delay_hrd_flag"
              },
              "comment": {
                "#text": "each bit represents a sublayer, bit 0 - vps_max_sub_layers_minus1"
              },
              "#text": ": 8"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265HrdFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265HrdFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "tick_divisor_minus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "du_cpb_removal_delay_increment_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "dpb_output_delay_du_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_rate_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cpb_size_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cpb_size_du_scale"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "initial_cpb_removal_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "au_cpb_removal_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "dpb_output_delay_length_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "cpb_cnt_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "elemental_duration_in_tc_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "reserved"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              },
              "#text": "[3]"
            },
            {
              "type": {
                "#text": "StdVideoH265SubLayerHrdParameters"
              },
              "name": {
                "#text": "pSubLayerHrdParametersNal"
              },
              "comment": {
                "#text": "if flags.nal_hrd_parameters_present_flag is set, then this must be a ptr to an array of StdVideoH265SubLayerHrdParameters with a size specified by sps_max_sub_layers_minus1 + 1 or vps_max_sub_layers_minus1 + 1, depending on whether the HRD parameters are part of the SPS or VPS, respectively."
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265SubLayerHrdParameters"
              },
              "name": {
                "#text": "pSubLayerHrdParametersVcl"
              },
              "comment": {
                "#text": "if flags.vcl_hrd_parameters_present_flag is set, then this must be a ptr to an array of StdVideoH265SubLayerHrdParameters with a size specified by sps_max_sub_layers_minus1 + 1 or vps_max_sub_layers_minus1 + 1, depending on whether the HRD parameters are part of the SPS or VPS, respectively."
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265HrdParameters"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_temporal_id_nesting_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_sub_layer_ordering_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_timing_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_poc_proportional_to_timing_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265VpsFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265VpsFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "vps_video_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "vps_max_sub_layers_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_num_units_in_tick"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_time_scale"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vps_num_ticks_poc_diff_one_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reserved3"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "StdVideoH265DecPicBufMgr"
              },
              "name": {
                "#text": "pDecPicBufMgr"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265HrdParameters"
              },
              "name": {
                "#text": "pHrdParameters"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265ProfileTierLevel"
              },
              "name": {
                "#text": "pProfileTierLevel"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265VideoParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList4x4"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS"
                }
              ],
              "comment": {
                "#text": "ScalingList[ 0 ][ MatrixID ][ i ] (sizeID = 0)"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList8x8"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS"
                }
              ],
              "comment": {
                "#text": "ScalingList[ 1 ][ MatrixID ][ i ] (sizeID = 1)"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList16x16"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS"
                }
              ],
              "comment": {
                "#text": "ScalingList[ 2 ][ Matri]xID ][ i ] (sizeID = 2)"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingList32x32"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS"
                },
                {
                  "#text": "STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS"
                }
              ],
              "comment": {
                "#text": "ScalingList[ 3 ][ MatrixID ][ i ] (sizeID = 3)"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingListDCCoef16x16"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS"
              },
              "comment": {
                "#text": "scaling_list_dc_coef_minus8[ sizeID - 2 ][ matrixID ] + 8, sizeID = 2"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ScalingListDCCoef32x32"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS"
              },
              "comment": {
                "#text": "scaling_list_dc_coef_minus8[ sizeID - 2 ][ matrixID ] + 8. sizeID = 3"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265ScalingLists"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "inter_ref_pic_set_prediction_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "delta_rps_sign"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265ShortTermRefPicSetFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265ShortTermRefPicSetFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "delta_idx_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "use_delta_flag"
              },
              "comment": {
                "#text": "each bit represents a use_delta_flag[j] syntax"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "abs_delta_rps_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "used_by_curr_pic_flag"
              },
              "comment": {
                "#text": "each bit represents a used_by_curr_pic_flag[j] syntax"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "used_by_curr_pic_s0_flag"
              },
              "comment": {
                "#text": "each bit represents a used_by_curr_pic_s0_flag[i] syntax"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "used_by_curr_pic_s1_flag"
              },
              "comment": {
                "#text": "each bit represents a used_by_curr_pic_s1_flag[i] syntax"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved3"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_negative_pics"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_positive_pics"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "delta_poc_s0_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_DPB_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "delta_poc_s1_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_DPB_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265ShortTermRefPicSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "used_by_curr_pic_lt_sps_flag"
              },
              "comment": {
                "#text": "each bit represents a used_by_curr_pic_lt_sps_flag[i] syntax"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "lt_ref_pic_poc_lsb_sps"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265LongTermRefPicsSps"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "aspect_ratio_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "overscan_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "overscan_appropriate_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "video_signal_type_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "video_full_range_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colour_description_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "chroma_loc_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "neutral_chroma_indication_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "field_seq_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frame_field_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "default_display_window_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_timing_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_poc_proportional_to_timing_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_hrd_parameters_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bitstream_restriction_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "tiles_fixed_structure_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "motion_vectors_over_pic_boundaries_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "restricted_ref_pic_lists_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265SpsVuiFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265SpsVuiFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265AspectRatioIdc"
              },
              "name": {
                "#text": "aspect_ratio_idc"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "sar_width"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "sar_height"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "video_format"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "colour_primaries"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "transfer_characteristics"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "matrix_coeffs"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_sample_loc_type_top_field"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_sample_loc_type_bottom_field"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "def_disp_win_left_offset"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "def_disp_win_right_offset"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "def_disp_win_top_offset"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "def_disp_win_bottom_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_num_units_in_tick"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_time_scale"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_num_ticks_poc_diff_one_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "min_spatial_segmentation_idc"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "reserved3"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_bytes_per_pic_denom"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_bits_per_min_cu_denom"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_mv_length_horizontal"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_mv_length_vertical"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265HrdParameters"
              },
              "name": {
                "#text": "pHrdParameters"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265SequenceParameterSetVui"
        },
        {
          "member": {
            "type": {
              "#text": "uint16_t"
            },
            "name": {
              "#text": "PredictorPaletteEntries"
            },
            "enum": [
              {
                "#text": "STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE"
              },
              {
                "#text": "STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE"
              }
            ],
            "#text": "[][]"
          },
          "$category": "struct",
          "$name": "StdVideoH265PredictorPaletteEntries"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_temporal_id_nesting_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "separate_colour_plane_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "conformance_window_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_sub_layer_ordering_info_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "scaling_list_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_scaling_list_data_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "amp_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sample_adaptive_offset_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pcm_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pcm_loop_filter_disabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "long_term_ref_pics_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_temporal_mvp_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "strong_intra_smoothing_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vui_parameters_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_extension_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_range_extension_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transform_skip_rotation_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transform_skip_context_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "implicit_rdpcm_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "explicit_rdpcm_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "extended_precision_processing_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "intra_smoothing_disabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "high_precision_offsets_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "persistent_rice_adaptation_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cabac_bypass_alignment_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_scc_extension_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_curr_pic_ref_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "palette_mode_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sps_palette_predictor_initializers_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "intra_boundary_filtering_disabled_flag"
              },
              "#text": ": 1"
            }
          ],
          "comment": [
            {
              "#text": "extension SPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS is set"
            },
            {
              "#text": "extension SPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS is set"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265SpsFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265SpsFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265ChromaFormatIdc"
              },
              "name": {
                "#text": "chroma_format_idc"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_width_in_luma_samples"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_height_in_luma_samples"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_video_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_max_sub_layers_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_seq_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_depth_luma_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "bit_depth_chroma_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_pic_order_cnt_lsb_minus4"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_min_luma_coding_block_size_minus3"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_diff_max_min_luma_coding_block_size"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_min_luma_transform_block_size_minus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_diff_max_min_luma_transform_block_size"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_transform_hierarchy_depth_inter"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "max_transform_hierarchy_depth_intra"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_short_term_ref_pic_sets"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_long_term_ref_pics_sps"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pcm_sample_bit_depth_luma_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pcm_sample_bit_depth_chroma_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_min_pcm_luma_coding_block_size_minus3"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_diff_max_min_pcm_luma_coding_block_size"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "palette_max_size"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "delta_palette_max_predictor_size"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "motion_vector_resolution_control_idc"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_num_palette_predictor_initializers_minus1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "conf_win_left_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "conf_win_right_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "conf_win_top_offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "conf_win_bottom_offset"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265ProfileTierLevel"
              },
              "name": {
                "#text": "pProfileTierLevel"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265DecPicBufMgr"
              },
              "name": {
                "#text": "pDecPicBufMgr"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265ScalingLists"
              },
              "name": {
                "#text": "pScalingLists"
              },
              "comment": {
                "#text": "Must be a valid pointer if sps_scaling_list_data_present_flag is set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265ShortTermRefPicSet"
              },
              "name": {
                "#text": "pShortTermRefPicSet"
              },
              "comment": {
                "#text": "Must be a valid pointer to an array with size num_short_term_ref_pic_sets if num_short_term_ref_pic_sets is not 0."
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265LongTermRefPicsSps"
              },
              "name": {
                "#text": "pLongTermRefPicsSps"
              },
              "comment": {
                "#text": "Must be a valid pointer if long_term_ref_pics_present_flag is set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265SequenceParameterSetVui"
              },
              "name": {
                "#text": "pSequenceParameterSetVui"
              },
              "comment": {
                "#text": "Must be a valid pointer if StdVideoH265SpsFlags:vui_parameters_present_flag is set palette_max_size"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265PredictorPaletteEntries"
              },
              "name": {
                "#text": "pPredictorPaletteEntries"
              },
              "comment": {
                "#text": "Must be a valid pointer if sps_palette_predictor_initializer_present_flag is set"
              },
              "#text": "const*"
            }
          ],
          "comment": [
            {
              "#text": "Start extension SPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS is set"
            },
            {
              "#text": "End extension SPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS is set"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265SequenceParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dependent_slice_segments_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "output_flag_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sign_data_hiding_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cabac_init_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constrained_intra_pred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transform_skip_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cu_qp_delta_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_slice_chroma_qp_offsets_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "weighted_pred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "weighted_bipred_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transquant_bypass_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "tiles_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "entropy_coding_sync_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "uniform_spacing_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "loop_filter_across_tiles_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_loop_filter_across_slices_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deblocking_filter_control_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deblocking_filter_override_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_deblocking_filter_disabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_scaling_list_data_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "lists_modification_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_segment_header_extension_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_extension_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cross_component_prediction_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "chroma_qp_offset_list_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_curr_pic_ref_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "residual_adaptive_colour_transform_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_slice_act_qp_offsets_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_palette_predictor_initializers_present_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "monochrome_palette_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pps_range_extension_flag"
              },
              "#text": ": 1"
            }
          ],
          "comment": [
            {
              "#text": "extension PPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS is set"
            },
            {
              "#text": "extension PPS flags, valid when STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS is set"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265PpsFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoH265PpsFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_pic_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_seq_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_video_parameter_set_id"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_extra_slice_header_bits"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l0_default_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l1_default_active_minus1"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "init_qp_minus26"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "diff_cu_qp_delta_depth"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_cb_qp_offset"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_cr_qp_offset"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_beta_offset_div2"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_tc_offset_div2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_parallel_merge_level_minus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_max_transform_skip_block_size_minus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "diff_cu_chroma_qp_offset_depth"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_qp_offset_list_len_minus1"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "cb_qp_offset_list"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "cr_qp_offset_list"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_sao_offset_scale_luma"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "log2_sao_offset_scale_chroma"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_act_y_qp_offset_plus5"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_act_cb_qp_offset_plus5"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "pps_act_cr_qp_offset_plus3"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_num_palette_predictor_initializers"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "luma_bit_depth_entry_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "chroma_bit_depth_entry_minus8"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_tile_columns_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_tile_rows_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved1"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "reserved2"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "column_width_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "row_height_minus1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reserved3"
              },
              "comment": {
                "#text": "Reserved for future use and must be initialized with 0."
              }
            },
            {
              "type": {
                "#text": "StdVideoH265ScalingLists"
              },
              "name": {
                "#text": "pScalingLists"
              },
              "comment": {
                "#text": "Must be a valid pointer if pps_scaling_list_data_present_flag is set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoH265PredictorPaletteEntries"
              },
              "name": {
                "#text": "pPredictorPaletteEntries"
              },
              "comment": {
                "#text": "Must be a valid pointer if pps_palette_predictor_initializer_present_flag is set"
              },
              "#text": "const*"
            }
          ],
          "comment": [
            {
              "#text": "extension PPS, valid when STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS is set"
            },
            {
              "#text": "extension PPS, valid when STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS is set"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoH265PictureParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "IrapPicFlag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "IdrPicFlag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "IsReference"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "short_term_ref_pic_set_sps_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH265PictureInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoDecodeH265PictureInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_video_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting VPS id from the Video Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_seq_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting SPS id from the Sequence Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_pic_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting PPS id from the Picture Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "NumDeltaPocsOfRefRpsIdx"
              },
              "comment": {
                "#text": "NumDeltaPocs[ RefRpsIdx ] when short_term_ref_pic_set_sps_flag = 1, otherwise 0"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCntVal"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "NumBitsForSTRefPicSetInSlice"
              },
              "comment": {
                "#text": "number of bits used in st_ref_pic_set() when short_term_ref_pic_set_sps_flag is 0otherwise set to 0."
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "reserved"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "RefPicSetStCurrBefore"
              },
              "enum": {
                "#text": "STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE"
              },
              "comment": {
                "#text": "slotIndex as used in VkVideoReferenceSlotInfoKHR structures representing pReferenceSlots in VkVideoDecodeInfoKHR, 0xff for invalid slotIndex"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "RefPicSetStCurrAfter"
              },
              "enum": {
                "#text": "STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE"
              },
              "comment": {
                "#text": "slotIndex as used in VkVideoReferenceSlotInfoKHR structures representing pReferenceSlots in VkVideoDecodeInfoKHR, 0xff for invalid slotIndex"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "RefPicSetLtCurr"
              },
              "enum": {
                "#text": "STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE"
              },
              "comment": {
                "#text": "slotIndex as used in VkVideoReferenceSlotInfoKHR structures representing pReferenceSlots in VkVideoDecodeInfoKHR, 0xff for invalid slotIndex"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH265PictureInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "used_for_long_term_reference"
              },
              "comment": {
                "#text": "A picture that is marked as \"used for long-term reference\", derived binary value from clause 8.3.2 Decoding process for reference picture set"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "unused_for_reference"
              },
              "comment": {
                "#text": "A picture that is marked as \"unused for reference\", derived binary value from clause 8.3.2 Decoding process for reference picture set"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH265ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoDecodeH265ReferenceInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCntVal"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoDecodeH265ReferenceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "luma_weight_l0_flag"
              },
              "comment": {
                "#text": "bit 0 - num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "chroma_weight_l0_flag"
              },
              "comment": {
                "#text": "bit 0 - num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "luma_weight_l1_flag"
              },
              "comment": {
                "#text": "bit 0 - num_ref_idx_l1_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "chroma_weight_l1_flag"
              },
              "comment": {
                "#text": "bit 0 - num_ref_idx_l1_active_minus1"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265WeightTableFlags"
        },
        {
          "comment": {
            "#text": "StdVideoEncodeH265WeightTable corresponds to the values produced by pred_weight_table() for the h.265 specification.\n                For details, refer to weighted_pred_flag, weighted_bipred_flag and pred_weight_table()."
          },
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH265WeightTableFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "luma_log2_weight_denom"
              },
              "comment": {
                "#text": "[0, 7]"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_chroma_log2_weight_denom"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_luma_weight_l0"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "comment"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_offset_l0"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": "comment"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_chroma_weight_l0"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H265_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l0_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_chroma_offset_l0"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H265_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l0_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_luma_weight_l1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": ""
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "luma_offset_l1"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
              },
              "comment": {
                "#text": ""
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_chroma_weight_l1"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H265_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l1_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "delta_chroma_offset_l1"
              },
              "enum": [
                {
                  "#text": "STD_VIDEO_H265_MAX_NUM_LIST_REF"
                },
                {
                  "#text": "STD_VIDEO_H265_MAX_CHROMA_PLANES"
                }
              ],
              "comment": {
                "#text": "[i][j]: valid entry range for i is [0, num_ref_idx_l1_active_minus1]; j = 0 for Cb, j = 1 for Cr"
              },
              "#text": "[][]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265WeightTable"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_long_term_sps"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_long_term_pics"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "lt_idx_sps"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "poc_lsb_lt"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_LONG_TERM_PICS"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "used_by_curr_pic_lt_flag"
              },
              "comment": {
                "#text": "each bit represents a used_by_curr_pic_lt_flag[i] syntax"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "delta_poc_msb_present_flag"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_DELTA_POC"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "delta_poc_msb_cycle_lt"
              },
              "enum": {
                "#text": "STD_VIDEO_H265_MAX_DELTA_POC"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265SliceSegmentLongTermRefPics"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "first_slice_segment_in_pic_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "no_output_of_prior_pics_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dependent_slice_segment_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pic_output_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "short_term_ref_pic_set_sps_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_temporal_mvp_enable_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_sao_luma_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_sao_chroma_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "num_ref_idx_active_override_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mvd_l1_zero_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cabac_init_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cu_chroma_qp_offset_enabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deblocking_filter_override_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_deblocking_filter_disabled_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "collocated_from_l0_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_loop_filter_across_slices_enabled_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265SliceSegmentHeaderFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH265SliceSegmentHeaderFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265SliceType"
              },
              "name": {
                "#text": "slice_type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "slice_segment_address"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "short_term_ref_pic_set_idx"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "collocated_ref_idx"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l0_active_minus1"
              },
              "comment": {
                "#text": "[0, 14]"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "num_ref_idx_l1_active_minus1"
              },
              "comment": {
                "#text": "[0, 14]"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "MaxNumMergeCand"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_cb_qp_offset"
              },
              "comment": {
                "#text": "[-12, 12]"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_cr_qp_offset"
              },
              "comment": {
                "#text": "[-12, 12]"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_beta_offset_div2"
              },
              "comment": {
                "#text": "[-6, 6]"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_tc_offset_div2"
              },
              "comment": {
                "#text": "[-6, 6]"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_act_y_qp_offset"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_act_cb_qp_offset"
              }
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slice_act_cr_qp_offset"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265ShortTermRefPicSet"
              },
              "name": {
                "#text": "pShortTermRefPicSet"
              },
              "comment": {
                "#text": "Must be a valid pointer if short_term_ref_pic_set_sps_flag is not set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265SliceSegmentLongTermRefPics"
              },
              "name": {
                "#text": "pLongTermRefPics"
              },
              "comment": {
                "#text": "Must be a valid pointer if StdVideoH265SpsFlags:long_term_ref_pics_present_flag is set"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265WeightTable"
              },
              "name": {
                "#text": "pWeightTable"
              },
              "comment": {
                "#text": ""
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265SliceSegmentHeader"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ref_pic_list_modification_flag_l0"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ref_pic_list_modification_flag_l1"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265ReferenceModificationFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH265ReferenceModificationFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList0ModificationsCount"
              },
              "comment": {
                "#text": "num_ref_idx_l0_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pReferenceList0Modifications"
              },
              "comment": {
                "#text": "list_entry_l0"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList1ModificationsCount"
              },
              "comment": {
                "#text": "num_ref_idx_l1_active_minus1"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pReferenceList1Modifications"
              },
              "comment": {
                "#text": "list_entry_l1"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265ReferenceModifications"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "is_reference_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "IrapPicFlag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "long_term_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "discardable_flag"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cross_layer_bla_flag"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265PictureInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH265PictureInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265PictureType"
              },
              "name": {
                "#text": "PictureType"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "sps_video_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting VPS id from the Video Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_seq_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting SPS id from the Sequence Parameters Set"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pps_pic_parameter_set_id"
              },
              "comment": {
                "#text": "Selecting PPS id from the Picture Parameters Set"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCntVal"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "TemporalId"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265PictureInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "used_for_long_term_reference"
              },
              "comment": {
                "#text": "A picture that is marked as \"used for long-term reference\", derived binary value from clause 8.3.2 Decoding process for reference picture set"
              },
              "#text": ": 1"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "unused_for_reference"
              },
              "comment": {
                "#text": "A picture that is marked as \"unused for reference\", derived binary value from clause 8.3.2 Decoding process for reference picture set"
              },
              "#text": ": 1"
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "StdVideoEncodeH265ReferenceInfoFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "PicOrderCntVal"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "TemporalId"
              }
            }
          ],
          "$category": "struct",
          "$name": "StdVideoEncodeH265ReferenceInfo"
        },
        {
          "#text": "#include \"vk_platform.h\"",
          "$name": "vk_platform",
          "$category": "include"
        },
        {
          "$category": "include",
          "$name": "X11/Xlib.h"
        },
        {
          "$category": "include",
          "$name": "X11/extensions/Xrandr.h"
        },
        {
          "$category": "include",
          "$name": "wayland-client.h"
        },
        {
          "$category": "include",
          "$name": "windows.h"
        },
        {
          "$category": "include",
          "$name": "xcb/xcb.h"
        },
        {
          "$category": "include",
          "$name": "directfb.h"
        },
        {
          "$category": "include",
          "$name": "zircon/types.h"
        },
        {
          "$category": "include",
          "$name": "ggp_c/vulkan_types.h"
        },
        {
          "$category": "include",
          "$name": "screen/screen.h"
        },
        {
          "$requires": "X11/Xlib.h",
          "$name": "Display"
        },
        {
          "$requires": "X11/Xlib.h",
          "$name": "VisualID"
        },
        {
          "$requires": "X11/Xlib.h",
          "$name": "Window"
        },
        {
          "$requires": "X11/extensions/Xrandr.h",
          "$name": "RROutput"
        },
        {
          "$requires": "wayland-client.h",
          "$name": "wl_display"
        },
        {
          "$requires": "wayland-client.h",
          "$name": "wl_surface"
        },
        {
          "$requires": "windows.h",
          "$name": "HINSTANCE"
        },
        {
          "$requires": "windows.h",
          "$name": "HWND"
        },
        {
          "$requires": "windows.h",
          "$name": "HMONITOR"
        },
        {
          "$requires": "windows.h",
          "$name": "HANDLE"
        },
        {
          "$requires": "windows.h",
          "$name": "SECURITY_ATTRIBUTES"
        },
        {
          "$requires": "windows.h",
          "$name": "DWORD"
        },
        {
          "$requires": "windows.h",
          "$name": "LPCWSTR"
        },
        {
          "$requires": "xcb/xcb.h",
          "$name": "xcb_connection_t"
        },
        {
          "$requires": "xcb/xcb.h",
          "$name": "xcb_visualid_t"
        },
        {
          "$requires": "xcb/xcb.h",
          "$name": "xcb_window_t"
        },
        {
          "$requires": "directfb.h",
          "$name": "IDirectFB"
        },
        {
          "$requires": "directfb.h",
          "$name": "IDirectFBSurface"
        },
        {
          "$requires": "zircon/types.h",
          "$name": "zx_handle_t"
        },
        {
          "$requires": "ggp_c/vulkan_types.h",
          "$name": "GgpStreamDescriptor"
        },
        {
          "$requires": "ggp_c/vulkan_types.h",
          "$name": "GgpFrameToken"
        },
        {
          "$requires": "screen/screen.h",
          "$name": "_screen_context"
        },
        {
          "$requires": "screen/screen.h",
          "$name": "_screen_window"
        },
        {
          "name": {
            "#text": "VK_MAKE_VERSION"
          },
          "#text": "// DEPRECATED: This define is deprecated. VK_MAKE_API_VERSION should be used instead.\n#define(major, minor, patch) \\\n    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_VERSION_MAJOR"
          },
          "#text": "// DEPRECATED: This define is deprecated. VK_API_VERSION_MAJOR should be used instead.\n#define(version) ((uint32_t)(version) >> 22)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_VERSION_MINOR"
          },
          "#text": "// DEPRECATED: This define is deprecated. VK_API_VERSION_MINOR should be used instead.\n#define(version) (((uint32_t)(version) >> 12) & 0x3FFU)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_VERSION_PATCH"
          },
          "#text": "// DEPRECATED: This define is deprecated. VK_API_VERSION_PATCH should be used instead.\n#define(version) ((uint32_t)(version) & 0xFFFU)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "#define(variant, major, minor, patch) \\\n    ((((uint32_t)(variant)) << 29) | (((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_VARIANT"
          },
          "#text": "#define(version) ((uint32_t)(version) >> 29)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_MAJOR"
          },
          "#text": "#define(version) (((uint32_t)(version) >> 22) & 0x7FU)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_MINOR"
          },
          "#text": "#define(version) (((uint32_t)(version) >> 12) & 0x3FFU)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_PATCH"
          },
          "#text": "#define(version) ((uint32_t)(version) & 0xFFFU)",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION"
          },
          "type": {
            "#text": "VK_MAKE_VERSION"
          },
          "#text": "// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.\n//#define(1, 0, 0) // Patch version should always be set to 0",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_1_0"
          },
          "type": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "// Vulkan 1.0 version number\n#define(0, 1, 0, 0)// Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_API_VERSION"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_1_1"
          },
          "type": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "// Vulkan 1.1 version number\n#define(0, 1, 1, 0)// Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_API_VERSION"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_1_2"
          },
          "type": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "// Vulkan 1.2 version number\n#define(0, 1, 2, 0)// Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_API_VERSION"
        },
        {
          "name": {
            "#text": "VK_API_VERSION_1_3"
          },
          "type": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "// Vulkan 1.3 version number\n#define(0, 1, 3, 0)// Patch version should always be set to 0",
          "$category": "define",
          "$requires": "VK_MAKE_API_VERSION"
        },
        {
          "name": {
            "#text": "VK_HEADER_VERSION"
          },
          "#text": "// Version of this file\n#define235",
          "$category": "define"
        },
        {
          "name": {
            "#text": "VK_HEADER_VERSION_COMPLETE"
          },
          "type": {
            "#text": "VK_MAKE_API_VERSION"
          },
          "#text": "// Complete version of this file\n#define(0, 1, 3, VK_HEADER_VERSION)",
          "$category": "define",
          "$requires": "VK_HEADER_VERSION"
        },
        {
          "name": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "#text": "#define(object) typedef struct object##_T* object;",
          "$category": "define"
        },
        {
          "#text": "#ifndef VK_USE_64_BIT_PTR_DEFINES\n    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)\n        #define VK_USE_64_BIT_PTR_DEFINES 1\n    #else\n        #define VK_USE_64_BIT_PTR_DEFINES 0\n    #endif\n#endif",
          "$category": "define",
          "$name": "VK_USE_64_BIT_PTR_DEFINES"
        },
        {
          "#text": "#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE\n    #if (VK_USE_64_BIT_PTR_DEFINES==1)\n        #if (defined(__cplusplus) && (__cplusplus >= 201103L)) || (defined(_MSVC_LANG) && (_MSVC_LANG >= 201103L))\n            #define VK_NULL_HANDLE nullptr\n        #else\n            #define VK_NULL_HANDLE ((void*)0)\n        #endif\n    #else\n        #define VK_NULL_HANDLE 0ULL\n    #endif\n#endif\n#ifndef VK_NULL_HANDLE\n    #define VK_NULL_HANDLE 0\n#endif",
          "$category": "define",
          "$requires": "VK_USE_64_BIT_PTR_DEFINES",
          "$name": "VK_NULL_HANDLE"
        },
        {
          "#text": "#ifndef VK_DEFINE_NON_DISPATCHABLE_HANDLE\n    #if (VK_USE_64_BIT_PTR_DEFINES==1)\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;\n    #else\n        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;\n    #endif\n#endif",
          "$category": "define",
          "$requires": "VK_NULL_HANDLE",
          "$name": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
        },
        {
          "name": {
            "#text": "ANativeWindow"
          },
          "#text": "struct;",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "AHardwareBuffer"
          },
          "#text": "struct;",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "CAMetalLayer"
          },
          "#text": "#ifdef __OBJC__\n@class CAMetalLayer;\n#else\ntypedef void;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "MTLDevice_id"
          },
          "#text": "#ifdef __OBJC__\n@protocol MTLDevice;\ntypedef id<MTLDevice> MTLDevice_id;\n#else\ntypedef void*;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "MTLCommandQueue_id"
          },
          "#text": "#ifdef __OBJC__\n@protocol MTLCommandQueue;\ntypedef id<MTLCommandQueue> MTLCommandQueue_id;\n#else\ntypedef void*;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "MTLBuffer_id"
          },
          "#text": "#ifdef __OBJC__\n@protocol MTLBuffer;\ntypedef id<MTLBuffer> MTLBuffer_id;\n#else\ntypedef void*;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "MTLTexture_id"
          },
          "#text": "#ifdef __OBJC__\n@protocol MTLTexture;\ntypedef id<MTLTexture> MTLTexture_id;\n#else\ntypedef void*;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "MTLSharedEvent_id"
          },
          "#text": "#ifdef __OBJC__\n@protocol MTLSharedEvent;\ntypedef id<MTLSharedEvent> MTLSharedEvent_id;\n#else\ntypedef void*;\n#endif",
          "$category": "basetype"
        },
        {
          "name": {
            "#text": "IOSurfaceRef"
          },
          "#text": "typedef struct __IOSurface*;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint32_t"
          },
          "name": {
            "#text": "VkSampleMask"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint32_t"
          },
          "name": {
            "#text": "VkBool32"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint32_t"
          },
          "name": {
            "#text": "VkFlags"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint64_t"
          },
          "name": {
            "#text": "VkFlags64"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint64_t"
          },
          "name": {
            "#text": "VkDeviceSize"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "type": {
            "#text": "uint64_t"
          },
          "name": {
            "#text": "VkDeviceAddress"
          },
          "#text": "typedef;",
          "$category": "basetype"
        },
        {
          "$requires": "vk_platform",
          "$name": "void"
        },
        {
          "$requires": "vk_platform",
          "$name": "char"
        },
        {
          "$requires": "vk_platform",
          "$name": "float"
        },
        {
          "$requires": "vk_platform",
          "$name": "double"
        },
        {
          "$requires": "vk_platform",
          "$name": "int8_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "uint8_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "int16_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "uint16_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "uint32_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "uint64_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "int32_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "int64_t"
        },
        {
          "$requires": "vk_platform",
          "$name": "size_t"
        },
        {
          "$name": "int"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkFramebufferCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkFramebufferCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkQueryPoolCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkRenderPassCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkRenderPassCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSamplerCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSamplerCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineLayoutCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineLayoutCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCacheCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineCacheCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineDepthStencilStateCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineDepthStencilStateCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineDynamicStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineColorBlendStateCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineColorBlendStateCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineMultisampleStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineRasterizationStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineViewportStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineTessellationStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineInputAssemblyStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineVertexInputStateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineShaderStageCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineShaderStageCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDescriptorSetLayoutCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkDescriptorSetLayoutCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkBufferViewCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkInstanceCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkInstanceCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceQueueCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkDeviceQueueCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkQueueFlags"
          },
          "#text": "typedef;",
          "$requires": "VkQueueFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMemoryPropertyFlags"
          },
          "#text": "typedef;",
          "$requires": "VkMemoryPropertyFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMemoryHeapFlags"
          },
          "#text": "typedef;",
          "$requires": "VkMemoryHeapFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAccessFlags"
          },
          "#text": "typedef;",
          "$requires": "VkAccessFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkBufferUsageFlags"
          },
          "#text": "typedef;",
          "$requires": "VkBufferUsageFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkBufferCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkBufferCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkShaderStageFlags"
          },
          "#text": "typedef;",
          "$requires": "VkShaderStageFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageUsageFlags"
          },
          "#text": "typedef;",
          "$requires": "VkImageUsageFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkImageCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageViewCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkImageViewCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkColorComponentFlags"
          },
          "#text": "typedef;",
          "$requires": "VkColorComponentFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkFenceCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkFenceCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSemaphoreCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkFormatFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkFormatFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkQueryControlFlags"
          },
          "#text": "typedef;",
          "$requires": "VkQueryControlFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkQueryResultFlags"
          },
          "#text": "typedef;",
          "$requires": "VkQueryResultFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkShaderModuleCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkEventCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkEventCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCommandPoolCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkCommandPoolCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCommandPoolResetFlags"
          },
          "#text": "typedef;",
          "$requires": "VkCommandPoolResetFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCommandBufferResetFlags"
          },
          "#text": "typedef;",
          "$requires": "VkCommandBufferResetFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCommandBufferUsageFlags"
          },
          "#text": "typedef;",
          "$requires": "VkCommandBufferUsageFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkQueryPipelineStatisticFlags"
          },
          "#text": "typedef;",
          "$requires": "VkQueryPipelineStatisticFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMemoryMapFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageAspectFlags"
          },
          "#text": "typedef;",
          "$requires": "VkImageAspectFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSparseMemoryBindFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSparseMemoryBindFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSparseImageFormatFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSparseImageFormatFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSubpassDescriptionFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSubpassDescriptionFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineStageFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineStageFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSampleCountFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSampleCountFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAttachmentDescriptionFlags"
          },
          "#text": "typedef;",
          "$requires": "VkAttachmentDescriptionFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkStencilFaceFlags"
          },
          "#text": "typedef;",
          "$requires": "VkStencilFaceFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCullModeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkCullModeFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDescriptorPoolCreateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkDescriptorPoolCreateFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDescriptorPoolResetFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDependencyFlags"
          },
          "#text": "typedef;",
          "$requires": "VkDependencyFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSubgroupFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSubgroupFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkIndirectCommandsLayoutUsageFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkIndirectCommandsLayoutUsageFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkIndirectStateFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkIndirectStateFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkGeometryFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkGeometryFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkGeometryFlagsNV",
          "$alias": "VkGeometryFlagsKHR"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkGeometryInstanceFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkGeometryInstanceFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkGeometryInstanceFlagsNV",
          "$alias": "VkGeometryInstanceFlagsKHR"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkBuildAccelerationStructureFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkBuildAccelerationStructureFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkBuildAccelerationStructureFlagsNV",
          "$alias": "VkBuildAccelerationStructureFlagsKHR"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPrivateDataSlotCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkPrivateDataSlotCreateFlagsEXT",
          "$alias": "VkPrivateDataSlotCreateFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAccelerationStructureCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkAccelerationStructureCreateFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDescriptorUpdateTemplateCreateFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkDescriptorUpdateTemplateCreateFlagsKHR",
          "$alias": "VkDescriptorUpdateTemplateCreateFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCreationFeedbackFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineCreationFeedbackFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkPipelineCreationFeedbackFlagsEXT",
          "$alias": "VkPipelineCreationFeedbackFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPerformanceCounterDescriptionFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkPerformanceCounterDescriptionFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAcquireProfilingLockFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkAcquireProfilingLockFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSemaphoreWaitFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSemaphoreWaitFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkSemaphoreWaitFlagsKHR",
          "$alias": "VkSemaphoreWaitFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCompilerControlFlagsAMD"
          },
          "#text": "typedef;",
          "$requires": "VkPipelineCompilerControlFlagBitsAMD",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkShaderCorePropertiesFlagsAMD"
          },
          "#text": "typedef;",
          "$requires": "VkShaderCorePropertiesFlagBitsAMD",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceDiagnosticsConfigFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkDeviceDiagnosticsConfigFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags64"
          },
          "name": {
            "#text": "VkAccessFlags2"
          },
          "#text": "typedef;",
          "$bitvalues": "VkAccessFlagBits2",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkAccessFlags2KHR",
          "$alias": "VkAccessFlags2"
        },
        {
          "type": {
            "#text": "VkFlags64"
          },
          "name": {
            "#text": "VkPipelineStageFlags2"
          },
          "#text": "typedef;",
          "$bitvalues": "VkPipelineStageFlagBits2",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkPipelineStageFlags2KHR",
          "$alias": "VkPipelineStageFlags2"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAccelerationStructureMotionInfoFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAccelerationStructureMotionInstanceFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags64"
          },
          "name": {
            "#text": "VkFormatFeatureFlags2"
          },
          "#text": "typedef;",
          "$bitvalues": "VkFormatFeatureFlagBits2",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkFormatFeatureFlags2KHR",
          "$alias": "VkFormatFeatureFlags2"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkRenderingFlags"
          },
          "#text": "typedef;",
          "$requires": "VkRenderingFlagBits",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags64"
          },
          "name": {
            "#text": "VkMemoryDecompressionMethodFlagsNV"
          },
          "#text": "typedef;",
          "$bitvalues": "VkMemoryDecompressionMethodFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkRenderingFlagsKHR",
          "$alias": "VkRenderingFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkBuildMicromapFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkBuildMicromapFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMicromapCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkMicromapCreateFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCompositeAlphaFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkCompositeAlphaFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDisplayPlaneAlphaFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkDisplayPlaneAlphaFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSurfaceTransformFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkSurfaceTransformFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSwapchainCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkSwapchainCreateFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDisplayModeCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDisplaySurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkAndroidSurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkViSurfaceCreateFlagsNN"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkWaylandSurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkWin32SurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkXlibSurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkXcbSurfaceCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDirectFBSurfaceCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkIOSSurfaceCreateFlagsMVK"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMacOSSurfaceCreateFlagsMVK"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMetalSurfaceCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImagePipeSurfaceCreateFlagsFUCHSIA"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkStreamDescriptorSurfaceCreateFlagsGGP"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkHeadlessSurfaceCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkScreenSurfaceCreateFlagsQNX"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPeerMemoryFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkPeerMemoryFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkPeerMemoryFeatureFlagsKHR",
          "$alias": "VkPeerMemoryFeatureFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkMemoryAllocateFlags"
          },
          "#text": "typedef;",
          "$requires": "VkMemoryAllocateFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkMemoryAllocateFlagsKHR",
          "$alias": "VkMemoryAllocateFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceGroupPresentModeFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkDeviceGroupPresentModeFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDebugReportFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkDebugReportFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkCommandPoolTrimFlags"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkCommandPoolTrimFlagsKHR",
          "$alias": "VkCommandPoolTrimFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalMemoryHandleTypeFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkExternalMemoryHandleTypeFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalMemoryFeatureFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkExternalMemoryFeatureFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalMemoryHandleTypeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalMemoryHandleTypeFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalMemoryHandleTypeFlagsKHR",
          "$alias": "VkExternalMemoryHandleTypeFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalMemoryFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalMemoryFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalMemoryFeatureFlagsKHR",
          "$alias": "VkExternalMemoryFeatureFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalSemaphoreHandleTypeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalSemaphoreHandleTypeFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalSemaphoreHandleTypeFlagsKHR",
          "$alias": "VkExternalSemaphoreHandleTypeFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalSemaphoreFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalSemaphoreFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalSemaphoreFeatureFlagsKHR",
          "$alias": "VkExternalSemaphoreFeatureFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSemaphoreImportFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSemaphoreImportFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkSemaphoreImportFlagsKHR",
          "$alias": "VkSemaphoreImportFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalFenceHandleTypeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalFenceHandleTypeFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalFenceHandleTypeFlagsKHR",
          "$alias": "VkExternalFenceHandleTypeFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExternalFenceFeatureFlags"
          },
          "#text": "typedef;",
          "$requires": "VkExternalFenceFeatureFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkExternalFenceFeatureFlagsKHR",
          "$alias": "VkExternalFenceFeatureFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkFenceImportFlags"
          },
          "#text": "typedef;",
          "$requires": "VkFenceImportFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkFenceImportFlagsKHR",
          "$alias": "VkFenceImportFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSurfaceCounterFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkSurfaceCounterFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineViewportSwizzleStateCreateFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineDiscardRectangleStateCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCoverageToColorStateCreateFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCoverageModulationStateCreateFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineCoverageReductionStateCreateFlagsNV"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkValidationCacheCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDebugUtilsMessageSeverityFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkDebugUtilsMessageSeverityFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDebugUtilsMessageTypeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkDebugUtilsMessageTypeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDebugUtilsMessengerCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDebugUtilsMessengerCallbackDataFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceMemoryReportFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineRasterizationConservativeStateCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDescriptorBindingFlags"
          },
          "#text": "typedef;",
          "$requires": "VkDescriptorBindingFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkDescriptorBindingFlagsEXT",
          "$alias": "VkDescriptorBindingFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkConditionalRenderingFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkConditionalRenderingFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkResolveModeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkResolveModeFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkResolveModeFlagsKHR",
          "$alias": "VkResolveModeFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineRasterizationStateStreamCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkPipelineRasterizationDepthClipStateCreateFlagsEXT"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSwapchainImageUsageFlagsANDROID"
          },
          "#text": "typedef;",
          "$requires": "VkSwapchainImageUsageFlagBitsANDROID",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkToolPurposeFlags"
          },
          "#text": "typedef;",
          "$requires": "VkToolPurposeFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkToolPurposeFlagsEXT",
          "$alias": "VkToolPurposeFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkSubmitFlags"
          },
          "#text": "typedef;",
          "$requires": "VkSubmitFlagBits",
          "$category": "bitmask"
        },
        {
          "$category": "bitmask",
          "$name": "VkSubmitFlagsKHR",
          "$alias": "VkSubmitFlags"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageFormatConstraintsFlagsFUCHSIA"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageConstraintsInfoFlagsFUCHSIA"
          },
          "#text": "typedef;",
          "$requires": "VkImageConstraintsInfoFlagBitsFUCHSIA",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkGraphicsPipelineLibraryFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkGraphicsPipelineLibraryFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageCompressionFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkImageCompressionFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkImageCompressionFixedRateFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkImageCompressionFixedRateFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkExportMetalObjectTypeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkExportMetalObjectTypeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkDeviceAddressBindingFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkDeviceAddressBindingFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkOpticalFlowGridSizeFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkOpticalFlowGridSizeFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkOpticalFlowUsageFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkOpticalFlowUsageFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkOpticalFlowSessionCreateFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkOpticalFlowSessionCreateFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkOpticalFlowExecuteFlagsNV"
          },
          "#text": "typedef;",
          "$requires": "VkOpticalFlowExecuteFlagBitsNV",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoCodecOperationFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoCodecOperationFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoCapabilityFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoCapabilityFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoSessionCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoSessionCreateFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoSessionParametersCreateFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoBeginCodingFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEndCodingFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoCodingControlFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoCodingControlFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoDecodeUsageFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoDecodeUsageFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoDecodeCapabilityFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoDecodeCapabilityFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoDecodeFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoDecodeH264PictureLayoutFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoDecodeH264PictureLayoutFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeUsageFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeUsageFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeContentFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeContentFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeCapabilityFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeCapabilityFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeRateControlFlagsKHR"
          },
          "#text": "typedef;",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeRateControlModeFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeRateControlModeFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoChromaSubsamplingFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoChromaSubsamplingFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoComponentBitDepthFlagsKHR"
          },
          "#text": "typedef;",
          "$requires": "VkVideoComponentBitDepthFlagBitsKHR",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH264CapabilityFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH264CapabilityFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH264InputModeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH264InputModeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH264OutputModeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH264OutputModeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH265CapabilityFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH265CapabilityFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH265InputModeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH265InputModeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH265OutputModeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH265OutputModeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH265CtbSizeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH265CtbSizeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VkFlags"
          },
          "name": {
            "#text": "VkVideoEncodeH265TransformBlockSizeFlagsEXT"
          },
          "#text": "typedef;",
          "$requires": "VkVideoEncodeH265TransformBlockSizeFlagBitsEXT",
          "$category": "bitmask"
        },
        {
          "type": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "name": {
            "#text": "VkInstance"
          },
          "#text": "()",
          "$category": "handle",
          "$objtypeenum": "VK_OBJECT_TYPE_INSTANCE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "name": {
            "#text": "VkPhysicalDevice"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkInstance",
          "$objtypeenum": "VK_OBJECT_TYPE_PHYSICAL_DEVICE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "name": {
            "#text": "VkDevice"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkPhysicalDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DEVICE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "name": {
            "#text": "VkQueue"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_QUEUE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_HANDLE"
          },
          "name": {
            "#text": "VkCommandBuffer"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkCommandPool",
          "$objtypeenum": "VK_OBJECT_TYPE_COMMAND_BUFFER"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDeviceMemory"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DEVICE_MEMORY"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkCommandPool"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_COMMAND_POOL"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkBuffer"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_BUFFER"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkBufferView"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_BUFFER_VIEW"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkImage"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_IMAGE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkImageView"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_IMAGE_VIEW"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkShaderModule"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_SHADER_MODULE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkPipeline"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_PIPELINE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkPipelineLayout"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_PIPELINE_LAYOUT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkSampler"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_SAMPLER"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDescriptorSet"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDescriptorPool",
          "$objtypeenum": "VK_OBJECT_TYPE_DESCRIPTOR_SET"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDescriptorSetLayout"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDescriptorPool"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DESCRIPTOR_POOL"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkFence"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_FENCE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkSemaphore"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_SEMAPHORE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkEvent"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_EVENT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkQueryPool"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_QUERY_POOL"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkFramebuffer"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_FRAMEBUFFER"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkRenderPass"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_RENDER_PASS"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkPipelineCache"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_PIPELINE_CACHE"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkIndirectCommandsLayoutNV"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDescriptorUpdateTemplate"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"
        },
        {
          "$category": "handle",
          "$name": "VkDescriptorUpdateTemplateKHR",
          "$alias": "VkDescriptorUpdateTemplate"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkSamplerYcbcrConversion"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"
        },
        {
          "$category": "handle",
          "$name": "VkSamplerYcbcrConversionKHR",
          "$alias": "VkSamplerYcbcrConversion"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkValidationCacheEXT"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkAccelerationStructureKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkAccelerationStructureNV"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkPerformanceConfigurationINTEL"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkBufferCollectionFUCHSIA"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDeferredOperationKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkPrivateDataSlot"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"
        },
        {
          "$category": "handle",
          "$name": "VkPrivateDataSlotEXT",
          "$alias": "VkPrivateDataSlot"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkCuModuleNVX"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_CU_MODULE_NVX"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkCuFunctionNVX"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_CU_FUNCTION_NVX"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkOpticalFlowSessionNV"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkMicromapEXT"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_MICROMAP_EXT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDisplayKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkPhysicalDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_DISPLAY_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDisplayModeKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDisplayKHR",
          "$objtypeenum": "VK_OBJECT_TYPE_DISPLAY_MODE_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkSurfaceKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkInstance",
          "$objtypeenum": "VK_OBJECT_TYPE_SURFACE_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkSwapchainKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkSurfaceKHR",
          "$objtypeenum": "VK_OBJECT_TYPE_SWAPCHAIN_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDebugReportCallbackEXT"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkInstance",
          "$objtypeenum": "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkDebugUtilsMessengerEXT"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkInstance",
          "$objtypeenum": "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkVideoSessionKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkDevice",
          "$objtypeenum": "VK_OBJECT_TYPE_VIDEO_SESSION_KHR"
        },
        {
          "type": {
            "#text": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
          },
          "name": {
            "#text": "VkVideoSessionParametersKHR"
          },
          "#text": "()",
          "$category": "handle",
          "$parent": "VkVideoSessionKHR",
          "$objtypeenum": "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR"
        },
        {
          "$name": "VkAttachmentLoadOp",
          "$category": "enum"
        },
        {
          "$name": "VkAttachmentStoreOp",
          "$category": "enum"
        },
        {
          "$name": "VkBlendFactor",
          "$category": "enum"
        },
        {
          "$name": "VkBlendOp",
          "$category": "enum"
        },
        {
          "$name": "VkBorderColor",
          "$category": "enum"
        },
        {
          "$name": "VkFramebufferCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkQueryPoolCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkRenderPassCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSamplerCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineCacheHeaderVersion",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineCacheCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineShaderStageCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDescriptorSetLayoutCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkInstanceCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceQueueCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkBufferCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkBufferUsageFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkColorComponentFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkComponentSwizzle",
          "$category": "enum"
        },
        {
          "$name": "VkCommandPoolCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkCommandPoolResetFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkCommandBufferResetFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkCommandBufferLevel",
          "$category": "enum"
        },
        {
          "$name": "VkCommandBufferUsageFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkCompareOp",
          "$category": "enum"
        },
        {
          "$name": "VkCullModeFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDescriptorType",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDynamicState",
          "$category": "enum"
        },
        {
          "$name": "VkFenceCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPolygonMode",
          "$category": "enum"
        },
        {
          "$name": "VkFormat",
          "$category": "enum"
        },
        {
          "$name": "VkFormatFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkFrontFace",
          "$category": "enum"
        },
        {
          "$name": "VkImageAspectFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkImageCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkImageLayout",
          "$category": "enum"
        },
        {
          "$name": "VkImageTiling",
          "$category": "enum"
        },
        {
          "$name": "VkImageType",
          "$category": "enum"
        },
        {
          "$name": "VkImageUsageFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkImageViewCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkImageViewType",
          "$category": "enum"
        },
        {
          "$name": "VkSharingMode",
          "$category": "enum"
        },
        {
          "$name": "VkIndexType",
          "$category": "enum"
        },
        {
          "$name": "VkLogicOp",
          "$category": "enum"
        },
        {
          "$name": "VkMemoryHeapFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkAccessFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkMemoryPropertyFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPhysicalDeviceType",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineBindPoint",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPrimitiveTopology",
          "$category": "enum"
        },
        {
          "$name": "VkQueryControlFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkQueryPipelineStatisticFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkQueryResultFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkQueryType",
          "$category": "enum"
        },
        {
          "$name": "VkQueueFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSubpassContents",
          "$category": "enum"
        },
        {
          "$name": "VkResult",
          "$category": "enum"
        },
        {
          "$name": "VkShaderStageFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSparseMemoryBindFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkStencilFaceFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkStencilOp",
          "$category": "enum"
        },
        {
          "$name": "VkStructureType",
          "$category": "enum"
        },
        {
          "$name": "VkSystemAllocationScope",
          "$category": "enum"
        },
        {
          "$name": "VkInternalAllocationType",
          "$category": "enum"
        },
        {
          "$name": "VkSamplerAddressMode",
          "$category": "enum"
        },
        {
          "$name": "VkFilter",
          "$category": "enum"
        },
        {
          "$name": "VkSamplerMipmapMode",
          "$category": "enum"
        },
        {
          "$name": "VkVertexInputRate",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineStageFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSparseImageFormatFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSampleCountFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkAttachmentDescriptionFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDescriptorPoolCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkDependencyFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkObjectType",
          "$category": "enum"
        },
        {
          "$name": "VkEventCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineLayoutCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkSemaphoreCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkRayTracingInvocationReorderModeNV",
          "$category": "enum"
        },
        {
          "$name": "VkIndirectCommandsLayoutUsageFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkIndirectCommandsTokenTypeNV",
          "$category": "enum"
        },
        {
          "$name": "VkIndirectStateFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkPrivateDataSlotCreateFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkPrivateDataSlotCreateFlagBitsEXT",
          "$alias": "VkPrivateDataSlotCreateFlagBits"
        },
        {
          "$name": "VkDescriptorUpdateTemplateType",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkDescriptorUpdateTemplateTypeKHR",
          "$alias": "VkDescriptorUpdateTemplateType"
        },
        {
          "$name": "VkViewportCoordinateSwizzleNV",
          "$category": "enum"
        },
        {
          "$name": "VkDiscardRectangleModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkSubpassDescriptionFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPointClippingBehavior",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkPointClippingBehaviorKHR",
          "$alias": "VkPointClippingBehavior"
        },
        {
          "$name": "VkCoverageModulationModeNV",
          "$category": "enum"
        },
        {
          "$name": "VkCoverageReductionModeNV",
          "$category": "enum"
        },
        {
          "$name": "VkValidationCacheHeaderVersionEXT",
          "$category": "enum"
        },
        {
          "$name": "VkShaderInfoTypeAMD",
          "$category": "enum"
        },
        {
          "$name": "VkQueueGlobalPriorityKHR",
          "$category": "enum"
        },
        {
          "$name": "VkQueueGlobalPriorityEXT",
          "$category": "enum",
          "$alias": "VkQueueGlobalPriorityKHR"
        },
        {
          "$name": "VkTimeDomainEXT",
          "$category": "enum"
        },
        {
          "$name": "VkConservativeRasterizationModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkResolveModeFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkResolveModeFlagBitsKHR",
          "$alias": "VkResolveModeFlagBits"
        },
        {
          "$name": "VkDescriptorBindingFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkDescriptorBindingFlagBitsEXT",
          "$alias": "VkDescriptorBindingFlagBits"
        },
        {
          "$name": "VkConditionalRenderingFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkSemaphoreType",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSemaphoreTypeKHR",
          "$alias": "VkSemaphoreType"
        },
        {
          "$name": "VkGeometryFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkGeometryFlagBitsNV",
          "$alias": "VkGeometryFlagBitsKHR"
        },
        {
          "$name": "VkGeometryInstanceFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkGeometryInstanceFlagBitsNV",
          "$alias": "VkGeometryInstanceFlagBitsKHR"
        },
        {
          "$name": "VkBuildAccelerationStructureFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkBuildAccelerationStructureFlagBitsNV",
          "$alias": "VkBuildAccelerationStructureFlagBitsKHR"
        },
        {
          "$name": "VkAccelerationStructureCreateFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkBuildAccelerationStructureModeKHR",
          "$category": "enum"
        },
        {
          "$name": "VkCopyAccelerationStructureModeKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkCopyAccelerationStructureModeNV",
          "$alias": "VkCopyAccelerationStructureModeKHR"
        },
        {
          "$name": "VkAccelerationStructureTypeKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkAccelerationStructureTypeNV",
          "$alias": "VkAccelerationStructureTypeKHR"
        },
        {
          "$name": "VkGeometryTypeKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkGeometryTypeNV",
          "$alias": "VkGeometryTypeKHR"
        },
        {
          "$name": "VkRayTracingShaderGroupTypeKHR",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkRayTracingShaderGroupTypeNV",
          "$alias": "VkRayTracingShaderGroupTypeKHR"
        },
        {
          "$name": "VkAccelerationStructureMemoryRequirementsTypeNV",
          "$category": "enum"
        },
        {
          "$name": "VkAccelerationStructureBuildTypeKHR",
          "$category": "enum"
        },
        {
          "$name": "VkAccelerationStructureCompatibilityKHR",
          "$category": "enum"
        },
        {
          "$name": "VkShaderGroupShaderKHR",
          "$category": "enum"
        },
        {
          "$name": "VkMemoryOverallocationBehaviorAMD",
          "$category": "enum"
        },
        {
          "$name": "VkScopeNV",
          "$category": "enum"
        },
        {
          "$name": "VkComponentTypeNV",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceDiagnosticsConfigFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineCreationFeedbackFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkPipelineCreationFeedbackFlagBitsEXT",
          "$alias": "VkPipelineCreationFeedbackFlagBits"
        },
        {
          "$name": "VkPerformanceCounterScopeKHR",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceCounterUnitKHR",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceCounterStorageKHR",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceCounterDescriptionFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkAcquireProfilingLockFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkSemaphoreWaitFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSemaphoreWaitFlagBitsKHR",
          "$alias": "VkSemaphoreWaitFlagBits"
        },
        {
          "$name": "VkPerformanceConfigurationTypeINTEL",
          "$category": "enum"
        },
        {
          "$name": "VkQueryPoolSamplingModeINTEL",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceOverrideTypeINTEL",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceParameterTypeINTEL",
          "$category": "enum"
        },
        {
          "$name": "VkPerformanceValueTypeINTEL",
          "$category": "enum"
        },
        {
          "$name": "VkLineRasterizationModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkShaderModuleCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineCompilerControlFlagBitsAMD",
          "$category": "enum"
        },
        {
          "$name": "VkShaderCorePropertiesFlagBitsAMD",
          "$category": "enum"
        },
        {
          "$name": "VkToolPurposeFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkToolPurposeFlagBitsEXT",
          "$alias": "VkToolPurposeFlagBits"
        },
        {
          "$name": "VkFragmentShadingRateNV",
          "$category": "enum"
        },
        {
          "$name": "VkFragmentShadingRateTypeNV",
          "$category": "enum"
        },
        {
          "$name": "VkSubpassMergeStatusEXT",
          "$category": "enum"
        },
        {
          "$name": "VkAccessFlagBits2",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkAccessFlagBits2KHR",
          "$alias": "VkAccessFlagBits2"
        },
        {
          "$name": "VkPipelineStageFlagBits2",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkPipelineStageFlagBits2KHR",
          "$alias": "VkPipelineStageFlagBits2"
        },
        {
          "$name": "VkProvokingVertexModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkImageFormatConstraintsFlagBitsFUCHSIA",
          "$category": "enum"
        },
        {
          "$name": "VkImageConstraintsInfoFlagBitsFUCHSIA",
          "$category": "enum"
        },
        {
          "$name": "VkFormatFeatureFlagBits2",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkFormatFeatureFlagBits2KHR",
          "$alias": "VkFormatFeatureFlagBits2"
        },
        {
          "$name": "VkRenderingFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkRenderingFlagBitsKHR",
          "$alias": "VkRenderingFlagBits"
        },
        {
          "$name": "VkPipelineDepthStencilStateCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineColorBlendStateCreateFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkImageCompressionFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkImageCompressionFixedRateFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkExportMetalObjectTypeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineRobustnessBufferBehaviorEXT",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineRobustnessImageBehaviorEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceAddressBindingFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceAddressBindingTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkMicromapTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkBuildMicromapModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkCopyMicromapModeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkBuildMicromapFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkMicromapCreateFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkOpacityMicromapFormatEXT",
          "$category": "enum"
        },
        {
          "$name": "VkOpacityMicromapSpecialIndexEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceFaultVendorBinaryHeaderVersionEXT",
          "$category": "enum"
        },
        {
          "$name": "VkMemoryDecompressionMethodFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkColorSpaceKHR",
          "$category": "enum"
        },
        {
          "$name": "VkCompositeAlphaFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkDisplayPlaneAlphaFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkPresentModeKHR",
          "$category": "enum"
        },
        {
          "$name": "VkSurfaceTransformFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkDebugReportFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDebugReportObjectTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceMemoryReportEventTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkRasterizationOrderAMD",
          "$category": "enum"
        },
        {
          "$name": "VkExternalMemoryHandleTypeFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkExternalMemoryFeatureFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkValidationCheckEXT",
          "$category": "enum"
        },
        {
          "$name": "VkValidationFeatureEnableEXT",
          "$category": "enum"
        },
        {
          "$name": "VkValidationFeatureDisableEXT",
          "$category": "enum"
        },
        {
          "$name": "VkExternalMemoryHandleTypeFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalMemoryHandleTypeFlagBitsKHR",
          "$alias": "VkExternalMemoryHandleTypeFlagBits"
        },
        {
          "$name": "VkExternalMemoryFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalMemoryFeatureFlagBitsKHR",
          "$alias": "VkExternalMemoryFeatureFlagBits"
        },
        {
          "$name": "VkExternalSemaphoreHandleTypeFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalSemaphoreHandleTypeFlagBitsKHR",
          "$alias": "VkExternalSemaphoreHandleTypeFlagBits"
        },
        {
          "$name": "VkExternalSemaphoreFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalSemaphoreFeatureFlagBitsKHR",
          "$alias": "VkExternalSemaphoreFeatureFlagBits"
        },
        {
          "$name": "VkSemaphoreImportFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSemaphoreImportFlagBitsKHR",
          "$alias": "VkSemaphoreImportFlagBits"
        },
        {
          "$name": "VkExternalFenceHandleTypeFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalFenceHandleTypeFlagBitsKHR",
          "$alias": "VkExternalFenceHandleTypeFlagBits"
        },
        {
          "$name": "VkExternalFenceFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkExternalFenceFeatureFlagBitsKHR",
          "$alias": "VkExternalFenceFeatureFlagBits"
        },
        {
          "$name": "VkFenceImportFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkFenceImportFlagBitsKHR",
          "$alias": "VkFenceImportFlagBits"
        },
        {
          "$name": "VkSurfaceCounterFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDisplayPowerStateEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceEventTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDisplayEventTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkPeerMemoryFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkPeerMemoryFeatureFlagBitsKHR",
          "$alias": "VkPeerMemoryFeatureFlagBits"
        },
        {
          "$name": "VkMemoryAllocateFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkMemoryAllocateFlagBitsKHR",
          "$alias": "VkMemoryAllocateFlagBits"
        },
        {
          "$name": "VkDeviceGroupPresentModeFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkSwapchainCreateFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkSubgroupFeatureFlagBits",
          "$category": "enum"
        },
        {
          "$name": "VkTessellationDomainOrigin",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkTessellationDomainOriginKHR",
          "$alias": "VkTessellationDomainOrigin"
        },
        {
          "$name": "VkSamplerYcbcrModelConversion",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSamplerYcbcrModelConversionKHR",
          "$alias": "VkSamplerYcbcrModelConversion"
        },
        {
          "$name": "VkSamplerYcbcrRange",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSamplerYcbcrRangeKHR",
          "$alias": "VkSamplerYcbcrRange"
        },
        {
          "$name": "VkChromaLocation",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkChromaLocationKHR",
          "$alias": "VkChromaLocation"
        },
        {
          "$name": "VkSamplerReductionMode",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSamplerReductionModeEXT",
          "$alias": "VkSamplerReductionMode"
        },
        {
          "$name": "VkBlendOverlapEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDebugUtilsMessageSeverityFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkDebugUtilsMessageTypeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkFullScreenExclusiveEXT",
          "$category": "enum"
        },
        {
          "$name": "VkShaderFloatControlsIndependence",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkShaderFloatControlsIndependenceKHR",
          "$alias": "VkShaderFloatControlsIndependence"
        },
        {
          "$name": "VkSwapchainImageUsageFlagBitsANDROID",
          "$category": "enum"
        },
        {
          "$name": "VkFragmentShadingRateCombinerOpKHR",
          "$category": "enum"
        },
        {
          "$name": "VkSubmitFlagBits",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkSubmitFlagBitsKHR",
          "$alias": "VkSubmitFlagBits"
        },
        {
          "$name": "VkGraphicsPipelineLibraryFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowGridSizeFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowUsageFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowPerformanceLevelNV",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowSessionBindingPointNV",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowSessionCreateFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkOpticalFlowExecuteFlagBitsNV",
          "$category": "enum"
        },
        {
          "$name": "VkDeviceFaultAddressTypeEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVendorId",
          "$category": "enum"
        },
        {
          "$name": "VkDriverId",
          "$category": "enum"
        },
        {
          "$category": "enum",
          "$name": "VkDriverIdKHR",
          "$alias": "VkDriverId"
        },
        {
          "$name": "VkShadingRatePaletteEntryNV",
          "$category": "enum"
        },
        {
          "$name": "VkCoarseSampleOrderTypeNV",
          "$category": "enum"
        },
        {
          "$name": "VkPipelineExecutableStatisticFormatKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoCodecOperationFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoChromaSubsamplingFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoComponentBitDepthFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoCapabilityFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoSessionCreateFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoCodingControlFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkQueryResultStatusKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoDecodeUsageFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoDecodeCapabilityFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoDecodeH264PictureLayoutFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeUsageFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeContentFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeTuningModeKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeCapabilityFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeRateControlModeFlagBitsKHR",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH264CapabilityFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH264InputModeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH264OutputModeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH264RateControlStructureEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265CapabilityFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265InputModeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265OutputModeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265RateControlStructureEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265CtbSizeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "$name": "VkVideoEncodeH265TransformBlockSizeFlagBitsEXT",
          "$category": "enum"
        },
        {
          "name": {
            "#text": "PFN_vkInternalAllocationNotification"
          },
          "type": [
            {
              "#text": "void"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "VkInternalAllocationType"
            },
            {
              "#text": "VkSystemAllocationScope"
            }
          ],
          "#text": "typedef void (VKAPI_PTR *)(*                                       pUserData,size,allocationType,allocationScope);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkInternalFreeNotification"
          },
          "type": [
            {
              "#text": "void"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "VkInternalAllocationType"
            },
            {
              "#text": "VkSystemAllocationScope"
            }
          ],
          "#text": "typedef void (VKAPI_PTR *)(*                                       pUserData,size,allocationType,allocationScope);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkReallocationFunction"
          },
          "type": [
            {
              "#text": "void"
            },
            {
              "#text": "void"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "VkSystemAllocationScope"
            }
          ],
          "#text": "typedef void* (VKAPI_PTR *)(*                                       pUserData,*                                       pOriginal,size,alignment,allocationScope);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkAllocationFunction"
          },
          "type": [
            {
              "#text": "void"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "VkSystemAllocationScope"
            }
          ],
          "#text": "typedef void* (VKAPI_PTR *)(*                                       pUserData,size,alignment,allocationScope);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkFreeFunction"
          },
          "type": [
            {
              "#text": "void"
            },
            {
              "#text": "void"
            }
          ],
          "#text": "typedef void (VKAPI_PTR *)(*                                       pUserData,*                                       pMemory);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkVoidFunction"
          },
          "#text": "typedef void (VKAPI_PTR *)(void);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkDebugReportCallbackEXT"
          },
          "type": [
            {
              "#text": "VkDebugReportFlagsEXT"
            },
            {
              "#text": "VkDebugReportObjectTypeEXT"
            },
            {
              "#text": "uint64_t"
            },
            {
              "#text": "size_t"
            },
            {
              "#text": "int32_t"
            },
            {
              "#text": "char"
            },
            {
              "#text": "char"
            },
            {
              "#text": "void"
            }
          ],
          "#text": "typedef VkBool32 (VKAPI_PTR *)(flags,objectType,object,location,messageCode,\n    const*                                 pLayerPrefix,\n    const*                                 pMessage,*                                       pUserData);",
          "$category": "funcpointer"
        },
        {
          "name": {
            "#text": "PFN_vkDebugUtilsMessengerCallbackEXT"
          },
          "type": [
            {
              "#text": "VkDebugUtilsMessageSeverityFlagBitsEXT"
            },
            {
              "#text": "VkDebugUtilsMessageTypeFlagsEXT"
            },
            {
              "#text": "VkDebugUtilsMessengerCallbackDataEXT"
            },
            {
              "#text": "void"
            }
          ],
          "#text": "typedef VkBool32 (VKAPI_PTR *)(messageSeverity,messageTypes,\n    const*      pCallbackData,*                                            pUserData);",
          "$category": "funcpointer",
          "$requires": "VkDebugUtilsMessengerCallbackDataEXT"
        },
        {
          "name": {
            "#text": "PFN_vkDeviceMemoryReportCallbackEXT"
          },
          "type": [
            {
              "#text": "VkDeviceMemoryReportCallbackDataEXT"
            },
            {
              "#text": "void"
            }
          ],
          "#text": "typedef void (VKAPI_PTR *)(\n    const*  pCallbackData,*                                       pUserData);",
          "$category": "funcpointer",
          "$requires": "VkDeviceMemoryReportCallbackDataEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              }
            },
            {
              "type": {
                "#text": "VkBaseOutStructure"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "struct*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkBaseOutStructure"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              }
            },
            {
              "type": {
                "#text": "VkBaseInStructure"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const struct*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkBaseInStructure"
        },
        {
          "member": [
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "x"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "y"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkOffset2D"
        },
        {
          "member": [
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "x"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "y"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "z"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkOffset3D"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExtent2D"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "depth"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExtent3D"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "x"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "y"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "width"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "height"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minDepth"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxDepth"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkViewport"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "extent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRect2D"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "rect"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseArrayLayer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layerCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkClearRect"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkComponentSwizzle"
              },
              "name": {
                "#text": "r"
              }
            },
            {
              "type": {
                "#text": "VkComponentSwizzle"
              },
              "name": {
                "#text": "g"
              }
            },
            {
              "type": {
                "#text": "VkComponentSwizzle"
              },
              "name": {
                "#text": "b"
              }
            },
            {
              "type": {
                "#text": "VkComponentSwizzle"
              },
              "name": {
                "#text": "a"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkComponentMapping"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "apiVersion"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "driverVersion"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vendorID"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceID"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceType"
              },
              "name": {
                "#text": "deviceType"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "deviceName"
              },
              "enum": {
                "#text": "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pipelineCacheUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceLimits"
              },
              "name": {
                "#text": "limits"
              },
              "$limittype": "struct"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSparseProperties"
              },
              "name": {
                "#text": "sparseProperties"
              },
              "$limittype": "struct"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "extensionName"
              },
              "enum": {
                "#text": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              "comment": {
                "#text": "extension name"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "specVersion"
              },
              "comment": {
                "#text": "version of the extension specification implemented"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExtensionProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "layerName"
              },
              "enum": {
                "#text": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              "comment": {
                "#text": "layer name"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "specVersion"
              },
              "comment": {
                "#text": "version of the layer specification implemented"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "implementationVersion"
              },
              "comment": {
                "#text": "build or release version of the layer's library"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "comment": {
                "#text": "Free-form description of the layer"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkLayerProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_APPLICATION_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pApplicationName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "applicationVersion"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pEngineName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "engineVersion"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "apiVersion"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkApplicationInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pUserData"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "PFN_vkAllocationFunction"
              },
              "name": {
                "#text": "pfnAllocation"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "PFN_vkReallocationFunction"
              },
              "name": {
                "#text": "pfnReallocation"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "PFN_vkFreeFunction"
              },
              "name": {
                "#text": "pfnFree"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "PFN_vkInternalAllocationNotification"
              },
              "name": {
                "#text": "pfnInternalAllocation"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "PFN_vkInternalFreeNotification"
              },
              "name": {
                "#text": "pfnInternalFree"
              },
              "$optional": true,
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAllocationCallbacks"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceQueueCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueCount"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pQueuePriorities"
              },
              "#text": "const*",
              "$len": "queueCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceQueueCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueCreateInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkDeviceQueueCreateInfo"
              },
              "name": {
                "#text": "pQueueCreateInfos"
              },
              "#text": "const*",
              "$len": "queueCreateInfoCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "enabledLayerCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "ppEnabledLayerNames"
              },
              "comment": {
                "#text": "Ordered list of layer names to be enabled"
              },
              "#text": "const* const*",
              "$len": "enabledLayerCount,null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "enabledExtensionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "ppEnabledExtensionNames"
              },
              "#text": "const* const*",
              "$len": "enabledExtensionCount,null-terminated"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceFeatures"
              },
              "name": {
                "#text": "pEnabledFeatures"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkInstanceCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkApplicationInfo"
              },
              "name": {
                "#text": "pApplicationInfo"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "enabledLayerCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "ppEnabledLayerNames"
              },
              "comment": {
                "#text": "Ordered list of layer names to be enabled"
              },
              "#text": "const* const*",
              "$len": "enabledLayerCount,null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "enabledExtensionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "ppEnabledExtensionNames"
              },
              "comment": {
                "#text": "Extension names to be enabled"
              },
              "#text": "const* const*",
              "$len": "enabledExtensionCount,null-terminated"
            }
          ],
          "$category": "struct",
          "$name": "VkInstanceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkQueueFlags"
              },
              "name": {
                "#text": "queueFlags"
              },
              "comment": {
                "#text": "Queue flags"
              },
              "$optional": true,
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "timestampValidBits"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "minImageTransferGranularity"
              },
              "comment": {
                "#text": "Minimum alignment requirement for image transfers"
              },
              "$limittype": "min,mul"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeCount"
              }
            },
            {
              "type": {
                "#text": "VkMemoryType"
              },
              "name": {
                "#text": "memoryTypes"
              },
              "enum": {
                "#text": "VK_MAX_MEMORY_TYPES"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryHeapCount"
              }
            },
            {
              "type": {
                "#text": "VkMemoryHeap"
              },
              "name": {
                "#text": "memoryHeaps"
              },
              "enum": {
                "#text": "VK_MAX_MEMORY_HEAPS"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "allocationSize"
              },
              "comment": {
                "#text": "Size of memory allocation"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeIndex"
              },
              "comment": {
                "#text": "Index of the of the memory type to allocate from"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "alignment"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              },
              "comment": {
                "#text": "Bitmask of the allowed memory type indices into memoryTypes[] for this object"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryRequirements",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "imageGranularity"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "VkSparseImageFormatFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$limittype": "bitmask",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageFormatProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkSparseImageFormatProperties"
              },
              "name": {
                "#text": "formatProperties"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageMipTailFirstLod"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "imageMipTailSize"
              },
              "comment": {
                "#text": "Specified in bytes, must be a multiple of sparse block size in bytes / alignment"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "imageMipTailOffset"
              },
              "comment": {
                "#text": "Specified in bytes, must be a multiple of sparse block size in bytes / alignment"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "imageMipTailStride"
              },
              "comment": {
                "#text": "Specified in bytes, must be a multiple of sparse block size in bytes / alignment"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageMemoryRequirements",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkMemoryPropertyFlags"
              },
              "name": {
                "#text": "propertyFlags"
              },
              "comment": {
                "#text": "Memory properties of this memory type"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "heapIndex"
              },
              "comment": {
                "#text": "Index of the memory heap allocations of this memory type are taken from"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryType",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Available memory in the heap"
              }
            },
            {
              "type": {
                "#text": "VkMemoryHeapFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Flags for the heap"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryHeap",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "comment": {
                "#text": "Mapped memory object"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset within the memory object where the range starts"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Size of the range within the memory object"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMappedMemoryRange"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "linearTilingFeatures"
              },
              "comment": {
                "#text": "Format features in case of linear tiling"
              },
              "$optional": true,
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "optimalTilingFeatures"
              },
              "comment": {
                "#text": "Format features in case of optimal tiling"
              },
              "$optional": true,
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "bufferFeatures"
              },
              "comment": {
                "#text": "Format features supported by buffers"
              },
              "$optional": true,
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkFormatProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "maxExtent"
              },
              "comment": {
                "#text": "max image dimensions for this resource type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMipLevels"
              },
              "comment": {
                "#text": "max number of mipmap levels for this resource type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxArrayLayers"
              },
              "comment": {
                "#text": "max array size for this resource type"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampleCounts"
              },
              "comment": {
                "#text": "supported sample counts for this resource type"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxResourceSize"
              },
              "comment": {
                "#text": "max size (in bytes) of this resource type"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageFormatProperties",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "comment": {
                "#text": "Buffer used for this descriptor slot."
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Base offset from buffer start in bytes to update in the descriptor set."
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "range"
              },
              "comment": {
                "#text": "Size in bytes of the buffer resource for this descriptor update."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorBufferInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "sampler"
              },
              "comment": {
                "#text": "Sampler to write to the descriptor in case it is a SAMPLER or COMBINED_IMAGE_SAMPLER descriptor. Ignored otherwise."
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "comment": {
                "#text": "Image view to write to the descriptor in case it is a SAMPLED_IMAGE, STORAGE_IMAGE, COMBINED_IMAGE_SAMPLER, or INPUT_ATTACHMENT descriptor. Ignored otherwise."
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              },
              "comment": {
                "#text": "Layout the image is expected to be in when accessed using this descriptor (only used if imageView is not VK_NULL_HANDLE)."
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorImageInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "dstSet"
              },
              "comment": {
                "#text": "Destination descriptor set"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstBinding"
              },
              "comment": {
                "#text": "Binding within the destination descriptor set to write"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstArrayElement"
              },
              "comment": {
                "#text": "Array element within the destination binding to write"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCount"
              },
              "comment": {
                "#text": "Number of descriptors to write (determines the size of the array pointed by pDescriptors)"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "descriptorType"
              },
              "comment": {
                "#text": "Descriptor type to write (determines which members of the array pointed by pDescriptors are going to be used)"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorImageInfo"
              },
              "name": {
                "#text": "pImageInfo"
              },
              "comment": {
                "#text": "Sampler, image view, and layout for SAMPLER, COMBINED_IMAGE_SAMPLER, {SAMPLED,STORAGE}_IMAGE, and INPUT_ATTACHMENT descriptor types."
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "descriptorCount"
            },
            {
              "type": {
                "#text": "VkDescriptorBufferInfo"
              },
              "name": {
                "#text": "pBufferInfo"
              },
              "comment": {
                "#text": "Raw buffer, size, and offset for {UNIFORM,STORAGE}_BUFFER[_DYNAMIC] descriptor types."
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "descriptorCount"
            },
            {
              "type": {
                "#text": "VkBufferView"
              },
              "name": {
                "#text": "pTexelBufferView"
              },
              "comment": {
                "#text": "Buffer view to write to the descriptor for {UNIFORM,STORAGE}_TEXEL_BUFFER descriptor types."
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "descriptorCount"
            }
          ],
          "$category": "struct",
          "$name": "VkWriteDescriptorSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "srcSet"
              },
              "comment": {
                "#text": "Source descriptor set"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcBinding"
              },
              "comment": {
                "#text": "Binding within the source descriptor set to copy from"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcArrayElement"
              },
              "comment": {
                "#text": "Array element within the source binding to copy from"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "dstSet"
              },
              "comment": {
                "#text": "Destination descriptor set"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstBinding"
              },
              "comment": {
                "#text": "Binding within the destination descriptor set to copy to"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstArrayElement"
              },
              "comment": {
                "#text": "Array element within the destination binding to copy to"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCount"
              },
              "comment": {
                "#text": "Number of descriptors to write (determines the size of the array pointed by pDescriptors)"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyDescriptorSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Buffer creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkBufferUsageFlags"
              },
              "name": {
                "#text": "usage"
              },
              "comment": {
                "#text": "Buffer usage flags"
              }
            },
            {
              "type": {
                "#text": "VkSharingMode"
              },
              "name": {
                "#text": "sharingMode"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndexCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyIndices"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "queueFamilyIndexCount"
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferViewCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              },
              "comment": {
                "#text": "Optionally specifies format of elements"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "range"
              },
              "comment": {
                "#text": "View size specified in bytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferViewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mipLevel"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "arrayLayer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageSubresource"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mipLevel"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseArrayLayer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layerCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageSubresourceLayers"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseMipLevel"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "levelCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseArrayLayer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layerCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageSubresourceRange"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_BARRIER"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the source of the dependency to synchronize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the destination of the dependency to synchronize"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryBarrier"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the source of the dependency to synchronize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the destination of the dependency to synchronize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcQueueFamilyIndex"
              },
              "comment": {
                "#text": "Queue family to transition ownership from"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstQueueFamilyIndex"
              },
              "comment": {
                "#text": "Queue family to transition ownership to"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "comment": {
                "#text": "Buffer to sync"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset within the buffer to sync"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Amount of bytes to sync"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferMemoryBarrier"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the source of the dependency to synchronize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the destination of the dependency to synchronize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "oldLayout"
              },
              "comment": {
                "#text": "Current layout of the image"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "newLayout"
              },
              "comment": {
                "#text": "New layout to transition the image to"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcQueueFamilyIndex"
              },
              "comment": {
                "#text": "Queue family to transition ownership from"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstQueueFamilyIndex"
              },
              "comment": {
                "#text": "Queue family to transition ownership to"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "comment": {
                "#text": "Image to sync"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceRange"
              },
              "name": {
                "#text": "subresourceRange"
              },
              "comment": {
                "#text": "Subresource range to sync"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageMemoryBarrier"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Image creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "imageType"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mipLevels"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "arrayLayers"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              },
              "comment": {
                "#text": "Image usage flags"
              }
            },
            {
              "type": {
                "#text": "VkSharingMode"
              },
              "name": {
                "#text": "sharingMode"
              },
              "comment": {
                "#text": "Cross-queue-family sharing mode"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndexCount"
              },
              "comment": {
                "#text": "Number of queue families to share across"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyIndices"
              },
              "comment": {
                "#text": "Array of queue family indices to share across"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "queueFamilyIndexCount"
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "initialLayout"
              },
              "comment": {
                "#text": "Initial image layout for all subresources"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "rowPitch"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "arrayPitch"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "depthPitch"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubresourceLayout",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageViewCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageViewType"
              },
              "name": {
                "#text": "viewType"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "components"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceRange"
              },
              "name": {
                "#text": "subresourceRange"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "srcOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCopy"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "resourceOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkSparseMemoryBindFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSparseMemoryBind"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageSubresource"
              },
              "name": {
                "#text": "subresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkSparseMemoryBindFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageMemoryBind"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindCount"
              }
            },
            {
              "type": {
                "#text": "VkSparseMemoryBind"
              },
              "name": {
                "#text": "pBinds"
              },
              "#text": "const*",
              "$len": "bindCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSparseBufferMemoryBindInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindCount"
              }
            },
            {
              "type": {
                "#text": "VkSparseMemoryBind"
              },
              "name": {
                "#text": "pBinds"
              },
              "#text": "const*",
              "$len": "bindCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageOpaqueMemoryBindInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindCount"
              }
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryBind"
              },
              "name": {
                "#text": "pBinds"
              },
              "#text": "const*",
              "$len": "bindCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageMemoryBindInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pWaitSemaphores"
              },
              "#text": "const*",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferBindCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSparseBufferMemoryBindInfo"
              },
              "name": {
                "#text": "pBufferBinds"
              },
              "#text": "const*",
              "$len": "bufferBindCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageOpaqueBindCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSparseImageOpaqueMemoryBindInfo"
              },
              "name": {
                "#text": "pImageOpaqueBinds"
              },
              "#text": "const*",
              "$len": "imageOpaqueBindCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageBindCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryBindInfo"
              },
              "name": {
                "#text": "pImageBinds"
              },
              "#text": "const*",
              "$len": "imageBindCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pSignalSemaphores"
              },
              "#text": "const*",
              "$len": "signalSemaphoreCount"
            }
          ],
          "$category": "struct",
          "$name": "VkBindSparseInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageCopy"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffsets"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              },
              "#text": "[2]"
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffsets"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              },
              "#text": "[2]"
            }
          ],
          "$category": "struct",
          "$name": "VkImageBlit"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "bufferOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferRowLength"
              },
              "comment": {
                "#text": "Specified in texels"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferImageHeight"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "imageSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "imageOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "imageExtent"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferImageCopy"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "srcAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "dstAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMemoryIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "srcAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferRowLength"
              },
              "comment": {
                "#text": "Specified in texels"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferImageHeight"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "imageSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "imageOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "imageExtent"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMemoryToImageIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffset"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageResolve"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "comment": {
                "#text": "noautovalidity because this structure can be either an explicit parameter, or passed in a pNext chain"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderModuleCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "codeSize"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCode"
              },
              "comment": {
                "#text": "Binary code of size codeSize"
              },
              "#text": "const*",
              "$len": "latexmath:[\\textrm{codeSize} \\over 4]",
              "$altlen": "codeSize / 4"
            }
          ],
          "$category": "struct",
          "$name": "VkShaderModuleCreateInfo",
          "$structextends": "VkPipelineShaderStageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              },
              "comment": {
                "#text": "Binding number for this entry"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "descriptorType"
              },
              "comment": {
                "#text": "Type of the descriptors in this binding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCount"
              },
              "comment": {
                "#text": "Number of descriptors in this binding"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "stageFlags"
              },
              "comment": {
                "#text": "Shader stages this binding is visible to"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "pImmutableSamplers"
              },
              "comment": {
                "#text": "Immutable samplers (used if descriptor type is SAMPLER or COMBINED_IMAGE_SAMPLER, is either NULL or contains count number of elements)"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true,
              "$len": "descriptorCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutBinding"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindingCount"
              },
              "comment": {
                "#text": "Number of bindings in the descriptor set layout"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutBinding"
              },
              "name": {
                "#text": "pBindings"
              },
              "comment": {
                "#text": "Array of descriptor set layout bindings"
              },
              "#text": "const*",
              "$len": "bindingCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorPoolSize"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorPoolCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSets"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "poolSizeCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorPoolSize"
              },
              "name": {
                "#text": "pPoolSizes"
              },
              "#text": "const*",
              "$len": "poolSizeCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorPool"
              },
              "name": {
                "#text": "descriptorPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorSetCount"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "pSetLayouts"
              },
              "#text": "const*",
              "$len": "descriptorSetCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "constantID"
              },
              "comment": {
                "#text": "The SpecConstant ID specified in the BIL"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset of the value in the data block"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Size in bytes of the SpecConstant"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkSpecializationMapEntry"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mapEntryCount"
              },
              "comment": {
                "#text": "Number of entries in the map"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSpecializationMapEntry"
              },
              "name": {
                "#text": "pMapEntries"
              },
              "comment": {
                "#text": "Array of map entries"
              },
              "#text": "const*",
              "$len": "mapEntryCount"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              },
              "comment": {
                "#text": "Size in bytes of pData"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "comment": {
                "#text": "Pointer to SpecConstant data"
              },
              "#text": "const*",
              "$len": "dataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkSpecializationInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlagBits"
              },
              "name": {
                "#text": "stage"
              },
              "comment": {
                "#text": "Shader stage"
              }
            },
            {
              "type": {
                "#text": "VkShaderModule"
              },
              "name": {
                "#text": "module"
              },
              "comment": {
                "#text": "Module containing entry point"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pName"
              },
              "comment": {
                "#text": "Null-terminated entry point name"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "VkSpecializationInfo"
              },
              "name": {
                "#text": "pSpecializationInfo"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineShaderStageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Pipeline creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateInfo"
              },
              "name": {
                "#text": "stage"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              },
              "comment": {
                "#text": "Interface layout of the pipeline"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "basePipelineHandle"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "basePipelineIndex"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkComputePipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              },
              "comment": {
                "#text": "Vertex buffer binding id"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              },
              "comment": {
                "#text": "Distance between vertices in bytes (0 = no advancement)"
              }
            },
            {
              "type": {
                "#text": "VkVertexInputRate"
              },
              "name": {
                "#text": "inputRate"
              },
              "comment": {
                "#text": "The rate at which the vertex data is consumed"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVertexInputBindingDescription"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "location"
              },
              "comment": {
                "#text": "location of the shader vertex attrib"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              },
              "comment": {
                "#text": "Vertex buffer binding id"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              },
              "comment": {
                "#text": "format of source data"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset of first element in bytes from base of vertex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVertexInputAttributeDescription"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineVertexInputStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexBindingDescriptionCount"
              },
              "comment": {
                "#text": "number of bindings"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVertexInputBindingDescription"
              },
              "name": {
                "#text": "pVertexBindingDescriptions"
              },
              "#text": "const*",
              "$len": "vertexBindingDescriptionCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexAttributeDescriptionCount"
              },
              "comment": {
                "#text": "number of attributes"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVertexInputAttributeDescription"
              },
              "name": {
                "#text": "pVertexAttributeDescriptions"
              },
              "#text": "const*",
              "$len": "vertexAttributeDescriptionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineVertexInputStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineInputAssemblyStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPrimitiveTopology"
              },
              "name": {
                "#text": "topology"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveRestartEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineInputAssemblyStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineTessellationStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "patchControlPoints"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineTessellationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineViewportStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkViewport"
              },
              "name": {
                "#text": "pViewports"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true,
              "$len": "viewportCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "scissorCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pScissors"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true,
              "$len": "scissorCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRasterizationStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClampEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rasterizerDiscardEnable"
              }
            },
            {
              "type": {
                "#text": "VkPolygonMode"
              },
              "name": {
                "#text": "polygonMode"
              },
              "comment": {
                "#text": "optional (GL45)"
              }
            },
            {
              "type": {
                "#text": "VkCullModeFlags"
              },
              "name": {
                "#text": "cullMode"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFrontFace"
              },
              "name": {
                "#text": "frontFace"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBiasEnable"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasConstantFactor"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasClamp"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasSlopeFactor"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "lineWidth"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineMultisampleStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "rasterizationSamples"
              },
              "comment": {
                "#text": "Number of samples used for rasterization"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sampleShadingEnable"
              },
              "comment": {
                "#text": "optional (GL45)"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minSampleShading"
              },
              "comment": {
                "#text": "optional (GL45)"
              }
            },
            {
              "type": {
                "#text": "VkSampleMask"
              },
              "name": {
                "#text": "pSampleMask"
              },
              "comment": {
                "#text": "Array of sampleMask words"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "latexmath:[\\lceil{\\mathit{rasterizationSamples} \\over 32}\\rceil]",
              "$altlen": "(rasterizationSamples + 31) / 32"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "alphaToCoverageEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "alphaToOneEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineMultisampleStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "blendEnable"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "srcColorBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "dstColorBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendOp"
              },
              "name": {
                "#text": "colorBlendOp"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "srcAlphaBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "dstAlphaBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendOp"
              },
              "name": {
                "#text": "alphaBlendOp"
              }
            },
            {
              "type": {
                "#text": "VkColorComponentFlags"
              },
              "name": {
                "#text": "colorWriteMask"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineColorBlendAttachmentState"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineColorBlendStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "logicOpEnable"
              }
            },
            {
              "type": {
                "#text": "VkLogicOp"
              },
              "name": {
                "#text": "logicOp"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "comment": {
                "#text": "# of pAttachments"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineColorBlendAttachmentState"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "attachmentCount"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "blendConstants"
              },
              "#text": "[4]"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineColorBlendStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDynamicStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dynamicStateCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDynamicState"
              },
              "name": {
                "#text": "pDynamicStates"
              },
              "#text": "const*",
              "$len": "dynamicStateCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineDynamicStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "failOp"
              }
            },
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "passOp"
              }
            },
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "depthFailOp"
              }
            },
            {
              "type": {
                "#text": "VkCompareOp"
              },
              "name": {
                "#text": "compareOp"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "compareMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "writeMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reference"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkStencilOpState"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDepthStencilStateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthTestEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthWriteEnable"
              }
            },
            {
              "type": {
                "#text": "VkCompareOp"
              },
              "name": {
                "#text": "depthCompareOp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBoundsTestEnable"
              },
              "comment": {
                "#text": "optional (depth_bounds_test)"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stencilTestEnable"
              }
            },
            {
              "type": {
                "#text": "VkStencilOpState"
              },
              "name": {
                "#text": "front"
              }
            },
            {
              "type": {
                "#text": "VkStencilOpState"
              },
              "name": {
                "#text": "back"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minDepthBounds"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxDepthBounds"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineDepthStencilStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Pipeline creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stageCount"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateInfo"
              },
              "name": {
                "#text": "pStages"
              },
              "comment": {
                "#text": "One entry for each active shader stage"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "stageCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineVertexInputStateCreateInfo"
              },
              "name": {
                "#text": "pVertexInputState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineInputAssemblyStateCreateInfo"
              },
              "name": {
                "#text": "pInputAssemblyState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineTessellationStateCreateInfo"
              },
              "name": {
                "#text": "pTessellationState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineViewportStateCreateInfo"
              },
              "name": {
                "#text": "pViewportState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRasterizationStateCreateInfo"
              },
              "name": {
                "#text": "pRasterizationState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineMultisampleStateCreateInfo"
              },
              "name": {
                "#text": "pMultisampleState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDepthStencilStateCreateInfo"
              },
              "name": {
                "#text": "pDepthStencilState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineColorBlendStateCreateInfo"
              },
              "name": {
                "#text": "pColorBlendState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDynamicStateCreateInfo"
              },
              "name": {
                "#text": "pDynamicState"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              },
              "comment": {
                "#text": "Interface layout of the pipeline"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpass"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "basePipelineHandle"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "basePipelineIndex"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCacheCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "initialDataSize"
              },
              "comment": {
                "#text": "Size of initial data to populate cache, in bytes"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pInitialData"
              },
              "comment": {
                "#text": "Initial data to populate cache"
              },
              "#text": "const*",
              "$len": "initialDataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCacheCreateInfo"
        },
        {
          "comment": {
            "#text": "The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout."
          },
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "headerSize"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCacheHeaderVersion"
              },
              "name": {
                "#text": "headerVersion"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vendorID"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceID"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pipelineCacheUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCacheHeaderVersionOne"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "stageFlags"
              },
              "comment": {
                "#text": "Which stages use the range"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Start of the range, in bytes"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Size of the range, in bytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPushConstantRange"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineLayoutCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "setLayoutCount"
              },
              "comment": {
                "#text": "Number of descriptor sets interfaced by the pipeline"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "pSetLayouts"
              },
              "comment": {
                "#text": "Array of setCount number of descriptor set layout objects defining the layout of the"
              },
              "#text": "const*",
              "$optional": "false,true",
              "$len": "setLayoutCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pushConstantRangeCount"
              },
              "comment": {
                "#text": "Number of push-constant ranges used by the pipeline"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPushConstantRange"
              },
              "name": {
                "#text": "pPushConstantRanges"
              },
              "comment": {
                "#text": "Array of pushConstantRangeCount number of ranges used by various shader stages"
              },
              "#text": "const*",
              "$len": "pushConstantRangeCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineLayoutCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSamplerCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFilter"
              },
              "name": {
                "#text": "magFilter"
              },
              "comment": {
                "#text": "Filter mode for magnification"
              }
            },
            {
              "type": {
                "#text": "VkFilter"
              },
              "name": {
                "#text": "minFilter"
              },
              "comment": {
                "#text": "Filter mode for minifiation"
              }
            },
            {
              "type": {
                "#text": "VkSamplerMipmapMode"
              },
              "name": {
                "#text": "mipmapMode"
              },
              "comment": {
                "#text": "Mipmap selection mode"
              }
            },
            {
              "type": {
                "#text": "VkSamplerAddressMode"
              },
              "name": {
                "#text": "addressModeU"
              }
            },
            {
              "type": {
                "#text": "VkSamplerAddressMode"
              },
              "name": {
                "#text": "addressModeV"
              }
            },
            {
              "type": {
                "#text": "VkSamplerAddressMode"
              },
              "name": {
                "#text": "addressModeW"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "mipLodBias"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "anisotropyEnable"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxAnisotropy"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "compareEnable"
              }
            },
            {
              "type": {
                "#text": "VkCompareOp"
              },
              "name": {
                "#text": "compareOp"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minLod"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxLod"
              }
            },
            {
              "type": {
                "#text": "VkBorderColor"
              },
              "name": {
                "#text": "borderColor"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "unnormalizedCoordinates"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandPoolCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Command pool creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCommandPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "commandPool"
              }
            },
            {
              "type": {
                "#text": "VkCommandBufferLevel"
              },
              "name": {
                "#text": "level"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              },
              "comment": {
                "#text": "Render pass for secondary command buffers"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpass"
              }
            },
            {
              "type": {
                "#text": "VkFramebuffer"
              },
              "name": {
                "#text": "framebuffer"
              },
              "comment": {
                "#text": "Framebuffer for secondary command buffers"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "occlusionQueryEnable"
              },
              "comment": {
                "#text": "Whether this secondary command buffer may be executed during an occlusion query"
              }
            },
            {
              "type": {
                "#text": "VkQueryControlFlags"
              },
              "name": {
                "#text": "queryFlags"
              },
              "comment": {
                "#text": "Query flags used by this secondary command buffer, if executed during an occlusion query"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkQueryPipelineStatisticFlags"
              },
              "name": {
                "#text": "pipelineStatistics"
              },
              "comment": {
                "#text": "Pipeline statistics that may be counted for this secondary command buffer"
              },
              "$optional": true,
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandBufferUsageFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Command buffer usage flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandBufferInheritanceInfo"
              },
              "name": {
                "#text": "pInheritanceInfo"
              },
              "comment": {
                "#text": "Pointer to inheritance info for secondary command buffers"
              },
              "#text": "const*",
              "$optional": true,
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              }
            },
            {
              "type": {
                "#text": "VkFramebuffer"
              },
              "name": {
                "#text": "framebuffer"
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "renderArea"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "clearValueCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkClearValue"
              },
              "name": {
                "#text": "pClearValues"
              },
              "#text": "const*",
              "$len": "clearValueCount",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "float32"
              },
              "#text": "[4]"
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "int32"
              },
              "#text": "[4]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "uint32"
              },
              "#text": "[4]"
            }
          ],
          "$category": "union",
          "$name": "VkClearColorValue",
          "$comment": "// Union allowing specification of floating point, integer, or unsigned integer color data. Actual value selected is based on image/attachment being cleared."
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depth"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stencil"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkClearDepthStencilValue"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkClearColorValue"
              },
              "name": {
                "#text": "color"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkClearDepthStencilValue"
              },
              "name": {
                "#text": "depthStencil"
              }
            }
          ],
          "$category": "union",
          "$name": "VkClearValue",
          "$comment": "// Union allowing specification of color or depth and stencil values. Actual value selected is based on attachment being cleared."
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachment"
              }
            },
            {
              "type": {
                "#text": "VkClearValue"
              },
              "name": {
                "#text": "clearValue"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkClearAttachment"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkAttachmentDescriptionFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentLoadOp"
              },
              "name": {
                "#text": "loadOp"
              },
              "comment": {
                "#text": "Load operation for color or depth data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentStoreOp"
              },
              "name": {
                "#text": "storeOp"
              },
              "comment": {
                "#text": "Store operation for color or depth data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentLoadOp"
              },
              "name": {
                "#text": "stencilLoadOp"
              },
              "comment": {
                "#text": "Load operation for stencil data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentStoreOp"
              },
              "name": {
                "#text": "stencilStoreOp"
              },
              "comment": {
                "#text": "Store operation for stencil data"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "initialLayout"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "finalLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentDescription"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachment"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "layout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentReference"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkSubpassDescriptionFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              },
              "comment": {
                "#text": "Must be VK_PIPELINE_BIND_POINT_GRAPHICS for now"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "inputAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference"
              },
              "name": {
                "#text": "pInputAttachments"
              },
              "#text": "const*",
              "$len": "inputAttachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference"
              },
              "name": {
                "#text": "pColorAttachments"
              },
              "#text": "const*",
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkAttachmentReference"
              },
              "name": {
                "#text": "pResolveAttachments"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkAttachmentReference"
              },
              "name": {
                "#text": "pDepthStencilAttachment"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "preserveAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPreserveAttachments"
              },
              "#text": "const*",
              "$len": "preserveAttachmentCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassDescription"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcSubpass"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstSubpass"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the source of the dependency to synchronize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "comment": {
                "#text": "Memory accesses from the destination of the dependency to synchronize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDependencyFlags"
              },
              "name": {
                "#text": "dependencyFlags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassDependency"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPassCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentDescription"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpassCount"
              }
            },
            {
              "type": {
                "#text": "VkSubpassDescription"
              },
              "name": {
                "#text": "pSubpasses"
              },
              "#text": "const*",
              "$len": "subpassCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dependencyCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubpassDependency"
              },
              "name": {
                "#text": "pDependencies"
              },
              "#text": "const*",
              "$len": "dependencyCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkEventCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Event creation flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkEventCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFenceCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Fence creation flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkFenceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustBufferAccess"
              },
              "comment": {
                "#text": "out of bounds buffer accesses are well defined"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fullDrawIndexUint32"
              },
              "comment": {
                "#text": "full 32-bit range of indices for indexed draw calls"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageCubeArray"
              },
              "comment": {
                "#text": "image views which are arrays of cube maps"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "independentBlend"
              },
              "comment": {
                "#text": "blending operations are controlled per-attachment"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "geometryShader"
              },
              "comment": {
                "#text": "geometry stage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "tessellationShader"
              },
              "comment": {
                "#text": "tessellation control and evaluation stage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sampleRateShading"
              },
              "comment": {
                "#text": "per-sample shading and interpolation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dualSrcBlend"
              },
              "comment": {
                "#text": "blend operations which take two sources"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "logicOp"
              },
              "comment": {
                "#text": "logic operations"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiDrawIndirect"
              },
              "comment": {
                "#text": "multi draw indirect"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "drawIndirectFirstInstance"
              },
              "comment": {
                "#text": "indirect drawing can use non-zero firstInstance"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClamp"
              },
              "comment": {
                "#text": "depth clamping"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBiasClamp"
              },
              "comment": {
                "#text": "depth bias clamping"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fillModeNonSolid"
              },
              "comment": {
                "#text": "point and wireframe fill modes"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBounds"
              },
              "comment": {
                "#text": "depth bounds test"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "wideLines"
              },
              "comment": {
                "#text": "lines with width greater than 1"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "largePoints"
              },
              "comment": {
                "#text": "points with size greater than 1"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "alphaToOne"
              },
              "comment": {
                "#text": "the fragment alpha component can be forced to maximum representable alpha value"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiViewport"
              },
              "comment": {
                "#text": "viewport arrays"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerAnisotropy"
              },
              "comment": {
                "#text": "anisotropic sampler filtering"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureCompressionETC2"
              },
              "comment": {
                "#text": "ETC texture compression formats"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureCompressionASTC_LDR"
              },
              "comment": {
                "#text": "ASTC LDR texture compression formats"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureCompressionBC"
              },
              "comment": {
                "#text": "BC1-7 texture compressed formats"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "occlusionQueryPrecise"
              },
              "comment": {
                "#text": "precise occlusion queries returning actual sample counts"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineStatisticsQuery"
              },
              "comment": {
                "#text": "pipeline statistics query"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexPipelineStoresAndAtomics"
              },
              "comment": {
                "#text": "stores and atomic ops on storage buffers and images are supported in vertex, tessellation, and geometry stages"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentStoresAndAtomics"
              },
              "comment": {
                "#text": "stores and atomic ops on storage buffers and images are supported in the fragment stage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderTessellationAndGeometryPointSize"
              },
              "comment": {
                "#text": "tessellation and geometry stages can export point size"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderImageGatherExtended"
              },
              "comment": {
                "#text": "image gather with run-time values and independent offsets"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageExtendedFormats"
              },
              "comment": {
                "#text": "the extended set of formats can be used for storage images"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageMultisample"
              },
              "comment": {
                "#text": "multisample images can be used for storage images"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageReadWithoutFormat"
              },
              "comment": {
                "#text": "read from storage image does not require format qualifier"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageWriteWithoutFormat"
              },
              "comment": {
                "#text": "write to storage image does not require format qualifier"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformBufferArrayDynamicIndexing"
              },
              "comment": {
                "#text": "arrays of uniform buffers can be accessed with dynamically uniform indices"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampledImageArrayDynamicIndexing"
              },
              "comment": {
                "#text": "arrays of sampled images can be accessed with dynamically uniform indices"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageBufferArrayDynamicIndexing"
              },
              "comment": {
                "#text": "arrays of storage buffers can be accessed with dynamically uniform indices"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageArrayDynamicIndexing"
              },
              "comment": {
                "#text": "arrays of storage images can be accessed with dynamically uniform indices"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderClipDistance"
              },
              "comment": {
                "#text": "clip distance in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderCullDistance"
              },
              "comment": {
                "#text": "cull distance in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderFloat64"
              },
              "comment": {
                "#text": "64-bit floats (doubles) in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInt64"
              },
              "comment": {
                "#text": "64-bit integers in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInt16"
              },
              "comment": {
                "#text": "16-bit integers in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderResourceResidency"
              },
              "comment": {
                "#text": "shader can use texture operations that return resource residency information (requires sparseNonResident support)"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderResourceMinLod"
              },
              "comment": {
                "#text": "shader can use texture operations that specify minimum resource LOD"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseBinding"
              },
              "comment": {
                "#text": "Sparse resources support: Resource memory can be managed at opaque page level rather than object level"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidencyBuffer"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident buffers"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidencyImage2D"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident 2D (non-MSAA non-depth/stencil) images"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidencyImage3D"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident 3D images"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidency2Samples"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident MSAA 2D images with 2 samples"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidency4Samples"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident MSAA 2D images with 4 samples"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidency8Samples"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident MSAA 2D images with 8 samples"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidency16Samples"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can access partially resident MSAA 2D images with 16 samples"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseResidencyAliased"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can correctly access data aliased into multiple locations (opt-in)"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variableMultisampleRate"
              },
              "comment": {
                "#text": "multisample rate must be the same for all pipelines in a subpass"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "inheritedQueries"
              },
              "comment": {
                "#text": "Queries may be inherited from primary to secondary command buffers"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "residencyStandard2DBlockShape"
              },
              "comment": {
                "#text": "Sparse resources support: GPU will access all 2D (single sample) sparse resources using the standard sparse image block shapes (based on pixel format)"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "residencyStandard2DMultisampleBlockShape"
              },
              "comment": {
                "#text": "Sparse resources support: GPU will access all 2D (multisample) sparse resources using the standard sparse image block shapes (based on pixel format)"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "residencyStandard3DBlockShape"
              },
              "comment": {
                "#text": "Sparse resources support: GPU will access all 3D sparse resources using the standard sparse image block shapes (based on pixel format)"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "residencyAlignedMipSize"
              },
              "comment": {
                "#text": "Sparse resources support: Images with mip level dimensions that are NOT a multiple of the sparse image block dimensions will be placed in the mip tail"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "residencyNonResidentStrict"
              },
              "comment": {
                "#text": "Sparse resources support: GPU can consistently access non-resident regions of a resource, all reads return as if data is 0, writes are discarded"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSparseProperties",
          "$returnedonly": true
        },
        {
          "comment": [
            {
              "#text": "resource maximum sizes"
            },
            {
              "#text": "memory limits"
            },
            {
              "#text": "descriptor set limits"
            },
            {
              "#text": "vertex stage limits"
            },
            {
              "#text": "tessellation control stage limits"
            },
            {
              "#text": "tessellation evaluation stage limits"
            },
            {
              "#text": "geometry stage limits"
            },
            {
              "#text": "fragment stage limits"
            },
            {
              "#text": "compute stage limits"
            }
          ],
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageDimension1D"
              },
              "comment": {
                "#text": "max 1D image dimension"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageDimension2D"
              },
              "comment": {
                "#text": "max 2D image dimension"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageDimension3D"
              },
              "comment": {
                "#text": "max 3D image dimension"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageDimensionCube"
              },
              "comment": {
                "#text": "max cubemap image dimension"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageArrayLayers"
              },
              "comment": {
                "#text": "max layers for image arrays"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTexelBufferElements"
              },
              "comment": {
                "#text": "max texel buffer size (fstexels)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxUniformBufferRange"
              },
              "comment": {
                "#text": "max uniform buffer range (bytes)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStorageBufferRange"
              },
              "comment": {
                "#text": "max storage buffer range (bytes)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPushConstantsSize"
              },
              "comment": {
                "#text": "max size of the push constants pool (bytes)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMemoryAllocationCount"
              },
              "comment": {
                "#text": "max number of device memory allocations supported"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSamplerAllocationCount"
              },
              "comment": {
                "#text": "max number of samplers that can be allocated on a device"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "bufferImageGranularity"
              },
              "comment": {
                "#text": "Granularity (in bytes) at which buffers and images can be bound to adjacent memory for simultaneous usage"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "sparseAddressSpaceSize"
              },
              "comment": {
                "#text": "Total address space available for sparse allocations (bytes)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxBoundDescriptorSets"
              },
              "comment": {
                "#text": "max number of descriptors sets that can be bound to a pipeline"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorSamplers"
              },
              "comment": {
                "#text": "max number of samplers allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUniformBuffers"
              },
              "comment": {
                "#text": "max number of uniform buffers allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorStorageBuffers"
              },
              "comment": {
                "#text": "max number of storage buffers allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorSampledImages"
              },
              "comment": {
                "#text": "max number of sampled images allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorStorageImages"
              },
              "comment": {
                "#text": "max number of storage images allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorInputAttachments"
              },
              "comment": {
                "#text": "max number of input attachments allowed per-stage in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageResources"
              },
              "comment": {
                "#text": "max number of resources allowed by a single stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetSamplers"
              },
              "comment": {
                "#text": "max number of samplers allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUniformBuffers"
              },
              "comment": {
                "#text": "max number of uniform buffers allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUniformBuffersDynamic"
              },
              "comment": {
                "#text": "max number of dynamic uniform buffers allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetStorageBuffers"
              },
              "comment": {
                "#text": "max number of storage buffers allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetStorageBuffersDynamic"
              },
              "comment": {
                "#text": "max number of dynamic storage buffers allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetSampledImages"
              },
              "comment": {
                "#text": "max number of sampled images allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetStorageImages"
              },
              "comment": {
                "#text": "max number of storage images allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetInputAttachments"
              },
              "comment": {
                "#text": "max number of input attachments allowed in all stages in a descriptor set"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexInputAttributes"
              },
              "comment": {
                "#text": "max number of vertex input attribute slots"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexInputBindings"
              },
              "comment": {
                "#text": "max number of vertex input binding slots"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexInputAttributeOffset"
              },
              "comment": {
                "#text": "max vertex input attribute offset added to vertex buffer offset"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexInputBindingStride"
              },
              "comment": {
                "#text": "max vertex input binding stride"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexOutputComponents"
              },
              "comment": {
                "#text": "max number of output components written by vertex shader"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationGenerationLevel"
              },
              "comment": {
                "#text": "max level supported by tessellation primitive generator"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationPatchSize"
              },
              "comment": {
                "#text": "max patch size (vertices)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationControlPerVertexInputComponents"
              },
              "comment": {
                "#text": "max number of input components per-vertex in TCS"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationControlPerVertexOutputComponents"
              },
              "comment": {
                "#text": "max number of output components per-vertex in TCS"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationControlPerPatchOutputComponents"
              },
              "comment": {
                "#text": "max number of output components per-patch in TCS"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationControlTotalOutputComponents"
              },
              "comment": {
                "#text": "max total number of per-vertex and per-patch output components in TCS"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationEvaluationInputComponents"
              },
              "comment": {
                "#text": "max number of input components per vertex in TES"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTessellationEvaluationOutputComponents"
              },
              "comment": {
                "#text": "max number of output components per vertex in TES"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGeometryShaderInvocations"
              },
              "comment": {
                "#text": "max invocation count supported in geometry shader"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGeometryInputComponents"
              },
              "comment": {
                "#text": "max number of input components read in geometry stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGeometryOutputComponents"
              },
              "comment": {
                "#text": "max number of output components written in geometry stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGeometryOutputVertices"
              },
              "comment": {
                "#text": "max number of vertices that can be emitted in geometry stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGeometryTotalOutputComponents"
              },
              "comment": {
                "#text": "max total number of components (all vertices) written in geometry stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentInputComponents"
              },
              "comment": {
                "#text": "max number of input components read in fragment stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentOutputAttachments"
              },
              "comment": {
                "#text": "max number of output attachments written in fragment stage"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentDualSrcAttachments"
              },
              "comment": {
                "#text": "max number of output attachments written when using dual source blending"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentCombinedOutputResources"
              },
              "comment": {
                "#text": "max total number of storage buffers, storage images and output buffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeSharedMemorySize"
              },
              "comment": {
                "#text": "max total storage size of work group local storage (bytes)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeWorkGroupCount"
              },
              "comment": {
                "#text": "max num of compute work groups that may be dispatched by a single command (x,y,z)"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeWorkGroupInvocations"
              },
              "comment": {
                "#text": "max total compute invocations in a single local work group"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeWorkGroupSize"
              },
              "comment": {
                "#text": "max local size of a compute work group (x,y,z)"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subPixelPrecisionBits"
              },
              "comment": {
                "#text": "number bits of subpixel precision in screen x and y"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subTexelPrecisionBits"
              },
              "comment": {
                "#text": "number bits of precision for selecting texel weights"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mipmapPrecisionBits"
              },
              "comment": {
                "#text": "number bits of precision for selecting mipmap weights"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawIndexedIndexValue"
              },
              "comment": {
                "#text": "max index value for indexed draw calls (for 32-bit indices)"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawIndirectCount"
              },
              "comment": {
                "#text": "max draw count for indirect drawing calls"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxSamplerLodBias"
              },
              "comment": {
                "#text": "max absolute sampler LOD bias"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxSamplerAnisotropy"
              },
              "comment": {
                "#text": "max degree of sampler anisotropy"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxViewports"
              },
              "comment": {
                "#text": "max number of active viewports"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxViewportDimensions"
              },
              "comment": {
                "#text": "max viewport dimensions (x,y)"
              },
              "#text": "[2]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "viewportBoundsRange"
              },
              "comment": {
                "#text": "viewport bounds range (min,max)"
              },
              "#text": "[2]",
              "$limittype": "range"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportSubPixelBits"
              },
              "comment": {
                "#text": "number bits of subpixel precision for viewport"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "minMemoryMapAlignment"
              },
              "comment": {
                "#text": "min required alignment of pointers returned by MapMemory (bytes)"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minTexelBufferOffsetAlignment"
              },
              "comment": {
                "#text": "min required alignment for texel buffer offsets (bytes)"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minUniformBufferOffsetAlignment"
              },
              "comment": {
                "#text": "min required alignment for uniform buffer sizes and offsets (bytes)"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minStorageBufferOffsetAlignment"
              },
              "comment": {
                "#text": "min required alignment for storage buffer offsets (bytes)"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "minTexelOffset"
              },
              "comment": {
                "#text": "min texel offset for OpTextureSampleOffset"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTexelOffset"
              },
              "comment": {
                "#text": "max texel offset for OpTextureSampleOffset"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "minTexelGatherOffset"
              },
              "comment": {
                "#text": "min texel offset for OpTextureGatherOffset"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTexelGatherOffset"
              },
              "comment": {
                "#text": "max texel offset for OpTextureGatherOffset"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minInterpolationOffset"
              },
              "comment": {
                "#text": "furthest negative offset for interpolateAtOffset"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxInterpolationOffset"
              },
              "comment": {
                "#text": "furthest positive offset for interpolateAtOffset"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subPixelInterpolationOffsetBits"
              },
              "comment": {
                "#text": "number of subpixel bits for interpolateAtOffset"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFramebufferWidth"
              },
              "comment": {
                "#text": "max width for a framebuffer"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFramebufferHeight"
              },
              "comment": {
                "#text": "max height for a framebuffer"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFramebufferLayers"
              },
              "comment": {
                "#text": "max layer count for a layered framebuffer"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "framebufferColorSampleCounts"
              },
              "comment": {
                "#text": "supported color sample counts for a framebuffer"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "framebufferDepthSampleCounts"
              },
              "comment": {
                "#text": "supported depth sample counts for a framebuffer"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "framebufferStencilSampleCounts"
              },
              "comment": {
                "#text": "supported stencil sample counts for a framebuffer"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "framebufferNoAttachmentsSampleCounts"
              },
              "comment": {
                "#text": "supported sample counts for a subpass which uses no attachments"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxColorAttachments"
              },
              "comment": {
                "#text": "max number of color attachments per subpass"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampledImageColorSampleCounts"
              },
              "comment": {
                "#text": "supported color sample counts for a non-integer sampled image"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampledImageIntegerSampleCounts"
              },
              "comment": {
                "#text": "supported sample counts for an integer image"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampledImageDepthSampleCounts"
              },
              "comment": {
                "#text": "supported depth sample counts for a sampled image"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampledImageStencilSampleCounts"
              },
              "comment": {
                "#text": "supported stencil sample counts for a sampled image"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "storageImageSampleCounts"
              },
              "comment": {
                "#text": "supported sample counts for a storage image"
              },
              "$limittype": "bitmask",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSampleMaskWords"
              },
              "comment": {
                "#text": "max number of sample mask words"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "timestampComputeAndGraphics"
              },
              "comment": {
                "#text": "timestamps on graphics and compute queues"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "timestampPeriod"
              },
              "comment": {
                "#text": "number of nanoseconds it takes for timestamp query value to increment by 1"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxClipDistances"
              },
              "comment": {
                "#text": "max number of clip distances"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxCullDistances"
              },
              "comment": {
                "#text": "max number of cull distances"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxCombinedClipAndCullDistances"
              },
              "comment": {
                "#text": "max combined number of user clipping"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "discreteQueuePriorities"
              },
              "comment": {
                "#text": "distinct queue priorities available"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pointSizeRange"
              },
              "comment": {
                "#text": "range (min,max) of supported point sizes"
              },
              "#text": "[2]",
              "$limittype": "range"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "lineWidthRange"
              },
              "comment": {
                "#text": "range (min,max) of supported line widths"
              },
              "#text": "[2]",
              "$limittype": "range"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pointSizeGranularity"
              },
              "comment": {
                "#text": "granularity of supported point sizes"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "lineWidthGranularity"
              },
              "comment": {
                "#text": "granularity of supported line widths"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "strictLines"
              },
              "comment": {
                "#text": "line rasterization follows preferred rules"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "standardSampleLocations"
              },
              "comment": {
                "#text": "supports standard sample locations for all supported sample counts"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "optimalBufferCopyOffsetAlignment"
              },
              "comment": {
                "#text": "optimal offset of buffer copies"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "optimalBufferCopyRowPitchAlignment"
              },
              "comment": {
                "#text": "optimal pitch of buffer copies"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "nonCoherentAtomSize"
              },
              "comment": {
                "#text": "minimum size and alignment for non-coherent host-mapped device memory access"
              },
              "$limittype": "min,pot"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceLimits",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphoreCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Semaphore creation flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueryPoolCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queryCount"
              }
            },
            {
              "type": {
                "#text": "VkQueryPipelineStatisticFlags"
              },
              "name": {
                "#text": "pipelineStatistics"
              },
              "comment": {
                "#text": "Optional"
              },
              "$optional": true,
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFramebufferCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "attachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layers"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFramebufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstVertex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDrawIndirectCommand"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "indexCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstIndex"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "vertexOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDrawIndexedIndirectCommand"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "x"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "y"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "z"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDispatchIndirectCommand"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstVertex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMultiDrawInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "indexCount"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "vertexOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMultiDrawIndexedInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pWaitSemaphores"
              },
              "#text": "const*",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "pWaitDstStageMask"
              },
              "#text": "const*",
              "$optional": "false,true",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "pCommandBuffers"
              },
              "#text": "const*",
              "$len": "commandBufferCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pSignalSemaphores"
              },
              "#text": "const*",
              "$len": "signalSemaphoreCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              },
              "comment": {
                "#text": "Handle of the display object"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "displayName"
              },
              "comment": {
                "#text": "Name of the display"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "physicalDimensions"
              },
              "comment": {
                "#text": "In millimeters?"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "physicalResolution"
              },
              "comment": {
                "#text": "Max resolution for CRT?"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagsKHR"
              },
              "name": {
                "#text": "supportedTransforms"
              },
              "comment": {
                "#text": "one or more bits from VkSurfaceTransformFlagsKHR"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "planeReorderPossible"
              },
              "comment": {
                "#text": "VK_TRUE if the overlay plane's z-order can be changed on this display."
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "persistentContent"
              },
              "comment": {
                "#text": "VK_TRUE if this is a \"smart\" display that supports self-refresh/internal buffering."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "currentDisplay"
              },
              "comment": {
                "#text": "Display the plane is currently associated with.  Will be VK_NULL_HANDLE if the plane is not in use."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "currentStackIndex"
              },
              "comment": {
                "#text": "Current z-order of the plane."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPlanePropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "visibleRegion"
              },
              "comment": {
                "#text": "Visible scanout region."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "refreshRate"
              },
              "comment": {
                "#text": "Number of times per second the display is updated."
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayModeParametersKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDisplayModeKHR"
              },
              "name": {
                "#text": "displayMode"
              },
              "comment": {
                "#text": "Handle of this display mode."
              }
            },
            {
              "type": {
                "#text": "VkDisplayModeParametersKHR"
              },
              "name": {
                "#text": "parameters"
              },
              "comment": {
                "#text": "The parameters this mode uses."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayModePropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModeCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModeParametersKHR"
              },
              "name": {
                "#text": "parameters"
              },
              "comment": {
                "#text": "The parameters this mode uses."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayModeCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDisplayPlaneAlphaFlagsKHR"
              },
              "name": {
                "#text": "supportedAlpha"
              },
              "comment": {
                "#text": "Types of alpha blending supported, if any."
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "minSrcPosition"
              },
              "comment": {
                "#text": "Does the plane have any position and extent restrictions?"
              }
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "maxSrcPosition"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minSrcExtent"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxSrcExtent"
              }
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "minDstPosition"
              }
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "maxDstPosition"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minDstExtent"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxDstExtent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPlaneCapabilitiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplaySurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModeKHR"
              },
              "name": {
                "#text": "displayMode"
              },
              "comment": {
                "#text": "The mode to use when displaying this surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "planeIndex"
              },
              "comment": {
                "#text": "The plane on which this surface appears.  Must be between 0 and the value returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR() in pPropertyCount."
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "planeStackIndex"
              },
              "comment": {
                "#text": "The z-order of the plane."
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "transform"
              },
              "comment": {
                "#text": "Transform to apply to the images as part of the scanout operation"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "globalAlpha"
              },
              "comment": {
                "#text": "Global alpha value.  Must be between 0 and 1, inclusive.  Ignored if alphaMode is not VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR"
              }
            },
            {
              "type": {
                "#text": "VkDisplayPlaneAlphaFlagBitsKHR"
              },
              "name": {
                "#text": "alphaMode"
              },
              "comment": {
                "#text": "What type of alpha blending to use.  Must be a bit from vkGetDisplayPlanePropertiesKHR::supportedAlpha."
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "imageExtent"
              },
              "comment": {
                "#text": "size of the images to use with this surface"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplaySurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "srcRect"
              },
              "comment": {
                "#text": "Rectangle within the presentable image to read pixel data from when presenting to the display."
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "dstRect"
              },
              "comment": {
                "#text": "Rectangle within the current display mode's visible region to display srcRectangle in."
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "persistent"
              },
              "comment": {
                "#text": "For smart displays, use buffered mode.  If the display properties member \"persistentMode\" is VK_FALSE, this member must always be VK_FALSE."
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPresentInfoKHR",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minImageCount"
              },
              "comment": {
                "#text": "Supported minimum number of images for the surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageCount"
              },
              "comment": {
                "#text": "Supported maximum number of images for the surface, 0 for unlimited"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "currentExtent"
              },
              "comment": {
                "#text": "Current image width and height for the surface, (0, 0) if undefined"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minImageExtent"
              },
              "comment": {
                "#text": "Supported minimum image width and height for the surface"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxImageExtent"
              },
              "comment": {
                "#text": "Supported maximum image width and height for the surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageArrayLayers"
              },
              "comment": {
                "#text": "Supported maximum number of image layers for the surface"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagsKHR"
              },
              "name": {
                "#text": "supportedTransforms"
              },
              "comment": {
                "#text": "1 or more bits representing the transforms supported"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "currentTransform"
              },
              "comment": {
                "#text": "The surface's current transform relative to the device's natural orientation"
              }
            },
            {
              "type": {
                "#text": "VkCompositeAlphaFlagsKHR"
              },
              "name": {
                "#text": "supportedCompositeAlpha"
              },
              "comment": {
                "#text": "1 or more bits representing the alpha compositing modes supported"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "supportedUsageFlags"
              },
              "comment": {
                "#text": "Supported image usage flags for the surface"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceCapabilitiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAndroidSurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "ANativeWindow"
              },
              "name": {
                "#text": "window"
              },
              "#text": "struct*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAndroidSurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkViSurfaceCreateFlagsNN"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "window"
              },
              "#text": "*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkViSurfaceCreateInfoNN"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkWaylandSurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "wl_display"
              },
              "name": {
                "#text": "display"
              },
              "#text": "struct*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "wl_surface"
              },
              "name": {
                "#text": "surface"
              },
              "#text": "struct*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkWaylandSurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkWin32SurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "HINSTANCE"
              },
              "name": {
                "#text": "hinstance"
              }
            },
            {
              "type": {
                "#text": "HWND"
              },
              "name": {
                "#text": "hwnd"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkWin32SurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkXlibSurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "Display"
              },
              "name": {
                "#text": "dpy"
              },
              "#text": "*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "Window"
              },
              "name": {
                "#text": "window"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkXlibSurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkXcbSurfaceCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "xcb_connection_t"
              },
              "name": {
                "#text": "connection"
              },
              "#text": "*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "xcb_window_t"
              },
              "name": {
                "#text": "window"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkXcbSurfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDirectFBSurfaceCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "IDirectFB"
              },
              "name": {
                "#text": "dfb"
              },
              "#text": "*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "IDirectFBSurface"
              },
              "name": {
                "#text": "surface"
              },
              "#text": "*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDirectFBSurfaceCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImagePipeSurfaceCreateFlagsFUCHSIA"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "imagePipeHandle"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImagePipeSurfaceCreateInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkStreamDescriptorSurfaceCreateFlagsGGP"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "GgpStreamDescriptor"
              },
              "name": {
                "#text": "streamDescriptor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkStreamDescriptorSurfaceCreateInfoGGP"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkScreenSurfaceCreateFlagsQNX"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "_screen_context"
              },
              "name": {
                "#text": "context"
              },
              "#text": "struct*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "_screen_window"
              },
              "name": {
                "#text": "window"
              },
              "#text": "struct*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkScreenSurfaceCreateInfoQNX"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              },
              "comment": {
                "#text": "Supported pair of rendering format"
              }
            },
            {
              "type": {
                "#text": "VkColorSpaceKHR"
              },
              "name": {
                "#text": "colorSpace"
              },
              "comment": {
                "#text": "and color space for the surface"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceFormatKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "comment": {
                "#text": "The swapchain's target surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minImageCount"
              },
              "comment": {
                "#text": "Minimum number of presentation images the application needs"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "imageFormat"
              },
              "comment": {
                "#text": "Format of the presentation images"
              }
            },
            {
              "type": {
                "#text": "VkColorSpaceKHR"
              },
              "name": {
                "#text": "imageColorSpace"
              },
              "comment": {
                "#text": "Colorspace of the presentation images"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "imageExtent"
              },
              "comment": {
                "#text": "Dimensions of the presentation images"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageArrayLayers"
              },
              "comment": {
                "#text": "Determines the number of views for multiview/stereo presentation"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "imageUsage"
              },
              "comment": {
                "#text": "Bits indicating how the presentation images will be used"
              }
            },
            {
              "type": {
                "#text": "VkSharingMode"
              },
              "name": {
                "#text": "imageSharingMode"
              },
              "comment": {
                "#text": "Sharing mode used for the presentation images"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndexCount"
              },
              "comment": {
                "#text": "Number of queue families having access to the images in case of concurrent sharing mode"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyIndices"
              },
              "comment": {
                "#text": "Array of queue family indices having access to the images in case of concurrent sharing mode"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "queueFamilyIndexCount"
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "preTransform"
              },
              "comment": {
                "#text": "The transform, relative to the device's natural orientation, applied to the image content prior to presentation"
              }
            },
            {
              "type": {
                "#text": "VkCompositeAlphaFlagBitsKHR"
              },
              "name": {
                "#text": "compositeAlpha"
              },
              "comment": {
                "#text": "The alpha blending mode used when compositing this surface with other surfaces in the window system"
              }
            },
            {
              "type": {
                "#text": "VkPresentModeKHR"
              },
              "name": {
                "#text": "presentMode"
              },
              "comment": {
                "#text": "Which presentation mode to use for presents on this swap chain"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "clipped"
              },
              "comment": {
                "#text": "Specifies whether presentable images may be affected by window clip regions"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "oldSwapchain"
              },
              "comment": {
                "#text": "Existing swap chain to replace, if any"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreCount"
              },
              "comment": {
                "#text": "Number of semaphores to wait for before presenting"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pWaitSemaphores"
              },
              "comment": {
                "#text": "Semaphores to wait for before presenting"
              },
              "#text": "const*",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              },
              "comment": {
                "#text": "Number of swapchains to present in this call"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "pSwapchains"
              },
              "comment": {
                "#text": "Swapchains to present an image from"
              },
              "#text": "const*",
              "$len": "swapchainCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pImageIndices"
              },
              "comment": {
                "#text": "Indices of which presentable images to present"
              },
              "#text": "const*",
              "$len": "swapchainCount"
            },
            {
              "type": {
                "#text": "VkResult"
              },
              "name": {
                "#text": "pResults"
              },
              "comment": {
                "#text": "Optional (i.e. if non-NULL) VkResult for each swapchain"
              },
              "#text": "*",
              "$optional": true,
              "$len": "swapchainCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugReportFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Indicates which events call this callback"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "PFN_vkDebugReportCallbackEXT"
              },
              "name": {
                "#text": "pfnCallback"
              },
              "comment": {
                "#text": "Function pointer of a callback function"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pUserData"
              },
              "comment": {
                "#text": "User data provided to callback function"
              },
              "#text": "*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDebugReportCallbackCreateInfoEXT",
          "$structextends": "VkInstanceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "comment": {
                "#text": "Must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"
              },
              "$values": "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "disabledValidationCheckCount"
              },
              "comment": {
                "#text": "Number of validation checks to disable"
              }
            },
            {
              "type": {
                "#text": "VkValidationCheckEXT"
              },
              "name": {
                "#text": "pDisabledValidationChecks"
              },
              "comment": {
                "#text": "Validation checks to disable"
              },
              "#text": "const*",
              "$len": "disabledValidationCheckCount"
            }
          ],
          "$category": "struct",
          "$name": "VkValidationFlagsEXT",
          "$structextends": "VkInstanceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "comment": {
                "#text": "Must be VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"
              },
              "$values": "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "enabledValidationFeatureCount"
              },
              "comment": {
                "#text": "Number of validation features to enable"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkValidationFeatureEnableEXT"
              },
              "name": {
                "#text": "pEnabledValidationFeatures"
              },
              "comment": {
                "#text": "Validation features to enable"
              },
              "#text": "const*",
              "$len": "enabledValidationFeatureCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "disabledValidationFeatureCount"
              },
              "comment": {
                "#text": "Number of validation features to disable"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkValidationFeatureDisableEXT"
              },
              "name": {
                "#text": "pDisabledValidationFeatures"
              },
              "comment": {
                "#text": "Validation features to disable"
              },
              "#text": "const*",
              "$len": "disabledValidationFeatureCount"
            }
          ],
          "$category": "struct",
          "$name": "VkValidationFeaturesEXT",
          "$structextends": "VkInstanceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRasterizationOrderAMD"
              },
              "name": {
                "#text": "rasterizationOrder"
              },
              "comment": {
                "#text": "Rasterization order to use for the pipeline"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationStateRasterizationOrderAMD",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugReportObjectTypeEXT"
              },
              "name": {
                "#text": "objectType"
              },
              "comment": {
                "#text": "The type of the object"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "object"
              },
              "comment": {
                "#text": "The handle of the object, cast to uint64_t"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pObjectName"
              },
              "comment": {
                "#text": "Name to apply to the object"
              },
              "#text": "const*",
              "$len": "null-terminated"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugMarkerObjectNameInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugReportObjectTypeEXT"
              },
              "name": {
                "#text": "objectType"
              },
              "comment": {
                "#text": "The type of the object"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "object"
              },
              "comment": {
                "#text": "The handle of the object, cast to uint64_t"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "tagName"
              },
              "comment": {
                "#text": "The name of the tag to set on the object"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "tagSize"
              },
              "comment": {
                "#text": "The length in bytes of the tag data"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pTag"
              },
              "comment": {
                "#text": "Tag data to attach to the object"
              },
              "#text": "const*",
              "$len": "tagSize"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugMarkerObjectTagInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pMarkerName"
              },
              "comment": {
                "#text": "Name of the debug marker"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "color"
              },
              "comment": {
                "#text": "Optional color for debug marker"
              },
              "#text": "[4]"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugMarkerMarkerInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dedicatedAllocation"
              },
              "comment": {
                "#text": "Whether this image uses a dedicated allocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDedicatedAllocationImageCreateInfoNV",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dedicatedAllocation"
              },
              "comment": {
                "#text": "Whether this buffer uses a dedicated allocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDedicatedAllocationBufferCreateInfoNV",
          "$structextends": "VkBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "comment": {
                "#text": "Image that this allocation will be bound to"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "comment": {
                "#text": "Buffer that this allocation will be bound to"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDedicatedAllocationMemoryAllocateInfoNV",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkImageFormatProperties"
              },
              "name": {
                "#text": "imageFormatProperties"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryFeatureFlagsNV"
              },
              "name": {
                "#text": "externalMemoryFeatures"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "exportFromImportedHandleTypes"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "compatibleHandleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalImageFormatPropertiesNV",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalMemoryImageCreateInfoNV",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportMemoryAllocateInfoNV",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "handleType"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "handle"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryWin32HandleInfoNV",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "SECURITY_ATTRIBUTES"
              },
              "name": {
                "#text": "pAttributes"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "DWORD"
              },
              "name": {
                "#text": "dwAccess"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportMemoryWin32HandleInfoNV",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "acquireCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "pAcquireSyncs"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pAcquireKeys"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pAcquireTimeoutMilliseconds"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "releaseCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "pReleaseSyncs"
              },
              "#text": "const*",
              "$len": "releaseCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pReleaseKeys"
              },
              "#text": "const*",
              "$len": "releaseCount"
            }
          ],
          "$category": "struct",
          "$name": "VkWin32KeyedMutexAcquireReleaseInfoNV",
          "$structextends": "VkSubmitInfo,VkSubmitInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceGeneratedCommands"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "privateDataSlotRequestCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDevicePrivateDataCreateInfo",
          "$allowduplicate": true,
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDevicePrivateDataCreateInfoEXT",
          "$alias": "VkDevicePrivateDataCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPrivateDataSlotCreateFlags"
              },
              "name": {
                "#text": "flags"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPrivateDataSlotCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPrivateDataSlotCreateInfoEXT",
          "$alias": "VkPrivateDataSlotCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "privateData"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePrivateDataFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDevicePrivateDataFeaturesEXT",
          "$alias": "VkPhysicalDevicePrivateDataFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxGraphicsShaderGroupCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxIndirectSequenceCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxIndirectCommandsTokenCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxIndirectCommandsStreamCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxIndirectCommandsTokenOffset"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxIndirectCommandsStreamStride"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minSequencesCountBufferOffsetAlignment"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minSequencesIndexBufferOffsetAlignment"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minIndirectCommandsBufferOffsetAlignment"
              },
              "$limittype": "min"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMultiDrawCount"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiDrawPropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stageCount"
              }
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateInfo"
              },
              "name": {
                "#text": "pStages"
              },
              "#text": "const*",
              "$len": "stageCount"
            },
            {
              "type": {
                "#text": "VkPipelineVertexInputStateCreateInfo"
              },
              "name": {
                "#text": "pVertexInputState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineTessellationStateCreateInfo"
              },
              "name": {
                "#text": "pTessellationState"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkGraphicsShaderGroupCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkGraphicsShaderGroupCreateInfoNV"
              },
              "name": {
                "#text": "pGroups"
              },
              "#text": "const*",
              "$len": "groupCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pipelineCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pPipelines"
              },
              "#text": "const*",
              "$len": "pipelineCount"
            }
          ],
          "$category": "struct",
          "$name": "VkGraphicsPipelineShaderGroupsCreateInfoNV",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "groupIndex"
            }
          },
          "$category": "struct",
          "$name": "VkBindShaderGroupIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "bufferAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "indexType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindIndexBufferIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "bufferAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindVertexBufferIndirectCommandNV"
        },
        {
          "member": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "data"
            }
          },
          "$category": "struct",
          "$name": "VkSetStateFlagsIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkIndirectCommandsStreamNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIndirectCommandsTokenTypeNV"
              },
              "name": {
                "#text": "tokenType"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stream"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexBindingUnit"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexDynamicStride"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "pushconstantPipelineLayout"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "pushconstantShaderStageFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pushconstantOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pushconstantSize"
              }
            },
            {
              "type": {
                "#text": "VkIndirectStateFlagsNV"
              },
              "name": {
                "#text": "indirectStateFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "indexTypeCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "pIndexTypes"
              },
              "#text": "const*",
              "$len": "indexTypeCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pIndexTypeValues"
              },
              "#text": "const*",
              "$len": "indexTypeCount"
            }
          ],
          "$category": "struct",
          "$name": "VkIndirectCommandsLayoutTokenNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutUsageFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "tokenCount"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutTokenNV"
              },
              "name": {
                "#text": "pTokens"
              },
              "#text": "const*",
              "$len": "tokenCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "streamCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pStreamStrides"
              },
              "#text": "const*",
              "$len": "streamCount"
            }
          ],
          "$category": "struct",
          "$name": "VkIndirectCommandsLayoutCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutNV"
              },
              "name": {
                "#text": "indirectCommandsLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "streamCount"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsStreamNV"
              },
              "name": {
                "#text": "pStreams"
              },
              "#text": "const*",
              "$len": "streamCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sequencesCount"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "preprocessBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "preprocessOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "preprocessSize"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "sequencesCountBuffer"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "sequencesCountOffset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "sequencesIndexBuffer"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "sequencesIndexOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGeneratedCommandsInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutNV"
              },
              "name": {
                "#text": "indirectCommandsLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSequencesCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGeneratedCommandsMemoryRequirementsInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceFeatures"
              },
              "name": {
                "#text": "features"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFeatures2",
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceFeatures2KHR",
          "$alias": "VkPhysicalDeviceFeatures2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceProperties"
              },
              "name": {
                "#text": "properties"
              },
              "$limittype": "struct"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceProperties2KHR",
          "$alias": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormatProperties"
              },
              "name": {
                "#text": "formatProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFormatProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkFormatProperties2KHR",
          "$alias": "VkFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageFormatProperties"
              },
              "name": {
                "#text": "imageFormatProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageFormatProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkImageFormatProperties2KHR",
          "$alias": "VkImageFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageFormatInfo2KHR",
          "$alias": "VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueueFamilyProperties"
              },
              "name": {
                "#text": "queueFamilyProperties"
              },
              "$limittype": "struct"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkQueueFamilyProperties2KHR",
          "$alias": "VkQueueFamilyProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceMemoryProperties"
              },
              "name": {
                "#text": "memoryProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryProperties2KHR",
          "$alias": "VkPhysicalDeviceMemoryProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSparseImageFormatProperties"
              },
              "name": {
                "#text": "properties"
              },
              "$limittype": "struct"
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageFormatProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkSparseImageFormatProperties2KHR",
          "$alias": "VkSparseImageFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSparseImageFormatInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSparseImageFormatInfo2KHR",
          "$alias": "VkPhysicalDeviceSparseImageFormatInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPushDescriptors"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePushDescriptorPropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "major"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minor"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "subminor"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "patch"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkConformanceVersion"
        },
        {
          "$category": "struct",
          "$name": "VkConformanceVersionKHR",
          "$alias": "VkConformanceVersion"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDriverId"
              },
              "name": {
                "#text": "driverID"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "driverName"
              },
              "enum": {
                "#text": "VK_MAX_DRIVER_NAME_SIZE"
              },
              "#text": "[]",
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "driverInfo"
              },
              "enum": {
                "#text": "VK_MAX_DRIVER_INFO_SIZE"
              },
              "#text": "[]",
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkConformanceVersion"
              },
              "name": {
                "#text": "conformanceVersion"
              },
              "$limittype": "exact"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDriverProperties",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceDriverPropertiesKHR",
          "$alias": "VkPhysicalDeviceDriverProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              },
              "comment": {
                "#text": "Copy of VkPresentInfoKHR::swapchainCount"
              }
            },
            {
              "type": {
                "#text": "VkPresentRegionKHR"
              },
              "name": {
                "#text": "pRegions"
              },
              "comment": {
                "#text": "The regions that have changed"
              },
              "#text": "const*",
              "$len": "swapchainCount",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPresentRegionsKHR",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rectangleCount"
              },
              "comment": {
                "#text": "Number of rectangles in pRectangles"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRectLayerKHR"
              },
              "name": {
                "#text": "pRectangles"
              },
              "comment": {
                "#text": "Array of rectangles that have changed in a swapchain's image(s)"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "rectangleCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPresentRegionKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "upper-left corner of a rectangle that has not changed, in pixels of a presentation images"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "extent"
              },
              "comment": {
                "#text": "Dimensions of a rectangle that has not changed, in pixels of a presentation images"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layer"
              },
              "comment": {
                "#text": "Layer of a swapchain's image(s), for stereoscopic-3D images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRectLayerKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variablePointersStorageBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variablePointers"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVariablePointersFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceVariablePointersFeaturesKHR",
          "$alias": "VkPhysicalDeviceVariablePointersFeatures"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceVariablePointerFeaturesKHR",
          "$alias": "VkPhysicalDeviceVariablePointersFeatures"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceVariablePointerFeatures",
          "$alias": "VkPhysicalDeviceVariablePointersFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkExternalMemoryFeatureFlags"
              },
              "name": {
                "#text": "externalMemoryFeatures"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlags"
              },
              "name": {
                "#text": "exportFromImportedHandleTypes"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlags"
              },
              "name": {
                "#text": "compatibleHandleTypes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExternalMemoryProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkExternalMemoryPropertiesKHR",
          "$alias": "VkExternalMemoryProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalImageFormatInfo",
          "$structextends": "VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalImageFormatInfoKHR",
          "$alias": "VkPhysicalDeviceExternalImageFormatInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryProperties"
              },
              "name": {
                "#text": "externalMemoryProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExternalImageFormatProperties",
          "$returnedonly": true,
          "$structextends": "VkImageFormatProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkExternalImageFormatPropertiesKHR",
          "$alias": "VkExternalImageFormatProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalBufferInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalBufferInfoKHR",
          "$alias": "VkPhysicalDeviceExternalBufferInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryProperties"
              },
              "name": {
                "#text": "externalMemoryProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExternalBufferProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkExternalBufferPropertiesKHR",
          "$alias": "VkExternalBufferProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "deviceUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "driverUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "deviceLUID"
              },
              "enum": {
                "#text": "VK_LUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceNodeMask"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceLUIDValid"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceIDProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceIDPropertiesKHR",
          "$alias": "VkPhysicalDeviceIDProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlags"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalMemoryImageCreateInfo",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkExternalMemoryImageCreateInfoKHR",
          "$alias": "VkExternalMemoryImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlags"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalMemoryBufferCreateInfo",
          "$structextends": "VkBufferCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkExternalMemoryBufferCreateInfoKHR",
          "$alias": "VkExternalMemoryBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlags"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportMemoryAllocateInfo",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkExportMemoryAllocateInfoKHR",
          "$alias": "VkExportMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "handle"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryWin32HandleInfoKHR",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "SECURITY_ATTRIBUTES"
              },
              "name": {
                "#text": "pAttributes"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "DWORD"
              },
              "name": {
                "#text": "dwAccess"
              }
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMemoryWin32HandleInfoKHR",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "handle"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryZirconHandleInfoFUCHSIA",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryZirconHandlePropertiesFUCHSIA",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryGetZirconHandleInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryWin32HandlePropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryGetWin32HandleInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "fd"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryFdInfoKHR",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryFdPropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryGetFdInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "acquireCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "pAcquireSyncs"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pAcquireKeys"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pAcquireTimeouts"
              },
              "#text": "const*",
              "$len": "acquireCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "releaseCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "pReleaseSyncs"
              },
              "#text": "const*",
              "$len": "releaseCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pReleaseKeys"
              },
              "#text": "const*",
              "$len": "releaseCount"
            }
          ],
          "$category": "struct",
          "$name": "VkWin32KeyedMutexAcquireReleaseInfoKHR",
          "$structextends": "VkSubmitInfo,VkSubmitInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalSemaphoreInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalSemaphoreInfoKHR",
          "$alias": "VkPhysicalDeviceExternalSemaphoreInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlags"
              },
              "name": {
                "#text": "exportFromImportedHandleTypes"
              }
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlags"
              },
              "name": {
                "#text": "compatibleHandleTypes"
              }
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreFeatureFlags"
              },
              "name": {
                "#text": "externalSemaphoreFeatures"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalSemaphoreProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkExternalSemaphorePropertiesKHR",
          "$alias": "VkExternalSemaphoreProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlags"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportSemaphoreCreateInfo",
          "$structextends": "VkSemaphoreCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkExportSemaphoreCreateInfoKHR",
          "$alias": "VkExportSemaphoreCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSemaphoreImportFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "handle"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportSemaphoreWin32HandleInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "SECURITY_ATTRIBUTES"
              },
              "name": {
                "#text": "pAttributes"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "DWORD"
              },
              "name": {
                "#text": "dwAccess"
              }
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportSemaphoreWin32HandleInfoKHR",
          "$structextends": "VkSemaphoreCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreValuesCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pWaitSemaphoreValues"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "waitSemaphoreValuesCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreValuesCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pSignalSemaphoreValues"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "signalSemaphoreValuesCount"
            }
          ],
          "$category": "struct",
          "$name": "VkD3D12FenceSubmitInfoKHR",
          "$structextends": "VkSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreGetWin32HandleInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSemaphoreImportFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "fd"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportSemaphoreFdInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreGetFdInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSemaphoreImportFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "zirconHandle"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportSemaphoreZirconHandleInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreGetZirconHandleInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalFenceInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalFenceInfoKHR",
          "$alias": "VkPhysicalDeviceExternalFenceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlags"
              },
              "name": {
                "#text": "exportFromImportedHandleTypes"
              }
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlags"
              },
              "name": {
                "#text": "compatibleHandleTypes"
              }
            },
            {
              "type": {
                "#text": "VkExternalFenceFeatureFlags"
              },
              "name": {
                "#text": "externalFenceFeatures"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExternalFenceProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkExternalFencePropertiesKHR",
          "$alias": "VkExternalFenceProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlags"
              },
              "name": {
                "#text": "handleTypes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportFenceCreateInfo",
          "$structextends": "VkFenceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkExportFenceCreateInfoKHR",
          "$alias": "VkExportFenceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFenceImportFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "handle"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportFenceWin32HandleInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "SECURITY_ATTRIBUTES"
              },
              "name": {
                "#text": "pAttributes"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "DWORD"
              },
              "name": {
                "#text": "dwAccess"
              }
            },
            {
              "type": {
                "#text": "LPCWSTR"
              },
              "name": {
                "#text": "name"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportFenceWin32HandleInfoKHR",
          "$structextends": "VkFenceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              }
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFenceGetWin32HandleInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFenceImportFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "fd"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportFenceFdInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              }
            },
            {
              "type": {
                "#text": "VkExternalFenceHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFenceGetFdInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiview"
              },
              "comment": {
                "#text": "Multiple views in a renderpass"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiviewGeometryShader"
              },
              "comment": {
                "#text": "Multiple views in a renderpass w/ geometry shader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiviewTessellationShader"
              },
              "comment": {
                "#text": "Multiple views in a renderpass w/ tessellation shader"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiviewFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiviewFeaturesKHR",
          "$alias": "VkPhysicalDeviceMultiviewFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMultiviewViewCount"
              },
              "comment": {
                "#text": "max number of views in a subpass"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMultiviewInstanceIndex"
              },
              "comment": {
                "#text": "max instance index for a draw in a multiview subpass"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiviewProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiviewPropertiesKHR",
          "$alias": "VkPhysicalDeviceMultiviewProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpassCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pViewMasks"
              },
              "#text": "const*",
              "$len": "subpassCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dependencyCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "pViewOffsets"
              },
              "#text": "const*",
              "$len": "dependencyCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "correlationMaskCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCorrelationMasks"
              },
              "#text": "const*",
              "$len": "correlationMaskCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassMultiviewCreateInfo",
          "$structextends": "VkRenderPassCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkRenderPassMultiviewCreateInfoKHR",
          "$alias": "VkRenderPassMultiviewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minImageCount"
              },
              "comment": {
                "#text": "Supported minimum number of images for the surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageCount"
              },
              "comment": {
                "#text": "Supported maximum number of images for the surface, 0 for unlimited"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "currentExtent"
              },
              "comment": {
                "#text": "Current image width and height for the surface, (0, 0) if undefined"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minImageExtent"
              },
              "comment": {
                "#text": "Supported minimum image width and height for the surface"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxImageExtent"
              },
              "comment": {
                "#text": "Supported maximum image width and height for the surface"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxImageArrayLayers"
              },
              "comment": {
                "#text": "Supported maximum number of image layers for the surface"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagsKHR"
              },
              "name": {
                "#text": "supportedTransforms"
              },
              "comment": {
                "#text": "1 or more bits representing the transforms supported"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "currentTransform"
              },
              "comment": {
                "#text": "The surface's current transform relative to the device's natural orientation"
              }
            },
            {
              "type": {
                "#text": "VkCompositeAlphaFlagsKHR"
              },
              "name": {
                "#text": "supportedCompositeAlpha"
              },
              "comment": {
                "#text": "1 or more bits representing the alpha compositing modes supported"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "supportedUsageFlags"
              },
              "comment": {
                "#text": "Supported image usage flags for the surface"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceCounterFlagsEXT"
              },
              "name": {
                "#text": "supportedSurfaceCounters"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceCapabilities2EXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayPowerStateEXT"
              },
              "name": {
                "#text": "powerState"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPowerInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceEventTypeEXT"
              },
              "name": {
                "#text": "deviceEvent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceEventInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayEventTypeEXT"
              },
              "name": {
                "#text": "displayEvent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayEventInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceCounterFlagsEXT"
              },
              "name": {
                "#text": "surfaceCounters"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSwapchainCounterCreateInfoEXT",
          "$structextends": "VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "physicalDeviceCount"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevices"
              },
              "enum": {
                "#text": "VK_MAX_DEVICE_GROUP_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subsetAllocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceGroupProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceGroupPropertiesKHR",
          "$alias": "VkPhysicalDeviceGroupProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryAllocateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryAllocateFlagsInfo",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkMemoryAllocateFlagsInfoKHR",
          "$alias": "VkMemoryAllocateFlagsInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindBufferMemoryInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBindBufferMemoryInfoKHR",
          "$alias": "VkBindBufferMemoryInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceIndexCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDeviceIndices"
              },
              "#text": "const*",
              "$len": "deviceIndexCount"
            }
          ],
          "$category": "struct",
          "$name": "VkBindBufferMemoryDeviceGroupInfo",
          "$structextends": "VkBindBufferMemoryInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBindBufferMemoryDeviceGroupInfoKHR",
          "$alias": "VkBindBufferMemoryDeviceGroupInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindImageMemoryInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBindImageMemoryInfoKHR",
          "$alias": "VkBindImageMemoryInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceIndexCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDeviceIndices"
              },
              "#text": "const*",
              "$len": "deviceIndexCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "splitInstanceBindRegionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pSplitInstanceBindRegions"
              },
              "#text": "const*",
              "$len": "splitInstanceBindRegionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkBindImageMemoryDeviceGroupInfo",
          "$structextends": "VkBindImageMemoryInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBindImageMemoryDeviceGroupInfoKHR",
          "$alias": "VkBindImageMemoryDeviceGroupInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceRenderAreaCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pDeviceRenderAreas"
              },
              "#text": "const*",
              "$len": "deviceRenderAreaCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupRenderPassBeginInfo",
          "$structextends": "VkRenderPassBeginInfo,VkRenderingInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceGroupRenderPassBeginInfoKHR",
          "$alias": "VkDeviceGroupRenderPassBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupCommandBufferBeginInfo",
          "$structextends": "VkCommandBufferBeginInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceGroupCommandBufferBeginInfoKHR",
          "$alias": "VkDeviceGroupCommandBufferBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pWaitSemaphoreDeviceIndices"
              },
              "#text": "const*",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCommandBufferDeviceMasks"
              },
              "#text": "const*",
              "$len": "commandBufferCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSignalSemaphoreDeviceIndices"
              },
              "#text": "const*",
              "$len": "signalSemaphoreCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupSubmitInfo",
          "$structextends": "VkSubmitInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceGroupSubmitInfoKHR",
          "$alias": "VkDeviceGroupSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "resourceDeviceIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryDeviceIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupBindSparseInfo",
          "$structextends": "VkBindSparseInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceGroupBindSparseInfoKHR",
          "$alias": "VkDeviceGroupBindSparseInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "presentMask"
              },
              "enum": {
                "#text": "VK_MAX_DEVICE_GROUP_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentModeFlagsKHR"
              },
              "name": {
                "#text": "modes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupPresentCapabilitiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImageSwapchainCreateInfoKHR",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindImageMemorySwapchainInfoKHR",
          "$structextends": "VkBindImageMemoryInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAcquireNextImageInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDeviceMasks"
              },
              "#text": "const*",
              "$len": "swapchainCount"
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentModeFlagBitsKHR"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupPresentInfoKHR",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "physicalDeviceCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "pPhysicalDevices"
              },
              "#text": "const*",
              "$len": "physicalDeviceCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupDeviceCreateInfo",
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceGroupDeviceCreateInfoKHR",
          "$alias": "VkDeviceGroupDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentModeFlagsKHR"
              },
              "name": {
                "#text": "modes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceGroupSwapchainCreateInfoKHR",
          "$structextends": "VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstBinding"
              },
              "comment": {
                "#text": "Binding within the destination descriptor set to write"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstArrayElement"
              },
              "comment": {
                "#text": "Array element within the destination binding to write"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCount"
              },
              "comment": {
                "#text": "Number of descriptors to write"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "descriptorType"
              },
              "comment": {
                "#text": "Descriptor type to write"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset into pData where the descriptors to update are stored"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "stride"
              },
              "comment": {
                "#text": "Stride between two descriptors in pData when writing more than one descriptor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorUpdateTemplateEntry"
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorUpdateTemplateEntryKHR",
          "$alias": "VkDescriptorUpdateTemplateEntry"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplateCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorUpdateEntryCount"
              },
              "comment": {
                "#text": "Number of descriptor update entries to use for the update template"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplateEntry"
              },
              "name": {
                "#text": "pDescriptorUpdateEntries"
              },
              "comment": {
                "#text": "Descriptor update entries for the template"
              },
              "#text": "const*",
              "$len": "descriptorUpdateEntryCount"
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplateType"
              },
              "name": {
                "#text": "templateType"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "descriptorSetLayout"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "pipelineLayout"
              },
              "comment": {
                "#text": "If used for push descriptors, this is the only allowed layout"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "set"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorUpdateTemplateCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorUpdateTemplateCreateInfoKHR",
          "$alias": "VkDescriptorUpdateTemplateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "x"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "y"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkXYColorEXT",
          "$comment": "Chromaticity coordinate"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "presentId"
              },
              "comment": {
                "#text": "Present ID in VkPresentInfoKHR"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePresentIdFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRESENT_ID_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              },
              "comment": {
                "#text": "Copy of VkPresentInfoKHR::swapchainCount"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pPresentIds"
              },
              "comment": {
                "#text": "Present ID values for each swapchain"
              },
              "#text": "const*",
              "$len": "swapchainCount",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPresentIdKHR",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "presentWait"
              },
              "comment": {
                "#text": "vkWaitForPresentKHR is supported"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePresentWaitFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "comment": [
            {
              "#text": "Display primary in chromaticity coordinates"
            },
            {
              "#text": "From SMPTE 2086"
            },
            {
              "#text": "From CTA 861.3"
            }
          ],
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_HDR_METADATA_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkXYColorEXT"
              },
              "name": {
                "#text": "displayPrimaryRed"
              },
              "comment": {
                "#text": "Display primary's Red"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkXYColorEXT"
              },
              "name": {
                "#text": "displayPrimaryGreen"
              },
              "comment": {
                "#text": "Display primary's Green"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkXYColorEXT"
              },
              "name": {
                "#text": "displayPrimaryBlue"
              },
              "comment": {
                "#text": "Display primary's Blue"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkXYColorEXT"
              },
              "name": {
                "#text": "whitePoint"
              },
              "comment": {
                "#text": "Display primary's Blue"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxLuminance"
              },
              "comment": {
                "#text": "Display maximum luminance"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minLuminance"
              },
              "comment": {
                "#text": "Display minimum luminance"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxContentLightLevel"
              },
              "comment": {
                "#text": "Content maximum luminance"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxFrameAverageLightLevel"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkHdrMetadataEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "localDimmingSupport"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayNativeHdrSurfaceCapabilitiesAMD",
          "$returnedonly": true,
          "$structextends": "VkSurfaceCapabilities2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "localDimmingEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSwapchainDisplayNativeHdrCreateInfoAMD",
          "$structextends": "VkSwapchainCreateInfoKHR"
        },
        {
          "member": {
            "type": {
              "#text": "uint64_t"
            },
            "name": {
              "#text": "refreshDuration"
            },
            "comment": {
              "#text": "Number of nanoseconds from the start of one refresh cycle to the next"
            }
          },
          "$category": "struct",
          "$name": "VkRefreshCycleDurationGOOGLE",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "presentID"
              },
              "comment": {
                "#text": "Application-provided identifier, previously given to vkQueuePresentKHR"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "desiredPresentTime"
              },
              "comment": {
                "#text": "Earliest time an image should have been presented, previously given to vkQueuePresentKHR"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "actualPresentTime"
              },
              "comment": {
                "#text": "Time the image was actually displayed"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "earliestPresentTime"
              },
              "comment": {
                "#text": "Earliest time the image could have been displayed"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "presentMargin"
              },
              "comment": {
                "#text": "How early vkQueuePresentKHR was processed vs. how soon it needed to be and make earliestPresentTime"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPastPresentationTimingGOOGLE",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              },
              "comment": {
                "#text": "Copy of VkPresentInfoKHR::swapchainCount"
              }
            },
            {
              "type": {
                "#text": "VkPresentTimeGOOGLE"
              },
              "name": {
                "#text": "pTimes"
              },
              "comment": {
                "#text": "The earliest times to present images"
              },
              "#text": "const*",
              "$len": "swapchainCount",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPresentTimesInfoGOOGLE",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "presentID"
              },
              "comment": {
                "#text": "Application-provided identifier"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "desiredPresentTime"
              },
              "comment": {
                "#text": "Earliest time an image should be presented"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPresentTimeGOOGLE"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIOSSurfaceCreateFlagsMVK"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pView"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkIOSSurfaceCreateInfoMVK"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMacOSSurfaceCreateFlagsMVK"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pView"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkMacOSSurfaceCreateInfoMVK"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMetalSurfaceCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "CAMetalLayer"
              },
              "name": {
                "#text": "pLayer"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkMetalSurfaceCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "xcoeff"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "ycoeff"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkViewportWScalingNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "viewportWScalingEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewportWScalingNV"
              },
              "name": {
                "#text": "pViewportWScalings"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true,
              "$len": "viewportCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportWScalingStateCreateInfoNV",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkViewportCoordinateSwizzleNV"
              },
              "name": {
                "#text": "x"
              }
            },
            {
              "type": {
                "#text": "VkViewportCoordinateSwizzleNV"
              },
              "name": {
                "#text": "y"
              }
            },
            {
              "type": {
                "#text": "VkViewportCoordinateSwizzleNV"
              },
              "name": {
                "#text": "z"
              }
            },
            {
              "type": {
                "#text": "VkViewportCoordinateSwizzleNV"
              },
              "name": {
                "#text": "w"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkViewportSwizzleNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineViewportSwizzleStateCreateFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewportSwizzleNV"
              },
              "name": {
                "#text": "pViewportSwizzles"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportSwizzleStateCreateInfoNV",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDiscardRectangles"
              },
              "comment": {
                "#text": "max number of active discard rectangles"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDiscardRectanglePropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDiscardRectangleStateCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDiscardRectangleModeEXT"
              },
              "name": {
                "#text": "discardRectangleMode"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "discardRectangleCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pDiscardRectangles"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "discardRectangleCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineDiscardRectangleStateCreateInfoEXT",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "perViewPositionAllComponents"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpass"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "inputAttachmentIndex"
              }
            },
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkInputAttachmentAspectReference"
        },
        {
          "$category": "struct",
          "$name": "VkInputAttachmentAspectReferenceKHR",
          "$alias": "VkInputAttachmentAspectReference"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "aspectReferenceCount"
              }
            },
            {
              "type": {
                "#text": "VkInputAttachmentAspectReference"
              },
              "name": {
                "#text": "pAspectReferences"
              },
              "#text": "const*",
              "$len": "aspectReferenceCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassInputAttachmentAspectCreateInfo",
          "$structextends": "VkRenderPassCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkRenderPassInputAttachmentAspectCreateInfoKHR",
          "$alias": "VkRenderPassInputAttachmentAspectCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSurfaceInfo2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceCapabilitiesKHR"
              },
              "name": {
                "#text": "surfaceCapabilities"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceCapabilities2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceFormatKHR"
              },
              "name": {
                "#text": "surfaceFormat"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceFormat2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayPropertiesKHR"
              },
              "name": {
                "#text": "displayProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayProperties2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayPlanePropertiesKHR"
              },
              "name": {
                "#text": "displayPlaneProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPlaneProperties2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModePropertiesKHR"
              },
              "name": {
                "#text": "displayModeProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayModeProperties2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModeKHR"
              },
              "name": {
                "#text": "mode"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "planeIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPlaneInfo2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayPlaneCapabilitiesKHR"
              },
              "name": {
                "#text": "capabilities"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDisplayPlaneCapabilities2KHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "sharedPresentSupportedUsageFlags"
              },
              "comment": {
                "#text": "Supported image usage flags if swapchain created using a shared present mode"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSharedPresentSurfaceCapabilitiesKHR",
          "$returnedonly": true,
          "$structextends": "VkSurfaceCapabilities2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageBuffer16BitAccess"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in BufferBlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformAndStorageBuffer16BitAccess"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in BufferBlock and Block"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storagePushConstant16"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in PushConstant"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageInputOutput16"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in shader inputs and outputs"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevice16BitStorageFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDevice16BitStorageFeaturesKHR",
          "$alias": "VkPhysicalDevice16BitStorageFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subgroupSize"
              },
              "comment": {
                "#text": "The size of a subgroup for this queue."
              },
              "$limittype": "max,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "supportedStages"
              },
              "comment": {
                "#text": "Bitfield of what shader stages support subgroup operations"
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkSubgroupFeatureFlags"
              },
              "name": {
                "#text": "supportedOperations"
              },
              "comment": {
                "#text": "Bitfield of what subgroup operations are supported."
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "quadOperationsInAllStages"
              },
              "comment": {
                "#text": "Flag to specify whether quad operations are available in all stages."
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubgroupProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSubgroupExtendedTypes"
              },
              "comment": {
                "#text": "Flag to specify whether subgroup operations with extended types are supported"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferMemoryRequirementsInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkBufferMemoryRequirementsInfo2KHR",
          "$alias": "VkBufferMemoryRequirementsInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceBufferMemoryRequirements"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceBufferMemoryRequirementsKHR",
          "$alias": "VkDeviceBufferMemoryRequirements"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageMemoryRequirementsInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkImageMemoryRequirementsInfo2KHR",
          "$alias": "VkImageMemoryRequirementsInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageSparseMemoryRequirementsInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkImageSparseMemoryRequirementsInfo2KHR",
          "$alias": "VkImageSparseMemoryRequirementsInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkImageAspectFlagBits"
              },
              "name": {
                "#text": "planeAspect"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceImageMemoryRequirements"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceImageMemoryRequirementsKHR",
          "$alias": "VkDeviceImageMemoryRequirements"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryRequirements"
              },
              "name": {
                "#text": "memoryRequirements"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryRequirements2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkMemoryRequirements2KHR",
          "$alias": "VkMemoryRequirements2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryRequirements"
              },
              "name": {
                "#text": "memoryRequirements"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSparseImageMemoryRequirements2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkSparseImageMemoryRequirements2KHR",
          "$alias": "VkSparseImageMemoryRequirements2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPointClippingBehavior"
              },
              "name": {
                "#text": "pointClippingBehavior"
              },
              "$limittype": "exact"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePointClippingProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDevicePointClippingPropertiesKHR",
          "$alias": "VkPhysicalDevicePointClippingProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "prefersDedicatedAllocation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "requiresDedicatedAllocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryDedicatedRequirements",
          "$returnedonly": true,
          "$structextends": "VkMemoryRequirements2"
        },
        {
          "$category": "struct",
          "$name": "VkMemoryDedicatedRequirementsKHR",
          "$alias": "VkMemoryDedicatedRequirements"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "comment": {
                "#text": "Image that this allocation will be bound to"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "comment": {
                "#text": "Buffer that this allocation will be bound to"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryDedicatedAllocateInfo",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkMemoryDedicatedAllocateInfoKHR",
          "$alias": "VkMemoryDedicatedAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewUsageCreateInfo",
          "$structextends": "VkImageViewCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkImageViewUsageCreateInfoKHR",
          "$alias": "VkImageViewUsageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkTessellationDomainOrigin"
              },
              "name": {
                "#text": "domainOrigin"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineTessellationDomainOriginStateCreateInfo",
          "$structextends": "VkPipelineTessellationStateCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPipelineTessellationDomainOriginStateCreateInfoKHR",
          "$alias": "VkPipelineTessellationDomainOriginStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrConversion"
              },
              "name": {
                "#text": "conversion"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionInfo",
          "$structextends": "VkSamplerCreateInfo,VkImageViewCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionInfoKHR",
          "$alias": "VkSamplerYcbcrConversionInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrModelConversion"
              },
              "name": {
                "#text": "ycbcrModel"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrRange"
              },
              "name": {
                "#text": "ycbcrRange"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "components"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "xChromaOffset"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "yChromaOffset"
              }
            },
            {
              "type": {
                "#text": "VkFilter"
              },
              "name": {
                "#text": "chromaFilter"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "forceExplicitReconstruction"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionCreateInfoKHR",
          "$alias": "VkSamplerYcbcrConversionCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageAspectFlagBits"
              },
              "name": {
                "#text": "planeAspect"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindImagePlaneMemoryInfo",
          "$structextends": "VkBindImageMemoryInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBindImagePlaneMemoryInfoKHR",
          "$alias": "VkBindImagePlaneMemoryInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageAspectFlagBits"
              },
              "name": {
                "#text": "planeAspect"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImagePlaneMemoryRequirementsInfo",
          "$structextends": "VkImageMemoryRequirementsInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkImagePlaneMemoryRequirementsInfoKHR",
          "$alias": "VkImagePlaneMemoryRequirementsInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerYcbcrConversion"
              },
              "comment": {
                "#text": "Sampler color conversion supported"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSamplerYcbcrConversionFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR",
          "$alias": "VkPhysicalDeviceSamplerYcbcrConversionFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "combinedImageSamplerDescriptorCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionImageFormatProperties",
          "$returnedonly": true,
          "$structextends": "VkImageFormatProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkSamplerYcbcrConversionImageFormatPropertiesKHR",
          "$alias": "VkSamplerYcbcrConversionImageFormatProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "supportsTextureGatherLODBiasAMD"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkTextureLODGatherFormatPropertiesAMD",
          "$returnedonly": true,
          "$structextends": "VkImageFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkConditionalRenderingFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkConditionalRenderingBeginInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "protectedSubmit"
              },
              "comment": {
                "#text": "Submit protected command buffers"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkProtectedSubmitInfo",
          "$structextends": "VkSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "protectedMemory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProtectedMemoryFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "protectedNoFault"
              },
              "$limittype": "exact"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProtectedMemoryProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceQueueCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceQueueInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCoverageToColorStateCreateFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "coverageToColorEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "coverageToColorLocation"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCoverageToColorStateCreateInfoNV",
          "$structextends": "VkPipelineMultisampleStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterMinmaxSingleComponentFormats"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterMinmaxImageComponentMapping"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSamplerFilterMinmaxProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT",
          "$alias": "VkPhysicalDeviceSamplerFilterMinmaxProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "x"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "y"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSampleLocationEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "sampleLocationsPerPixel"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "sampleLocationGridSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sampleLocationsCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleLocationEXT"
              },
              "name": {
                "#text": "pSampleLocations"
              },
              "#text": "const*",
              "$len": "sampleLocationsCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSampleLocationsInfoEXT",
          "$structextends": "VkImageMemoryBarrier,VkImageMemoryBarrier2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentIndex"
              }
            },
            {
              "type": {
                "#text": "VkSampleLocationsInfoEXT"
              },
              "name": {
                "#text": "sampleLocationsInfo"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentSampleLocationsEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpassIndex"
              }
            },
            {
              "type": {
                "#text": "VkSampleLocationsInfoEXT"
              },
              "name": {
                "#text": "sampleLocationsInfo"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassSampleLocationsEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentInitialSampleLocationsCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentSampleLocationsEXT"
              },
              "name": {
                "#text": "pAttachmentInitialSampleLocations"
              },
              "#text": "const*",
              "$len": "attachmentInitialSampleLocationsCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "postSubpassSampleLocationsCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubpassSampleLocationsEXT"
              },
              "name": {
                "#text": "pPostSubpassSampleLocations"
              },
              "#text": "const*",
              "$len": "postSubpassSampleLocationsCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassSampleLocationsBeginInfoEXT",
          "$structextends": "VkRenderPassBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sampleLocationsEnable"
              }
            },
            {
              "type": {
                "#text": "VkSampleLocationsInfoEXT"
              },
              "name": {
                "#text": "sampleLocationsInfo"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineSampleLocationsStateCreateInfoEXT",
          "$structextends": "VkPipelineMultisampleStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampleLocationSampleCounts"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxSampleLocationGridSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "sampleLocationCoordinateRange"
              },
              "#text": "[2]",
              "$limittype": "range"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sampleLocationSubPixelBits"
              },
              "$limittype": "bits"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variableSampleLocations"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSampleLocationsPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxSampleLocationGridSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMultisamplePropertiesEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSamplerReductionMode"
              },
              "name": {
                "#text": "reductionMode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerReductionModeCreateInfo",
          "$structextends": "VkSamplerCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSamplerReductionModeCreateInfoEXT",
          "$alias": "VkSamplerReductionModeCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendCoherentOperations"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiDraw"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultiDrawFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "advancedBlendMaxColorAttachments"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendIndependentBlend"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendNonPremultipliedSrcColor"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendNonPremultipliedDstColor"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendCorrelatedOverlap"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "advancedBlendAllOperations"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "srcPremultiplied"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dstPremultiplied"
              }
            },
            {
              "type": {
                "#text": "VkBlendOverlapEXT"
              },
              "name": {
                "#text": "blendOverlap"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineColorBlendAdvancedStateCreateInfoEXT",
          "$structextends": "VkPipelineColorBlendStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "inlineUniformBlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingInlineUniformBlockUpdateAfterBind"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceInlineUniformBlockFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceInlineUniformBlockFeaturesEXT",
          "$alias": "VkPhysicalDeviceInlineUniformBlockFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxInlineUniformBlockSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindInlineUniformBlocks"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceInlineUniformBlockProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceInlineUniformBlockPropertiesEXT",
          "$alias": "VkPhysicalDeviceInlineUniformBlockProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "const*",
              "$len": "dataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkWriteDescriptorSetInlineUniformBlock",
          "$structextends": "VkWriteDescriptorSet"
        },
        {
          "$category": "struct",
          "$name": "VkWriteDescriptorSetInlineUniformBlockEXT",
          "$alias": "VkWriteDescriptorSetInlineUniformBlock"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxInlineUniformBlockBindings"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorPoolInlineUniformBlockCreateInfo",
          "$structextends": "VkDescriptorPoolCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorPoolInlineUniformBlockCreateInfoEXT",
          "$alias": "VkDescriptorPoolInlineUniformBlockCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCoverageModulationStateCreateFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoverageModulationModeNV"
              },
              "name": {
                "#text": "coverageModulationMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "coverageModulationTableEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "coverageModulationTableCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pCoverageModulationTable"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true,
              "$len": "coverageModulationTableCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCoverageModulationStateCreateInfoNV",
          "$structextends": "VkPipelineMultisampleStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewFormatCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "pViewFormats"
              },
              "#text": "const*",
              "$len": "viewFormatCount"
            }
          ],
          "$category": "struct",
          "$name": "VkImageFormatListCreateInfo",
          "$structextends": "VkImageCreateInfo,VkSwapchainCreateInfoKHR,VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkImageFormatListCreateInfoKHR",
          "$alias": "VkImageFormatListCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkValidationCacheCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "initialDataSize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pInitialData"
              },
              "#text": "const*",
              "$len": "initialDataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkValidationCacheCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "validationCache"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkShaderModuleValidationCacheCreateInfoEXT",
          "$structextends": "VkShaderModuleCreateInfo,VkPipelineShaderStageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerSetDescriptors"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxMemoryAllocationSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance3Properties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance3PropertiesKHR",
          "$alias": "VkPhysicalDeviceMaintenance3Properties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "maintenance4"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance4Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance4FeaturesKHR",
          "$alias": "VkPhysicalDeviceMaintenance4Features"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxBufferSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance4Properties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMaintenance4PropertiesKHR",
          "$alias": "VkPhysicalDeviceMaintenance4Properties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "supported"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutSupport",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutSupportKHR",
          "$alias": "VkDescriptorSetLayoutSupport"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDrawParameters"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderDrawParametersFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderDrawParameterFeatures",
          "$alias": "VkPhysicalDeviceShaderDrawParametersFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderFloat16"
              },
              "comment": {
                "#text": "16-bit floats (halfs) in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInt8"
              },
              "comment": {
                "#text": "8-bit integers in shaders"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderFloat16Int8Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderFloat16Int8Features"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceFloat16Int8FeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderFloat16Int8Features"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderFloatControlsIndependence"
              },
              "name": {
                "#text": "denormBehaviorIndependence"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkShaderFloatControlsIndependence"
              },
              "name": {
                "#text": "roundingModeIndependence"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat16"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat32"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat64"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat16"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat32"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat64"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat16"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat32"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat64"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat16"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat32"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat64"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat16"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat32"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat64"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFloatControlsProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceFloatControlsPropertiesKHR",
          "$alias": "VkPhysicalDeviceFloatControlsProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "hostQueryReset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceHostQueryResetFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceHostQueryResetFeaturesEXT",
          "$alias": "VkPhysicalDeviceHostQueryResetFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "consumer"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "producer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkNativeBufferUsage2ANDROID"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "handle"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkNativeBufferUsage2ANDROID"
              },
              "name": {
                "#text": "usage2"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkNativeBufferANDROID"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainImageUsageFlagsANDROID"
              },
              "name": {
                "#text": "usage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSwapchainImageCreateInfoANDROID"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sharedImage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePresentationPropertiesANDROID"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numUsedVgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numUsedSgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ldsSizePerLocalWorkGroup"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "ldsUsageSizeInBytes"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "scratchMemUsageInBytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkShaderResourceUsageAMD",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "shaderStageMask"
              }
            },
            {
              "type": {
                "#text": "VkShaderResourceUsageAMD"
              },
              "name": {
                "#text": "resourceUsage"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numPhysicalVgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numPhysicalSgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numAvailableVgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numAvailableSgprs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "computeWorkGroupSize"
              },
              "#text": "[3]"
            }
          ],
          "$category": "struct",
          "$name": "VkShaderStatisticsInfoAMD",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueueGlobalPriorityKHR"
              },
              "name": {
                "#text": "globalPriority"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceQueueGlobalPriorityCreateInfoKHR",
          "$structextends": "VkDeviceQueueCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceQueueGlobalPriorityCreateInfoEXT",
          "$alias": "VkDeviceQueueGlobalPriorityCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "globalPriorityQuery"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT",
          "$alias": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "priorityCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkQueueGlobalPriorityKHR"
              },
              "name": {
                "#text": "priorities"
              },
              "enum": {
                "#text": "VK_MAX_GLOBAL_PRIORITY_SIZE_KHR"
              },
              "#text": "[]",
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyGlobalPriorityPropertiesKHR",
          "$structextends": "VkQueueFamilyProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkQueueFamilyGlobalPriorityPropertiesEXT",
          "$alias": "VkQueueFamilyGlobalPriorityPropertiesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkObjectType"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "objectHandle"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pObjectName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugUtilsObjectNameInfoEXT",
          "$structextends": "VkPipelineShaderStageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkObjectType"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "objectHandle"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "tagName"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "tagSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pTag"
              },
              "#text": "const*",
              "$len": "tagSize"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugUtilsObjectTagInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pLabelName"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "color"
              },
              "#text": "[4]"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugUtilsLabelEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessageSeverityFlagsEXT"
              },
              "name": {
                "#text": "messageSeverity"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessageTypeFlagsEXT"
              },
              "name": {
                "#text": "messageType"
              }
            },
            {
              "type": {
                "#text": "PFN_vkDebugUtilsMessengerCallbackEXT"
              },
              "name": {
                "#text": "pfnUserCallback"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pUserData"
              },
              "#text": "*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDebugUtilsMessengerCreateInfoEXT",
          "$allowduplicate": true,
          "$structextends": "VkInstanceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerCallbackDataFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pMessageIdName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "messageIdNumber"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pMessage"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueLabelCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pQueueLabels"
              },
              "#text": "const*",
              "$len": "queueLabelCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "cmdBufLabelCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pCmdBufLabels"
              },
              "#text": "const*",
              "$len": "cmdBufLabelCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "objectCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsObjectNameInfoEXT"
              },
              "name": {
                "#text": "pObjects"
              },
              "#text": "const*",
              "$len": "objectCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDebugUtilsMessengerCallbackDataEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceMemoryReport"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemoryReportFlagsEXT"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "PFN_vkDeviceMemoryReportCallbackEXT"
              },
              "name": {
                "#text": "pfnUserCallback"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pUserData"
              },
              "#text": "*"
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceDeviceMemoryReportCreateInfoEXT",
          "$allowduplicate": true,
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemoryReportFlagsEXT"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemoryReportEventTypeEXT"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "memoryObjectId"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkObjectType"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "objectHandle"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "heapIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceMemoryReportCallbackDataEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pHostPointer"
              },
              "#text": "*",
              "$optional": false
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryHostPointerInfoEXT",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryHostPointerPropertiesEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minImportedHostPointerAlignment"
              },
              "$limittype": "min,pot"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalMemoryHostPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "primitiveOverestimationSize"
              },
              "comment": {
                "#text": "The size in pixels the primitive is enlarged at each edge during conservative rasterization"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxExtraPrimitiveOverestimationSize"
              },
              "comment": {
                "#text": "The maximum additional overestimation the client can specify in the pipeline state"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "extraPrimitiveOverestimationSizeGranularity"
              },
              "comment": {
                "#text": "The granularity of extra overestimation sizes the implementations supports between 0 and maxExtraOverestimationSize"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveUnderestimation"
              },
              "comment": {
                "#text": "true if the implementation supports conservative rasterization underestimation mode"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "conservativePointAndLineRasterization"
              },
              "comment": {
                "#text": "true if conservative rasterization also applies to points and lines"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "degenerateTrianglesRasterized"
              },
              "comment": {
                "#text": "true if degenerate triangles (those with zero area after snap) are rasterized"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "degenerateLinesRasterized"
              },
              "comment": {
                "#text": "true if degenerate lines (those with zero length after snap) are rasterized"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fullyCoveredFragmentShaderInputVariable"
              },
              "comment": {
                "#text": "true if the implementation supports the FullyCoveredEXT SPIR-V builtin fragment shader input variable"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "conservativeRasterizationPostDepthCoverage"
              },
              "comment": {
                "#text": "true if the implementation supports both conservative rasterization and post depth coverage sample coverage mask"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceConservativeRasterizationPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkTimeDomainEXT"
              },
              "name": {
                "#text": "timeDomain"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCalibratedTimestampInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderEngineCount"
              },
              "comment": {
                "#text": "number of shader engines"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderArraysPerEngineCount"
              },
              "comment": {
                "#text": "number of shader arrays"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "computeUnitsPerShaderArray"
              },
              "comment": {
                "#text": "number of physical CUs per shader array"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "simdPerComputeUnit"
              },
              "comment": {
                "#text": "number of SIMDs per compute unit"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "wavefrontsPerSimd"
              },
              "comment": {
                "#text": "number of wavefront slots in each SIMD"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "wavefrontSize"
              },
              "comment": {
                "#text": "maximum number of threads per wavefront"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sgprsPerSimd"
              },
              "comment": {
                "#text": "number of physical SGPRs per SIMD"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minSgprAllocation"
              },
              "comment": {
                "#text": "minimum number of SGPRs that can be allocated by a wave"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSgprAllocation"
              },
              "comment": {
                "#text": "number of available SGPRs"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sgprAllocationGranularity"
              },
              "comment": {
                "#text": "SGPRs are allocated in groups of this size"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vgprsPerSimd"
              },
              "comment": {
                "#text": "number of physical VGPRs per SIMD"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minVgprAllocation"
              },
              "comment": {
                "#text": "minimum number of VGPRs that can be allocated by a wave"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVgprAllocation"
              },
              "comment": {
                "#text": "number of available VGPRs"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vgprAllocationGranularity"
              },
              "comment": {
                "#text": "VGPRs are allocated in groups of this size"
              },
              "$limittype": "min,mul"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderCorePropertiesAMD",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "comment": {
                "#text": "Pointer to next structure"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderCorePropertiesFlagsAMD"
              },
              "name": {
                "#text": "shaderCoreFeatures"
              },
              "comment": {
                "#text": "features supported by the shader core"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "activeComputeUnitCount"
              },
              "comment": {
                "#text": "number of active compute units across all shader engines/arrays"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderCoreProperties2AMD",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRasterizationConservativeStateCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Reserved"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkConservativeRasterizationModeEXT"
              },
              "name": {
                "#text": "conservativeRasterizationMode"
              },
              "comment": {
                "#text": "Conservative rasterization mode"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "extraPrimitiveOverestimationSize"
              },
              "comment": {
                "#text": "Extra overestimation to add to the primitive"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationConservativeStateCreateInfoEXT",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformTexelBufferArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageTexelBufferArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampledImageArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformTexelBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageTexelBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUniformBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingSampledImageUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageImageUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUniformTexelBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageTexelBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUpdateUnusedWhilePending"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingPartiallyBound"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingVariableDescriptorCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "runtimeDescriptorArray"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorIndexingFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorIndexingFeaturesEXT",
          "$alias": "VkPhysicalDeviceDescriptorIndexingFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxUpdateAfterBindDescriptorsInAllPools"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformBufferArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampledImageArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageBufferArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustBufferAccessUpdateAfterBind"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "quadDivergentImplicitLod"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindSamplers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindUniformBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindStorageBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindSampledImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindStorageImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindInputAttachments"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageUpdateAfterBindResources"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindSamplers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindUniformBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindSampledImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindInputAttachments"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorIndexingProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorIndexingPropertiesEXT",
          "$alias": "VkPhysicalDeviceDescriptorIndexingProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindingCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorBindingFlags"
              },
              "name": {
                "#text": "pBindingFlags"
              },
              "#text": "const*",
              "$len": "bindingCount",
              "$optional": "false,true"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutBindingFlagsCreateInfo",
          "$structextends": "VkDescriptorSetLayoutCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT",
          "$alias": "VkDescriptorSetLayoutBindingFlagsCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorSetCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDescriptorCounts"
              },
              "#text": "const*",
              "$len": "descriptorSetCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetVariableDescriptorCountAllocateInfo",
          "$structextends": "VkDescriptorSetAllocateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT",
          "$alias": "VkDescriptorSetVariableDescriptorCountAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVariableDescriptorCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetVariableDescriptorCountLayoutSupport",
          "$structextends": "VkDescriptorSetLayoutSupport",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT",
          "$alias": "VkDescriptorSetVariableDescriptorCountLayoutSupport"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentDescriptionFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentLoadOp"
              },
              "name": {
                "#text": "loadOp"
              },
              "comment": {
                "#text": "Load operation for color or depth data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentStoreOp"
              },
              "name": {
                "#text": "storeOp"
              },
              "comment": {
                "#text": "Store operation for color or depth data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentLoadOp"
              },
              "name": {
                "#text": "stencilLoadOp"
              },
              "comment": {
                "#text": "Load operation for stencil data"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentStoreOp"
              },
              "name": {
                "#text": "stencilStoreOp"
              },
              "comment": {
                "#text": "Store operation for stencil data"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "initialLayout"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "finalLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentDescription2"
        },
        {
          "$category": "struct",
          "$name": "VkAttachmentDescription2KHR",
          "$alias": "VkAttachmentDescription2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachment"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "VkImageAspectFlags"
              },
              "name": {
                "#text": "aspectMask"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentReference2"
        },
        {
          "$category": "struct",
          "$name": "VkAttachmentReference2KHR",
          "$alias": "VkAttachmentReference2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubpassDescriptionFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "inputAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pInputAttachments"
              },
              "#text": "const*",
              "$len": "inputAttachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pColorAttachments"
              },
              "#text": "const*",
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pResolveAttachments"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pDepthStencilAttachment"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "preserveAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPreserveAttachments"
              },
              "#text": "const*",
              "$len": "preserveAttachmentCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassDescription2"
        },
        {
          "$category": "struct",
          "$name": "VkSubpassDescription2KHR",
          "$alias": "VkSubpassDescription2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcSubpass"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstSubpass"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDependencyFlags"
              },
              "name": {
                "#text": "dependencyFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "viewOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassDependency2"
        },
        {
          "$category": "struct",
          "$name": "VkSubpassDependency2KHR",
          "$alias": "VkSubpassDependency2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPassCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentDescription2"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpassCount"
              }
            },
            {
              "type": {
                "#text": "VkSubpassDescription2"
              },
              "name": {
                "#text": "pSubpasses"
              },
              "#text": "const*",
              "$len": "subpassCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dependencyCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubpassDependency2"
              },
              "name": {
                "#text": "pDependencies"
              },
              "#text": "const*",
              "$len": "dependencyCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "correlatedViewMaskCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCorrelatedViewMasks"
              },
              "#text": "const*",
              "$len": "correlatedViewMaskCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassCreateInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkRenderPassCreateInfo2KHR",
          "$alias": "VkRenderPassCreateInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubpassContents"
              },
              "name": {
                "#text": "contents"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassBeginInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSubpassBeginInfoKHR",
          "$alias": "VkSubpassBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassEndInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSubpassEndInfoKHR",
          "$alias": "VkSubpassEndInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "timelineSemaphore"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTimelineSemaphoreFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceTimelineSemaphoreFeaturesKHR",
          "$alias": "VkPhysicalDeviceTimelineSemaphoreFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxTimelineSemaphoreValueDifference"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTimelineSemaphoreProperties",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceTimelineSemaphorePropertiesKHR",
          "$alias": "VkPhysicalDeviceTimelineSemaphoreProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphoreType"
              },
              "name": {
                "#text": "semaphoreType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "initialValue"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreTypeCreateInfo",
          "$structextends": "VkSemaphoreCreateInfo,VkPhysicalDeviceExternalSemaphoreInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSemaphoreTypeCreateInfoKHR",
          "$alias": "VkSemaphoreTypeCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreValueCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pWaitSemaphoreValues"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "waitSemaphoreValueCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreValueCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pSignalSemaphoreValues"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "signalSemaphoreValueCount"
            }
          ],
          "$category": "struct",
          "$name": "VkTimelineSemaphoreSubmitInfo",
          "$structextends": "VkSubmitInfo,VkBindSparseInfo"
        },
        {
          "$category": "struct",
          "$name": "VkTimelineSemaphoreSubmitInfoKHR",
          "$alias": "VkTimelineSemaphoreSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphoreWaitFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "semaphoreCount"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pSemaphores"
              },
              "#text": "const*",
              "$len": "semaphoreCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pValues"
              },
              "#text": "const*",
              "$len": "semaphoreCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreWaitInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSemaphoreWaitInfoKHR",
          "$alias": "VkSemaphoreWaitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "value"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreSignalInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSemaphoreSignalInfoKHR",
          "$alias": "VkSemaphoreSignalInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "divisor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVertexInputBindingDivisorDescriptionEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexBindingDivisorCount"
              }
            },
            {
              "type": {
                "#text": "VkVertexInputBindingDivisorDescriptionEXT"
              },
              "name": {
                "#text": "pVertexBindingDivisors"
              },
              "#text": "const*",
              "$len": "vertexBindingDivisorCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineVertexInputDivisorStateCreateInfoEXT",
          "$structextends": "VkPipelineVertexInputStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertexAttribDivisor"
              },
              "comment": {
                "#text": "max value of vertex attribute divisor"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pciDomain"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pciBus"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pciDevice"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pciFunction"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePCIBusInfoPropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "AHardwareBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "#text": "struct*"
            }
          ],
          "$category": "struct",
          "$name": "VkImportAndroidHardwareBufferInfoANDROID",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "androidHardwareBufferUsage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAndroidHardwareBufferUsageANDROID",
          "$structextends": "VkImageFormatProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "allocationSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAndroidHardwareBufferPropertiesANDROID",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryGetAndroidHardwareBufferInfoANDROID"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "externalFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "formatFeatures"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "samplerYcbcrConversionComponents"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrModelConversion"
              },
              "name": {
                "#text": "suggestedYcbcrModel"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrRange"
              },
              "name": {
                "#text": "suggestedYcbcrRange"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedXChromaOffset"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedYChromaOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAndroidHardwareBufferFormatPropertiesANDROID",
          "$structextends": "VkAndroidHardwareBufferPropertiesANDROID",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "conditionalRenderingEnable"
              },
              "comment": {
                "#text": "Whether this secondary command buffer may be executed during an active conditional rendering"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceConditionalRenderingInfoEXT",
          "$structextends": "VkCommandBufferInheritanceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "externalFormat"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExternalFormatANDROID",
          "$structextends": "VkImageCreateInfo,VkSamplerYcbcrConversionCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageBuffer8BitAccess"
              },
              "comment": {
                "#text": "8-bit integer variables supported in StorageBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformAndStorageBuffer8BitAccess"
              },
              "comment": {
                "#text": "8-bit integer variables supported in StorageBuffer and Uniform"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storagePushConstant8"
              },
              "comment": {
                "#text": "8-bit integer variables supported in PushConstant"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevice8BitStorageFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDevice8BitStorageFeaturesKHR",
          "$alias": "VkPhysicalDevice8BitStorageFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "conditionalRendering"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "inheritedConditionalRendering"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceConditionalRenderingFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModel"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModelDeviceScope"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModelAvailabilityVisibilityChains"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkanMemoryModelFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR",
          "$alias": "VkPhysicalDeviceVulkanMemoryModelFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferInt64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedInt64Atomics"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderAtomicInt64Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderAtomicInt64Features"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat32Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat32AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat64AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat32Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat32AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat64AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderImageFloat32Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderImageFloat32AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseImageFloat32Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseImageFloat32AtomicAdd"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat16Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat16AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat16AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat32AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferFloat64AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat16Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat16AtomicAdd"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat16AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat32AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedFloat64AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderImageFloat32AtomicMinMax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseImageFloat32AtomicMinMax"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexAttributeInstanceRateDivisor"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexAttributeInstanceRateZeroDivisor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "checkpointExecutionStageMask"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyCheckpointPropertiesNV",
          "$structextends": "VkQueueFamilyProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlagBits"
              },
              "name": {
                "#text": "stage"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pCheckpointMarker"
              },
              "#text": "*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCheckpointDataNV",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkResolveModeFlags"
              },
              "name": {
                "#text": "supportedDepthResolveModes"
              },
              "comment": {
                "#text": "supported depth resolve modes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkResolveModeFlags"
              },
              "name": {
                "#text": "supportedStencilResolveModes"
              },
              "comment": {
                "#text": "supported stencil resolve modes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "independentResolveNone"
              },
              "comment": {
                "#text": "depth and stencil resolve modes can be set independently if one of them is none"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "independentResolve"
              },
              "comment": {
                "#text": "depth and stencil resolve modes can be set independently"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDepthStencilResolveProperties",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceDepthStencilResolvePropertiesKHR",
          "$alias": "VkPhysicalDeviceDepthStencilResolveProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkResolveModeFlagBits"
              },
              "name": {
                "#text": "depthResolveMode"
              },
              "comment": {
                "#text": "depth resolve mode"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkResolveModeFlagBits"
              },
              "name": {
                "#text": "stencilResolveMode"
              },
              "comment": {
                "#text": "stencil resolve mode"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pDepthStencilResolveAttachment"
              },
              "comment": {
                "#text": "depth/stencil resolve attachment"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassDescriptionDepthStencilResolve",
          "$structextends": "VkSubpassDescription2"
        },
        {
          "$category": "struct",
          "$name": "VkSubpassDescriptionDepthStencilResolveKHR",
          "$alias": "VkSubpassDescriptionDepthStencilResolve"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "decodeMode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewASTCDecodeModeEXT",
          "$structextends": "VkImageViewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "decodeModeSharedExponent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceASTCDecodeFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedback"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "geometryStreams"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTransformFeedbackFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTransformFeedbackStreams"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTransformFeedbackBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxTransformFeedbackBufferSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTransformFeedbackStreamDataSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTransformFeedbackBufferDataSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTransformFeedbackBufferDataStride"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackQueries"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackStreamsLinesTriangles"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackRasterizationStreamSelect"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackDraw"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTransformFeedbackPropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRasterizationStateStreamCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rasterizationStream"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationStateStreamCreateInfoEXT",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "representativeFragmentTest"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "representativeFragmentTestEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRepresentativeFragmentTestStateCreateInfoNV",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "exclusiveScissor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExclusiveScissorFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "exclusiveScissorCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pExclusiveScissors"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "exclusiveScissorCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportExclusiveScissorStateCreateInfoNV",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "cornerSampledImage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCornerSampledImageFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "computeDerivativeGroupQuads"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "computeDerivativeGroupLinear"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV",
          "$alias": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageFootprint"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderImageFootprintFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dedicatedAllocationImageAliasing"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "indirectCopy"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueueFlags"
              },
              "name": {
                "#text": "supportedQueues"
              },
              "comment": {
                "#text": "Bitfield of which queues are supported for indirect copy"
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "memoryDecompression"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryDecompressionFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryDecompressionMethodFlagsNV"
              },
              "name": {
                "#text": "decompressionMethods"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxDecompressionIndirectCount"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryDecompressionPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shadingRatePaletteEntryCount"
              }
            },
            {
              "type": {
                "#text": "VkShadingRatePaletteEntryNV"
              },
              "name": {
                "#text": "pShadingRatePaletteEntries"
              },
              "#text": "const*",
              "$len": "shadingRatePaletteEntryCount"
            }
          ],
          "$category": "struct",
          "$name": "VkShadingRatePaletteNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shadingRateImageEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShadingRatePaletteNV"
              },
              "name": {
                "#text": "pShadingRatePalettes"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "viewportCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportShadingRateImageStateCreateInfoNV",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shadingRateImage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shadingRateCoarseSampleOrder"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShadingRateImageFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "shadingRateTexelSize"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shadingRatePaletteSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shadingRateMaxCoarseSamples"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShadingRateImagePropertiesNV",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "invocationMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pixelX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pixelY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sample"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCoarseSampleLocationNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkShadingRatePaletteEntryNV"
              },
              "name": {
                "#text": "shadingRate"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sampleCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sampleLocationCount"
              }
            },
            {
              "type": {
                "#text": "VkCoarseSampleLocationNV"
              },
              "name": {
                "#text": "pSampleLocations"
              },
              "#text": "const*",
              "$len": "sampleLocationCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCoarseSampleOrderCustomNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoarseSampleOrderTypeNV"
              },
              "name": {
                "#text": "sampleOrderType"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "customSampleOrderCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoarseSampleOrderCustomNV"
              },
              "name": {
                "#text": "pCustomSampleOrders"
              },
              "#text": "const*",
              "$len": "customSampleOrderCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "taskShader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "meshShader"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMeshShaderFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawMeshTasksCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupSize"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskTotalMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskOutputCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupSize"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshTotalMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputVertices"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputPrimitives"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshMultiviewViewCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "meshOutputPerVertexGranularity"
              },
              "$limittype": "min,mul"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "meshOutputPerPrimitiveGranularity"
              },
              "$limittype": "min,mul"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMeshShaderPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "taskCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstTask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDrawMeshTasksIndirectCommandNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "taskShader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "meshShader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiviewMeshShader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveFragmentShadingRateMeshShader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "meshShaderQueries"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMeshShaderFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupTotalCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupCount"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskWorkGroupSize"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskPayloadSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskSharedMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxTaskPayloadAndSharedMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupTotalCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupCount"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshWorkGroupSize"
              },
              "#text": "[3]",
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshSharedMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshPayloadAndSharedMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshPayloadAndOutputMemorySize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputComponents"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputVertices"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputPrimitives"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshOutputLayers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMeshMultiviewViewCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "meshOutputPerVertexGranularity"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "meshOutputPerPrimitiveGranularity"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPreferredTaskWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPreferredMeshWorkGroupInvocations"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "prefersLocalInvocationVertexOutput"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "prefersLocalInvocationPrimitiveOutput"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "prefersCompactVertexOutput"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "prefersCompactPrimitiveOutput"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMeshShaderPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountX"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountY"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountZ"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDrawMeshTasksIndirectCommandEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRayTracingShaderGroupTypeKHR"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "generalShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "closestHitShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "anyHitShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "intersectionShader"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRayTracingShaderGroupCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRayTracingShaderGroupTypeKHR"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "generalShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "closestHitShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "anyHitShader"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "intersectionShader"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pShaderGroupCaptureReplayHandle"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkRayTracingShaderGroupCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Pipeline creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stageCount"
              }
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateInfo"
              },
              "name": {
                "#text": "pStages"
              },
              "comment": {
                "#text": "One entry for each active shader stage"
              },
              "#text": "const*",
              "$len": "stageCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCount"
              }
            },
            {
              "type": {
                "#text": "VkRayTracingShaderGroupCreateInfoNV"
              },
              "name": {
                "#text": "pGroups"
              },
              "#text": "const*",
              "$len": "groupCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxRecursionDepth"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              },
              "comment": {
                "#text": "Interface layout of the pipeline"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "basePipelineHandle"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "basePipelineIndex"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRayTracingPipelineCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Pipeline creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stageCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineShaderStageCreateInfo"
              },
              "name": {
                "#text": "pStages"
              },
              "comment": {
                "#text": "One entry for each active shader stage"
              },
              "#text": "const*",
              "$len": "stageCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRayTracingShaderGroupCreateInfoKHR"
              },
              "name": {
                "#text": "pGroups"
              },
              "#text": "const*",
              "$len": "groupCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPipelineRayRecursionDepth"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLibraryCreateInfoKHR"
              },
              "name": {
                "#text": "pLibraryInfo"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRayTracingPipelineInterfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pLibraryInterface"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineDynamicStateCreateInfo"
              },
              "name": {
                "#text": "pDynamicState"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              },
              "comment": {
                "#text": "Interface layout of the pipeline"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "basePipelineHandle"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is nonzero, it specifies the handle of the base pipeline this is a derivative of"
              },
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "basePipelineIndex"
              },
              "comment": {
                "#text": "If VK_PIPELINE_CREATE_DERIVATIVE_BIT is set and this value is not -1, it specifies an index into pCreateInfos of the base pipeline this is a derivative of"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRayTracingPipelineCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "vertexData"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "vertexOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexCount"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "vertexStride"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "vertexFormat"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "indexData"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "indexOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "indexCount"
              }
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "indexType"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "transformData"
              },
              "comment": {
                "#text": "Optional reference to array of floats representing a 3x4 row major affine transformation matrix."
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "transformOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGeometryTrianglesNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "aabbData"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numAABBs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              },
              "comment": {
                "#text": "Stride in bytes between AABBs"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset in bytes of the first AABB in aabbData"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGeometryAABBNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkGeometryTrianglesNV"
              },
              "name": {
                "#text": "triangles"
              }
            },
            {
              "type": {
                "#text": "VkGeometryAABBNV"
              },
              "name": {
                "#text": "aabbs"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGeometryDataNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GEOMETRY_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkGeometryTypeKHR"
              },
              "name": {
                "#text": "geometryType"
              }
            },
            {
              "type": {
                "#text": "VkGeometryDataNV"
              },
              "name": {
                "#text": "geometry"
              }
            },
            {
              "type": {
                "#text": "VkGeometryFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkGeometryNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureTypeNV"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkBuildAccelerationStructureFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "geometryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkGeometryNV"
              },
              "name": {
                "#text": "pGeometries"
              },
              "#text": "const*",
              "$len": "geometryCount"
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "compactedSize"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureInfoNV"
              },
              "name": {
                "#text": "info"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "accelerationStructure"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceIndexCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDeviceIndices"
              },
              "#text": "const*",
              "$len": "deviceIndexCount"
            }
          ],
          "$category": "struct",
          "$name": "VkBindAccelerationStructureMemoryInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "accelerationStructureCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "pAccelerationStructures"
              },
              "#text": "const*",
              "$optional": "false,true",
              "$len": "accelerationStructureCount"
            }
          ],
          "$category": "struct",
          "$name": "VkWriteDescriptorSetAccelerationStructureKHR",
          "$structextends": "VkWriteDescriptorSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "accelerationStructureCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "pAccelerationStructures"
              },
              "#text": "const*",
              "$optional": "false,true",
              "$len": "accelerationStructureCount"
            }
          ],
          "$category": "struct",
          "$name": "VkWriteDescriptorSetAccelerationStructureNV",
          "$structextends": "VkWriteDescriptorSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMemoryRequirementsTypeNV"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "accelerationStructure"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureMemoryRequirementsInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "accelerationStructure"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "accelerationStructureCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "accelerationStructureIndirectBuild"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "accelerationStructureHostCommands"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingAccelerationStructureUpdateAfterBind"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceAccelerationStructureFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingPipeline"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingPipelineShaderGroupHandleCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingPipelineShaderGroupHandleCaptureReplayMixed"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingPipelineTraceRaysIndirect"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTraversalPrimitiveCulling"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayQuery"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayQueryFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxGeometryCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxInstanceCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxPrimitiveCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorAccelerationStructures"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindAccelerationStructures"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetAccelerationStructures"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindAccelerationStructures"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minAccelerationStructureScratchOffsetAlignment"
              },
              "$limittype": "min"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceAccelerationStructurePropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupHandleSize"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxRayRecursionDepth"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxShaderGroupStride"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupBaseAlignment"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupHandleCaptureReplaySize"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxRayDispatchInvocationCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupHandleAlignment"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxRayHitAttributeSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingPipelinePropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupHandleSize"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxRecursionDepth"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxShaderGroupStride"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderGroupBaseAlignment"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxGeometryCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxInstanceCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxTriangleCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetAccelerationStructures"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkStridedDeviceAddressRegionKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "depth"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkTraceRaysIndirectCommandKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "raygenShaderRecordAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "raygenShaderRecordSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "missShaderBindingTableAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "missShaderBindingTableSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "missShaderBindingTableStride"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "hitShaderBindingTableAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "hitShaderBindingTableSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "hitShaderBindingTableStride"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "callableShaderBindingTableAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "callableShaderBindingTableSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "callableShaderBindingTableStride"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "depth"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkTraceRaysIndirectCommand2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingMaintenance1"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingPipelineTraceRaysIndirect2"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDrmFormatModifierPropertiesEXT"
              },
              "name": {
                "#text": "pDrmFormatModifierProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "drmFormatModifierCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDrmFormatModifierPropertiesListEXT",
          "$returnedonly": true,
          "$structextends": "VkFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "drmFormatModifier"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierPlaneCount"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "drmFormatModifierTilingFeatures"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDrmFormatModifierPropertiesEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "drmFormatModifier"
              }
            },
            {
              "type": {
                "#text": "VkSharingMode"
              },
              "name": {
                "#text": "sharingMode"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndexCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyIndices"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "queueFamilyIndexCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageDrmFormatModifierInfoEXT",
          "$structextends": "VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierCount"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pDrmFormatModifiers"
              },
              "#text": "const*",
              "$len": "drmFormatModifierCount"
            }
          ],
          "$category": "struct",
          "$name": "VkImageDrmFormatModifierListCreateInfoEXT",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "drmFormatModifier"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierPlaneCount"
              },
              "$optional": false
            },
            {
              "type": {
                "#text": "VkSubresourceLayout"
              },
              "name": {
                "#text": "pPlaneLayouts"
              },
              "#text": "const*",
              "$len": "drmFormatModifierPlaneCount"
            }
          ],
          "$category": "struct",
          "$name": "VkImageDrmFormatModifierExplicitCreateInfoEXT",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "drmFormatModifier"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageDrmFormatModifierPropertiesEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "stencilUsage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageStencilUsageCreateInfo",
          "$structextends": "VkImageCreateInfo,VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkImageStencilUsageCreateInfoEXT",
          "$alias": "VkImageStencilUsageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryOverallocationBehaviorAMD"
              },
              "name": {
                "#text": "overallocationBehavior"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceMemoryOverallocationCreateInfoAMD",
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityMap"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityMapDynamic"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityMapNonSubsampledImages"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMapFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityMapDeferred"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityMapOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minFragmentDensityTexelSize"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxFragmentDensityTexelSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentDensityInvocations"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMapPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subsampledLoads"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subsampledCoarseReconstructionEarlyAccess"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSubsampledArrayLayers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetSubsampledSamplers"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "fragmentDensityOffsetGranularity"
              },
              "$limittype": "min,mul"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference"
              },
              "name": {
                "#text": "fragmentDensityMapAttachment"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassFragmentDensityMapCreateInfoEXT",
          "$structextends": "VkRenderPassCreateInfo,VkRenderPassCreateInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fragmentDensityOffsetCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "pFragmentDensityOffsets"
              },
              "#text": "const*",
              "$len": "fragmentDensityOffsetCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassFragmentDensityMapOffsetEndInfoQCOM",
          "$structextends": "VkSubpassEndInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "scalarBlockLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceScalarBlockLayoutFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT",
          "$alias": "VkPhysicalDeviceScalarBlockLayoutFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "supportsProtected"
              },
              "comment": {
                "#text": "Represents if surface can be protected"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceProtectedCapabilitiesKHR",
          "$structextends": "VkSurfaceCapabilities2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformBufferStandardLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR",
          "$alias": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClipEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDepthClipEnableFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRasterizationDepthClipStateCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Reserved"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClipEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationDepthClipStateCreateInfoEXT",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "heapBudget"
              },
              "enum": {
                "#text": "VK_MAX_MEMORY_HEAPS"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "heapUsage"
              },
              "enum": {
                "#text": "VK_MAX_MEMORY_HEAPS"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryBudgetPropertiesEXT",
          "$structextends": "VkPhysicalDeviceMemoryProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "memoryPriority"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMemoryPriorityFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "priority"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryPriorityAllocateInfoEXT",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pageableDeviceLocalMemory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddress"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressMultiDevice"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceBufferDeviceAddressFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceBufferDeviceAddressFeaturesKHR",
          "$alias": "VkPhysicalDeviceBufferDeviceAddressFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddress"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressMultiDevice"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceBufferAddressFeaturesEXT",
          "$alias": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferDeviceAddressInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBufferDeviceAddressInfoKHR",
          "$alias": "VkBufferDeviceAddressInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBufferDeviceAddressInfoEXT",
          "$alias": "VkBufferDeviceAddressInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "opaqueCaptureAddress"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferOpaqueCaptureAddressCreateInfo",
          "$structextends": "VkBufferCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkBufferOpaqueCaptureAddressCreateInfoKHR",
          "$alias": "VkBufferOpaqueCaptureAddressCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferDeviceAddressCreateInfoEXT",
          "$structextends": "VkBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageViewType"
              },
              "name": {
                "#text": "imageViewType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageViewImageFormatInfoEXT",
          "$structextends": "VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterCubic"
              },
              "comment": {
                "#text": "The combinations of format, image type (and image view type if provided) can be filtered with VK_FILTER_CUBIC_EXT"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterCubicMinmax"
              },
              "comment": {
                "#text": "The combination of format, image type (and image view type if provided) can be filtered with VK_FILTER_CUBIC_EXT and ReductionMode of Min or Max"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFilterCubicImageViewImageFormatPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkImageFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imagelessFramebuffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImagelessFramebufferFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceImagelessFramebufferFeaturesKHR",
          "$alias": "VkPhysicalDeviceImagelessFramebufferFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentImageInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFramebufferAttachmentImageInfo"
              },
              "name": {
                "#text": "pAttachmentImageInfos"
              },
              "#text": "const*",
              "$len": "attachmentImageInfoCount"
            }
          ],
          "$category": "struct",
          "$name": "VkFramebufferAttachmentsCreateInfo",
          "$structextends": "VkFramebufferCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkFramebufferAttachmentsCreateInfoKHR",
          "$alias": "VkFramebufferAttachmentsCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Image creation flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              },
              "comment": {
                "#text": "Image usage flags"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layerCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewFormatCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "pViewFormats"
              },
              "#text": "const*",
              "$len": "viewFormatCount"
            }
          ],
          "$category": "struct",
          "$name": "VkFramebufferAttachmentImageInfo"
        },
        {
          "$category": "struct",
          "$name": "VkFramebufferAttachmentImageInfoKHR",
          "$alias": "VkFramebufferAttachmentImageInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassAttachmentBeginInfo",
          "$structextends": "VkRenderPassBeginInfo"
        },
        {
          "$category": "struct",
          "$name": "VkRenderPassAttachmentBeginInfoKHR",
          "$alias": "VkRenderPassAttachmentBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureCompressionASTC_HDR"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT",
          "$alias": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "cooperativeMatrix"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "cooperativeMatrixRobustBufferAccess"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCooperativeMatrixFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "cooperativeMatrixSupportedStages"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCooperativeMatrixPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "MSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "NSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "KSize"
              }
            },
            {
              "type": {
                "#text": "VkComponentTypeNV"
              },
              "name": {
                "#text": "AType"
              }
            },
            {
              "type": {
                "#text": "VkComponentTypeNV"
              },
              "name": {
                "#text": "BType"
              }
            },
            {
              "type": {
                "#text": "VkComponentTypeNV"
              },
              "name": {
                "#text": "CType"
              }
            },
            {
              "type": {
                "#text": "VkComponentTypeNV"
              },
              "name": {
                "#text": "DType"
              }
            },
            {
              "type": {
                "#text": "VkScopeNV"
              },
              "name": {
                "#text": "scope"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCooperativeMatrixPropertiesNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "ycbcrImageArrays"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "descriptorType"
              }
            },
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "sampler"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewHandleInfoNVX"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewAddressPropertiesNVX",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "GgpFrameToken"
              },
              "name": {
                "#text": "frameToken"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPresentFrameTokenGGP",
          "$structextends": "VkPresentInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkPipelineCreationFeedbackFlags"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "duration"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCreationFeedback",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPipelineCreationFeedbackEXT",
          "$alias": "VkPipelineCreationFeedback"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreationFeedback"
              },
              "name": {
                "#text": "pPipelineCreationFeedback"
              },
              "comment": {
                "#text": "Output pipeline creation feedback."
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pipelineStageCreationFeedbackCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCreationFeedback"
              },
              "name": {
                "#text": "pPipelineStageCreationFeedbacks"
              },
              "comment": {
                "#text": "One entry for each shader stage specified in the parent Vk*PipelineCreateInfo struct"
              },
              "#text": "*",
              "$len": "pipelineStageCreationFeedbackCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCreationFeedbackCreateInfo",
          "$structextends": "VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkRayTracingPipelineCreateInfoNV,VkRayTracingPipelineCreateInfoKHR"
        },
        {
          "$category": "struct",
          "$name": "VkPipelineCreationFeedbackCreateInfoEXT",
          "$alias": "VkPipelineCreationFeedbackCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFullScreenExclusiveEXT"
              },
              "name": {
                "#text": "fullScreenExclusive"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceFullScreenExclusiveInfoEXT",
          "$structextends": "VkPhysicalDeviceSurfaceInfo2KHR,VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "HMONITOR"
              },
              "name": {
                "#text": "hmonitor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceFullScreenExclusiveWin32InfoEXT",
          "$structextends": "VkPhysicalDeviceSurfaceInfo2KHR,VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fullScreenExclusiveSupported"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceCapabilitiesFullScreenExclusiveEXT",
          "$structextends": "VkSurfaceCapabilities2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "presentBarrier"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePresentBarrierFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "presentBarrierSupported"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSurfaceCapabilitiesPresentBarrierNV",
          "$structextends": "VkSurfaceCapabilities2KHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "presentBarrierEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSwapchainPresentBarrierCreateInfoNV",
          "$structextends": "VkSwapchainCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "performanceCounterQueryPools"
              },
              "comment": {
                "#text": "performance counters supported in query pools"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "performanceCounterMultipleQueryPools"
              },
              "comment": {
                "#text": "performance counters from multiple query pools can be accessed in the same primary command buffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePerformanceQueryFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "allowCommandBufferQueryCopies"
              },
              "comment": {
                "#text": "Flag to specify whether performance queries are allowed to be used in vkCmdCopyQueryPoolResults"
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePerformanceQueryPropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPerformanceCounterUnitKHR"
              },
              "name": {
                "#text": "unit"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceCounterScopeKHR"
              },
              "name": {
                "#text": "scope"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceCounterStorageKHR"
              },
              "name": {
                "#text": "storage"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "uuid"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceCounterKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPerformanceCounterDescriptionFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "name"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "category"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceCounterDescriptionKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "counterIndexCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCounterIndices"
              },
              "#text": "const*",
              "$len": "counterIndexCount"
            }
          ],
          "$category": "struct",
          "$name": "VkQueryPoolPerformanceCreateInfoKHR",
          "$structextends": "VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "int32"
              }
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "int64"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "uint32"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "uint64"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "float32"
              }
            },
            {
              "type": {
                "#text": "double"
              },
              "name": {
                "#text": "float64"
              }
            }
          ],
          "$category": "union",
          "$name": "VkPerformanceCounterResultKHR",
          "$comment": "// Union of all the possible return types a counter result could return"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAcquireProfilingLockFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "comment": {
                "#text": "Acquire profiling lock flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAcquireProfilingLockInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "counterPassIndex"
              },
              "comment": {
                "#text": "Index for which counter pass to submit"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceQuerySubmitInfoKHR",
          "$structextends": "VkSubmitInfo,VkSubmitInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkHeadlessSurfaceCreateFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkHeadlessSurfaceCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "coverageReductionMode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCoverageReductionModeFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCoverageReductionStateCreateFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoverageReductionModeNV"
              },
              "name": {
                "#text": "coverageReductionMode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCoverageReductionStateCreateInfoNV",
          "$structextends": "VkPipelineMultisampleStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoverageReductionModeNV"
              },
              "name": {
                "#text": "coverageReductionMode"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "rasterizationSamples"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "depthStencilSamples"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "colorSamples"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFramebufferMixedSamplesCombinationNV",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderIntegerFunctions2"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "value32"
              },
              "$selection": "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "value64"
              },
              "$selection": "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL"
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "valueFloat"
              },
              "$selection": "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "valueBool"
              },
              "$selection": "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "valueString"
              },
              "#text": "const*",
              "$selection": "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL",
              "$len": "null-terminated"
            }
          ],
          "$category": "union",
          "$name": "VkPerformanceValueDataINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkPerformanceValueTypeINTEL"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceValueDataINTEL"
              },
              "name": {
                "#text": "data"
              },
              "$selector": "type",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceValueINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pUserData"
              },
              "#text": "*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkInitializePerformanceApiInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueryPoolSamplingModeINTEL"
              },
              "name": {
                "#text": "performanceCountersSampling"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkQueryPoolPerformanceQueryCreateInfoINTEL",
          "$structextends": "VkQueryPoolCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkQueryPoolCreateInfoINTEL",
          "$alias": "VkQueryPoolPerformanceQueryCreateInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "marker"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceMarkerInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "marker"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceStreamMarkerInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPerformanceOverrideTypeINTEL"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "enable"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "parameter"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceOverrideInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPerformanceConfigurationTypeINTEL"
              },
              "name": {
                "#text": "type"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPerformanceConfigurationAcquireInfoINTEL"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSubgroupClock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDeviceClock"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderClockFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "indexTypeUint8"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceIndexTypeUint8FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderSMCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderWarpsPerSM"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSMBuiltins"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "comment": {
                "#text": "Pointer to next structure"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShaderSampleInterlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShaderPixelInterlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShaderShadingRateInterlock"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "separateDepthStencilLayouts"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR",
          "$alias": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "stencilLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentReferenceStencilLayout",
          "$structextends": "VkAttachmentReference2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveTopologyListRestart"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveTopologyPatchListRestart"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkAttachmentReferenceStencilLayoutKHR",
          "$alias": "VkAttachmentReferenceStencilLayout"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "stencilInitialLayout"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "stencilFinalLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentDescriptionStencilLayout",
          "$structextends": "VkAttachmentDescription2"
        },
        {
          "$category": "struct",
          "$name": "VkAttachmentDescriptionStencilLayoutKHR",
          "$alias": "VkAttachmentDescriptionStencilLayout"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineExecutableInfo"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineInfoKHR"
        },
        {
          "$category": "struct",
          "$name": "VkPipelineInfoEXT",
          "$alias": "VkPipelineInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "stages"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "name"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subgroupSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineExecutablePropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "executableIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineExecutableInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "b32"
              },
              "$selection": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR"
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "i64"
              },
              "$selection": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "u64"
              },
              "$selection": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR"
            },
            {
              "type": {
                "#text": "double"
              },
              "name": {
                "#text": "f64"
              },
              "$selection": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR"
            }
          ],
          "$category": "union",
          "$name": "VkPipelineExecutableStatisticValueKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "name"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkPipelineExecutableStatisticFormatKHR"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkPipelineExecutableStatisticValueKHR"
              },
              "name": {
                "#text": "value"
              },
              "$selector": "format",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineExecutableStatisticKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "name"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "isText"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$optional": true,
              "$len": "dataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineExecutableInternalRepresentationKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDemoteToHelperInvocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT",
          "$alias": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "texelBufferAlignment"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "storageTexelBufferOffsetAlignmentBytes"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageTexelBufferOffsetSingleTexelAlignment"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "uniformTexelBufferOffsetAlignmentBytes"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformTexelBufferOffsetSingleTexelAlignment"
              },
              "$limittype": "exact"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTexelBufferAlignmentProperties",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT",
          "$alias": "VkPhysicalDeviceTexelBufferAlignmentProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subgroupSizeControl"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "computeFullSubgroups"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubgroupSizeControlFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT",
          "$alias": "VkPhysicalDeviceSubgroupSizeControlFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minSubgroupSize"
              },
              "comment": {
                "#text": "The minimum subgroup size supported by this device"
              },
              "$limittype": "min,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSubgroupSize"
              },
              "comment": {
                "#text": "The maximum subgroup size supported by this device"
              },
              "$limittype": "max,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeWorkgroupSubgroups"
              },
              "comment": {
                "#text": "The maximum number of subgroups supported in a workgroup"
              },
              "$limittype": "max",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "requiredSubgroupSizeStages"
              },
              "comment": {
                "#text": "The shader stages that support specifying a subgroup size"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubgroupSizeControlProperties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT",
          "$alias": "VkPhysicalDeviceSubgroupSizeControlProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "requiredSubgroupSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo",
          "$returnedonly": true,
          "$structextends": "VkPipelineShaderStageCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT",
          "$alias": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subpass"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassShadingPipelineCreateInfoHUAWEI",
          "$returnedonly": true,
          "$structextends": "VkComputePipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSubpassShadingWorkgroupSizeAspectRatio"
              },
              "$limittype": "max,pot"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "opaqueCaptureAddress"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryOpaqueCaptureAddressAllocateInfo",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkMemoryOpaqueCaptureAddressAllocateInfoKHR",
          "$alias": "VkMemoryOpaqueCaptureAddressAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceMemoryOpaqueCaptureAddressInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDeviceMemoryOpaqueCaptureAddressInfoKHR",
          "$alias": "VkDeviceMemoryOpaqueCaptureAddressInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rectangularLines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bresenhamLines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "smoothLines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stippledRectangularLines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stippledBresenhamLines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stippledSmoothLines"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceLineRasterizationFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "lineSubPixelPrecisionBits"
              },
              "$limittype": "bits"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceLineRasterizationPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkLineRasterizationModeEXT"
              },
              "name": {
                "#text": "lineRasterizationMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stippledLineEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "lineStippleFactor"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "lineStipplePattern"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationLineStateCreateInfoEXT",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineCreationCacheControl"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineCreationCacheControlFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT",
          "$alias": "VkPhysicalDevicePipelineCreationCacheControlFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageBuffer16BitAccess"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in BufferBlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformAndStorageBuffer16BitAccess"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in BufferBlock and Block"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storagePushConstant16"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in PushConstant"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageInputOutput16"
              },
              "comment": {
                "#text": "16-bit integer/floating-point variables supported in shader inputs and outputs"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiview"
              },
              "comment": {
                "#text": "Multiple views in a renderpass"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiviewGeometryShader"
              },
              "comment": {
                "#text": "Multiple views in a renderpass w/ geometry shader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multiviewTessellationShader"
              },
              "comment": {
                "#text": "Multiple views in a renderpass w/ tessellation shader"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variablePointersStorageBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "variablePointers"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "protectedMemory"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerYcbcrConversion"
              },
              "comment": {
                "#text": "Sampler color conversion supported"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDrawParameters"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan11Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "deviceUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "driverUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "deviceLUID"
              },
              "enum": {
                "#text": "VK_LUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceNodeMask"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceLUIDValid"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subgroupSize"
              },
              "comment": {
                "#text": "The size of a subgroup for this queue."
              },
              "$limittype": "max,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "subgroupSupportedStages"
              },
              "comment": {
                "#text": "Bitfield of what shader stages support subgroup operations"
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkSubgroupFeatureFlags"
              },
              "name": {
                "#text": "subgroupSupportedOperations"
              },
              "comment": {
                "#text": "Bitfield of what subgroup operations are supported."
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subgroupQuadOperationsInAllStages"
              },
              "comment": {
                "#text": "Flag to specify whether quad operations are available in all stages."
              },
              "$limittype": "bitmask",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkPointClippingBehavior"
              },
              "name": {
                "#text": "pointClippingBehavior"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMultiviewViewCount"
              },
              "comment": {
                "#text": "max number of views in a subpass"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxMultiviewInstanceIndex"
              },
              "comment": {
                "#text": "max instance index for a draw in a multiview subpass"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "protectedNoFault"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerSetDescriptors"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxMemoryAllocationSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan11Properties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerMirrorClampToEdge"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "drawIndirectCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageBuffer8BitAccess"
              },
              "comment": {
                "#text": "8-bit integer variables supported in StorageBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformAndStorageBuffer8BitAccess"
              },
              "comment": {
                "#text": "8-bit integer variables supported in StorageBuffer and Uniform"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storagePushConstant8"
              },
              "comment": {
                "#text": "8-bit integer variables supported in PushConstant"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderBufferInt64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSharedInt64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderFloat16"
              },
              "comment": {
                "#text": "16-bit floats (halfs) in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInt8"
              },
              "comment": {
                "#text": "8-bit integers in shaders"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformTexelBufferArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageTexelBufferArrayDynamicIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampledImageArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformTexelBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageTexelBufferArrayNonUniformIndexing"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUniformBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingSampledImageUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageImageUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUniformTexelBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingStorageTexelBufferUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingUpdateUnusedWhilePending"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingPartiallyBound"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingVariableDescriptorCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "runtimeDescriptorArray"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerFilterMinmax"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "scalarBlockLayout"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imagelessFramebuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformBufferStandardLayout"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSubgroupExtendedTypes"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "separateDepthStencilLayouts"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "hostQueryReset"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "timelineSemaphore"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddress"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferDeviceAddressMultiDevice"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModel"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModelDeviceScope"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vulkanMemoryModelAvailabilityVisibilityChains"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderOutputViewportIndex"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderOutputLayer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subgroupBroadcastDynamicId"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan12Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDriverId"
              },
              "name": {
                "#text": "driverID"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "driverName"
              },
              "enum": {
                "#text": "VK_MAX_DRIVER_NAME_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "driverInfo"
              },
              "enum": {
                "#text": "VK_MAX_DRIVER_INFO_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkConformanceVersion"
              },
              "name": {
                "#text": "conformanceVersion"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkShaderFloatControlsIndependence"
              },
              "name": {
                "#text": "denormBehaviorIndependence"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkShaderFloatControlsIndependence"
              },
              "name": {
                "#text": "roundingModeIndependence"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat16"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat32"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSignedZeroInfNanPreserveFloat64"
              },
              "comment": {
                "#text": "An implementation can preserve signed zero, nan, inf"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat16"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat32"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormPreserveFloat64"
              },
              "comment": {
                "#text": "An implementation can preserve  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat16"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat32"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDenormFlushToZeroFloat64"
              },
              "comment": {
                "#text": "An implementation can flush to zero  denormals"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat16"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat32"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTEFloat64"
              },
              "comment": {
                "#text": "An implementation can support RTE"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat16"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat32"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderRoundingModeRTZFloat64"
              },
              "comment": {
                "#text": "An implementation can support RTZ"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxUpdateAfterBindDescriptorsInAllPools"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderUniformBufferArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampledImageArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageBufferArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderStorageImageArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderInputAttachmentArrayNonUniformIndexingNative"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustBufferAccessUpdateAfterBind"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "quadDivergentImplicitLod"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindSamplers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindUniformBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindStorageBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindSampledImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindStorageImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindInputAttachments"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageUpdateAfterBindResources"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindSamplers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindUniformBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageBuffers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindSampledImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindStorageImages"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindInputAttachments"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkResolveModeFlags"
              },
              "name": {
                "#text": "supportedDepthResolveModes"
              },
              "comment": {
                "#text": "supported depth resolve modes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkResolveModeFlags"
              },
              "name": {
                "#text": "supportedStencilResolveModes"
              },
              "comment": {
                "#text": "supported stencil resolve modes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "independentResolveNone"
              },
              "comment": {
                "#text": "depth and stencil resolve modes can be set independently if one of them is none"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "independentResolve"
              },
              "comment": {
                "#text": "depth and stencil resolve modes can be set independently"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterMinmaxSingleComponentFormats"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "filterMinmaxImageComponentMapping"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "maxTimelineSemaphoreValueDifference"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "framebufferIntegerColorSampleCounts"
              },
              "$limittype": "bitmask",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan12Properties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustImageAccess"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "inlineUniformBlock"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBindingInlineUniformBlockUpdateAfterBind"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineCreationCacheControl"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "privateData"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderDemoteToHelperInvocation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderTerminateInvocation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subgroupSizeControl"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "computeFullSubgroups"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "synchronization2"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureCompressionASTC_HDR"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderZeroInitializeWorkgroupMemory"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dynamicRendering"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderIntegerDotProduct"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "maintenance4"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan13Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minSubgroupSize"
              },
              "comment": {
                "#text": "The minimum subgroup size supported by this device"
              },
              "$limittype": "min,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSubgroupSize"
              },
              "comment": {
                "#text": "The maximum subgroup size supported by this device"
              },
              "$limittype": "max,pot",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxComputeWorkgroupSubgroups"
              },
              "comment": {
                "#text": "The maximum number of subgroups supported in a workgroup"
              },
              "$limittype": "max",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "requiredSubgroupSizeStages"
              },
              "comment": {
                "#text": "The shader stages that support specifying a subgroup size"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxInlineUniformBlockSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorSetUpdateAfterBindInlineUniformBlocks"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxInlineUniformTotalSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "storageTexelBufferOffsetAlignmentBytes"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "storageTexelBufferOffsetSingleTexelAlignment"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "uniformTexelBufferOffsetAlignmentBytes"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "uniformTexelBufferOffsetSingleTexelAlignment"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxBufferSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVulkan13Properties",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCompilerControlFlagsAMD"
              },
              "name": {
                "#text": "compilerControlFlags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineCompilerControlCreateInfoAMD",
          "$structextends": "VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceCoherentMemory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCoherentMemoryFeaturesAMD",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "name"
              },
              "enum": {
                "#text": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "version"
              },
              "enum": {
                "#text": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "VkToolPurposeFlags"
              },
              "name": {
                "#text": "purposes"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "layer"
              },
              "enum": {
                "#text": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceToolProperties",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceToolPropertiesEXT",
          "$alias": "VkPhysicalDeviceToolProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkClearColorValue"
              },
              "name": {
                "#text": "customBorderColor"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerCustomBorderColorCreateInfoEXT",
          "$structextends": "VkSamplerCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxCustomBorderColorSamplers"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCustomBorderColorPropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "customBorderColors"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "customBorderColorWithoutFormat"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceCustomBorderColorFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "components"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "srgb"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerBorderColorComponentMappingCreateInfoEXT",
          "$structextends": "VkSamplerCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "borderColorSwizzle"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "borderColorSwizzleFromImage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "hostAddress"
              },
              "#text": "*",
              "$noautovalidity": true
            }
          ],
          "$category": "union",
          "$name": "VkDeviceOrHostAddressKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "hostAddress"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$category": "union",
          "$name": "VkDeviceOrHostAddressConstKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "vertexFormat"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "vertexData"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "vertexStride"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxVertex"
              }
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "indexType"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "indexData"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "transformData"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureGeometryTrianglesDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "data"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureGeometryAabbsDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "arrayOfPointers"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "data"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureGeometryInstancesDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryTrianglesDataKHR"
              },
              "name": {
                "#text": "triangles"
              },
              "$selection": "VK_GEOMETRY_TYPE_TRIANGLES_KHR"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryAabbsDataKHR"
              },
              "name": {
                "#text": "aabbs"
              },
              "$selection": "VK_GEOMETRY_TYPE_AABBS_KHR"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryInstancesDataKHR"
              },
              "name": {
                "#text": "instances"
              },
              "$selection": "VK_GEOMETRY_TYPE_INSTANCES_KHR"
            }
          ],
          "$category": "union",
          "$name": "VkAccelerationStructureGeometryDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkGeometryTypeKHR"
              },
              "name": {
                "#text": "geometryType"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryDataKHR"
              },
              "name": {
                "#text": "geometry"
              },
              "$selector": "geometryType"
            },
            {
              "type": {
                "#text": "VkGeometryFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureGeometryKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureTypeKHR"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkBuildAccelerationStructureFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuildAccelerationStructureModeKHR"
              },
              "name": {
                "#text": "mode"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "srcAccelerationStructure"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "dstAccelerationStructure"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "geometryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryKHR"
              },
              "name": {
                "#text": "pGeometries"
              },
              "#text": "const*",
              "$len": "geometryCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureGeometryKHR"
              },
              "name": {
                "#text": "ppGeometries"
              },
              "#text": "const* const*",
              "$len": "geometryCount,1",
              "$optional": "true,false"
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressKHR"
              },
              "name": {
                "#text": "scratchData"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureBuildGeometryInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "primitiveCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "primitiveOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstVertex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "transformOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureBuildRangeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCreateFlagsKHR"
              },
              "name": {
                "#text": "createFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureTypeKHR"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minX"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minY"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minZ"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxX"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxY"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxZ"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAabbPositionsKHR"
        },
        {
          "$category": "struct",
          "$name": "VkAabbPositionsNV",
          "$alias": "VkAabbPositionsKHR"
        },
        {
          "member": {
            "type": {
              "#text": "float"
            },
            "name": {
              "#text": "matrix"
            },
            "#text": "[3][4]"
          },
          "$category": "struct",
          "$name": "VkTransformMatrixKHR"
        },
        {
          "$category": "struct",
          "$name": "VkTransformMatrixNV",
          "$alias": "VkTransformMatrixKHR"
        },
        {
          "comment": {
            "#text": "The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout."
          },
          "member": [
            {
              "type": {
                "#text": "VkTransformMatrixKHR"
              },
              "name": {
                "#text": "transform"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCustomIndex"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mask"
              },
              "#text": ":8"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceShaderBindingTableRecordOffset"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "VkGeometryInstanceFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "#text": ":8",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "accelerationStructureReference"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureInstanceKHR"
        },
        {
          "$category": "struct",
          "$name": "VkAccelerationStructureInstanceNV",
          "$alias": "VkAccelerationStructureInstanceKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "accelerationStructure"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureDeviceAddressInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pVersionData"
              },
              "#text": "const*",
              "$len": "latexmath:[2 \\times \\mathtt{VK\\_UUID\\_SIZE}]",
              "$altlen": "2*VK_UUID_SIZE"
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureVersionInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "src"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureModeKHR"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyAccelerationStructureInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "src"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressKHR"
              },
              "name": {
                "#text": "dst"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureModeKHR"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyAccelerationStructureToMemoryInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "src"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureModeKHR"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMemoryToAccelerationStructureInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPipelineRayPayloadSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxPipelineRayHitAttributeSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRayTracingPipelineInterfaceCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "libraryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pLibraries"
              },
              "#text": "const*",
              "$len": "libraryCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineLibraryCreateInfoKHR",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState2"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState2LogicOp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState2PatchControlPoints"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3TessellationDomainOrigin"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3DepthClampEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3PolygonMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3RasterizationSamples"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3SampleMask"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3AlphaToCoverageEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3AlphaToOneEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3LogicOpEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ColorBlendEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ColorBlendEquation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ColorWriteMask"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3RasterizationStream"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ConservativeRasterizationMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ExtraPrimitiveOverestimationSize"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3DepthClipEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3SampleLocationsEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ColorBlendAdvanced"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ProvokingVertexMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3LineRasterizationMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3LineStippleEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3DepthClipNegativeOneToOne"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ViewportWScalingEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ViewportSwizzle"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageToColorEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageToColorLocation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageModulationMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageModulationTableEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageModulationTable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3CoverageReductionMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3RepresentativeFragmentTestEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "extendedDynamicState3ShadingRateImageEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dynamicPrimitiveTopologyUnrestricted"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "srcColorBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "dstColorBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendOp"
              },
              "name": {
                "#text": "colorBlendOp"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "srcAlphaBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendFactor"
              },
              "name": {
                "#text": "dstAlphaBlendFactor"
              }
            },
            {
              "type": {
                "#text": "VkBlendOp"
              },
              "name": {
                "#text": "alphaBlendOp"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkColorBlendEquationEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkBlendOp"
              },
              "name": {
                "#text": "advancedBlendOp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "srcPremultiplied"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dstPremultiplied"
              }
            },
            {
              "type": {
                "#text": "VkBlendOverlapEXT"
              },
              "name": {
                "#text": "blendOverlap"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "clampResults"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkColorBlendAdvancedEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "comment": {
                "#text": "Pointer to next structure"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "transform"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassTransformBeginInfoQCOM",
          "$structextends": "VkRenderPassBeginInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "transform"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCopyCommandTransformInfoQCOM",
          "$structextends": "VkBufferImageCopy2,VkImageBlit2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "comment": {
                "#text": "Pointer to next structure"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceTransformFlagBitsKHR"
              },
              "name": {
                "#text": "transform"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "renderArea"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceRenderPassTransformInfoQCOM",
          "$structextends": "VkCommandBufferInheritanceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "diagnosticsConfig"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDiagnosticsConfigFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceDiagnosticsConfigFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceDiagnosticsConfigCreateInfoNV",
          "$structextends": "VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderZeroInitializeWorkgroupMemory"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR",
          "$alias": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSubgroupUniformControlFlow"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustBufferAccess2"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustImageAccess2"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "nullDescriptor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRobustness2FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "robustStorageBufferAccessSizeAlignment"
              },
              "$limittype": "min,pot"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "robustUniformBufferAccessSizeAlignment"
              },
              "$limittype": "min,pot"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRobustness2PropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "robustImageAccess"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageRobustnessFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageRobustnessFeaturesEXT",
          "$alias": "VkPhysicalDeviceImageRobustnessFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "workgroupMemoryExplicitLayout"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "workgroupMemoryExplicitLayoutScalarBlockLayout"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "workgroupMemoryExplicitLayout8BitAccess"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "workgroupMemoryExplicitLayout16BitAccess"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "constantAlphaColorBlendFactors"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "events"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageViewFormatReinterpretation"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageViewFormatSwizzle"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageView2DOn3DImage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multisampleArrayImage"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "mutableComparisonSamplers"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pointPolygons"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "samplerMipLodBias"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "separateStencilMaskRef"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderSampleRateInterpolationFunctions"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "tessellationIsolines"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "tessellationPointMode"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "triangleFans"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexAttributeAccessBeyondStride"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePortabilitySubsetFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minVertexInputBindingStrideAlignment"
              },
              "$limittype": "min,pot"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePortabilitySubsetPropertiesKHR",
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "formatA4R4G4B4"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "formatA4B4G4R4"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevice4444FormatsFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subpassShading"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COPY_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "srcOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              },
              "comment": {
                "#text": "Specified in bytes"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCopy2"
        },
        {
          "$category": "struct",
          "$name": "VkBufferCopy2KHR",
          "$alias": "VkBufferCopy2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_COPY_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageCopy2"
        },
        {
          "$category": "struct",
          "$name": "VkImageCopy2KHR",
          "$alias": "VkImageCopy2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffsets"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              },
              "#text": "[2]"
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffsets"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              },
              "#text": "[2]"
            }
          ],
          "$category": "struct",
          "$name": "VkImageBlit2"
        },
        {
          "$category": "struct",
          "$name": "VkImageBlit2KHR",
          "$alias": "VkImageBlit2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "bufferOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferRowLength"
              },
              "comment": {
                "#text": "Specified in texels"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferImageHeight"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "imageSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "imageOffset"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "imageExtent"
              },
              "comment": {
                "#text": "Specified in pixels for both compressed and uncompressed images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferImageCopy2"
        },
        {
          "$category": "struct",
          "$name": "VkBufferImageCopy2KHR",
          "$alias": "VkBufferImageCopy2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "srcSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "srcOffset"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "dstSubresource"
              }
            },
            {
              "type": {
                "#text": "VkOffset3D"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "extent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageResolve2"
        },
        {
          "$category": "struct",
          "$name": "VkImageResolve2KHR",
          "$alias": "VkImageResolve2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "srcBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferCopy2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCopyBufferInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkCopyBufferInfo2KHR",
          "$alias": "VkCopyBufferInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageCopy2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCopyImageInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkCopyImageInfo2KHR",
          "$alias": "VkCopyImageInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageBlit2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            },
            {
              "type": {
                "#text": "VkFilter"
              },
              "name": {
                "#text": "filter"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBlitImageInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkBlitImageInfo2KHR",
          "$alias": "VkBlitImageInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "srcBuffer"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferImageCopy2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCopyBufferToImageInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkCopyBufferToImageInfo2KHR",
          "$alias": "VkCopyBufferToImageInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferImageCopy2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCopyImageToBufferInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkCopyImageToBufferInfo2KHR",
          "$alias": "VkCopyImageToBufferInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageResolve2"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkResolveImageInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkResolveImageInfo2KHR",
          "$alias": "VkResolveImageInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderImageInt64Atomics"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sparseImageInt64Atomics"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAttachmentReference2"
              },
              "name": {
                "#text": "pFragmentShadingRateAttachment"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "shadingRateAttachmentTexelSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkFragmentShadingRateAttachmentInfoKHR",
          "$structextends": "VkSubpassDescription2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "fragmentSize"
              }
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateCombinerOpKHR"
              },
              "name": {
                "#text": "combinerOps"
              },
              "#text": "[2]",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineFragmentShadingRateStateCreateInfoKHR",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineFragmentShadingRate"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveFragmentShadingRate"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "attachmentFragmentShadingRate"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minFragmentShadingRateAttachmentTexelSize"
              },
              "$limittype": "min"
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxFragmentShadingRateAttachmentTexelSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentShadingRateAttachmentTexelSizeAspectRatio"
              },
              "$limittype": "max,pot"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveFragmentShadingRateWithMultipleViewports"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "layeredShadingRateAttachments"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateNonTrivialCombinerOps"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxFragmentSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentSizeAspectRatio"
              },
              "$limittype": "max,pot"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxFragmentShadingRateCoverageSamples"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "maxFragmentShadingRateRasterizationSamples"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithShaderDepthStencilWrites"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithSampleMask"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithShaderSampleMask"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithConservativeRasterization"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithFragmentShaderInterlock"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateWithCustomSampleLocations"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateStrictMultiplyCombiner"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShadingRatePropertiesKHR",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlags"
              },
              "name": {
                "#text": "sampleCounts"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "fragmentSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShadingRateKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderTerminateInvocation"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderTerminateInvocationFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderTerminateInvocationFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShadingRateEnums"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "supersampleFragmentShadingRates"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "noInvocationFragmentShadingRates"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "maxFragmentShadingRateInvocationCount"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV",
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateTypeNV"
              },
              "name": {
                "#text": "shadingRateType"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateNV"
              },
              "name": {
                "#text": "shadingRate"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateCombinerOpKHR"
              },
              "name": {
                "#text": "combinerOps"
              },
              "#text": "[2]",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineFragmentShadingRateEnumStateCreateInfoNV",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "accelerationStructureSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "updateScratchSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "buildScratchSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureBuildSizesInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "image2DViewOf3D"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sampler2DViewOf3D"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "mutableDescriptorType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE",
          "$alias": "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorTypeCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "pDescriptorTypes"
              },
              "#text": "const*",
              "$len": "descriptorTypeCount"
            }
          ],
          "$category": "struct",
          "$name": "VkMutableDescriptorTypeListEXT"
        },
        {
          "$category": "struct",
          "$name": "VkMutableDescriptorTypeListVALVE",
          "$alias": "VkMutableDescriptorTypeListEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mutableDescriptorTypeListCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMutableDescriptorTypeListEXT"
              },
              "name": {
                "#text": "pMutableDescriptorTypeLists"
              },
              "#text": "const*",
              "$len": "mutableDescriptorTypeListCount"
            }
          ],
          "$category": "struct",
          "$name": "VkMutableDescriptorTypeCreateInfoEXT",
          "$structextends": "VkDescriptorSetLayoutCreateInfo,VkDescriptorPoolCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkMutableDescriptorTypeCreateInfoVALVE",
          "$alias": "VkMutableDescriptorTypeCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClipControl"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDepthClipControlFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "negativeOneToOne"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineViewportDepthClipControlCreateInfoEXT",
          "$structextends": "VkPipelineViewportStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "vertexInputDynamicState"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "externalMemoryRDMA"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "VkVertexInputRate"
              },
              "name": {
                "#text": "inputRate"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "divisor"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVertexInputBindingDescription2EXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "location"
              },
              "comment": {
                "#text": "location of the shader vertex attrib"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              },
              "comment": {
                "#text": "Vertex buffer binding id"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              },
              "comment": {
                "#text": "format of source data"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Offset of first element in bytes from base of vertex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVertexInputAttributeDescription2EXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "colorWriteEnable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceColorWriteEnableFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              },
              "comment": {
                "#text": "# of pAttachments"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pColorWriteEnables"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineColorWriteCreateInfoEXT",
          "$structextends": "VkPipelineColorBlendStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryBarrier2",
          "$structextends": "VkSubpassDependency2"
        },
        {
          "$category": "struct",
          "$name": "VkMemoryBarrier2KHR",
          "$alias": "VkMemoryBarrier2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "oldLayout"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "newLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcQueueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstQueueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceRange"
              },
              "name": {
                "#text": "subresourceRange"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageMemoryBarrier2"
        },
        {
          "$category": "struct",
          "$name": "VkImageMemoryBarrier2KHR",
          "$alias": "VkImageMemoryBarrier2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "srcAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccessFlags2"
              },
              "name": {
                "#text": "dstAccessMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcQueueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dstQueueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferMemoryBarrier2"
        },
        {
          "$category": "struct",
          "$name": "VkBufferMemoryBarrier2KHR",
          "$alias": "VkBufferMemoryBarrier2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDependencyFlags"
              },
              "name": {
                "#text": "dependencyFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryBarrier2"
              },
              "name": {
                "#text": "pMemoryBarriers"
              },
              "#text": "const*",
              "$len": "memoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferMemoryBarrier2"
              },
              "name": {
                "#text": "pBufferMemoryBarriers"
              },
              "#text": "const*",
              "$len": "bufferMemoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageMemoryBarrier2"
              },
              "name": {
                "#text": "pImageMemoryBarriers"
              },
              "#text": "const*",
              "$len": "imageMemoryBarrierCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDependencyInfo"
        },
        {
          "$category": "struct",
          "$name": "VkDependencyInfoKHR",
          "$alias": "VkDependencyInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "value"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "stageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSemaphoreSubmitInfo"
        },
        {
          "$category": "struct",
          "$name": "VkSemaphoreSubmitInfoKHR",
          "$alias": "VkSemaphoreSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferSubmitInfo"
        },
        {
          "$category": "struct",
          "$name": "VkCommandBufferSubmitInfoKHR",
          "$alias": "VkCommandBufferSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubmitFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphoreSubmitInfo"
              },
              "name": {
                "#text": "pWaitSemaphoreInfos"
              },
              "#text": "const*",
              "$len": "waitSemaphoreInfoCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandBufferSubmitInfo"
              },
              "name": {
                "#text": "pCommandBufferInfos"
              },
              "#text": "const*",
              "$len": "commandBufferInfoCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "signalSemaphoreInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphoreSubmitInfo"
              },
              "name": {
                "#text": "pSignalSemaphoreInfos"
              },
              "#text": "const*",
              "$len": "signalSemaphoreInfoCount"
            }
          ],
          "$category": "struct",
          "$name": "VkSubmitInfo2"
        },
        {
          "$category": "struct",
          "$name": "VkSubmitInfo2KHR",
          "$alias": "VkSubmitInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "checkpointExecutionStageMask"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyCheckpointProperties2NV",
          "$structextends": "VkQueueFamilyProperties2",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "stage"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pCheckpointMarker"
              },
              "#text": "*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCheckpointData2NV",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "synchronization2"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSynchronization2Features",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceSynchronization2FeaturesKHR",
          "$alias": "VkPhysicalDeviceSynchronization2Features"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitivesGeneratedQuery"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitivesGeneratedQueryWithRasterizerDiscard"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitivesGeneratedQueryWithNonZeroStreams"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "legacyDithering"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceLegacyDitheringFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multisampledRenderToSingleSampled"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "optimal"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubpassResolvePerformanceQueryEXT",
          "$returnedonly": true,
          "$structextends": "VkFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "multisampledRenderToSingleSampledEnable"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "rasterizationSamples"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMultisampledRenderToSingleSampledInfoEXT",
          "$structextends": "VkSubpassDescription2,VkRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineProtectedAccess"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoCodecOperationFlagsKHR"
              },
              "name": {
                "#text": "videoCodecOperations"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyVideoPropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkQueueFamilyProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "queryResultStatusSupport"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkQueueFamilyQueryResultStatusPropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkQueueFamilyProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "profileCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoProfileInfoKHR"
              },
              "name": {
                "#text": "pProfiles"
              },
              "#text": "const*",
              "$len": "profileCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoProfileListInfoKHR",
          "$structextends": "VkPhysicalDeviceImageFormatInfo2,VkPhysicalDeviceVideoFormatInfoKHR,VkImageCreateInfo,VkBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "imageUsage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceVideoFormatInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "componentMapping"
              }
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "imageCreateFlags"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "imageType"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "imageTiling"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "imageUsageFlags"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoFormatPropertiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoCodecOperationFlagBitsKHR"
              },
              "name": {
                "#text": "videoCodecOperation"
              }
            },
            {
              "type": {
                "#text": "VkVideoChromaSubsamplingFlagsKHR"
              },
              "name": {
                "#text": "chromaSubsampling"
              }
            },
            {
              "type": {
                "#text": "VkVideoComponentBitDepthFlagsKHR"
              },
              "name": {
                "#text": "lumaBitDepth"
              }
            },
            {
              "type": {
                "#text": "VkVideoComponentBitDepthFlagsKHR"
              },
              "name": {
                "#text": "chromaBitDepth"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoProfileInfoKHR",
          "$structextends": "VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoCapabilityFlagsKHR"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minBitstreamBufferOffsetAlignment"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "minBitstreamBufferSizeAlignment"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "pictureAccessGranularity"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "minCodedExtent"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxCodedExtent"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDpbSlots"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxActiveReferencePictures"
              }
            },
            {
              "type": {
                "#text": "VkExtensionProperties"
              },
              "name": {
                "#text": "stdHeaderVersion"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoCapabilitiesKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryBindIndex"
              }
            },
            {
              "type": {
                "#text": "VkMemoryRequirements"
              },
              "name": {
                "#text": "memoryRequirements"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoSessionMemoryRequirementsKHR",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryBindIndex"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memorySize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBindVideoSessionMemoryInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "codedOffset"
              },
              "comment": {
                "#text": "The offset to be used for the picture resource, currently only used in field mode"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "codedExtent"
              },
              "comment": {
                "#text": "The extent to be used for the picture resource"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseArrayLayer"
              },
              "comment": {
                "#text": "The first array layer to be accessed for the Decode or Encode Operations"
              }
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageViewBinding"
              },
              "comment": {
                "#text": "The ImageView binding of the resource"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoPictureResourceInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "slotIndex"
              },
              "comment": {
                "#text": "The reference slot index"
              }
            },
            {
              "type": {
                "#text": "VkVideoPictureResourceInfoKHR"
              },
              "name": {
                "#text": "pPictureResource"
              },
              "comment": {
                "#text": "The reference picture resource"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoReferenceSlotInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoDecodeCapabilityFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeCapabilitiesKHR",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoDecodeUsageFlagsKHR"
              },
              "name": {
                "#text": "videoUsageHints"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeUsageInfoKHR",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoDecodeFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "srcBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "srcBufferOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "srcBufferRange"
              }
            },
            {
              "type": {
                "#text": "VkVideoPictureResourceInfoKHR"
              },
              "name": {
                "#text": "dstPictureResource"
              }
            },
            {
              "type": {
                "#text": "VkVideoReferenceSlotInfoKHR"
              },
              "name": {
                "#text": "pSetupReferenceSlot"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "referenceSlotCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoReferenceSlotInfoKHR"
              },
              "name": {
                "#text": "pReferenceSlots"
              },
              "#text": "const*",
              "$len": "referenceSlotCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeInfoKHR"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h264std.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h264std.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264ProfileIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264LevelIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264ChromaFormatIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264PocType"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264SpsFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264ScalingLists"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264SequenceParameterSetVui"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264AspectRatioIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264HrdParameters"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264SpsVuiFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264WeightedBipredIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264PpsFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264SliceType"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264CabacInitIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264DisableDeblockingFilterIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264PictureType"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264ModificationOfPicNumsIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264MemMgmtControlOp"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h264std_decode.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h264std_decode.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_decode.h",
          "$name": "StdVideoDecodeH264PictureInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_decode.h",
          "$name": "StdVideoDecodeH264ReferenceInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_decode.h",
          "$name": "StdVideoDecodeH264PictureInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_decode.h",
          "$name": "StdVideoDecodeH264ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH264ProfileIdc"
              },
              "name": {
                "#text": "stdProfileIdc"
              }
            },
            {
              "type": {
                "#text": "VkVideoDecodeH264PictureLayoutFlagBitsEXT"
              },
              "name": {
                "#text": "pictureLayout"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264ProfileInfoEXT",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH264LevelIdc"
              },
              "name": {
                "#text": "maxLevelIdc"
              }
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "fieldOffsetGranularity"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264CapabilitiesEXT",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264SequenceParameterSet"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std.h",
          "$name": "StdVideoH264PictureParameterSet"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdSPSCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH264SequenceParameterSet"
              },
              "name": {
                "#text": "pStdSPSs"
              },
              "#text": "const*",
              "$len": "stdSPSCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdPPSCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH264PictureParameterSet"
              },
              "name": {
                "#text": "pStdPPSs"
              },
              "comment": {
                "#text": "List of Picture Parameters associated with the spsStd, above"
              },
              "#text": "const*",
              "$len": "stdPPSCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264SessionParametersAddInfoEXT",
          "$structextends": "VkVideoSessionParametersUpdateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdSPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdPPSCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoDecodeH264SessionParametersAddInfoEXT"
              },
              "name": {
                "#text": "pParametersAddInfo"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264SessionParametersCreateInfoEXT",
          "$structextends": "VkVideoSessionParametersCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoDecodeH264PictureInfo"
              },
              "name": {
                "#text": "pStdPictureInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sliceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSliceOffsets"
              },
              "#text": "const*",
              "$len": "sliceCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264PictureInfoEXT",
          "$structextends": "VkVideoDecodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoDecodeH264ReferenceInfo"
              },
              "name": {
                "#text": "pStdReferenceInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH264DpbSlotInfoEXT",
          "$structextends": "VkVideoReferenceSlotInfoKHR"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h265std.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h265std.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265ProfileIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265VideoParameterSet"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SequenceParameterSet"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265PictureParameterSet"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265DecPicBufMgr"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265HrdParameters"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265VpsFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265LevelIdc"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SpsFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265ScalingLists"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SequenceParameterSetVui"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265PredictorPaletteEntries"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265PpsFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SubLayerHrdParameters"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265HrdFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SpsVuiFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265SliceType"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std.h",
          "$name": "StdVideoH265PictureType"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h265std_decode.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h265std_decode.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_decode.h",
          "$name": "StdVideoDecodeH265PictureInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_decode.h",
          "$name": "StdVideoDecodeH265ReferenceInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_decode.h",
          "$name": "StdVideoDecodeH265PictureInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_decode.h",
          "$name": "StdVideoDecodeH265ReferenceInfoFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265ProfileIdc"
              },
              "name": {
                "#text": "stdProfileIdc"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265ProfileInfoEXT",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265LevelIdc"
              },
              "name": {
                "#text": "maxLevelIdc"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265CapabilitiesEXT",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdVPSCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265VideoParameterSet"
              },
              "name": {
                "#text": "pStdVPSs"
              },
              "#text": "const*",
              "$len": "stdVPSCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdSPSCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265SequenceParameterSet"
              },
              "name": {
                "#text": "pStdSPSs"
              },
              "#text": "const*",
              "$len": "stdSPSCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdPPSCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265PictureParameterSet"
              },
              "name": {
                "#text": "pStdPPSs"
              },
              "comment": {
                "#text": "List of Picture Parameters associated with the spsStd, above"
              },
              "#text": "const*",
              "$len": "stdPPSCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265SessionParametersAddInfoEXT",
          "$structextends": "VkVideoSessionParametersUpdateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdVPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdSPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdPPSCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoDecodeH265SessionParametersAddInfoEXT"
              },
              "name": {
                "#text": "pParametersAddInfo"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265SessionParametersCreateInfoEXT",
          "$structextends": "VkVideoSessionParametersCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoDecodeH265PictureInfo"
              },
              "name": {
                "#text": "pStdPictureInfo"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sliceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSliceOffsets"
              },
              "#text": "const*",
              "$len": "sliceCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265PictureInfoEXT",
          "$structextends": "VkVideoDecodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoDecodeH265ReferenceInfo"
              },
              "name": {
                "#text": "pStdReferenceInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoDecodeH265DpbSlotInfoEXT",
          "$structextends": "VkVideoReferenceSlotInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoProfileInfoKHR"
              },
              "name": {
                "#text": "pVideoProfile"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "pictureFormat"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxCodedExtent"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "referencePictureFormat"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDpbSlots"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxActiveReferencePictures"
              }
            },
            {
              "type": {
                "#text": "VkExtensionProperties"
              },
              "name": {
                "#text": "pStdHeaderVersion"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoSessionCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersCreateFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersKHR"
              },
              "name": {
                "#text": "videoSessionParametersTemplate"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "videoSession"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoSessionParametersCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "updateSequenceCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoSessionParametersUpdateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoBeginCodingFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "videoSession"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersKHR"
              },
              "name": {
                "#text": "videoSessionParameters"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "referenceSlotCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoReferenceSlotInfoKHR"
              },
              "name": {
                "#text": "pReferenceSlots"
              },
              "#text": "const*",
              "$len": "referenceSlotCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoBeginCodingInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEndCodingFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEndCodingInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoCodingControlFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": false
            }
          ],
          "$category": "struct",
          "$name": "VkVideoCodingControlInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeUsageFlagsKHR"
              },
              "name": {
                "#text": "videoUsageHints"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeContentFlagsKHR"
              },
              "name": {
                "#text": "videoContentHints"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeTuningModeKHR"
              },
              "name": {
                "#text": "tuningMode"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeUsageInfoKHR",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "qualityLevel"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBitstreamBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstBitstreamBufferOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstBitstreamBufferMaxRange"
              }
            },
            {
              "type": {
                "#text": "VkVideoPictureResourceInfoKHR"
              },
              "name": {
                "#text": "srcPictureResource"
              }
            },
            {
              "type": {
                "#text": "VkVideoReferenceSlotInfoKHR"
              },
              "name": {
                "#text": "pSetupReferenceSlot"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "referenceSlotCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoReferenceSlotInfoKHR"
              },
              "name": {
                "#text": "pReferenceSlots"
              },
              "#text": "const*",
              "$len": "referenceSlotCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "precedingExternallyEncodedBytes"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeRateControlFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeRateControlModeFlagBitsKHR"
              },
              "name": {
                "#text": "rateControlMode"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "layerCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeRateControlLayerInfoKHR"
              },
              "name": {
                "#text": "pLayerConfigs"
              },
              "#text": "const*",
              "$len": "layerCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeRateControlInfoKHR",
          "$structextends": "VkVideoCodingControlInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "averageBitrate"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxBitrate"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameRateNumerator"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameRateDenominator"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "virtualBufferSizeInMs"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "initialVirtualBufferSizeInMs"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeRateControlLayerInfoKHR",
          "$structextends": "VkVideoCodingControlInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeCapabilityFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeRateControlModeFlagsKHR"
              },
              "name": {
                "#text": "rateControlModes"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "rateControlLayerCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "qualityLevelCount"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "inputImageDataFillAlignment"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeCapabilitiesKHR",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264CapabilityFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264InputModeFlagsEXT"
              },
              "name": {
                "#text": "inputModeFlags"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264OutputModeFlagsEXT"
              },
              "name": {
                "#text": "outputModeFlags"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxPPictureL0ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxBPictureL0ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxL1ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "motionVectorsOverPicBoundariesFlag"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxBytesPerPicDenom"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxBitsPerMbDenom"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "log2MaxMvLengthHorizontal"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "log2MaxMvLengthVertical"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264CapabilitiesEXT",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h264std_encode.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h264std_encode.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264SliceHeader"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264PictureInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264ReferenceInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264SliceHeaderFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264RefMemMgmtCtrlOperations"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264PictureInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264ReferenceInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264RefMgmtFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264RefListModEntry"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h264std_encode.h",
          "$name": "StdVideoEncodeH264RefPicMarkingEntry"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdSPSCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264SequenceParameterSet"
              },
              "name": {
                "#text": "pStdSPSs"
              },
              "#text": "const*",
              "$len": "stdSPSCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdPPSCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoH264PictureParameterSet"
              },
              "name": {
                "#text": "pStdPPSs"
              },
              "comment": {
                "#text": "List of Picture Parameters associated with the spsStd, above"
              },
              "#text": "const*",
              "$len": "stdPPSCount",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264SessionParametersAddInfoEXT",
          "$structextends": "VkVideoSessionParametersUpdateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdSPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdPPSCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264SessionParametersAddInfoEXT"
              },
              "name": {
                "#text": "pParametersAddInfo"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264SessionParametersCreateInfoEXT",
          "$structextends": "VkVideoSessionParametersCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slotIndex"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264ReferenceInfo"
              },
              "name": {
                "#text": "pStdReferenceInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264DpbSlotInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264ReferenceListsInfoEXT"
              },
              "name": {
                "#text": "pReferenceFinalLists"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "naluSliceEntryCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264NaluSliceInfoEXT"
              },
              "name": {
                "#text": "pNaluSliceEntries"
              },
              "#text": "const*",
              "$len": "naluSliceEntryCount"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264PictureInfo"
              },
              "name": {
                "#text": "pCurrentPictureInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264VclFrameInfoEXT",
          "$structextends": "VkVideoEncodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList0EntryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264DpbSlotInfoEXT"
              },
              "name": {
                "#text": "pReferenceList0Entries"
              },
              "#text": "const*",
              "$len": "referenceList0EntryCount"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList1EntryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264DpbSlotInfoEXT"
              },
              "name": {
                "#text": "pReferenceList1Entries"
              },
              "#text": "const*",
              "$len": "referenceList1EntryCount"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264RefMemMgmtCtrlOperations"
              },
              "name": {
                "#text": "pMemMgmtCtrlOperations"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264ReferenceListsInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "spsId"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "emitSpsEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ppsIdEntryCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ppsIdEntries"
              },
              "#text": "const*",
              "$len": "ppsIdEntryCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264EmitPictureParametersInfoEXT",
          "$structextends": "VkVideoEncodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH264ProfileIdc"
              },
              "name": {
                "#text": "stdProfileIdc"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264ProfileInfoEXT",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mbCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264ReferenceListsInfoEXT"
              },
              "name": {
                "#text": "pReferenceFinalLists"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoEncodeH264SliceHeader"
              },
              "name": {
                "#text": "pSliceHeaderStd"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264NaluSliceInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gopFrameCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "idrPeriod"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "consecutiveBFrameCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264RateControlStructureEXT"
              },
              "name": {
                "#text": "rateControlStructure"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "temporalLayerCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264RateControlInfoEXT",
          "$structextends": "VkVideoCodingControlInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpI"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpP"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpB"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264QpEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameISize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "framePSize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameBSize"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264FrameSizeEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "temporalLayerId"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useInitialRcQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264QpEXT"
              },
              "name": {
                "#text": "initialRcQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMinQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264QpEXT"
              },
              "name": {
                "#text": "minQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMaxQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264QpEXT"
              },
              "name": {
                "#text": "maxQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMaxFrameSize"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH264FrameSizeEXT"
              },
              "name": {
                "#text": "maxFrameSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH264RateControlLayerInfoEXT",
          "$structextends": "VkVideoCodingControlInfoKHR,VkVideoEncodeRateControlLayerInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265CapabilityFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265InputModeFlagsEXT"
              },
              "name": {
                "#text": "inputModeFlags"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265OutputModeFlagsEXT"
              },
              "name": {
                "#text": "outputModeFlags"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265CtbSizeFlagsEXT"
              },
              "name": {
                "#text": "ctbSizes"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265TransformBlockSizeFlagsEXT"
              },
              "name": {
                "#text": "transformBlockSizes"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxPPictureL0ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxBPictureL0ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxL1ReferenceCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxSubLayersCount"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minLog2MinLumaCodingBlockSizeMinus3"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxLog2MinLumaCodingBlockSizeMinus3"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minLog2MinLumaTransformBlockSizeMinus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxLog2MinLumaTransformBlockSizeMinus2"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minMaxTransformHierarchyDepthInter"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxMaxTransformHierarchyDepthInter"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minMaxTransformHierarchyDepthIntra"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxMaxTransformHierarchyDepthIntra"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxDiffCuQpDeltaDepth"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "minMaxNumMergeCand"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "maxMaxNumMergeCand"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265CapabilitiesEXT",
          "$returnedonly": true,
          "$structextends": "VkVideoCapabilitiesKHR"
        },
        {
          "#text": "#include \"vk_video/vulkan_video_codec_h265std_encode.h\"",
          "$category": "include",
          "$name": "vk_video/vulkan_video_codec_h265std_encode.h"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265PictureInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265PictureInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265SliceSegmentHeader"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265ReferenceInfo"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265ReferenceModifications"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265SliceSegmentHeaderFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265ReferenceInfoFlags"
        },
        {
          "$requires": "vk_video/vulkan_video_codec_h265std_encode.h",
          "$name": "StdVideoEncodeH265ReferenceModificationFlags"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdVPSCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265VideoParameterSet"
              },
              "name": {
                "#text": "pStdVPSs"
              },
              "#text": "const*",
              "$len": "stdVPSCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdSPSCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265SequenceParameterSet"
              },
              "name": {
                "#text": "pStdSPSs"
              },
              "#text": "const*",
              "$len": "stdSPSCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stdPPSCount"
              }
            },
            {
              "type": {
                "#text": "StdVideoH265PictureParameterSet"
              },
              "name": {
                "#text": "pStdPPSs"
              },
              "comment": {
                "#text": "List of Picture Parameters associated with the spsStd, above"
              },
              "#text": "const*",
              "$len": "stdPPSCount",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265SessionParametersAddInfoEXT",
          "$structextends": "VkVideoSessionParametersUpdateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdVPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdSPSCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxStdPPSCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265SessionParametersAddInfoEXT"
              },
              "name": {
                "#text": "pParametersAddInfo"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265SessionParametersCreateInfoEXT",
          "$structextends": "VkVideoSessionParametersCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265ReferenceListsInfoEXT"
              },
              "name": {
                "#text": "pReferenceFinalLists"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "naluSliceSegmentEntryCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265NaluSliceSegmentInfoEXT"
              },
              "name": {
                "#text": "pNaluSliceSegmentEntries"
              },
              "#text": "const*",
              "$len": "naluSliceSegmentEntryCount"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265PictureInfo"
              },
              "name": {
                "#text": "pCurrentPictureInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265VclFrameInfoEXT",
          "$structextends": "VkVideoEncodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "vpsId"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "spsId"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "emitVpsEnable"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "emitSpsEnable"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ppsIdEntryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "ppsIdEntries"
              },
              "#text": "const*",
              "$len": "ppsIdEntryCount"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265EmitPictureParametersInfoEXT",
          "$structextends": "VkVideoEncodeInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ctbCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265ReferenceListsInfoEXT"
              },
              "name": {
                "#text": "pReferenceFinalLists"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265SliceSegmentHeader"
              },
              "name": {
                "#text": "pSliceSegmentHeaderStd"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265NaluSliceSegmentInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gopFrameCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "idrPeriod"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "consecutiveBFrameCount"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265RateControlStructureEXT"
              },
              "name": {
                "#text": "rateControlStructure"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "subLayerCount"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265RateControlInfoEXT",
          "$structextends": "VkVideoCodingControlInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpI"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpP"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "qpB"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265QpEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameISize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "framePSize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "frameBSize"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265FrameSizeEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "temporalId"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useInitialRcQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265QpEXT"
              },
              "name": {
                "#text": "initialRcQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMinQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265QpEXT"
              },
              "name": {
                "#text": "minQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMaxQp"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265QpEXT"
              },
              "name": {
                "#text": "maxQp"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "useMaxFrameSize"
              }
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265FrameSizeEXT"
              },
              "name": {
                "#text": "maxFrameSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265RateControlLayerInfoEXT",
          "$structextends": "VkVideoCodingControlInfoKHR,VkVideoEncodeRateControlLayerInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "StdVideoH265ProfileIdc"
              },
              "name": {
                "#text": "stdProfileIdc"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265ProfileInfoEXT",
          "$structextends": "VkVideoProfileInfoKHR,VkQueryPoolCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "int8_t"
              },
              "name": {
                "#text": "slotIndex"
              }
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265ReferenceInfo"
              },
              "name": {
                "#text": "pStdReferenceInfo"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265DpbSlotInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList0EntryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265DpbSlotInfoEXT"
              },
              "name": {
                "#text": "pReferenceList0Entries"
              },
              "#text": "const*",
              "$len": "referenceList0EntryCount"
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "referenceList1EntryCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeH265DpbSlotInfoEXT"
              },
              "name": {
                "#text": "pReferenceList1Entries"
              },
              "#text": "const*",
              "$len": "referenceList1EntryCount"
            },
            {
              "type": {
                "#text": "StdVideoEncodeH265ReferenceModifications"
              },
              "name": {
                "#text": "pReferenceModifications"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkVideoEncodeH265ReferenceListsInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "inheritedViewportScissor2D"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceInheritedViewportScissorFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "viewportScissor2D"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportDepthCount"
              }
            },
            {
              "type": {
                "#text": "VkViewport"
              },
              "name": {
                "#text": "pViewportDepths"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceViewportScissorInfoNV",
          "$structextends": "VkCommandBufferInheritanceInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "ycbcr2plane444Formats"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "provokingVertexLast"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackPreservesProvokingVertex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProvokingVertexFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "provokingVertexModePerPipeline"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "transformFeedbackPreservesTriangleFanProvokingVertex"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceProvokingVertexPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkProvokingVertexModeEXT"
              },
              "name": {
                "#text": "provokingVertexMode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT",
          "$structextends": "VkPipelineRasterizationStateCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "const*",
              "$len": "dataSize"
            }
          ],
          "$category": "struct",
          "$name": "VkCuModuleCreateInfoNVX"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCuModuleNVX"
              },
              "name": {
                "#text": "module"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pName"
              },
              "#text": "const*",
              "$len": "null-terminated"
            }
          ],
          "$category": "struct",
          "$name": "VkCuFunctionCreateInfoNVX"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCuFunctionNVX"
              },
              "name": {
                "#text": "function"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gridDimX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gridDimY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "gridDimZ"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "blockDimX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "blockDimY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "blockDimZ"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "sharedMemBytes"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "paramCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pParams"
              },
              "#text": "const* const *",
              "$len": "paramCount"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "extraCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pExtras"
              },
              "#text": "const* const *",
              "$len": "extraCount"
            }
          ],
          "$category": "struct",
          "$name": "VkCuLaunchInfoNVX"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBufferCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBufferImageLayoutIgnored"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorBufferPushDescriptors"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorBufferFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "combinedImageSamplerDescriptorSingleArray"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bufferlessPushDescriptors"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "allowSamplerImageViewPostSubmitCreation"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "descriptorBufferOffsetAlignment"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDescriptorBufferBindings"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxResourceDescriptorBufferBindings"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxSamplerDescriptorBufferBindings"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxEmbeddedImmutableSamplerBindings"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxEmbeddedImmutableSamplers"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "bufferCaptureReplayDescriptorDataSize"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "imageCaptureReplayDescriptorDataSize"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "imageViewCaptureReplayDescriptorDataSize"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "samplerCaptureReplayDescriptorDataSize"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "accelerationStructureCaptureReplayDescriptorDataSize"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "samplerDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "combinedImageSamplerDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "sampledImageDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "storageImageDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "uniformTexelBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "robustUniformTexelBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "storageTexelBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "robustStorageTexelBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "uniformBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "robustUniformBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "storageBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "robustStorageBufferDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "inputAttachmentDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "accelerationStructureDescriptorSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxSamplerDescriptorBufferRange"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "maxResourceDescriptorBufferRange"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "samplerDescriptorBufferAddressSpaceSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "resourceDescriptorBufferAddressSpaceSize"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "descriptorBufferAddressSpaceSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorBufferPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "combinedImageSamplerDensityMapDescriptorSize"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "address"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "range"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorAddressInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "address"
              }
            },
            {
              "type": {
                "#text": "VkBufferUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorBufferBindingInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorBufferBindingPushDescriptorBufferHandleEXT",
          "$structextends": "VkDescriptorBufferBindingInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "pSampler"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_SAMPLER"
            },
            {
              "type": {
                "#text": "VkDescriptorImageInfo"
              },
              "name": {
                "#text": "pCombinedImageSampler"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER"
            },
            {
              "type": {
                "#text": "VkDescriptorImageInfo"
              },
              "name": {
                "#text": "pInputAttachmentImage"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"
            },
            {
              "type": {
                "#text": "VkDescriptorImageInfo"
              },
              "name": {
                "#text": "pSampledImage"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorImageInfo"
              },
              "name": {
                "#text": "pStorageImage"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorAddressInfoEXT"
              },
              "name": {
                "#text": "pUniformTexelBuffer"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorAddressInfoEXT"
              },
              "name": {
                "#text": "pStorageTexelBuffer"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorAddressInfoEXT"
              },
              "name": {
                "#text": "pUniformBuffer"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorAddressInfoEXT"
              },
              "name": {
                "#text": "pStorageBuffer"
              },
              "#text": "const*",
              "$selection": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "accelerationStructure"
              },
              "$selection": "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV"
            }
          ],
          "$category": "union",
          "$name": "VkDescriptorDataEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorDataEXT"
              },
              "name": {
                "#text": "data"
              },
              "$selector": "type",
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorGetInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCaptureDescriptorDataInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageCaptureDescriptorDataInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewCaptureDescriptorDataInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "sampler"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSamplerCaptureDescriptorDataInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "accelerationStructure"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "accelerationStructureNV"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureCaptureDescriptorDataInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "opaqueCaptureDescriptorData"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkOpaqueCaptureDescriptorDataCreateInfoEXT",
          "$structextends": "VkBufferCreateInfo,VkImageCreateInfo,VkImageViewCreateInfo,VkSamplerCreateInfo,VkAccelerationStructureCreateInfoKHR,VkAccelerationStructureCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderIntegerDotProduct"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderIntegerDotProductFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR",
          "$alias": "VkPhysicalDeviceShaderIntegerDotProductFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct8BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct4x8BitPackedMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct16BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct32BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProduct64BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitSignedAccelerated"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderIntegerDotProductProperties",
          "$structextends": "VkPhysicalDeviceProperties2",
          "$returnedonly": true
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR",
          "$alias": "VkPhysicalDeviceShaderIntegerDotProductProperties"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "hasPrimary"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "hasRender"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "primaryMajor"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "primaryMinor"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "renderMajor"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "int64_t"
              },
              "name": {
                "#text": "renderMinor"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDrmPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "fragmentShaderBarycentric"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "triStripVertexOrderIndependentOfProvokingVertex"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingMotionBlur"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingMotionBlurPipelineTraceRaysIndirect"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$name": "VkAccelerationStructureMotionInstanceTypeNV",
          "$category": "enum"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "vertexData"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureGeometryMotionTrianglesDataNV",
          "$structextends": "VkAccelerationStructureGeometryTrianglesDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxInstances"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMotionInfoFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureMotionInfoNV",
          "$structextends": "VkAccelerationStructureCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "sx"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "a"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "b"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pvx"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "sy"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "c"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pvy"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "sz"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pvz"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "qx"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "qy"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "qz"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "qw"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "tx"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "ty"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "tz"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSRTDataNV"
        },
        {
          "comment": {
            "#text": "The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout."
          },
          "member": [
            {
              "type": {
                "#text": "VkSRTDataNV"
              },
              "name": {
                "#text": "transformT0"
              }
            },
            {
              "type": {
                "#text": "VkSRTDataNV"
              },
              "name": {
                "#text": "transformT1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCustomIndex"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mask"
              },
              "#text": ":8"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceShaderBindingTableRecordOffset"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "VkGeometryInstanceFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "#text": ":8",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "accelerationStructureReference"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureSRTMotionInstanceNV"
        },
        {
          "comment": {
            "#text": "The bitfields in this structure are non-normative since bitfield ordering is implementation-defined in C. The specification defines the normative layout."
          },
          "member": [
            {
              "type": {
                "#text": "VkTransformMatrixKHR"
              },
              "name": {
                "#text": "transformT0"
              }
            },
            {
              "type": {
                "#text": "VkTransformMatrixKHR"
              },
              "name": {
                "#text": "transformT1"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCustomIndex"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "mask"
              },
              "#text": ":8"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceShaderBindingTableRecordOffset"
              },
              "#text": ":24"
            },
            {
              "type": {
                "#text": "VkGeometryInstanceFlagsKHR"
              },
              "name": {
                "#text": "flags"
              },
              "#text": ":8",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "accelerationStructureReference"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureMatrixMotionInstanceNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkAccelerationStructureInstanceKHR"
              },
              "name": {
                "#text": "staticInstance"
              },
              "$selection": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMatrixMotionInstanceNV"
              },
              "name": {
                "#text": "matrixMotionInstance"
              },
              "$selection": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureSRTMotionInstanceNV"
              },
              "name": {
                "#text": "srtMotionInstance"
              },
              "$selection": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV"
            }
          ],
          "$category": "union",
          "$name": "VkAccelerationStructureMotionInstanceDataNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkAccelerationStructureMotionInstanceTypeNV"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMotionInstanceFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMotionInstanceDataNV"
              },
              "name": {
                "#text": "data"
              },
              "$selector": "type"
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureMotionInstanceNV"
        },
        {
          "type": {
            "#text": "void"
          },
          "name": {
            "#text": "VkRemoteAddressNV"
          },
          "#text": "typedef*;",
          "$category": "basetype"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMemoryGetRemoteAddressInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "index"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportMemoryBufferCollectionFUCHSIA",
          "$structextends": "VkMemoryAllocateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "index"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCollectionImageCreateInfoFUCHSIA",
          "$structextends": "VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "index"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCollectionBufferCreateInfoFUCHSIA",
          "$structextends": "VkBufferCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "collectionToken"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCollectionCreateInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryTypeBits"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "createInfoIndex"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "sysmemPixelFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "formatFeatures"
              }
            },
            {
              "type": {
                "#text": "VkSysmemColorSpaceFUCHSIA"
              },
              "name": {
                "#text": "sysmemColorSpaceIndex"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "samplerYcbcrConversionComponents"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrModelConversion"
              },
              "name": {
                "#text": "suggestedYcbcrModel"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrRange"
              },
              "name": {
                "#text": "suggestedYcbcrRange"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedXChromaOffset"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedYChromaOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCollectionPropertiesFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCreateInfo"
              },
              "name": {
                "#text": "createInfo"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "requiredFormatFeatures"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCollectionConstraintsInfoFUCHSIA"
              },
              "name": {
                "#text": "bufferCollectionConstraints"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferConstraintsInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorSpace"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSysmemColorSpaceFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCreateInfo"
              },
              "name": {
                "#text": "imageCreateInfo"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags"
              },
              "name": {
                "#text": "requiredFormatFeatures"
              }
            },
            {
              "type": {
                "#text": "VkImageFormatConstraintsFlagsFUCHSIA"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "sysmemPixelFormat"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorSpaceCount"
              }
            },
            {
              "type": {
                "#text": "VkSysmemColorSpaceFUCHSIA"
              },
              "name": {
                "#text": "pColorSpaces"
              },
              "#text": "const*",
              "$len": "colorSpaceCount"
            }
          ],
          "$category": "struct",
          "$name": "VkImageFormatConstraintsInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "formatConstraintsCount"
              }
            },
            {
              "type": {
                "#text": "VkImageFormatConstraintsInfoFUCHSIA"
              },
              "name": {
                "#text": "pFormatConstraints"
              },
              "#text": "const*",
              "$len": "formatConstraintsCount"
            },
            {
              "type": {
                "#text": "VkBufferCollectionConstraintsInfoFUCHSIA"
              },
              "name": {
                "#text": "bufferCollectionConstraints"
              }
            },
            {
              "type": {
                "#text": "VkImageConstraintsInfoFlagsFUCHSIA"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImageConstraintsInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minBufferCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxBufferCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minBufferCountForCamping"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minBufferCountForDedicatedSlack"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minBufferCountForSharedSlack"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkBufferCollectionConstraintsInfoFUCHSIA"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "formatRgba10x6WithoutYCbCrSampler"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags2"
              },
              "name": {
                "#text": "linearTilingFeatures"
              },
              "$optional": true,
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags2"
              },
              "name": {
                "#text": "optimalTilingFeatures"
              },
              "$optional": true,
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags2"
              },
              "name": {
                "#text": "bufferFeatures"
              },
              "$optional": true,
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkFormatProperties3",
          "$returnedonly": true,
          "$structextends": "VkFormatProperties2"
        },
        {
          "$category": "struct",
          "$name": "VkFormatProperties3KHR",
          "$alias": "VkFormatProperties3"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDrmFormatModifierProperties2EXT"
              },
              "name": {
                "#text": "pDrmFormatModifierProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "drmFormatModifierCount"
            }
          ],
          "$category": "struct",
          "$name": "VkDrmFormatModifierPropertiesList2EXT",
          "$returnedonly": true,
          "$structextends": "VkFormatProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "drmFormatModifier"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drmFormatModifierPlaneCount"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags2"
              },
              "name": {
                "#text": "drmFormatModifierTilingFeatures"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDrmFormatModifierProperties2EXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "externalFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormatFeatureFlags2"
              },
              "name": {
                "#text": "formatFeatures"
              }
            },
            {
              "type": {
                "#text": "VkComponentMapping"
              },
              "name": {
                "#text": "samplerYcbcrConversionComponents"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrModelConversion"
              },
              "name": {
                "#text": "suggestedYcbcrModel"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrRange"
              },
              "name": {
                "#text": "suggestedYcbcrRange"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedXChromaOffset"
              }
            },
            {
              "type": {
                "#text": "VkChromaLocation"
              },
              "name": {
                "#text": "suggestedYChromaOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAndroidHardwareBufferFormatProperties2ANDROID",
          "$structextends": "VkAndroidHardwareBufferPropertiesANDROID",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "pColorAttachmentFormats"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "depthAttachmentFormat"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "stencilAttachmentFormat"
              },
              "$noautovalidity": true
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRenderingCreateInfo",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPipelineRenderingCreateInfoKHR",
          "$alias": "VkPipelineRenderingCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDERING_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderingFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "renderArea"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "layerCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderingAttachmentInfo"
              },
              "name": {
                "#text": "pColorAttachments"
              },
              "#text": "const*",
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkRenderingAttachmentInfo"
              },
              "name": {
                "#text": "pDepthAttachment"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderingAttachmentInfo"
              },
              "name": {
                "#text": "pStencilAttachment"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkRenderingInfo"
        },
        {
          "$category": "struct",
          "$name": "VkRenderingInfoKHR",
          "$alias": "VkRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            },
            {
              "type": {
                "#text": "VkResolveModeFlagBits"
              },
              "name": {
                "#text": "resolveMode"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "resolveImageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "resolveImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentLoadOp"
              },
              "name": {
                "#text": "loadOp"
              }
            },
            {
              "type": {
                "#text": "VkAttachmentStoreOp"
              },
              "name": {
                "#text": "storeOp"
              }
            },
            {
              "type": {
                "#text": "VkClearValue"
              },
              "name": {
                "#text": "clearValue"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderingAttachmentInfo"
        },
        {
          "$category": "struct",
          "$name": "VkRenderingAttachmentInfoKHR",
          "$alias": "VkRenderingAttachmentInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "shadingRateAttachmentTexelSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderingFragmentShadingRateAttachmentInfoKHR",
          "$structextends": "VkRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderingFragmentDensityMapAttachmentInfoEXT",
          "$structextends": "VkRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "dynamicRendering"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDynamicRenderingFeatures",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceDynamicRenderingFeaturesKHR",
          "$alias": "VkPhysicalDeviceDynamicRenderingFeatures"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderingFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "pColorAttachmentFormats"
              },
              "#text": "const*",
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "depthAttachmentFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "stencilAttachmentFormat"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "rasterizationSamples"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceRenderingInfo",
          "$structextends": "VkCommandBufferInheritanceInfo"
        },
        {
          "$category": "struct",
          "$name": "VkCommandBufferInheritanceRenderingInfoKHR",
          "$alias": "VkCommandBufferInheritanceRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "colorAttachmentCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "pColorAttachmentSamples"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "colorAttachmentCount"
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "depthStencilAttachmentSamples"
              },
              "$noautovalidity": true,
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkAttachmentSampleCountInfoAMD",
          "$structextends": "VkCommandBufferInheritanceInfo,VkGraphicsPipelineCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkAttachmentSampleCountInfoNV",
          "$alias": "VkAttachmentSampleCountInfoAMD"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "perViewAttributes"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "perViewAttributesPositionXOnly"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMultiviewPerViewAttributesInfoNVX",
          "$structextends": "VkCommandBufferInheritanceInfo,VkGraphicsPipelineCreateInfo,VkRenderingInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "minLod"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageViewMinLodFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minLod"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewMinLodCreateInfoEXT",
          "$structextends": "VkImageViewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rasterizationOrderColorAttachmentAccess"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rasterizationOrderDepthAttachmentAccess"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rasterizationOrderStencilAttachmentAccess"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "$category": "struct",
          "$name": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM",
          "$alias": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "linearColorAttachment"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceLinearColorAttachmentFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "graphicsPipelineLibrary"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "graphicsPipelineLibraryFastLinking"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "graphicsPipelineLibraryIndependentInterpolationDecoration"
              },
              "$limittype": "bitmask"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT",
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkGraphicsPipelineLibraryFlagsEXT"
              },
              "name": {
                "#text": "flags"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkGraphicsPipelineLibraryCreateInfoEXT",
          "$structextends": "VkGraphicsPipelineCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "descriptorSetHostMapping"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "descriptorSetLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetBindingReferenceVALVE"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "descriptorOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorSize"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDescriptorSetLayoutHostMappingInfoVALVE"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderModuleIdentifier"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "shaderModuleIdentifierAlgorithmUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]",
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "identifierSize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pIdentifier"
              },
              "#text": "const*",
              "$len": "identifierSize"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineShaderStageModuleIdentifierCreateInfoEXT",
          "$structextends": "VkPipelineShaderStageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "identifierSize"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "identifier"
              },
              "enum": {
                "#text": "VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkShaderModuleIdentifierEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCompressionFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "compressionControlPlaneCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCompressionFixedRateFlagsEXT"
              },
              "name": {
                "#text": "pFixedRateFlags"
              },
              "#text": "*",
              "$noautovalidity": true,
              "$len": "compressionControlPlaneCount"
            }
          ],
          "$category": "struct",
          "$name": "VkImageCompressionControlEXT",
          "$structextends": "VkImageCreateInfo,VkSwapchainCreateInfoKHR,VkPhysicalDeviceImageFormatInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageCompressionControl"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageCompressionControlFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageCompressionFlagsEXT"
              },
              "name": {
                "#text": "imageCompressionFlags"
              }
            },
            {
              "type": {
                "#text": "VkImageCompressionFixedRateFlagsEXT"
              },
              "name": {
                "#text": "imageCompressionFixedRateFlags"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageCompressionPropertiesEXT",
          "$structextends": "VkImageFormatProperties2,VkSurfaceFormat2KHR,VkSubresourceLayout2EXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "imageCompressionControlSwapchain"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageSubresource"
              },
              "name": {
                "#text": "imageSubresource"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageSubresource2EXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubresourceLayout"
              },
              "name": {
                "#text": "subresourceLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkSubresourceLayout2EXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "disallowMerging"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassCreationControlEXT",
          "$structextends": "VkRenderPassCreateInfo2,VkSubpassDescription2"
        },
        {
          "member": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "postMergeSubpassCount"
            }
          },
          "$category": "struct",
          "$name": "VkRenderPassCreationFeedbackInfoEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPassCreationFeedbackInfoEXT"
              },
              "name": {
                "#text": "pRenderPassFeedback"
              },
              "#text": "*"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassCreationFeedbackCreateInfoEXT",
          "$structextends": "VkRenderPassCreateInfo2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkSubpassMergeStatusEXT"
              },
              "name": {
                "#text": "subpassMergeStatus"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "postMergeIndex"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassSubpassFeedbackInfoEXT",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPassSubpassFeedbackInfoEXT"
              },
              "name": {
                "#text": "pSubpassFeedback"
              },
              "#text": "*"
            }
          ],
          "$category": "struct",
          "$name": "VkRenderPassSubpassFeedbackCreateInfoEXT",
          "$structextends": "VkSubpassDescription2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "subpassMergeFeedback"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapTypeEXT"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkBuildMicromapFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuildMicromapModeEXT"
              },
              "name": {
                "#text": "mode"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "dstMicromap"
              },
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "usageCountsCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapUsageEXT"
              },
              "name": {
                "#text": "pUsageCounts"
              },
              "#text": "const*",
              "$len": "usageCountsCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapUsageEXT"
              },
              "name": {
                "#text": "ppUsageCounts"
              },
              "#text": "const* const*",
              "$len": "usageCountsCount,1",
              "$optional": "true,false"
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "data"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressKHR"
              },
              "name": {
                "#text": "scratchData"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "triangleArray"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "triangleArrayStride"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapBuildInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapCreateFlagsEXT"
              },
              "name": {
                "#text": "createFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkMicromapTypeEXT"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "deviceAddress"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapCreateInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pVersionData"
              },
              "#text": "const*",
              "$len": "latexmath:[2 \\times \\mathtt{VK\\_UUID\\_SIZE}]",
              "$altlen": "2*VK_UUID_SIZE"
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapVersionInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "src"
              }
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkCopyMicromapModeEXT"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMicromapInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "src"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressKHR"
              },
              "name": {
                "#text": "dst"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkCopyMicromapModeEXT"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMicromapToMemoryInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "src"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkCopyMicromapModeEXT"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkCopyMemoryToMicromapInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "micromapSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "buildScratchSize"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "discardable"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapBuildSizesInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "count"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "subdivisionLevel"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "format"
              },
              "comment": {
                "#text": "Interpretation depends on parent type"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapUsageEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dataOffset"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "subdivisionLevel"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "format"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkMicromapTriangleEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "micromap"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "micromapCaptureReplay"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "micromapHostCommands"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceOpacityMicromapFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxOpacity2StateSubdivisionLevel"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxOpacity4StateSubdivisionLevel"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceOpacityMicromapPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "indexType"
              }
            },
            {
              "type": {
                "#text": "VkDeviceOrHostAddressConstKHR"
              },
              "name": {
                "#text": "indexBuffer"
              },
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "indexStride"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseTriangle"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "usageCountsCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapUsageEXT"
              },
              "name": {
                "#text": "pUsageCounts"
              },
              "#text": "const*",
              "$len": "usageCountsCount",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapUsageEXT"
              },
              "name": {
                "#text": "ppUsageCounts"
              },
              "#text": "const* const*",
              "$len": "usageCountsCount,1",
              "$optional": "true,false"
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "micromap"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAccelerationStructureTrianglesOpacityMicromapEXT",
          "$structextends": "VkAccelerationStructureGeometryTrianglesDataKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pipelineIdentifier"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]"
            }
          ],
          "$category": "struct",
          "$name": "VkPipelinePropertiesIdentifierEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelinePropertiesIdentifier"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelinePropertiesFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderEarlyAndLateFragmentTests"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExportMetalObjectTypeFlagBitsEXT"
              },
              "name": {
                "#text": "exportObjectType"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalObjectCreateInfoEXT",
          "$structextends": "VkInstanceCreateInfo,VkMemoryAllocateInfo,VkImageCreateInfo,VkImageViewCreateInfo,VkBufferViewCreateInfo,VkSemaphoreCreateInfo,VkEventCreateInfo",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalObjectsInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "MTLDevice_id"
              },
              "name": {
                "#text": "mtlDevice"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalDeviceInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "MTLCommandQueue_id"
              },
              "name": {
                "#text": "mtlCommandQueue"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalCommandQueueInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "MTLBuffer_id"
              },
              "name": {
                "#text": "mtlBuffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalBufferInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "MTLBuffer_id"
              },
              "name": {
                "#text": "mtlBuffer"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportMetalBufferInfoEXT",
          "$structextends": "VkMemoryAllocateInfo",
          "$allowduplicate": false
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferView"
              },
              "name": {
                "#text": "bufferView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageAspectFlagBits"
              },
              "name": {
                "#text": "plane"
              }
            },
            {
              "type": {
                "#text": "MTLTexture_id"
              },
              "name": {
                "#text": "mtlTexture"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalTextureInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageAspectFlagBits"
              },
              "name": {
                "#text": "plane"
              }
            },
            {
              "type": {
                "#text": "MTLTexture_id"
              },
              "name": {
                "#text": "mtlTexture"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportMetalTextureInfoEXT",
          "$structextends": "VkImageCreateInfo",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "IOSurfaceRef"
              },
              "name": {
                "#text": "ioSurface"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalIOSurfaceInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "IOSurfaceRef"
              },
              "name": {
                "#text": "ioSurface"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkImportMetalIOSurfaceInfoEXT",
          "$structextends": "VkImageCreateInfo",
          "$allowduplicate": false
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "MTLSharedEvent_id"
              },
              "name": {
                "#text": "mtlSharedEvent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkExportMetalSharedEventInfoEXT",
          "$structextends": "VkExportMetalObjectsInfoEXT",
          "$allowduplicate": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "MTLSharedEvent_id"
              },
              "name": {
                "#text": "mtlSharedEvent"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImportMetalSharedEventInfoEXT",
          "$structextends": "VkSemaphoreCreateInfo,VkEventCreateInfo",
          "$allowduplicate": false
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "nonSeamlessCubeMap"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pipelineRobustness"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineRobustnessFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "storageBuffers"
              }
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "uniformBuffers"
              }
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "vertexInputs"
              }
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessImageBehaviorEXT"
              },
              "name": {
                "#text": "images"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPipelineRobustnessCreateInfoEXT",
          "$structextends": "VkGraphicsPipelineCreateInfo,VkComputePipelineCreateInfo,VkPipelineShaderStageCreateInfo,VkRayTracingPipelineCreateInfoKHR"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "defaultRobustnessStorageBuffers"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "defaultRobustnessUniformBuffers"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              "name": {
                "#text": "defaultRobustnessVertexInputs"
              },
              "$limittype": "exact"
            },
            {
              "type": {
                "#text": "VkPipelineRobustnessImageBehaviorEXT"
              },
              "name": {
                "#text": "defaultRobustnessImages"
              },
              "$limittype": "exact"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDevicePipelineRobustnessPropertiesEXT",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "filterCenter"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "filterSize"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "numPhases"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkImageViewSampleWeightCreateInfoQCOM",
          "$structextends": "VkImageViewCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureSampleWeighted"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureBoxFilter"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "textureBlockMatch"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageProcessingFeaturesQCOM",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxWeightFilterPhases"
              },
              "$limittype": "max",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxWeightFilterDimension"
              },
              "$limittype": "max",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxBlockMatchRegion"
              },
              "$limittype": "max",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "maxBoxFilterBlockSize"
              },
              "$limittype": "max",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceImageProcessingPropertiesQCOM",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "tileProperties"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceTilePropertiesFeaturesQCOM",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExtent3D"
              },
              "name": {
                "#text": "tileSize"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "apronSize"
              }
            },
            {
              "type": {
                "#text": "VkOffset2D"
              },
              "name": {
                "#text": "origin"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkTilePropertiesQCOM"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "amigoProfiling"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceAmigoProfilingFeaturesSEC",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "firstDrawTimestamp"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "swapBufferTimestamp"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkAmigoProfilingSubmitInfoSEC",
          "$structextends": "VkSubmitInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "attachmentFeedbackLoopLayout"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClampZeroOne"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "reportAddressBinding"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceAddressBindingReportFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddressBindingFlagsEXT"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "baseAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddressBindingTypeEXT"
              },
              "name": {
                "#text": "bindingType"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceAddressBindingCallbackDataEXT",
          "$structextends": "VkDebugUtilsMessengerCallbackDataEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "opticalFlow"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceOpticalFlowFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowGridSizeFlagsNV"
              },
              "name": {
                "#text": "supportedOutputGridSizes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkOpticalFlowGridSizeFlagsNV"
              },
              "name": {
                "#text": "supportedHintGridSizes"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "hintSupported"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "costSupported"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "bidirectionalFlowSupported"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "globalFlowSupported"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minWidth"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "minHeight"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxWidth"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxHeight"
              },
              "$limittype": "noauto"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxNumRegionsOfInterest"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceOpticalFlowPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowUsageFlagsNV"
              },
              "name": {
                "#text": "usage"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkOpticalFlowImageFormatInfoNV",
          "$structextends": "VkPhysicalDeviceImageFormatInfo2,VkImageCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkOpticalFlowImageFormatPropertiesNV",
          "$returnedonly": true
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "imageFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "flowVectorFormat"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "costFormat"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowGridSizeFlagsNV"
              },
              "name": {
                "#text": "outputGridSize"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowGridSizeFlagsNV"
              },
              "name": {
                "#text": "hintGridSize"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowPerformanceLevelNV"
              },
              "name": {
                "#text": "performanceLevel"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionCreateFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkOpticalFlowSessionCreateInfoNV"
        },
        {
          "comment": {
            "#text": "NV internal use only"
          },
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "id"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pPrivateData"
              },
              "#text": "const*"
            }
          ],
          "$category": "struct",
          "$name": "VkOpticalFlowSessionCreatePrivateDataInfoNV",
          "$structextends": "VkOpticalFlowSessionCreateInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowExecuteFlagsNV"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$category": "struct",
          "$name": "VkOpticalFlowExecuteInfoNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceFault"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "deviceFaultVendorBinary"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceFaultFeaturesEXT",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceFaultAddressTypeEXT"
              },
              "name": {
                "#text": "addressType"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "reportedAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "addressPrecision"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceFaultAddressInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "comment": {
                "#text": "Free-form description of the fault"
              },
              "#text": "[]",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "vendorFaultCode"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "vendorFaultData"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceFaultVendorInfoEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "addressInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vendorInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "vendorBinarySize"
              },
              "comment": {
                "#text": "Specified in bytes"
              },
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceFaultCountsEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "description"
              },
              "enum": {
                "#text": "VK_MAX_DESCRIPTION_SIZE"
              },
              "comment": {
                "#text": "Free-form description of the fault"
              },
              "#text": "[]",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkDeviceFaultAddressInfoEXT"
              },
              "name": {
                "#text": "pAddressInfos"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceFaultVendorInfoEXT"
              },
              "name": {
                "#text": "pVendorInfos"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pVendorBinaryData"
              },
              "#text": "*",
              "$optional": true
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceFaultInfoEXT"
        },
        {
          "comment": {
            "#text": "The fields in this structure are non-normative since structure packing is implementation-defined in C. The specification defines the normative layout."
          },
          "member": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "headerSize"
              }
            },
            {
              "type": {
                "#text": "VkDeviceFaultVendorBinaryHeaderVersionEXT"
              },
              "name": {
                "#text": "headerVersion"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vendorID"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceID"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "driverVersion"
              }
            },
            {
              "type": {
                "#text": "uint8_t"
              },
              "name": {
                "#text": "pipelineCacheUUID"
              },
              "enum": {
                "#text": "VK_UUID_SIZE"
              },
              "#text": "[]"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "applicationNameOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "applicationVersion"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "engineNameOffset"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDeviceFaultVendorBinaryHeaderVersionOneEXT"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "srcAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "dstAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "compressedSize"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "decompressedSize"
              },
              "comment": {
                "#text": "Specified in bytes"
              }
            },
            {
              "type": {
                "#text": "VkMemoryDecompressionMethodFlagsNV"
              },
              "name": {
                "#text": "decompressionMethod"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkDecompressMemoryRegionNV"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "shaderCoreMask"
              },
              "$limittype": "bitmask"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderCoreCount"
              },
              "$limittype": "max"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shaderWarpsPerCore"
              },
              "$limittype": "max"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shaderCoreBuiltins"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rayTracingInvocationReorder"
              }
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV",
          "$structextends": "VkPhysicalDeviceFeatures2,VkDeviceCreateInfo"
        },
        {
          "member": [
            {
              "type": {
                "#text": "VkStructureType"
              },
              "name": {
                "#text": "sType"
              },
              "$values": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pNext"
              },
              "#text": "*",
              "$optional": true,
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "VkRayTracingInvocationReorderModeNV"
              },
              "name": {
                "#text": "rayTracingInvocationReorderReorderingHint"
              },
              "$limittype": "noauto"
            }
          ],
          "$category": "struct",
          "$name": "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV",
          "$returnedonly": true,
          "$structextends": "VkPhysicalDeviceProperties2"
        }
      ],
      "comment": [
        {
          "#text": "WSI extensions"
        },
        {
          "#text": "In the current header structure, each platform's interfaces\n                are confined to a platform-specific header (vulkan_xlib.h,\n                vulkan_win32.h, etc.). These headers are not self-contained,\n                and should not include native headers (X11/Xlib.h,\n                windows.h, etc.). Code should either include vulkan.h after\n                defining the appropriate VK_USE_PLATFORM_platform\n                macros, or include the required native headers prior to\n                explicitly including the corresponding platform header.\n\n                To accomplish this, the dependencies of native types require\n                native headers, but the XML defines the content for those\n                native headers as empty. The actual native header includes\n                can be restored by modifying the native header tags above\n                to #include the header file in the 'name' attribute."
        },
        {
          "#text": "Basic C types, pulled in via vk_platform.h"
        },
        {
          "#text": "Bitmask types"
        },
        {
          "#text": "WSI extensions"
        },
        {
          "#text": "Video Core extension"
        },
        {
          "#text": "Video Decode Core extension"
        },
        {
          "#text": "Video Decode H.264 extension"
        },
        {
          "#text": "Video Encode Core extension"
        },
        {
          "#text": "Video Encode H.264 extension"
        },
        {
          "#text": "Video Encode H.265 extension"
        },
        {
          "#text": "Types which can be void pointers or class pointers, selected at compile time"
        },
        {
          "#text": "WSI extensions"
        },
        {
          "#text": "Video extensions"
        },
        {
          "#text": "Types generated from corresponding enums tags below"
        },
        {
          "#text": "Extensions"
        },
        {
          "#text": "WSI extensions"
        },
        {
          "#text": "Enumerated types in the header, but not used by the API"
        },
        {
          "#text": "Video Core extensions"
        },
        {
          "#text": "Video Decode extensions"
        },
        {
          "#text": "Video H.264 Decode extensions"
        },
        {
          "#text": "Video H.265 Decode extensions"
        },
        {
          "#text": "Video Encode extensions"
        },
        {
          "#text": "Video H.264 Encode extensions"
        },
        {
          "#text": "Video H.265 Encode extensions"
        },
        {
          "#text": "The PFN_vk*Function types are used by VkAllocationCallbacks below"
        },
        {
          "#text": "The PFN_vkVoidFunction type are used by VkGet*ProcAddr below"
        },
        {
          "#text": "The PFN_vkDebugReportCallbackEXT type are used by the DEBUG_REPORT extension"
        },
        {
          "#text": "The PFN_vkDebugUtilsMessengerCallbackEXT type are used by the VK_EXT_debug_utils extension"
        },
        {
          "#text": "The PFN_vkDeviceMemoryReportCallbackEXT type is used by the VK_EXT_device_memory_report extension"
        },
        {
          "#text": "Struct types"
        },
        {
          "#text": "WSI extensions"
        },
        {
          "#text": "Video Decode Codec Standard specific structures"
        }
      ],
      "$comment": "Vulkan type definitions"
    },
    "enums": [
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_CHROMA_FORMAT_IDC_420",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_CHROMA_FORMAT_IDC_422",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_CHROMA_FORMAT_IDC_444",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264ChromaFormatIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_PROFILE_IDC_BASELINE",
            "$value": 66,
            "$comment": "Only constrained baseline is supported"
          },
          {
            "$name": "STD_VIDEO_H264_PROFILE_IDC_MAIN",
            "$value": 77
          },
          {
            "$name": "STD_VIDEO_H264_PROFILE_IDC_HIGH",
            "$value": 100
          },
          {
            "$name": "STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE",
            "$value": 244
          },
          {
            "$name": "STD_VIDEO_H264_PROFILE_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264ProfileIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_1_0",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_1_1",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_1_2",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_1_3",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_2_0",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_2_1",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_2_2",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_3_0",
            "$value": 7
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_3_1",
            "$value": 8
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_3_2",
            "$value": 9
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_4_0",
            "$value": 10
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_4_1",
            "$value": 11
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_4_2",
            "$value": 12
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_5_0",
            "$value": 13
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_5_1",
            "$value": 14
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_5_2",
            "$value": 15
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_6_0",
            "$value": 16
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_6_1",
            "$value": 17
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_6_2",
            "$value": 18
          },
          {
            "$name": "STD_VIDEO_H264_LEVEL_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264LevelIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_POC_TYPE_0",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_POC_TYPE_1",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_POC_TYPE_2",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_POC_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264PocType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11",
            "$value": 7
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11",
            "$value": 8
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33",
            "$value": 9
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11",
            "$value": 10
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11",
            "$value": 11
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33",
            "$value": 12
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99",
            "$value": 13
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3",
            "$value": 14
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2",
            "$value": 15
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1",
            "$value": 16
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR",
            "$value": 255
          },
          {
            "$name": "STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264AspectRatioIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264WeightedBipredIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264ModificationOfPicNumsIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264MemMgmtControlOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_CABAC_INIT_IDC_0",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_CABAC_INIT_IDC_1",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_CABAC_INIT_IDC_2",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_CABAC_INIT_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264CabacInitIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264DisableDeblockingFilterIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_SLICE_TYPE_P",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_SLICE_TYPE_B",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_SLICE_TYPE_I",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_SLICE_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "comment": {
          "#text": "reserved STD_VIDEO_H264_SLICE_TYPE_SP = 3\n                reserved STD_VIDEO_H264_SLICE_TYPE_SI = 4"
        },
        "$name": "StdVideoH264SliceType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_PICTURE_TYPE_P",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_PICTURE_TYPE_B",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_PICTURE_TYPE_I",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_PICTURE_TYPE_IDR",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H264_PICTURE_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "comment": {
          "#text": "reserved STD_VIDEO_H264_PICTURE_TYPE_SP = 3\n                reserved STD_VIDEO_H264_PICTURE_TYPE_SI = 4"
        },
        "$name": "StdVideoH264PictureType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH264NonVclNaluType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoDecodeH264FieldOrderCount",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H265_CHROMA_FORMAT_IDC_420",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_CHROMA_FORMAT_IDC_422",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_CHROMA_FORMAT_IDC_444",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265ChromaFormatIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_MAIN",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_MAIN_10",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS",
            "$value": 9
          },
          {
            "$name": "STD_VIDEO_H265_PROFILE_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265ProfileIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_1_0",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_2_0",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_2_1",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_3_0",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_3_1",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_4_0",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_4_1",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_5_0",
            "$value": 7
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_5_1",
            "$value": 8
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_5_2",
            "$value": 9
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_6_0",
            "$value": 10
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_6_1",
            "$value": 11
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_6_2",
            "$value": 12
          },
          {
            "$name": "STD_VIDEO_H265_LEVEL_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265LevelIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_SLICE_TYPE_B",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H265_SLICE_TYPE_P",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_SLICE_TYPE_I",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_SLICE_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265SliceType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_PICTURE_TYPE_P",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H265_PICTURE_TYPE_B",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_PICTURE_TYPE_I",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_PICTURE_TYPE_IDR",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H265_PICTURE_TYPE_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265PictureType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED",
            "$value": 0
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE",
            "$value": 1
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11",
            "$value": 2
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11",
            "$value": 3
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11",
            "$value": 4
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33",
            "$value": 5
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11",
            "$value": 6
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11",
            "$value": 7
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11",
            "$value": 8
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33",
            "$value": 9
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11",
            "$value": 10
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11",
            "$value": 11
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33",
            "$value": 12
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99",
            "$value": 13
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3",
            "$value": 14
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2",
            "$value": 15
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1",
            "$value": 16
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR",
            "$value": 255
          },
          {
            "$name": "STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID",
            "$value": 2147483647
          }
        ],
        "$name": "StdVideoH265AspectRatioIdc",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$type": "uint32_t",
            "$value": 256,
            "$name": "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 16,
            "$name": "VK_UUID_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 8,
            "$name": "VK_LUID_SIZE"
          },
          {
            "$name": "VK_LUID_SIZE_KHR",
            "$alias": "VK_LUID_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 256,
            "$name": "VK_MAX_EXTENSION_NAME_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 256,
            "$name": "VK_MAX_DESCRIPTION_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 32,
            "$name": "VK_MAX_MEMORY_TYPES"
          },
          {
            "$type": "uint32_t",
            "$value": 16,
            "$name": "VK_MAX_MEMORY_HEAPS",
            "$comment": "The maximum number of unique memory heaps, each of which supporting 1 or more memory types"
          },
          {
            "$type": "float",
            "$value": "1000.0F",
            "$name": "VK_LOD_CLAMP_NONE"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_REMAINING_MIP_LEVELS"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_REMAINING_ARRAY_LAYERS"
          },
          {
            "$type": "uint64_t",
            "$value": "(~0ULL)",
            "$name": "VK_WHOLE_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_ATTACHMENT_UNUSED"
          },
          {
            "$type": "uint32_t",
            "$value": 1,
            "$name": "VK_TRUE"
          },
          {
            "$type": "uint32_t",
            "$value": 0,
            "$name": "VK_FALSE"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_QUEUE_FAMILY_IGNORED"
          },
          {
            "$type": "uint32_t",
            "$value": "(~1U)",
            "$name": "VK_QUEUE_FAMILY_EXTERNAL"
          },
          {
            "$name": "VK_QUEUE_FAMILY_EXTERNAL_KHR",
            "$alias": "VK_QUEUE_FAMILY_EXTERNAL"
          },
          {
            "$type": "uint32_t",
            "$value": "(~2U)",
            "$name": "VK_QUEUE_FAMILY_FOREIGN_EXT"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_SUBPASS_EXTERNAL"
          },
          {
            "$type": "uint32_t",
            "$value": 32,
            "$name": "VK_MAX_DEVICE_GROUP_SIZE"
          },
          {
            "$name": "VK_MAX_DEVICE_GROUP_SIZE_KHR",
            "$alias": "VK_MAX_DEVICE_GROUP_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 256,
            "$name": "VK_MAX_DRIVER_NAME_SIZE"
          },
          {
            "$name": "VK_MAX_DRIVER_NAME_SIZE_KHR",
            "$alias": "VK_MAX_DRIVER_NAME_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": 256,
            "$name": "VK_MAX_DRIVER_INFO_SIZE"
          },
          {
            "$name": "VK_MAX_DRIVER_INFO_SIZE_KHR",
            "$alias": "VK_MAX_DRIVER_INFO_SIZE"
          },
          {
            "$type": "uint32_t",
            "$value": "(~0U)",
            "$name": "VK_SHADER_UNUSED_KHR"
          },
          {
            "$name": "VK_SHADER_UNUSED_NV",
            "$alias": "VK_SHADER_UNUSED_KHR"
          },
          {
            "$type": "uint32_t",
            "$value": 16,
            "$name": "VK_MAX_GLOBAL_PRIORITY_SIZE_KHR"
          },
          {
            "$name": "VK_MAX_GLOBAL_PRIORITY_SIZE_EXT",
            "$alias": "VK_MAX_GLOBAL_PRIORITY_SIZE_KHR"
          },
          {
            "$type": "uint32_t",
            "$value": 32,
            "$name": "VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT"
          }
        ],
        "$name": "API Constants",
        "$comment": "Vulkan hardcoded constants - not an enumerated type, part of the header boilerplate"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_LAYOUT_UNDEFINED",
            "$comment": "Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)"
          },
          {
            "$value": 1,
            "$name": "VK_IMAGE_LAYOUT_GENERAL",
            "$comment": "General layout when image can be used for any kind of access"
          },
          {
            "$value": 2,
            "$name": "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
            "$comment": "Optimal layout when image is only used for color attachment read/write"
          },
          {
            "$value": 3,
            "$name": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
            "$comment": "Optimal layout when image is only used for depth/stencil attachment read/write"
          },
          {
            "$value": 4,
            "$name": "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
            "$comment": "Optimal layout when image is used for read only depth/stencil attachment and shader access"
          },
          {
            "$value": 5,
            "$name": "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
            "$comment": "Optimal layout when image is used for read only shader access"
          },
          {
            "$value": 6,
            "$name": "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
            "$comment": "Optimal layout when image is used only as source of transfer operations"
          },
          {
            "$value": 7,
            "$name": "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
            "$comment": "Optimal layout when image is used only as destination of transfer operations"
          },
          {
            "$value": 8,
            "$name": "VK_IMAGE_LAYOUT_PREINITIALIZED",
            "$comment": "Initial layout used when the data is populated by the CPU"
          }
        ],
        "$name": "VkImageLayout",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ATTACHMENT_LOAD_OP_LOAD"
          },
          {
            "$value": 1,
            "$name": "VK_ATTACHMENT_LOAD_OP_CLEAR"
          },
          {
            "$value": 2,
            "$name": "VK_ATTACHMENT_LOAD_OP_DONT_CARE"
          }
        ],
        "$name": "VkAttachmentLoadOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ATTACHMENT_STORE_OP_STORE"
          },
          {
            "$value": 1,
            "$name": "VK_ATTACHMENT_STORE_OP_DONT_CARE"
          }
        ],
        "$name": "VkAttachmentStoreOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_TYPE_1D"
          },
          {
            "$value": 1,
            "$name": "VK_IMAGE_TYPE_2D"
          },
          {
            "$value": 2,
            "$name": "VK_IMAGE_TYPE_3D"
          }
        ],
        "$name": "VkImageType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_TILING_OPTIMAL"
          },
          {
            "$value": 1,
            "$name": "VK_IMAGE_TILING_LINEAR"
          }
        ],
        "$name": "VkImageTiling",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_VIEW_TYPE_1D"
          },
          {
            "$value": 1,
            "$name": "VK_IMAGE_VIEW_TYPE_2D"
          },
          {
            "$value": 2,
            "$name": "VK_IMAGE_VIEW_TYPE_3D"
          },
          {
            "$value": 3,
            "$name": "VK_IMAGE_VIEW_TYPE_CUBE"
          },
          {
            "$value": 4,
            "$name": "VK_IMAGE_VIEW_TYPE_1D_ARRAY"
          },
          {
            "$value": 5,
            "$name": "VK_IMAGE_VIEW_TYPE_2D_ARRAY"
          },
          {
            "$value": 6,
            "$name": "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"
          }
        ],
        "$name": "VkImageViewType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COMMAND_BUFFER_LEVEL_PRIMARY"
          },
          {
            "$value": 1,
            "$name": "VK_COMMAND_BUFFER_LEVEL_SECONDARY"
          }
        ],
        "$name": "VkCommandBufferLevel",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COMPONENT_SWIZZLE_IDENTITY"
          },
          {
            "$value": 1,
            "$name": "VK_COMPONENT_SWIZZLE_ZERO"
          },
          {
            "$value": 2,
            "$name": "VK_COMPONENT_SWIZZLE_ONE"
          },
          {
            "$value": 3,
            "$name": "VK_COMPONENT_SWIZZLE_R"
          },
          {
            "$value": 4,
            "$name": "VK_COMPONENT_SWIZZLE_G"
          },
          {
            "$value": 5,
            "$name": "VK_COMPONENT_SWIZZLE_B"
          },
          {
            "$value": 6,
            "$name": "VK_COMPONENT_SWIZZLE_A"
          }
        ],
        "$name": "VkComponentSwizzle",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DESCRIPTOR_TYPE_SAMPLER"
          },
          {
            "$value": 1,
            "$name": "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER"
          },
          {
            "$value": 2,
            "$name": "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE"
          },
          {
            "$value": 3,
            "$name": "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE"
          },
          {
            "$value": 4,
            "$name": "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER"
          },
          {
            "$value": 5,
            "$name": "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER"
          },
          {
            "$value": 6,
            "$name": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER"
          },
          {
            "$value": 7,
            "$name": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER"
          },
          {
            "$value": 8,
            "$name": "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC"
          },
          {
            "$value": 9,
            "$name": "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC"
          },
          {
            "$value": 10,
            "$name": "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT"
          }
        ],
        "$name": "VkDescriptorType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_QUERY_TYPE_OCCLUSION"
          },
          {
            "$value": 1,
            "$name": "VK_QUERY_TYPE_PIPELINE_STATISTICS",
            "$comment": "Optional"
          },
          {
            "$value": 2,
            "$name": "VK_QUERY_TYPE_TIMESTAMP"
          }
        ],
        "$name": "VkQueryType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK"
          },
          {
            "$value": 1,
            "$name": "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK"
          },
          {
            "$value": 2,
            "$name": "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK"
          },
          {
            "$value": 3,
            "$name": "VK_BORDER_COLOR_INT_OPAQUE_BLACK"
          },
          {
            "$value": 4,
            "$name": "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE"
          },
          {
            "$value": 5,
            "$name": "VK_BORDER_COLOR_INT_OPAQUE_WHITE"
          }
        ],
        "$name": "VkBorderColor",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PIPELINE_BIND_POINT_GRAPHICS"
          },
          {
            "$value": 1,
            "$name": "VK_PIPELINE_BIND_POINT_COMPUTE"
          }
        ],
        "$name": "VkPipelineBindPoint",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 1,
          "$name": "VK_PIPELINE_CACHE_HEADER_VERSION_ONE"
        },
        "$name": "VkPipelineCacheHeaderVersion",
        "$type": "enum"
      },
      {
        "$name": "VkPipelineCacheCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PRIMITIVE_TOPOLOGY_POINT_LIST"
          },
          {
            "$value": 1,
            "$name": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST"
          },
          {
            "$value": 2,
            "$name": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"
          },
          {
            "$value": 3,
            "$name": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"
          },
          {
            "$value": 4,
            "$name": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"
          },
          {
            "$value": 5,
            "$name": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"
          },
          {
            "$value": 6,
            "$name": "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"
          },
          {
            "$value": 7,
            "$name": "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"
          },
          {
            "$value": 8,
            "$name": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"
          },
          {
            "$value": 9,
            "$name": "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"
          },
          {
            "$value": 10,
            "$name": "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"
          }
        ],
        "$name": "VkPrimitiveTopology",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SHARING_MODE_EXCLUSIVE"
          },
          {
            "$value": 1,
            "$name": "VK_SHARING_MODE_CONCURRENT"
          }
        ],
        "$name": "VkSharingMode",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_INDEX_TYPE_UINT16"
          },
          {
            "$value": 1,
            "$name": "VK_INDEX_TYPE_UINT32"
          }
        ],
        "$name": "VkIndexType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FILTER_NEAREST"
          },
          {
            "$value": 1,
            "$name": "VK_FILTER_LINEAR"
          }
        ],
        "$name": "VkFilter",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SAMPLER_MIPMAP_MODE_NEAREST",
            "$comment": "Choose nearest mip level"
          },
          {
            "$value": 1,
            "$name": "VK_SAMPLER_MIPMAP_MODE_LINEAR",
            "$comment": "Linear filter between mip levels"
          }
        ],
        "$name": "VkSamplerMipmapMode",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SAMPLER_ADDRESS_MODE_REPEAT"
          },
          {
            "$value": 1,
            "$name": "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT"
          },
          {
            "$value": 2,
            "$name": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE"
          },
          {
            "$value": 3,
            "$name": "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
          }
        ],
        "comment": {
          "#text": "value=\"4\" reserved for VK_KHR_sampler_mirror_clamp_to_edge\n                enum VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE; do not\n                alias!"
        },
        "$name": "VkSamplerAddressMode",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COMPARE_OP_NEVER"
          },
          {
            "$value": 1,
            "$name": "VK_COMPARE_OP_LESS"
          },
          {
            "$value": 2,
            "$name": "VK_COMPARE_OP_EQUAL"
          },
          {
            "$value": 3,
            "$name": "VK_COMPARE_OP_LESS_OR_EQUAL"
          },
          {
            "$value": 4,
            "$name": "VK_COMPARE_OP_GREATER"
          },
          {
            "$value": 5,
            "$name": "VK_COMPARE_OP_NOT_EQUAL"
          },
          {
            "$value": 6,
            "$name": "VK_COMPARE_OP_GREATER_OR_EQUAL"
          },
          {
            "$value": 7,
            "$name": "VK_COMPARE_OP_ALWAYS"
          }
        ],
        "$name": "VkCompareOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_POLYGON_MODE_FILL"
          },
          {
            "$value": 1,
            "$name": "VK_POLYGON_MODE_LINE"
          },
          {
            "$value": 2,
            "$name": "VK_POLYGON_MODE_POINT"
          }
        ],
        "$name": "VkPolygonMode",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FRONT_FACE_COUNTER_CLOCKWISE"
          },
          {
            "$value": 1,
            "$name": "VK_FRONT_FACE_CLOCKWISE"
          }
        ],
        "$name": "VkFrontFace",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_BLEND_FACTOR_ZERO"
          },
          {
            "$value": 1,
            "$name": "VK_BLEND_FACTOR_ONE"
          },
          {
            "$value": 2,
            "$name": "VK_BLEND_FACTOR_SRC_COLOR"
          },
          {
            "$value": 3,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"
          },
          {
            "$value": 4,
            "$name": "VK_BLEND_FACTOR_DST_COLOR"
          },
          {
            "$value": 5,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"
          },
          {
            "$value": 6,
            "$name": "VK_BLEND_FACTOR_SRC_ALPHA"
          },
          {
            "$value": 7,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"
          },
          {
            "$value": 8,
            "$name": "VK_BLEND_FACTOR_DST_ALPHA"
          },
          {
            "$value": 9,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"
          },
          {
            "$value": 10,
            "$name": "VK_BLEND_FACTOR_CONSTANT_COLOR"
          },
          {
            "$value": 11,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"
          },
          {
            "$value": 12,
            "$name": "VK_BLEND_FACTOR_CONSTANT_ALPHA"
          },
          {
            "$value": 13,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA"
          },
          {
            "$value": 14,
            "$name": "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"
          },
          {
            "$value": 15,
            "$name": "VK_BLEND_FACTOR_SRC1_COLOR"
          },
          {
            "$value": 16,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"
          },
          {
            "$value": 17,
            "$name": "VK_BLEND_FACTOR_SRC1_ALPHA"
          },
          {
            "$value": 18,
            "$name": "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"
          }
        ],
        "$name": "VkBlendFactor",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_BLEND_OP_ADD"
          },
          {
            "$value": 1,
            "$name": "VK_BLEND_OP_SUBTRACT"
          },
          {
            "$value": 2,
            "$name": "VK_BLEND_OP_REVERSE_SUBTRACT"
          },
          {
            "$value": 3,
            "$name": "VK_BLEND_OP_MIN"
          },
          {
            "$value": 4,
            "$name": "VK_BLEND_OP_MAX"
          }
        ],
        "$name": "VkBlendOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_STENCIL_OP_KEEP"
          },
          {
            "$value": 1,
            "$name": "VK_STENCIL_OP_ZERO"
          },
          {
            "$value": 2,
            "$name": "VK_STENCIL_OP_REPLACE"
          },
          {
            "$value": 3,
            "$name": "VK_STENCIL_OP_INCREMENT_AND_CLAMP"
          },
          {
            "$value": 4,
            "$name": "VK_STENCIL_OP_DECREMENT_AND_CLAMP"
          },
          {
            "$value": 5,
            "$name": "VK_STENCIL_OP_INVERT"
          },
          {
            "$value": 6,
            "$name": "VK_STENCIL_OP_INCREMENT_AND_WRAP"
          },
          {
            "$value": 7,
            "$name": "VK_STENCIL_OP_DECREMENT_AND_WRAP"
          }
        ],
        "$name": "VkStencilOp",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_LOGIC_OP_CLEAR"
          },
          {
            "$value": 1,
            "$name": "VK_LOGIC_OP_AND"
          },
          {
            "$value": 2,
            "$name": "VK_LOGIC_OP_AND_REVERSE"
          },
          {
            "$value": 3,
            "$name": "VK_LOGIC_OP_COPY"
          },
          {
            "$value": 4,
            "$name": "VK_LOGIC_OP_AND_INVERTED"
          },
          {
            "$value": 5,
            "$name": "VK_LOGIC_OP_NO_OP"
          },
          {
            "$value": 6,
            "$name": "VK_LOGIC_OP_XOR"
          },
          {
            "$value": 7,
            "$name": "VK_LOGIC_OP_OR"
          },
          {
            "$value": 8,
            "$name": "VK_LOGIC_OP_NOR"
          },
          {
            "$value": 9,
            "$name": "VK_LOGIC_OP_EQUIVALENT"
          },
          {
            "$value": 10,
            "$name": "VK_LOGIC_OP_INVERT"
          },
          {
            "$value": 11,
            "$name": "VK_LOGIC_OP_OR_REVERSE"
          },
          {
            "$value": 12,
            "$name": "VK_LOGIC_OP_COPY_INVERTED"
          },
          {
            "$value": 13,
            "$name": "VK_LOGIC_OP_OR_INVERTED"
          },
          {
            "$value": 14,
            "$name": "VK_LOGIC_OP_NAND"
          },
          {
            "$value": 15,
            "$name": "VK_LOGIC_OP_SET"
          }
        ],
        "$name": "VkLogicOp",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE"
        },
        "$name": "VkInternalAllocationType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND"
          },
          {
            "$value": 1,
            "$name": "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT"
          },
          {
            "$value": 2,
            "$name": "VK_SYSTEM_ALLOCATION_SCOPE_CACHE"
          },
          {
            "$value": 3,
            "$name": "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE"
          },
          {
            "$value": 4,
            "$name": "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE"
          }
        ],
        "$name": "VkSystemAllocationScope",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PHYSICAL_DEVICE_TYPE_OTHER"
          },
          {
            "$value": 1,
            "$name": "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU"
          },
          {
            "$value": 2,
            "$name": "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"
          },
          {
            "$value": 3,
            "$name": "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU"
          },
          {
            "$value": 4,
            "$name": "VK_PHYSICAL_DEVICE_TYPE_CPU"
          }
        ],
        "$name": "VkPhysicalDeviceType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VERTEX_INPUT_RATE_VERTEX"
          },
          {
            "$value": 1,
            "$name": "VK_VERTEX_INPUT_RATE_INSTANCE"
          }
        ],
        "$name": "VkVertexInputRate",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FORMAT_UNDEFINED"
          },
          {
            "$value": 1,
            "$name": "VK_FORMAT_R4G4_UNORM_PACK8"
          },
          {
            "$value": 2,
            "$name": "VK_FORMAT_R4G4B4A4_UNORM_PACK16"
          },
          {
            "$value": 3,
            "$name": "VK_FORMAT_B4G4R4A4_UNORM_PACK16"
          },
          {
            "$value": 4,
            "$name": "VK_FORMAT_R5G6B5_UNORM_PACK16"
          },
          {
            "$value": 5,
            "$name": "VK_FORMAT_B5G6R5_UNORM_PACK16"
          },
          {
            "$value": 6,
            "$name": "VK_FORMAT_R5G5B5A1_UNORM_PACK16"
          },
          {
            "$value": 7,
            "$name": "VK_FORMAT_B5G5R5A1_UNORM_PACK16"
          },
          {
            "$value": 8,
            "$name": "VK_FORMAT_A1R5G5B5_UNORM_PACK16"
          },
          {
            "$value": 9,
            "$name": "VK_FORMAT_R8_UNORM"
          },
          {
            "$value": 10,
            "$name": "VK_FORMAT_R8_SNORM"
          },
          {
            "$value": 11,
            "$name": "VK_FORMAT_R8_USCALED"
          },
          {
            "$value": 12,
            "$name": "VK_FORMAT_R8_SSCALED"
          },
          {
            "$value": 13,
            "$name": "VK_FORMAT_R8_UINT"
          },
          {
            "$value": 14,
            "$name": "VK_FORMAT_R8_SINT"
          },
          {
            "$value": 15,
            "$name": "VK_FORMAT_R8_SRGB"
          },
          {
            "$value": 16,
            "$name": "VK_FORMAT_R8G8_UNORM"
          },
          {
            "$value": 17,
            "$name": "VK_FORMAT_R8G8_SNORM"
          },
          {
            "$value": 18,
            "$name": "VK_FORMAT_R8G8_USCALED"
          },
          {
            "$value": 19,
            "$name": "VK_FORMAT_R8G8_SSCALED"
          },
          {
            "$value": 20,
            "$name": "VK_FORMAT_R8G8_UINT"
          },
          {
            "$value": 21,
            "$name": "VK_FORMAT_R8G8_SINT"
          },
          {
            "$value": 22,
            "$name": "VK_FORMAT_R8G8_SRGB"
          },
          {
            "$value": 23,
            "$name": "VK_FORMAT_R8G8B8_UNORM"
          },
          {
            "$value": 24,
            "$name": "VK_FORMAT_R8G8B8_SNORM"
          },
          {
            "$value": 25,
            "$name": "VK_FORMAT_R8G8B8_USCALED"
          },
          {
            "$value": 26,
            "$name": "VK_FORMAT_R8G8B8_SSCALED"
          },
          {
            "$value": 27,
            "$name": "VK_FORMAT_R8G8B8_UINT"
          },
          {
            "$value": 28,
            "$name": "VK_FORMAT_R8G8B8_SINT"
          },
          {
            "$value": 29,
            "$name": "VK_FORMAT_R8G8B8_SRGB"
          },
          {
            "$value": 30,
            "$name": "VK_FORMAT_B8G8R8_UNORM"
          },
          {
            "$value": 31,
            "$name": "VK_FORMAT_B8G8R8_SNORM"
          },
          {
            "$value": 32,
            "$name": "VK_FORMAT_B8G8R8_USCALED"
          },
          {
            "$value": 33,
            "$name": "VK_FORMAT_B8G8R8_SSCALED"
          },
          {
            "$value": 34,
            "$name": "VK_FORMAT_B8G8R8_UINT"
          },
          {
            "$value": 35,
            "$name": "VK_FORMAT_B8G8R8_SINT"
          },
          {
            "$value": 36,
            "$name": "VK_FORMAT_B8G8R8_SRGB"
          },
          {
            "$value": 37,
            "$name": "VK_FORMAT_R8G8B8A8_UNORM"
          },
          {
            "$value": 38,
            "$name": "VK_FORMAT_R8G8B8A8_SNORM"
          },
          {
            "$value": 39,
            "$name": "VK_FORMAT_R8G8B8A8_USCALED"
          },
          {
            "$value": 40,
            "$name": "VK_FORMAT_R8G8B8A8_SSCALED"
          },
          {
            "$value": 41,
            "$name": "VK_FORMAT_R8G8B8A8_UINT"
          },
          {
            "$value": 42,
            "$name": "VK_FORMAT_R8G8B8A8_SINT"
          },
          {
            "$value": 43,
            "$name": "VK_FORMAT_R8G8B8A8_SRGB"
          },
          {
            "$value": 44,
            "$name": "VK_FORMAT_B8G8R8A8_UNORM"
          },
          {
            "$value": 45,
            "$name": "VK_FORMAT_B8G8R8A8_SNORM"
          },
          {
            "$value": 46,
            "$name": "VK_FORMAT_B8G8R8A8_USCALED"
          },
          {
            "$value": 47,
            "$name": "VK_FORMAT_B8G8R8A8_SSCALED"
          },
          {
            "$value": 48,
            "$name": "VK_FORMAT_B8G8R8A8_UINT"
          },
          {
            "$value": 49,
            "$name": "VK_FORMAT_B8G8R8A8_SINT"
          },
          {
            "$value": 50,
            "$name": "VK_FORMAT_B8G8R8A8_SRGB"
          },
          {
            "$value": 51,
            "$name": "VK_FORMAT_A8B8G8R8_UNORM_PACK32"
          },
          {
            "$value": 52,
            "$name": "VK_FORMAT_A8B8G8R8_SNORM_PACK32"
          },
          {
            "$value": 53,
            "$name": "VK_FORMAT_A8B8G8R8_USCALED_PACK32"
          },
          {
            "$value": 54,
            "$name": "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"
          },
          {
            "$value": 55,
            "$name": "VK_FORMAT_A8B8G8R8_UINT_PACK32"
          },
          {
            "$value": 56,
            "$name": "VK_FORMAT_A8B8G8R8_SINT_PACK32"
          },
          {
            "$value": 57,
            "$name": "VK_FORMAT_A8B8G8R8_SRGB_PACK32"
          },
          {
            "$value": 58,
            "$name": "VK_FORMAT_A2R10G10B10_UNORM_PACK32"
          },
          {
            "$value": 59,
            "$name": "VK_FORMAT_A2R10G10B10_SNORM_PACK32"
          },
          {
            "$value": 60,
            "$name": "VK_FORMAT_A2R10G10B10_USCALED_PACK32"
          },
          {
            "$value": 61,
            "$name": "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"
          },
          {
            "$value": 62,
            "$name": "VK_FORMAT_A2R10G10B10_UINT_PACK32"
          },
          {
            "$value": 63,
            "$name": "VK_FORMAT_A2R10G10B10_SINT_PACK32"
          },
          {
            "$value": 64,
            "$name": "VK_FORMAT_A2B10G10R10_UNORM_PACK32"
          },
          {
            "$value": 65,
            "$name": "VK_FORMAT_A2B10G10R10_SNORM_PACK32"
          },
          {
            "$value": 66,
            "$name": "VK_FORMAT_A2B10G10R10_USCALED_PACK32"
          },
          {
            "$value": 67,
            "$name": "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"
          },
          {
            "$value": 68,
            "$name": "VK_FORMAT_A2B10G10R10_UINT_PACK32"
          },
          {
            "$value": 69,
            "$name": "VK_FORMAT_A2B10G10R10_SINT_PACK32"
          },
          {
            "$value": 70,
            "$name": "VK_FORMAT_R16_UNORM"
          },
          {
            "$value": 71,
            "$name": "VK_FORMAT_R16_SNORM"
          },
          {
            "$value": 72,
            "$name": "VK_FORMAT_R16_USCALED"
          },
          {
            "$value": 73,
            "$name": "VK_FORMAT_R16_SSCALED"
          },
          {
            "$value": 74,
            "$name": "VK_FORMAT_R16_UINT"
          },
          {
            "$value": 75,
            "$name": "VK_FORMAT_R16_SINT"
          },
          {
            "$value": 76,
            "$name": "VK_FORMAT_R16_SFLOAT"
          },
          {
            "$value": 77,
            "$name": "VK_FORMAT_R16G16_UNORM"
          },
          {
            "$value": 78,
            "$name": "VK_FORMAT_R16G16_SNORM"
          },
          {
            "$value": 79,
            "$name": "VK_FORMAT_R16G16_USCALED"
          },
          {
            "$value": 80,
            "$name": "VK_FORMAT_R16G16_SSCALED"
          },
          {
            "$value": 81,
            "$name": "VK_FORMAT_R16G16_UINT"
          },
          {
            "$value": 82,
            "$name": "VK_FORMAT_R16G16_SINT"
          },
          {
            "$value": 83,
            "$name": "VK_FORMAT_R16G16_SFLOAT"
          },
          {
            "$value": 84,
            "$name": "VK_FORMAT_R16G16B16_UNORM"
          },
          {
            "$value": 85,
            "$name": "VK_FORMAT_R16G16B16_SNORM"
          },
          {
            "$value": 86,
            "$name": "VK_FORMAT_R16G16B16_USCALED"
          },
          {
            "$value": 87,
            "$name": "VK_FORMAT_R16G16B16_SSCALED"
          },
          {
            "$value": 88,
            "$name": "VK_FORMAT_R16G16B16_UINT"
          },
          {
            "$value": 89,
            "$name": "VK_FORMAT_R16G16B16_SINT"
          },
          {
            "$value": 90,
            "$name": "VK_FORMAT_R16G16B16_SFLOAT"
          },
          {
            "$value": 91,
            "$name": "VK_FORMAT_R16G16B16A16_UNORM"
          },
          {
            "$value": 92,
            "$name": "VK_FORMAT_R16G16B16A16_SNORM"
          },
          {
            "$value": 93,
            "$name": "VK_FORMAT_R16G16B16A16_USCALED"
          },
          {
            "$value": 94,
            "$name": "VK_FORMAT_R16G16B16A16_SSCALED"
          },
          {
            "$value": 95,
            "$name": "VK_FORMAT_R16G16B16A16_UINT"
          },
          {
            "$value": 96,
            "$name": "VK_FORMAT_R16G16B16A16_SINT"
          },
          {
            "$value": 97,
            "$name": "VK_FORMAT_R16G16B16A16_SFLOAT"
          },
          {
            "$value": 98,
            "$name": "VK_FORMAT_R32_UINT"
          },
          {
            "$value": 99,
            "$name": "VK_FORMAT_R32_SINT"
          },
          {
            "$value": 100,
            "$name": "VK_FORMAT_R32_SFLOAT"
          },
          {
            "$value": 101,
            "$name": "VK_FORMAT_R32G32_UINT"
          },
          {
            "$value": 102,
            "$name": "VK_FORMAT_R32G32_SINT"
          },
          {
            "$value": 103,
            "$name": "VK_FORMAT_R32G32_SFLOAT"
          },
          {
            "$value": 104,
            "$name": "VK_FORMAT_R32G32B32_UINT"
          },
          {
            "$value": 105,
            "$name": "VK_FORMAT_R32G32B32_SINT"
          },
          {
            "$value": 106,
            "$name": "VK_FORMAT_R32G32B32_SFLOAT"
          },
          {
            "$value": 107,
            "$name": "VK_FORMAT_R32G32B32A32_UINT"
          },
          {
            "$value": 108,
            "$name": "VK_FORMAT_R32G32B32A32_SINT"
          },
          {
            "$value": 109,
            "$name": "VK_FORMAT_R32G32B32A32_SFLOAT"
          },
          {
            "$value": 110,
            "$name": "VK_FORMAT_R64_UINT"
          },
          {
            "$value": 111,
            "$name": "VK_FORMAT_R64_SINT"
          },
          {
            "$value": 112,
            "$name": "VK_FORMAT_R64_SFLOAT"
          },
          {
            "$value": 113,
            "$name": "VK_FORMAT_R64G64_UINT"
          },
          {
            "$value": 114,
            "$name": "VK_FORMAT_R64G64_SINT"
          },
          {
            "$value": 115,
            "$name": "VK_FORMAT_R64G64_SFLOAT"
          },
          {
            "$value": 116,
            "$name": "VK_FORMAT_R64G64B64_UINT"
          },
          {
            "$value": 117,
            "$name": "VK_FORMAT_R64G64B64_SINT"
          },
          {
            "$value": 118,
            "$name": "VK_FORMAT_R64G64B64_SFLOAT"
          },
          {
            "$value": 119,
            "$name": "VK_FORMAT_R64G64B64A64_UINT"
          },
          {
            "$value": 120,
            "$name": "VK_FORMAT_R64G64B64A64_SINT"
          },
          {
            "$value": 121,
            "$name": "VK_FORMAT_R64G64B64A64_SFLOAT"
          },
          {
            "$value": 122,
            "$name": "VK_FORMAT_B10G11R11_UFLOAT_PACK32"
          },
          {
            "$value": 123,
            "$name": "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"
          },
          {
            "$value": 124,
            "$name": "VK_FORMAT_D16_UNORM"
          },
          {
            "$value": 125,
            "$name": "VK_FORMAT_X8_D24_UNORM_PACK32"
          },
          {
            "$value": 126,
            "$name": "VK_FORMAT_D32_SFLOAT"
          },
          {
            "$value": 127,
            "$name": "VK_FORMAT_S8_UINT"
          },
          {
            "$value": 128,
            "$name": "VK_FORMAT_D16_UNORM_S8_UINT"
          },
          {
            "$value": 129,
            "$name": "VK_FORMAT_D24_UNORM_S8_UINT"
          },
          {
            "$value": 130,
            "$name": "VK_FORMAT_D32_SFLOAT_S8_UINT"
          },
          {
            "$value": 131,
            "$name": "VK_FORMAT_BC1_RGB_UNORM_BLOCK"
          },
          {
            "$value": 132,
            "$name": "VK_FORMAT_BC1_RGB_SRGB_BLOCK"
          },
          {
            "$value": 133,
            "$name": "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"
          },
          {
            "$value": 134,
            "$name": "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"
          },
          {
            "$value": 135,
            "$name": "VK_FORMAT_BC2_UNORM_BLOCK"
          },
          {
            "$value": 136,
            "$name": "VK_FORMAT_BC2_SRGB_BLOCK"
          },
          {
            "$value": 137,
            "$name": "VK_FORMAT_BC3_UNORM_BLOCK"
          },
          {
            "$value": 138,
            "$name": "VK_FORMAT_BC3_SRGB_BLOCK"
          },
          {
            "$value": 139,
            "$name": "VK_FORMAT_BC4_UNORM_BLOCK"
          },
          {
            "$value": 140,
            "$name": "VK_FORMAT_BC4_SNORM_BLOCK"
          },
          {
            "$value": 141,
            "$name": "VK_FORMAT_BC5_UNORM_BLOCK"
          },
          {
            "$value": 142,
            "$name": "VK_FORMAT_BC5_SNORM_BLOCK"
          },
          {
            "$value": 143,
            "$name": "VK_FORMAT_BC6H_UFLOAT_BLOCK"
          },
          {
            "$value": 144,
            "$name": "VK_FORMAT_BC6H_SFLOAT_BLOCK"
          },
          {
            "$value": 145,
            "$name": "VK_FORMAT_BC7_UNORM_BLOCK"
          },
          {
            "$value": 146,
            "$name": "VK_FORMAT_BC7_SRGB_BLOCK"
          },
          {
            "$value": 147,
            "$name": "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"
          },
          {
            "$value": 148,
            "$name": "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"
          },
          {
            "$value": 149,
            "$name": "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"
          },
          {
            "$value": 150,
            "$name": "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"
          },
          {
            "$value": 151,
            "$name": "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"
          },
          {
            "$value": 152,
            "$name": "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"
          },
          {
            "$value": 153,
            "$name": "VK_FORMAT_EAC_R11_UNORM_BLOCK"
          },
          {
            "$value": 154,
            "$name": "VK_FORMAT_EAC_R11_SNORM_BLOCK"
          },
          {
            "$value": 155,
            "$name": "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"
          },
          {
            "$value": 156,
            "$name": "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"
          },
          {
            "$value": 157,
            "$name": "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"
          },
          {
            "$value": 158,
            "$name": "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"
          },
          {
            "$value": 159,
            "$name": "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"
          },
          {
            "$value": 160,
            "$name": "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"
          },
          {
            "$value": 161,
            "$name": "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"
          },
          {
            "$value": 162,
            "$name": "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"
          },
          {
            "$value": 163,
            "$name": "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"
          },
          {
            "$value": 164,
            "$name": "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"
          },
          {
            "$value": 165,
            "$name": "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"
          },
          {
            "$value": 166,
            "$name": "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"
          },
          {
            "$value": 167,
            "$name": "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"
          },
          {
            "$value": 168,
            "$name": "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"
          },
          {
            "$value": 169,
            "$name": "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"
          },
          {
            "$value": 170,
            "$name": "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"
          },
          {
            "$value": 171,
            "$name": "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"
          },
          {
            "$value": 172,
            "$name": "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"
          },
          {
            "$value": 173,
            "$name": "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"
          },
          {
            "$value": 174,
            "$name": "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"
          },
          {
            "$value": 175,
            "$name": "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"
          },
          {
            "$value": 176,
            "$name": "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"
          },
          {
            "$value": 177,
            "$name": "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"
          },
          {
            "$value": 178,
            "$name": "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"
          },
          {
            "$value": 179,
            "$name": "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"
          },
          {
            "$value": 180,
            "$name": "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"
          },
          {
            "$value": 181,
            "$name": "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"
          },
          {
            "$value": 182,
            "$name": "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"
          },
          {
            "$value": 183,
            "$name": "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"
          },
          {
            "$value": 184,
            "$name": "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"
          }
        ],
        "$name": "VkFormat",
        "$type": "enum",
        "$comment": "Vulkan format definitions"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_STRUCTURE_TYPE_APPLICATION_INFO"
          },
          {
            "$value": 1,
            "$name": "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"
          },
          {
            "$value": 2,
            "$name": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"
          },
          {
            "$value": 3,
            "$name": "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"
          },
          {
            "$value": 4,
            "$name": "VK_STRUCTURE_TYPE_SUBMIT_INFO"
          },
          {
            "$value": 5,
            "$name": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"
          },
          {
            "$value": 6,
            "$name": "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"
          },
          {
            "$value": 7,
            "$name": "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"
          },
          {
            "$value": 8,
            "$name": "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"
          },
          {
            "$value": 9,
            "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"
          },
          {
            "$value": 10,
            "$name": "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"
          },
          {
            "$value": 11,
            "$name": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"
          },
          {
            "$value": 12,
            "$name": "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"
          },
          {
            "$value": 13,
            "$name": "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"
          },
          {
            "$value": 14,
            "$name": "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"
          },
          {
            "$value": 15,
            "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"
          },
          {
            "$value": 16,
            "$name": "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"
          },
          {
            "$value": 17,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"
          },
          {
            "$value": 18,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"
          },
          {
            "$value": 19,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"
          },
          {
            "$value": 20,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"
          },
          {
            "$value": 21,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"
          },
          {
            "$value": 22,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"
          },
          {
            "$value": 23,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"
          },
          {
            "$value": 24,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"
          },
          {
            "$value": 25,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"
          },
          {
            "$value": 26,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"
          },
          {
            "$value": 27,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"
          },
          {
            "$value": 28,
            "$name": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"
          },
          {
            "$value": 29,
            "$name": "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"
          },
          {
            "$value": 30,
            "$name": "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"
          },
          {
            "$value": 31,
            "$name": "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"
          },
          {
            "$value": 32,
            "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"
          },
          {
            "$value": 33,
            "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"
          },
          {
            "$value": 34,
            "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"
          },
          {
            "$value": 35,
            "$name": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"
          },
          {
            "$value": 36,
            "$name": "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"
          },
          {
            "$value": 37,
            "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"
          },
          {
            "$value": 38,
            "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"
          },
          {
            "$value": 39,
            "$name": "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"
          },
          {
            "$value": 40,
            "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"
          },
          {
            "$value": 41,
            "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"
          },
          {
            "$value": 42,
            "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"
          },
          {
            "$value": 43,
            "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"
          },
          {
            "$value": 44,
            "$name": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"
          },
          {
            "$value": 45,
            "$name": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"
          },
          {
            "$value": 46,
            "$name": "VK_STRUCTURE_TYPE_MEMORY_BARRIER"
          },
          {
            "$value": 47,
            "$name": "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO",
            "$comment": "Reserved for internal use by the loader, layers, and ICDs"
          },
          {
            "$value": 48,
            "$name": "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO",
            "$comment": "Reserved for internal use by the loader, layers, and ICDs"
          }
        ],
        "$name": "VkStructureType",
        "$type": "enum",
        "$comment": "Structure type enumerant"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SUBPASS_CONTENTS_INLINE"
          },
          {
            "$value": 1,
            "$name": "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS"
          }
        ],
        "$name": "VkSubpassContents",
        "$type": "enum"
      },
      {
        "comment": [
          {
            "#text": "Return codes (positive values)"
          },
          {
            "#text": "Error codes (negative values)"
          }
        ],
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SUCCESS",
            "$comment": "Command completed successfully"
          },
          {
            "$value": 1,
            "$name": "VK_NOT_READY",
            "$comment": "A fence or query has not yet completed"
          },
          {
            "$value": 2,
            "$name": "VK_TIMEOUT",
            "$comment": "A wait operation has not completed in the specified time"
          },
          {
            "$value": 3,
            "$name": "VK_EVENT_SET",
            "$comment": "An event is signaled"
          },
          {
            "$value": 4,
            "$name": "VK_EVENT_RESET",
            "$comment": "An event is unsignaled"
          },
          {
            "$value": 5,
            "$name": "VK_INCOMPLETE",
            "$comment": "A return array was too small for the result"
          },
          {
            "$value": -1,
            "$name": "VK_ERROR_OUT_OF_HOST_MEMORY",
            "$comment": "A host memory allocation has failed"
          },
          {
            "$value": -2,
            "$name": "VK_ERROR_OUT_OF_DEVICE_MEMORY",
            "$comment": "A device memory allocation has failed"
          },
          {
            "$value": -3,
            "$name": "VK_ERROR_INITIALIZATION_FAILED",
            "$comment": "Initialization of an object has failed"
          },
          {
            "$value": -4,
            "$name": "VK_ERROR_DEVICE_LOST",
            "$comment": "The logical device has been lost. See <<devsandqueues-lost-device>>"
          },
          {
            "$value": -5,
            "$name": "VK_ERROR_MEMORY_MAP_FAILED",
            "$comment": "Mapping of a memory object has failed"
          },
          {
            "$value": -6,
            "$name": "VK_ERROR_LAYER_NOT_PRESENT",
            "$comment": "Layer specified does not exist"
          },
          {
            "$value": -7,
            "$name": "VK_ERROR_EXTENSION_NOT_PRESENT",
            "$comment": "Extension specified does not exist"
          },
          {
            "$value": -8,
            "$name": "VK_ERROR_FEATURE_NOT_PRESENT",
            "$comment": "Requested feature is not available on this device"
          },
          {
            "$value": -9,
            "$name": "VK_ERROR_INCOMPATIBLE_DRIVER",
            "$comment": "Unable to find a Vulkan driver"
          },
          {
            "$value": -10,
            "$name": "VK_ERROR_TOO_MANY_OBJECTS",
            "$comment": "Too many objects of the type have already been created"
          },
          {
            "$value": -11,
            "$name": "VK_ERROR_FORMAT_NOT_SUPPORTED",
            "$comment": "Requested format is not supported on this device"
          },
          {
            "$value": -12,
            "$name": "VK_ERROR_FRAGMENTED_POOL",
            "$comment": "A requested pool allocation has failed due to fragmentation of the pool's memory"
          },
          {
            "$value": -13,
            "$name": "VK_ERROR_UNKNOWN",
            "$comment": "An unknown error has occurred, due to an implementation or application bug"
          }
        ],
        "unused": {
          "$start": -14,
          "$comment": "This is the next unused available error code (negative value)"
        },
        "$name": "VkResult",
        "$type": "enum",
        "$comment": "API result codes"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DYNAMIC_STATE_VIEWPORT"
          },
          {
            "$value": 1,
            "$name": "VK_DYNAMIC_STATE_SCISSOR"
          },
          {
            "$value": 2,
            "$name": "VK_DYNAMIC_STATE_LINE_WIDTH"
          },
          {
            "$value": 3,
            "$name": "VK_DYNAMIC_STATE_DEPTH_BIAS"
          },
          {
            "$value": 4,
            "$name": "VK_DYNAMIC_STATE_BLEND_CONSTANTS"
          },
          {
            "$value": 5,
            "$name": "VK_DYNAMIC_STATE_DEPTH_BOUNDS"
          },
          {
            "$value": 6,
            "$name": "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK"
          },
          {
            "$value": 7,
            "$name": "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK"
          },
          {
            "$value": 8,
            "$name": "VK_DYNAMIC_STATE_STENCIL_REFERENCE"
          }
        ],
        "$name": "VkDynamicState",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET",
          "$comment": "Create descriptor update template for descriptor set updates"
        },
        "$name": "VkDescriptorUpdateTemplateType",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_OBJECT_TYPE_UNKNOWN"
          },
          {
            "$value": 1,
            "$name": "VK_OBJECT_TYPE_INSTANCE"
          },
          {
            "$value": 2,
            "$name": "VK_OBJECT_TYPE_PHYSICAL_DEVICE"
          },
          {
            "$value": 3,
            "$name": "VK_OBJECT_TYPE_DEVICE"
          },
          {
            "$value": 4,
            "$name": "VK_OBJECT_TYPE_QUEUE"
          },
          {
            "$value": 5,
            "$name": "VK_OBJECT_TYPE_SEMAPHORE"
          },
          {
            "$value": 6,
            "$name": "VK_OBJECT_TYPE_COMMAND_BUFFER"
          },
          {
            "$value": 7,
            "$name": "VK_OBJECT_TYPE_FENCE"
          },
          {
            "$value": 8,
            "$name": "VK_OBJECT_TYPE_DEVICE_MEMORY"
          },
          {
            "$value": 9,
            "$name": "VK_OBJECT_TYPE_BUFFER"
          },
          {
            "$value": 10,
            "$name": "VK_OBJECT_TYPE_IMAGE"
          },
          {
            "$value": 11,
            "$name": "VK_OBJECT_TYPE_EVENT"
          },
          {
            "$value": 12,
            "$name": "VK_OBJECT_TYPE_QUERY_POOL"
          },
          {
            "$value": 13,
            "$name": "VK_OBJECT_TYPE_BUFFER_VIEW"
          },
          {
            "$value": 14,
            "$name": "VK_OBJECT_TYPE_IMAGE_VIEW"
          },
          {
            "$value": 15,
            "$name": "VK_OBJECT_TYPE_SHADER_MODULE"
          },
          {
            "$value": 16,
            "$name": "VK_OBJECT_TYPE_PIPELINE_CACHE"
          },
          {
            "$value": 17,
            "$name": "VK_OBJECT_TYPE_PIPELINE_LAYOUT"
          },
          {
            "$value": 18,
            "$name": "VK_OBJECT_TYPE_RENDER_PASS"
          },
          {
            "$value": 19,
            "$name": "VK_OBJECT_TYPE_PIPELINE"
          },
          {
            "$value": 20,
            "$name": "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT"
          },
          {
            "$value": 21,
            "$name": "VK_OBJECT_TYPE_SAMPLER"
          },
          {
            "$value": 22,
            "$name": "VK_OBJECT_TYPE_DESCRIPTOR_POOL"
          },
          {
            "$value": 23,
            "$name": "VK_OBJECT_TYPE_DESCRIPTOR_SET"
          },
          {
            "$value": 24,
            "$name": "VK_OBJECT_TYPE_FRAMEBUFFER"
          },
          {
            "$value": 25,
            "$name": "VK_OBJECT_TYPE_COMMAND_POOL"
          }
        ],
        "$name": "VkObjectType",
        "$type": "enum",
        "$comment": "Enums to track objects of various types - also see objtypeenum attributes on type tags"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV"
          },
          {
            "$value": 1,
            "$name": "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV"
          }
        ],
        "$name": "VkRayTracingInvocationReorderModeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_QUEUE_GRAPHICS_BIT",
            "$comment": "Queue supports graphics operations"
          },
          {
            "$bitpos": 1,
            "$name": "VK_QUEUE_COMPUTE_BIT",
            "$comment": "Queue supports compute operations"
          },
          {
            "$bitpos": 2,
            "$name": "VK_QUEUE_TRANSFER_BIT",
            "$comment": "Queue supports transfer operations"
          },
          {
            "$bitpos": 3,
            "$name": "VK_QUEUE_SPARSE_BINDING_BIT",
            "$comment": "Queue supports sparse resource memory management operations"
          }
        ],
        "$name": "VkQueueFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_CULL_MODE_NONE"
          },
          {
            "$bitpos": 0,
            "$name": "VK_CULL_MODE_FRONT_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_CULL_MODE_BACK_BIT"
          },
          {
            "$value": 3,
            "$name": "VK_CULL_MODE_FRONT_AND_BACK"
          }
        ],
        "$name": "VkCullModeFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkRenderPassCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkDeviceQueueCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT",
            "$comment": "If otherwise stated, then allocate memory on device"
          },
          {
            "$bitpos": 1,
            "$name": "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT",
            "$comment": "Memory is mappable by host"
          },
          {
            "$bitpos": 2,
            "$name": "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT",
            "$comment": "Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache"
          },
          {
            "$bitpos": 3,
            "$name": "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",
            "$comment": "Memory will be cached by the host"
          },
          {
            "$bitpos": 4,
            "$name": "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT",
            "$comment": "Memory may be allocated by the driver when it is required"
          }
        ],
        "$name": "VkMemoryPropertyFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT",
          "$comment": "If set, heap represents device memory"
        },
        "$name": "VkMemoryHeapFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
            "$comment": "Controls coherency of indirect command reads"
          },
          {
            "$bitpos": 1,
            "$name": "VK_ACCESS_INDEX_READ_BIT",
            "$comment": "Controls coherency of index reads"
          },
          {
            "$bitpos": 2,
            "$name": "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
            "$comment": "Controls coherency of vertex attribute reads"
          },
          {
            "$bitpos": 3,
            "$name": "VK_ACCESS_UNIFORM_READ_BIT",
            "$comment": "Controls coherency of uniform buffer reads"
          },
          {
            "$bitpos": 4,
            "$name": "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
            "$comment": "Controls coherency of input attachment reads"
          },
          {
            "$bitpos": 5,
            "$name": "VK_ACCESS_SHADER_READ_BIT",
            "$comment": "Controls coherency of shader reads"
          },
          {
            "$bitpos": 6,
            "$name": "VK_ACCESS_SHADER_WRITE_BIT",
            "$comment": "Controls coherency of shader writes"
          },
          {
            "$bitpos": 7,
            "$name": "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
            "$comment": "Controls coherency of color attachment reads"
          },
          {
            "$bitpos": 8,
            "$name": "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
            "$comment": "Controls coherency of color attachment writes"
          },
          {
            "$bitpos": 9,
            "$name": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
            "$comment": "Controls coherency of depth/stencil attachment reads"
          },
          {
            "$bitpos": 10,
            "$name": "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
            "$comment": "Controls coherency of depth/stencil attachment writes"
          },
          {
            "$bitpos": 11,
            "$name": "VK_ACCESS_TRANSFER_READ_BIT",
            "$comment": "Controls coherency of transfer reads"
          },
          {
            "$bitpos": 12,
            "$name": "VK_ACCESS_TRANSFER_WRITE_BIT",
            "$comment": "Controls coherency of transfer writes"
          },
          {
            "$bitpos": 13,
            "$name": "VK_ACCESS_HOST_READ_BIT",
            "$comment": "Controls coherency of host reads"
          },
          {
            "$bitpos": 14,
            "$name": "VK_ACCESS_HOST_WRITE_BIT",
            "$comment": "Controls coherency of host writes"
          },
          {
            "$bitpos": 15,
            "$name": "VK_ACCESS_MEMORY_READ_BIT",
            "$comment": "Controls coherency of memory reads"
          },
          {
            "$bitpos": 16,
            "$name": "VK_ACCESS_MEMORY_WRITE_BIT",
            "$comment": "Controls coherency of memory writes"
          }
        ],
        "$name": "VkAccessFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",
            "$comment": "Can be used as a source of transfer operations"
          },
          {
            "$bitpos": 1,
            "$name": "VK_BUFFER_USAGE_TRANSFER_DST_BIT",
            "$comment": "Can be used as a destination of transfer operations"
          },
          {
            "$bitpos": 2,
            "$name": "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",
            "$comment": "Can be used as TBO"
          },
          {
            "$bitpos": 3,
            "$name": "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",
            "$comment": "Can be used as IBO"
          },
          {
            "$bitpos": 4,
            "$name": "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",
            "$comment": "Can be used as UBO"
          },
          {
            "$bitpos": 5,
            "$name": "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
            "$comment": "Can be used as SSBO"
          },
          {
            "$bitpos": 6,
            "$name": "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
            "$comment": "Can be used as source of fixed-function index fetch (index buffer)"
          },
          {
            "$bitpos": 7,
            "$name": "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
            "$comment": "Can be used as source of fixed-function vertex fetch (VBO)"
          },
          {
            "$bitpos": 8,
            "$name": "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT",
            "$comment": "Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)"
          }
        ],
        "$name": "VkBufferUsageFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_BUFFER_CREATE_SPARSE_BINDING_BIT",
            "$comment": "Buffer should support sparse backing"
          },
          {
            "$bitpos": 1,
            "$name": "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT",
            "$comment": "Buffer should support sparse backing with partial residency"
          },
          {
            "$bitpos": 2,
            "$name": "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT",
            "$comment": "Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers"
          }
        ],
        "$name": "VkBufferCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SHADER_STAGE_VERTEX_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_SHADER_STAGE_GEOMETRY_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_SHADER_STAGE_FRAGMENT_BIT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_SHADER_STAGE_COMPUTE_BIT"
          },
          {
            "$value": 31,
            "$name": "VK_SHADER_STAGE_ALL_GRAPHICS"
          },
          {
            "$value": 2147483647,
            "$name": "VK_SHADER_STAGE_ALL"
          }
        ],
        "$name": "VkShaderStageFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_USAGE_TRANSFER_SRC_BIT",
            "$comment": "Can be used as a source of transfer operations"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_USAGE_TRANSFER_DST_BIT",
            "$comment": "Can be used as a destination of transfer operations"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_USAGE_SAMPLED_BIT",
            "$comment": "Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"
          },
          {
            "$bitpos": 3,
            "$name": "VK_IMAGE_USAGE_STORAGE_BIT",
            "$comment": "Can be used as storage image (STORAGE_IMAGE descriptor type)"
          },
          {
            "$bitpos": 4,
            "$name": "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT",
            "$comment": "Can be used as framebuffer color attachment"
          },
          {
            "$bitpos": 5,
            "$name": "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT",
            "$comment": "Can be used as framebuffer depth/stencil attachment"
          },
          {
            "$bitpos": 6,
            "$name": "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT",
            "$comment": "Image data not needed outside of rendering"
          },
          {
            "$bitpos": 7,
            "$name": "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT",
            "$comment": "Can be used as framebuffer input attachment"
          }
        ],
        "$name": "VkImageUsageFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_CREATE_SPARSE_BINDING_BIT",
            "$comment": "Image should support sparse backing"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT",
            "$comment": "Image should support sparse backing with partial residency"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT",
            "$comment": "Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images"
          },
          {
            "$bitpos": 3,
            "$name": "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT",
            "$comment": "Allows image views to have different format than the base image"
          },
          {
            "$bitpos": 4,
            "$name": "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT",
            "$comment": "Allows creating image views with cube type from the created image"
          }
        ],
        "$name": "VkImageCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkImageViewCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkSamplerCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_PIPELINE_CREATE_DERIVATIVE_BIT"
          }
        ],
        "$name": "VkPipelineCreateFlagBits",
        "$type": "bitmask",
        "$comment": "Note that the gap at bitpos 10 is unused, and can be reserved"
      },
      {
        "$name": "VkPipelineShaderStageCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_COLOR_COMPONENT_R_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_COLOR_COMPONENT_G_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_COLOR_COMPONENT_B_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_COLOR_COMPONENT_A_BIT"
          }
        ],
        "$name": "VkColorComponentFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_FENCE_CREATE_SIGNALED_BIT"
        },
        "$name": "VkFenceCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkSemaphoreCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT",
            "$comment": "Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)"
          },
          {
            "$bitpos": 1,
            "$name": "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT",
            "$comment": "Format can be used for storage images (STORAGE_IMAGE descriptor type)"
          },
          {
            "$bitpos": 2,
            "$name": "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT",
            "$comment": "Format supports atomic operations in case it is used for storage images"
          },
          {
            "$bitpos": 3,
            "$name": "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT",
            "$comment": "Format can be used for uniform texel buffers (TBOs)"
          },
          {
            "$bitpos": 4,
            "$name": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT",
            "$comment": "Format can be used for storage texel buffers (IBOs)"
          },
          {
            "$bitpos": 5,
            "$name": "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT",
            "$comment": "Format supports atomic operations in case it is used for storage texel buffers"
          },
          {
            "$bitpos": 6,
            "$name": "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT",
            "$comment": "Format can be used for vertex buffers (VBOs)"
          },
          {
            "$bitpos": 7,
            "$name": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT",
            "$comment": "Format can be used for color attachment images"
          },
          {
            "$bitpos": 8,
            "$name": "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT",
            "$comment": "Format supports blending in case it is used for color attachment images"
          },
          {
            "$bitpos": 9,
            "$name": "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT",
            "$comment": "Format can be used for depth/stencil attachment images"
          },
          {
            "$bitpos": 10,
            "$name": "VK_FORMAT_FEATURE_BLIT_SRC_BIT",
            "$comment": "Format can be used as the source image of blits with vkCmdBlitImage"
          },
          {
            "$bitpos": 11,
            "$name": "VK_FORMAT_FEATURE_BLIT_DST_BIT",
            "$comment": "Format can be used as the destination image of blits with vkCmdBlitImage"
          },
          {
            "$bitpos": 12,
            "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT",
            "$comment": "Format can be filtered with VK_FILTER_LINEAR when being sampled"
          }
        ],
        "$name": "VkFormatFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_QUERY_CONTROL_PRECISE_BIT",
          "$comment": "Require precise results to be collected by the query"
        },
        "$name": "VkQueryControlFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_QUERY_RESULT_64_BIT",
            "$comment": "Results of the queries are written to the destination buffer as 64-bit values"
          },
          {
            "$bitpos": 1,
            "$name": "VK_QUERY_RESULT_WAIT_BIT",
            "$comment": "Results of the queries are waited on before proceeding with the result copy"
          },
          {
            "$bitpos": 2,
            "$name": "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT",
            "$comment": "Besides the results of the query, the availability of the results is also written"
          },
          {
            "$bitpos": 3,
            "$name": "VK_QUERY_RESULT_PARTIAL_BIT",
            "$comment": "Copy the partial results of the query even if the final results are not available"
          }
        ],
        "$name": "VkQueryResultFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT",
            "$comment": "Command buffer may be submitted/executed more than once simultaneously"
          }
        ],
        "$name": "VkCommandBufferUsageFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 1,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 2,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 3,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 4,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 5,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 6,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 7,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 8,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 9,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT",
            "$comment": "Optional"
          },
          {
            "$bitpos": 10,
            "$name": "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT",
            "$comment": "Optional"
          }
        ],
        "$name": "VkQueryPipelineStatisticFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_ASPECT_COLOR_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_ASPECT_DEPTH_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_ASPECT_STENCIL_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_IMAGE_ASPECT_METADATA_BIT"
          }
        ],
        "$name": "VkImageAspectFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT",
            "$comment": "Image uses a single mip tail region for all array layers"
          },
          {
            "$bitpos": 1,
            "$name": "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT",
            "$comment": "Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels."
          },
          {
            "$bitpos": 2,
            "$name": "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT",
            "$comment": "Image uses a non-standard sparse image block dimensions"
          }
        ],
        "$name": "VkSparseImageFormatFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_SPARSE_MEMORY_BIND_METADATA_BIT",
          "$comment": "Operation binds resource metadata to memory"
        },
        "$name": "VkSparseMemoryBindFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
            "$comment": "Before subsequent commands are processed"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
            "$comment": "Draw/DispatchIndirect command fetch"
          },
          {
            "$bitpos": 2,
            "$name": "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
            "$comment": "Vertex/index fetch"
          },
          {
            "$bitpos": 3,
            "$name": "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
            "$comment": "Vertex shading"
          },
          {
            "$bitpos": 4,
            "$name": "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
            "$comment": "Tessellation control shading"
          },
          {
            "$bitpos": 5,
            "$name": "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
            "$comment": "Tessellation evaluation shading"
          },
          {
            "$bitpos": 6,
            "$name": "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
            "$comment": "Geometry shading"
          },
          {
            "$bitpos": 7,
            "$name": "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
            "$comment": "Fragment shading"
          },
          {
            "$bitpos": 8,
            "$name": "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
            "$comment": "Early fragment (depth and stencil) tests"
          },
          {
            "$bitpos": 9,
            "$name": "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
            "$comment": "Late fragment (depth and stencil) tests"
          },
          {
            "$bitpos": 10,
            "$name": "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
            "$comment": "Color attachment writes"
          },
          {
            "$bitpos": 11,
            "$name": "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
            "$comment": "Compute shading"
          },
          {
            "$bitpos": 12,
            "$name": "VK_PIPELINE_STAGE_TRANSFER_BIT",
            "$comment": "Transfer/copy operations"
          },
          {
            "$bitpos": 13,
            "$name": "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
            "$comment": "After previous commands have completed"
          },
          {
            "$bitpos": 14,
            "$name": "VK_PIPELINE_STAGE_HOST_BIT",
            "$comment": "Indicates host (CPU) is a source/sink of the dependency"
          },
          {
            "$bitpos": 15,
            "$name": "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
            "$comment": "All stages of the graphics pipeline"
          },
          {
            "$bitpos": 16,
            "$name": "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
            "$comment": "All stages supported on the queue"
          }
        ],
        "$name": "VkPipelineStageFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT",
            "$comment": "Command buffers have a short lifetime"
          },
          {
            "$bitpos": 1,
            "$name": "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT",
            "$comment": "Command buffers may release their memory individually"
          }
        ],
        "$name": "VkCommandPoolCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT",
          "$comment": "Release resources owned by the pool"
        },
        "$name": "VkCommandPoolResetFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT",
          "$comment": "Release resources owned by the buffer"
        },
        "$name": "VkCommandBufferResetFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SAMPLE_COUNT_1_BIT",
            "$comment": "Sample count 1 supported"
          },
          {
            "$bitpos": 1,
            "$name": "VK_SAMPLE_COUNT_2_BIT",
            "$comment": "Sample count 2 supported"
          },
          {
            "$bitpos": 2,
            "$name": "VK_SAMPLE_COUNT_4_BIT",
            "$comment": "Sample count 4 supported"
          },
          {
            "$bitpos": 3,
            "$name": "VK_SAMPLE_COUNT_8_BIT",
            "$comment": "Sample count 8 supported"
          },
          {
            "$bitpos": 4,
            "$name": "VK_SAMPLE_COUNT_16_BIT",
            "$comment": "Sample count 16 supported"
          },
          {
            "$bitpos": 5,
            "$name": "VK_SAMPLE_COUNT_32_BIT",
            "$comment": "Sample count 32 supported"
          },
          {
            "$bitpos": 6,
            "$name": "VK_SAMPLE_COUNT_64_BIT",
            "$comment": "Sample count 64 supported"
          }
        ],
        "$name": "VkSampleCountFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT",
          "$comment": "The attachment may alias physical memory of another attachment in the same render pass"
        },
        "$name": "VkAttachmentDescriptionFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_STENCIL_FACE_FRONT_BIT",
            "$comment": "Front face"
          },
          {
            "$bitpos": 1,
            "$name": "VK_STENCIL_FACE_BACK_BIT",
            "$comment": "Back face"
          },
          {
            "$value": 3,
            "$name": "VK_STENCIL_FACE_FRONT_AND_BACK",
            "$comment": "Front and back faces"
          },
          {
            "$name": "VK_STENCIL_FRONT_AND_BACK",
            "$alias": "VK_STENCIL_FACE_FRONT_AND_BACK",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "$name": "VkStencilFaceFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT",
          "$comment": "Descriptor sets may be freed individually"
        },
        "$name": "VkDescriptorPoolCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_DEPENDENCY_BY_REGION_BIT",
          "$comment": "Dependency is per pixel region"
        },
        "$name": "VkDependencyFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SEMAPHORE_TYPE_BINARY"
          },
          {
            "$value": 1,
            "$name": "VK_SEMAPHORE_TYPE_TIMELINE"
          }
        ],
        "$name": "VkSemaphoreType",
        "$type": "enum"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_SEMAPHORE_WAIT_ANY_BIT"
        },
        "$name": "VkSemaphoreWaitFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PRESENT_MODE_IMMEDIATE_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_PRESENT_MODE_MAILBOX_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_PRESENT_MODE_FIFO_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_PRESENT_MODE_FIFO_RELAXED_KHR"
          }
        ],
        "$name": "VkPresentModeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR"
          },
          {
            "$name": "VK_COLORSPACE_SRGB_NONLINEAR_KHR",
            "$alias": "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "$name": "VkColorSpaceKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR"
          }
        ],
        "$name": "VkDisplayPlaneAlphaFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"
          }
        ],
        "$name": "VkCompositeAlphaFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR"
          },
          {
            "$bitpos": 4,
            "$name": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR"
          },
          {
            "$bitpos": 5,
            "$name": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR"
          },
          {
            "$bitpos": 6,
            "$name": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR"
          },
          {
            "$bitpos": 7,
            "$name": "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR"
          },
          {
            "$bitpos": 8,
            "$name": "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR"
          }
        ],
        "$name": "VkSurfaceTransformFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID"
        },
        "$name": "VkSwapchainImageUsageFlagBitsANDROID",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_TIME_DOMAIN_DEVICE_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT"
          }
        ],
        "$name": "VkTimeDomainEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DEBUG_REPORT_INFORMATION_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DEBUG_REPORT_WARNING_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_DEBUG_REPORT_ERROR_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_DEBUG_REPORT_DEBUG_BIT_EXT"
          }
        ],
        "$name": "VkDebugReportFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT"
          },
          {
            "$value": 5,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT"
          },
          {
            "$value": 6,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT"
          },
          {
            "$value": 7,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT"
          },
          {
            "$value": 8,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT"
          },
          {
            "$value": 9,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT"
          },
          {
            "$value": 10,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT"
          },
          {
            "$value": 11,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT"
          },
          {
            "$value": 12,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT"
          },
          {
            "$value": 13,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT"
          },
          {
            "$value": 14,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT"
          },
          {
            "$value": 15,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT"
          },
          {
            "$value": 16,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT"
          },
          {
            "$value": 17,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT"
          },
          {
            "$value": 18,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT"
          },
          {
            "$value": 19,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT"
          },
          {
            "$value": 20,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT"
          },
          {
            "$value": 21,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT"
          },
          {
            "$value": 22,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT"
          },
          {
            "$value": 23,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT"
          },
          {
            "$value": 24,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT"
          },
          {
            "$value": 25,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT"
          },
          {
            "$value": 26,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT"
          },
          {
            "$value": 27,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT"
          },
          {
            "$value": 28,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT"
          },
          {
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT",
            "$alias": "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT",
            "$comment": "Backwards-compatible alias containing a typo"
          },
          {
            "$value": 29,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT"
          },
          {
            "$value": 30,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT"
          },
          {
            "$value": 33,
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT"
          },
          {
            "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT",
            "$alias": "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "comment": {
          "#text": "NVX_device_generated_commands formerly used these enum values, but that extension has been removed\n                value 31 / name VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT\n                value 32 / name VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT"
        },
        "$name": "VkDebugReportObjectTypeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT"
          }
        ],
        "$name": "VkDeviceMemoryReportEventTypeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_RASTERIZATION_ORDER_STRICT_AMD"
          },
          {
            "$value": 1,
            "$name": "VK_RASTERIZATION_ORDER_RELAXED_AMD"
          }
        ],
        "$name": "VkRasterizationOrderAMD",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV"
          },
          {
            "$bitpos": 3,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV"
          }
        ],
        "$name": "VkExternalMemoryHandleTypeFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV"
          }
        ],
        "$name": "VkExternalMemoryFeatureFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VALIDATION_CHECK_ALL_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_VALIDATION_CHECK_SHADERS_EXT"
          }
        ],
        "$name": "VkValidationCheckEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT"
          }
        ],
        "$name": "VkValidationFeatureEnableEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT"
          },
          {
            "$value": 5,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT"
          },
          {
            "$value": 6,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT"
          },
          {
            "$value": 7,
            "$name": "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT"
          }
        ],
        "$name": "VkValidationFeatureDisableEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SUBGROUP_FEATURE_BASIC_BIT",
            "$comment": "Basic subgroup operations"
          },
          {
            "$bitpos": 1,
            "$name": "VK_SUBGROUP_FEATURE_VOTE_BIT",
            "$comment": "Vote subgroup operations"
          },
          {
            "$bitpos": 2,
            "$name": "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT",
            "$comment": "Arithmetic subgroup operations"
          },
          {
            "$bitpos": 3,
            "$name": "VK_SUBGROUP_FEATURE_BALLOT_BIT",
            "$comment": "Ballot subgroup operations"
          },
          {
            "$bitpos": 4,
            "$name": "VK_SUBGROUP_FEATURE_SHUFFLE_BIT",
            "$comment": "Shuffle subgroup operations"
          },
          {
            "$bitpos": 5,
            "$name": "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT",
            "$comment": "Shuffle relative subgroup operations"
          },
          {
            "$bitpos": 6,
            "$name": "VK_SUBGROUP_FEATURE_CLUSTERED_BIT",
            "$comment": "Clustered subgroup operations"
          },
          {
            "$bitpos": 7,
            "$name": "VK_SUBGROUP_FEATURE_QUAD_BIT",
            "$comment": "Quad subgroup operations"
          }
        ],
        "$name": "VkSubgroupFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV"
          }
        ],
        "$name": "VkIndirectCommandsLayoutUsageFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV"
        },
        "$name": "VkIndirectStateFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV"
          },
          {
            "$value": 1,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV"
          },
          {
            "$value": 2,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV"
          },
          {
            "$value": 3,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV"
          },
          {
            "$value": 4,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV"
          },
          {
            "$value": 5,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV"
          },
          {
            "$value": 6,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV"
          },
          {
            "$value": 7,
            "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV"
          }
        ],
        "$name": "VkIndirectCommandsTokenTypeNV",
        "$type": "enum"
      },
      {
        "$name": "VkPrivateDataSlotCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkDescriptorSetLayoutCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT"
          }
        ],
        "$name": "VkExternalMemoryHandleTypeFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT"
          }
        ],
        "$name": "VkExternalMemoryFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"
          },
          {
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT",
            "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT"
          }
        ],
        "$name": "VkExternalSemaphoreHandleTypeFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT"
          }
        ],
        "$name": "VkExternalSemaphoreFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT"
        },
        "$name": "VkSemaphoreImportFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT"
          }
        ],
        "$name": "VkExternalFenceHandleTypeFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT"
          }
        ],
        "$name": "VkExternalFenceFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_FENCE_IMPORT_TEMPORARY_BIT"
        },
        "$name": "VkFenceImportFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SURFACE_COUNTER_VBLANK_BIT_EXT"
          },
          {
            "$name": "VK_SURFACE_COUNTER_VBLANK_EXT",
            "$alias": "VK_SURFACE_COUNTER_VBLANK_BIT_EXT",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "$name": "VkSurfaceCounterFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DISPLAY_POWER_STATE_OFF_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_DISPLAY_POWER_STATE_SUSPEND_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_DISPLAY_POWER_STATE_ON_EXT"
          }
        ],
        "$name": "VkDisplayPowerStateEXT",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT"
        },
        "$name": "VkDeviceEventTypeEXT",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT"
        },
        "$name": "VkDisplayEventTypeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT",
            "$comment": "Can read with vkCmdCopy commands"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT",
            "$comment": "Can write with vkCmdCopy commands"
          },
          {
            "$bitpos": 2,
            "$name": "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT",
            "$comment": "Can read with any access type/command"
          },
          {
            "$bitpos": 3,
            "$name": "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT",
            "$comment": "Can write with and access type/command"
          }
        ],
        "$name": "VkPeerMemoryFeatureFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",
          "$comment": "Force allocation on specific devices"
        },
        "$name": "VkMemoryAllocateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR",
            "$comment": "Present from local memory"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR",
            "$comment": "Present from remote memory"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR",
            "$comment": "Present sum of local and/or remote memory"
          },
          {
            "$bitpos": 3,
            "$name": "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR",
            "$comment": "Each physical device presents from local memory"
          }
        ],
        "$name": "VkDeviceGroupPresentModeFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "$name": "VkSwapchainCreateFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV"
          },
          {
            "$value": 1,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV"
          },
          {
            "$value": 2,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV"
          },
          {
            "$value": 3,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV"
          },
          {
            "$value": 4,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV"
          },
          {
            "$value": 5,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV"
          },
          {
            "$value": 6,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV"
          },
          {
            "$value": 7,
            "$name": "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV"
          }
        ],
        "$name": "VkViewportCoordinateSwizzleNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT"
          }
        ],
        "$name": "VkDiscardRectangleModeEXT",
        "$type": "enum"
      },
      {
        "$name": "VkSubpassDescriptionFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES"
          },
          {
            "$value": 1,
            "$name": "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY"
          }
        ],
        "$name": "VkPointClippingBehavior",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE"
          },
          {
            "$value": 1,
            "$name": "VK_SAMPLER_REDUCTION_MODE_MIN"
          },
          {
            "$value": 2,
            "$name": "VK_SAMPLER_REDUCTION_MODE_MAX"
          }
        ],
        "$name": "VkSamplerReductionMode",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"
          },
          {
            "$value": 1,
            "$name": "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT"
          }
        ],
        "$name": "VkTessellationDomainOrigin",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"
          },
          {
            "$value": 1,
            "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY",
            "$comment": "just range expansion"
          },
          {
            "$value": 2,
            "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709",
            "$comment": "aka HD YUV"
          },
          {
            "$value": 3,
            "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601",
            "$comment": "aka SD YUV"
          },
          {
            "$value": 4,
            "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020",
            "$comment": "aka UHD YUV"
          }
        ],
        "$name": "VkSamplerYcbcrModelConversion",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SAMPLER_YCBCR_RANGE_ITU_FULL",
            "$comment": "Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)"
          },
          {
            "$value": 1,
            "$name": "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW",
            "$comment": "Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240"
          }
        ],
        "$name": "VkSamplerYcbcrRange",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_CHROMA_LOCATION_COSITED_EVEN"
          },
          {
            "$value": 1,
            "$name": "VK_CHROMA_LOCATION_MIDPOINT"
          }
        ],
        "$name": "VkChromaLocation",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_BLEND_OVERLAP_UNCORRELATED_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_BLEND_OVERLAP_DISJOINT_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_BLEND_OVERLAP_CONJOINT_EXT"
          }
        ],
        "$name": "VkBlendOverlapEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COVERAGE_MODULATION_MODE_NONE_NV"
          },
          {
            "$value": 1,
            "$name": "VK_COVERAGE_MODULATION_MODE_RGB_NV"
          },
          {
            "$value": 2,
            "$name": "VK_COVERAGE_MODULATION_MODE_ALPHA_NV"
          },
          {
            "$value": 3,
            "$name": "VK_COVERAGE_MODULATION_MODE_RGBA_NV"
          }
        ],
        "$name": "VkCoverageModulationModeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COVERAGE_REDUCTION_MODE_MERGE_NV"
          },
          {
            "$value": 1,
            "$name": "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV"
          }
        ],
        "$name": "VkCoverageReductionModeNV",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 1,
          "$name": "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT"
        },
        "$name": "VkValidationCacheHeaderVersionEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SHADER_INFO_TYPE_STATISTICS_AMD"
          },
          {
            "$value": 1,
            "$name": "VK_SHADER_INFO_TYPE_BINARY_AMD"
          },
          {
            "$value": 2,
            "$name": "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD"
          }
        ],
        "$name": "VkShaderInfoTypeAMD",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 128,
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR"
          },
          {
            "$value": 256,
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR"
          },
          {
            "$value": 512,
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR"
          },
          {
            "$value": 1024,
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR"
          },
          {
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT",
            "$alias": "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR"
          },
          {
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT",
            "$alias": "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR"
          },
          {
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT",
            "$alias": "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR"
          },
          {
            "$name": "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT",
            "$alias": "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR"
          }
        ],
        "$name": "VkQueueGlobalPriorityKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT"
          }
        ],
        "$name": "VkDebugUtilsMessageSeverityFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT"
          }
        ],
        "$name": "VkDebugUtilsMessageTypeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT"
          }
        ],
        "$name": "VkConservativeRasterizationModeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT"
          }
        ],
        "$name": "VkDescriptorBindingFlagBits",
        "$type": "bitmask"
      },
      {
        "comment": {
          "#text": "Vendor IDs are now represented as enums instead of the old\n                 <vendorids> tag, allowing them to be included in the\n                 API headers."
        },
        "enum": [
          {
            "$value": 65537,
            "$name": "VK_VENDOR_ID_VIV",
            "$comment": "Vivante vendor ID"
          },
          {
            "$value": 65538,
            "$name": "VK_VENDOR_ID_VSI",
            "$comment": "VeriSilicon vendor ID"
          },
          {
            "$value": 65539,
            "$name": "VK_VENDOR_ID_KAZAN",
            "$comment": "Kazan Software Renderer"
          },
          {
            "$value": 65540,
            "$name": "VK_VENDOR_ID_CODEPLAY",
            "$comment": "Codeplay Software Ltd. vendor ID"
          },
          {
            "$value": 65541,
            "$name": "VK_VENDOR_ID_MESA",
            "$comment": "Mesa vendor ID"
          },
          {
            "$value": 65542,
            "$name": "VK_VENDOR_ID_POCL",
            "$comment": "PoCL vendor ID"
          }
        ],
        "unused": {
          "$start": 65543,
          "$comment": "This is the next unused available Khronos vendor ID"
        },
        "$name": "VkVendorId",
        "$type": "enum"
      },
      {
        "comment": {
          "#text": "Driver IDs are now represented as enums instead of the old\n                 <driverids> tag, allowing them to be included in the\n                 API headers."
        },
        "enum": [
          {
            "$value": 1,
            "$name": "VK_DRIVER_ID_AMD_PROPRIETARY",
            "$comment": "Advanced Micro Devices, Inc."
          },
          {
            "$value": 2,
            "$name": "VK_DRIVER_ID_AMD_OPEN_SOURCE",
            "$comment": "Advanced Micro Devices, Inc."
          },
          {
            "$value": 3,
            "$name": "VK_DRIVER_ID_MESA_RADV",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 4,
            "$name": "VK_DRIVER_ID_NVIDIA_PROPRIETARY",
            "$comment": "NVIDIA Corporation"
          },
          {
            "$value": 5,
            "$name": "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS",
            "$comment": "Intel Corporation"
          },
          {
            "$value": 6,
            "$name": "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA",
            "$comment": "Intel Corporation"
          },
          {
            "$value": 7,
            "$name": "VK_DRIVER_ID_IMAGINATION_PROPRIETARY",
            "$comment": "Imagination Technologies"
          },
          {
            "$value": 8,
            "$name": "VK_DRIVER_ID_QUALCOMM_PROPRIETARY",
            "$comment": "Qualcomm Technologies, Inc."
          },
          {
            "$value": 9,
            "$name": "VK_DRIVER_ID_ARM_PROPRIETARY",
            "$comment": "Arm Limited"
          },
          {
            "$value": 10,
            "$name": "VK_DRIVER_ID_GOOGLE_SWIFTSHADER",
            "$comment": "Google LLC"
          },
          {
            "$value": 11,
            "$name": "VK_DRIVER_ID_GGP_PROPRIETARY",
            "$comment": "Google LLC"
          },
          {
            "$value": 12,
            "$name": "VK_DRIVER_ID_BROADCOM_PROPRIETARY",
            "$comment": "Broadcom Inc."
          },
          {
            "$value": 13,
            "$name": "VK_DRIVER_ID_MESA_LLVMPIPE",
            "$comment": "Mesa"
          },
          {
            "$value": 14,
            "$name": "VK_DRIVER_ID_MOLTENVK",
            "$comment": "MoltenVK"
          },
          {
            "$value": 15,
            "$name": "VK_DRIVER_ID_COREAVI_PROPRIETARY",
            "$comment": "Core Avionics & Industrial Inc."
          },
          {
            "$value": 16,
            "$name": "VK_DRIVER_ID_JUICE_PROPRIETARY",
            "$comment": "Juice Technologies, Inc."
          },
          {
            "$value": 17,
            "$name": "VK_DRIVER_ID_VERISILICON_PROPRIETARY",
            "$comment": "Verisilicon, Inc."
          },
          {
            "$value": 18,
            "$name": "VK_DRIVER_ID_MESA_TURNIP",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 19,
            "$name": "VK_DRIVER_ID_MESA_V3DV",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 20,
            "$name": "VK_DRIVER_ID_MESA_PANVK",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 21,
            "$name": "VK_DRIVER_ID_SAMSUNG_PROPRIETARY",
            "$comment": "Samsung Electronics Co., Ltd."
          },
          {
            "$value": 22,
            "$name": "VK_DRIVER_ID_MESA_VENUS",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 23,
            "$name": "VK_DRIVER_ID_MESA_DOZEN",
            "$comment": "Mesa open source project"
          },
          {
            "$value": 24,
            "$name": "VK_DRIVER_ID_MESA_NVK",
            "$comment": "Mesa open source project"
          }
        ],
        "$name": "VkDriverId",
        "$type": "enum"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT"
        },
        "$name": "VkConditionalRenderingFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_RESOLVE_MODE_NONE"
          },
          {
            "$bitpos": 0,
            "$name": "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_RESOLVE_MODE_AVERAGE_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_RESOLVE_MODE_MIN_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_RESOLVE_MODE_MAX_BIT"
          }
        ],
        "$name": "VkResolveModeFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV"
          },
          {
            "$value": 1,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 2,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 3,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 4,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 5,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV"
          },
          {
            "$value": 6,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV"
          },
          {
            "$value": 7,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV"
          },
          {
            "$value": 8,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV"
          },
          {
            "$value": 9,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV"
          },
          {
            "$value": 10,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV"
          },
          {
            "$value": 11,
            "$name": "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV"
          }
        ],
        "$name": "VkShadingRatePaletteEntryNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV"
          },
          {
            "$value": 1,
            "$name": "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV"
          },
          {
            "$value": 2,
            "$name": "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV"
          },
          {
            "$value": 3,
            "$name": "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV"
          }
        ],
        "$name": "VkCoarseSampleOrderTypeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR"
          },
          {
            "$name": "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR",
            "$alias": "VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR"
          }
        ],
        "$name": "VkGeometryInstanceFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_GEOMETRY_OPAQUE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR"
          }
        ],
        "$name": "VkGeometryFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR"
          },
          {
            "$bitpos": 4,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR"
          }
        ],
        "$name": "VkBuildAccelerationStructureFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR"
        },
        "$name": "VkAccelerationStructureCreateFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR"
          }
        ],
        "$name": "VkCopyAccelerationStructureModeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR"
          }
        ],
        "$name": "VkBuildAccelerationStructureModeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR"
          }
        ],
        "$name": "VkAccelerationStructureTypeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_GEOMETRY_TYPE_TRIANGLES_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_GEOMETRY_TYPE_AABBS_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_GEOMETRY_TYPE_INSTANCES_KHR"
          }
        ],
        "$name": "VkGeometryTypeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV"
          },
          {
            "$value": 1,
            "$name": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV"
          },
          {
            "$value": 2,
            "$name": "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV"
          }
        ],
        "$name": "VkAccelerationStructureMemoryRequirementsTypeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR"
          }
        ],
        "$name": "VkAccelerationStructureBuildTypeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR"
          }
        ],
        "$name": "VkRayTracingShaderGroupTypeKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR"
          }
        ],
        "$name": "VkAccelerationStructureCompatibilityKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SHADER_GROUP_SHADER_GENERAL_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR"
          }
        ],
        "$name": "VkShaderGroupShaderKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD"
          },
          {
            "$value": 1,
            "$name": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD"
          },
          {
            "$value": 2,
            "$name": "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD"
          }
        ],
        "$name": "VkMemoryOverallocationBehaviorAMD",
        "$type": "enum"
      },
      {
        "$name": "VkFramebufferCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 1,
            "$name": "VK_SCOPE_DEVICE_NV"
          },
          {
            "$value": 2,
            "$name": "VK_SCOPE_WORKGROUP_NV"
          },
          {
            "$value": 3,
            "$name": "VK_SCOPE_SUBGROUP_NV"
          },
          {
            "$value": 5,
            "$name": "VK_SCOPE_QUEUE_FAMILY_NV"
          }
        ],
        "$name": "VkScopeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COMPONENT_TYPE_FLOAT16_NV"
          },
          {
            "$value": 1,
            "$name": "VK_COMPONENT_TYPE_FLOAT32_NV"
          },
          {
            "$value": 2,
            "$name": "VK_COMPONENT_TYPE_FLOAT64_NV"
          },
          {
            "$value": 3,
            "$name": "VK_COMPONENT_TYPE_SINT8_NV"
          },
          {
            "$value": 4,
            "$name": "VK_COMPONENT_TYPE_SINT16_NV"
          },
          {
            "$value": 5,
            "$name": "VK_COMPONENT_TYPE_SINT32_NV"
          },
          {
            "$value": 6,
            "$name": "VK_COMPONENT_TYPE_SINT64_NV"
          },
          {
            "$value": 7,
            "$name": "VK_COMPONENT_TYPE_UINT8_NV"
          },
          {
            "$value": 8,
            "$name": "VK_COMPONENT_TYPE_UINT16_NV"
          },
          {
            "$value": 9,
            "$name": "VK_COMPONENT_TYPE_UINT32_NV"
          },
          {
            "$value": 10,
            "$name": "VK_COMPONENT_TYPE_UINT64_NV"
          }
        ],
        "$name": "VkComponentTypeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV"
          },
          {
            "$bitpos": 3,
            "$name": "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV"
          }
        ],
        "$name": "VkDeviceDiagnosticsConfigFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT"
          },
          {
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT",
            "$alias": "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT"
          },
          {
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT",
            "$alias": "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT"
          },
          {
            "$name": "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT",
            "$alias": "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT"
          }
        ],
        "$name": "VkPipelineCreationFeedbackFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT"
          }
        ],
        "$name": "VkFullScreenExclusiveEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR"
          },
          {
            "$name": "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR",
            "$alias": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          },
          {
            "$name": "VK_QUERY_SCOPE_RENDER_PASS_KHR",
            "$alias": "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          },
          {
            "$name": "VK_QUERY_SCOPE_COMMAND_KHR",
            "$alias": "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "$name": "VkPerformanceCounterScopeKHR",
        "$type": "enum"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV"
        },
        "$name": "VkMemoryDecompressionMethodFlagBitsNV",
        "$type": "bitmask",
        "$bitwidth": 64
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR"
          },
          {
            "$value": 4,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR"
          },
          {
            "$value": 5,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR"
          },
          {
            "$value": 6,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR"
          },
          {
            "$value": 7,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR"
          },
          {
            "$value": 8,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR"
          },
          {
            "$value": 9,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR"
          },
          {
            "$value": 10,
            "$name": "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR"
          }
        ],
        "$name": "VkPerformanceCounterUnitKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR"
          },
          {
            "$value": 4,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR"
          },
          {
            "$value": 5,
            "$name": "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR"
          }
        ],
        "$name": "VkPerformanceCounterStorageKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR"
          },
          {
            "$name": "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR",
            "$alias": "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR"
          },
          {
            "$name": "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR",
            "$alias": "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR",
            "$comment": "Backwards-compatible alias containing a typo"
          }
        ],
        "$name": "VkPerformanceCounterDescriptionFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "$name": "VkAcquireProfilingLockFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "$name": "VkShaderCorePropertiesFlagBitsAMD",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL"
        },
        "$name": "VkPerformanceConfigurationTypeINTEL",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL"
        },
        "$name": "VkQueryPoolSamplingModeINTEL",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL"
          }
        ],
        "$name": "VkPerformanceOverrideTypeINTEL",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL"
          }
        ],
        "$name": "VkPerformanceParameterTypeINTEL",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL"
          },
          {
            "$value": 1,
            "$name": "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL"
          },
          {
            "$value": 2,
            "$name": "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL"
          },
          {
            "$value": 3,
            "$name": "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL"
          },
          {
            "$value": 4,
            "$name": "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL"
          }
        ],
        "$name": "VkPerformanceValueTypeINTEL",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY"
          },
          {
            "$value": 1,
            "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL"
          },
          {
            "$value": 2,
            "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"
          }
        ],
        "$name": "VkShaderFloatControlsIndependence",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR"
          }
        ],
        "$name": "VkPipelineExecutableStatisticFormatKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT"
          }
        ],
        "$name": "VkLineRasterizationModeEXT",
        "$type": "enum"
      },
      {
        "$name": "VkShaderModuleCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkPipelineCompilerControlFlagBitsAMD",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_TOOL_PURPOSE_VALIDATION_BIT"
          },
          {
            "$name": "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT",
            "$alias": "VK_TOOL_PURPOSE_VALIDATION_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_TOOL_PURPOSE_PROFILING_BIT"
          },
          {
            "$name": "VK_TOOL_PURPOSE_PROFILING_BIT_EXT",
            "$alias": "VK_TOOL_PURPOSE_PROFILING_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_TOOL_PURPOSE_TRACING_BIT"
          },
          {
            "$name": "VK_TOOL_PURPOSE_TRACING_BIT_EXT",
            "$alias": "VK_TOOL_PURPOSE_TRACING_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT"
          },
          {
            "$name": "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT",
            "$alias": "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT"
          },
          {
            "$name": "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT",
            "$alias": "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT"
          }
        ],
        "$name": "VkToolPurposeFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR"
          },
          {
            "$value": 4,
            "$name": "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR"
          }
        ],
        "$name": "VkFragmentShadingRateCombinerOpKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV"
          },
          {
            "$value": 1,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV"
          },
          {
            "$value": 4,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV"
          },
          {
            "$value": 5,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV"
          },
          {
            "$value": 6,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV"
          },
          {
            "$value": 9,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV"
          },
          {
            "$value": 10,
            "$name": "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV"
          },
          {
            "$value": 11,
            "$name": "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 12,
            "$name": "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 13,
            "$name": "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 14,
            "$name": "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV"
          },
          {
            "$value": 15,
            "$name": "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV"
          }
        ],
        "$name": "VkFragmentShadingRateNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV"
          },
          {
            "$value": 1,
            "$name": "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV"
          }
        ],
        "$name": "VkFragmentShadingRateTypeNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_SUBPASS_MERGE_STATUS_MERGED_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT"
          },
          {
            "$value": 5,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT"
          },
          {
            "$value": 6,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT"
          },
          {
            "$value": 7,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT"
          },
          {
            "$value": 8,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT"
          },
          {
            "$value": 9,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT"
          },
          {
            "$value": 10,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT"
          },
          {
            "$value": 11,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT"
          },
          {
            "$value": 12,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT"
          },
          {
            "$value": 13,
            "$name": "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT"
          }
        ],
        "$name": "VkSubpassMergeStatusEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCESS_2_NONE"
          },
          {
            "$name": "VK_ACCESS_2_NONE_KHR",
            "$alias": "VK_ACCESS_2_NONE"
          },
          {
            "$bitpos": 0,
            "$name": "VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_ACCESS_2_INDEX_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_INDEX_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_INDEX_READ_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_ACCESS_2_UNIFORM_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_UNIFORM_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_UNIFORM_READ_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_ACCESS_2_SHADER_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_SHADER_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_SHADER_READ_BIT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_ACCESS_2_SHADER_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_SHADER_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_SHADER_WRITE_BIT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_ACCESS_2_TRANSFER_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_TRANSFER_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_TRANSFER_READ_BIT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_ACCESS_2_TRANSFER_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_TRANSFER_WRITE_BIT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_ACCESS_2_HOST_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_HOST_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_HOST_READ_BIT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_ACCESS_2_HOST_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_HOST_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_HOST_WRITE_BIT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_ACCESS_2_MEMORY_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_MEMORY_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_MEMORY_READ_BIT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_ACCESS_2_MEMORY_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_MEMORY_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_MEMORY_WRITE_BIT"
          },
          {
            "$bitpos": 32,
            "$name": "VK_ACCESS_2_SHADER_SAMPLED_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_SHADER_SAMPLED_READ_BIT"
          },
          {
            "$bitpos": 33,
            "$name": "VK_ACCESS_2_SHADER_STORAGE_READ_BIT"
          },
          {
            "$name": "VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR",
            "$alias": "VK_ACCESS_2_SHADER_STORAGE_READ_BIT"
          },
          {
            "$bitpos": 34,
            "$name": "VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT"
          },
          {
            "$name": "VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR",
            "$alias": "VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT"
          }
        ],
        "comment": {
          "#text": "bitpos 17-31 are specified by extensions to the original VkAccessFlagBits enum"
        },
        "$name": "VkAccessFlagBits2",
        "$type": "bitmask",
        "$bitwidth": 64
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PIPELINE_STAGE_2_NONE"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_NONE_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_NONE"
          },
          {
            "$bitpos": 0,
            "$name": "VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_TRANSFER_BIT",
            "$alias": "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_PIPELINE_STAGE_2_HOST_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_HOST_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_HOST_BIT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT"
          },
          {
            "$bitpos": 32,
            "$name": "VK_PIPELINE_STAGE_2_COPY_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_COPY_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_COPY_BIT"
          },
          {
            "$bitpos": 33,
            "$name": "VK_PIPELINE_STAGE_2_RESOLVE_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_RESOLVE_BIT"
          },
          {
            "$bitpos": 34,
            "$name": "VK_PIPELINE_STAGE_2_BLIT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_BLIT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_BLIT_BIT"
          },
          {
            "$bitpos": 35,
            "$name": "VK_PIPELINE_STAGE_2_CLEAR_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_CLEAR_BIT"
          },
          {
            "$bitpos": 36,
            "$name": "VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"
          },
          {
            "$bitpos": 37,
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT"
          },
          {
            "$bitpos": 38,
            "$name": "VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT"
          },
          {
            "$name": "VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR",
            "$alias": "VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT"
          }
        ],
        "comment": {
          "#text": "bitpos 17-31 are specified by extensions to the original VkPipelineStageFlagBits enum"
        },
        "$name": "VkPipelineStageFlagBits2",
        "$type": "bitmask",
        "$bitwidth": 64
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_SUBMIT_PROTECTED_BIT"
          },
          {
            "$name": "VK_SUBMIT_PROTECTED_BIT_KHR",
            "$alias": "VK_SUBMIT_PROTECTED_BIT"
          }
        ],
        "$name": "VkSubmitFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkEventCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkPipelineLayoutCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT"
          }
        ],
        "$name": "VkProvokingVertexModeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV"
          },
          {
            "$value": 1,
            "$name": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV"
          },
          {
            "$value": 2,
            "$name": "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV"
          }
        ],
        "$name": "VkAccelerationStructureMotionInstanceTypeNV",
        "$type": "enum"
      },
      {
        "$name": "VkPipelineColorBlendStateCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "$name": "VkPipelineDepthStencilStateCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT"
          }
        ],
        "$name": "VkGraphicsPipelineLibraryFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT"
        },
        "$name": "VkDeviceAddressBindingFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT"
          }
        ],
        "$name": "VkDeviceAddressBindingTypeEXT",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_VIDEO_CODEC_OPERATION_NONE_KHR"
        },
        "$name": "VkVideoCodecOperationFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR"
          }
        ],
        "$name": "VkVideoChromaSubsamplingFlagBitsKHR",
        "$type": "bitmask",
        "$comment": "Vulkan video chroma subsampling definitions"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR"
          },
          {
            "$bitpos": 4,
            "$name": "VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR"
          }
        ],
        "$name": "VkVideoComponentBitDepthFlagBitsKHR",
        "$type": "bitmask",
        "$comment": "Vulkan video component bit depth definitions"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR"
          }
        ],
        "$name": "VkVideoCapabilityFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR"
        },
        "$name": "VkVideoSessionCreateFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_EXT"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_EXT"
          }
        ],
        "$name": "VkVideoDecodeH264PictureLayoutFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR"
        },
        "$name": "VkVideoCodingControlFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": -1,
            "$name": "VK_QUERY_RESULT_STATUS_ERROR_KHR"
          },
          {
            "$value": 0,
            "$name": "VK_QUERY_RESULT_STATUS_NOT_READY_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_QUERY_RESULT_STATUS_COMPLETE_KHR"
          }
        ],
        "$name": "VkQueryResultStatusKHR",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_DECODE_USAGE_DEFAULT_KHR"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR"
          }
        ],
        "$name": "VkVideoDecodeUsageFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR"
          }
        ],
        "$name": "VkVideoDecodeCapabilityFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR"
          },
          {
            "$bitpos": 3,
            "$name": "VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR"
          }
        ],
        "$name": "VkVideoEncodeUsageFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR"
          },
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR"
          }
        ],
        "$name": "VkVideoEncodeContentFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR"
          },
          {
            "$value": 3,
            "$name": "VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR"
          },
          {
            "$value": 4,
            "$name": "VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR"
          }
        ],
        "$name": "VkVideoEncodeTuningModeKHR",
        "$type": "enum"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR"
        },
        "$name": "VkVideoEncodeCapabilityFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_NONE_BIT_KHR"
          },
          {
            "$value": 1,
            "$name": "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR"
          },
          {
            "$value": 2,
            "$name": "VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR"
          }
        ],
        "$name": "VkVideoEncodeRateControlModeFlagBitsKHR",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DIRECT_8X8_INFERENCE_DISABLED_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_SCALING_LISTS_BIT_EXT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_CHROMA_QP_OFFSET_BIT_EXT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_SECOND_CHROMA_QP_OFFSET_BIT_EXT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_PIC_INIT_QP_MINUS26_BIT_EXT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_BIT_EXT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_EXPLICIT_BIT_EXT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_BIPRED_IMPLICIT_BIT_EXT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_TRANSFORM_8X8_BIT_EXT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_CABAC_BIT_EXT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_CAVLC_BIT_EXT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_DISABLED_BIT_EXT"
          },
          {
            "$bitpos": 17,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 18,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DEBLOCKING_FILTER_PARTIAL_BIT_EXT"
          },
          {
            "$bitpos": 19,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DISABLE_DIRECT_SPATIAL_MV_PRED_BIT_EXT"
          },
          {
            "$bitpos": 20,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_MULTIPLE_SLICE_PER_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 21,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_SLICE_MB_COUNT_BIT_EXT"
          },
          {
            "$bitpos": 22,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT"
          },
          {
            "$bitpos": 23,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT"
          },
          {
            "$bitpos": 24,
            "$name": "VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH264CapabilityFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H264_INPUT_MODE_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H264_INPUT_MODE_SLICE_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H264_INPUT_MODE_NON_VCL_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH264InputModeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_SLICE_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H264_OUTPUT_MODE_NON_VCL_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH264OutputModeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT"
          }
        ],
        "$name": "VkVideoEncodeH264RateControlStructureEXT",
        "$type": "enum"
      },
      {
        "$name": "VkImageFormatConstraintsFlagBitsFUCHSIA",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA"
          },
          {
            "$bitpos": 3,
            "$name": "VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA"
          },
          {
            "$bitpos": 4,
            "$name": "VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA"
          }
        ],
        "$name": "VkImageConstraintsInfoFlagBitsFUCHSIA",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_FORMAT_FEATURE_2_BLIT_SRC_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_BLIT_SRC_BIT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_FORMAT_FEATURE_2_BLIT_DST_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_BLIT_DST_BIT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT"
          },
          {
            "$bitpos": 17,
            "$name": "VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT"
          },
          {
            "$bitpos": 18,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"
          },
          {
            "$bitpos": 19,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"
          },
          {
            "$bitpos": 20,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"
          },
          {
            "$bitpos": 21,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"
          },
          {
            "$bitpos": 22,
            "$name": "VK_FORMAT_FEATURE_2_DISJOINT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_DISJOINT_BIT"
          },
          {
            "$bitpos": 23,
            "$name": "VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT"
          },
          {
            "$bitpos": 31,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT"
          },
          {
            "$bitpos": 32,
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT"
          },
          {
            "$bitpos": 33,
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT"
          },
          {
            "$name": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR",
            "$alias": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT"
          }
        ],
        "$name": "VkFormatFeatureFlagBits2",
        "$type": "bitmask",
        "$bitwidth": 64
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT"
          },
          {
            "$name": "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR",
            "$alias": "VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_RENDERING_SUSPENDING_BIT"
          },
          {
            "$name": "VK_RENDERING_SUSPENDING_BIT_KHR",
            "$alias": "VK_RENDERING_SUSPENDING_BIT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_RENDERING_RESUMING_BIT"
          },
          {
            "$name": "VK_RENDERING_RESUMING_BIT_KHR",
            "$alias": "VK_RENDERING_RESUMING_BIT"
          }
        ],
        "$name": "VkRenderingFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SEPARATE_COLOUR_PLANE_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SCALING_LISTS_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SAMPLE_ADAPTIVE_OFFSET_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_PCM_ENABLE_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SPS_TEMPORAL_MVP_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_INIT_QP_MINUS26_BIT_EXT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SIGN_DATA_HIDING_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSFORM_SKIP_DISABLED_BIT_EXT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_BIT_EXT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_BIT_EXT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_BIPRED_BIT_EXT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_WEIGHTED_PRED_NO_TABLE_BIT_EXT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_TRANSQUANT_BYPASS_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_ENTROPY_CODING_SYNC_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 17,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_DEBLOCKING_FILTER_OVERRIDE_ENABLED_BIT_EXT"
          },
          {
            "$bitpos": 18,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 19,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_PER_TILE_BIT_EXT"
          },
          {
            "$bitpos": 20,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILE_PER_SLICE_BIT_EXT"
          },
          {
            "$bitpos": 21,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_SLICE_SEGMENT_CTB_COUNT_BIT_EXT"
          },
          {
            "$bitpos": 22,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT"
          },
          {
            "$bitpos": 23,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_DEPENDENT_SLICE_SEGMENT_BIT_EXT"
          },
          {
            "$bitpos": 24,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT"
          },
          {
            "$bitpos": 25,
            "$name": "VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265CapabilityFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H265_INPUT_MODE_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H265_INPUT_MODE_SLICE_SEGMENT_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H265_INPUT_MODE_NON_VCL_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265InputModeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_FRAME_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_SLICE_SEGMENT_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H265_OUTPUT_MODE_NON_VCL_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265OutputModeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265RateControlStructureEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265CtbSizeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT"
          }
        ],
        "$name": "VkVideoEncodeH265TransformBlockSizeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT"
          }
        ],
        "$name": "VkExportMetalObjectTypeFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "$name": "VkInstanceCreateFlagBits",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_COMPRESSION_DEFAULT_EXT"
          },
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_COMPRESSION_DISABLED_EXT"
          }
        ],
        "$name": "VkImageCompressionFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT"
          },
          {
            "$bitpos": 0,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT"
          },
          {
            "$bitpos": 3,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT"
          },
          {
            "$bitpos": 4,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT"
          },
          {
            "$bitpos": 5,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT"
          },
          {
            "$bitpos": 6,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT"
          },
          {
            "$bitpos": 7,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT"
          },
          {
            "$bitpos": 8,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT"
          },
          {
            "$bitpos": 9,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT"
          },
          {
            "$bitpos": 10,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT"
          },
          {
            "$bitpos": 11,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT"
          },
          {
            "$bitpos": 12,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT"
          },
          {
            "$bitpos": 13,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT"
          },
          {
            "$bitpos": 14,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT"
          },
          {
            "$bitpos": 15,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT"
          },
          {
            "$bitpos": 16,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT"
          },
          {
            "$bitpos": 17,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT"
          },
          {
            "$bitpos": 18,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT"
          },
          {
            "$bitpos": 19,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT"
          },
          {
            "$bitpos": 20,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT"
          },
          {
            "$bitpos": 21,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT"
          },
          {
            "$bitpos": 22,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT"
          },
          {
            "$bitpos": 23,
            "$name": "VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT"
          }
        ],
        "$name": "VkImageCompressionFixedRateFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT"
          }
        ],
        "$name": "VkPipelineRobustnessBufferBehaviorEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT"
          }
        ],
        "$name": "VkPipelineRobustnessImageBehaviorEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV"
          },
          {
            "$bitpos": 0,
            "$name": "VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV"
          },
          {
            "$bitpos": 3,
            "$name": "VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV"
          }
        ],
        "$name": "VkOpticalFlowGridSizeFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV"
          },
          {
            "$bitpos": 0,
            "$name": "VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV"
          },
          {
            "$bitpos": 3,
            "$name": "VK_OPTICAL_FLOW_USAGE_COST_BIT_NV"
          },
          {
            "$bitpos": 4,
            "$name": "VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV"
          }
        ],
        "$name": "VkOpticalFlowUsageFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV"
          },
          {
            "$value": 1,
            "$name": "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV"
          },
          {
            "$value": 2,
            "$name": "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV"
          },
          {
            "$value": 3,
            "$name": "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV"
          }
        ],
        "$name": "VkOpticalFlowPerformanceLevelNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV"
          },
          {
            "$value": 1,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV"
          },
          {
            "$value": 2,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV"
          },
          {
            "$value": 3,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV"
          },
          {
            "$value": 4,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV"
          },
          {
            "$value": 5,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV"
          },
          {
            "$value": 6,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV"
          },
          {
            "$value": 7,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV"
          },
          {
            "$value": 8,
            "$name": "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV"
          }
        ],
        "$name": "VkOpticalFlowSessionBindingPointNV",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV"
          },
          {
            "$bitpos": 1,
            "$name": "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV"
          },
          {
            "$bitpos": 2,
            "$name": "VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV"
          },
          {
            "$bitpos": 3,
            "$name": "VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV"
          },
          {
            "$bitpos": 4,
            "$name": "VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV"
          }
        ],
        "$name": "VkOpticalFlowSessionCreateFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV"
        },
        "$name": "VkOpticalFlowExecuteFlagBitsNV",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT"
        },
        "$name": "VkMicromapTypeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$bitpos": 0,
            "$name": "VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT"
          },
          {
            "$bitpos": 1,
            "$name": "VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT"
          },
          {
            "$bitpos": 2,
            "$name": "VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT"
          }
        ],
        "$name": "VkBuildMicromapFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": {
          "$bitpos": 0,
          "$name": "VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT"
        },
        "$name": "VkMicromapCreateFlagBitsEXT",
        "$type": "bitmask"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_COPY_MICROMAP_MODE_CLONE_EXT"
          },
          {
            "$value": 1,
            "$name": "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_COPY_MICROMAP_MODE_COMPACT_EXT"
          }
        ],
        "$name": "VkCopyMicromapModeEXT",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 0,
          "$name": "VK_BUILD_MICROMAP_MODE_BUILD_EXT"
        },
        "$name": "VkBuildMicromapModeEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 1,
            "$name": "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT"
          }
        ],
        "$name": "VkOpacityMicromapFormatEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": -1,
            "$name": "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT"
          },
          {
            "$value": -2,
            "$name": "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT"
          },
          {
            "$value": -3,
            "$name": "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT"
          },
          {
            "$value": -4,
            "$name": "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT"
          }
        ],
        "$name": "VkOpacityMicromapSpecialIndexEXT",
        "$type": "enum"
      },
      {
        "enum": [
          {
            "$value": 0,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT",
            "$comment": "Currently unused"
          },
          {
            "$value": 1,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT"
          },
          {
            "$value": 2,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT"
          },
          {
            "$value": 3,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT"
          },
          {
            "$value": 4,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT"
          },
          {
            "$value": 5,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT"
          },
          {
            "$value": 6,
            "$name": "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT"
          }
        ],
        "$name": "VkDeviceFaultAddressTypeEXT",
        "$type": "enum"
      },
      {
        "enum": {
          "$value": 1,
          "$name": "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT"
        },
        "$name": "VkDeviceFaultVendorBinaryHeaderVersionEXT",
        "$type": "enum"
      }
    ],
    "commands": {
      "command": [
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateInstance"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstanceCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "pInstance"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_LAYER_NOT_PRESENT,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INCOMPATIBLE_DRIVER"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyInstance"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "implicitexternsyncparams": {
            "param": {
              "#text": "all sname:VkPhysicalDevice objects enumerated from pname:instance"
            }
          }
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumeratePhysicalDevices"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPhysicalDeviceCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "pPhysicalDevices"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPhysicalDeviceCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "PFN_vkVoidFunction"
            },
            "name": {
              "#text": "vkGetDeviceProcAddr"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pName"
              },
              "#text": "const*",
              "$len": "null-terminated"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "PFN_vkVoidFunction"
            },
            "name": {
              "#text": "vkGetInstanceProcAddr"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pName"
              },
              "#text": "const*",
              "$len": "null-terminated"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceQueueFamilyProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkQueueFamilyProperties"
              },
              "name": {
                "#text": "pQueueFamilyProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pQueueFamilyPropertyCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceMemoryProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceMemoryProperties"
              },
              "name": {
                "#text": "pMemoryProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceFeatures"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceFeatures"
              },
              "name": {
                "#text": "pFeatures"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceFormatProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkFormatProperties"
              },
              "name": {
                "#text": "pFormatProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceImageFormatProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageFormatProperties"
              },
              "name": {
                "#text": "pImageFormatProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDevice"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDeviceCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "pDevice"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDevice"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "implicitexternsyncparams": {
            "param": {
              "#text": "all sname:VkQueue objects created from pname:device"
            }
          }
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumerateInstanceVersion"
            }
          },
          "param": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "pApiVersion"
            },
            "#text": "*"
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumerateInstanceLayerProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkLayerProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumerateInstanceExtensionProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pLayerName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkExtensionProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumerateDeviceLayerProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkLayerProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumerateDeviceExtensionProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pLayerName"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkExtensionProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_LAYER_NOT_PRESENT"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceQueue"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueIndex"
              }
            },
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "pQueue"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueSubmit"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "submitCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubmitInfo"
              },
              "name": {
                "#text": "pSubmits"
              },
              "#text": "const*",
              "$len": "submitCount"
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueWaitIdle"
            }
          },
          "param": {
            "type": {
              "#text": "VkQueue"
            },
            "name": {
              "#text": "queue"
            },
            "$externsync": true
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkDeviceWaitIdle"
            }
          },
          "param": {
            "type": {
              "#text": "VkDevice"
            },
            "name": {
              "#text": "device"
            }
          },
          "implicitexternsyncparams": {
            "param": {
              "#text": "all sname:VkQueue objects created from pname:device"
            }
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAllocateMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryAllocateInfo"
              },
              "name": {
                "#text": "pAllocateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "pMemory"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkFreeMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkMapMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "VkMemoryMapFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "ppData"
              },
              "#text": "**",
              "$optional": "false,true"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_MEMORY_MAP_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkUnmapMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              },
              "$externsync": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkFlushMappedMemoryRanges"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryRangeCount"
              }
            },
            {
              "type": {
                "#text": "VkMappedMemoryRange"
              },
              "name": {
                "#text": "pMemoryRanges"
              },
              "#text": "const*",
              "$len": "memoryRangeCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkInvalidateMappedMemoryRanges"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryRangeCount"
              }
            },
            {
              "type": {
                "#text": "VkMappedMemoryRange"
              },
              "name": {
                "#text": "pMemoryRanges"
              },
              "#text": "const*",
              "$len": "memoryRangeCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceMemoryCommitment"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pCommittedMemoryInBytes"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetBufferMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkMemoryRequirements"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindBufferMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkMemoryRequirements"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindImageMemory"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "memoryOffset"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageSparseMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSparseMemoryRequirementCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryRequirements"
              },
              "name": {
                "#text": "pSparseMemoryRequirements"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSparseMemoryRequirementCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSparseImageFormatProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSparseImageFormatProperties"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueBindSparse"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindInfoCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBindSparseInfo"
              },
              "name": {
                "#text": "pBindInfo"
              },
              "#text": "const*",
              "$len": "bindInfoCount"
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            }
          ],
          "$queues": "sparse_binding",
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateFence"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFenceCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "pFence"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyFence"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkResetFences"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fenceCount"
              }
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "pFences"
              },
              "#text": "const*",
              "$len": "fenceCount",
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetFenceStatus"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_NOT_READY",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkWaitForFences"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "fenceCount"
              }
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "pFences"
              },
              "#text": "const*",
              "$len": "fenceCount"
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "waitAll"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_TIMEOUT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateSemaphore"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pSemaphore"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroySemaphore"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkEventCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "pEvent"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetEventStatus"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              }
            }
          ],
          "$successcodes": "VK_EVENT_SET,VK_EVENT_RESET",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              },
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkResetEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              },
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateQueryPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkQueryPoolCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "pQueryPool"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyQueryPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetQueryPoolResults"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queryCount"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "VkQueryResultFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_NOT_READY",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkResetQueryPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queryCount"
              }
            }
          ]
        },
        {
          "$name": "vkResetQueryPoolEXT",
          "$alias": "vkResetQueryPool"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pBuffer"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateBufferView"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferViewCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferView"
              },
              "name": {
                "#text": "pView"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyBufferView"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferView"
              },
              "name": {
                "#text": "bufferView"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "pImage"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_COMPRESSION_EXHAUSTED_EXT,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageSubresourceLayout"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresource"
              },
              "name": {
                "#text": "pSubresource"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSubresourceLayout"
              },
              "name": {
                "#text": "pLayout"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateImageView"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageViewCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "pView"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyImageView"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateShaderModule"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkShaderModuleCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkShaderModule"
              },
              "name": {
                "#text": "pShaderModule"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyShaderModule"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkShaderModule"
              },
              "name": {
                "#text": "shaderModule"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreatePipelineCache"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCacheCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pPipelineCache"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyPipelineCache"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPipelineCacheData"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "pDataSize"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pDataSize"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkMergePipelineCaches"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "dstCache"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcCacheCount"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pSrcCaches"
              },
              "#text": "const*",
              "$len": "srcCacheCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateGraphicsPipelines"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "createInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkGraphicsPipelineCreateInfo"
              },
              "name": {
                "#text": "pCreateInfos"
              },
              "#text": "const*",
              "$len": "createInfoCount"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pPipelines"
              },
              "#text": "*",
              "$len": "createInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateComputePipelines"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "createInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkComputePipelineCreateInfo"
              },
              "name": {
                "#text": "pCreateInfos"
              },
              "#text": "const*",
              "$len": "createInfoCount"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pPipelines"
              },
              "#text": "*",
              "$len": "createInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderpass"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "pMaxWorkgroupSize"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyPipeline"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreatePipelineLayout"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayoutCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "pPipelineLayout"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyPipelineLayout"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "pipelineLayout"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateSampler"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSamplerCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "pSampler"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroySampler"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSampler"
              },
              "name": {
                "#text": "sampler"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDescriptorSetLayout"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "pSetLayout"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDescriptorSetLayout"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "descriptorSetLayout"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDescriptorPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorPoolCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorPool"
              },
              "name": {
                "#text": "pDescriptorPool"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FRAGMENTATION_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDescriptorPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorPool"
              },
              "name": {
                "#text": "descriptorPool"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkResetDescriptorPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorPool"
              },
              "name": {
                "#text": "descriptorPool"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDescriptorPoolResetFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "implicitexternsyncparams": {
            "param": {
              "#text": "any sname:VkDescriptorSet objects allocated from pname:descriptorPool"
            }
          },
          "$successcodes": "VK_SUCCESS"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAllocateDescriptorSets"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetAllocateInfo"
              },
              "name": {
                "#text": "pAllocateInfo"
              },
              "#text": "const*",
              "$externsync": "pAllocateInfo->descriptorPool"
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorSets"
              },
              "#text": "*",
              "$len": "pAllocateInfo->descriptorSetCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FRAGMENTED_POOL,VK_ERROR_OUT_OF_POOL_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkFreeDescriptorSets"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorPool"
              },
              "name": {
                "#text": "descriptorPool"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorSetCount"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorSets"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$externsync": true,
              "$len": "descriptorSetCount"
            }
          ],
          "$successcodes": "VK_SUCCESS"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkUpdateDescriptorSets"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorWriteCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkWriteDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorWrites"
              },
              "#text": "const*",
              "$len": "descriptorWriteCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorCopyCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorCopies"
              },
              "#text": "const*",
              "$len": "descriptorCopyCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateFramebuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFramebufferCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFramebuffer"
              },
              "name": {
                "#text": "pFramebuffer"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyFramebuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFramebuffer"
              },
              "name": {
                "#text": "framebuffer"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateRenderPass"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderPassCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "pRenderPass"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyRenderPass"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetRenderAreaGranularity"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "renderPass"
              }
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "pGranularity"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateCommandPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandPoolCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "pCommandPool"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyCommandPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "commandPool"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkResetCommandPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "commandPool"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCommandPoolResetFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAllocateCommandBuffers"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandBufferAllocateInfo"
              },
              "name": {
                "#text": "pAllocateInfo"
              },
              "#text": "const*",
              "$externsync": "pAllocateInfo->commandPool"
            },
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "pCommandBuffers"
              },
              "#text": "*",
              "$len": "pAllocateInfo->commandBufferCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkFreeCommandBuffers"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "commandPool"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferCount"
              }
            },
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "pCommandBuffers"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$externsync": true,
              "$len": "commandBufferCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBeginCommandBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCommandBufferBeginInfo"
              },
              "name": {
                "#text": "pBeginInfo"
              },
              "#text": "const*"
            }
          ],
          "implicitexternsyncparams": {
            "param": {
              "#text": "the sname:VkCommandPool that pname:commandBuffer was allocated from"
            }
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEndCommandBuffer"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "implicitexternsyncparams": {
            "param": {
              "#text": "the sname:VkCommandPool that pname:commandBuffer was allocated from"
            }
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkResetCommandBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCommandBufferResetFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "implicitexternsyncparams": {
            "param": {
              "#text": "the sname:VkCommandPool that pname:commandBuffer was allocated from"
            }
          },
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindPipeline"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewport"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstViewport"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewport"
              },
              "name": {
                "#text": "pViewports"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetScissor"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstScissor"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "scissorCount"
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pScissors"
              },
              "#text": "const*",
              "$len": "scissorCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLineWidth"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "lineWidth"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthBias"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasConstantFactor"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasClamp"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "depthBiasSlopeFactor"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetBlendConstants"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "blendConstants"
              },
              "#text": "const[4]"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthBounds"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "minDepthBounds"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "maxDepthBounds"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetStencilCompareMask"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStencilFaceFlags"
              },
              "name": {
                "#text": "faceMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "compareMask"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetStencilWriteMask"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStencilFaceFlags"
              },
              "name": {
                "#text": "faceMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "writeMask"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetStencilReference"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStencilFaceFlags"
              },
              "name": {
                "#text": "faceMask"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "reference"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindDescriptorSets"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstSet"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorSetCount"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorSets"
              },
              "#text": "const*",
              "$len": "descriptorSetCount",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "dynamicOffsetCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDynamicOffsets"
              },
              "#text": "const*",
              "$len": "dynamicOffsetCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindIndexBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkIndexType"
              },
              "name": {
                "#text": "indexType"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindVertexBuffers"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstBinding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindingCount"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pBuffers"
              },
              "#text": "const*",
              "$len": "bindingCount",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pOffsets"
              },
              "#text": "const*",
              "$len": "bindingCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDraw"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstVertex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndexed"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "indexCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstIndex"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "vertexOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMultiEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMultiDrawInfoEXT"
              },
              "name": {
                "#text": "pVertexInfo"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "drawCount",
              "$stride": "stride"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMultiIndexedEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMultiDrawIndexedInfoEXT"
              },
              "name": {
                "#text": "pIndexInfo"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "drawCount",
              "$stride": "stride"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "pVertexOffset"
              },
              "#text": "const*",
              "$optional": true
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndirect"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndexedIndirect"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDispatch"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountZ"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDispatchIndirect"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSubpassShadingHUAWEI"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "srcBuffer"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferCopy"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageCopy"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBlitImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageBlit"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            },
            {
              "type": {
                "#text": "VkFilter"
              },
              "name": {
                "#text": "filter"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyBufferToImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "srcBuffer"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferImageCopy"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyImageToBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkBufferImageCopy"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMemoryIndirectNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "copyBufferAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "copyCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMemoryToImageIndirectNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "copyBufferAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "copyCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceLayers"
              },
              "name": {
                "#text": "pImageSubresources"
              },
              "#text": "const*",
              "$len": "copyCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdUpdateBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "const*",
              "$len": "dataSize"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdFillBuffer"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "data"
              }
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action",
          "$comment": "transfer support is only available when VK_KHR_maintenance1 is enabled, as documented in valid usage language in the specification"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdClearColorImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            },
            {
              "type": {
                "#text": "VkClearColorValue"
              },
              "name": {
                "#text": "pColor"
              },
              "#text": "const*",
              "$noautovalidity": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rangeCount"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceRange"
              },
              "name": {
                "#text": "pRanges"
              },
              "#text": "const*",
              "$len": "rangeCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdClearDepthStencilImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            },
            {
              "type": {
                "#text": "VkClearDepthStencilValue"
              },
              "name": {
                "#text": "pDepthStencil"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rangeCount"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresourceRange"
              },
              "name": {
                "#text": "pRanges"
              },
              "#text": "const*",
              "$len": "rangeCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdClearAttachments"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkClearAttachment"
              },
              "name": {
                "#text": "pAttachments"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rectCount"
              }
            },
            {
              "type": {
                "#text": "VkClearRect"
              },
              "name": {
                "#text": "pRects"
              },
              "#text": "const*",
              "$len": "rectCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdResolveImage"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "srcImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "srcImageLayout"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "dstImage"
              }
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "dstImageLayout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "regionCount"
              }
            },
            {
              "type": {
                "#text": "VkImageResolve"
              },
              "name": {
                "#text": "pRegions"
              },
              "#text": "const*",
              "$len": "regionCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "stageMask"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "outside",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdResetEvent"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "stageMask"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "outside",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWaitEvents"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "eventCount"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "pEvents"
              },
              "#text": "const*",
              "$len": "eventCount"
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryBarrier"
              },
              "name": {
                "#text": "pMemoryBarriers"
              },
              "#text": "const*",
              "$len": "memoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferMemoryBarrier"
              },
              "name": {
                "#text": "pBufferMemoryBarriers"
              },
              "#text": "const*",
              "$len": "bufferMemoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageMemoryBarrier"
              },
              "name": {
                "#text": "pImageMemoryBarriers"
              },
              "#text": "const*",
              "$len": "imageMemoryBarrierCount"
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPipelineBarrier"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "srcStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags"
              },
              "name": {
                "#text": "dstStageMask"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDependencyFlags"
              },
              "name": {
                "#text": "dependencyFlags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "memoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMemoryBarrier"
              },
              "name": {
                "#text": "pMemoryBarriers"
              },
              "#text": "const*",
              "$len": "memoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferMemoryBarrier"
              },
              "name": {
                "#text": "pBufferMemoryBarriers"
              },
              "#text": "const*",
              "$len": "bufferMemoryBarrierCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "imageMemoryBarrierCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageMemoryBarrier"
              },
              "name": {
                "#text": "pImageMemoryBarriers"
              },
              "#text": "const*",
              "$len": "imageMemoryBarrierCount"
            }
          ],
          "$queues": "transfer,graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginQuery"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            },
            {
              "type": {
                "#text": "VkQueryControlFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndQuery"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginConditionalRenderingEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkConditionalRenderingBeginInfoEXT"
              },
              "name": {
                "#text": "pConditionalRenderingBegin"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndConditionalRenderingEXT"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdResetQueryPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queryCount"
              }
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteTimestamp"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlagBits"
              },
              "name": {
                "#text": "pipelineStage"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            }
          ],
          "$queues": "transfer,graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyQueryPoolResults"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queryCount"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "stride"
              }
            },
            {
              "type": {
                "#text": "VkQueryResultFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPushConstants"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "VkShaderStageFlags"
              },
              "name": {
                "#text": "stageFlags"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "size"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pValues"
              },
              "#text": "const*",
              "$len": "size"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginRenderPass"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkRenderPassBeginInfo"
              },
              "name": {
                "#text": "pRenderPassBegin"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSubpassContents"
              },
              "name": {
                "#text": "contents"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdNextSubpass"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSubpassContents"
              },
              "name": {
                "#text": "contents"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndRenderPass"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdExecuteCommands"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "commandBufferCount"
              }
            },
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "pCommandBuffers"
              },
              "#text": "const*",
              "$len": "commandBufferCount"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary",
          "$tasks": "indirection"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateAndroidSurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkAndroidSurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceDisplayPropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayPropertiesKHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayPlanePropertiesKHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDisplayPlaneSupportedDisplaysKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "planeIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pDisplayCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "pDisplays"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pDisplayCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDisplayModePropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayModePropertiesKHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDisplayModeKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDisplayModeCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDisplayModeKHR"
              },
              "name": {
                "#text": "pMode"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDisplayPlaneCapabilitiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayModeKHR"
              },
              "name": {
                "#text": "mode"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "planeIndex"
              }
            },
            {
              "type": {
                "#text": "VkDisplayPlaneCapabilitiesKHR"
              },
              "name": {
                "#text": "pCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDisplayPlaneSurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDisplaySurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateSharedSwapchainsKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfos"
              },
              "#text": "const*",
              "$len": "swapchainCount",
              "$externsync": "pCreateInfos[].surface,pCreateInfos[].oldSwapchain"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "pSwapchains"
              },
              "#text": "*",
              "$len": "swapchainCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroySurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceSupportKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pSupported"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceCapabilitiesKHR"
              },
              "name": {
                "#text": "pSurfaceCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceFormatsKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSurfaceFormatCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSurfaceFormatKHR"
              },
              "name": {
                "#text": "pSurfaceFormats"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSurfaceFormatCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfacePresentModesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPresentModeCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPresentModeKHR"
              },
              "name": {
                "#text": "pPresentModes"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPresentModeCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateSwapchainKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*",
              "$externsync": "pCreateInfo->surface,pCreateInfo->oldSwapchain"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "pSwapchain"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_COMPRESSION_EXHAUSTED_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroySwapchainKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSwapchainImagesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSwapchainImageCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "pSwapchainImages"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSwapchainImageCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireNextImageKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pImageIndex"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueuePresentKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPresentInfoKHR"
              },
              "name": {
                "#text": "pPresentInfo"
              },
              "#text": "const*",
              "$externsync": "pPresentInfo->pWaitSemaphores[],pPresentInfo->pSwapchains[]"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_SUBOPTIMAL_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateViSurfaceNN"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkViSurfaceCreateInfoNN"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateWaylandSurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkWaylandSurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceWaylandPresentationSupportKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "wl_display"
              },
              "name": {
                "#text": "display"
              },
              "#text": "struct*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateWin32SurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkWin32SurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceWin32PresentationSupportKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateXlibSurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkXlibSurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceXlibPresentationSupportKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "Display"
              },
              "name": {
                "#text": "dpy"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "VisualID"
              },
              "name": {
                "#text": "visualID"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateXcbSurfaceKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkXcbSurfaceCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceXcbPresentationSupportKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "xcb_connection_t"
              },
              "name": {
                "#text": "connection"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "xcb_visualid_t"
              },
              "name": {
                "#text": "visual_id"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDirectFBSurfaceEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDirectFBSurfaceCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "IDirectFB"
              },
              "name": {
                "#text": "dfb"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateImagePipeSurfaceFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkImagePipeSurfaceCreateInfoFUCHSIA"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateStreamDescriptorSurfaceGGP"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkStreamDescriptorSurfaceCreateInfoGGP"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateScreenSurfaceQNX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkScreenSurfaceCreateInfoQNX"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkBool32"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceScreenPresentationSupportQNX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "_screen_window"
              },
              "name": {
                "#text": "window"
              },
              "#text": "struct*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDebugReportCallbackEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugReportCallbackCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugReportCallbackEXT"
              },
              "name": {
                "#text": "pCallback"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDebugReportCallbackEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugReportCallbackEXT"
              },
              "name": {
                "#text": "callback"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDebugReportMessageEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugReportFlagsEXT"
              },
              "name": {
                "#text": "flags"
              }
            },
            {
              "type": {
                "#text": "VkDebugReportObjectTypeEXT"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "object"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "location"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "messageCode"
              }
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pLayerPrefix"
              },
              "#text": "const*",
              "$len": "null-terminated"
            },
            {
              "type": {
                "#text": "char"
              },
              "name": {
                "#text": "pMessage"
              },
              "#text": "const*",
              "$len": "null-terminated"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkDebugMarkerSetObjectNameEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDebugMarkerObjectNameInfoEXT"
              },
              "name": {
                "#text": "pNameInfo"
              },
              "#text": "const*",
              "$externsync": "pNameInfo->object"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkDebugMarkerSetObjectTagEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDebugMarkerObjectTagInfoEXT"
              },
              "name": {
                "#text": "pTagInfo"
              },
              "#text": "const*",
              "$externsync": "pTagInfo->object"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDebugMarkerBeginEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDebugMarkerMarkerInfoEXT"
              },
              "name": {
                "#text": "pMarkerInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDebugMarkerEndEXT"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDebugMarkerInsertEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDebugMarkerMarkerInfoEXT"
              },
              "name": {
                "#text": "pMarkerInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageType"
              },
              "name": {
                "#text": "type"
              }
            },
            {
              "type": {
                "#text": "VkImageTiling"
              },
              "name": {
                "#text": "tiling"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "usage"
              }
            },
            {
              "type": {
                "#text": "VkImageCreateFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "externalHandleType"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkExternalImageFormatPropertiesNV"
              },
              "name": {
                "#text": "pExternalImageFormatProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryWin32HandleNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagsNV"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "pHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdExecuteGeneratedCommandsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "isPreprocessed"
              }
            },
            {
              "type": {
                "#text": "VkGeneratedCommandsInfoNV"
              },
              "name": {
                "#text": "pGeneratedCommandsInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,indirection"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPreprocessGeneratedCommandsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkGeneratedCommandsInfoNV"
              },
              "name": {
                "#text": "pGeneratedCommandsInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindPipelineShaderGroupNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupIndex"
              }
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetGeneratedCommandsMemoryRequirementsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkGeneratedCommandsMemoryRequirementsInfoNV"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateIndirectCommandsLayoutNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutCreateInfoNV"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutNV"
              },
              "name": {
                "#text": "pIndirectCommandsLayout"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyIndirectCommandsLayoutNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkIndirectCommandsLayoutNV"
              },
              "name": {
                "#text": "indirectCommandsLayout"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceFeatures2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceFeatures2"
              },
              "name": {
                "#text": "pFeatures"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceFeatures2KHR",
          "$alias": "vkGetPhysicalDeviceFeatures2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceProperties2"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceProperties2KHR",
          "$alias": "vkGetPhysicalDeviceProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceFormatProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkFormatProperties2"
              },
              "name": {
                "#text": "pFormatProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceFormatProperties2KHR",
          "$alias": "vkGetPhysicalDeviceFormatProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceImageFormatProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceImageFormatInfo2"
              },
              "name": {
                "#text": "pImageFormatInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkImageFormatProperties2"
              },
              "name": {
                "#text": "pImageFormatProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"
        },
        {
          "$name": "vkGetPhysicalDeviceImageFormatProperties2KHR",
          "$alias": "vkGetPhysicalDeviceImageFormatProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceQueueFamilyProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pQueueFamilyPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkQueueFamilyProperties2"
              },
              "name": {
                "#text": "pQueueFamilyProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pQueueFamilyPropertyCount"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceQueueFamilyProperties2KHR",
          "$alias": "vkGetPhysicalDeviceQueueFamilyProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceMemoryProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceMemoryProperties2"
              },
              "name": {
                "#text": "pMemoryProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceMemoryProperties2KHR",
          "$alias": "vkGetPhysicalDeviceMemoryProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSparseImageFormatProperties2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSparseImageFormatInfo2"
              },
              "name": {
                "#text": "pFormatInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSparseImageFormatProperties2"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceSparseImageFormatProperties2KHR",
          "$alias": "vkGetPhysicalDeviceSparseImageFormatProperties2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPushDescriptorSetKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "set"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "descriptorWriteCount"
              }
            },
            {
              "type": {
                "#text": "VkWriteDescriptorSet"
              },
              "name": {
                "#text": "pDescriptorWrites"
              },
              "#text": "const*",
              "$len": "descriptorWriteCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkTrimCommandPool"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCommandPool"
              },
              "name": {
                "#text": "commandPool"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCommandPoolTrimFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            }
          ]
        },
        {
          "$name": "vkTrimCommandPoolKHR",
          "$alias": "vkTrimCommandPool"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceExternalBufferProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceExternalBufferInfo"
              },
              "name": {
                "#text": "pExternalBufferInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkExternalBufferProperties"
              },
              "name": {
                "#text": "pExternalBufferProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceExternalBufferPropertiesKHR",
          "$alias": "vkGetPhysicalDeviceExternalBufferProperties"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryWin32HandleKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryGetWin32HandleInfoKHR"
              },
              "name": {
                "#text": "pGetWin32HandleInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "pHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryWin32HandlePropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "handle"
              }
            },
            {
              "type": {
                "#text": "VkMemoryWin32HandlePropertiesKHR"
              },
              "name": {
                "#text": "pMemoryWin32HandleProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryFdKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryGetFdInfoKHR"
              },
              "name": {
                "#text": "pGetFdInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "pFd"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryFdPropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "fd"
              }
            },
            {
              "type": {
                "#text": "VkMemoryFdPropertiesKHR"
              },
              "name": {
                "#text": "pMemoryFdProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryZirconHandleFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryGetZirconHandleInfoFUCHSIA"
              },
              "name": {
                "#text": "pGetZirconHandleInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "pZirconHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryZirconHandlePropertiesFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "zirconHandle"
              }
            },
            {
              "type": {
                "#text": "VkMemoryZirconHandlePropertiesFUCHSIA"
              },
              "name": {
                "#text": "pMemoryZirconHandleProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryRemoteAddressNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryGetRemoteAddressInfoNV"
              },
              "name": {
                "#text": "pMemoryGetRemoteAddressInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkRemoteAddressNV"
              },
              "name": {
                "#text": "pAddress"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceExternalSemaphoreProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceExternalSemaphoreInfo"
              },
              "name": {
                "#text": "pExternalSemaphoreInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkExternalSemaphoreProperties"
              },
              "name": {
                "#text": "pExternalSemaphoreProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR",
          "$alias": "vkGetPhysicalDeviceExternalSemaphoreProperties"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSemaphoreWin32HandleKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreGetWin32HandleInfoKHR"
              },
              "name": {
                "#text": "pGetWin32HandleInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "pHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkImportSemaphoreWin32HandleKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImportSemaphoreWin32HandleInfoKHR"
              },
              "name": {
                "#text": "pImportSemaphoreWin32HandleInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSemaphoreFdKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreGetFdInfoKHR"
              },
              "name": {
                "#text": "pGetFdInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "pFd"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkImportSemaphoreFdKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImportSemaphoreFdInfoKHR"
              },
              "name": {
                "#text": "pImportSemaphoreFdInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSemaphoreZirconHandleFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreGetZirconHandleInfoFUCHSIA"
              },
              "name": {
                "#text": "pGetZirconHandleInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "zx_handle_t"
              },
              "name": {
                "#text": "pZirconHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkImportSemaphoreZirconHandleFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImportSemaphoreZirconHandleInfoFUCHSIA"
              },
              "name": {
                "#text": "pImportSemaphoreZirconHandleInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceExternalFenceProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceExternalFenceInfo"
              },
              "name": {
                "#text": "pExternalFenceInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkExternalFenceProperties"
              },
              "name": {
                "#text": "pExternalFenceProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPhysicalDeviceExternalFencePropertiesKHR",
          "$alias": "vkGetPhysicalDeviceExternalFenceProperties"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetFenceWin32HandleKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFenceGetWin32HandleInfoKHR"
              },
              "name": {
                "#text": "pGetWin32HandleInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "HANDLE"
              },
              "name": {
                "#text": "pHandle"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkImportFenceWin32HandleKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImportFenceWin32HandleInfoKHR"
              },
              "name": {
                "#text": "pImportFenceWin32HandleInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetFenceFdKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFenceGetFdInfoKHR"
              },
              "name": {
                "#text": "pGetFdInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "pFd"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkImportFenceFdKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImportFenceFdInfoKHR"
              },
              "name": {
                "#text": "pImportFenceFdInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkReleaseDisplayEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireXlibDisplayEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "Display"
              },
              "name": {
                "#text": "dpy"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetRandROutputDisplayEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "Display"
              },
              "name": {
                "#text": "dpy"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "RROutput"
              },
              "name": {
                "#text": "rrOutput"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "pDisplay"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireWinrtDisplayNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetWinrtDisplayNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceRelativeId"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "pDisplay"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkDisplayPowerControlEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            },
            {
              "type": {
                "#text": "VkDisplayPowerInfoEXT"
              },
              "name": {
                "#text": "pDisplayPowerInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkRegisterDeviceEventEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceEventInfoEXT"
              },
              "name": {
                "#text": "pDeviceEventInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "pFence"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkRegisterDisplayEventEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            },
            {
              "type": {
                "#text": "VkDisplayEventInfoEXT"
              },
              "name": {
                "#text": "pDisplayEventInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "pFence"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSwapchainCounterEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceCounterFlagBitsEXT"
              },
              "name": {
                "#text": "counter"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pCounterValue"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceCapabilities2EXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceCapabilities2EXT"
              },
              "name": {
                "#text": "pSurfaceCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumeratePhysicalDeviceGroups"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPhysicalDeviceGroupCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceGroupProperties"
              },
              "name": {
                "#text": "pPhysicalDeviceGroupProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPhysicalDeviceGroupCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "$name": "vkEnumeratePhysicalDeviceGroupsKHR",
          "$alias": "vkEnumeratePhysicalDeviceGroups"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceGroupPeerMemoryFeatures"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "heapIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "localDeviceIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "remoteDeviceIndex"
              }
            },
            {
              "type": {
                "#text": "VkPeerMemoryFeatureFlags"
              },
              "name": {
                "#text": "pPeerMemoryFeatures"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetDeviceGroupPeerMemoryFeaturesKHR",
          "$alias": "vkGetDeviceGroupPeerMemoryFeatures"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindBufferMemory2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkBindBufferMemoryInfo"
              },
              "name": {
                "#text": "pBindInfos"
              },
              "#text": "const*",
              "$len": "bindInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "$name": "vkBindBufferMemory2KHR",
          "$alias": "vkBindBufferMemory2"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindImageMemory2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkBindImageMemoryInfo"
              },
              "name": {
                "#text": "pBindInfos"
              },
              "#text": "const*",
              "$len": "bindInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkBindImageMemory2KHR",
          "$alias": "vkBindImageMemory2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDeviceMask"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "deviceMask"
              }
            }
          ],
          "$queues": "graphics,compute,transfer",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDeviceMaskKHR",
          "$alias": "vkCmdSetDeviceMask"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeviceGroupPresentCapabilitiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentCapabilitiesKHR"
              },
              "name": {
                "#text": "pDeviceGroupPresentCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeviceGroupSurfacePresentModesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentModeFlagsKHR"
              },
              "name": {
                "#text": "pModes"
              },
              "#text": "*",
              "$optional": "false,true"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireNextImage2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAcquireNextImageInfoKHR"
              },
              "name": {
                "#text": "pAcquireInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pImageIndex"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_TIMEOUT,VK_NOT_READY,VK_SUBOPTIMAL_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDispatchBase"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseGroupX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseGroupY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "baseGroupZ"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountZ"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdDispatchBaseKHR",
          "$alias": "vkCmdDispatchBase"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDevicePresentRectanglesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "surface"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pRectCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pRects"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pRectCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDescriptorUpdateTemplate"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplateCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplate"
              },
              "name": {
                "#text": "pDescriptorUpdateTemplate"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkCreateDescriptorUpdateTemplateKHR",
          "$alias": "vkCreateDescriptorUpdateTemplate"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDescriptorUpdateTemplate"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplate"
              },
              "name": {
                "#text": "descriptorUpdateTemplate"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "$name": "vkDestroyDescriptorUpdateTemplateKHR",
          "$alias": "vkDestroyDescriptorUpdateTemplate"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkUpdateDescriptorSetWithTemplate"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "descriptorSet"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplate"
              },
              "name": {
                "#text": "descriptorUpdateTemplate"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ]
        },
        {
          "$name": "vkUpdateDescriptorSetWithTemplateKHR",
          "$alias": "vkUpdateDescriptorSetWithTemplate"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPushDescriptorSetWithTemplateKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDescriptorUpdateTemplate"
              },
              "name": {
                "#text": "descriptorUpdateTemplate"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "set"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkSetHdrMetadataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "swapchainCount"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "pSwapchains"
              },
              "#text": "const*",
              "$len": "swapchainCount"
            },
            {
              "type": {
                "#text": "VkHdrMetadataEXT"
              },
              "name": {
                "#text": "pMetadata"
              },
              "#text": "const*",
              "$len": "swapchainCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSwapchainStatusKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_SUBOPTIMAL_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetRefreshCycleDurationGOOGLE"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkRefreshCycleDurationGOOGLE"
              },
              "name": {
                "#text": "pDisplayTimingProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPastPresentationTimingGOOGLE"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPresentationTimingCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPastPresentationTimingGOOGLE"
              },
              "name": {
                "#text": "pPresentationTimings"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPresentationTimingCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateIOSSurfaceMVK"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkIOSSurfaceCreateInfoMVK"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateMacOSSurfaceMVK"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkMacOSSurfaceCreateInfoMVK"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateMetalSurfaceEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkMetalSurfaceCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewportWScalingNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstViewport"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewportWScalingNV"
              },
              "name": {
                "#text": "pViewportWScalings"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDiscardRectangleEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstDiscardRectangle"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "discardRectangleCount"
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pDiscardRectangles"
              },
              "#text": "const*",
              "$len": "discardRectangleCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetSampleLocationsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSampleLocationsInfoEXT"
              },
              "name": {
                "#text": "pSampleLocationsInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceMultisamplePropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkMultisamplePropertiesEXT"
              },
              "name": {
                "#text": "pMultisampleProperties"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceCapabilities2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSurfaceInfo2KHR"
              },
              "name": {
                "#text": "pSurfaceInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSurfaceCapabilities2KHR"
              },
              "name": {
                "#text": "pSurfaceCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfaceFormats2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSurfaceInfo2KHR"
              },
              "name": {
                "#text": "pSurfaceInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSurfaceFormatCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSurfaceFormat2KHR"
              },
              "name": {
                "#text": "pSurfaceFormats"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSurfaceFormatCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceDisplayProperties2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayProperties2KHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayPlaneProperties2KHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDisplayModeProperties2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDisplayModeProperties2KHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDisplayPlaneCapabilities2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkDisplayPlaneInfo2KHR"
              },
              "name": {
                "#text": "pDisplayPlaneInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkDisplayPlaneCapabilities2KHR"
              },
              "name": {
                "#text": "pCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetBufferMemoryRequirements2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferMemoryRequirementsInfo2"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetBufferMemoryRequirements2KHR",
          "$alias": "vkGetBufferMemoryRequirements2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageMemoryRequirements2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageMemoryRequirementsInfo2"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetImageMemoryRequirements2KHR",
          "$alias": "vkGetImageMemoryRequirements2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageSparseMemoryRequirements2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageSparseMemoryRequirementsInfo2"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSparseMemoryRequirementCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryRequirements2"
              },
              "name": {
                "#text": "pSparseMemoryRequirements"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSparseMemoryRequirementCount"
            }
          ]
        },
        {
          "$name": "vkGetImageSparseMemoryRequirements2KHR",
          "$alias": "vkGetImageSparseMemoryRequirements2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceBufferMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceBufferMemoryRequirements"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetDeviceBufferMemoryRequirementsKHR",
          "$alias": "vkGetDeviceBufferMemoryRequirements"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceImageMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceImageMemoryRequirements"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetDeviceImageMemoryRequirementsKHR",
          "$alias": "vkGetDeviceImageMemoryRequirements"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceImageSparseMemoryRequirements"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceImageMemoryRequirements"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pSparseMemoryRequirementCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkSparseImageMemoryRequirements2"
              },
              "name": {
                "#text": "pSparseMemoryRequirements"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pSparseMemoryRequirementCount"
            }
          ]
        },
        {
          "$name": "vkGetDeviceImageSparseMemoryRequirementsKHR",
          "$alias": "vkGetDeviceImageSparseMemoryRequirements"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateSamplerYcbcrConversion"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrConversionCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrConversion"
              },
              "name": {
                "#text": "pYcbcrConversion"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkCreateSamplerYcbcrConversionKHR",
          "$alias": "vkCreateSamplerYcbcrConversion"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroySamplerYcbcrConversion"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSamplerYcbcrConversion"
              },
              "name": {
                "#text": "ycbcrConversion"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "$name": "vkDestroySamplerYcbcrConversionKHR",
          "$alias": "vkDestroySamplerYcbcrConversion"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceQueue2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceQueueInfo2"
              },
              "name": {
                "#text": "pQueueInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "pQueue"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateValidationCacheEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkValidationCacheCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "pValidationCache"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyValidationCacheEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "validationCache"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetValidationCacheDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "validationCache"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "pDataSize"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pDataSize"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkMergeValidationCachesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "dstCache"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "srcCacheCount"
              }
            },
            {
              "type": {
                "#text": "VkValidationCacheEXT"
              },
              "name": {
                "#text": "pSrcCaches"
              },
              "#text": "const*",
              "$len": "srcCacheCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorSetLayoutSupport"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutSupport"
              },
              "name": {
                "#text": "pSupport"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetDescriptorSetLayoutSupportKHR",
          "$alias": "vkGetDescriptorSetLayoutSupport"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSwapchainGrallocUsageANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "imageUsage"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "grallocUsage"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSwapchainGrallocUsage2ANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFormat"
              },
              "name": {
                "#text": "format"
              }
            },
            {
              "type": {
                "#text": "VkImageUsageFlags"
              },
              "name": {
                "#text": "imageUsage"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainImageUsageFlagsANDROID"
              },
              "name": {
                "#text": "swapchainImageUsage"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "grallocConsumerUsage"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "grallocProducerUsage"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireImageANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "nativeFenceFd"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueSignalReleaseImageANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "waitSemaphoreCount"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "pWaitSemaphores"
              },
              "#text": "const*",
              "$len": "waitSemaphoreCount"
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "int"
              },
              "name": {
                "#text": "pNativeFenceFd"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetShaderInfoAMD"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "VkShaderStageFlagBits"
              },
              "name": {
                "#text": "shaderStage"
              }
            },
            {
              "type": {
                "#text": "VkShaderInfoTypeAMD"
              },
              "name": {
                "#text": "infoType"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "pInfoSize"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pInfoSize"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_FEATURE_NOT_PRESENT,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkSetLocalDimmingAMD"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapChain"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "localDimmingEnable"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pTimeDomainCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkTimeDomainEXT"
              },
              "name": {
                "#text": "pTimeDomains"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pTimeDomainCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetCalibratedTimestampsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "timestampCount"
              }
            },
            {
              "type": {
                "#text": "VkCalibratedTimestampInfoEXT"
              },
              "name": {
                "#text": "pTimestampInfos"
              },
              "#text": "const*",
              "$len": "timestampCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pTimestamps"
              },
              "#text": "*",
              "$len": "timestampCount"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pMaxDeviation"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetDebugUtilsObjectNameEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsObjectNameInfoEXT"
              },
              "name": {
                "#text": "pNameInfo"
              },
              "#text": "const*",
              "$externsync": "pNameInfo->objectHandle"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetDebugUtilsObjectTagEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsObjectTagInfoEXT"
              },
              "name": {
                "#text": "pTagInfo"
              },
              "#text": "const*",
              "$externsync": "pTagInfo->objectHandle"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkQueueBeginDebugUtilsLabelEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pLabelInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkQueueEndDebugUtilsLabelEXT"
            }
          },
          "param": {
            "type": {
              "#text": "VkQueue"
            },
            "name": {
              "#text": "queue"
            }
          }
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkQueueInsertDebugUtilsLabelEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pLabelInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginDebugUtilsLabelEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pLabelInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndDebugUtilsLabelEXT"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdInsertDebugUtilsLabelEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsLabelEXT"
              },
              "name": {
                "#text": "pLabelInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDebugUtilsMessengerEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerEXT"
              },
              "name": {
                "#text": "pMessenger"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDebugUtilsMessengerEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerEXT"
              },
              "name": {
                "#text": "messenger"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkSubmitDebugUtilsMessageEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessageSeverityFlagBitsEXT"
              },
              "name": {
                "#text": "messageSeverity"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessageTypeFlagsEXT"
              },
              "name": {
                "#text": "messageTypes"
              }
            },
            {
              "type": {
                "#text": "VkDebugUtilsMessengerCallbackDataEXT"
              },
              "name": {
                "#text": "pCallbackData"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryHostPointerPropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkExternalMemoryHandleTypeFlagBits"
              },
              "name": {
                "#text": "handleType"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pHostPointer"
              },
              "#text": "const*",
              "$optional": false
            },
            {
              "type": {
                "#text": "VkMemoryHostPointerPropertiesEXT"
              },
              "name": {
                "#text": "pMemoryHostPointerProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteBufferMarkerAMD"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlagBits"
              },
              "name": {
                "#text": "pipelineStage"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "marker"
              }
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateRenderPass2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderPassCreateInfo2"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkRenderPass"
              },
              "name": {
                "#text": "pRenderPass"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkCreateRenderPass2KHR",
          "$alias": "vkCreateRenderPass2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginRenderPass2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkRenderPassBeginInfo"
              },
              "name": {
                "#text": "pRenderPassBegin"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSubpassBeginInfo"
              },
              "name": {
                "#text": "pSubpassBeginInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "$name": "vkCmdBeginRenderPass2KHR",
          "$alias": "vkCmdBeginRenderPass2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdNextSubpass2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSubpassBeginInfo"
              },
              "name": {
                "#text": "pSubpassBeginInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSubpassEndInfo"
              },
              "name": {
                "#text": "pSubpassEndInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "$name": "vkCmdNextSubpass2KHR",
          "$alias": "vkCmdNextSubpass2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndRenderPass2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSubpassEndInfo"
              },
              "name": {
                "#text": "pSubpassEndInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state,synchronization"
        },
        {
          "$name": "vkCmdEndRenderPass2KHR",
          "$alias": "vkCmdEndRenderPass2"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSemaphoreCounterValue"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphore"
              },
              "name": {
                "#text": "semaphore"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pValue"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "$name": "vkGetSemaphoreCounterValueKHR",
          "$alias": "vkGetSemaphoreCounterValue"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkWaitSemaphores"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreWaitInfo"
              },
              "name": {
                "#text": "pWaitInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_TIMEOUT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "$name": "vkWaitSemaphoresKHR",
          "$alias": "vkWaitSemaphores"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSignalSemaphore"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSemaphoreSignalInfo"
              },
              "name": {
                "#text": "pSignalInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkSignalSemaphoreKHR",
          "$alias": "vkSignalSemaphore"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetAndroidHardwareBufferPropertiesANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "AHardwareBuffer"
              },
              "name": {
                "#text": "buffer"
              },
              "#text": "const struct*"
            },
            {
              "type": {
                "#text": "VkAndroidHardwareBufferPropertiesANDROID"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetMemoryAndroidHardwareBufferANDROID"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMemoryGetAndroidHardwareBufferInfoANDROID"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "AHardwareBuffer"
              },
              "name": {
                "#text": "pBuffer"
              },
              "#text": "struct**"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndirectCount"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "countBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "countBufferOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdDrawIndirectCountKHR",
          "$alias": "vkCmdDrawIndirectCount"
        },
        {
          "$name": "vkCmdDrawIndirectCountAMD",
          "$alias": "vkCmdDrawIndirectCount"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndexedIndirectCount"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "countBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "countBufferOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdDrawIndexedIndirectCountKHR",
          "$alias": "vkCmdDrawIndexedIndirectCount"
        },
        {
          "$name": "vkCmdDrawIndexedIndirectCountAMD",
          "$alias": "vkCmdDrawIndexedIndirectCount"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCheckpointNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pCheckpointMarker"
              },
              "#text": "const*",
              "$noautovalidity": true
            }
          ],
          "$queues": "graphics,compute,transfer",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetQueueCheckpointDataNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCheckpointDataCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkCheckpointDataNV"
              },
              "name": {
                "#text": "pCheckpointData"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pCheckpointDataCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindTransformFeedbackBuffersEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstBinding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindingCount"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pBuffers"
              },
              "#text": "const*",
              "$len": "bindingCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pOffsets"
              },
              "#text": "const*",
              "$len": "bindingCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pSizes"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "bindingCount",
              "$noautovalidity": true
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginTransformFeedbackEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstCounterBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "counterBufferCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pCounterBuffers"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "counterBufferCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pCounterBufferOffsets"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "counterBufferCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndTransformFeedbackEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstCounterBuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "counterBufferCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pCounterBuffers"
              },
              "#text": "const*",
              "$noautovalidity": true,
              "$len": "counterBufferCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pCounterBufferOffsets"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "counterBufferCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginQueryIndexedEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            },
            {
              "type": {
                "#text": "VkQueryControlFlags"
              },
              "name": {
                "#text": "flags"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "index"
              }
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndQueryIndexedEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "index"
              }
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawIndirectByteCountEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "instanceCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstInstance"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "counterBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "counterBufferOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "counterOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexStride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetExclusiveScissorNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstExclusiveScissor"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "exclusiveScissorCount"
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pExclusiveScissors"
              },
              "#text": "const*",
              "$len": "exclusiveScissorCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindShadingRateImageNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewportShadingRatePaletteNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstViewport"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkShadingRatePaletteNV"
              },
              "name": {
                "#text": "pShadingRatePalettes"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoarseSampleOrderNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCoarseSampleOrderTypeNV"
              },
              "name": {
                "#text": "sampleOrderType"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "customSampleOrderCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCoarseSampleOrderCustomNV"
              },
              "name": {
                "#text": "pCustomSampleOrders"
              },
              "#text": "const*",
              "$len": "customSampleOrderCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "taskCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstTask"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksIndirectNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksIndirectCountNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "countBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "countBufferOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountX"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountY"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCountZ"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksIndirectEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "drawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDrawMeshTasksIndirectCountEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "buffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "offset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "countBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "countBufferOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "maxDrawCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCompileDeferredNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "shader"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateAccelerationStructureNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCreateInfoNV"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "pAccelerationStructure"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindInvocationMaskHUAWEI"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "imageLayout"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "accelerationStructure"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyAccelerationStructureNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "accelerationStructure"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetAccelerationStructureMemoryRequirementsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureMemoryRequirementsInfoNV"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMemoryRequirements2KHR"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindAccelerationStructureMemoryNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkBindAccelerationStructureMemoryInfoNV"
              },
              "name": {
                "#text": "pBindInfos"
              },
              "#text": "const*",
              "$len": "bindInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyAccelerationStructureNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "src"
              }
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureModeKHR"
              },
              "name": {
                "#text": "mode"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyAccelerationStructureToMemoryKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureToMemoryInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyAccelerationStructureToMemoryKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyAccelerationStructureToMemoryInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMemoryToAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyMemoryToAccelerationStructureInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyMemoryToAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyMemoryToAccelerationStructureInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteAccelerationStructuresPropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "accelerationStructureCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "pAccelerationStructures"
              },
              "#text": "const*",
              "$len": "accelerationStructureCount"
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteAccelerationStructuresPropertiesNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "accelerationStructureCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "pAccelerationStructures"
              },
              "#text": "const*",
              "$len": "accelerationStructureCount"
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBuildAccelerationStructureNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureInfoNV"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "instanceData"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "instanceOffset"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "update"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "dst"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "src"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "scratch"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "scratchOffset"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkWriteAccelerationStructuresPropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "accelerationStructureCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "pAccelerationStructures"
              },
              "#text": "const*",
              "$len": "accelerationStructureCount"
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdTraceRaysKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pRaygenShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pMissShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pHitShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pCallableShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "depth"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdTraceRaysNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "raygenShaderBindingTableBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "raygenShaderBindingOffset"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "missShaderBindingTableBuffer"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "missShaderBindingOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "missShaderBindingStride"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "hitShaderBindingTableBuffer"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "hitShaderBindingOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "hitShaderBindingStride"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "callableShaderBindingTableBuffer"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "callableShaderBindingOffset"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "callableShaderBindingStride"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "width"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "height"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "depth"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetRayTracingShaderGroupHandlesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstGroup"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCount"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "$name": "vkGetRayTracingShaderGroupHandlesNV",
          "$alias": "vkGetRayTracingShaderGroupHandlesKHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstGroup"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "groupCount"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetAccelerationStructureHandleNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureNV"
              },
              "name": {
                "#text": "accelerationStructure"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateRayTracingPipelinesNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "createInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkRayTracingPipelineCreateInfoNV"
              },
              "name": {
                "#text": "pCreateInfos"
              },
              "#text": "const*",
              "$len": "createInfoCount"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pPipelines"
              },
              "#text": "*",
              "$len": "createInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_PIPELINE_COMPILE_REQUIRED_EXT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateRayTracingPipelinesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipelineCache"
              },
              "name": {
                "#text": "pipelineCache"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "createInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkRayTracingPipelineCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfos"
              },
              "#text": "const*",
              "$len": "createInfoCount"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pPipelines"
              },
              "#text": "*",
              "$len": "createInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR,VK_PIPELINE_COMPILE_REQUIRED_EXT",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkCooperativeMatrixPropertiesNV"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdTraceRaysIndirectKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pRaygenShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pMissShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pHitShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkStridedDeviceAddressRegionKHR"
              },
              "name": {
                "#text": "pCallableShaderBindingTable"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "indirectDeviceAddress"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdTraceRaysIndirect2KHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "indirectDeviceAddress"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceAccelerationStructureCompatibilityKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureVersionInfoKHR"
              },
              "name": {
                "#text": "pVersionInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCompatibilityKHR"
              },
              "name": {
                "#text": "pCompatibility"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkDeviceSize"
            },
            "name": {
              "#text": "vkGetRayTracingShaderGroupStackSizeKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipeline"
              },
              "name": {
                "#text": "pipeline"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "group"
              }
            },
            {
              "type": {
                "#text": "VkShaderGroupShaderKHR"
              },
              "name": {
                "#text": "groupShader"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetRayTracingPipelineStackSizeKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pipelineStackSize"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "vkGetImageViewHandleNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageViewHandleInfoNVX"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetImageViewAddressNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "imageView"
              }
            },
            {
              "type": {
                "#text": "VkImageViewAddressPropertiesNVX"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_UNKNOWN"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSurfacePresentModes2EXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSurfaceInfo2KHR"
              },
              "name": {
                "#text": "pSurfaceInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPresentModeCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPresentModeKHR"
              },
              "name": {
                "#text": "pPresentModes"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPresentModeCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeviceGroupSurfacePresentModes2EXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceSurfaceInfo2KHR"
              },
              "name": {
                "#text": "pSurfaceInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkDeviceGroupPresentModeFlagsKHR"
              },
              "name": {
                "#text": "pModes"
              },
              "#text": "*",
              "$optional": "false,true"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireFullScreenExclusiveModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkReleaseFullScreenExclusiveModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_SURFACE_LOST_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "queueFamilyIndex"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCounterCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPerformanceCounterKHR"
              },
              "name": {
                "#text": "pCounters"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pCounterCount"
            },
            {
              "type": {
                "#text": "VkPerformanceCounterDescriptionKHR"
              },
              "name": {
                "#text": "pCounterDescriptions"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pCounterCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkQueryPoolPerformanceCreateInfoKHR"
              },
              "name": {
                "#text": "pPerformanceQueryCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pNumPasses"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireProfilingLockKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAcquireProfilingLockInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_TIMEOUT"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkReleaseProfilingLockKHR"
            }
          },
          "param": {
            "type": {
              "#text": "VkDevice"
            },
            "name": {
              "#text": "device"
            }
          }
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetImageDrmFormatModifierPropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageDrmFormatModifierPropertiesEXT"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "uint64_t"
            },
            "name": {
              "#text": "vkGetBufferOpaqueCaptureAddress"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferDeviceAddressInfo"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "$name": "vkGetBufferOpaqueCaptureAddressKHR",
          "$alias": "vkGetBufferOpaqueCaptureAddress"
        },
        {
          "proto": {
            "type": {
              "#text": "VkDeviceAddress"
            },
            "name": {
              "#text": "vkGetBufferDeviceAddress"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferDeviceAddressInfo"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "$name": "vkGetBufferDeviceAddressKHR",
          "$alias": "vkGetBufferDeviceAddress"
        },
        {
          "$name": "vkGetBufferDeviceAddressEXT",
          "$alias": "vkGetBufferDeviceAddress"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateHeadlessSurfaceEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkInstance"
              },
              "name": {
                "#text": "instance"
              }
            },
            {
              "type": {
                "#text": "VkHeadlessSurfaceCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSurfaceKHR"
              },
              "name": {
                "#text": "pSurface"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCombinationCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkFramebufferMixedSamplesCombinationNV"
              },
              "name": {
                "#text": "pCombinations"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pCombinationCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkInitializePerformanceApiINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkInitializePerformanceApiInfoINTEL"
              },
              "name": {
                "#text": "pInitializeInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkUninitializePerformanceApiINTEL"
            }
          },
          "param": {
            "type": {
              "#text": "VkDevice"
            },
            "name": {
              "#text": "device"
            }
          }
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCmdSetPerformanceMarkerINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPerformanceMarkerInfoINTEL"
              },
              "name": {
                "#text": "pMarkerInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute,transfer",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCmdSetPerformanceStreamMarkerINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPerformanceStreamMarkerInfoINTEL"
              },
              "name": {
                "#text": "pMarkerInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute,transfer",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCmdSetPerformanceOverrideINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPerformanceOverrideInfoINTEL"
              },
              "name": {
                "#text": "pOverrideInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute,transfer",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquirePerformanceConfigurationINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceConfigurationAcquireInfoINTEL"
              },
              "name": {
                "#text": "pAcquireInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkPerformanceConfigurationINTEL"
              },
              "name": {
                "#text": "pConfiguration"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkReleasePerformanceConfigurationINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceConfigurationINTEL"
              },
              "name": {
                "#text": "configuration"
              },
              "$optional": true,
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueSetPerformanceConfigurationINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceConfigurationINTEL"
              },
              "name": {
                "#text": "configuration"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPerformanceParameterINTEL"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceParameterTypeINTEL"
              },
              "name": {
                "#text": "parameter"
              }
            },
            {
              "type": {
                "#text": "VkPerformanceValueINTEL"
              },
              "name": {
                "#text": "pValue"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_TOO_MANY_OBJECTS,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "uint64_t"
            },
            "name": {
              "#text": "vkGetDeviceMemoryOpaqueCaptureAddress"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemoryOpaqueCaptureAddressInfo"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "$name": "vkGetDeviceMemoryOpaqueCaptureAddressKHR",
          "$alias": "vkGetDeviceMemoryOpaqueCaptureAddress"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPipelineExecutablePropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineInfoKHR"
              },
              "name": {
                "#text": "pPipelineInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pExecutableCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPipelineExecutablePropertiesKHR"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pExecutableCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPipelineExecutableStatisticsKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineExecutableInfoKHR"
              },
              "name": {
                "#text": "pExecutableInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pStatisticCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPipelineExecutableStatisticKHR"
              },
              "name": {
                "#text": "pStatistics"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pStatisticCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPipelineExecutableInternalRepresentationsKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineExecutableInfoKHR"
              },
              "name": {
                "#text": "pExecutableInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pInternalRepresentationCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPipelineExecutableInternalRepresentationKHR"
              },
              "name": {
                "#text": "pInternalRepresentations"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pInternalRepresentationCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLineStippleEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "lineStippleFactor"
              }
            },
            {
              "type": {
                "#text": "uint16_t"
              },
              "name": {
                "#text": "lineStipplePattern"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceToolProperties"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pToolCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceToolProperties"
              },
              "name": {
                "#text": "pToolProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pToolCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "$name": "vkGetPhysicalDeviceToolPropertiesEXT",
          "$alias": "vkGetPhysicalDeviceToolProperties"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateAccelerationStructureKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkAccelerationStructureKHR"
              },
              "name": {
                "#text": "pAccelerationStructure"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBuildAccelerationStructuresKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "infoCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildGeometryInfoKHR"
              },
              "name": {
                "#text": "pInfos"
              },
              "#text": "const*",
              "$len": "infoCount"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildRangeInfoKHR"
              },
              "name": {
                "#text": "ppBuildRangeInfos"
              },
              "#text": "const* const*",
              "$len": "infoCount"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBuildAccelerationStructuresIndirectKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "infoCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildGeometryInfoKHR"
              },
              "name": {
                "#text": "pInfos"
              },
              "#text": "const*",
              "$len": "infoCount"
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "pIndirectDeviceAddresses"
              },
              "#text": "const*",
              "$len": "infoCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pIndirectStrides"
              },
              "#text": "const*",
              "$len": "infoCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "ppMaxPrimitiveCounts"
              },
              "#text": "const* const*",
              "$len": "infoCount"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBuildAccelerationStructuresKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "infoCount"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildGeometryInfoKHR"
              },
              "name": {
                "#text": "pInfos"
              },
              "#text": "const*",
              "$len": "infoCount"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildRangeInfoKHR"
              },
              "name": {
                "#text": "ppBuildRangeInfos"
              },
              "#text": "const* const*",
              "$len": "infoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkDeviceAddress"
            },
            "name": {
              "#text": "vkGetAccelerationStructureDeviceAddressKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureDeviceAddressInfoKHR"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateDeferredOperationKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "pDeferredOperation"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyDeferredOperationKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "operation"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "uint32_t"
            },
            "name": {
              "#text": "vkGetDeferredOperationMaxConcurrencyKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "operation"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeferredOperationResultKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "operation"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_NOT_READY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkDeferredOperationJoinKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "operation"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_THREAD_DONE_KHR,VK_THREAD_IDLE_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCullMode"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCullModeFlags"
              },
              "name": {
                "#text": "cullMode"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetCullModeEXT",
          "$alias": "vkCmdSetCullMode"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetFrontFace"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFrontFace"
              },
              "name": {
                "#text": "frontFace"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetFrontFaceEXT",
          "$alias": "vkCmdSetFrontFace"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetPrimitiveTopology"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPrimitiveTopology"
              },
              "name": {
                "#text": "primitiveTopology"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetPrimitiveTopologyEXT",
          "$alias": "vkCmdSetPrimitiveTopology"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewportWithCount"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewport"
              },
              "name": {
                "#text": "pViewports"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetViewportWithCountEXT",
          "$alias": "vkCmdSetViewportWithCount"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetScissorWithCount"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "scissorCount"
              }
            },
            {
              "type": {
                "#text": "VkRect2D"
              },
              "name": {
                "#text": "pScissors"
              },
              "#text": "const*",
              "$len": "scissorCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetScissorWithCountEXT",
          "$alias": "vkCmdSetScissorWithCount"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindVertexBuffers2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstBinding"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindingCount"
              }
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "pBuffers"
              },
              "#text": "const*",
              "$len": "bindingCount",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pOffsets"
              },
              "#text": "const*",
              "$len": "bindingCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pSizes"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "bindingCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pStrides"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "bindingCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdBindVertexBuffers2EXT",
          "$alias": "vkCmdBindVertexBuffers2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthTestEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthTestEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDepthTestEnableEXT",
          "$alias": "vkCmdSetDepthTestEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthWriteEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthWriteEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDepthWriteEnableEXT",
          "$alias": "vkCmdSetDepthWriteEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthCompareOp"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCompareOp"
              },
              "name": {
                "#text": "depthCompareOp"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDepthCompareOpEXT",
          "$alias": "vkCmdSetDepthCompareOp"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthBoundsTestEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBoundsTestEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDepthBoundsTestEnableEXT",
          "$alias": "vkCmdSetDepthBoundsTestEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetStencilTestEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stencilTestEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetStencilTestEnableEXT",
          "$alias": "vkCmdSetStencilTestEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetStencilOp"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkStencilFaceFlags"
              },
              "name": {
                "#text": "faceMask"
              }
            },
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "failOp"
              }
            },
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "passOp"
              }
            },
            {
              "type": {
                "#text": "VkStencilOp"
              },
              "name": {
                "#text": "depthFailOp"
              }
            },
            {
              "type": {
                "#text": "VkCompareOp"
              },
              "name": {
                "#text": "compareOp"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetStencilOpEXT",
          "$alias": "vkCmdSetStencilOp"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetPatchControlPointsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "patchControlPoints"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetRasterizerDiscardEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "rasterizerDiscardEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetRasterizerDiscardEnableEXT",
          "$alias": "vkCmdSetRasterizerDiscardEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthBiasEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthBiasEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetDepthBiasEnableEXT",
          "$alias": "vkCmdSetDepthBiasEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLogicOpEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkLogicOp"
              },
              "name": {
                "#text": "logicOp"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetPrimitiveRestartEnable"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "primitiveRestartEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "$name": "vkCmdSetPrimitiveRestartEnableEXT",
          "$alias": "vkCmdSetPrimitiveRestartEnable"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetTessellationDomainOriginEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkTessellationDomainOrigin"
              },
              "name": {
                "#text": "domainOrigin"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthClampEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClampEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetPolygonModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPolygonMode"
              },
              "name": {
                "#text": "polygonMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetRasterizationSamplesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "rasterizationSamples"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetSampleMaskEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkSampleCountFlagBits"
              },
              "name": {
                "#text": "samples"
              }
            },
            {
              "type": {
                "#text": "VkSampleMask"
              },
              "name": {
                "#text": "pSampleMask"
              },
              "#text": "const*",
              "$len": "latexmath:[\\lceil{\\mathit{samples} \\over 32}\\rceil]",
              "$altlen": "(samples + 31) / 32"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetAlphaToCoverageEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "alphaToCoverageEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetAlphaToOneEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "alphaToOneEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLogicOpEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "logicOpEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetColorBlendEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstAttachment"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pColorBlendEnables"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetColorBlendEquationEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstAttachment"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkColorBlendEquationEXT"
              },
              "name": {
                "#text": "pColorBlendEquations"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetColorWriteMaskEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstAttachment"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkColorComponentFlags"
              },
              "name": {
                "#text": "pColorWriteMasks"
              },
              "#text": "const*",
              "$len": "attachmentCount",
              "$optional": "false,true"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetRasterizationStreamEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "rasterizationStream"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetConservativeRasterizationModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkConservativeRasterizationModeEXT"
              },
              "name": {
                "#text": "conservativeRasterizationMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetExtraPrimitiveOverestimationSizeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "extraPrimitiveOverestimationSize"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthClipEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "depthClipEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetSampleLocationsEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "sampleLocationsEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetColorBlendAdvancedEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstAttachment"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkColorBlendAdvancedEXT"
              },
              "name": {
                "#text": "pColorBlendAdvanced"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetProvokingVertexModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkProvokingVertexModeEXT"
              },
              "name": {
                "#text": "provokingVertexMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLineRasterizationModeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkLineRasterizationModeEXT"
              },
              "name": {
                "#text": "lineRasterizationMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetLineStippleEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "stippledLineEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDepthClipNegativeOneToOneEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "negativeOneToOne"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewportWScalingEnableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "viewportWScalingEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetViewportSwizzleNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstViewport"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "viewportCount"
              }
            },
            {
              "type": {
                "#text": "VkViewportSwizzleNV"
              },
              "name": {
                "#text": "pViewportSwizzles"
              },
              "#text": "const*",
              "$len": "viewportCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageToColorEnableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "coverageToColorEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageToColorLocationNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "coverageToColorLocation"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageModulationModeNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCoverageModulationModeNV"
              },
              "name": {
                "#text": "coverageModulationMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageModulationTableEnableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "coverageModulationTableEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageModulationTableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "coverageModulationTableCount"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "pCoverageModulationTable"
              },
              "#text": "const*",
              "$len": "coverageModulationTableCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetShadingRateImageEnableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "shadingRateImageEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetCoverageReductionModeNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCoverageReductionModeNV"
              },
              "name": {
                "#text": "coverageReductionMode"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetRepresentativeFragmentTestEnableNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "representativeFragmentTestEnable"
              }
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreatePrivateDataSlot"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPrivateDataSlotCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkPrivateDataSlot"
              },
              "name": {
                "#text": "pPrivateDataSlot"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "$name": "vkCreatePrivateDataSlotEXT",
          "$alias": "vkCreatePrivateDataSlot"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyPrivateDataSlot"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPrivateDataSlot"
              },
              "name": {
                "#text": "privateDataSlot"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "$name": "vkDestroyPrivateDataSlotEXT",
          "$alias": "vkDestroyPrivateDataSlot"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetPrivateData"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkObjectType"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "objectHandle"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "VkPrivateDataSlot"
              },
              "name": {
                "#text": "privateDataSlot"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "data"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "$name": "vkSetPrivateDataEXT",
          "$alias": "vkSetPrivateData"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetPrivateData"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkObjectType"
              },
              "name": {
                "#text": "objectType"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "objectHandle"
              },
              "$objecttype": "objectType"
            },
            {
              "type": {
                "#text": "VkPrivateDataSlot"
              },
              "name": {
                "#text": "privateDataSlot"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ]
        },
        {
          "$name": "vkGetPrivateDataEXT",
          "$alias": "vkGetPrivateData"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyBuffer2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyBufferInfo2"
              },
              "name": {
                "#text": "pCopyBufferInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdCopyBuffer2KHR",
          "$alias": "vkCmdCopyBuffer2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyImage2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyImageInfo2"
              },
              "name": {
                "#text": "pCopyImageInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdCopyImage2KHR",
          "$alias": "vkCmdCopyImage2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBlitImage2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkBlitImageInfo2"
              },
              "name": {
                "#text": "pBlitImageInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdBlitImage2KHR",
          "$alias": "vkCmdBlitImage2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyBufferToImage2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyBufferToImageInfo2"
              },
              "name": {
                "#text": "pCopyBufferToImageInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdCopyBufferToImage2KHR",
          "$alias": "vkCmdCopyBufferToImage2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyImageToBuffer2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyImageToBufferInfo2"
              },
              "name": {
                "#text": "pCopyImageToBufferInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdCopyImageToBuffer2KHR",
          "$alias": "vkCmdCopyImageToBuffer2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdResolveImage2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkResolveImageInfo2"
              },
              "name": {
                "#text": "pResolveImageInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdResolveImage2KHR",
          "$alias": "vkCmdResolveImage2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetFragmentShadingRateKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkExtent2D"
              },
              "name": {
                "#text": "pFragmentSize"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateCombinerOpKHR"
              },
              "name": {
                "#text": "combinerOps"
              },
              "#text": "const[2]"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceFragmentShadingRatesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pFragmentShadingRateCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceFragmentShadingRateKHR"
              },
              "name": {
                "#text": "pFragmentShadingRates"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pFragmentShadingRateCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetFragmentShadingRateEnumNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateNV"
              },
              "name": {
                "#text": "shadingRate"
              }
            },
            {
              "type": {
                "#text": "VkFragmentShadingRateCombinerOpKHR"
              },
              "name": {
                "#text": "combinerOps"
              },
              "#text": "const[2]"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetAccelerationStructureBuildSizesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildTypeKHR"
              },
              "name": {
                "#text": "buildType"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildGeometryInfoKHR"
              },
              "name": {
                "#text": "pBuildInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pMaxPrimitiveCounts"
              },
              "#text": "const*",
              "$optional": true,
              "$len": "pBuildInfo->geometryCount"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildSizesInfoKHR"
              },
              "name": {
                "#text": "pSizeInfo"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetVertexInputEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexBindingDescriptionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVertexInputBindingDescription2EXT"
              },
              "name": {
                "#text": "pVertexBindingDescriptions"
              },
              "#text": "const*",
              "$len": "vertexBindingDescriptionCount"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "vertexAttributeDescriptionCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVertexInputAttributeDescription2EXT"
              },
              "name": {
                "#text": "pVertexAttributeDescriptions"
              },
              "#text": "const*",
              "$len": "vertexAttributeDescriptionCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetColorWriteEnableEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "attachmentCount"
              }
            },
            {
              "type": {
                "#text": "VkBool32"
              },
              "name": {
                "#text": "pColorWriteEnables"
              },
              "#text": "const*",
              "$len": "attachmentCount"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetEvent2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              }
            },
            {
              "type": {
                "#text": "VkDependencyInfo"
              },
              "name": {
                "#text": "pDependencyInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "outside",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "$name": "vkCmdSetEvent2KHR",
          "$alias": "vkCmdSetEvent2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdResetEvent2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "event"
              }
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "stageMask"
              },
              "$optional": true
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "outside",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "$name": "vkCmdResetEvent2KHR",
          "$alias": "vkCmdResetEvent2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWaitEvents2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "eventCount"
              }
            },
            {
              "type": {
                "#text": "VkEvent"
              },
              "name": {
                "#text": "pEvents"
              },
              "#text": "const*",
              "$len": "eventCount"
            },
            {
              "type": {
                "#text": "VkDependencyInfo"
              },
              "name": {
                "#text": "pDependencyInfos"
              },
              "#text": "const*",
              "$len": "eventCount"
            }
          ],
          "$queues": "graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "$name": "vkCmdWaitEvents2KHR",
          "$alias": "vkCmdWaitEvents2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdPipelineBarrier2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDependencyInfo"
              },
              "name": {
                "#text": "pDependencyInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "transfer,graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "synchronization"
        },
        {
          "$name": "vkCmdPipelineBarrier2KHR",
          "$alias": "vkCmdPipelineBarrier2"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkQueueSubmit2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "submitCount"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkSubmitInfo2"
              },
              "name": {
                "#text": "pSubmits"
              },
              "#text": "const*",
              "$len": "submitCount"
            },
            {
              "type": {
                "#text": "VkFence"
              },
              "name": {
                "#text": "fence"
              },
              "$optional": true,
              "$externsync": true
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST"
        },
        {
          "$name": "vkQueueSubmit2KHR",
          "$alias": "vkQueueSubmit2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteTimestamp2"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "stage"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "query"
              }
            }
          ],
          "$queues": "transfer,graphics,compute,decode,encode",
          "$renderpass": "both",
          "$videocoding": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "$name": "vkCmdWriteTimestamp2KHR",
          "$alias": "vkCmdWriteTimestamp2"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteBufferMarker2AMD"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineStageFlags2"
              },
              "name": {
                "#text": "stage"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBuffer"
              },
              "name": {
                "#text": "dstBuffer"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "dstOffset"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "marker"
              }
            }
          ],
          "$queues": "transfer,graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetQueueCheckpointData2NV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkQueue"
              },
              "name": {
                "#text": "queue"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pCheckpointDataCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkCheckpointData2NV"
              },
              "name": {
                "#text": "pCheckpointData"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pCheckpointDataCount"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceVideoCapabilitiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkVideoProfileInfoKHR"
              },
              "name": {
                "#text": "pVideoProfile"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkVideoCapabilitiesKHR"
              },
              "name": {
                "#text": "pCapabilities"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceVideoFormatPropertiesKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkPhysicalDeviceVideoFormatInfoKHR"
              },
              "name": {
                "#text": "pVideoFormatInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pVideoFormatPropertyCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkVideoFormatPropertiesKHR"
              },
              "name": {
                "#text": "pVideoFormatProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pVideoFormatPropertyCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateVideoSessionKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "pVideoSession"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyVideoSessionKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "videoSession"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateVideoSessionParametersKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersCreateInfoKHR"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersKHR"
              },
              "name": {
                "#text": "pVideoSessionParameters"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_TOO_MANY_OBJECTS"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkUpdateVideoSessionParametersKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersKHR"
              },
              "name": {
                "#text": "videoSessionParameters"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersUpdateInfoKHR"
              },
              "name": {
                "#text": "pUpdateInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_TOO_MANY_OBJECTS"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyVideoSessionParametersKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionParametersKHR"
              },
              "name": {
                "#text": "videoSessionParameters"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetVideoSessionMemoryRequirementsKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "videoSession"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pMemoryRequirementsCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkVideoSessionMemoryRequirementsKHR"
              },
              "name": {
                "#text": "pMemoryRequirements"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pMemoryRequirementsCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindVideoSessionMemoryKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkVideoSessionKHR"
              },
              "name": {
                "#text": "videoSession"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bindSessionMemoryInfoCount"
              }
            },
            {
              "type": {
                "#text": "VkBindVideoSessionMemoryInfoKHR"
              },
              "name": {
                "#text": "pBindSessionMemoryInfos"
              },
              "#text": "const*",
              "$len": "bindSessionMemoryInfoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDecodeVideoKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkVideoDecodeInfoKHR"
              },
              "name": {
                "#text": "pDecodeInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "decode",
          "$renderpass": "outside",
          "$videocoding": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginVideoCodingKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkVideoBeginCodingInfoKHR"
              },
              "name": {
                "#text": "pBeginInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "decode,encode",
          "$renderpass": "outside",
          "$videocoding": "outside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdControlVideoCodingKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkVideoCodingControlInfoKHR"
              },
              "name": {
                "#text": "pCodingControlInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "decode,encode",
          "$renderpass": "outside",
          "$videocoding": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndVideoCodingKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkVideoEndCodingInfoKHR"
              },
              "name": {
                "#text": "pEndCodingInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "decode,encode",
          "$renderpass": "outside",
          "$videocoding": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action,state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEncodeVideoKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkVideoEncodeInfoKHR"
              },
              "name": {
                "#text": "pEncodeInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "encode",
          "$renderpass": "outside",
          "$videocoding": "inside",
          "$cmdbufferlevel": "primary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDecompressMemoryNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "decompressRegionCount"
              }
            },
            {
              "type": {
                "#text": "VkDecompressMemoryRegionNV"
              },
              "name": {
                "#text": "pDecompressMemoryRegions"
              },
              "#text": "const*",
              "$len": "decompressRegionCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdDecompressMemoryIndirectCountNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "indirectCommandsAddress"
              }
            },
            {
              "type": {
                "#text": "VkDeviceAddress"
              },
              "name": {
                "#text": "indirectCommandsCountAddress"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateCuModuleNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCuModuleCreateInfoNVX"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCuModuleNVX"
              },
              "name": {
                "#text": "pModule"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateCuFunctionNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCuFunctionCreateInfoNVX"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCuFunctionNVX"
              },
              "name": {
                "#text": "pFunction"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyCuModuleNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCuModuleNVX"
              },
              "name": {
                "#text": "module"
              }
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyCuFunctionNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkCuFunctionNVX"
              },
              "name": {
                "#text": "function"
              }
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCuLaunchKernelNVX"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              }
            },
            {
              "type": {
                "#text": "VkCuLaunchInfoNVX"
              },
              "name": {
                "#text": "pLaunchInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorSetLayoutSizeEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pLayoutSizeInBytes"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorSetLayoutBindingOffsetEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "binding"
              }
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pOffset"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorGetInfoEXT"
              },
              "name": {
                "#text": "pDescriptorInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pDescriptor"
              },
              "#text": "*",
              "$len": "dataSize"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindDescriptorBuffersEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "bufferCount"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorBufferBindingInfoEXT"
              },
              "name": {
                "#text": "pBindingInfos"
              },
              "#text": "const*",
              "$len": "bufferCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdSetDescriptorBufferOffsetsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstSet"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "setCount"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pBufferIndices"
              },
              "#text": "const*",
              "$len": "setCount"
            },
            {
              "type": {
                "#text": "VkDeviceSize"
              },
              "name": {
                "#text": "pOffsets"
              },
              "#text": "const*",
              "$len": "setCount"
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkPipelineBindPoint"
              },
              "name": {
                "#text": "pipelineBindPoint"
              }
            },
            {
              "type": {
                "#text": "VkPipelineLayout"
              },
              "name": {
                "#text": "layout"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "set"
              }
            }
          ],
          "$queues": "graphics,compute",
          "$renderpass": "both",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "state"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetBufferOpaqueCaptureDescriptorDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCaptureDescriptorDataInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetImageOpaqueCaptureDescriptorDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageCaptureDescriptorDataInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetImageViewOpaqueCaptureDescriptorDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImageViewCaptureDescriptorDataInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetSamplerOpaqueCaptureDescriptorDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSamplerCaptureDescriptorDataInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCaptureDescriptorDataInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkSetDeviceMemoryPriorityEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceMemory"
              },
              "name": {
                "#text": "memory"
              }
            },
            {
              "type": {
                "#text": "float"
              },
              "name": {
                "#text": "priority"
              }
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkAcquireDrmDisplayEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "drmFd"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDrmDisplayEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "int32_t"
              },
              "name": {
                "#text": "drmFd"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "connectorId"
              }
            },
            {
              "type": {
                "#text": "VkDisplayKHR"
              },
              "name": {
                "#text": "display"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkWaitForPresentKHR"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkSwapchainKHR"
              },
              "name": {
                "#text": "swapchain"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "presentId"
              }
            },
            {
              "type": {
                "#text": "uint64_t"
              },
              "name": {
                "#text": "timeout"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_TIMEOUT,VK_SUBOPTIMAL_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_DEVICE_LOST,VK_ERROR_OUT_OF_DATE_KHR,VK_ERROR_SURFACE_LOST_KHR,VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateBufferCollectionFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionCreateInfoFUCHSIA"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "pCollection"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_EXTERNAL_HANDLE,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetBufferCollectionBufferConstraintsFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "VkBufferConstraintsInfoFUCHSIA"
              },
              "name": {
                "#text": "pBufferConstraintsInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkSetBufferCollectionImageConstraintsFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "VkImageConstraintsInfoFUCHSIA"
              },
              "name": {
                "#text": "pImageConstraintsInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_FORMAT_NOT_SUPPORTED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyBufferCollectionFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetBufferCollectionPropertiesFUCHSIA"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionFUCHSIA"
              },
              "name": {
                "#text": "collection"
              }
            },
            {
              "type": {
                "#text": "VkBufferCollectionPropertiesFUCHSIA"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBeginRendering"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkRenderingInfo"
              },
              "name": {
                "#text": "pRenderingInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "graphics",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "$name": "vkCmdBeginRenderingKHR",
          "$alias": "vkCmdBeginRendering"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdEndRendering"
            }
          },
          "param": {
            "type": {
              "#text": "VkCommandBuffer"
            },
            "name": {
              "#text": "commandBuffer"
            },
            "$externsync": true
          },
          "$queues": "graphics",
          "$renderpass": "inside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action,state"
        },
        {
          "$name": "vkCmdEndRenderingKHR",
          "$alias": "vkCmdEndRendering"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSetBindingReferenceVALVE"
              },
              "name": {
                "#text": "pBindingReference"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkDescriptorSetLayoutHostMappingInfoVALVE"
              },
              "name": {
                "#text": "pHostMapping"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDescriptorSetHostMappingVALVE"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDescriptorSet"
              },
              "name": {
                "#text": "descriptorSet"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "ppData"
              },
              "#text": "**"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMicromapCreateInfoEXT"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "pMicromap"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdBuildMicromapsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "infoCount"
              }
            },
            {
              "type": {
                "#text": "VkMicromapBuildInfoEXT"
              },
              "name": {
                "#text": "pInfos"
              },
              "#text": "const*",
              "$len": "infoCount"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBuildMicromapsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "infoCount"
              }
            },
            {
              "type": {
                "#text": "VkMicromapBuildInfoEXT"
              },
              "name": {
                "#text": "pInfos"
              },
              "#text": "const*",
              "$len": "infoCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "micromap"
              },
              "$optional": true,
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyMicromapInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyMicromapInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMicromapToMemoryEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyMicromapToMemoryInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyMicromapToMemoryEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyMicromapToMemoryInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdCopyMemoryToMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "VkCopyMemoryToMicromapInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCopyMemoryToMicromapEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeferredOperationKHR"
              },
              "name": {
                "#text": "deferredOperation"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkCopyMemoryToMicromapInfoEXT"
              },
              "name": {
                "#text": "pInfo"
              },
              "#text": "const*"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_OPERATION_DEFERRED_KHR,VK_OPERATION_NOT_DEFERRED_KHR",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdWriteMicromapsPropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              },
              "$externsync": true
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "micromapCount"
              }
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "pMicromaps"
              },
              "#text": "const*",
              "$len": "micromapCount"
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "VkQueryPool"
              },
              "name": {
                "#text": "queryPool"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "firstQuery"
              }
            }
          ],
          "$queues": "compute",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkWriteMicromapsPropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "micromapCount"
              }
            },
            {
              "type": {
                "#text": "VkMicromapEXT"
              },
              "name": {
                "#text": "pMicromaps"
              },
              "#text": "const*",
              "$len": "micromapCount"
            },
            {
              "type": {
                "#text": "VkQueryType"
              },
              "name": {
                "#text": "queryType"
              }
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "dataSize"
              }
            },
            {
              "type": {
                "#text": "void"
              },
              "name": {
                "#text": "pData"
              },
              "#text": "*",
              "$len": "dataSize"
            },
            {
              "type": {
                "#text": "size_t"
              },
              "name": {
                "#text": "stride"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetDeviceMicromapCompatibilityEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkMicromapVersionInfoEXT"
              },
              "name": {
                "#text": "pVersionInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAccelerationStructureCompatibilityKHR"
              },
              "name": {
                "#text": "pCompatibility"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetMicromapBuildSizesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkAccelerationStructureBuildTypeKHR"
              },
              "name": {
                "#text": "buildType"
              }
            },
            {
              "type": {
                "#text": "VkMicromapBuildInfoEXT"
              },
              "name": {
                "#text": "pBuildInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkMicromapBuildSizesInfoEXT"
              },
              "name": {
                "#text": "pSizeInfo"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetShaderModuleIdentifierEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkShaderModule"
              },
              "name": {
                "#text": "shaderModule"
              }
            },
            {
              "type": {
                "#text": "VkShaderModuleIdentifierEXT"
              },
              "name": {
                "#text": "pIdentifier"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetShaderModuleCreateInfoIdentifierEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkShaderModuleCreateInfo"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkShaderModuleIdentifierEXT"
              },
              "name": {
                "#text": "pIdentifier"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkGetImageSubresourceLayout2EXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkImage"
              },
              "name": {
                "#text": "image"
              }
            },
            {
              "type": {
                "#text": "VkImageSubresource2EXT"
              },
              "name": {
                "#text": "pSubresource"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkSubresourceLayout2EXT"
              },
              "name": {
                "#text": "pLayout"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPipelinePropertiesEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkPipelineInfoEXT"
              },
              "name": {
                "#text": "pPipelineInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkBaseOutStructure"
              },
              "name": {
                "#text": "pPipelineProperties"
              },
              "#text": "*",
              "$noautovalidity": true,
              "$validstructs": "VkPipelinePropertiesIdentifierEXT"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkExportMetalObjectsEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkExportMetalObjectsInfoEXT"
              },
              "name": {
                "#text": "pMetalObjectsInfo"
              },
              "#text": "*"
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetFramebufferTilePropertiesQCOM"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkFramebuffer"
              },
              "name": {
                "#text": "framebuffer"
              }
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pPropertiesCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkTilePropertiesQCOM"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pPropertiesCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDynamicRenderingTilePropertiesQCOM"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkRenderingInfo"
              },
              "name": {
                "#text": "pRenderingInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkTilePropertiesQCOM"
              },
              "name": {
                "#text": "pProperties"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkPhysicalDevice"
              },
              "name": {
                "#text": "physicalDevice"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowImageFormatInfoNV"
              },
              "name": {
                "#text": "pOpticalFlowImageFormatInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "uint32_t"
              },
              "name": {
                "#text": "pFormatCount"
              },
              "#text": "*",
              "$optional": "false,true"
            },
            {
              "type": {
                "#text": "VkOpticalFlowImageFormatPropertiesNV"
              },
              "name": {
                "#text": "pImageFormatProperties"
              },
              "#text": "*",
              "$optional": true,
              "$len": "pFormatCount"
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_EXTENSION_NOT_PRESENT,VK_ERROR_INITIALIZATION_FAILED,VK_ERROR_FORMAT_NOT_SUPPORTED"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkCreateOpticalFlowSessionNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionCreateInfoNV"
              },
              "name": {
                "#text": "pCreateInfo"
              },
              "#text": "const*"
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionNV"
              },
              "name": {
                "#text": "pSession"
              },
              "#text": "*"
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkDestroyOpticalFlowSessionNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionNV"
              },
              "name": {
                "#text": "session"
              }
            },
            {
              "type": {
                "#text": "VkAllocationCallbacks"
              },
              "name": {
                "#text": "pAllocator"
              },
              "#text": "const*",
              "$optional": true
            }
          ]
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkBindOpticalFlowSessionImageNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionNV"
              },
              "name": {
                "#text": "session"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionBindingPointNV"
              },
              "name": {
                "#text": "bindingPoint"
              }
            },
            {
              "type": {
                "#text": "VkImageView"
              },
              "name": {
                "#text": "view"
              },
              "$optional": true
            },
            {
              "type": {
                "#text": "VkImageLayout"
              },
              "name": {
                "#text": "layout"
              }
            }
          ],
          "$successcodes": "VK_SUCCESS",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_INITIALIZATION_FAILED"
        },
        {
          "proto": {
            "type": {
              "#text": "void"
            },
            "name": {
              "#text": "vkCmdOpticalFlowExecuteNV"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkCommandBuffer"
              },
              "name": {
                "#text": "commandBuffer"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowSessionNV"
              },
              "name": {
                "#text": "session"
              }
            },
            {
              "type": {
                "#text": "VkOpticalFlowExecuteInfoNV"
              },
              "name": {
                "#text": "pExecuteInfo"
              },
              "#text": "const*"
            }
          ],
          "$queues": "opticalflow",
          "$renderpass": "outside",
          "$cmdbufferlevel": "primary,secondary",
          "$tasks": "action"
        },
        {
          "proto": {
            "type": {
              "#text": "VkResult"
            },
            "name": {
              "#text": "vkGetDeviceFaultInfoEXT"
            }
          },
          "param": [
            {
              "type": {
                "#text": "VkDevice"
              },
              "name": {
                "#text": "device"
              }
            },
            {
              "type": {
                "#text": "VkDeviceFaultCountsEXT"
              },
              "name": {
                "#text": "pFaultCounts"
              },
              "#text": "*"
            },
            {
              "type": {
                "#text": "VkDeviceFaultInfoEXT"
              },
              "name": {
                "#text": "pFaultInfo"
              },
              "#text": "*",
              "$optional": true
            }
          ],
          "$successcodes": "VK_SUCCESS,VK_INCOMPLETE",
          "$errorcodes": "VK_ERROR_OUT_OF_HOST_MEMORY"
        }
      ],
      "$comment": "Vulkan command definitions"
    },
    "feature": [
      {
        "require": [
          {
            "type": [
              {
                "$name": "vk_platform"
              },
              {
                "$name": "VK_DEFINE_HANDLE"
              },
              {
                "$name": "VK_USE_64_BIT_PTR_DEFINES"
              },
              {
                "$name": "VK_DEFINE_NON_DISPATCHABLE_HANDLE"
              },
              {
                "$name": "VK_NULL_HANDLE"
              }
            ],
            "$comment": "Header boilerplate"
          },
          {
            "type": [
              {
                "$name": "VkBool32"
              },
              {
                "$name": "VkDeviceAddress"
              },
              {
                "$name": "VkDeviceSize"
              },
              {
                "$name": "VkExtent2D"
              },
              {
                "$name": "VkExtent3D"
              },
              {
                "$name": "VkFlags"
              },
              {
                "$name": "VkOffset2D"
              },
              {
                "$name": "VkOffset3D"
              },
              {
                "$name": "VkRect2D"
              },
              {
                "$name": "VkResult"
              },
              {
                "$name": "VkStructureType"
              }
            ],
            "$comment": "Fundamental types used by many commands and structures"
          },
          {
            "enum": [
              {
                "$name": "VK_ATTACHMENT_UNUSED"
              },
              {
                "$name": "VK_FALSE"
              },
              {
                "$name": "VK_LOD_CLAMP_NONE"
              },
              {
                "$name": "VK_QUEUE_FAMILY_IGNORED"
              },
              {
                "$name": "VK_REMAINING_ARRAY_LAYERS"
              },
              {
                "$name": "VK_REMAINING_MIP_LEVELS"
              },
              {
                "$name": "VK_SUBPASS_EXTERNAL"
              },
              {
                "$name": "VK_TRUE"
              },
              {
                "$name": "VK_WHOLE_SIZE"
              },
              {
                "$name": "VK_MAX_MEMORY_TYPES"
              },
              {
                "$name": "VK_MAX_PHYSICAL_DEVICE_NAME_SIZE"
              },
              {
                "$name": "VK_UUID_SIZE"
              },
              {
                "$name": "VK_MAX_EXTENSION_NAME_SIZE"
              },
              {
                "$name": "VK_MAX_DESCRIPTION_SIZE"
              },
              {
                "$name": "VK_MAX_MEMORY_HEAPS"
              }
            ],
            "type": {
              "$name": "VkPipelineCacheHeaderVersion"
            },
            "$comment": "API constants"
          },
          {
            "type": [
              {
                "$name": "VkBaseInStructure"
              },
              {
                "$name": "VkBaseOutStructure"
              },
              {
                "$name": "VkBufferMemoryBarrier"
              },
              {
                "$name": "VkDispatchIndirectCommand"
              },
              {
                "$name": "VkDrawIndexedIndirectCommand"
              },
              {
                "$name": "VkDrawIndirectCommand"
              },
              {
                "$name": "VkImageMemoryBarrier"
              },
              {
                "$name": "VkMemoryBarrier"
              },
              {
                "$name": "VkObjectType"
              },
              {
                "$name": "VkPipelineCacheHeaderVersionOne"
              },
              {
                "$name": "VkVendorId"
              }
            ],
            "$comment": "These types are part of the API, though not directly used in API commands or data structures"
          },
          {
            "type": [
              {
                "$name": "VK_API_VERSION"
              },
              {
                "$name": "VK_API_VERSION_1_0"
              },
              {
                "$name": "VK_HEADER_VERSION"
              },
              {
                "$name": "VK_HEADER_VERSION_COMPLETE"
              },
              {
                "$name": "VK_MAKE_VERSION"
              },
              {
                "$name": "VK_VERSION_MAJOR"
              },
              {
                "$name": "VK_VERSION_MINOR"
              },
              {
                "$name": "VK_VERSION_PATCH"
              },
              {
                "$name": "VK_MAKE_API_VERSION"
              },
              {
                "$name": "VK_API_VERSION_VARIANT"
              },
              {
                "$name": "VK_API_VERSION_MAJOR"
              },
              {
                "$name": "VK_API_VERSION_MINOR"
              },
              {
                "$name": "VK_API_VERSION_PATCH"
              }
            ],
            "$comment": "API version macros"
          },
          {
            "type": [
              {
                "$name": "PFN_vkAllocationFunction"
              },
              {
                "$name": "PFN_vkFreeFunction"
              },
              {
                "$name": "PFN_vkInternalAllocationNotification"
              },
              {
                "$name": "PFN_vkInternalFreeNotification"
              },
              {
                "$name": "PFN_vkReallocationFunction"
              },
              {
                "$name": "PFN_vkVoidFunction"
              },
              {
                "$name": "VkAllocationCallbacks"
              },
              {
                "$name": "VkApplicationInfo"
              },
              {
                "$name": "VkFormat"
              },
              {
                "$name": "VkFormatFeatureFlagBits"
              },
              {
                "$name": "VkFormatFeatureFlags"
              },
              {
                "$name": "VkFormatProperties"
              },
              {
                "$name": "VkImageCreateFlagBits"
              },
              {
                "$name": "VkImageCreateFlags"
              },
              {
                "$name": "VkImageFormatProperties"
              },
              {
                "$name": "VkImageTiling"
              },
              {
                "$name": "VkImageType"
              },
              {
                "$name": "VkImageUsageFlagBits"
              },
              {
                "$name": "VkImageUsageFlags"
              },
              {
                "$name": "VkInstance"
              },
              {
                "$name": "VkInstanceCreateFlags"
              },
              {
                "$name": "VkInstanceCreateFlagBits"
              },
              {
                "$name": "VkInstanceCreateInfo"
              },
              {
                "$name": "VkInternalAllocationType"
              },
              {
                "$name": "VkMemoryHeap"
              },
              {
                "$name": "VkMemoryHeapFlagBits"
              },
              {
                "$name": "VkMemoryHeapFlags"
              },
              {
                "$name": "VkMemoryPropertyFlagBits"
              },
              {
                "$name": "VkMemoryPropertyFlags"
              },
              {
                "$name": "VkMemoryType"
              },
              {
                "$name": "VkPhysicalDevice"
              },
              {
                "$name": "VkPhysicalDeviceFeatures"
              },
              {
                "$name": "VkPhysicalDeviceLimits"
              },
              {
                "$name": "VkPhysicalDeviceMemoryProperties"
              },
              {
                "$name": "VkPhysicalDeviceProperties"
              },
              {
                "$name": "VkPhysicalDeviceSparseProperties"
              },
              {
                "$name": "VkPhysicalDeviceType"
              },
              {
                "$name": "VkQueueFamilyProperties"
              },
              {
                "$name": "VkQueueFlagBits"
              },
              {
                "$name": "VkQueueFlags"
              },
              {
                "$name": "VkSampleCountFlagBits"
              },
              {
                "$name": "VkSampleCountFlags"
              },
              {
                "$name": "VkSystemAllocationScope"
              }
            ],
            "command": [
              {
                "$name": "vkCreateInstance"
              },
              {
                "$name": "vkDestroyInstance"
              },
              {
                "$name": "vkEnumeratePhysicalDevices"
              },
              {
                "$name": "vkGetPhysicalDeviceFeatures"
              },
              {
                "$name": "vkGetPhysicalDeviceFormatProperties"
              },
              {
                "$name": "vkGetPhysicalDeviceImageFormatProperties"
              },
              {
                "$name": "vkGetPhysicalDeviceProperties"
              },
              {
                "$name": "vkGetPhysicalDeviceQueueFamilyProperties"
              },
              {
                "$name": "vkGetPhysicalDeviceMemoryProperties"
              },
              {
                "$name": "vkGetInstanceProcAddr"
              },
              {
                "$name": "vkGetDeviceProcAddr"
              }
            ],
            "$comment": "Device initialization"
          },
          {
            "type": [
              {
                "$name": "VkDevice"
              },
              {
                "$name": "VkDeviceCreateFlags",
                "$comment": "Will add VkDeviceCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkDeviceCreateInfo"
              },
              {
                "$name": "VkDeviceQueueCreateFlags",
                "$comment": "VkDeviceQueueCreateFlagBits was added later"
              },
              {
                "$name": "VkDeviceQueueCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateDevice"
              },
              {
                "$name": "vkDestroyDevice"
              }
            ],
            "$comment": "Device commands"
          },
          {
            "type": {
              "$name": "VkExtensionProperties"
            },
            "command": [
              {
                "$name": "vkEnumerateInstanceExtensionProperties"
              },
              {
                "$name": "vkEnumerateDeviceExtensionProperties"
              }
            ],
            "$comment": "Extension discovery commands"
          },
          {
            "type": {
              "$name": "VkLayerProperties"
            },
            "command": [
              {
                "$name": "vkEnumerateInstanceLayerProperties"
              },
              {
                "$name": "vkEnumerateDeviceLayerProperties"
              }
            ],
            "$comment": "Layer discovery commands"
          },
          {
            "type": [
              {
                "$name": "VkPipelineStageFlagBits"
              },
              {
                "$name": "VkPipelineStageFlags"
              },
              {
                "$name": "VkQueue"
              },
              {
                "$name": "VkSubmitInfo"
              }
            ],
            "command": [
              {
                "$name": "vkGetDeviceQueue"
              },
              {
                "$name": "vkQueueSubmit"
              },
              {
                "$name": "vkQueueWaitIdle"
              },
              {
                "$name": "vkDeviceWaitIdle"
              }
            ],
            "$comment": "Queue commands"
          },
          {
            "type": [
              {
                "$name": "VkMappedMemoryRange"
              },
              {
                "$name": "VkMemoryAllocateInfo"
              },
              {
                "$name": "VkMemoryMapFlags"
              }
            ],
            "command": [
              {
                "$name": "vkAllocateMemory"
              },
              {
                "$name": "vkFreeMemory"
              },
              {
                "$name": "vkMapMemory"
              },
              {
                "$name": "vkUnmapMemory"
              },
              {
                "$name": "vkFlushMappedMemoryRanges"
              },
              {
                "$name": "vkInvalidateMappedMemoryRanges"
              },
              {
                "$name": "vkGetDeviceMemoryCommitment"
              }
            ],
            "$comment": "Memory commands"
          },
          {
            "type": [
              {
                "$name": "VkDeviceMemory"
              },
              {
                "$name": "VkMemoryRequirements"
              }
            ],
            "command": [
              {
                "$name": "vkBindBufferMemory"
              },
              {
                "$name": "vkBindImageMemory"
              },
              {
                "$name": "vkGetBufferMemoryRequirements"
              },
              {
                "$name": "vkGetImageMemoryRequirements"
              }
            ],
            "$comment": "Memory management API commands"
          },
          {
            "type": [
              {
                "$name": "VkBindSparseInfo"
              },
              {
                "$name": "VkImageAspectFlagBits"
              },
              {
                "$name": "VkImageAspectFlags"
              },
              {
                "$name": "VkImageSubresource"
              },
              {
                "$name": "VkSparseBufferMemoryBindInfo"
              },
              {
                "$name": "VkSparseImageFormatFlagBits"
              },
              {
                "$name": "VkSparseImageFormatFlags"
              },
              {
                "$name": "VkSparseImageFormatProperties"
              },
              {
                "$name": "VkSparseImageMemoryBind"
              },
              {
                "$name": "VkSparseImageMemoryBindInfo"
              },
              {
                "$name": "VkSparseImageMemoryRequirements"
              },
              {
                "$name": "VkSparseImageOpaqueMemoryBindInfo"
              },
              {
                "$name": "VkSparseMemoryBind"
              },
              {
                "$name": "VkSparseMemoryBindFlagBits"
              },
              {
                "$name": "VkSparseMemoryBindFlags"
              }
            ],
            "command": [
              {
                "$name": "vkGetImageSparseMemoryRequirements"
              },
              {
                "$name": "vkGetPhysicalDeviceSparseImageFormatProperties"
              },
              {
                "$name": "vkQueueBindSparse"
              }
            ],
            "$comment": "Sparse resource memory management API commands"
          },
          {
            "type": [
              {
                "$name": "VkFence"
              },
              {
                "$name": "VkFenceCreateFlagBits"
              },
              {
                "$name": "VkFenceCreateFlags"
              },
              {
                "$name": "VkFenceCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateFence"
              },
              {
                "$name": "vkDestroyFence"
              },
              {
                "$name": "vkResetFences"
              },
              {
                "$name": "vkGetFenceStatus"
              },
              {
                "$name": "vkWaitForFences"
              }
            ],
            "$comment": "Fence commands"
          },
          {
            "type": [
              {
                "$name": "VkSemaphore"
              },
              {
                "$name": "VkSemaphoreCreateFlags",
                "$comment": "Will add VkSemaphoreCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkSemaphoreCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateSemaphore"
              },
              {
                "$name": "vkDestroySemaphore"
              }
            ],
            "$comment": "Queue semaphore commands"
          },
          {
            "type": [
              {
                "$name": "VkEvent"
              },
              {
                "$name": "VkEventCreateFlags"
              },
              {
                "$name": "VkEventCreateFlagBits"
              },
              {
                "$name": "VkEventCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateEvent"
              },
              {
                "$name": "vkDestroyEvent"
              },
              {
                "$name": "vkGetEventStatus"
              },
              {
                "$name": "vkSetEvent"
              },
              {
                "$name": "vkResetEvent"
              }
            ],
            "$comment": "Event commands"
          },
          {
            "type": [
              {
                "$name": "VkQueryPipelineStatisticFlagBits"
              },
              {
                "$name": "VkQueryPipelineStatisticFlags"
              },
              {
                "$name": "VkQueryPool"
              },
              {
                "$name": "VkQueryPoolCreateFlags",
                "$comment": "Will add VkQueryPoolCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkQueryPoolCreateInfo"
              },
              {
                "$name": "VkQueryResultFlagBits"
              },
              {
                "$name": "VkQueryResultFlags"
              },
              {
                "$name": "VkQueryType"
              }
            ],
            "command": [
              {
                "$name": "vkCreateQueryPool"
              },
              {
                "$name": "vkDestroyQueryPool"
              },
              {
                "$name": "vkGetQueryPoolResults"
              }
            ],
            "$comment": "Query commands"
          },
          {
            "type": [
              {
                "$name": "VkBuffer"
              },
              {
                "$name": "VkBufferCreateFlagBits"
              },
              {
                "$name": "VkBufferCreateFlags"
              },
              {
                "$name": "VkBufferCreateInfo"
              },
              {
                "$name": "VkBufferUsageFlagBits"
              },
              {
                "$name": "VkBufferUsageFlags"
              },
              {
                "$name": "VkSharingMode"
              }
            ],
            "command": [
              {
                "$name": "vkCreateBuffer"
              },
              {
                "$name": "vkDestroyBuffer"
              }
            ],
            "$comment": "Buffer commands"
          },
          {
            "type": [
              {
                "$name": "VkBufferView"
              },
              {
                "$name": "VkBufferViewCreateFlags",
                "$comment": "Will add VkBufferViewFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkBufferViewCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateBufferView"
              },
              {
                "$name": "vkDestroyBufferView"
              }
            ],
            "$comment": "Buffer view commands"
          },
          {
            "type": [
              {
                "$name": "VkImage"
              },
              {
                "$name": "VkImageCreateInfo"
              },
              {
                "$name": "VkImageLayout"
              },
              {
                "$name": "VkSubresourceLayout"
              }
            ],
            "command": [
              {
                "$name": "vkCreateImage"
              },
              {
                "$name": "vkDestroyImage"
              },
              {
                "$name": "vkGetImageSubresourceLayout"
              }
            ],
            "$comment": "Image commands"
          },
          {
            "type": [
              {
                "$name": "VkComponentMapping"
              },
              {
                "$name": "VkComponentSwizzle"
              },
              {
                "$name": "VkImageSubresourceRange"
              },
              {
                "$name": "VkImageView"
              },
              {
                "$name": "VkImageViewCreateFlagBits"
              },
              {
                "$name": "VkImageViewCreateFlags"
              },
              {
                "$name": "VkImageViewCreateInfo"
              },
              {
                "$name": "VkImageViewType"
              }
            ],
            "command": [
              {
                "$name": "vkCreateImageView"
              },
              {
                "$name": "vkDestroyImageView"
              }
            ],
            "$comment": "Image view commands"
          },
          {
            "type": [
              {
                "$name": "VkShaderModule"
              },
              {
                "$name": "VkShaderModuleCreateFlags"
              },
              {
                "$name": "VkShaderModuleCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreateShaderModule"
              },
              {
                "$name": "vkDestroyShaderModule"
              }
            ],
            "$comment": "Shader commands"
          },
          {
            "type": [
              {
                "$name": "VkPipelineCache"
              },
              {
                "$name": "VkPipelineCacheCreateFlags",
                "$comment": "VkPipelineCacheCreateFlagBits was added later"
              },
              {
                "$name": "VkPipelineCacheCreateInfo"
              }
            ],
            "command": [
              {
                "$name": "vkCreatePipelineCache"
              },
              {
                "$name": "vkDestroyPipelineCache"
              },
              {
                "$name": "vkGetPipelineCacheData"
              },
              {
                "$name": "vkMergePipelineCaches"
              }
            ],
            "$comment": "Pipeline Cache commands"
          },
          {
            "type": [
              {
                "$name": "VkBlendFactor"
              },
              {
                "$name": "VkBlendOp"
              },
              {
                "$name": "VkColorComponentFlagBits"
              },
              {
                "$name": "VkColorComponentFlags"
              },
              {
                "$name": "VkCompareOp"
              },
              {
                "$name": "VkComputePipelineCreateInfo"
              },
              {
                "$name": "VkCullModeFlagBits"
              },
              {
                "$name": "VkCullModeFlags"
              },
              {
                "$name": "VkDynamicState"
              },
              {
                "$name": "VkFrontFace"
              },
              {
                "$name": "VkGraphicsPipelineCreateInfo"
              },
              {
                "$name": "VkLogicOp"
              },
              {
                "$name": "VkPipeline"
              },
              {
                "$name": "VkPipelineColorBlendAttachmentState"
              },
              {
                "$name": "VkPipelineColorBlendStateCreateFlags",
                "$comment": "Will add VkPipeline*StateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineColorBlendStateCreateInfo"
              },
              {
                "$name": "VkPipelineCreateFlagBits"
              },
              {
                "$name": "VkPipelineCreateFlags"
              },
              {
                "$name": "VkPipelineDepthStencilStateCreateFlags",
                "$comment": "Will add VkPipeline*StateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineDepthStencilStateCreateInfo"
              },
              {
                "$name": "VkPipelineDynamicStateCreateFlags",
                "$comment": "Will add VkPipeline*StateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineDynamicStateCreateInfo"
              },
              {
                "$name": "VkPipelineInputAssemblyStateCreateFlags",
                "$comment": "Will add VkPipeline*StateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineInputAssemblyStateCreateInfo"
              },
              {
                "$name": "VkPipelineLayoutCreateFlags",
                "$comment": "Will add VkPipelineLayoutCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineMultisampleStateCreateFlags",
                "$comment": "Will add VkPipelineMultisampleStateCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineMultisampleStateCreateInfo"
              },
              {
                "$name": "VkPipelineRasterizationStateCreateFlags",
                "$comment": "Will add VkPipelineRasterizationStateCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineRasterizationStateCreateInfo"
              },
              {
                "$name": "VkPipelineShaderStageCreateFlagBits"
              },
              {
                "$name": "VkPipelineShaderStageCreateFlags"
              },
              {
                "$name": "VkPipelineShaderStageCreateInfo"
              },
              {
                "$name": "VkPipelineTessellationStateCreateFlags",
                "$comment": "Will add VkPipelineTessellationStateCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineTessellationStateCreateInfo"
              },
              {
                "$name": "VkPipelineVertexInputStateCreateFlags",
                "$comment": "Will add VkPipelineVertexInputStateCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineVertexInputStateCreateInfo"
              },
              {
                "$name": "VkPipelineViewportStateCreateFlags",
                "$comment": "Will add VkPipelineViewportStateCreateFlagBits when bits are defined in the future"
              },
              {
                "$name": "VkPipelineViewportStateCreateInfo"
              },
              {
                "$name": "VkPolygonMode"
              },
              {
                "$name": "VkPrimitiveTopology"
              },
              {
                "$name": "VkSampleMask"
              },
              {
                "$name": "VkShaderStageFlagBits"
              },
              {
                "$name": "VkShaderStageFlags"
              },
              {
                "$name": "VkSpecializationInfo"
              },
              {
                "$name": "VkSpecializationMapEntry"
              },
              {
                "$name": "VkStencilOp"
              },
              {
                "$name": "VkStencilOpState"
              },
              {
                "$name": "VkVertexInputAttributeDescription"
              },
              {
                "$name": "VkVertexInputBindingDescription"
              },
              {
                "$name": "VkVertexInputRate"
              },
              {
                "$name": "VkViewport"
              }
            ],
            "command": [
              {
                "$name": "vkCreateGraphicsPipelines"
              },
              {
                "$name": "vkCreateComputePipelines"
              },
              {
                "$name": "vkDestroyPipeline"
              }
            ],
            "$comment": "Pipeline commands"
          },
          {
            "type": [
              {
                "$name": "VkPipelineLayout"
              },
              {
                "$name": "VkPipelineLayoutCreateInfo"
              },
              {
                "$name": "VkPushConstantRange"
              }
            ],
            "command": [
              {
                "$name": "vkCreatePipelineLayout"
              },
              {
                "$name": "vkDestroyPipelineLayout"
              }
            ],
            "$comment": "Pipeline layout commands"
          },
          {
            "type": [
              {
                "$name": "VkBorderColor"
              },
              {
                "$name": "VkFilter"
              },
              {
                "$name": "VkSampler"
              },
              {
                "$name": "VkSamplerAddressMode"
              },
              {
                "$name": "VkSamplerCreateFlagBits"
              },
              {
                "$name": "VkSamplerCreateFlags"
              },
              {
                "$name": "VkSamplerCreateInfo"
              },
              {
                "$name": "VkSamplerMipmapMode"
              }
            ],
            "command": [
              {
                "$name": "vkCreateSampler"
              },
              {
                "$name": "vkDestroySampler"
              }
            ],
            "$comment": "Sampler commands"
          },
          {
            "type": [
              {
                "$name": "VkCopyDescriptorSet"
              },
              {
                "$name": "VkDescriptorBufferInfo"
              },
              {
                "$name": "VkDescriptorImageInfo"
              },
              {
                "$name": "VkDescriptorPool"
              },
              {
                "$name": "VkDescriptorPoolCreateFlagBits"
              },
              {
                "$name": "VkDescriptorPoolCreateFlags"
              },
              {
                "$name": "VkDescriptorPoolCreateInfo"
              },
              {
                "$name": "VkDescriptorPoolResetFlags"
              },
              {
                "$name": "VkDescriptorPoolSize"
              },
              {
                "$name": "VkDescriptorSet"
              },
              {
                "$name": "VkDescriptorSetAllocateInfo"
              },
              {
                "$name": "VkDescriptorSetLayout"
              },
              {
                "$name": "VkDescriptorSetLayoutBinding"
              },
              {
                "$name": "VkDescriptorSetLayoutCreateFlagBits"
              },
              {
                "$name": "VkDescriptorSetLayoutCreateFlags"
              },
              {
                "$name": "VkDescriptorSetLayoutCreateInfo"
              },
              {
                "$name": "VkDescriptorType"
              },
              {
                "$name": "VkWriteDescriptorSet"
              }
            ],
            "command": [
              {
                "$name": "vkCreateDescriptorSetLayout"
              },
              {
                "$name": "vkDestroyDescriptorSetLayout"
              },
              {
                "$name": "vkCreateDescriptorPool"
              },
              {
                "$name": "vkDestroyDescriptorPool"
              },
              {
                "$name": "vkResetDescriptorPool"
              },
              {
                "$name": "vkAllocateDescriptorSets"
              },
              {
                "$name": "vkFreeDescriptorSets"
              },
              {
                "$name": "vkUpdateDescriptorSets"
              }
            ],
            "$comment": "Descriptor set commands"
          },
          {
            "type": [
              {
                "$name": "VkAccessFlagBits"
              },
              {
                "$name": "VkAccessFlags"
              },
              {
                "$name": "VkAttachmentDescription"
              },
              {
                "$name": "VkAttachmentDescriptionFlagBits"
              },
              {
                "$name": "VkAttachmentDescriptionFlags"
              },
              {
                "$name": "VkAttachmentLoadOp"
              },
              {
                "$name": "VkAttachmentReference"
              },
              {
                "$name": "VkAttachmentStoreOp"
              },
              {
                "$name": "VkDependencyFlagBits"
              },
              {
                "$name": "VkDependencyFlags"
              },
              {
                "$name": "VkFramebuffer"
              },
              {
                "$name": "VkFramebufferCreateFlagBits"
              },
              {
                "$name": "VkFramebufferCreateFlags"
              },
              {
                "$name": "VkFramebufferCreateInfo"
              },
              {
                "$name": "VkPipelineBindPoint"
              },
              {
                "$name": "VkRenderPass"
              },
              {
                "$name": "VkRenderPassCreateFlagBits"
              },
              {
                "$name": "VkRenderPassCreateFlags"
              },
              {
                "$name": "VkRenderPassCreateInfo"
              },
              {
                "$name": "VkSubpassDependency"
              },
              {
                "$name": "VkSubpassDescription"
              },
              {
                "$name": "VkSubpassDescriptionFlagBits"
              },
              {
                "$name": "VkSubpassDescriptionFlags"
              }
            ],
            "command": [
              {
                "$name": "vkCreateFramebuffer"
              },
              {
                "$name": "vkDestroyFramebuffer"
              },
              {
                "$name": "vkCreateRenderPass"
              },
              {
                "$name": "vkDestroyRenderPass"
              },
              {
                "$name": "vkGetRenderAreaGranularity"
              }
            ],
            "$comment": "Pass commands"
          },
          {
            "type": [
              {
                "$name": "VkCommandPool"
              },
              {
                "$name": "VkCommandPoolCreateFlagBits"
              },
              {
                "$name": "VkCommandPoolCreateFlags"
              },
              {
                "$name": "VkCommandPoolCreateInfo"
              },
              {
                "$name": "VkCommandPoolResetFlagBits"
              },
              {
                "$name": "VkCommandPoolResetFlags"
              }
            ],
            "command": [
              {
                "$name": "vkCreateCommandPool"
              },
              {
                "$name": "vkDestroyCommandPool"
              },
              {
                "$name": "vkResetCommandPool"
              }
            ],
            "$comment": "Command pool commands"
          },
          {
            "type": [
              {
                "$name": "VkCommandBuffer"
              },
              {
                "$name": "VkCommandBufferAllocateInfo"
              },
              {
                "$name": "VkCommandBufferBeginInfo"
              },
              {
                "$name": "VkCommandBufferInheritanceInfo"
              },
              {
                "$name": "VkCommandBufferLevel"
              },
              {
                "$name": "VkCommandBufferResetFlagBits"
              },
              {
                "$name": "VkCommandBufferResetFlags"
              },
              {
                "$name": "VkCommandBufferUsageFlagBits"
              },
              {
                "$name": "VkCommandBufferUsageFlags"
              },
              {
                "$name": "VkQueryControlFlagBits"
              },
              {
                "$name": "VkQueryControlFlags"
              }
            ],
            "command": [
              {
                "$name": "vkAllocateCommandBuffers"
              },
              {
                "$name": "vkFreeCommandBuffers"
              },
              {
                "$name": "vkBeginCommandBuffer"
              },
              {
                "$name": "vkEndCommandBuffer"
              },
              {
                "$name": "vkResetCommandBuffer"
              }
            ],
            "$comment": "Command buffer commands"
          },
          {
            "type": [
              {
                "$name": "VkBufferCopy"
              },
              {
                "$name": "VkBufferImageCopy"
              },
              {
                "$name": "VkClearAttachment"
              },
              {
                "$name": "VkClearColorValue"
              },
              {
                "$name": "VkClearDepthStencilValue"
              },
              {
                "$name": "VkClearRect"
              },
              {
                "$name": "VkClearValue"
              },
              {
                "$name": "VkImageBlit"
              },
              {
                "$name": "VkImageCopy"
              },
              {
                "$name": "VkImageResolve"
              },
              {
                "$name": "VkImageSubresourceLayers"
              },
              {
                "$name": "VkIndexType"
              },
              {
                "$name": "VkRenderPassBeginInfo"
              },
              {
                "$name": "VkStencilFaceFlagBits"
              },
              {
                "$name": "VkStencilFaceFlags"
              },
              {
                "$name": "VkSubpassContents"
              }
            ],
            "command": [
              {
                "$name": "vkCmdBindPipeline"
              },
              {
                "$name": "vkCmdSetViewport"
              },
              {
                "$name": "vkCmdSetScissor"
              },
              {
                "$name": "vkCmdSetLineWidth"
              },
              {
                "$name": "vkCmdSetDepthBias"
              },
              {
                "$name": "vkCmdSetBlendConstants"
              },
              {
                "$name": "vkCmdSetDepthBounds"
              },
              {
                "$name": "vkCmdSetStencilCompareMask"
              },
              {
                "$name": "vkCmdSetStencilWriteMask"
              },
              {
                "$name": "vkCmdSetStencilReference"
              },
              {
                "$name": "vkCmdBindDescriptorSets"
              },
              {
                "$name": "vkCmdBindIndexBuffer"
              },
              {
                "$name": "vkCmdBindVertexBuffers"
              },
              {
                "$name": "vkCmdDraw"
              },
              {
                "$name": "vkCmdDrawIndexed"
              },
              {
                "$name": "vkCmdDrawIndirect"
              },
              {
                "$name": "vkCmdDrawIndexedIndirect"
              },
              {
                "$name": "vkCmdDispatch"
              },
              {
                "$name": "vkCmdDispatchIndirect"
              },
              {
                "$name": "vkCmdCopyBuffer"
              },
              {
                "$name": "vkCmdCopyImage"
              },
              {
                "$name": "vkCmdBlitImage"
              },
              {
                "$name": "vkCmdCopyBufferToImage"
              },
              {
                "$name": "vkCmdCopyImageToBuffer"
              },
              {
                "$name": "vkCmdUpdateBuffer"
              },
              {
                "$name": "vkCmdFillBuffer"
              },
              {
                "$name": "vkCmdClearColorImage"
              },
              {
                "$name": "vkCmdClearDepthStencilImage"
              },
              {
                "$name": "vkCmdClearAttachments"
              },
              {
                "$name": "vkCmdResolveImage"
              },
              {
                "$name": "vkCmdSetEvent"
              },
              {
                "$name": "vkCmdResetEvent"
              },
              {
                "$name": "vkCmdWaitEvents"
              },
              {
                "$name": "vkCmdPipelineBarrier"
              },
              {
                "$name": "vkCmdBeginQuery"
              },
              {
                "$name": "vkCmdEndQuery"
              },
              {
                "$name": "vkCmdResetQueryPool"
              },
              {
                "$name": "vkCmdWriteTimestamp"
              },
              {
                "$name": "vkCmdCopyQueryPoolResults"
              },
              {
                "$name": "vkCmdPushConstants"
              },
              {
                "$name": "vkCmdBeginRenderPass"
              },
              {
                "$name": "vkCmdNextSubpass"
              },
              {
                "$name": "vkCmdEndRenderPass"
              },
              {
                "$name": "vkCmdExecuteCommands"
              }
            ],
            "$comment": "Command buffer building commands"
          }
        ],
        "$api": "vulkan",
        "$name": "VK_VERSION_1_0",
        "$number": 1,
        "$comment": "Vulkan core API interface definitions"
      },
      {
        "require": [
          {
            "type": {
              "$name": "VK_API_VERSION_1_1"
            }
          },
          {
            "command": {
              "$name": "vkEnumerateInstanceVersion"
            },
            "$comment": "Device Initialization"
          },
          {
            "$comment": "Promoted from VK_KHR_relaxed_block_layout, which has no API"
          },
          {
            "$comment": "Promoted from VK_KHR_storage_buffer_storage_class, which has no API"
          },
          {
            "enum": {
              "$extends": "VkStructureType",
              "$extnumber": 95,
              "$offset": 0,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"
            },
            "type": [
              {
                "$name": "VkPhysicalDeviceSubgroupProperties"
              },
              {
                "$name": "VkSubgroupFeatureFlags"
              },
              {
                "$name": "VkSubgroupFeatureFlagBits"
              }
            ],
            "$comment": "Originally based on VK_KHR_subgroup (extension 94), but the actual enum block used was, incorrectly, that of extension 95"
          },
          {
            "command": [
              {
                "$name": "vkBindBufferMemory2"
              },
              {
                "$name": "vkBindImageMemory2"
              }
            ],
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 158,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 158,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"
              },
              {
                "$bitpos": 10,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_ALIAS_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkBindBufferMemoryInfo"
              },
              {
                "$name": "VkBindImageMemoryInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_bind_memory2"
          },
          {
            "enum": {
              "$extends": "VkStructureType",
              "$extnumber": 84,
              "$offset": 0,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDevice16BitStorageFeatures"
            },
            "$comment": "Promoted from VK_KHR_16bit_storage"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 128,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 128,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkMemoryDedicatedRequirements"
              },
              {
                "$name": "VkMemoryDedicatedAllocateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_dedicated_allocation"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 4,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 5,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 6,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"
              },
              {
                "$bitpos": 3,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"
              },
              {
                "$bitpos": 4,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT"
              },
              {
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_DISPATCH_BASE",
                "$alias": "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT"
              },
              {
                "$bitpos": 2,
                "$extends": "VkDependencyFlagBits",
                "$name": "VK_DEPENDENCY_DEVICE_GROUP_BIT",
                "$comment": "Dependency is across devices"
              }
            ],
            "comment": [
              {
                "#text": "offset 1 reserved for the old VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHX enum"
              },
              {
                "#text": "offset 2 reserved for the old VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHX enum"
              }
            ],
            "type": [
              {
                "$name": "VkPeerMemoryFeatureFlags"
              },
              {
                "$name": "VkPeerMemoryFeatureFlagBits"
              },
              {
                "$name": "VkMemoryAllocateFlags"
              },
              {
                "$name": "VkMemoryAllocateFlagBits"
              },
              {
                "$name": "VkMemoryAllocateFlagsInfo"
              },
              {
                "$name": "VkDeviceGroupRenderPassBeginInfo"
              },
              {
                "$name": "VkDeviceGroupCommandBufferBeginInfo"
              },
              {
                "$name": "VkDeviceGroupSubmitInfo"
              },
              {
                "$name": "VkDeviceGroupBindSparseInfo"
              }
            ],
            "command": [
              {
                "$name": "vkGetDeviceGroupPeerMemoryFeatures"
              },
              {
                "$name": "vkCmdSetDeviceMask"
              },
              {
                "$name": "vkCmdDispatchBase"
              }
            ],
            "$comment": "Promoted from VK_KHR_device_group"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 13,
                "$name": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 61,
                "$offset": 14,
                "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"
              },
              {
                "$bitpos": 6,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
                "$comment": "Allows using VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions when binding memory to the image"
              }
            ],
            "type": [
              {
                "$name": "VkBindBufferMemoryDeviceGroupInfo"
              },
              {
                "$name": "VkBindImageMemoryDeviceGroupInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_device_group + VK_KHR_bind_memory2"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 71,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 71,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"
              },
              {
                "$name": "VK_MAX_DEVICE_GROUP_SIZE"
              },
              {
                "$bitpos": 1,
                "$extends": "VkMemoryHeapFlagBits",
                "$name": "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT",
                "$comment": "If set, heap allocations allocate multiple instances by default"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceGroupProperties"
              },
              {
                "$name": "VkDeviceGroupDeviceCreateInfo"
              }
            ],
            "command": {
              "$name": "vkEnumeratePhysicalDeviceGroups"
            },
            "$comment": "Promoted from VK_KHR_device_group_creation"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 147,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 147,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 147,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 147,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 147,
                "$offset": 4,
                "$name": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"
              }
            ],
            "type": [
              {
                "$name": "VkBufferMemoryRequirementsInfo2"
              },
              {
                "$name": "VkImageMemoryRequirementsInfo2"
              },
              {
                "$name": "VkImageSparseMemoryRequirementsInfo2"
              },
              {
                "$name": "VkMemoryRequirements2"
              },
              {
                "$name": "VkSparseImageMemoryRequirements2"
              }
            ],
            "command": [
              {
                "$name": "vkGetImageMemoryRequirements2"
              },
              {
                "$name": "vkGetBufferMemoryRequirements2"
              },
              {
                "$name": "vkGetImageSparseMemoryRequirements2"
              }
            ],
            "$comment": "Promoted from VK_KHR_get_memory_requirements2"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 4,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 5,
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 6,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 7,
                "$name": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 60,
                "$offset": 8,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFeatures2"
              },
              {
                "$name": "VkPhysicalDeviceProperties2"
              },
              {
                "$name": "VkFormatProperties2"
              },
              {
                "$name": "VkImageFormatProperties2"
              },
              {
                "$name": "VkPhysicalDeviceImageFormatInfo2"
              },
              {
                "$name": "VkQueueFamilyProperties2"
              },
              {
                "$name": "VkPhysicalDeviceMemoryProperties2"
              },
              {
                "$name": "VkSparseImageFormatProperties2"
              },
              {
                "$name": "VkPhysicalDeviceSparseImageFormatInfo2"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceFeatures2"
              },
              {
                "$name": "vkGetPhysicalDeviceProperties2"
              },
              {
                "$name": "vkGetPhysicalDeviceFormatProperties2"
              },
              {
                "$name": "vkGetPhysicalDeviceImageFormatProperties2"
              },
              {
                "$name": "vkGetPhysicalDeviceQueueFamilyProperties2"
              },
              {
                "$name": "vkGetPhysicalDeviceMemoryProperties2"
              },
              {
                "$name": "vkGetPhysicalDeviceSparseImageFormatProperties2"
              }
            ],
            "$comment": "Promoted from VK_KHR_get_physical_device_properties2"
          },
          {
            "enum": [
              {
                "$extends": "VkResult",
                "$extnumber": 70,
                "$offset": 0,
                "$dir": "-",
                "$name": "VK_ERROR_OUT_OF_POOL_MEMORY"
              },
              {
                "$bitpos": 14,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT",
                "$comment": "Format can be used as the source image of image transfer commands"
              },
              {
                "$bitpos": 15,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_TRANSFER_DST_BIT",
                "$comment": "Format can be used as the destination image of image transfer commands"
              },
              {
                "$bitpos": 5,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT",
                "$comment": "The 3D image can be viewed as a 2D or 2D array image"
              }
            ],
            "command": {
              "$name": "vkTrimCommandPool"
            },
            "comment": {
              "#text": "Additional dependent types / tokens extending enumerants, not explicitly mentioned"
            },
            "type": {
              "$name": "VkCommandPoolTrimFlags"
            },
            "$comment": "Promoted from VK_KHR_maintenance1"
          },
          {
            "enum": [
              {
                "$bitpos": 7,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT"
              },
              {
                "$bitpos": 8,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 118,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 118,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 118,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 118,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"
              },
              {
                "$extends": "VkImageLayout",
                "$extnumber": 118,
                "$offset": 0,
                "$name": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"
              },
              {
                "$extends": "VkImageLayout",
                "$extnumber": 118,
                "$offset": 1,
                "$name": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePointClippingProperties"
              },
              {
                "$name": "VkPointClippingBehavior"
              },
              {
                "$name": "VkRenderPassInputAttachmentAspectCreateInfo"
              },
              {
                "$name": "VkInputAttachmentAspectReference"
              },
              {
                "$name": "VkImageViewUsageCreateInfo"
              },
              {
                "$name": "VkTessellationDomainOrigin"
              },
              {
                "$name": "VkPipelineTessellationDomainOriginStateCreateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_maintenance2"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 54,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 54,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 54,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"
              },
              {
                "$bitpos": 1,
                "$extends": "VkDependencyFlagBits",
                "$name": "VK_DEPENDENCY_VIEW_LOCAL_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkRenderPassMultiviewCreateInfo"
              },
              {
                "$name": "VkPhysicalDeviceMultiviewFeatures"
              },
              {
                "$name": "VkPhysicalDeviceMultiviewProperties"
              }
            ],
            "$comment": "Promoted from VK_KHR_multiview"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 121,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVariablePointerFeatures"
              },
              {
                "$name": "VkPhysicalDeviceVariablePointersFeatures"
              }
            ],
            "$comment": "Promoted from VK_KHR_variable_pointers"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 146,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 146,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 146,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 146,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"
              },
              {
                "$bitpos": 4,
                "$extends": "VkQueueFlagBits",
                "$name": "VK_QUEUE_PROTECTED_BIT",
                "$comment": "Queues may support protected operations"
              },
              {
                "$bitpos": 0,
                "$extends": "VkDeviceQueueCreateFlagBits",
                "$name": "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT",
                "$comment": "Queue is a protected-capable device queue"
              },
              {
                "$bitpos": 5,
                "$extends": "VkMemoryPropertyFlagBits",
                "$name": "VK_MEMORY_PROPERTY_PROTECTED_BIT",
                "$comment": "Memory is protected"
              },
              {
                "$bitpos": 3,
                "$extends": "VkBufferCreateFlagBits",
                "$name": "VK_BUFFER_CREATE_PROTECTED_BIT",
                "$comment": "Buffer requires protected memory"
              },
              {
                "$bitpos": 11,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_PROTECTED_BIT",
                "$comment": "Image requires protected memory"
              },
              {
                "$bitpos": 2,
                "$extends": "VkCommandPoolCreateFlagBits",
                "$name": "VK_COMMAND_POOL_CREATE_PROTECTED_BIT",
                "$comment": "Command buffers allocated from pool are protected command buffers"
              }
            ],
            "type": [
              {
                "$name": "VkDeviceQueueCreateFlagBits",
                "$comment": "This is a temporary workaround for processors not recognizing that VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT above also requires this type"
              },
              {
                "$name": "VkPhysicalDeviceProtectedMemoryFeatures"
              },
              {
                "$name": "VkPhysicalDeviceProtectedMemoryProperties"
              },
              {
                "$name": "VkDeviceQueueInfo2"
              },
              {
                "$name": "VkProtectedSubmitInfo"
              }
            ],
            "command": {
              "$name": "vkGetDeviceQueue2"
            },
            "$comment": "Originally based on VK_KHR_protected_memory (extension 146), which was never published; thus the mystifying large value= numbers below. These are not aliased since they were not actually promoted from an extension."
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 4,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 157,
                "$offset": 5,
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"
              },
              {
                "$extends": "VkObjectType",
                "$extnumber": 157,
                "$offset": 0,
                "$name": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 0,
                "$name": "VK_FORMAT_G8B8G8R8_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 1,
                "$name": "VK_FORMAT_B8G8R8G8_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 2,
                "$name": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 3,
                "$name": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 4,
                "$name": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 5,
                "$name": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 6,
                "$name": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 7,
                "$name": "VK_FORMAT_R10X6_UNORM_PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 8,
                "$name": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 9,
                "$name": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 10,
                "$name": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 11,
                "$name": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 12,
                "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 13,
                "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 14,
                "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 15,
                "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 16,
                "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 17,
                "$name": "VK_FORMAT_R12X4_UNORM_PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 18,
                "$name": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 19,
                "$name": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 20,
                "$name": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 21,
                "$name": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 22,
                "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 23,
                "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 24,
                "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 25,
                "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 26,
                "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 27,
                "$name": "VK_FORMAT_G16B16G16R16_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 28,
                "$name": "VK_FORMAT_B16G16R16G16_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 29,
                "$name": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 30,
                "$name": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 31,
                "$name": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 32,
                "$name": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 157,
                "$offset": 33,
                "$name": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"
              },
              {
                "$bitpos": 4,
                "$extends": "VkImageAspectFlagBits",
                "$name": "VK_IMAGE_ASPECT_PLANE_0_BIT"
              },
              {
                "$bitpos": 5,
                "$extends": "VkImageAspectFlagBits",
                "$name": "VK_IMAGE_ASPECT_PLANE_1_BIT"
              },
              {
                "$bitpos": 6,
                "$extends": "VkImageAspectFlagBits",
                "$name": "VK_IMAGE_ASPECT_PLANE_2_BIT"
              },
              {
                "$bitpos": 9,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_DISJOINT_BIT"
              },
              {
                "$bitpos": 17,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT",
                "$comment": "Format can have midpoint rather than cosited chroma samples"
              },
              {
                "$bitpos": 18,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT",
                "$comment": "Format can be used with linear filtering whilst color conversion is enabled"
              },
              {
                "$bitpos": 19,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT",
                "$comment": "Format can have different chroma, min and mag filters"
              },
              {
                "$bitpos": 20,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"
              },
              {
                "$bitpos": 21,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"
              },
              {
                "$bitpos": 22,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_DISJOINT_BIT",
                "$comment": "Format supports disjoint planes"
              },
              {
                "$bitpos": 23,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT",
                "$comment": "Format can have cosited rather than midpoint chroma samples"
              }
            ],
            "type": [
              {
                "$name": "VkSamplerYcbcrConversionCreateInfo"
              },
              {
                "$name": "VkSamplerYcbcrConversionInfo"
              },
              {
                "$name": "VkBindImagePlaneMemoryInfo"
              },
              {
                "$name": "VkImagePlaneMemoryRequirementsInfo"
              },
              {
                "$name": "VkPhysicalDeviceSamplerYcbcrConversionFeatures"
              },
              {
                "$name": "VkSamplerYcbcrConversionImageFormatProperties"
              },
              {
                "$name": "VkSamplerYcbcrConversion"
              },
              {
                "$name": "VkSamplerYcbcrModelConversion"
              },
              {
                "$name": "VkSamplerYcbcrRange"
              },
              {
                "$name": "VkChromaLocation"
              }
            ],
            "command": [
              {
                "$name": "vkCreateSamplerYcbcrConversion"
              },
              {
                "$name": "vkDestroySamplerYcbcrConversion"
              }
            ],
            "comment": {
              "#text": "Additional dependent types / tokens extending enumerants, not explicitly mentioned"
            },
            "$comment": "Promoted from VK_KHR_sampler_ycbcr_conversion"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 86,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"
              },
              {
                "$extends": "VkObjectType",
                "$extnumber": 86,
                "$offset": 0,
                "$name": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"
              }
            ],
            "command": [
              {
                "$name": "vkCreateDescriptorUpdateTemplate"
              },
              {
                "$name": "vkDestroyDescriptorUpdateTemplate"
              },
              {
                "$name": "vkUpdateDescriptorSetWithTemplate"
              }
            ],
            "type": [
              {
                "$name": "VkDescriptorUpdateTemplate"
              },
              {
                "$name": "VkDescriptorUpdateTemplateCreateFlags"
              },
              {
                "$name": "VkDescriptorUpdateTemplateType"
              },
              {
                "$name": "VkDescriptorUpdateTemplateEntry"
              },
              {
                "$name": "VkDescriptorUpdateTemplateCreateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_descriptor_update_template"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 72,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 72,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 72,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 72,
                "$offset": 3,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 72,
                "$offset": 4,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
              },
              {
                "$name": "VK_LUID_SIZE"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryHandleTypeFlags"
              },
              {
                "$name": "VkExternalMemoryHandleTypeFlagBits"
              },
              {
                "$name": "VkExternalMemoryFeatureFlags"
              },
              {
                "$name": "VkExternalMemoryFeatureFlagBits"
              },
              {
                "$name": "VkExternalMemoryProperties"
              },
              {
                "$name": "VkPhysicalDeviceExternalImageFormatInfo"
              },
              {
                "$name": "VkExternalImageFormatProperties"
              },
              {
                "$name": "VkPhysicalDeviceExternalBufferInfo"
              },
              {
                "$name": "VkExternalBufferProperties"
              },
              {
                "$name": "VkPhysicalDeviceIDProperties"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalBufferProperties"
            },
            "$comment": "Promoted from VK_KHR_external_memory_capabilities"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 73,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 73,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 73,
                "$offset": 2,
                "$name": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"
              },
              {
                "$extends": "VkResult",
                "$extnumber": 73,
                "$offset": 3,
                "$dir": "-",
                "$name": "VK_ERROR_INVALID_EXTERNAL_HANDLE"
              },
              {
                "$name": "VK_QUEUE_FAMILY_EXTERNAL"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryImageCreateInfo"
              },
              {
                "$name": "VkExternalMemoryBufferCreateInfo"
              },
              {
                "$name": "VkExportMemoryAllocateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_external_memory"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 113,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 113,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkExternalFenceHandleTypeFlags"
              },
              {
                "$name": "VkExternalFenceHandleTypeFlagBits"
              },
              {
                "$name": "VkExternalFenceFeatureFlags"
              },
              {
                "$name": "VkExternalFenceFeatureFlagBits"
              },
              {
                "$name": "VkPhysicalDeviceExternalFenceInfo"
              },
              {
                "$name": "VkExternalFenceProperties"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalFenceProperties"
            },
            "$comment": "Promoted from VK_KHR_external_fence_capabilities"
          },
          {
            "enum": {
              "$extends": "VkStructureType",
              "$extnumber": 114,
              "$offset": 0,
              "$name": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"
            },
            "type": [
              {
                "$name": "VkFenceImportFlags"
              },
              {
                "$name": "VkFenceImportFlagBits"
              },
              {
                "$name": "VkExportFenceCreateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_external_fence"
          },
          {
            "enum": {
              "$extends": "VkStructureType",
              "$extnumber": 78,
              "$offset": 0,
              "$name": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"
            },
            "type": [
              {
                "$name": "VkSemaphoreImportFlags"
              },
              {
                "$name": "VkSemaphoreImportFlagBits"
              },
              {
                "$name": "VkExportSemaphoreCreateInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_external_semaphore"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 77,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 77,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkExternalSemaphoreHandleTypeFlags"
              },
              {
                "$name": "VkExternalSemaphoreHandleTypeFlagBits"
              },
              {
                "$name": "VkExternalSemaphoreFeatureFlags"
              },
              {
                "$name": "VkExternalSemaphoreFeatureFlagBits"
              },
              {
                "$name": "VkPhysicalDeviceExternalSemaphoreInfo"
              },
              {
                "$name": "VkExternalSemaphoreProperties"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalSemaphoreProperties"
            },
            "$comment": "Promoted from VK_KHR_external_semaphore_capabilities"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 169,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$extnumber": 169,
                "$offset": 1,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMaintenance3Properties"
              },
              {
                "$name": "VkDescriptorSetLayoutSupport"
              }
            ],
            "command": {
              "$name": "vkGetDescriptorSetLayoutSupport"
            },
            "$comment": "Promoted from VK_KHR_maintenance3"
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$extnumber": 64,
                "$offset": 0,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderDrawParameterFeatures"
              },
              {
                "$name": "VkPhysicalDeviceShaderDrawParametersFeatures"
              }
            ],
            "$comment": "Promoted from VK_KHR_shader_draw_parameters, with a feature support query added"
          }
        ],
        "$api": "vulkan",
        "$name": "VK_VERSION_1_1",
        "$number": 1.1,
        "$comment": "Vulkan 1.1 core API interface definitions."
      },
      {
        "require": [
          {
            "type": {
              "$name": "VK_API_VERSION_1_2"
            }
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$value": 49,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$value": 50,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$value": 51,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$value": 52,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVulkan11Features"
              },
              {
                "$name": "VkPhysicalDeviceVulkan11Properties"
              },
              {
                "$name": "VkPhysicalDeviceVulkan12Features"
              },
              {
                "$name": "VkPhysicalDeviceVulkan12Properties"
              }
            ]
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 148,
              "$name": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"
            },
            "type": {
              "$name": "VkImageFormatListCreateInfo"
            },
            "$comment": "Promoted from VK_KHR_image_format_list (extension 148)"
          },
          {
            "enum": {
              "$value": 4,
              "$extends": "VkSamplerAddressMode",
              "$name": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
              "$comment": "No need to add an extnumber attribute, since this uses a core enum value"
            },
            "$comment": "Promoted from VK_KHR_sampler_mirror_clamp_to_edge (extension 15)"
          },
          {
            "command": [
              {
                "$name": "vkCmdDrawIndirectCount"
              },
              {
                "$name": "vkCmdDrawIndexedIndirectCount"
              }
            ],
            "$comment": "Promoted from VK_KHR_draw_indirect_count (extension 170)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$extnumber": 110,
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO"
              }
            ],
            "command": [
              {
                "$name": "vkCreateRenderPass2"
              },
              {
                "$name": "vkCmdBeginRenderPass2"
              },
              {
                "$name": "vkCmdNextSubpass2"
              },
              {
                "$name": "vkCmdEndRenderPass2"
              }
            ],
            "type": [
              {
                "$name": "VkRenderPassCreateInfo2"
              },
              {
                "$name": "VkAttachmentDescription2"
              },
              {
                "$name": "VkAttachmentReference2"
              },
              {
                "$name": "VkSubpassDescription2"
              },
              {
                "$name": "VkSubpassDependency2"
              },
              {
                "$name": "VkSubpassBeginInfo"
              },
              {
                "$name": "VkSubpassEndInfo"
              }
            ],
            "$comment": "Promoted from VK_KHR_create_renderpass2 (extension 110)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 178,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDevice8BitStorageFeatures"
            },
            "$comment": "Promoted from VK_KHR_8bit_storage (extension 178)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 197,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"
              },
              {
                "$name": "VK_MAX_DRIVER_NAME_SIZE"
              },
              {
                "$name": "VK_MAX_DRIVER_INFO_SIZE"
              }
            ],
            "type": [
              {
                "$name": "VkDriverId"
              },
              {
                "$name": "VkConformanceVersion"
              },
              {
                "$name": "VkPhysicalDeviceDriverProperties"
              }
            ],
            "$comment": "Promoted from VK_KHR_driver_properties (extension 197)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 181,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceShaderAtomicInt64Features"
            },
            "$comment": "Promoted from VK_KHR_shader_atomic_int64 (extension 181)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 83,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceShaderFloat16Int8Features"
            },
            "$comment": "Promoted from VK_KHR_shader_float16_int8 (extension 83)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 198,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"
            },
            "type": [
              {
                "$name": "VkPhysicalDeviceFloatControlsProperties"
              },
              {
                "$name": "VkShaderFloatControlsIndependence"
              }
            ],
            "$comment": "Promoted from VK_KHR_shader_float_controls (extension 198)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 162,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 162,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 162,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 162,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 162,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkDescriptorPoolCreateFlagBits",
                "$name": "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT"
              },
              {
                "$offset": 0,
                "$dir": "-",
                "$extends": "VkResult",
                "$extnumber": 162,
                "$name": "VK_ERROR_FRAGMENTATION"
              }
            ],
            "type": [
              {
                "$name": "VkDescriptorSetLayoutBindingFlagsCreateInfo"
              },
              {
                "$name": "VkPhysicalDeviceDescriptorIndexingFeatures"
              },
              {
                "$name": "VkPhysicalDeviceDescriptorIndexingProperties"
              },
              {
                "$name": "VkDescriptorSetVariableDescriptorCountAllocateInfo"
              },
              {
                "$name": "VkDescriptorSetVariableDescriptorCountLayoutSupport"
              },
              {
                "$name": "VkDescriptorBindingFlagBits"
              },
              {
                "$name": "VkDescriptorBindingFlags"
              }
            ],
            "$comment": "Promoted from VK_EXT_descriptor_indexing (extension 162)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 200,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 200,
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"
              }
            ],
            "type": [
              {
                "$name": "VkSubpassDescriptionDepthStencilResolve"
              },
              {
                "$name": "VkPhysicalDeviceDepthStencilResolveProperties"
              },
              {
                "$name": "VkResolveModeFlagBits"
              },
              {
                "$name": "VkResolveModeFlags"
              }
            ],
            "$comment": "Promoted from VK_KHR_depth_stencil_resolve (extension 200)"
          },
          {
            "type": {
              "$name": "VkPhysicalDeviceScalarBlockLayoutFeatures"
            },
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 222,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"
            },
            "$comment": "Promoted from VK_EXT_scalar_block_layout (extension 222))"
          },
          {
            "$comment": "Promoted from VK_EXT_shader_viewport_index_layer, which has no API (extension 163)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 247,
              "$name": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"
            },
            "type": {
              "$name": "VkImageStencilUsageCreateInfo"
            },
            "$comment": "Promoted from VK_EXT_separate_stencil_usage (extension 247)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 131,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 131,
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"
              },
              {
                "$bitpos": 16,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT",
                "$comment": "Format can be used with min/max reduction filtering"
              }
            ],
            "type": [
              {
                "$name": "VkSamplerReductionMode"
              },
              {
                "$name": "VkSamplerReductionModeCreateInfo"
              },
              {
                "$name": "VkPhysicalDeviceSamplerFilterMinmaxProperties"
              }
            ],
            "$comment": "Promoted from VK_EXT_sampler_filter_minmax (extension 131)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 212,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceVulkanMemoryModelFeatures"
            },
            "$comment": "Promoted from VK_KHR_vulkan_memory_model (extension 212)"
          },
          {
            "type": [
              {
                "$name": "VkPhysicalDeviceImagelessFramebufferFeatures"
              },
              {
                "$name": "VkFramebufferAttachmentsCreateInfo"
              },
              {
                "$name": "VkFramebufferAttachmentImageInfo"
              },
              {
                "$name": "VkRenderPassAttachmentBeginInfo"
              }
            ],
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 109,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 109,
                "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 109,
                "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 109,
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"
              },
              {
                "$bitpos": 0,
                "$extends": "VkFramebufferCreateFlagBits",
                "$name": "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT"
              }
            ],
            "$comment": "Promoted from VK_KHR_imageless_framebuffer (extension 109)"
          },
          {
            "type": {
              "$name": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures"
            },
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 254,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"
            },
            "$comment": "Promoted from VK_KHR_uniform_buffer_standard_layout (extension 254)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 176,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"
            },
            "$comment": "Promoted from VK_KHR_shader_subgroup_extended_types (extension 176)"
          },
          {
            "$comment": "Promoted from VK_KHR_spirv_1_4 (extension 237)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 242,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 242,
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 242,
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"
              },
              {
                "$offset": 0,
                "$extends": "VkImageLayout",
                "$extnumber": 242,
                "$name": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL"
              },
              {
                "$offset": 1,
                "$extends": "VkImageLayout",
                "$extnumber": 242,
                "$name": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL"
              },
              {
                "$offset": 2,
                "$extends": "VkImageLayout",
                "$extnumber": 242,
                "$name": "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL"
              },
              {
                "$offset": 3,
                "$extends": "VkImageLayout",
                "$extnumber": 242,
                "$name": "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"
              },
              {
                "$name": "VkAttachmentReferenceStencilLayout"
              },
              {
                "$name": "VkAttachmentDescriptionStencilLayout"
              }
            ],
            "$comment": "Promoted from VK_KHR_separate_depth_stencil_layouts (extension 242)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 262,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceHostQueryResetFeatures"
            },
            "command": {
              "$name": "vkResetQueryPool"
            },
            "$comment": "Promoted from VK_EXT_host_query_reset (extension 262)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$extnumber": 208,
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkSemaphoreType"
              },
              {
                "$name": "VkPhysicalDeviceTimelineSemaphoreFeatures"
              },
              {
                "$name": "VkPhysicalDeviceTimelineSemaphoreProperties"
              },
              {
                "$name": "VkSemaphoreTypeCreateInfo"
              },
              {
                "$name": "VkTimelineSemaphoreSubmitInfo"
              },
              {
                "$name": "VkSemaphoreWaitFlagBits"
              },
              {
                "$name": "VkSemaphoreWaitFlags"
              },
              {
                "$name": "VkSemaphoreWaitInfo"
              },
              {
                "$name": "VkSemaphoreSignalInfo"
              }
            ],
            "command": [
              {
                "$name": "vkGetSemaphoreCounterValue"
              },
              {
                "$name": "vkWaitSemaphores"
              },
              {
                "$name": "vkSignalSemaphore"
              }
            ],
            "$comment": "Promoted from VK_KHR_timeline_semaphore (extension 208)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 258,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 245,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 258,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 258,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 258,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"
              },
              {
                "$bitpos": 17,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"
              },
              {
                "$bitpos": 4,
                "$extends": "VkBufferCreateFlagBits",
                "$name": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkMemoryAllocateFlagBits",
                "$name": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT"
              },
              {
                "$bitpos": 2,
                "$extends": "VkMemoryAllocateFlagBits",
                "$name": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
              },
              {
                "$offset": 0,
                "$dir": "-",
                "$extends": "VkResult",
                "$extnumber": 258,
                "$name": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceBufferDeviceAddressFeatures"
              },
              {
                "$name": "VkBufferDeviceAddressInfo"
              },
              {
                "$name": "VkBufferOpaqueCaptureAddressCreateInfo"
              },
              {
                "$name": "VkMemoryOpaqueCaptureAddressAllocateInfo"
              },
              {
                "$name": "VkDeviceMemoryOpaqueCaptureAddressInfo"
              }
            ],
            "command": [
              {
                "$name": "vkGetBufferDeviceAddress"
              },
              {
                "$name": "vkGetBufferOpaqueCaptureAddress"
              },
              {
                "$name": "vkGetDeviceMemoryOpaqueCaptureAddress"
              }
            ],
            "$comment": "Promoted from VK_KHR_buffer_device_address (extension 258)"
          }
        ],
        "$api": "vulkan",
        "$name": "VK_VERSION_1_2",
        "$number": 1.2,
        "$comment": "Vulkan 1.2 core API interface definitions."
      },
      {
        "require": [
          {
            "type": {
              "$name": "VK_API_VERSION_1_3"
            }
          },
          {
            "type": {
              "$name": "VkFlags64"
            }
          },
          {
            "enum": [
              {
                "$extends": "VkStructureType",
                "$value": 53,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$value": 54,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVulkan13Features"
              },
              {
                "$name": "VkPhysicalDeviceVulkan13Properties"
              }
            ]
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 193,
              "$name": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"
            },
            "type": [
              {
                "$name": "VkPipelineCreationFeedbackFlagBits"
              },
              {
                "$name": "VkPipelineCreationFeedbackFlags"
              },
              {
                "$name": "VkPipelineCreationFeedbackCreateInfo"
              },
              {
                "$name": "VkPipelineCreationFeedback"
              }
            ],
            "$comment": "Promoted from VK_EXT_pipeline_creation_feedback (extension 193)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 216,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceShaderTerminateInvocationFeatures"
            },
            "$comment": "Promoted from VK_KHR_shader_terminate_invocation (extension 216)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 246,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"
            },
            "type": [
              {
                "$name": "VkToolPurposeFlagBits"
              },
              {
                "$name": "VkToolPurposeFlags"
              },
              {
                "$name": "VkPhysicalDeviceToolProperties"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceToolProperties"
            },
            "$comment": "Promoted from VK_EXT_tooling_info (extension 246)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 277,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"
            },
            "$comment": "Promoted from VK_EXT_shader_demote_to_helper_invocation (extension 277)"
          },
          {
            "$comment": "Promoted from VK_KHR_shader_non_semantic_info (extension 294)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 296,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 296,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 296,
                "$name": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$extnumber": 296,
                "$name": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePrivateDataFeatures"
              },
              {
                "$name": "VkDevicePrivateDataCreateInfo"
              },
              {
                "$name": "VkPrivateDataSlotCreateInfo"
              },
              {
                "$name": "VkPrivateDataSlot"
              },
              {
                "$name": "VkPrivateDataSlotCreateFlags",
                "$comment": "Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future"
              }
            ],
            "command": [
              {
                "$name": "vkCreatePrivateDataSlot"
              },
              {
                "$name": "vkDestroyPrivateDataSlot"
              },
              {
                "$name": "vkSetPrivateData"
              },
              {
                "$name": "vkGetPrivateData"
              }
            ],
            "$comment": "Promoted from VK_EXT_private_data (extension 296)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 298,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"
              },
              {
                "$bitpos": 8,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"
              },
              {
                "$bitpos": 9,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT"
              },
              {
                "$offset": 0,
                "$extends": "VkResult",
                "$extnumber": 298,
                "$name": "VK_PIPELINE_COMPILE_REQUIRED"
              },
              {
                "$bitpos": 0,
                "$extends": "VkPipelineCacheCreateFlagBits",
                "$name": "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePipelineCreationCacheControlFeatures"
            },
            "$comment": "Promoted from VK_EXT_pipeline_creation_cache_control (extension 298)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$extnumber": 315,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"
              },
              {
                "$bitpos": 0,
                "$extends": "VkEventCreateFlagBits",
                "$name": "VK_EVENT_CREATE_DEVICE_ONLY_BIT"
              },
              {
                "$offset": 0,
                "$extends": "VkImageLayout",
                "$extnumber": 315,
                "$name": "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"
              },
              {
                "$offset": 1,
                "$extends": "VkImageLayout",
                "$extnumber": 315,
                "$name": "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"
              },
              {
                "$value": 0,
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_NONE"
              },
              {
                "$value": 0,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_NONE"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineStageFlags2"
              },
              {
                "$name": "VkPipelineStageFlagBits2"
              },
              {
                "$name": "VkAccessFlags2"
              },
              {
                "$name": "VkAccessFlagBits2"
              },
              {
                "$name": "VkMemoryBarrier2"
              },
              {
                "$name": "VkBufferMemoryBarrier2"
              },
              {
                "$name": "VkImageMemoryBarrier2"
              },
              {
                "$name": "VkDependencyInfo"
              },
              {
                "$name": "VkSubmitInfo2"
              },
              {
                "$name": "VkSemaphoreSubmitInfo"
              },
              {
                "$name": "VkCommandBufferSubmitInfo"
              },
              {
                "$name": "VkSubmitFlagBits"
              },
              {
                "$name": "VkSubmitFlags"
              },
              {
                "$name": "VkPhysicalDeviceSynchronization2Features"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetEvent2"
              },
              {
                "$name": "vkCmdResetEvent2"
              },
              {
                "$name": "vkCmdWaitEvents2"
              },
              {
                "$name": "vkCmdPipelineBarrier2"
              },
              {
                "$name": "vkCmdWriteTimestamp2"
              },
              {
                "$name": "vkQueueSubmit2"
              }
            ],
            "$comment": "Promoted from VK_KHR_synchronization2 (extension 315)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 326,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"
            },
            "$comment": "Promoted from VK_KHR_zero_initialize_workgroup_memory (extension 326)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 336,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"
            },
            "type": {
              "$name": "VkPhysicalDeviceImageRobustnessFeatures"
            },
            "$comment": "Promoted from VK_EXT_image_robustness (extension 336)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COPY_2"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_COPY_2"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$extnumber": 338,
                "$name": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"
              }
            ],
            "type": [
              {
                "$name": "VkCopyBufferInfo2"
              },
              {
                "$name": "VkCopyImageInfo2"
              },
              {
                "$name": "VkCopyBufferToImageInfo2"
              },
              {
                "$name": "VkCopyImageToBufferInfo2"
              },
              {
                "$name": "VkBlitImageInfo2"
              },
              {
                "$name": "VkResolveImageInfo2"
              },
              {
                "$name": "VkBufferCopy2"
              },
              {
                "$name": "VkImageCopy2"
              },
              {
                "$name": "VkImageBlit2"
              },
              {
                "$name": "VkBufferImageCopy2"
              },
              {
                "$name": "VkImageResolve2"
              }
            ],
            "command": [
              {
                "$name": "vkCmdCopyBuffer2"
              },
              {
                "$name": "vkCmdCopyImage2"
              },
              {
                "$name": "vkCmdCopyBufferToImage2"
              },
              {
                "$name": "vkCmdCopyImageToBuffer2"
              },
              {
                "$name": "vkCmdBlitImage2"
              },
              {
                "$name": "vkCmdResolveImage2"
              }
            ],
            "$comment": "Promoted from VK_KHR_copy_commands2 (extension 338)"
          },
          {
            "type": [
              {
                "$name": "VkPhysicalDeviceSubgroupSizeControlFeatures"
              },
              {
                "$name": "VkPhysicalDeviceSubgroupSizeControlProperties"
              },
              {
                "$name": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"
              }
            ],
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 226,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 226,
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 226,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"
              },
              {
                "$bitpos": 0,
                "$extends": "VkPipelineShaderStageCreateFlagBits",
                "$name": "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkPipelineShaderStageCreateFlagBits",
                "$name": "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT"
              }
            ],
            "$comment": "Promoted from VK_EXT_subgroup_size_control (STDPROMOTE/PROPLIMCHANGE) (extension 226)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkDescriptorType",
                "$extnumber": 139,
                "$name": "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 139,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 139,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 139,
                "$name": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 139,
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceInlineUniformBlockFeatures"
              },
              {
                "$name": "VkPhysicalDeviceInlineUniformBlockProperties"
              },
              {
                "$name": "VkWriteDescriptorSetInlineUniformBlock"
              },
              {
                "$name": "VkDescriptorPoolInlineUniformBlockCreateInfo"
              }
            ],
            "$comment": "Promoted from VK_EXT_inline_uniform_block (STDPROMOTE/PROPLIMCHANGE) (extension 139)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkFormat",
                "$extnumber": 331,
                "$name": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM"
              },
              {
                "$offset": 1,
                "$extends": "VkFormat",
                "$extnumber": 331,
                "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"
              },
              {
                "$offset": 2,
                "$extends": "VkFormat",
                "$extnumber": 331,
                "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"
              },
              {
                "$offset": 3,
                "$extends": "VkFormat",
                "$extnumber": 331,
                "$name": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM"
              }
            ],
            "$comment": "Promoted from VK_EXT_ycbcr_2plane_444_formats (does not promote the Feature struct, just the formats) (extension 331)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkFormat",
                "$extnumber": 341,
                "$name": "VK_FORMAT_A4R4G4B4_UNORM_PACK16"
              },
              {
                "$offset": 1,
                "$extends": "VkFormat",
                "$extnumber": 341,
                "$name": "VK_FORMAT_A4B4G4R4_UNORM_PACK16"
              }
            ],
            "$comment": "Promoted from VK_EXT_4444_formats (does not promote the Feature struct, just the formats) (extension 341)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 67,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"
              },
              {
                "$offset": 0,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK"
              },
              {
                "$offset": 1,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK"
              },
              {
                "$offset": 2,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK"
              },
              {
                "$offset": 3,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK"
              },
              {
                "$offset": 4,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK"
              },
              {
                "$offset": 5,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK"
              },
              {
                "$offset": 6,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK"
              },
              {
                "$offset": 7,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK"
              },
              {
                "$offset": 8,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK"
              },
              {
                "$offset": 9,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK"
              },
              {
                "$offset": 10,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK"
              },
              {
                "$offset": 11,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK"
              },
              {
                "$offset": 12,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK"
              },
              {
                "$offset": 13,
                "$extends": "VkFormat",
                "$extnumber": 67,
                "$name": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures"
            },
            "$comment": "Promoted from VK_EXT_texture_compression_astc_hdr (Feature struct is promoted, but becomes optional) (extension 67)"
          },
          {
            "command": [
              {
                "$name": "vkCmdBeginRendering"
              },
              {
                "$name": "vkCmdEndRendering"
              }
            ],
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_RENDERING_INFO"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"
              },
              {
                "$offset": 0,
                "$extends": "VkAttachmentStoreOp",
                "$extnumber": 302,
                "$name": "VK_ATTACHMENT_STORE_OP_NONE"
              }
            ],
            "type": [
              {
                "$name": "VkRenderingInfo"
              },
              {
                "$name": "VkRenderingAttachmentInfo"
              },
              {
                "$name": "VkPipelineRenderingCreateInfo"
              },
              {
                "$name": "VkPhysicalDeviceDynamicRenderingFeatures"
              },
              {
                "$name": "VkCommandBufferInheritanceRenderingInfo"
              },
              {
                "$name": "VkRenderingFlags"
              },
              {
                "$name": "VkRenderingFlagBits"
              }
            ],
            "$comment": "Promoted from VK_KHR_dynamic_rendering (extension 45)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_CULL_MODE"
              },
              {
                "$offset": 1,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_FRONT_FACE"
              },
              {
                "$offset": 2,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY"
              },
              {
                "$offset": 3,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT"
              },
              {
                "$offset": 4,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT"
              },
              {
                "$offset": 5,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE"
              },
              {
                "$offset": 6,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE"
              },
              {
                "$offset": 7,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE"
              },
              {
                "$offset": 8,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP"
              },
              {
                "$offset": 9,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE"
              },
              {
                "$offset": 10,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE"
              },
              {
                "$offset": 11,
                "$extends": "VkDynamicState",
                "$extnumber": 268,
                "$name": "VK_DYNAMIC_STATE_STENCIL_OP"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetCullMode"
              },
              {
                "$name": "vkCmdSetFrontFace"
              },
              {
                "$name": "vkCmdSetPrimitiveTopology"
              },
              {
                "$name": "vkCmdSetViewportWithCount"
              },
              {
                "$name": "vkCmdSetScissorWithCount"
              },
              {
                "$name": "vkCmdBindVertexBuffers2"
              },
              {
                "$name": "vkCmdSetDepthTestEnable"
              },
              {
                "$name": "vkCmdSetDepthWriteEnable"
              },
              {
                "$name": "vkCmdSetDepthCompareOp"
              },
              {
                "$name": "vkCmdSetDepthBoundsTestEnable"
              },
              {
                "$name": "vkCmdSetStencilTestEnable"
              },
              {
                "$name": "vkCmdSetStencilOp"
              }
            ],
            "$comment": "Promoted from VK_EXT_extended_dynamic_state (Feature struct is not promoted) (extension 268)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 281,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 281,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderIntegerDotProductFeatures"
              },
              {
                "$name": "VkPhysicalDeviceShaderIntegerDotProductProperties"
              }
            ],
            "$comment": "Promoted from VK_KHR_shader_integer_dot_product (extension 281)"
          },
          {
            "enum": {
              "$offset": 1,
              "$extends": "VkStructureType",
              "$extnumber": 282,
              "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"
            },
            "type": {
              "$name": "VkPhysicalDeviceTexelBufferAlignmentProperties"
            },
            "$comment": "Promoted from VK_EXT_texel_buffer_alignment (extension 282)"
          },
          {
            "enum": {
              "$offset": 0,
              "$extends": "VkStructureType",
              "$extnumber": 361,
              "$name": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"
            },
            "type": [
              {
                "$name": "VkFormatFeatureFlags2"
              },
              {
                "$name": "VkFormatFeatureFlagBits2"
              },
              {
                "$name": "VkFormatProperties3"
              }
            ],
            "$comment": "Promoted from VK_KHR_format_feature_flags2 (extension 361)"
          },
          {
            "enum": [
              {
                "$offset": 1,
                "$extends": "VkDynamicState",
                "$extnumber": 378,
                "$name": "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE"
              },
              {
                "$offset": 2,
                "$extends": "VkDynamicState",
                "$extnumber": 378,
                "$name": "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE"
              },
              {
                "$offset": 4,
                "$extends": "VkDynamicState",
                "$extnumber": 378,
                "$name": "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetRasterizerDiscardEnable"
              },
              {
                "$name": "vkCmdSetDepthBiasEnable"
              },
              {
                "$name": "vkCmdSetPrimitiveRestartEnable"
              }
            ],
            "$comment": "Promoted from VK_EXT_extended_dynamic_state2 (Feature struct and optional state are not promoted) (extension 378)"
          },
          {
            "enum": [
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 414,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 414,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 414,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$extnumber": 414,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"
              },
              {
                "$value": 0,
                "$extends": "VkImageAspectFlagBits",
                "$name": "VK_IMAGE_ASPECT_NONE"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMaintenance4Features"
              },
              {
                "$name": "VkPhysicalDeviceMaintenance4Properties"
              },
              {
                "$name": "VkDeviceBufferMemoryRequirements"
              },
              {
                "$name": "VkDeviceImageMemoryRequirements"
              }
            ],
            "command": [
              {
                "$name": "vkGetDeviceBufferMemoryRequirements"
              },
              {
                "$name": "vkGetDeviceImageMemoryRequirements"
              },
              {
                "$name": "vkGetDeviceImageSparseMemoryRequirements"
              }
            ],
            "$comment": "Promoted from VK_KHR_maintenance4 (extension 414)"
          }
        ],
        "$api": "vulkan",
        "$name": "VK_VERSION_1_3",
        "$number": 1.3,
        "$comment": "Vulkan 1.3 core API interface definitions."
      }
    ],
    "extensions": {
      "extension": [
        {
          "require": {
            "type": {
              "$name": "VK_MAKE_VIDEO_STD_VERSION"
            }
          },
          "$name": "vulkan_video_codecs_common",
          "$comment": "protect with VULKAN_VIDEO_CODEC_COMMON_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codecs_common.h"
              },
              {
                "$name": "StdVideoH264ChromaFormatIdc"
              },
              {
                "$name": "StdVideoH264ProfileIdc"
              },
              {
                "$name": "StdVideoH264LevelIdc"
              },
              {
                "$name": "StdVideoH264PocType"
              },
              {
                "$name": "StdVideoH264AspectRatioIdc"
              },
              {
                "$name": "StdVideoH264WeightedBipredIdc"
              },
              {
                "$name": "StdVideoH264ModificationOfPicNumsIdc"
              },
              {
                "$name": "StdVideoH264MemMgmtControlOp"
              },
              {
                "$name": "StdVideoH264CabacInitIdc"
              },
              {
                "$name": "StdVideoH264DisableDeblockingFilterIdc"
              },
              {
                "$name": "StdVideoH264SliceType"
              },
              {
                "$name": "StdVideoH264PictureType"
              },
              {
                "$name": "StdVideoH264NonVclNaluType"
              },
              {
                "$name": "StdVideoH264SpsVuiFlags"
              },
              {
                "$name": "StdVideoH264HrdParameters"
              },
              {
                "$name": "StdVideoH264SequenceParameterSetVui"
              },
              {
                "$name": "StdVideoH264SpsFlags"
              },
              {
                "$name": "StdVideoH264ScalingLists"
              },
              {
                "$name": "StdVideoH264SequenceParameterSet"
              },
              {
                "$name": "StdVideoH264PpsFlags"
              },
              {
                "$name": "StdVideoH264PictureParameterSet"
              }
            ],
            "enum": [
              {
                "$name": "STD_VIDEO_H264_CPB_CNT_LIST_SIZE",
                "$value": 32
              },
              {
                "$name": "STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS",
                "$value": 16
              },
              {
                "$name": "STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS",
                "$value": 64
              },
              {
                "$name": "STD_VIDEO_H264_MAX_NUM_LIST_REF",
                "$value": 32
              },
              {
                "$name": "STD_VIDEO_H264_MAX_CHROMA_PLANES",
                "$value": 2
              }
            ]
          },
          "$name": "vulkan_video_codec_h264std",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H264STD_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codec_h264std.h"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_0_9_8"
              },
              {
                "$name": "StdVideoDecodeH264FieldOrderCount"
              },
              {
                "$name": "StdVideoDecodeH264PictureInfoFlags"
              },
              {
                "$name": "StdVideoDecodeH264PictureInfo"
              },
              {
                "$name": "StdVideoDecodeH264ReferenceInfoFlags"
              },
              {
                "$name": "StdVideoDecodeH264ReferenceInfo"
              }
            ],
            "enum": [
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION",
                "$value": "VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_0_9_8"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME",
                "$value": "\"VK_STD_vulkan_video_codec_h264_decode\""
              },
              {
                "$name": "STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE",
                "$value": 2
              }
            ]
          },
          "$name": "vulkan_video_codec_h264std_decode",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H264STD_DECODE_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codec_h264std.h"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_0_9_8"
              },
              {
                "$name": "StdVideoEncodeH264WeightTableFlags"
              },
              {
                "$name": "StdVideoEncodeH264WeightTable"
              },
              {
                "$name": "StdVideoEncodeH264SliceHeaderFlags"
              },
              {
                "$name": "StdVideoEncodeH264PictureInfoFlags"
              },
              {
                "$name": "StdVideoEncodeH264ReferenceInfoFlags"
              },
              {
                "$name": "StdVideoEncodeH264RefMgmtFlags"
              },
              {
                "$name": "StdVideoEncodeH264RefListModEntry"
              },
              {
                "$name": "StdVideoEncodeH264RefPicMarkingEntry"
              },
              {
                "$name": "StdVideoEncodeH264RefMemMgmtCtrlOperations"
              },
              {
                "$name": "StdVideoEncodeH264PictureInfo"
              },
              {
                "$name": "StdVideoEncodeH264ReferenceInfo"
              },
              {
                "$name": "StdVideoEncodeH264SliceHeader"
              }
            ],
            "enum": [
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION",
                "$value": "VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_0_9_8"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME",
                "$value": "\"VK_STD_vulkan_video_codec_h264_encode\""
              }
            ]
          },
          "$name": "vulkan_video_codec_h264std_encode",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codecs_common.h"
              },
              {
                "$name": "StdVideoH265ChromaFormatIdc"
              },
              {
                "$name": "StdVideoH265ProfileIdc"
              },
              {
                "$name": "StdVideoH265LevelIdc"
              },
              {
                "$name": "StdVideoH265SliceType"
              },
              {
                "$name": "StdVideoH265PictureType"
              },
              {
                "$name": "StdVideoH265AspectRatioIdc"
              },
              {
                "$name": "StdVideoH265DecPicBufMgr"
              },
              {
                "$name": "StdVideoH265SubLayerHrdParameters"
              },
              {
                "$name": "StdVideoH265HrdFlags"
              },
              {
                "$name": "StdVideoH265HrdParameters"
              },
              {
                "$name": "StdVideoH265VpsFlags"
              },
              {
                "$name": "StdVideoH265VideoParameterSet"
              },
              {
                "$name": "StdVideoH265ScalingLists"
              },
              {
                "$name": "StdVideoH265SpsVuiFlags"
              },
              {
                "$name": "StdVideoH265SequenceParameterSetVui"
              },
              {
                "$name": "StdVideoH265PredictorPaletteEntries"
              },
              {
                "$name": "StdVideoH265SpsFlags"
              },
              {
                "$name": "StdVideoH265SequenceParameterSet"
              },
              {
                "$name": "StdVideoH265PpsFlags"
              },
              {
                "$name": "StdVideoH265PictureParameterSet"
              }
            ],
            "enum": [
              {
                "$name": "STD_VIDEO_H265_CPB_CNT_LIST_SIZE",
                "$value": 32
              },
              {
                "$name": "STD_VIDEO_H265_SUBLAYERS_LIST_SIZE",
                "$value": 7
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS",
                "$value": 16
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS",
                "$value": 64
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS",
                "$value": 64
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS",
                "$value": 2
              },
              {
                "$name": "STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS",
                "$value": 64
              },
              {
                "$name": "STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE",
                "$value": 6
              },
              {
                "$name": "STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE",
                "$value": 19
              },
              {
                "$name": "STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE",
                "$value": 21
              },
              {
                "$name": "STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE",
                "$value": 3
              },
              {
                "$name": "STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE",
                "$value": 128
              },
              {
                "$name": "STD_VIDEO_H265_MAX_NUM_LIST_REF",
                "$value": 15
              },
              {
                "$name": "STD_VIDEO_H265_MAX_CHROMA_PLANES",
                "$value": 2
              },
              {
                "$name": "STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS",
                "$value": 64
              },
              {
                "$name": "STD_VIDEO_H265_MAX_DPB_SIZE",
                "$value": 16
              },
              {
                "$name": "STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS",
                "$value": 32
              },
              {
                "$name": "STD_VIDEO_H265_MAX_LONG_TERM_PICS",
                "$value": 16
              },
              {
                "$name": "STD_VIDEO_H265_MAX_DELTA_POC",
                "$value": 48
              }
            ]
          },
          "$name": "vulkan_video_codec_h265std",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H265STD_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codec_h265std.h"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_0_9_9"
              },
              {
                "$name": "StdVideoDecodeH265PictureInfoFlags"
              },
              {
                "$name": "StdVideoDecodeH265PictureInfo"
              },
              {
                "$name": "StdVideoDecodeH265ReferenceInfoFlags"
              },
              {
                "$name": "StdVideoDecodeH265ReferenceInfo"
              }
            ],
            "enum": [
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION",
                "$value": "VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_0_9_9"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME",
                "$value": "\"VK_STD_vulkan_video_codec_h265_decode\""
              },
              {
                "$name": "STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE",
                "$value": 8
              }
            ]
          },
          "$name": "vulkan_video_codec_h265std_decode",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H265STD_DECODE_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "type": [
              {
                "$name": "vk_video/vulkan_video_codec_h265std.h"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_0_9_9"
              },
              {
                "$name": "StdVideoEncodeH265WeightTableFlags"
              },
              {
                "$name": "StdVideoEncodeH265WeightTable"
              },
              {
                "$name": "StdVideoEncodeH265SliceSegmentHeaderFlags"
              },
              {
                "$name": "StdVideoEncodeH265SliceSegmentHeader"
              },
              {
                "$name": "StdVideoEncodeH265ReferenceModificationFlags"
              },
              {
                "$name": "StdVideoEncodeH265ReferenceModifications"
              },
              {
                "$name": "StdVideoEncodeH265PictureInfoFlags"
              },
              {
                "$name": "StdVideoEncodeH265PictureInfo"
              },
              {
                "$name": "StdVideoEncodeH265ReferenceInfoFlags"
              },
              {
                "$name": "StdVideoEncodeH265ReferenceInfo"
              }
            ],
            "enum": [
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION",
                "$value": "VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_0_9_9"
              },
              {
                "$name": "VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME",
                "$value": "\"VK_STD_vulkan_video_codec_h265_encode\""
              }
            ]
          },
          "$name": "vulkan_video_codec_h265std_encode",
          "$comment": "protect with VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 25,
                "$name": "VK_KHR_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_surface\"",
                "$name": "VK_KHR_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_SURFACE_LOST_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_SURFACE_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkSurfaceKHR"
              },
              {
                "$name": "VkSurfaceTransformFlagBitsKHR"
              },
              {
                "$name": "VkPresentModeKHR"
              },
              {
                "$name": "VkColorSpaceKHR"
              },
              {
                "$name": "VkCompositeAlphaFlagBitsKHR"
              },
              {
                "$name": "VkCompositeAlphaFlagsKHR"
              },
              {
                "$name": "VkSurfaceCapabilitiesKHR"
              },
              {
                "$name": "VkSurfaceFormatKHR"
              }
            ],
            "command": [
              {
                "$name": "vkDestroySurfaceKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSurfaceSupportKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSurfaceFormatsKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSurfacePresentModesKHR"
              }
            ]
          },
          "$name": "VK_KHR_surface",
          "$number": 1,
          "$type": "instance",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 70,
                  "$name": "VK_KHR_SWAPCHAIN_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_swapchain\"",
                  "$name": "VK_KHR_SWAPCHAIN_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"
                },
                {
                  "$offset": 2,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR"
                },
                {
                  "$offset": 3,
                  "$extends": "VkResult",
                  "$name": "VK_SUBOPTIMAL_KHR"
                },
                {
                  "$offset": 4,
                  "$extends": "VkResult",
                  "$dir": "-",
                  "$name": "VK_ERROR_OUT_OF_DATE_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkObjectType",
                  "$name": "VK_OBJECT_TYPE_SWAPCHAIN_KHR"
                }
              ],
              "type": [
                {
                  "$name": "VkSwapchainCreateFlagBitsKHR"
                },
                {
                  "$name": "VkSwapchainCreateFlagsKHR"
                },
                {
                  "$name": "VkSwapchainCreateInfoKHR"
                },
                {
                  "$name": "VkSwapchainKHR"
                },
                {
                  "$name": "VkPresentInfoKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkCreateSwapchainKHR"
                },
                {
                  "$name": "vkDestroySwapchainKHR"
                },
                {
                  "$name": "vkGetSwapchainImagesKHR"
                },
                {
                  "$name": "vkAcquireNextImageKHR"
                },
                {
                  "$name": "vkQueuePresentKHR"
                }
              ]
            },
            {
              "comment": {
                "#text": "This duplicates definitions in VK_KHR_device_group below"
              },
              "enum": [
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 7,
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"
                },
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 8,
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"
                },
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 9,
                  "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"
                },
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 10,
                  "$name": "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"
                },
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 11,
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"
                },
                {
                  "$extends": "VkStructureType",
                  "$extnumber": 61,
                  "$offset": 12,
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"
                },
                {
                  "$bitpos": 0,
                  "$extends": "VkSwapchainCreateFlagBitsKHR",
                  "$name": "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                  "$comment": "Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"
                },
                {
                  "$bitpos": 1,
                  "$extends": "VkSwapchainCreateFlagBitsKHR",
                  "$name": "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR",
                  "$comment": "Swapchain is protected"
                }
              ],
              "type": [
                {
                  "$name": "VkImageSwapchainCreateInfoKHR"
                },
                {
                  "$name": "VkBindImageMemorySwapchainInfoKHR"
                },
                {
                  "$name": "VkAcquireNextImageInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentModeFlagBitsKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentModeFlagsKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentCapabilitiesKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupSwapchainCreateInfoKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkGetDeviceGroupPresentCapabilitiesKHR"
                },
                {
                  "$name": "vkGetDeviceGroupSurfacePresentModesKHR"
                },
                {
                  "$name": "vkGetPhysicalDevicePresentRectanglesKHR"
                },
                {
                  "$name": "vkAcquireNextImage2KHR"
                }
              ],
              "$feature": "VK_VERSION_1_1"
            }
          ],
          "$name": "VK_KHR_swapchain",
          "$number": 2,
          "$type": "device",
          "$requires": "VK_KHR_surface",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 23,
                "$name": "VK_KHR_DISPLAY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_display\"",
                "$name": "VK_KHR_DISPLAY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_DISPLAY_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_DISPLAY_MODE_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkDisplayKHR"
              },
              {
                "$name": "VkDisplayModeCreateFlagsKHR"
              },
              {
                "$name": "VkDisplayModeCreateInfoKHR"
              },
              {
                "$name": "VkDisplayModeKHR"
              },
              {
                "$name": "VkDisplayModeParametersKHR"
              },
              {
                "$name": "VkDisplayModePropertiesKHR"
              },
              {
                "$name": "VkDisplayPlaneAlphaFlagBitsKHR"
              },
              {
                "$name": "VkDisplayPlaneAlphaFlagsKHR"
              },
              {
                "$name": "VkDisplayPlaneCapabilitiesKHR"
              },
              {
                "$name": "VkDisplayPlanePropertiesKHR"
              },
              {
                "$name": "VkDisplayPropertiesKHR"
              },
              {
                "$name": "VkDisplaySurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkDisplaySurfaceCreateInfoKHR"
              },
              {
                "$name": "VkSurfaceTransformFlagsKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceDisplayPropertiesKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"
              },
              {
                "$name": "vkGetDisplayPlaneSupportedDisplaysKHR"
              },
              {
                "$name": "vkGetDisplayModePropertiesKHR"
              },
              {
                "$name": "vkCreateDisplayModeKHR"
              },
              {
                "$name": "vkGetDisplayPlaneCapabilitiesKHR"
              },
              {
                "$name": "vkCreateDisplayPlaneSurfaceKHR"
              }
            ]
          },
          "$name": "VK_KHR_display",
          "$number": 3,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo,Norbert Nopper @FslNopper",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 10,
                "$name": "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_display_swapchain\"",
                "$name": "VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"
              }
            ],
            "type": {
              "$name": "VkDisplayPresentInfoKHR"
            },
            "command": {
              "$name": "vkCreateSharedSwapchainsKHR"
            }
          },
          "$name": "VK_KHR_display_swapchain",
          "$number": 4,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_KHR_display",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 6,
                "$name": "VK_KHR_XLIB_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_xlib_surface\"",
                "$name": "VK_KHR_XLIB_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkXlibSurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkXlibSurfaceCreateInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkCreateXlibSurfaceKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceXlibPresentationSupportKHR"
              }
            ]
          },
          "$name": "VK_KHR_xlib_surface",
          "$number": 5,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "xlib",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 6,
                "$name": "VK_KHR_XCB_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_xcb_surface\"",
                "$name": "VK_KHR_XCB_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkXcbSurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkXcbSurfaceCreateInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkCreateXcbSurfaceKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceXcbPresentationSupportKHR"
              }
            ]
          },
          "$name": "VK_KHR_xcb_surface",
          "$number": 6,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "xcb",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 6,
                "$name": "VK_KHR_WAYLAND_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_wayland_surface\"",
                "$name": "VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkWaylandSurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkWaylandSurfaceCreateInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkCreateWaylandSurfaceKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceWaylandPresentationSupportKHR"
              }
            ]
          },
          "$name": "VK_KHR_wayland_surface",
          "$number": 7,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "wayland",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_KHR_MIR_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_mir_surface\"",
                "$name": "VK_KHR_MIR_SURFACE_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_mir_surface",
          "$number": 8,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$author": "KHR",
          "$supported": "disabled",
          "$comment": "Extension permanently disabled. Extension number should not be reused"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 6,
                "$name": "VK_KHR_ANDROID_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_android_surface\"",
                "$name": "VK_KHR_ANDROID_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "ANativeWindow"
              },
              {
                "$name": "VkAndroidSurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkAndroidSurfaceCreateInfoKHR"
              }
            ],
            "command": {
              "$name": "vkCreateAndroidSurfaceKHR"
            }
          },
          "$name": "VK_KHR_android_surface",
          "$number": 9,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "android",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 6,
                "$name": "VK_KHR_WIN32_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_win32_surface\"",
                "$name": "VK_KHR_WIN32_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkWin32SurfaceCreateFlagsKHR"
              },
              {
                "$name": "VkWin32SurfaceCreateInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkCreateWin32SurfaceKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceWin32PresentationSupportKHR"
              }
            ]
          },
          "$name": "VK_KHR_win32_surface",
          "$number": 10,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "win32",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec,Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "comment": {
              "#text": "VK_ANDROID_native_buffer is used between the Android Vulkan loader and drivers to implement the WSI extensions. It is not exposed to applications and uses types that are not part of Android's stable public API, so it is left disabled to keep it out of the standard Vulkan headers."
            },
            "enum": [
              {
                "$value": 8,
                "$name": "VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION"
              },
              {
                "$value": 11,
                "$name": "VK_ANDROID_NATIVE_BUFFER_NUMBER"
              },
              {
                "$value": "\"VK_ANDROID_native_buffer\"",
                "$name": "VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME"
              },
              {
                "$name": "VK_ANDROID_NATIVE_BUFFER_NAME",
                "$alias": "VK_ANDROID_NATIVE_BUFFER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID"
              }
            ],
            "type": [
              {
                "$name": "VkNativeBufferANDROID"
              },
              {
                "$name": "VkSwapchainImageCreateInfoANDROID"
              },
              {
                "$name": "VkPhysicalDevicePresentationPropertiesANDROID"
              },
              {
                "$name": "VkNativeBufferUsage2ANDROID"
              },
              {
                "$name": "VkSwapchainImageUsageFlagBitsANDROID"
              },
              {
                "$name": "VkSwapchainImageUsageFlagsANDROID"
              }
            ],
            "command": [
              {
                "$name": "vkGetSwapchainGrallocUsageANDROID"
              },
              {
                "$name": "vkAcquireImageANDROID"
              },
              {
                "$name": "vkQueueSignalReleaseImageANDROID"
              },
              {
                "$name": "vkGetSwapchainGrallocUsage2ANDROID"
              }
            ]
          },
          "$name": "VK_ANDROID_native_buffer",
          "$number": 11,
          "$type": "device",
          "$author": "ANDROID",
          "$platform": "android",
          "$contact": "Jesse Hall @critsec",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 10,
                  "$name": "VK_EXT_DEBUG_REPORT_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_debug_report\"",
                  "$name": "VK_EXT_DEBUG_REPORT_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"
                },
                {
                  "$alias": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT",
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT",
                  "$comment": "Backwards-compatible alias containing a typo"
                },
                {
                  "$offset": 1,
                  "$extends": "VkResult",
                  "$dir": "-",
                  "$name": "VK_ERROR_VALIDATION_FAILED_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkObjectType",
                  "$name": "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT"
                }
              ],
              "type": [
                {
                  "$name": "VkDebugReportCallbackEXT"
                },
                {
                  "$name": "PFN_vkDebugReportCallbackEXT"
                },
                {
                  "$name": "VkDebugReportFlagBitsEXT"
                },
                {
                  "$name": "VkDebugReportFlagsEXT"
                },
                {
                  "$name": "VkDebugReportObjectTypeEXT"
                },
                {
                  "$name": "VkDebugReportCallbackCreateInfoEXT"
                }
              ],
              "command": [
                {
                  "$name": "vkCreateDebugReportCallbackEXT"
                },
                {
                  "$name": "vkDestroyDebugReportCallbackEXT"
                },
                {
                  "$name": "vkDebugReportMessageEXT"
                }
              ]
            },
            {
              "comment": {
                "#text": "This duplicates definitions in other extensions, below"
              },
              "enum": [
                {
                  "$extends": "VkDebugReportObjectTypeEXT",
                  "$extnumber": 157,
                  "$offset": 0,
                  "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"
                },
                {
                  "$extends": "VkDebugReportObjectTypeEXT",
                  "$extnumber": 86,
                  "$offset": 0,
                  "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT"
                }
              ],
              "$feature": "VK_VERSION_1_1"
            }
          ],
          "$name": "VK_EXT_debug_report",
          "$number": 12,
          "$type": "instance",
          "$author": "GOOGLE",
          "$contact": "Courtney Goeltzenleuchter @courtney-g",
          "$specialuse": "debugging",
          "$supported": "vulkan",
          "$deprecatedby": "VK_EXT_debug_utils"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_GLSL_SHADER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_glsl_shader\"",
                "$name": "VK_NV_GLSL_SHADER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_INVALID_SHADER_NV"
              }
            ]
          },
          "$name": "VK_NV_glsl_shader",
          "$number": 13,
          "$type": "device",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$deprecatedby": ""
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_depth_range_unrestricted\"",
                "$name": "VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_depth_range_unrestricted",
          "$type": "device",
          "$number": 14,
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_sampler_mirror_clamp_to_edge\"",
                "$name": "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME"
              },
              {
                "$value": 4,
                "$extends": "VkSamplerAddressMode",
                "$name": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
                "$comment": "Note that this defines what was previously a core enum, and so uses the 'value' attribute rather than 'offset', and does not have a suffix. This is a special case, and should not be repeated"
              },
              {
                "$extends": "VkSamplerAddressMode",
                "$name": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR",
                "$alias": "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
                "$comment": "Alias introduced for consistency with extension suffixing rules"
              }
            ]
          },
          "$name": "VK_KHR_sampler_mirror_clamp_to_edge",
          "$type": "device",
          "$number": 15,
          "$author": "KHR",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_IMG_FILTER_CUBIC_SPEC_VERSION"
              },
              {
                "$value": "\"VK_IMG_filter_cubic\"",
                "$name": "VK_IMG_FILTER_CUBIC_EXTENSION_NAME"
              },
              {
                "$extends": "VkFilter",
                "$name": "VK_FILTER_CUBIC_IMG",
                "$alias": "VK_FILTER_CUBIC_EXT"
              },
              {
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG",
                "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT",
                "$comment": "Format can be filtered with VK_FILTER_CUBIC_IMG when being sampled"
              }
            ]
          },
          "$name": "VK_IMG_filter_cubic",
          "$number": 16,
          "$type": "device",
          "$author": "IMG",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_17_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_17\"",
                "$name": "VK_AMD_EXTENSION_17_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_17",
          "$number": 17,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_18_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_18\"",
                "$name": "VK_AMD_EXTENSION_18_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_18",
          "$number": 18,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_rasterization_order\"",
                "$name": "VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"
              }
            ],
            "type": [
              {
                "$name": "VkRasterizationOrderAMD"
              },
              {
                "$name": "VkPipelineRasterizationStateRasterizationOrderAMD"
              }
            ]
          },
          "$name": "VK_AMD_rasterization_order",
          "$number": 19,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_20_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_20\"",
                "$name": "VK_AMD_EXTENSION_20_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_20",
          "$number": 20,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_trinary_minmax\"",
                "$name": "VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_shader_trinary_minmax",
          "$number": 21,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Qun Lin @linqun",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_explicit_vertex_parameter\"",
                "$name": "VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_shader_explicit_vertex_parameter",
          "$number": 22,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Qun Lin @linqun",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_EXT_DEBUG_MARKER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_debug_marker\"",
                "$name": "VK_EXT_DEBUG_MARKER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkDebugReportObjectTypeEXT"
              },
              {
                "$name": "VkDebugMarkerObjectNameInfoEXT"
              },
              {
                "$name": "VkDebugMarkerObjectTagInfoEXT"
              },
              {
                "$name": "VkDebugMarkerMarkerInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkDebugMarkerSetObjectTagEXT"
              },
              {
                "$name": "vkDebugMarkerSetObjectNameEXT"
              },
              {
                "$name": "vkCmdDebugMarkerBeginEXT"
              },
              {
                "$name": "vkCmdDebugMarkerEndEXT"
              },
              {
                "$name": "vkCmdDebugMarkerInsertEXT"
              }
            ]
          },
          "$name": "VK_EXT_debug_marker",
          "$number": 23,
          "$type": "device",
          "$requires": "VK_EXT_debug_report",
          "$author": "Baldur Karlsson",
          "$contact": "Baldur Karlsson @baldurk",
          "$specialuse": "debugging",
          "$supported": "vulkan",
          "$promotedto": "VK_EXT_debug_utils"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 7,
                "$name": "VK_KHR_VIDEO_QUEUE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_video_queue\"",
                "$name": "VK_KHR_VIDEO_QUEUE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 11,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 12,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 13,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 14,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 15,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 16,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_VIDEO_SESSION_KHR",
                "$comment": "VkVideoSessionKHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR",
                "$comment": "VkVideoSessionParametersKHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$bitpos": 4,
                "$extends": "VkQueryResultFlagBits",
                "$name": "VK_QUERY_RESULT_WITH_STATUS_BIT_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 0,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 2,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkResult",
                "$dir": "-",
                "$name": "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkVideoSessionKHR"
              },
              {
                "$name": "VkVideoSessionParametersKHR"
              },
              {
                "$name": "VkVideoCodecOperationFlagBitsKHR"
              },
              {
                "$name": "VkVideoCodecOperationFlagsKHR"
              },
              {
                "$name": "VkVideoChromaSubsamplingFlagBitsKHR"
              },
              {
                "$name": "VkVideoChromaSubsamplingFlagsKHR"
              },
              {
                "$name": "VkVideoComponentBitDepthFlagBitsKHR"
              },
              {
                "$name": "VkVideoComponentBitDepthFlagsKHR"
              },
              {
                "$name": "VkVideoCapabilityFlagBitsKHR"
              },
              {
                "$name": "VkVideoCapabilityFlagsKHR"
              },
              {
                "$name": "VkVideoSessionCreateFlagBitsKHR"
              },
              {
                "$name": "VkVideoSessionCreateFlagsKHR"
              },
              {
                "$name": "VkVideoSessionParametersCreateFlagsKHR"
              },
              {
                "$name": "VkVideoBeginCodingFlagsKHR"
              },
              {
                "$name": "VkVideoEndCodingFlagsKHR"
              },
              {
                "$name": "VkVideoCodingControlFlagBitsKHR"
              },
              {
                "$name": "VkVideoCodingControlFlagsKHR"
              },
              {
                "$name": "VkQueueFamilyQueryResultStatusPropertiesKHR"
              },
              {
                "$name": "VkQueryResultStatusKHR"
              },
              {
                "$name": "VkQueueFamilyVideoPropertiesKHR"
              },
              {
                "$name": "VkVideoProfileInfoKHR"
              },
              {
                "$name": "VkVideoProfileListInfoKHR"
              },
              {
                "$name": "VkVideoCapabilitiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceVideoFormatInfoKHR"
              },
              {
                "$name": "VkVideoFormatPropertiesKHR"
              },
              {
                "$name": "VkVideoPictureResourceInfoKHR"
              },
              {
                "$name": "VkVideoReferenceSlotInfoKHR"
              },
              {
                "$name": "VkVideoSessionMemoryRequirementsKHR"
              },
              {
                "$name": "VkBindVideoSessionMemoryInfoKHR"
              },
              {
                "$name": "VkVideoSessionCreateInfoKHR"
              },
              {
                "$name": "VkVideoSessionParametersCreateInfoKHR"
              },
              {
                "$name": "VkVideoSessionParametersUpdateInfoKHR"
              },
              {
                "$name": "VkVideoBeginCodingInfoKHR"
              },
              {
                "$name": "VkVideoEndCodingInfoKHR"
              },
              {
                "$name": "VkVideoCodingControlInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceVideoCapabilitiesKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceVideoFormatPropertiesKHR"
              },
              {
                "$name": "vkCreateVideoSessionKHR"
              },
              {
                "$name": "vkDestroyVideoSessionKHR"
              },
              {
                "$name": "vkGetVideoSessionMemoryRequirementsKHR"
              },
              {
                "$name": "vkBindVideoSessionMemoryKHR"
              },
              {
                "$name": "vkCreateVideoSessionParametersKHR"
              },
              {
                "$name": "vkUpdateVideoSessionParametersKHR"
              },
              {
                "$name": "vkDestroyVideoSessionParametersKHR"
              },
              {
                "$name": "vkCmdBeginVideoCodingKHR"
              },
              {
                "$name": "vkCmdEndVideoCodingKHR"
              },
              {
                "$name": "vkCmdControlVideoCodingKHR"
              }
            ]
          },
          "$name": "VK_KHR_video_queue",
          "$number": 24,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_synchronization2",
          "$author": "KHR",
          "$contact": "Tony Zlatinski @tzlatinski",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan",
          "$requiresCore": 1.1
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 6,
                  "$name": "VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_video_decode_queue\"",
                  "$name": "VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 5,
                  "$extends": "VkQueueFlagBits",
                  "$name": "VK_QUEUE_VIDEO_DECODE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 26,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 35,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 36,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 13,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 14,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 10,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 11,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 12,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 25,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 26,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 0,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 1,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 2,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                }
              ],
              "type": [
                {
                  "$name": "VkVideoDecodeCapabilityFlagBitsKHR"
                },
                {
                  "$name": "VkVideoDecodeCapabilityFlagsKHR"
                },
                {
                  "$name": "VkVideoDecodeCapabilitiesKHR"
                },
                {
                  "$name": "VkVideoDecodeUsageFlagBitsKHR"
                },
                {
                  "$name": "VkVideoDecodeUsageFlagsKHR"
                },
                {
                  "$name": "VkVideoDecodeUsageInfoKHR"
                },
                {
                  "$name": "VkVideoDecodeFlagsKHR"
                },
                {
                  "$name": "VkVideoDecodeInfoKHR"
                }
              ],
              "command": {
                "$name": "vkCmdDecodeVideoKHR"
              }
            },
            {
              "enum": [
                {
                  "$bitpos": 25,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 26,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                }
              ],
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_KHR_video_decode_queue",
          "$number": 25,
          "$type": "device",
          "$requires": "VK_KHR_video_queue,VK_KHR_synchronization2",
          "$author": "KHR",
          "$contact": "jake.beju@amd.com",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_GCN_SHADER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_gcn_shader\"",
                "$name": "VK_AMD_GCN_SHADER_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_gcn_shader",
          "$number": 26,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Dominik Witczak @dominikwitczakamd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_dedicated_allocation\"",
                "$name": "VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkDedicatedAllocationImageCreateInfoNV"
              },
              {
                "$name": "VkDedicatedAllocationBufferCreateInfoNV"
              },
              {
                "$name": "VkDedicatedAllocationMemoryAllocateInfoNV"
              }
            ]
          },
          "$name": "VK_NV_dedicated_allocation",
          "$number": 27,
          "$type": "device",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_dedicated_allocation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_28_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_28\"",
                "$name": "VK_EXT_EXTENSION_28_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_28",
          "$number": 28,
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_transform_feedback\"",
                "$name": "VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT"
              },
              {
                "$bitpos": 11,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT"
              },
              {
                "$bitpos": 12,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT"
              },
              {
                "$bitpos": 25,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"
              },
              {
                "$bitpos": 26,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT"
              },
              {
                "$bitpos": 27,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT"
              },
              {
                "$bitpos": 24,
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdBindTransformFeedbackBuffersEXT"
              },
              {
                "$name": "vkCmdBeginTransformFeedbackEXT"
              },
              {
                "$name": "vkCmdEndTransformFeedbackEXT"
              },
              {
                "$name": "vkCmdBeginQueryIndexedEXT"
              },
              {
                "$name": "vkCmdEndQueryIndexedEXT"
              },
              {
                "$name": "vkCmdDrawIndirectByteCountEXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceTransformFeedbackFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceTransformFeedbackPropertiesEXT"
              },
              {
                "$name": "VkPipelineRasterizationStateStreamCreateInfoEXT"
              },
              {
                "$name": "VkPipelineRasterizationStateStreamCreateFlagsEXT"
              }
            ]
          },
          "$name": "VK_EXT_transform_feedback",
          "$number": 29,
          "$type": "device",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$specialuse": "glemulation,d3demulation,devtools",
          "$supported": "vulkan",
          "$requires": "VK_KHR_get_physical_device_properties2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NVX_BINARY_IMPORT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NVX_binary_import\"",
                "$name": "VK_NVX_BINARY_IMPORT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_CU_MODULE_NVX"
              },
              {
                "$offset": 1,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_CU_FUNCTION_NVX"
              },
              {
                "$offset": 0,
                "$extends": "VkDebugReportObjectTypeEXT",
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkDebugReportObjectTypeEXT",
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkCuModuleNVX"
              },
              {
                "$name": "VkCuFunctionNVX"
              },
              {
                "$name": "VkCuModuleCreateInfoNVX"
              },
              {
                "$name": "VkCuFunctionCreateInfoNVX"
              },
              {
                "$name": "VkCuLaunchInfoNVX"
              }
            ],
            "command": [
              {
                "$name": "vkCreateCuModuleNVX"
              },
              {
                "$name": "vkCreateCuFunctionNVX"
              },
              {
                "$name": "vkDestroyCuModuleNVX"
              },
              {
                "$name": "vkDestroyCuFunctionNVX"
              },
              {
                "$name": "vkCmdCuLaunchKernelNVX"
              }
            ]
          },
          "$name": "VK_NVX_binary_import",
          "$number": 30,
          "$type": "device",
          "$author": "NVX",
          "$contact": "Eric Werness @ewerness-nv,Liam Middlebrook @liam-middlebrook",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NVX_image_view_handle\"",
                "$name": "VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX"
              }
            ],
            "type": [
              {
                "$name": "VkImageViewHandleInfoNVX"
              },
              {
                "$name": "VkImageViewAddressPropertiesNVX"
              }
            ],
            "command": [
              {
                "$name": "vkGetImageViewHandleNVX"
              },
              {
                "$name": "vkGetImageViewAddressNVX"
              }
            ]
          },
          "$name": "VK_NVX_image_view_handle",
          "$number": 31,
          "$type": "device",
          "$author": "NVX",
          "$contact": "Eric Werness @ewerness-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_32_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_32\"",
                "$name": "VK_AMD_EXTENSION_32_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_32",
          "$number": 32,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_33_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_33\"",
                "$name": "VK_AMD_EXTENSION_33_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_33",
          "$number": 33,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_draw_indirect_count\"",
                "$name": "VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME"
              }
            ],
            "command": [
              {
                "$name": "vkCmdDrawIndirectCountAMD"
              },
              {
                "$name": "vkCmdDrawIndexedIndirectCountAMD"
              }
            ]
          },
          "$name": "VK_AMD_draw_indirect_count",
          "$number": 34,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan",
          "$promotedto": "VK_KHR_draw_indirect_count"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_35_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_35\"",
                "$name": "VK_AMD_EXTENSION_35_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_35",
          "$number": 35,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_negative_viewport_height\"",
                "$name": "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_negative_viewport_height",
          "$number": 36,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan",
          "$obsoletedby": "VK_KHR_maintenance1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_gpu_shader_half_float\"",
                "$name": "VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_gpu_shader_half_float",
          "$number": 37,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Dominik Witczak @dominikwitczakamd",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_shader_float16_int8"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_BALLOT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_ballot\"",
                "$name": "VK_AMD_SHADER_BALLOT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_shader_ballot",
          "$number": 38,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Dominik Witczak @dominikwitczakamd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 9,
                "$name": "VK_EXT_VIDEO_ENCODE_H264_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_video_encode_h264\"",
                "$name": "VK_EXT_VIDEO_ENCODE_H264_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_VCL_FRAME_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_EMIT_PICTURE_PARAMETERS_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_REFERENCE_LISTS_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$bitpos": 16,
                "$extends": "VkVideoCodecOperationFlagBitsKHR",
                "$name": "VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkVideoEncodeH264CapabilityFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH264CapabilityFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH264InputModeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH264InputModeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH264OutputModeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH264OutputModeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH264CapabilitiesEXT"
              },
              {
                "$name": "VkVideoEncodeH264SessionParametersCreateInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264SessionParametersAddInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264VclFrameInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264ReferenceListsInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264EmitPictureParametersInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264DpbSlotInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264NaluSliceInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264ProfileInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264RateControlInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264RateControlStructureEXT"
              },
              {
                "$name": "VkVideoEncodeH264RateControlLayerInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH264QpEXT"
              },
              {
                "$name": "VkVideoEncodeH264FrameSizeEXT"
              }
            ]
          },
          "$name": "VK_EXT_video_encode_h264",
          "$number": 39,
          "$type": "device",
          "$requires": "VK_KHR_video_encode_queue",
          "$author": "KHR",
          "$contact": "Ahmed Abdelkhalek @aabdelkh",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 9,
                "$name": "VK_EXT_VIDEO_ENCODE_H265_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_video_encode_h265\"",
                "$name": "VK_EXT_VIDEO_ENCODE_H265_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_VCL_FRAME_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_EMIT_PICTURE_PARAMETERS_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_REFERENCE_LISTS_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$bitpos": 17,
                "$extends": "VkVideoCodecOperationFlagBitsKHR",
                "$name": "VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkVideoEncodeH265CapabilityFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH265CapabilityFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH265InputModeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH265InputModeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH265OutputModeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH265OutputModeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH265CtbSizeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH265CtbSizeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH265TransformBlockSizeFlagBitsEXT"
              },
              {
                "$name": "VkVideoEncodeH265TransformBlockSizeFlagsEXT"
              },
              {
                "$name": "VkVideoEncodeH265CapabilitiesEXT"
              },
              {
                "$name": "VkVideoEncodeH265SessionParametersCreateInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265SessionParametersAddInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265VclFrameInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265EmitPictureParametersInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265DpbSlotInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265NaluSliceSegmentInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265ProfileInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265ReferenceListsInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265RateControlInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265RateControlStructureEXT"
              },
              {
                "$name": "VkVideoEncodeH265RateControlLayerInfoEXT"
              },
              {
                "$name": "VkVideoEncodeH265QpEXT"
              },
              {
                "$name": "VkVideoEncodeH265FrameSizeEXT"
              }
            ]
          },
          "$name": "VK_EXT_video_encode_h265",
          "$number": 40,
          "$type": "device",
          "$requires": "VK_KHR_video_encode_queue",
          "$author": "KHR",
          "$contact": "Ahmed Abdelkhalek @aabdelkh",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 7,
                "$name": "VK_EXT_VIDEO_DECODE_H264_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_video_decode_h264\"",
                "$name": "VK_EXT_VIDEO_DECODE_H264_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$bitpos": 0,
                "$extends": "VkVideoCodecOperationFlagBitsKHR",
                "$name": "VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkVideoDecodeH264PictureLayoutFlagBitsEXT"
              },
              {
                "$name": "VkVideoDecodeH264PictureLayoutFlagsEXT"
              },
              {
                "$name": "VkVideoDecodeH264ProfileInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH264CapabilitiesEXT"
              },
              {
                "$name": "VkVideoDecodeH264SessionParametersCreateInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH264SessionParametersAddInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH264PictureInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH264DpbSlotInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_video_decode_h264",
          "$number": 41,
          "$type": "device",
          "$requires": "VK_KHR_video_decode_queue",
          "$author": "KHR",
          "$contact": "peter.fang@amd.com",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_texture_gather_bias_lod\"",
                "$name": "VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"
              }
            ],
            "type": {
              "$name": "VkTextureLODGatherFormatPropertiesAMD"
            }
          },
          "$name": "VK_AMD_texture_gather_bias_lod",
          "$number": 42,
          "$author": "AMD",
          "$contact": "Rex Xu @amdrexu",
          "$supported": "vulkan",
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_INFO_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_info\"",
                "$name": "VK_AMD_SHADER_INFO_EXTENSION_NAME"
              }
            ],
            "type": [
              {
                "$name": "VkShaderInfoTypeAMD"
              },
              {
                "$name": "VkShaderResourceUsageAMD"
              },
              {
                "$name": "VkShaderStatisticsInfoAMD"
              }
            ],
            "command": {
              "$name": "vkGetShaderInfoAMD"
            }
          },
          "$name": "VK_AMD_shader_info",
          "$number": 43,
          "$author": "AMD",
          "$contact": "Jaakko Konttinen @jaakkoamd",
          "$supported": "vulkan",
          "$specialuse": "devtools",
          "$type": "device"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_44_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_44\"",
                "$name": "VK_AMD_EXTENSION_44_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_44",
          "$number": 44,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_dynamic_rendering\"",
                  "$name": "VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_RENDERING_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_RENDERING_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO"
                },
                {
                  "$extends": "VkAttachmentStoreOp",
                  "$name": "VK_ATTACHMENT_STORE_OP_NONE_KHR",
                  "$alias": "VK_ATTACHMENT_STORE_OP_NONE"
                }
              ],
              "command": [
                {
                  "$name": "vkCmdBeginRenderingKHR"
                },
                {
                  "$name": "vkCmdEndRenderingKHR"
                }
              ],
              "type": [
                {
                  "$name": "VkRenderingInfoKHR"
                },
                {
                  "$name": "VkRenderingAttachmentInfoKHR"
                },
                {
                  "$name": "VkPipelineRenderingCreateInfoKHR"
                },
                {
                  "$name": "VkPhysicalDeviceDynamicRenderingFeaturesKHR"
                },
                {
                  "$name": "VkCommandBufferInheritanceRenderingInfoKHR"
                },
                {
                  "$name": "VkRenderingFlagsKHR"
                },
                {
                  "$name": "VkRenderingFlagBitsKHR"
                }
              ]
            },
            {
              "enum": [
                {
                  "$bitpos": 21,
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                },
                {
                  "$alias": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
                  "$comment": "Backwards-compatible alias containing a typo"
                },
                {
                  "$offset": 6,
                  "$extends": "VkStructureType",
                  "$extnumber": 45,
                  "$name": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
                }
              ],
              "type": {
                "$name": "VkRenderingFragmentShadingRateAttachmentInfoKHR"
              },
              "$extension": "VK_KHR_fragment_shading_rate"
            },
            {
              "enum": [
                {
                  "$bitpos": 22,
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT"
                },
                {
                  "$alias": "VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT",
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT",
                  "$comment": "Backwards-compatible alias containing a typo"
                },
                {
                  "$offset": 7,
                  "$extends": "VkStructureType",
                  "$extnumber": 45,
                  "$name": "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT"
                }
              ],
              "type": {
                "$name": "VkRenderingFragmentDensityMapAttachmentInfoEXT"
              },
              "$extension": "VK_EXT_fragment_density_map"
            },
            {
              "enum": {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"
              },
              "type": {
                "$name": "VkAttachmentSampleCountInfoAMD"
              },
              "$extension": "VK_AMD_mixed_attachment_samples"
            },
            {
              "enum": {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV",
                "$alias": "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD"
              },
              "type": {
                "$name": "VkAttachmentSampleCountInfoNV"
              },
              "$extension": "VK_NV_framebuffer_mixed_samples"
            },
            {
              "enum": {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$extnumber": 45,
                "$name": "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX"
              },
              "type": {
                "$name": "VkMultiviewPerViewAttributesInfoNVX"
              },
              "$extension": "VK_NVX_multiview_per_view_attributes"
            }
          ],
          "$name": "VK_KHR_dynamic_rendering",
          "$number": 45,
          "$author": "KHR",
          "$type": "device",
          "$requires": "VK_KHR_depth_stencil_resolve,VK_KHR_get_physical_device_properties2",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_46_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_46\"",
                "$name": "VK_AMD_EXTENSION_46_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_46",
          "$number": 46,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_image_load_store_lod\"",
                "$name": "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_shader_image_load_store_lod",
          "$number": 47,
          "$author": "AMD",
          "$contact": "Dominik Witczak @dominikwitczakamd",
          "$supported": "vulkan",
          "$type": "device"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NVX_EXTENSION_48_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NVX_extension_48\"",
                "$name": "VK_NVX_EXTENSION_48_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NVX_extension_48",
          "$number": 48,
          "$author": "NVX",
          "$contact": "James Jones @cubanismo",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_49_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_49\"",
                "$name": "VK_GOOGLE_EXTENSION_49_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_49",
          "$number": 49,
          "$author": "GOOGLE",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_stream_descriptor_surface\"",
                "$name": "VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"
              }
            ],
            "type": [
              {
                "$name": "VkStreamDescriptorSurfaceCreateFlagsGGP"
              },
              {
                "$name": "VkStreamDescriptorSurfaceCreateInfoGGP"
              }
            ],
            "command": {
              "$name": "vkCreateStreamDescriptorSurfaceGGP"
            }
          },
          "$name": "VK_GGP_stream_descriptor_surface",
          "$number": 50,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "ggp",
          "$author": "GGP",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_corner_sampled_image\"",
                "$name": "VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME"
              },
              {
                "$bitpos": 13,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceCornerSampledImageFeaturesNV"
            }
          },
          "$name": "VK_NV_corner_sampled_image",
          "$number": 51,
          "$author": "NV",
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_52_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_52\"",
                "$name": "VK_NV_EXTENSION_52_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_52",
          "$number": 52,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_53_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_53\"",
                "$name": "VK_NV_EXTENSION_53_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_53",
          "$number": 53,
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_MULTIVIEW_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_multiview\"",
                "$name": "VK_KHR_MULTIVIEW_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"
              },
              {
                "$extends": "VkDependencyFlagBits",
                "$name": "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",
                "$alias": "VK_DEPENDENCY_VIEW_LOCAL_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkRenderPassMultiviewCreateInfoKHR"
              },
              {
                "$name": "VkPhysicalDeviceMultiviewFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceMultiviewPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_multiview",
          "$number": 54,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_IMG_FORMAT_PVRTC_SPEC_VERSION"
              },
              {
                "$value": "\"VK_IMG_format_pvrtc\"",
                "$name": "VK_IMG_FORMAT_PVRTC_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG"
              },
              {
                "$offset": 1,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG"
              },
              {
                "$offset": 2,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG"
              },
              {
                "$offset": 3,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG"
              },
              {
                "$offset": 4,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG"
              },
              {
                "$offset": 5,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG"
              },
              {
                "$offset": 6,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG"
              },
              {
                "$offset": 7,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG"
              }
            ]
          },
          "$name": "VK_IMG_format_pvrtc",
          "$number": 55,
          "$type": "device",
          "$author": "IMG",
          "$contact": "Stuart Smith",
          "$supported": "vulkan",
          "$deprecatedby": ""
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_external_memory_capabilities\"",
                "$name": "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryHandleTypeFlagsNV"
              },
              {
                "$name": "VkExternalMemoryHandleTypeFlagBitsNV"
              },
              {
                "$name": "VkExternalMemoryFeatureFlagsNV"
              },
              {
                "$name": "VkExternalMemoryFeatureFlagBitsNV"
              },
              {
                "$name": "VkExternalImageFormatPropertiesNV"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"
            }
          },
          "$name": "VK_NV_external_memory_capabilities",
          "$number": 56,
          "$type": "instance",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_external_memory_capabilities"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_EXTERNAL_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_external_memory\"",
                "$name": "VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryImageCreateInfoNV"
              },
              {
                "$name": "VkExportMemoryAllocateInfoNV"
              }
            ]
          },
          "$name": "VK_NV_external_memory",
          "$number": 57,
          "$type": "device",
          "$requires": "VK_NV_external_memory_capabilities",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_external_memory"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_external_memory_win32\"",
                "$name": "VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkImportMemoryWin32HandleInfoNV"
              },
              {
                "$name": "VkExportMemoryWin32HandleInfoNV"
              }
            ],
            "command": {
              "$name": "vkGetMemoryWin32HandleNV"
            }
          },
          "$name": "VK_NV_external_memory_win32",
          "$number": 58,
          "$type": "device",
          "$requires": "VK_NV_external_memory",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$platform": "win32",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_external_memory_win32"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_win32_keyed_mutex\"",
                "$name": "VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"
              }
            ],
            "type": {
              "$name": "VkWin32KeyedMutexAcquireReleaseInfoNV"
            }
          },
          "$name": "VK_NV_win32_keyed_mutex",
          "$number": 59,
          "$type": "device",
          "$requires": "VK_NV_external_memory_win32",
          "$author": "NV",
          "$contact": "Carsten Rohde @crohde",
          "$platform": "win32",
          "$supported": "vulkan",
          "$promotedto": "VK_KHR_win32_keyed_mutex"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_get_physical_device_properties2\"",
                "$name": "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFeatures2KHR"
              },
              {
                "$name": "VkPhysicalDeviceProperties2KHR"
              },
              {
                "$name": "VkFormatProperties2KHR"
              },
              {
                "$name": "VkImageFormatProperties2KHR"
              },
              {
                "$name": "VkPhysicalDeviceImageFormatInfo2KHR"
              },
              {
                "$name": "VkQueueFamilyProperties2KHR"
              },
              {
                "$name": "VkPhysicalDeviceMemoryProperties2KHR"
              },
              {
                "$name": "VkSparseImageFormatProperties2KHR"
              },
              {
                "$name": "VkPhysicalDeviceSparseImageFormatInfo2KHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceFeatures2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceFormatProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceImageFormatProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceQueueFamilyProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceMemoryProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"
              }
            ]
          },
          "$name": "VK_KHR_get_physical_device_properties2",
          "$number": 60,
          "$type": "instance",
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 4,
                  "$name": "VK_KHR_DEVICE_GROUP_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_device_group\"",
                  "$name": "VK_KHR_DEVICE_GROUP_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"
                },
                {
                  "$extends": "VkPeerMemoryFeatureFlagBits",
                  "$name": "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR",
                  "$alias": "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT"
                },
                {
                  "$extends": "VkPeerMemoryFeatureFlagBits",
                  "$name": "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR",
                  "$alias": "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT"
                },
                {
                  "$extends": "VkPeerMemoryFeatureFlagBits",
                  "$name": "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR",
                  "$alias": "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT"
                },
                {
                  "$extends": "VkPeerMemoryFeatureFlagBits",
                  "$name": "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR",
                  "$alias": "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT"
                },
                {
                  "$extends": "VkMemoryAllocateFlagBits",
                  "$name": "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR",
                  "$alias": "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT"
                },
                {
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR",
                  "$alias": "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT"
                },
                {
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR",
                  "$alias": "VK_PIPELINE_CREATE_DISPATCH_BASE"
                },
                {
                  "$extends": "VkDependencyFlagBits",
                  "$name": "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",
                  "$alias": "VK_DEPENDENCY_DEVICE_GROUP_BIT"
                }
              ],
              "type": [
                {
                  "$name": "VkPeerMemoryFeatureFlagsKHR"
                },
                {
                  "$name": "VkPeerMemoryFeatureFlagBitsKHR"
                },
                {
                  "$name": "VkMemoryAllocateFlagsKHR"
                },
                {
                  "$name": "VkMemoryAllocateFlagBitsKHR"
                },
                {
                  "$name": "VkMemoryAllocateFlagsInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupRenderPassBeginInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupCommandBufferBeginInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupSubmitInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupBindSparseInfoKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkGetDeviceGroupPeerMemoryFeaturesKHR"
                },
                {
                  "$name": "vkCmdSetDeviceMaskKHR"
                },
                {
                  "$name": "vkCmdDispatchBaseKHR"
                }
              ]
            },
            {
              "enum": [
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"
                },
                {
                  "$extends": "VkImageCreateFlagBits",
                  "$name": "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                  "$alias": "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"
                }
              ],
              "type": [
                {
                  "$name": "VkBindBufferMemoryDeviceGroupInfoKHR"
                },
                {
                  "$name": "VkBindImageMemoryDeviceGroupInfoKHR"
                }
              ],
              "$extension": "VK_KHR_bind_memory2"
            },
            {
              "enum": {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"
              },
              "type": [
                {
                  "$name": "VkDeviceGroupPresentModeFlagBitsKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentModeFlagsKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentCapabilitiesKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkGetDeviceGroupPresentCapabilitiesKHR"
                },
                {
                  "$name": "vkGetDeviceGroupSurfacePresentModesKHR"
                },
                {
                  "$name": "vkGetPhysicalDevicePresentRectanglesKHR"
                }
              ],
              "$extension": "VK_KHR_surface"
            },
            {
              "enum": [
                {
                  "$offset": 8,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"
                },
                {
                  "$offset": 9,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"
                },
                {
                  "$offset": 10,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"
                },
                {
                  "$offset": 11,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"
                },
                {
                  "$offset": 12,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"
                },
                {
                  "$bitpos": 0,
                  "$extends": "VkSwapchainCreateFlagBitsKHR",
                  "$name": "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
                  "$comment": "Allow images with VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT"
                }
              ],
              "type": [
                {
                  "$name": "VkImageSwapchainCreateInfoKHR"
                },
                {
                  "$name": "VkBindImageMemorySwapchainInfoKHR"
                },
                {
                  "$name": "VkAcquireNextImageInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupPresentInfoKHR"
                },
                {
                  "$name": "VkDeviceGroupSwapchainCreateInfoKHR"
                }
              ],
              "command": {
                "$name": "vkAcquireNextImage2KHR"
              },
              "$extension": "VK_KHR_swapchain"
            }
          ],
          "$name": "VK_KHR_device_group",
          "$number": 61,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_device_group_creation",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_VALIDATION_FLAGS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_validation_flags\"",
                "$name": "VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkValidationFlagsEXT"
              },
              {
                "$name": "VkValidationCheckEXT"
              }
            ]
          },
          "$name": "VK_EXT_validation_flags",
          "$number": 62,
          "$type": "instance",
          "$author": "GOOGLE",
          "$contact": "Tobin Ehlis @tobine",
          "$specialuse": "debugging",
          "$supported": "vulkan",
          "$deprecatedby": "VK_EXT_validation_features"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NN_VI_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NN_vi_surface\"",
                "$name": "VK_NN_VI_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"
              }
            ],
            "type": [
              {
                "$name": "VkViSurfaceCreateFlagsNN"
              },
              {
                "$name": "VkViSurfaceCreateInfoNN"
              }
            ],
            "command": {
              "$name": "vkCreateViSurfaceNN"
            }
          },
          "$name": "VK_NN_vi_surface",
          "$number": 63,
          "$type": "instance",
          "$author": "NN",
          "$contact": "Mathias Heyer gitlab:@mheyer",
          "$requires": "VK_KHR_surface",
          "$platform": "vi",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_draw_parameters\"",
                "$name": "VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_shader_draw_parameters",
          "$number": 64,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_subgroup_ballot\"",
                "$name": "VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_shader_subgroup_ballot",
          "$number": 65,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$deprecatedby": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_subgroup_vote\"",
                "$name": "VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_shader_subgroup_vote",
          "$number": 66,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$deprecatedby": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_texture_compression_astc_hdr\"",
                "$name": "VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT",
                "$alias": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT"
            }
          },
          "$name": "VK_EXT_texture_compression_astc_hdr",
          "$number": 67,
          "$type": "device",
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_astc_decode_mode\"",
                "$name": "VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkImageViewASTCDecodeModeEXT"
              },
              {
                "$name": "VkPhysicalDeviceASTCDecodeFeaturesEXT"
              }
            ]
          },
          "$name": "VK_EXT_astc_decode_mode",
          "$number": 68,
          "$type": "device",
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pipeline_robustness\"",
                "$name": "VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePipelineRobustnessFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDevicePipelineRobustnessPropertiesEXT"
              },
              {
                "$name": "VkPipelineRobustnessCreateInfoEXT"
              },
              {
                "$name": "VkPipelineRobustnessBufferBehaviorEXT"
              },
              {
                "$name": "VkPipelineRobustnessImageBehaviorEXT"
              }
            ]
          },
          "$name": "VK_EXT_pipeline_robustness",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$number": 69,
          "$type": "device",
          "$author": "IMG",
          "$contact": "Jarred Davies",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_MAINTENANCE_1_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_maintenance1\"",
                "$name": "VK_KHR_MAINTENANCE_1_EXTENSION_NAME"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_1_SPEC_VERSION",
                "$name": "VK_KHR_MAINTENANCE1_SPEC_VERSION",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_1_EXTENSION_NAME",
                "$name": "VK_KHR_MAINTENANCE1_EXTENSION_NAME",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_OUT_OF_POOL_MEMORY_KHR",
                "$alias": "VK_ERROR_OUT_OF_POOL_MEMORY"
              },
              {
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR",
                "$alias": "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT"
              },
              {
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR",
                "$alias": "VK_FORMAT_FEATURE_TRANSFER_DST_BIT"
              },
              {
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR",
                "$alias": "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT"
              }
            ],
            "type": {
              "$name": "VkCommandPoolTrimFlagsKHR"
            },
            "command": {
              "$name": "vkTrimCommandPoolKHR"
            }
          },
          "$name": "VK_KHR_maintenance1",
          "$number": 70,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_device_group_creation\"",
                "$name": "VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"
              },
              {
                "$name": "VK_MAX_DEVICE_GROUP_SIZE_KHR"
              },
              {
                "$extends": "VkMemoryHeapFlagBits",
                "$name": "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR",
                "$alias": "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceGroupPropertiesKHR"
              },
              {
                "$name": "VkDeviceGroupDeviceCreateInfoKHR"
              }
            ],
            "command": {
              "$name": "vkEnumeratePhysicalDeviceGroupsKHR"
            }
          },
          "$name": "VK_KHR_device_group_creation",
          "$number": 71,
          "$type": "instance",
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_memory_capabilities\"",
                "$name": "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
              },
              {
                "$name": "VK_LUID_SIZE_KHR"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT"
              },
              {
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT"
              },
              {
                "$extends": "VkExternalMemoryFeatureFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT"
              },
              {
                "$extends": "VkExternalMemoryFeatureFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT"
              },
              {
                "$extends": "VkExternalMemoryFeatureFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryHandleTypeFlagsKHR"
              },
              {
                "$name": "VkExternalMemoryHandleTypeFlagBitsKHR"
              },
              {
                "$name": "VkExternalMemoryFeatureFlagsKHR"
              },
              {
                "$name": "VkExternalMemoryFeatureFlagBitsKHR"
              },
              {
                "$name": "VkExternalMemoryPropertiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceExternalImageFormatInfoKHR"
              },
              {
                "$name": "VkExternalImageFormatPropertiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceExternalBufferInfoKHR"
              },
              {
                "$name": "VkExternalBufferPropertiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceIDPropertiesKHR"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalBufferPropertiesKHR"
            }
          },
          "$name": "VK_KHR_external_memory_capabilities",
          "$number": 72,
          "$type": "instance",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_memory\"",
                "$name": "VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR",
                "$alias": "VK_ERROR_INVALID_EXTERNAL_HANDLE"
              },
              {
                "$name": "VK_QUEUE_FAMILY_EXTERNAL_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkExternalMemoryImageCreateInfoKHR"
              },
              {
                "$name": "VkExternalMemoryBufferCreateInfoKHR"
              },
              {
                "$name": "VkExportMemoryAllocateInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_memory",
          "$number": 73,
          "$type": "device",
          "$requires": "VK_KHR_external_memory_capabilities",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_memory_win32\"",
                "$name": "VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportMemoryWin32HandleInfoKHR"
              },
              {
                "$name": "VkExportMemoryWin32HandleInfoKHR"
              },
              {
                "$name": "VkMemoryWin32HandlePropertiesKHR"
              },
              {
                "$name": "VkMemoryGetWin32HandleInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetMemoryWin32HandleKHR"
              },
              {
                "$name": "vkGetMemoryWin32HandlePropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_memory_win32",
          "$number": 74,
          "$type": "device",
          "$requires": "VK_KHR_external_memory",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$platform": "win32",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_memory_fd\"",
                "$name": "VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportMemoryFdInfoKHR"
              },
              {
                "$name": "VkMemoryFdPropertiesKHR"
              },
              {
                "$name": "VkMemoryGetFdInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetMemoryFdKHR"
              },
              {
                "$name": "vkGetMemoryFdPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_memory_fd",
          "$number": 75,
          "$type": "device",
          "$requires": "VK_KHR_external_memory",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_win32_keyed_mutex\"",
                "$name": "VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"
              }
            ],
            "type": {
              "$name": "VkWin32KeyedMutexAcquireReleaseInfoKHR"
            }
          },
          "$name": "VK_KHR_win32_keyed_mutex",
          "$number": 76,
          "$type": "device",
          "$requires": "VK_KHR_external_memory_win32",
          "$author": "KHR",
          "$contact": "Carsten Rohde @crohde",
          "$platform": "win32",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_semaphore_capabilities\"",
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
              },
              {
                "$name": "VK_LUID_SIZE_KHR"
              },
              {
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreFeatureFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT"
              },
              {
                "$extends": "VkExternalSemaphoreFeatureFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkExternalSemaphoreHandleTypeFlagsKHR"
              },
              {
                "$name": "VkExternalSemaphoreHandleTypeFlagBitsKHR"
              },
              {
                "$name": "VkExternalSemaphoreFeatureFlagsKHR"
              },
              {
                "$name": "VkExternalSemaphoreFeatureFlagBitsKHR"
              },
              {
                "$name": "VkPhysicalDeviceExternalSemaphoreInfoKHR"
              },
              {
                "$name": "VkExternalSemaphorePropertiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceIDPropertiesKHR"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"
            }
          },
          "$name": "VK_KHR_external_semaphore_capabilities",
          "$number": 77,
          "$type": "instance",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_semaphore\"",
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"
              },
              {
                "$extends": "VkSemaphoreImportFlagBits",
                "$name": "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR",
                "$alias": "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkSemaphoreImportFlagsKHR"
              },
              {
                "$name": "VkSemaphoreImportFlagBitsKHR"
              },
              {
                "$name": "VkExportSemaphoreCreateInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_semaphore",
          "$number": 78,
          "$type": "device",
          "$requires": "VK_KHR_external_semaphore_capabilities",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_semaphore_win32\"",
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportSemaphoreWin32HandleInfoKHR"
              },
              {
                "$name": "VkExportSemaphoreWin32HandleInfoKHR"
              },
              {
                "$name": "VkD3D12FenceSubmitInfoKHR"
              },
              {
                "$name": "VkSemaphoreGetWin32HandleInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkImportSemaphoreWin32HandleKHR"
              },
              {
                "$name": "vkGetSemaphoreWin32HandleKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_semaphore_win32",
          "$number": 79,
          "$type": "device",
          "$requires": "VK_KHR_external_semaphore",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$platform": "win32",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_semaphore_fd\"",
                "$name": "VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportSemaphoreFdInfoKHR"
              },
              {
                "$name": "VkSemaphoreGetFdInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkImportSemaphoreFdKHR"
              },
              {
                "$name": "vkGetSemaphoreFdKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_semaphore_fd",
          "$number": 80,
          "$type": "device",
          "$requires": "VK_KHR_external_semaphore",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 2,
                  "$name": "VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_push_descriptor\"",
                  "$name": "VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"
                },
                {
                  "$bitpos": 0,
                  "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                  "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR",
                  "$comment": "Descriptors are pushed via flink:vkCmdPushDescriptorSetKHR"
                }
              ],
              "command": {
                "$name": "vkCmdPushDescriptorSetKHR"
              },
              "type": {
                "$name": "VkPhysicalDevicePushDescriptorPropertiesKHR"
              }
            },
            {
              "command": {
                "$name": "vkCmdPushDescriptorSetWithTemplateKHR"
              },
              "enum": {
                "$value": 1,
                "$extends": "VkDescriptorUpdateTemplateType",
                "$name": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                "$comment": "Create descriptor update template for pushed descriptor updates"
              },
              "$feature": "VK_VERSION_1_1"
            },
            {
              "command": {
                "$name": "vkCmdPushDescriptorSetWithTemplateKHR"
              },
              "enum": {
                "$value": 1,
                "$extends": "VkDescriptorUpdateTemplateType",
                "$name": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                "$comment": "Create descriptor update template for pushed descriptor updates"
              },
              "$extension": "VK_KHR_descriptor_update_template"
            }
          ],
          "$name": "VK_KHR_push_descriptor",
          "$number": 81,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_conditional_rendering\"",
                "$name": "VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"
              },
              {
                "$bitpos": 20,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",
                "$comment": "read access flag for reading conditional rendering predicate"
              },
              {
                "$bitpos": 9,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT",
                "$comment": "Specifies the buffer can be used as predicate in conditional rendering"
              },
              {
                "$bitpos": 18,
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",
                "$comment": "A pipeline stage for conditional rendering predicate fetch"
              }
            ],
            "type": [
              {
                "$name": "VkConditionalRenderingFlagsEXT"
              },
              {
                "$name": "VkConditionalRenderingFlagBitsEXT"
              },
              {
                "$name": "VkConditionalRenderingBeginInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceConditionalRenderingFeaturesEXT"
              },
              {
                "$name": "VkCommandBufferInheritanceConditionalRenderingInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdBeginConditionalRenderingEXT"
              },
              {
                "$name": "vkCmdEndConditionalRenderingEXT"
              }
            ]
          },
          "$name": "VK_EXT_conditional_rendering",
          "$number": 82,
          "$type": "device",
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_float16_int8\"",
                "$name": "VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceFloat16Int8FeaturesKHR"
              }
            ]
          },
          "$name": "VK_KHR_shader_float16_int8",
          "$number": 83,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Alexander Galazin @alegal-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_16BIT_STORAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_16bit_storage\"",
                "$name": "VK_KHR_16BIT_STORAGE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevice16BitStorageFeaturesKHR"
            }
          },
          "$name": "VK_KHR_16bit_storage",
          "$number": 84,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
          "$author": "KHR",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_incremental_present\"",
                "$name": "VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPresentRegionsKHR"
              },
              {
                "$name": "VkPresentRegionKHR"
              },
              {
                "$name": "VkRectLayerKHR"
              }
            ]
          },
          "$name": "VK_KHR_incremental_present",
          "$number": 85,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_swapchain",
          "$contact": "Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_descriptor_update_template\"",
                  "$name": "VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"
                },
                {
                  "$extends": "VkObjectType",
                  "$name": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR",
                  "$alias": "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE"
                },
                {
                  "$extends": "VkDescriptorUpdateTemplateType",
                  "$name": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR",
                  "$alias": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"
                }
              ],
              "command": [
                {
                  "$name": "vkCreateDescriptorUpdateTemplateKHR"
                },
                {
                  "$name": "vkDestroyDescriptorUpdateTemplateKHR"
                },
                {
                  "$name": "vkUpdateDescriptorSetWithTemplateKHR"
                }
              ],
              "type": [
                {
                  "$name": "VkDescriptorUpdateTemplateKHR"
                },
                {
                  "$name": "VkDescriptorUpdateTemplateCreateFlagsKHR"
                },
                {
                  "$name": "VkDescriptorUpdateTemplateTypeKHR"
                },
                {
                  "$name": "VkDescriptorUpdateTemplateEntryKHR"
                },
                {
                  "$name": "VkDescriptorUpdateTemplateCreateInfoKHR"
                }
              ]
            },
            {
              "command": {
                "$name": "vkCmdPushDescriptorSetWithTemplateKHR"
              },
              "enum": {
                "$value": 1,
                "$extends": "VkDescriptorUpdateTemplateType",
                "$name": "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
                "$comment": "Create descriptor update template for pushed descriptor updates"
              },
              "$extension": "VK_KHR_push_descriptor"
            },
            {
              "enum": {
                "$extends": "VkDebugReportObjectTypeEXT",
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT",
                "$alias": "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT"
              },
              "$extension": "VK_EXT_debug_report"
            }
          ],
          "$name": "VK_KHR_descriptor_update_template",
          "$number": 86,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Markus Tavenrath @mtavenrath",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NVX_device_generated_commands\"",
                "$name": "VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NVX_device_generated_commands",
          "$number": 87,
          "$type": "device",
          "$author": "NVX",
          "$contact": "Christoph Kubisch @pixeljetstream",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_clip_space_w_scaling\"",
                "$name": "VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV"
              }
            ],
            "type": [
              {
                "$name": "VkViewportWScalingNV"
              },
              {
                "$name": "VkPipelineViewportWScalingStateCreateInfoNV"
              }
            ],
            "command": {
              "$name": "vkCmdSetViewportWScalingNV"
            }
          },
          "$name": "VK_NV_clip_space_w_scaling",
          "$number": 88,
          "$type": "device",
          "$author": "NV",
          "$contact": "Eric Werness @ewerness-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_direct_mode_display\"",
                "$name": "VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME"
              }
            ],
            "command": {
              "$name": "vkReleaseDisplayEXT"
            }
          },
          "$name": "VK_EXT_direct_mode_display",
          "$number": 89,
          "$type": "instance",
          "$requires": "VK_KHR_display",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_acquire_xlib_display\"",
                "$name": "VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME"
              }
            ],
            "command": [
              {
                "$name": "vkAcquireXlibDisplayEXT"
              },
              {
                "$name": "vkGetRandROutputDisplayEXT"
              }
            ]
          },
          "$name": "VK_EXT_acquire_xlib_display",
          "$number": 90,
          "$type": "instance",
          "$requires": "VK_EXT_direct_mode_display",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$platform": "xlib_xrandr",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_display_surface_counter\"",
                "$name": "VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"
              },
              {
                "$alias": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT",
                "$comment": "Backwards-compatible alias containing a typo"
              }
            ],
            "type": [
              {
                "$name": "VkSurfaceCounterFlagsEXT"
              },
              {
                "$name": "VkSurfaceCounterFlagBitsEXT"
              },
              {
                "$name": "VkSurfaceCapabilities2EXT"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceSurfaceCapabilities2EXT"
            }
          },
          "$name": "VK_EXT_display_surface_counter",
          "$number": 91,
          "$type": "instance",
          "$requires": "VK_KHR_display",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DISPLAY_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_display_control\"",
                "$name": "VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkDisplayPowerStateEXT"
              },
              {
                "$name": "VkDeviceEventTypeEXT"
              },
              {
                "$name": "VkDisplayEventTypeEXT"
              },
              {
                "$name": "VkDisplayPowerInfoEXT"
              },
              {
                "$name": "VkDeviceEventInfoEXT"
              },
              {
                "$name": "VkDisplayEventInfoEXT"
              },
              {
                "$name": "VkSwapchainCounterCreateInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkDisplayPowerControlEXT"
              },
              {
                "$name": "vkRegisterDeviceEventEXT"
              },
              {
                "$name": "vkRegisterDisplayEventEXT"
              },
              {
                "$name": "vkGetSwapchainCounterEXT"
              }
            ]
          },
          "$name": "VK_EXT_display_control",
          "$number": 92,
          "$type": "device",
          "$requires": "VK_EXT_display_surface_counter,VK_KHR_swapchain",
          "$author": "NV",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_display_timing\"",
                "$name": "VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"
              }
            ],
            "type": [
              {
                "$name": "VkRefreshCycleDurationGOOGLE"
              },
              {
                "$name": "VkPastPresentationTimingGOOGLE"
              },
              {
                "$name": "VkPresentTimesInfoGOOGLE"
              },
              {
                "$name": "VkPresentTimeGOOGLE"
              }
            ],
            "command": [
              {
                "$name": "vkGetRefreshCycleDurationGOOGLE"
              },
              {
                "$name": "vkGetPastPresentationTimingGOOGLE"
              }
            ]
          },
          "$name": "VK_GOOGLE_display_timing",
          "$number": 93,
          "$type": "device",
          "$author": "GOOGLE",
          "$requires": "VK_KHR_swapchain",
          "$contact": "Ian Elliott @ianelliottus",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_RESERVED_DO_NOT_USE_94_SPEC_VERSION"
              },
              {
                "$value": "\"VK_RESERVED_do_not_use_94\"",
                "$name": "VK_RESERVED_DO_NOT_USE_94_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_RESERVED_do_not_use_94",
          "$number": 94,
          "$supported": "disabled",
          "$comment": "Used for functionality subsumed into Vulkan 1.1 and not published as an extension"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_sample_mask_override_coverage\"",
                "$name": "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME"
              }
            ],
            "comment": {
              "#text": "enum offset=0 was mistakenly used for the 1.1 core enum\n                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES\n                    (value=1000094000). Fortunately, no conflict resulted."
            }
          },
          "$name": "VK_NV_sample_mask_override_coverage",
          "$number": 95,
          "$type": "device",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_geometry_shader_passthrough\"",
                "$name": "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_geometry_shader_passthrough",
          "$number": 96,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_viewport_array2\"",
                "$name": "VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME"
              },
              {
                "$alias": "VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION",
                "$name": "VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$alias": "VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME",
                "$name": "VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME",
                "$comment": "Backwards-compatible alias containing a typo"
              }
            ]
          },
          "$name": "VK_NV_viewport_array2",
          "$number": 97,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NVX_multiview_per_view_attributes\"",
                "$name": "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"
              },
              {
                "$bitpos": 0,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX"
              },
              {
                "$bitpos": 1,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"
            }
          },
          "$name": "VK_NVX_multiview_per_view_attributes",
          "$number": 98,
          "$type": "device",
          "$requires": "VK_KHR_multiview",
          "$author": "NVX",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_viewport_swizzle\"",
                "$name": "VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkViewportSwizzleNV"
              },
              {
                "$name": "VkViewportCoordinateSwizzleNV"
              },
              {
                "$name": "VkPipelineViewportSwizzleStateCreateInfoNV"
              },
              {
                "$name": "VkPipelineViewportSwizzleStateCreateFlagsNV"
              }
            ]
          },
          "$name": "VK_NV_viewport_swizzle",
          "$number": 99,
          "$type": "device",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_discard_rectangles\"",
                "$name": "VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDiscardRectanglePropertiesEXT"
              },
              {
                "$name": "VkPipelineDiscardRectangleStateCreateInfoEXT"
              },
              {
                "$name": "VkPipelineDiscardRectangleStateCreateFlagsEXT"
              },
              {
                "$name": "VkDiscardRectangleModeEXT"
              }
            ],
            "command": {
              "$name": "vkCmdSetDiscardRectangleEXT"
            }
          },
          "$name": "VK_EXT_discard_rectangles",
          "$number": 100,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_101_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_101\"",
                "$name": "VK_NV_EXTENSION_101_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_101",
          "$number": 101,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_conservative_rasterization\"",
                "$name": "VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceConservativeRasterizationPropertiesEXT"
              },
              {
                "$name": "VkPipelineRasterizationConservativeStateCreateInfoEXT"
              },
              {
                "$name": "VkPipelineRasterizationConservativeStateCreateFlagsEXT"
              },
              {
                "$name": "VkConservativeRasterizationModeEXT"
              }
            ]
          },
          "$name": "VK_EXT_conservative_rasterization",
          "$number": 102,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_depth_clip_enable\"",
                "$name": "VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDepthClipEnableFeaturesEXT"
              },
              {
                "$name": "VkPipelineRasterizationDepthClipStateCreateInfoEXT"
              },
              {
                "$name": "VkPipelineRasterizationDepthClipStateCreateFlagsEXT"
              }
            ]
          },
          "$name": "VK_EXT_depth_clip_enable",
          "$number": 103,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$specialuse": "d3demulation",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_104_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_104\"",
                "$name": "VK_NV_EXTENSION_104_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_104",
          "$number": 104,
          "$author": "NV",
          "$contact": "Mathias Schott gitlab:@mschott",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_swapchain_colorspace\"",
                "$name": "VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME"
              },
              {
                "$offset": 1,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT"
              },
              {
                "$offset": 5,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_BT709_LINEAR_EXT"
              },
              {
                "$offset": 6,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_BT709_NONLINEAR_EXT"
              },
              {
                "$offset": 7,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_BT2020_LINEAR_EXT"
              },
              {
                "$offset": 8,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_HDR10_ST2084_EXT"
              },
              {
                "$offset": 9,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DOLBYVISION_EXT"
              },
              {
                "$offset": 10,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_HDR10_HLG_EXT"
              },
              {
                "$offset": 11,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT"
              },
              {
                "$offset": 12,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT"
              },
              {
                "$offset": 13,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_PASS_THROUGH_EXT"
              },
              {
                "$offset": 14,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT"
              },
              {
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT",
                "$alias": "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT",
                "$comment": "Backwards-compatible alias containing a typo"
              }
            ]
          },
          "$name": "VK_EXT_swapchain_colorspace",
          "$number": 105,
          "$type": "instance",
          "$author": "GOOGLE",
          "$contact": "Courtney Goeltzenleuchter @courtney-g",
          "$requires": "VK_KHR_surface",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_HDR_METADATA_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_hdr_metadata\"",
                "$name": "VK_EXT_HDR_METADATA_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_HDR_METADATA_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkHdrMetadataEXT"
              },
              {
                "$name": "VkXYColorEXT"
              }
            ],
            "command": {
              "$name": "vkSetHdrMetadataEXT"
            }
          },
          "$name": "VK_EXT_hdr_metadata",
          "$number": 106,
          "$type": "device",
          "$requires": "VK_KHR_swapchain",
          "$author": "GOOGLE",
          "$contact": "Courtney Goeltzenleuchter @courtney-g",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_IMG_EXTENSION_107_SPEC_VERSION"
              },
              {
                "$value": "\"VK_IMG_extension_107\"",
                "$name": "VK_IMG_EXTENSION_107_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_IMG_extension_107",
          "$number": 107,
          "$author": "IMG",
          "$contact": "Michael Worcester @michaelworcester",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_IMG_EXTENSION_108_SPEC_VERSION"
              },
              {
                "$value": "\"VK_IMG_extension_108\"",
                "$name": "VK_IMG_EXTENSION_108_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_IMG_extension_108",
          "$number": 108,
          "$author": "IMG",
          "$contact": "Michael Worcester @michaelworcester",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_imageless_framebuffer\"",
                "$name": "VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO"
              },
              {
                "$extends": "VkFramebufferCreateFlagBits",
                "$name": "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR",
                "$alias": "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceImagelessFramebufferFeaturesKHR"
              },
              {
                "$name": "VkFramebufferAttachmentsCreateInfoKHR"
              },
              {
                "$name": "VkFramebufferAttachmentImageInfoKHR"
              },
              {
                "$name": "VkRenderPassAttachmentBeginInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_imageless_framebuffer",
          "$requires": "VK_KHR_maintenance2,VK_KHR_image_format_list",
          "$number": 109,
          "$author": "KHR",
          "$contact": "Tobias Hector @tobias",
          "$type": "device",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_create_renderpass2\"",
                "$name": "VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SUBPASS_END_INFO"
              }
            ],
            "command": [
              {
                "$name": "vkCreateRenderPass2KHR"
              },
              {
                "$name": "vkCmdBeginRenderPass2KHR"
              },
              {
                "$name": "vkCmdNextSubpass2KHR"
              },
              {
                "$name": "vkCmdEndRenderPass2KHR"
              }
            ],
            "type": [
              {
                "$name": "VkRenderPassCreateInfo2KHR"
              },
              {
                "$name": "VkAttachmentDescription2KHR"
              },
              {
                "$name": "VkAttachmentReference2KHR"
              },
              {
                "$name": "VkSubpassDescription2KHR"
              },
              {
                "$name": "VkSubpassDependency2KHR"
              },
              {
                "$name": "VkSubpassBeginInfoKHR"
              },
              {
                "$name": "VkSubpassEndInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_create_renderpass2",
          "$requires": "VK_KHR_multiview,VK_KHR_maintenance2",
          "$number": 110,
          "$author": "KHR",
          "$contact": "Tobias Hector @tobias",
          "$type": "device",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_IMG_EXTENSION_111_SPEC_VERSION"
              },
              {
                "$value": "\"VK_IMG_extension_111\"",
                "$name": "VK_IMG_EXTENSION_111_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_IMG_extension_111",
          "$number": 111,
          "$author": "IMG",
          "$contact": "Michael Worcester @michaelworcester",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shared_presentable_image\"",
                "$name": "VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkPresentModeKHR",
                "$name": "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkPresentModeKHR",
                "$name": "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR"
              }
            ],
            "type": {
              "$name": "VkSharedPresentSurfaceCapabilitiesKHR"
            },
            "command": {
              "$name": "vkGetSwapchainStatusKHR"
            }
          },
          "$name": "VK_KHR_shared_presentable_image",
          "$number": 112,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2",
          "$author": "KHR",
          "$contact": "Alon Or-bach @alonorbach",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_fence_capabilities\"",
                "$name": "VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"
              },
              {
                "$name": "VK_LUID_SIZE_KHR"
              },
              {
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT"
              },
              {
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT"
              },
              {
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT"
              },
              {
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT"
              },
              {
                "$extends": "VkExternalFenceFeatureFlagBits",
                "$name": "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT"
              },
              {
                "$extends": "VkExternalFenceFeatureFlagBits",
                "$name": "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR",
                "$alias": "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkExternalFenceHandleTypeFlagsKHR"
              },
              {
                "$name": "VkExternalFenceHandleTypeFlagBitsKHR"
              },
              {
                "$name": "VkExternalFenceFeatureFlagsKHR"
              },
              {
                "$name": "VkExternalFenceFeatureFlagBitsKHR"
              },
              {
                "$name": "VkPhysicalDeviceExternalFenceInfoKHR"
              },
              {
                "$name": "VkExternalFencePropertiesKHR"
              },
              {
                "$name": "VkPhysicalDeviceIDPropertiesKHR"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceExternalFencePropertiesKHR"
            }
          },
          "$name": "VK_KHR_external_fence_capabilities",
          "$number": 113,
          "$type": "instance",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_FENCE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_fence\"",
                "$name": "VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"
              },
              {
                "$extends": "VkFenceImportFlagBits",
                "$name": "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR",
                "$alias": "VK_FENCE_IMPORT_TEMPORARY_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkFenceImportFlagsKHR"
              },
              {
                "$name": "VkFenceImportFlagBitsKHR"
              },
              {
                "$name": "VkExportFenceCreateInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_fence",
          "$number": 114,
          "$type": "device",
          "$requires": "VK_KHR_external_fence_capabilities",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_fence_win32\"",
                "$name": "VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportFenceWin32HandleInfoKHR"
              },
              {
                "$name": "VkExportFenceWin32HandleInfoKHR"
              },
              {
                "$name": "VkFenceGetWin32HandleInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkImportFenceWin32HandleKHR"
              },
              {
                "$name": "vkGetFenceWin32HandleKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_fence_win32",
          "$number": 115,
          "$type": "device",
          "$requires": "VK_KHR_external_fence",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$platform": "win32",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_external_fence_fd\"",
                "$name": "VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkImportFenceFdInfoKHR"
              },
              {
                "$name": "VkFenceGetFdInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkImportFenceFdKHR"
              },
              {
                "$name": "vkGetFenceFdKHR"
              }
            ]
          },
          "$name": "VK_KHR_external_fence_fd",
          "$number": 116,
          "$type": "device",
          "$requires": "VK_KHR_external_fence",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_performance_query\"",
                "$name": "VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePerformanceQueryFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDevicePerformanceQueryPropertiesKHR"
              },
              {
                "$name": "VkPerformanceCounterKHR"
              },
              {
                "$name": "VkPerformanceCounterDescriptionKHR"
              },
              {
                "$name": "VkPerformanceCounterDescriptionFlagsKHR"
              },
              {
                "$name": "VkPerformanceCounterDescriptionFlagBitsKHR"
              },
              {
                "$name": "VkQueryPoolPerformanceCreateInfoKHR"
              },
              {
                "$name": "VkPerformanceCounterScopeKHR"
              },
              {
                "$name": "VkPerformanceCounterStorageKHR"
              },
              {
                "$name": "VkPerformanceCounterUnitKHR"
              },
              {
                "$name": "VkPerformanceCounterResultKHR"
              },
              {
                "$name": "VkAcquireProfilingLockInfoKHR"
              },
              {
                "$name": "VkAcquireProfilingLockFlagsKHR"
              },
              {
                "$name": "VkAcquireProfilingLockFlagBitsKHR"
              },
              {
                "$name": "VkPerformanceQuerySubmitInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"
              },
              {
                "$name": "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"
              },
              {
                "$name": "vkAcquireProfilingLockKHR"
              },
              {
                "$name": "vkReleaseProfilingLockKHR"
              }
            ]
          },
          "$name": "VK_KHR_performance_query",
          "$number": 117,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Alon Or-bach @alonorbach",
          "$specialuse": "devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_MAINTENANCE_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_maintenance2\"",
                "$name": "VK_KHR_MAINTENANCE_2_EXTENSION_NAME"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_2_SPEC_VERSION",
                "$name": "VK_KHR_MAINTENANCE2_SPEC_VERSION",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_2_EXTENSION_NAME",
                "$name": "VK_KHR_MAINTENANCE2_EXTENSION_NAME",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR",
                "$alias": "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT"
              },
              {
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR",
                "$alias": "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"
              },
              {
                "$extends": "VkPointClippingBehavior",
                "$name": "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR",
                "$alias": "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES"
              },
              {
                "$extends": "VkPointClippingBehavior",
                "$name": "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR",
                "$alias": "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY"
              },
              {
                "$extends": "VkTessellationDomainOrigin",
                "$name": "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR",
                "$alias": "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"
              },
              {
                "$extends": "VkTessellationDomainOrigin",
                "$name": "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR",
                "$alias": "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePointClippingPropertiesKHR"
              },
              {
                "$name": "VkPointClippingBehaviorKHR"
              },
              {
                "$name": "VkRenderPassInputAttachmentAspectCreateInfoKHR"
              },
              {
                "$name": "VkInputAttachmentAspectReferenceKHR"
              },
              {
                "$name": "VkImageViewUsageCreateInfoKHR"
              },
              {
                "$name": "VkTessellationDomainOriginKHR"
              },
              {
                "$name": "VkPipelineTessellationDomainOriginStateCreateInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_maintenance2",
          "$number": 118,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Michael Worcester @michaelworcester",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_119_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_119\"",
                "$name": "VK_KHR_EXTENSION_119_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_119",
          "$number": 119,
          "$author": "KHR",
          "$contact": "Michael Worcester @michaelworcester",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_get_surface_capabilities2\"",
                "$name": "VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceSurfaceInfo2KHR"
              },
              {
                "$name": "VkSurfaceCapabilities2KHR"
              },
              {
                "$name": "VkSurfaceFormat2KHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceSurfaceCapabilities2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceSurfaceFormats2KHR"
              }
            ]
          },
          "$name": "VK_KHR_get_surface_capabilities2",
          "$number": 120,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_VARIABLE_POINTERS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_variable_pointers\"",
                "$name": "VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVariablePointerFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceVariablePointersFeaturesKHR"
              }
            ]
          },
          "$name": "VK_KHR_variable_pointers",
          "$number": 121,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_get_display_properties2\"",
                "$name": "VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkDisplayProperties2KHR"
              },
              {
                "$name": "VkDisplayPlaneProperties2KHR"
              },
              {
                "$name": "VkDisplayModeProperties2KHR"
              },
              {
                "$name": "VkDisplayPlaneInfo2KHR"
              },
              {
                "$name": "VkDisplayPlaneCapabilities2KHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceDisplayProperties2KHR"
              },
              {
                "$name": "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"
              },
              {
                "$name": "vkGetDisplayModeProperties2KHR"
              },
              {
                "$name": "vkGetDisplayPlaneCapabilities2KHR"
              }
            ]
          },
          "$name": "VK_KHR_get_display_properties2",
          "$number": 122,
          "$type": "instance",
          "$requires": "VK_KHR_display",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_MVK_IOS_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_MVK_ios_surface\"",
                "$name": "VK_MVK_IOS_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"
              }
            ],
            "type": [
              {
                "$name": "VkIOSSurfaceCreateFlagsMVK"
              },
              {
                "$name": "VkIOSSurfaceCreateInfoMVK"
              }
            ],
            "command": {
              "$name": "vkCreateIOSSurfaceMVK"
            }
          },
          "$name": "VK_MVK_ios_surface",
          "$number": 123,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "ios",
          "$supported": "vulkan",
          "$author": "MVK",
          "$contact": "Bill Hollings @billhollings",
          "$deprecatedby": "VK_EXT_metal_surface"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_MVK_MACOS_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_MVK_macos_surface\"",
                "$name": "VK_MVK_MACOS_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"
              }
            ],
            "type": [
              {
                "$name": "VkMacOSSurfaceCreateFlagsMVK"
              },
              {
                "$name": "VkMacOSSurfaceCreateInfoMVK"
              }
            ],
            "command": {
              "$name": "vkCreateMacOSSurfaceMVK"
            }
          },
          "$name": "VK_MVK_macos_surface",
          "$number": 124,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "macos",
          "$supported": "vulkan",
          "$author": "MVK",
          "$contact": "Bill Hollings @billhollings",
          "$deprecatedby": "VK_EXT_metal_surface"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_MVK_MOLTENVK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_MVK_moltenvk\"",
                "$name": "VK_MVK_MOLTENVK_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_MVK_moltenvk",
          "$number": 125,
          "$type": "instance",
          "$author": "MVK",
          "$contact": "Bill Hollings @billhollings",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_external_memory_dma_buf\"",
                "$name": "VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME"
              },
              {
                "$bitpos": 9,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT"
              }
            ]
          },
          "$name": "VK_EXT_external_memory_dma_buf",
          "$number": 126,
          "$type": "device",
          "$requires": "VK_KHR_external_memory_fd",
          "$author": "EXT",
          "$contact": "Chad Versace @chadversary",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_queue_family_foreign\"",
                "$name": "VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME"
              },
              {
                "$name": "VK_QUEUE_FAMILY_FOREIGN_EXT"
              }
            ]
          },
          "$name": "VK_EXT_queue_family_foreign",
          "$number": 127,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_external_memory",
          "$contact": "Chad Versace @chadversary",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_dedicated_allocation\"",
                "$name": "VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR",
                "$alias": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkMemoryDedicatedRequirementsKHR"
              },
              {
                "$name": "VkMemoryDedicatedAllocateInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_dedicated_allocation",
          "$number": 128,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_memory_requirements2",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_DEBUG_UTILS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_debug_utils\"",
                "$name": "VK_EXT_DEBUG_UTILS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT"
              }
            ],
            "type": [
              {
                "$name": "PFN_vkDebugUtilsMessengerCallbackEXT"
              },
              {
                "$name": "VkDebugUtilsLabelEXT"
              },
              {
                "$name": "VkDebugUtilsMessageSeverityFlagBitsEXT"
              },
              {
                "$name": "VkDebugUtilsMessageSeverityFlagsEXT"
              },
              {
                "$name": "VkDebugUtilsMessageTypeFlagBitsEXT"
              },
              {
                "$name": "VkDebugUtilsMessageTypeFlagsEXT"
              },
              {
                "$name": "VkDebugUtilsMessengerCallbackDataEXT"
              },
              {
                "$name": "VkDebugUtilsMessengerCallbackDataFlagsEXT"
              },
              {
                "$name": "VkDebugUtilsMessengerCreateFlagsEXT"
              },
              {
                "$name": "VkDebugUtilsMessengerCreateInfoEXT"
              },
              {
                "$name": "VkDebugUtilsMessengerEXT"
              },
              {
                "$name": "VkDebugUtilsObjectNameInfoEXT"
              },
              {
                "$name": "VkDebugUtilsObjectTagInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkSetDebugUtilsObjectNameEXT"
              },
              {
                "$name": "vkSetDebugUtilsObjectTagEXT"
              },
              {
                "$name": "vkQueueBeginDebugUtilsLabelEXT"
              },
              {
                "$name": "vkQueueEndDebugUtilsLabelEXT"
              },
              {
                "$name": "vkQueueInsertDebugUtilsLabelEXT"
              },
              {
                "$name": "vkCmdBeginDebugUtilsLabelEXT"
              },
              {
                "$name": "vkCmdEndDebugUtilsLabelEXT"
              },
              {
                "$name": "vkCmdInsertDebugUtilsLabelEXT"
              },
              {
                "$name": "vkCreateDebugUtilsMessengerEXT"
              },
              {
                "$name": "vkDestroyDebugUtilsMessengerEXT"
              },
              {
                "$name": "vkSubmitDebugUtilsMessageEXT"
              }
            ]
          },
          "$name": "VK_EXT_debug_utils",
          "$number": 129,
          "$type": "instance",
          "$author": "EXT",
          "$contact": "Mark Young @marky-lunarg",
          "$specialuse": "debugging",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 5,
                  "$name": "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_ANDROID_external_memory_android_hardware_buffer\"",
                  "$name": "VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME"
                },
                {
                  "$bitpos": 10,
                  "$extends": "VkExternalMemoryHandleTypeFlagBits",
                  "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"
                },
                {
                  "$offset": 5,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"
                }
              ],
              "type": [
                {
                  "$name": "VkAndroidHardwareBufferUsageANDROID"
                },
                {
                  "$name": "VkAndroidHardwareBufferPropertiesANDROID"
                },
                {
                  "$name": "VkAndroidHardwareBufferFormatPropertiesANDROID"
                },
                {
                  "$name": "VkImportAndroidHardwareBufferInfoANDROID"
                },
                {
                  "$name": "VkMemoryGetAndroidHardwareBufferInfoANDROID"
                },
                {
                  "$name": "VkExternalFormatANDROID"
                },
                {
                  "$name": "AHardwareBuffer"
                }
              ],
              "command": [
                {
                  "$name": "vkGetAndroidHardwareBufferPropertiesANDROID"
                },
                {
                  "$name": "vkGetMemoryAndroidHardwareBufferANDROID"
                }
              ]
            },
            {
              "type": {
                "$name": "VkAndroidHardwareBufferFormatProperties2ANDROID"
              },
              "enum": {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_ANDROID_external_memory_android_hardware_buffer",
          "$number": 130,
          "$type": "device",
          "$author": "ANDROID",
          "$requires": "VK_KHR_sampler_ycbcr_conversion,VK_KHR_external_memory,VK_EXT_queue_family_foreign,VK_KHR_dedicated_allocation",
          "$platform": "android",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_sampler_filter_minmax\"",
                "$name": "VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO"
              },
              {
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT",
                "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT"
              },
              {
                "$extends": "VkSamplerReductionMode",
                "$name": "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT",
                "$alias": "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE"
              },
              {
                "$extends": "VkSamplerReductionMode",
                "$name": "VK_SAMPLER_REDUCTION_MODE_MIN_EXT",
                "$alias": "VK_SAMPLER_REDUCTION_MODE_MIN"
              },
              {
                "$extends": "VkSamplerReductionMode",
                "$name": "VK_SAMPLER_REDUCTION_MODE_MAX_EXT",
                "$alias": "VK_SAMPLER_REDUCTION_MODE_MAX"
              }
            ],
            "type": [
              {
                "$name": "VkSamplerReductionModeEXT"
              },
              {
                "$name": "VkSamplerReductionModeCreateInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_sampler_filter_minmax",
          "$number": 131,
          "$type": "device",
          "$author": "NV",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_storage_buffer_storage_class\"",
                "$name": "VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_storage_buffer_storage_class",
          "$number": 132,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Alexander Galazin @alegal-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_AMD_GPU_SHADER_INT16_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_gpu_shader_int16\"",
                "$name": "VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_gpu_shader_int16",
          "$number": 133,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Qun Lin @linqun",
          "$supported": "vulkan",
          "$deprecatedby": "VK_KHR_shader_float16_int8"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_134_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_134\"",
                "$name": "VK_AMD_EXTENSION_134_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_134",
          "$number": 134,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_135_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_135\"",
                "$name": "VK_AMD_EXTENSION_135_EXTENSION_NAME"
              },
              {
                "$bitpos": 25,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_RESERVED_25_BIT_AMD"
              }
            ]
          },
          "$name": "VK_AMD_extension_135",
          "$number": 135,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_136_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_136\"",
                "$name": "VK_AMD_EXTENSION_136_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_136",
          "$number": 136,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_mixed_attachment_samples\"",
                "$name": "VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_mixed_attachment_samples",
          "$number": 137,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_fragment_mask\"",
                "$name": "VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_shader_fragment_mask",
          "$number": 138,
          "$author": "AMD",
          "$contact": "Aaron Hagan @AaronHaganAMD",
          "$supported": "vulkan",
          "$type": "device"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_inline_uniform_block\"",
                "$name": "VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME"
              },
              {
                "$extends": "VkDescriptorType",
                "$name": "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT",
                "$alias": "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT",
                "$alias": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceInlineUniformBlockFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceInlineUniformBlockPropertiesEXT"
              },
              {
                "$name": "VkWriteDescriptorSetInlineUniformBlockEXT"
              },
              {
                "$name": "VkDescriptorPoolInlineUniformBlockCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_inline_uniform_block",
          "$number": 139,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_maintenance1",
          "$contact": "Daniel Rakos @aqnuep",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_140_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_140\"",
                "$name": "VK_AMD_EXTENSION_140_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_140",
          "$number": 140,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_stencil_export\"",
                "$name": "VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_shader_stencil_export",
          "$number": 141,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Dominik Witczak @dominikwitczakamd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_142_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_142\"",
                "$name": "VK_AMD_EXTENSION_142_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_142",
          "$number": 142,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_143_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_143\"",
                "$name": "VK_AMD_EXTENSION_143_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_143",
          "$number": 143,
          "$author": "AMD",
          "$contact": "Mais Alnasser @malnasse",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_sample_locations\"",
                "$name": "VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME"
              },
              {
                "$bitpos": 12,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkSampleLocationEXT"
              },
              {
                "$name": "VkSampleLocationsInfoEXT"
              },
              {
                "$name": "VkAttachmentSampleLocationsEXT"
              },
              {
                "$name": "VkSubpassSampleLocationsEXT"
              },
              {
                "$name": "VkRenderPassSampleLocationsBeginInfoEXT"
              },
              {
                "$name": "VkPipelineSampleLocationsStateCreateInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceSampleLocationsPropertiesEXT"
              },
              {
                "$name": "VkMultisamplePropertiesEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetSampleLocationsEXT"
              },
              {
                "$name": "vkGetPhysicalDeviceMultisamplePropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_sample_locations",
          "$number": 144,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan",
          "$requires": "VK_KHR_get_physical_device_properties2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_relaxed_block_layout\"",
                "$name": "VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_relaxed_block_layout",
          "$number": 145,
          "$type": "device",
          "$author": "KHR",
          "$contact": "John Kessenich @johnkslang",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_RESERVED_DO_NOT_USE_146_SPEC_VERSION"
              },
              {
                "$value": "\"VK_RESERVED_do_not_use_146\"",
                "$name": "VK_RESERVED_DO_NOT_USE_146_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_RESERVED_do_not_use_146",
          "$number": 146,
          "$supported": "disabled",
          "$comment": "Used for functionality subsumed into Vulkan 1.1 and not published as an extension"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_get_memory_requirements2\"",
                "$name": "VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"
              }
            ],
            "type": [
              {
                "$name": "VkBufferMemoryRequirementsInfo2KHR"
              },
              {
                "$name": "VkImageMemoryRequirementsInfo2KHR"
              },
              {
                "$name": "VkImageSparseMemoryRequirementsInfo2KHR"
              },
              {
                "$name": "VkMemoryRequirements2KHR"
              },
              {
                "$name": "VkSparseImageMemoryRequirements2KHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetImageMemoryRequirements2KHR"
              },
              {
                "$name": "vkGetBufferMemoryRequirements2KHR"
              },
              {
                "$name": "vkGetImageSparseMemoryRequirements2KHR"
              }
            ]
          },
          "$name": "VK_KHR_get_memory_requirements2",
          "$number": 147,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_image_format_list\"",
                "$name": "VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO"
              }
            ],
            "type": {
              "$name": "VkImageFormatListCreateInfoKHR"
            }
          },
          "$name": "VK_KHR_image_format_list",
          "$number": 148,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_blend_operation_advanced\"",
                "$name": "VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_ZERO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SRC_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DST_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SRC_OVER_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DST_OVER_EXT"
              },
              {
                "$offset": 5,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SRC_IN_EXT"
              },
              {
                "$offset": 6,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DST_IN_EXT"
              },
              {
                "$offset": 7,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SRC_OUT_EXT"
              },
              {
                "$offset": 8,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DST_OUT_EXT"
              },
              {
                "$offset": 9,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SRC_ATOP_EXT"
              },
              {
                "$offset": 10,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DST_ATOP_EXT"
              },
              {
                "$offset": 11,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_XOR_EXT"
              },
              {
                "$offset": 12,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_MULTIPLY_EXT"
              },
              {
                "$offset": 13,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SCREEN_EXT"
              },
              {
                "$offset": 14,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_OVERLAY_EXT"
              },
              {
                "$offset": 15,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DARKEN_EXT"
              },
              {
                "$offset": 16,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_LIGHTEN_EXT"
              },
              {
                "$offset": 17,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_COLORDODGE_EXT"
              },
              {
                "$offset": 18,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_COLORBURN_EXT"
              },
              {
                "$offset": 19,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HARDLIGHT_EXT"
              },
              {
                "$offset": 20,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_SOFTLIGHT_EXT"
              },
              {
                "$offset": 21,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_DIFFERENCE_EXT"
              },
              {
                "$offset": 22,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_EXCLUSION_EXT"
              },
              {
                "$offset": 23,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_INVERT_EXT"
              },
              {
                "$offset": 24,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_INVERT_RGB_EXT"
              },
              {
                "$offset": 25,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_LINEARDODGE_EXT"
              },
              {
                "$offset": 26,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_LINEARBURN_EXT"
              },
              {
                "$offset": 27,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_VIVIDLIGHT_EXT"
              },
              {
                "$offset": 28,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_LINEARLIGHT_EXT"
              },
              {
                "$offset": 29,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_PINLIGHT_EXT"
              },
              {
                "$offset": 30,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HARDMIX_EXT"
              },
              {
                "$offset": 31,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HSL_HUE_EXT"
              },
              {
                "$offset": 32,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HSL_SATURATION_EXT"
              },
              {
                "$offset": 33,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HSL_COLOR_EXT"
              },
              {
                "$offset": 34,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_HSL_LUMINOSITY_EXT"
              },
              {
                "$offset": 35,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_PLUS_EXT"
              },
              {
                "$offset": 36,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_PLUS_CLAMPED_EXT"
              },
              {
                "$offset": 37,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT"
              },
              {
                "$offset": 38,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_PLUS_DARKER_EXT"
              },
              {
                "$offset": 39,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_MINUS_EXT"
              },
              {
                "$offset": 40,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_MINUS_CLAMPED_EXT"
              },
              {
                "$offset": 41,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_CONTRAST_EXT"
              },
              {
                "$offset": 42,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_INVERT_OVG_EXT"
              },
              {
                "$offset": 43,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_RED_EXT"
              },
              {
                "$offset": 44,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_GREEN_EXT"
              },
              {
                "$offset": 45,
                "$extends": "VkBlendOp",
                "$name": "VK_BLEND_OP_BLUE_EXT"
              },
              {
                "$bitpos": 19,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"
              },
              {
                "$name": "VkPipelineColorBlendAdvancedStateCreateInfoEXT"
              },
              {
                "$name": "VkBlendOverlapEXT"
              }
            ]
          },
          "$name": "VK_EXT_blend_operation_advanced",
          "$number": 149,
          "$type": "device",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$requires": "VK_KHR_get_physical_device_properties2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_fragment_coverage_to_color\"",
                "$name": "VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineCoverageToColorStateCreateFlagsNV"
              },
              {
                "$name": "VkPipelineCoverageToColorStateCreateInfoNV"
              }
            ]
          },
          "$name": "VK_NV_fragment_coverage_to_color",
          "$number": 150,
          "$type": "device",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 13,
                  "$name": "VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_acceleration_structure\"",
                  "$name": "VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME"
                },
                {
                  "$offset": 7,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR"
                },
                {
                  "$offset": 5,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR"
                },
                {
                  "$offset": 6,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR"
                },
                {
                  "$offset": 9,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR"
                },
                {
                  "$offset": 10,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR"
                },
                {
                  "$offset": 11,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR"
                },
                {
                  "$offset": 12,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR"
                },
                {
                  "$offset": 13,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR"
                },
                {
                  "$offset": 14,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR"
                },
                {
                  "$offset": 17,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR"
                },
                {
                  "$offset": 20,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR"
                },
                {
                  "$bitpos": 25,
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkDescriptorType",
                  "$name": "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR"
                },
                {
                  "$bitpos": 21,
                  "$extends": "VkAccessFlagBits",
                  "$name": "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR"
                },
                {
                  "$bitpos": 22,
                  "$extends": "VkAccessFlagBits",
                  "$name": "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR"
                },
                {
                  "$offset": 1,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkObjectType",
                  "$name": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkDebugReportObjectTypeEXT",
                  "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkIndexType",
                  "$extnumber": 166,
                  "$name": "VK_INDEX_TYPE_NONE_KHR"
                },
                {
                  "$bitpos": 29,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR"
                },
                {
                  "$bitpos": 19,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR"
                },
                {
                  "$bitpos": 20,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR"
                }
              ],
              "type": [
                {
                  "$name": "VkAccelerationStructureTypeKHR"
                },
                {
                  "$name": "VkDeviceOrHostAddressKHR"
                },
                {
                  "$name": "VkDeviceOrHostAddressConstKHR"
                },
                {
                  "$name": "VkAccelerationStructureBuildRangeInfoKHR"
                },
                {
                  "$name": "VkAabbPositionsKHR"
                },
                {
                  "$name": "VkAccelerationStructureGeometryTrianglesDataKHR"
                },
                {
                  "$name": "VkTransformMatrixKHR"
                },
                {
                  "$name": "VkAccelerationStructureBuildGeometryInfoKHR"
                },
                {
                  "$name": "VkAccelerationStructureBuildTypeKHR"
                },
                {
                  "$name": "VkAccelerationStructureGeometryAabbsDataKHR"
                },
                {
                  "$name": "VkAccelerationStructureInstanceKHR"
                },
                {
                  "$name": "VkAccelerationStructureGeometryInstancesDataKHR"
                },
                {
                  "$name": "VkAccelerationStructureGeometryDataKHR"
                },
                {
                  "$name": "VkAccelerationStructureGeometryKHR"
                },
                {
                  "$name": "VkGeometryFlagsKHR"
                },
                {
                  "$name": "VkGeometryInstanceFlagsKHR"
                },
                {
                  "$name": "VkGeometryFlagBitsKHR"
                },
                {
                  "$name": "VkGeometryInstanceFlagBitsKHR"
                },
                {
                  "$name": "VkAccelerationStructureCreateInfoKHR"
                },
                {
                  "$name": "VkAccelerationStructureKHR"
                },
                {
                  "$name": "VkBuildAccelerationStructureFlagBitsKHR"
                },
                {
                  "$name": "VkBuildAccelerationStructureFlagsKHR"
                },
                {
                  "$name": "VkCopyAccelerationStructureModeKHR"
                },
                {
                  "$name": "VkGeometryTypeKHR"
                },
                {
                  "$name": "VkWriteDescriptorSetAccelerationStructureKHR"
                },
                {
                  "$name": "VkPhysicalDeviceAccelerationStructureFeaturesKHR"
                },
                {
                  "$name": "VkPhysicalDeviceAccelerationStructurePropertiesKHR"
                },
                {
                  "$name": "VkAccelerationStructureDeviceAddressInfoKHR"
                },
                {
                  "$name": "VkAccelerationStructureVersionInfoKHR"
                },
                {
                  "$name": "VkCopyAccelerationStructureToMemoryInfoKHR"
                },
                {
                  "$name": "VkCopyMemoryToAccelerationStructureInfoKHR"
                },
                {
                  "$name": "VkCopyAccelerationStructureInfoKHR"
                },
                {
                  "$name": "VkAccelerationStructureCompatibilityKHR"
                },
                {
                  "$name": "VkAccelerationStructureCreateFlagBitsKHR"
                },
                {
                  "$name": "VkAccelerationStructureCreateFlagsKHR"
                },
                {
                  "$name": "VkBuildAccelerationStructureModeKHR"
                },
                {
                  "$name": "VkAccelerationStructureBuildSizesInfoKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkCreateAccelerationStructureKHR"
                },
                {
                  "$name": "vkDestroyAccelerationStructureKHR"
                },
                {
                  "$name": "vkCmdBuildAccelerationStructuresKHR"
                },
                {
                  "$name": "vkCmdBuildAccelerationStructuresIndirectKHR"
                },
                {
                  "$name": "vkBuildAccelerationStructuresKHR"
                },
                {
                  "$name": "vkCopyAccelerationStructureKHR"
                },
                {
                  "$name": "vkCopyAccelerationStructureToMemoryKHR"
                },
                {
                  "$name": "vkCopyMemoryToAccelerationStructureKHR"
                },
                {
                  "$name": "vkWriteAccelerationStructuresPropertiesKHR"
                },
                {
                  "$name": "vkCmdCopyAccelerationStructureKHR"
                },
                {
                  "$name": "vkCmdCopyAccelerationStructureToMemoryKHR"
                },
                {
                  "$name": "vkCmdCopyMemoryToAccelerationStructureKHR"
                },
                {
                  "$name": "vkGetAccelerationStructureDeviceAddressKHR"
                },
                {
                  "$name": "vkCmdWriteAccelerationStructuresPropertiesKHR"
                },
                {
                  "$name": "vkGetDeviceAccelerationStructureCompatibilityKHR"
                },
                {
                  "$name": "vkGetAccelerationStructureBuildSizesKHR"
                }
              ]
            },
            {
              "enum": {
                "$bitpos": 29,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_KHR_acceleration_structure",
          "$number": 151,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_EXT_descriptor_indexing,VK_KHR_buffer_device_address,VK_KHR_deferred_host_operations",
          "$author": "KHR",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$sortorder": 1
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_ray_tracing_pipeline\"",
                "$name": "VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME"
              },
              {
                "$name": "VK_SHADER_UNUSED_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR"
              },
              {
                "$offset": 15,
                "$extends": "VkStructureType",
                "$extnumber": 151,
                "$name": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR"
              },
              {
                "$offset": 16,
                "$extends": "VkStructureType",
                "$extnumber": 151,
                "$name": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR"
              },
              {
                "$offset": 18,
                "$extends": "VkStructureType",
                "$extnumber": 151,
                "$name": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR"
              },
              {
                "$bitpos": 8,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_RAYGEN_BIT_KHR"
              },
              {
                "$bitpos": 9,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_ANY_HIT_BIT_KHR"
              },
              {
                "$bitpos": 10,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR"
              },
              {
                "$bitpos": 11,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_MISS_BIT_KHR"
              },
              {
                "$bitpos": 12,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_INTERSECTION_BIT_KHR"
              },
              {
                "$bitpos": 13,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_CALLABLE_BIT_KHR"
              },
              {
                "$bitpos": 21,
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR"
              },
              {
                "$bitpos": 10,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkPipelineBindPoint",
                "$extnumber": 166,
                "$name": "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR"
              },
              {
                "$bitpos": 14,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR"
              },
              {
                "$bitpos": 15,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR"
              },
              {
                "$bitpos": 16,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR"
              },
              {
                "$bitpos": 17,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR"
              },
              {
                "$bitpos": 12,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR"
              },
              {
                "$bitpos": 13,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR"
              },
              {
                "$bitpos": 19,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkRayTracingShaderGroupCreateInfoKHR"
              },
              {
                "$name": "VkRayTracingShaderGroupTypeKHR"
              },
              {
                "$name": "VkRayTracingPipelineCreateInfoKHR"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingPipelinePropertiesKHR"
              },
              {
                "$name": "VkStridedDeviceAddressRegionKHR"
              },
              {
                "$name": "VkTraceRaysIndirectCommandKHR"
              },
              {
                "$name": "VkRayTracingPipelineInterfaceCreateInfoKHR"
              },
              {
                "$name": "VkShaderGroupShaderKHR"
              }
            ],
            "command": [
              {
                "$name": "vkCmdTraceRaysKHR"
              },
              {
                "$name": "vkCreateRayTracingPipelinesKHR"
              },
              {
                "$name": "vkGetRayTracingShaderGroupHandlesKHR"
              },
              {
                "$name": "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"
              },
              {
                "$name": "vkCmdTraceRaysIndirectKHR"
              },
              {
                "$name": "vkGetRayTracingShaderGroupStackSizeKHR"
              },
              {
                "$name": "vkCmdSetRayTracingPipelineStackSizeKHR"
              }
            ]
          },
          "$name": "VK_KHR_ray_tracing_pipeline",
          "$number": 348,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_spirv_1_4,VK_KHR_acceleration_structure",
          "$author": "KHR",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$sortorder": 1
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_RAY_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_ray_query\"",
                "$name": "VK_KHR_RAY_QUERY_EXTENSION_NAME"
              },
              {
                "$offset": 13,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceRayQueryFeaturesKHR"
            }
          },
          "$name": "VK_KHR_ray_query",
          "$number": 349,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_spirv_1_4,VK_KHR_acceleration_structure",
          "$author": "KHR",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$sortorder": 1
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_152_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_152\"",
                "$name": "VK_NV_EXTENSION_152_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_152",
          "$number": 152,
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_framebuffer_mixed_samples\"",
                "$name": "VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineCoverageModulationStateCreateInfoNV"
              },
              {
                "$name": "VkPipelineCoverageModulationStateCreateFlagsNV"
              },
              {
                "$name": "VkCoverageModulationModeNV"
              }
            ]
          },
          "$name": "VK_NV_framebuffer_mixed_samples",
          "$number": 153,
          "$type": "device",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_FILL_RECTANGLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_fill_rectangle\"",
                "$name": "VK_NV_FILL_RECTANGLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkPolygonMode",
                "$name": "VK_POLYGON_MODE_FILL_RECTANGLE_NV"
              }
            ]
          },
          "$name": "VK_NV_fill_rectangle",
          "$number": 154,
          "$type": "device",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_shader_sm_builtins\"",
                "$name": "VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"
              },
              {
                "$name": "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"
              }
            ]
          },
          "$name": "VK_NV_shader_sm_builtins",
          "$number": 155,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_post_depth_coverage\"",
                "$name": "VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_post_depth_coverage",
          "$number": 156,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 14,
                  "$name": "VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_sampler_ycbcr_conversion\"",
                  "$name": "VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"
                },
                {
                  "$extends": "VkDebugReportObjectTypeEXT",
                  "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT",
                  "$alias": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"
                },
                {
                  "$extends": "VkObjectType",
                  "$name": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR",
                  "$alias": "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8B8G8R8_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8B8G8R8_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_B8G8R8G8_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_B8G8R8G8_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR",
                  "$alias": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R10X6_UNORM_PACK16_KHR",
                  "$alias": "VK_FORMAT_R10X6_UNORM_PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR",
                  "$alias": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R12X4_UNORM_PACK16_KHR",
                  "$alias": "VK_FORMAT_R12X4_UNORM_PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR",
                  "$alias": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR",
                  "$alias": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR",
                  "$alias": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16B16G16R16_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16B16G16R16_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_B16G16R16G16_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_B16G16R16G16_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"
                },
                {
                  "$extends": "VkFormat",
                  "$name": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR",
                  "$alias": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"
                },
                {
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR",
                  "$alias": "VK_IMAGE_ASPECT_PLANE_0_BIT"
                },
                {
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR",
                  "$alias": "VK_IMAGE_ASPECT_PLANE_1_BIT"
                },
                {
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR",
                  "$alias": "VK_IMAGE_ASPECT_PLANE_2_BIT"
                },
                {
                  "$extends": "VkImageCreateFlagBits",
                  "$name": "VK_IMAGE_CREATE_DISJOINT_BIT_KHR",
                  "$alias": "VK_IMAGE_CREATE_DISJOINT_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_DISJOINT_BIT"
                },
                {
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR",
                  "$alias": "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT"
                },
                {
                  "$extends": "VkSamplerYcbcrModelConversion",
                  "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"
                },
                {
                  "$extends": "VkSamplerYcbcrModelConversion",
                  "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY"
                },
                {
                  "$extends": "VkSamplerYcbcrModelConversion",
                  "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709"
                },
                {
                  "$extends": "VkSamplerYcbcrModelConversion",
                  "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601"
                },
                {
                  "$extends": "VkSamplerYcbcrModelConversion",
                  "$name": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020"
                },
                {
                  "$extends": "VkSamplerYcbcrRange",
                  "$name": "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_RANGE_ITU_FULL"
                },
                {
                  "$extends": "VkSamplerYcbcrRange",
                  "$name": "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR",
                  "$alias": "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW"
                },
                {
                  "$extends": "VkChromaLocation",
                  "$name": "VK_CHROMA_LOCATION_COSITED_EVEN_KHR",
                  "$alias": "VK_CHROMA_LOCATION_COSITED_EVEN"
                },
                {
                  "$extends": "VkChromaLocation",
                  "$name": "VK_CHROMA_LOCATION_MIDPOINT_KHR",
                  "$alias": "VK_CHROMA_LOCATION_MIDPOINT"
                }
              ],
              "type": [
                {
                  "$name": "VkSamplerYcbcrConversionCreateInfoKHR"
                },
                {
                  "$name": "VkSamplerYcbcrConversionInfoKHR"
                },
                {
                  "$name": "VkBindImagePlaneMemoryInfoKHR"
                },
                {
                  "$name": "VkImagePlaneMemoryRequirementsInfoKHR"
                },
                {
                  "$name": "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR"
                },
                {
                  "$name": "VkSamplerYcbcrConversionImageFormatPropertiesKHR"
                },
                {
                  "$name": "VkSamplerYcbcrConversionKHR"
                },
                {
                  "$name": "VkSamplerYcbcrModelConversionKHR"
                },
                {
                  "$name": "VkSamplerYcbcrRangeKHR"
                },
                {
                  "$name": "VkChromaLocationKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkCreateSamplerYcbcrConversionKHR"
                },
                {
                  "$name": "vkDestroySamplerYcbcrConversionKHR"
                }
              ]
            },
            {
              "enum": {
                "$extends": "VkDebugReportObjectTypeEXT",
                "$offset": 0,
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT"
              },
              "$extension": "VK_EXT_debug_report"
            }
          ],
          "$name": "VK_KHR_sampler_ycbcr_conversion",
          "$number": 157,
          "$type": "device",
          "$requires": "VK_KHR_maintenance1,VK_KHR_bind_memory2,VK_KHR_get_memory_requirements2,VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Andrew Garrard @fluppeteer",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_BIND_MEMORY_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_bind_memory2\"",
                "$name": "VK_KHR_BIND_MEMORY_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"
              },
              {
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_ALIAS_BIT_KHR",
                "$alias": "VK_IMAGE_CREATE_ALIAS_BIT"
              }
            ],
            "command": [
              {
                "$name": "vkBindBufferMemory2KHR"
              },
              {
                "$name": "vkBindImageMemory2KHR"
              }
            ],
            "type": [
              {
                "$name": "VkBindBufferMemoryInfoKHR"
              },
              {
                "$name": "VkBindImageMemoryInfoKHR"
              }
            ]
          },
          "$name": "VK_KHR_bind_memory2",
          "$number": 158,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 2,
                  "$name": "VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_image_drm_format_modifier\"",
                  "$name": "VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$dir": "-",
                  "$extends": "VkResult",
                  "$name": "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"
                },
                {
                  "$offset": 5,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkImageTiling",
                  "$name": "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT"
                },
                {
                  "$bitpos": 7,
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT"
                },
                {
                  "$bitpos": 8,
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT"
                },
                {
                  "$bitpos": 9,
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT"
                },
                {
                  "$bitpos": 10,
                  "$extends": "VkImageAspectFlagBits",
                  "$name": "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT"
                }
              ],
              "type": [
                {
                  "$name": "VkDrmFormatModifierPropertiesListEXT"
                },
                {
                  "$name": "VkDrmFormatModifierPropertiesEXT"
                },
                {
                  "$name": "VkPhysicalDeviceImageDrmFormatModifierInfoEXT"
                },
                {
                  "$name": "VkImageDrmFormatModifierListCreateInfoEXT"
                },
                {
                  "$name": "VkImageDrmFormatModifierExplicitCreateInfoEXT"
                },
                {
                  "$name": "VkImageDrmFormatModifierPropertiesEXT"
                }
              ],
              "command": {
                "$name": "vkGetImageDrmFormatModifierPropertiesEXT"
              }
            },
            {
              "type": [
                {
                  "$name": "VkDrmFormatModifierPropertiesList2EXT"
                },
                {
                  "$name": "VkDrmFormatModifierProperties2EXT"
                }
              ],
              "enum": {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_EXT_image_drm_format_modifier",
          "$number": 159,
          "$type": "device",
          "$requires": "VK_KHR_bind_memory2,VK_KHR_get_physical_device_properties2,VK_KHR_image_format_list,VK_KHR_sampler_ycbcr_conversion",
          "$author": "EXT",
          "$contact": "Chad Versace @chadversary",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_160_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_160\"",
                "$name": "VK_EXT_EXTENSION_160_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_160",
          "$number": 160,
          "$author": "EXT",
          "$contact": "Mark Young @marky-lunarg",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_VALIDATION_CACHE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_validation_cache\"",
                "$name": "VK_EXT_VALIDATION_CACHE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkValidationCacheEXT"
              },
              {
                "$name": "VkValidationCacheCreateInfoEXT"
              },
              {
                "$name": "VkShaderModuleValidationCacheCreateInfoEXT"
              },
              {
                "$name": "VkValidationCacheHeaderVersionEXT"
              },
              {
                "$name": "VkValidationCacheCreateFlagsEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCreateValidationCacheEXT"
              },
              {
                "$name": "vkDestroyValidationCacheEXT"
              },
              {
                "$name": "vkMergeValidationCachesEXT"
              },
              {
                "$name": "vkGetValidationCacheDataEXT"
              }
            ]
          },
          "$name": "VK_EXT_validation_cache",
          "$number": 161,
          "$type": "device",
          "$author": "GOOGLE",
          "$contact": "Cort Stratton @cdwfs",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_descriptor_indexing\"",
                "$name": "VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT",
                "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT"
              },
              {
                "$extends": "VkDescriptorBindingFlagBits",
                "$name": "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT"
              },
              {
                "$extends": "VkDescriptorBindingFlagBits",
                "$name": "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT"
              },
              {
                "$extends": "VkDescriptorBindingFlagBits",
                "$name": "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT"
              },
              {
                "$extends": "VkDescriptorBindingFlagBits",
                "$name": "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT"
              },
              {
                "$extends": "VkDescriptorPoolCreateFlagBits",
                "$name": "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT"
              },
              {
                "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT",
                "$alias": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_FRAGMENTATION_EXT",
                "$alias": "VK_ERROR_FRAGMENTATION"
              }
            ],
            "type": [
              {
                "$name": "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceDescriptorIndexingFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceDescriptorIndexingPropertiesEXT"
              },
              {
                "$name": "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT"
              },
              {
                "$name": "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT"
              },
              {
                "$name": "VkDescriptorBindingFlagBitsEXT"
              },
              {
                "$name": "VkDescriptorBindingFlagsEXT"
              }
            ]
          },
          "$name": "VK_EXT_descriptor_indexing",
          "$number": 162,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_maintenance3",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_viewport_index_layer\"",
                "$name": "VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_shader_viewport_index_layer",
          "$number": 163,
          "$type": "device",
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PORTABILITY_SUBSET_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_portability_subset\"",
                "$name": "VK_KHR_PORTABILITY_SUBSET_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePortabilitySubsetFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDevicePortabilitySubsetPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_portability_subset",
          "$number": 164,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Bill Hollings @billhollings",
          "$platform": "provisional",
          "$supported": "vulkan",
          "$provisional": true
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_shading_rate_image\"",
                "$name": "VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
                "$alias": "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"
              },
              {
                "$offset": 4,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV"
              },
              {
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
                "$alias": "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"
              },
              {
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",
                "$alias": "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
              },
              {
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
                "$alias": "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"
              },
              {
                "$offset": 6,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV"
              }
            ],
            "type": [
              {
                "$name": "VkShadingRatePaletteEntryNV"
              },
              {
                "$name": "VkShadingRatePaletteNV"
              },
              {
                "$name": "VkPipelineViewportShadingRateImageStateCreateInfoNV"
              },
              {
                "$name": "VkPhysicalDeviceShadingRateImageFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceShadingRateImagePropertiesNV"
              },
              {
                "$name": "VkCoarseSampleLocationNV"
              },
              {
                "$name": "VkCoarseSampleOrderCustomNV"
              },
              {
                "$name": "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"
              },
              {
                "$name": "VkCoarseSampleOrderTypeNV"
              }
            ],
            "command": [
              {
                "$name": "vkCmdBindShadingRateImageNV"
              },
              {
                "$name": "vkCmdSetViewportShadingRatePaletteNV"
              },
              {
                "$name": "vkCmdSetCoarseSampleOrderNV"
              }
            ]
          },
          "$name": "VK_NV_shading_rate_image",
          "$number": 165,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_NV_RAY_TRACING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_ray_tracing\"",
                "$name": "VK_NV_RAY_TRACING_EXTENSION_NAME"
              },
              {
                "$name": "VK_SHADER_UNUSED_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GEOMETRY_NV"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"
              },
              {
                "$offset": 11,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"
              },
              {
                "$offset": 12,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_RAYGEN_BIT_NV",
                "$alias": "VK_SHADER_STAGE_RAYGEN_BIT_KHR"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_ANY_HIT_BIT_NV",
                "$alias": "VK_SHADER_STAGE_ANY_HIT_BIT_KHR"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV",
                "$alias": "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_MISS_BIT_NV",
                "$alias": "VK_SHADER_STAGE_MISS_BIT_KHR"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_INTERSECTION_BIT_NV",
                "$alias": "VK_SHADER_STAGE_INTERSECTION_BIT_KHR"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_CALLABLE_BIT_NV",
                "$alias": "VK_SHADER_STAGE_CALLABLE_BIT_KHR"
              },
              {
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",
                "$alias": "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR"
              },
              {
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
                "$alias": "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"
              },
              {
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV",
                "$alias": "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR"
              },
              {
                "$extends": "VkPipelineBindPoint",
                "$name": "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV",
                "$alias": "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkDescriptorType",
                "$name": "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV"
              },
              {
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",
                "$alias": "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR"
              },
              {
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
                "$alias": "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV"
              },
              {
                "$bitpos": 5,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkDebugReportObjectTypeEXT",
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT"
              },
              {
                "$extends": "VkIndexType",
                "$name": "VK_INDEX_TYPE_NONE_NV",
                "$alias": "VK_INDEX_TYPE_NONE_KHR"
              },
              {
                "$extends": "VkRayTracingShaderGroupTypeKHR",
                "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV",
                "$alias": "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR"
              },
              {
                "$extends": "VkRayTracingShaderGroupTypeKHR",
                "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV",
                "$alias": "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR"
              },
              {
                "$extends": "VkRayTracingShaderGroupTypeKHR",
                "$name": "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV",
                "$alias": "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR"
              },
              {
                "$extends": "VkGeometryTypeKHR",
                "$name": "VK_GEOMETRY_TYPE_TRIANGLES_NV",
                "$alias": "VK_GEOMETRY_TYPE_TRIANGLES_KHR"
              },
              {
                "$extends": "VkGeometryTypeKHR",
                "$name": "VK_GEOMETRY_TYPE_AABBS_NV",
                "$alias": "VK_GEOMETRY_TYPE_AABBS_KHR"
              },
              {
                "$extends": "VkAccelerationStructureTypeKHR",
                "$name": "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV",
                "$alias": "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR"
              },
              {
                "$extends": "VkAccelerationStructureTypeKHR",
                "$name": "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV",
                "$alias": "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR"
              },
              {
                "$extends": "VkGeometryFlagBitsKHR",
                "$name": "VK_GEOMETRY_OPAQUE_BIT_NV",
                "$alias": "VK_GEOMETRY_OPAQUE_BIT_KHR"
              },
              {
                "$extends": "VkGeometryFlagBitsKHR",
                "$name": "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV",
                "$alias": "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR"
              },
              {
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV",
                "$alias": "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR"
              },
              {
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV",
                "$alias": "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR"
              },
              {
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV",
                "$alias": "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR"
              },
              {
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV",
                "$alias": "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR"
              },
              {
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV",
                "$alias": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR"
              },
              {
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV",
                "$alias": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR"
              },
              {
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV",
                "$alias": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR"
              },
              {
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV",
                "$alias": "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR"
              },
              {
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV",
                "$alias": "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR"
              },
              {
                "$extends": "VkCopyAccelerationStructureModeKHR",
                "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV",
                "$alias": "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR"
              },
              {
                "$extends": "VkCopyAccelerationStructureModeKHR",
                "$name": "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV",
                "$alias": "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkRayTracingShaderGroupCreateInfoNV"
              },
              {
                "$name": "VkRayTracingShaderGroupTypeNV"
              },
              {
                "$name": "VkRayTracingPipelineCreateInfoNV"
              },
              {
                "$name": "VkGeometryTypeNV"
              },
              {
                "$name": "VkAccelerationStructureTypeNV"
              },
              {
                "$name": "VkGeometryTrianglesNV"
              },
              {
                "$name": "VkGeometryAABBNV"
              },
              {
                "$name": "VkGeometryDataNV"
              },
              {
                "$name": "VkGeometryNV"
              },
              {
                "$name": "VkGeometryFlagsNV"
              },
              {
                "$name": "VkGeometryFlagBitsNV"
              },
              {
                "$name": "VkGeometryInstanceFlagsNV"
              },
              {
                "$name": "VkGeometryInstanceFlagBitsNV"
              },
              {
                "$name": "VkAccelerationStructureInfoNV"
              },
              {
                "$name": "VkAccelerationStructureCreateInfoNV"
              },
              {
                "$name": "VkAccelerationStructureNV"
              },
              {
                "$name": "VkBuildAccelerationStructureFlagBitsNV"
              },
              {
                "$name": "VkBuildAccelerationStructureFlagsNV"
              },
              {
                "$name": "VkCopyAccelerationStructureModeNV"
              },
              {
                "$name": "VkBindAccelerationStructureMemoryInfoNV"
              },
              {
                "$name": "VkWriteDescriptorSetAccelerationStructureNV"
              },
              {
                "$name": "VkAccelerationStructureMemoryRequirementsInfoNV"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingPropertiesNV"
              },
              {
                "$name": "VkMemoryRequirements2KHR"
              },
              {
                "$name": "VkAccelerationStructureMemoryRequirementsTypeNV"
              },
              {
                "$name": "VkTransformMatrixNV"
              },
              {
                "$name": "VkAabbPositionsNV"
              },
              {
                "$name": "VkAccelerationStructureInstanceNV"
              }
            ],
            "command": [
              {
                "$name": "vkCreateAccelerationStructureNV"
              },
              {
                "$name": "vkDestroyAccelerationStructureNV"
              },
              {
                "$name": "vkGetAccelerationStructureMemoryRequirementsNV"
              },
              {
                "$name": "vkBindAccelerationStructureMemoryNV"
              },
              {
                "$name": "vkCmdBuildAccelerationStructureNV"
              },
              {
                "$name": "vkCmdCopyAccelerationStructureNV"
              },
              {
                "$name": "vkCmdTraceRaysNV"
              },
              {
                "$name": "vkCreateRayTracingPipelinesNV"
              },
              {
                "$name": "vkGetRayTracingShaderGroupHandlesNV"
              },
              {
                "$name": "vkGetAccelerationStructureHandleNV"
              },
              {
                "$name": "vkCmdWriteAccelerationStructuresPropertiesNV"
              },
              {
                "$name": "vkCompileDeferredNV"
              }
            ]
          },
          "$name": "VK_NV_ray_tracing",
          "$number": 166,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_get_memory_requirements2",
          "$author": "NV",
          "$contact": "Eric Werness @ewerness-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_representative_fragment_test\"",
                "$name": "VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"
              },
              {
                "$name": "VkPipelineRepresentativeFragmentTestStateCreateInfoNV"
              }
            ]
          },
          "$name": "VK_NV_representative_fragment_test",
          "$number": 167,
          "$type": "device",
          "$author": "NV",
          "$contact": "Kedarnath Thangudu @kthangudu",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_168_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_168\"",
                "$name": "VK_NV_EXTENSION_168_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_168",
          "$number": 168,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_MAINTENANCE_3_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_maintenance3\"",
                "$name": "VK_KHR_MAINTENANCE_3_EXTENSION_NAME"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_3_SPEC_VERSION",
                "$name": "VK_KHR_MAINTENANCE3_SPEC_VERSION",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$alias": "VK_KHR_MAINTENANCE_3_EXTENSION_NAME",
                "$name": "VK_KHR_MAINTENANCE3_EXTENSION_NAME",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR",
                "$alias": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMaintenance3PropertiesKHR"
              },
              {
                "$name": "VkDescriptorSetLayoutSupportKHR"
              }
            ],
            "command": {
              "$name": "vkGetDescriptorSetLayoutSupportKHR"
            }
          },
          "$name": "VK_KHR_maintenance3",
          "$number": 169,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_1"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_draw_indirect_count\"",
                "$name": "VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME"
              }
            ],
            "command": [
              {
                "$name": "vkCmdDrawIndirectCountKHR"
              },
              {
                "$name": "vkCmdDrawIndexedIndirectCountKHR"
              }
            ]
          },
          "$name": "VK_KHR_draw_indirect_count",
          "$number": 170,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_EXT_FILTER_CUBIC_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_filter_cubic\"",
                "$name": "VK_EXT_FILTER_CUBIC_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkFilter",
                "$extnumber": 16,
                "$name": "VK_FILTER_CUBIC_EXT"
              },
              {
                "$bitpos": 13,
                "$extends": "VkFormatFeatureFlagBits",
                "$name": "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceImageViewImageFormatInfoEXT"
              },
              {
                "$name": "VkFilterCubicImageViewImageFormatPropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_filter_cubic",
          "$number": 171,
          "$type": "device",
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_render_pass_shader_resolve\"",
                "$name": "VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME"
              },
              {
                "$bitpos": 2,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM"
              },
              {
                "$bitpos": 3,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM"
              }
            ]
          },
          "$name": "VK_QCOM_render_pass_shader_resolve",
          "$number": 172,
          "$type": "device",
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_173_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_173\"",
                "$name": "VK_QCOM_EXTENSION_173_EXTENSION_NAME"
              },
              {
                "$bitpos": 18,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM"
              },
              {
                "$bitpos": 16,
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM"
              },
              {
                "$bitpos": 17,
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM"
              }
            ]
          },
          "$name": "VK_QCOM_extension_173",
          "$number": 173,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_174_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_174\"",
                "$name": "VK_QCOM_EXTENSION_174_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_174",
          "$number": 174,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_global_priority\"",
                "$name": "VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT"
              },
              {
                "$extends": "VkResult",
                "$alias": "VK_ERROR_NOT_PERMITTED_KHR",
                "$name": "VK_ERROR_NOT_PERMITTED_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkDeviceQueueGlobalPriorityCreateInfoEXT"
              },
              {
                "$name": "VkQueueGlobalPriorityEXT"
              }
            ]
          },
          "$name": "VK_EXT_global_priority",
          "$number": 175,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Andres Rodriguez @lostgoat",
          "$supported": "vulkan",
          "$promotedto": "VK_KHR_global_priority"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_subgroup_extended_types\"",
                "$name": "VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR"
            }
          },
          "$name": "VK_KHR_shader_subgroup_extended_types",
          "$number": 176,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "KHR",
          "$contact": "Neil Henning @sheredom",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_177_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_177\"",
                "$name": "VK_EXT_EXTENSION_177_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_177",
          "$number": 177,
          "$author": "EXT",
          "$contact": "Neil Henning @sheredom",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_8BIT_STORAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_8bit_storage\"",
                "$name": "VK_KHR_8BIT_STORAGE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevice8BitStorageFeaturesKHR"
            }
          },
          "$name": "VK_KHR_8bit_storage",
          "$number": 178,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_storage_buffer_storage_class",
          "$author": "KHR",
          "$contact": "Alexander Galazin @alegal-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_external_memory_host\"",
                "$name": "VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"
              },
              {
                "$bitpos": 7,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT"
              },
              {
                "$bitpos": 8,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkImportMemoryHostPointerInfoEXT"
              },
              {
                "$name": "VkMemoryHostPointerPropertiesEXT"
              },
              {
                "$name": "VkPhysicalDeviceExternalMemoryHostPropertiesEXT"
              }
            ],
            "command": {
              "$name": "vkGetMemoryHostPointerPropertiesEXT"
            }
          },
          "$name": "VK_EXT_external_memory_host",
          "$number": 179,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_external_memory",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_BUFFER_MARKER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_buffer_marker\"",
                "$name": "VK_AMD_BUFFER_MARKER_EXTENSION_NAME"
              }
            ],
            "command": {
              "$name": "vkCmdWriteBufferMarkerAMD"
            }
          },
          "$name": "VK_AMD_buffer_marker",
          "$number": 180,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$specialuse": "devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_atomic_int64\"",
                "$name": "VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR"
            }
          },
          "$name": "VK_KHR_shader_atomic_int64",
          "$number": 181,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Aaron Hagan @ahagan",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_CLOCK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_clock\"",
                "$name": "VK_KHR_SHADER_CLOCK_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderClockFeaturesKHR"
            }
          },
          "$name": "VK_KHR_shader_clock",
          "$number": 182,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Aaron Hagan @ahagan",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_183_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_183\"",
                "$name": "VK_AMD_EXTENSION_183_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_183",
          "$number": 183,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_pipeline_compiler_control\"",
                "$name": "VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineCompilerControlFlagBitsAMD"
              },
              {
                "$name": "VkPipelineCompilerControlFlagsAMD"
              },
              {
                "$name": "VkPipelineCompilerControlCreateInfoAMD"
              }
            ]
          },
          "$name": "VK_AMD_pipeline_compiler_control",
          "$number": 184,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_calibrated_timestamps\"",
                "$name": "VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkTimeDomainEXT"
              },
              {
                "$name": "VkCalibratedTimestampInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"
              },
              {
                "$name": "vkGetCalibratedTimestampsEXT"
              }
            ]
          },
          "$name": "VK_EXT_calibrated_timestamps",
          "$number": 185,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_core_properties\"",
                "$name": "VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderCorePropertiesAMD"
            }
          },
          "$name": "VK_AMD_shader_core_properties",
          "$number": 186,
          "$type": "device",
          "$author": "AMD",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_187_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_187\"",
                "$name": "VK_AMD_EXTENSION_187_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_187",
          "$number": 187,
          "$author": "AMD",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 5,
                "$name": "VK_EXT_VIDEO_DECODE_H265_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_video_decode_h265\"",
                "$name": "VK_EXT_VIDEO_DECODE_H265_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              },
              {
                "$bitpos": 1,
                "$extends": "VkVideoCodecOperationFlagBitsKHR",
                "$name": "VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_EXT",
                "$protect": "VK_ENABLE_BETA_EXTENSIONS"
              }
            ],
            "type": [
              {
                "$name": "VkVideoDecodeH265ProfileInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH265CapabilitiesEXT"
              },
              {
                "$name": "VkVideoDecodeH265SessionParametersCreateInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH265SessionParametersAddInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH265PictureInfoEXT"
              },
              {
                "$name": "VkVideoDecodeH265DpbSlotInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_video_decode_h265",
          "$number": 188,
          "$type": "device",
          "$requires": "VK_KHR_video_decode_queue",
          "$author": "KHR",
          "$contact": "peter.fang@amd.com",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_global_priority\"",
                "$name": "VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 175,
                "$name": "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 389,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$extnumber": 389,
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR"
              },
              {
                "$extends": "VkResult",
                "$extnumber": 175,
                "$offset": 1,
                "$dir": "-",
                "$name": "VK_ERROR_NOT_PERMITTED_KHR"
              },
              {
                "$name": "VK_MAX_GLOBAL_PRIORITY_SIZE_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkDeviceQueueGlobalPriorityCreateInfoKHR"
              },
              {
                "$name": "VkQueueGlobalPriorityKHR"
              },
              {
                "$name": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR"
              },
              {
                "$name": "VkQueueFamilyGlobalPriorityPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_global_priority",
          "$number": 189,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_memory_overallocation_behavior\"",
                "$name": "VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"
              }
            ],
            "type": [
              {
                "$name": "VkMemoryOverallocationBehaviorAMD"
              },
              {
                "$name": "VkDeviceMemoryOverallocationCreateInfoAMD"
              }
            ]
          },
          "$name": "VK_AMD_memory_overallocation_behavior",
          "$number": 190,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_vertex_attribute_divisor\"",
                "$name": "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"
              },
              {
                "$name": "VkVertexInputBindingDivisorDescriptionEXT"
              },
              {
                "$name": "VkPipelineVertexInputDivisorStateCreateInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT"
              }
            ]
          },
          "$name": "VK_EXT_vertex_attribute_divisor",
          "$number": 191,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GGP_FRAME_TOKEN_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_frame_token\"",
                "$name": "VK_GGP_FRAME_TOKEN_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP"
              }
            ],
            "type": {
              "$name": "VkPresentFrameTokenGGP"
            }
          },
          "$name": "VK_GGP_frame_token",
          "$number": 192,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_GGP_stream_descriptor_surface",
          "$platform": "ggp",
          "$author": "GGP",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pipeline_creation_feedback\"",
                "$name": "VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineCreationFeedbackFlagBitsEXT"
              },
              {
                "$name": "VkPipelineCreationFeedbackFlagsEXT"
              },
              {
                "$name": "VkPipelineCreationFeedbackCreateInfoEXT"
              },
              {
                "$name": "VkPipelineCreationFeedbackEXT"
              }
            ]
          },
          "$name": "VK_EXT_pipeline_creation_feedback",
          "$number": 193,
          "$type": "device",
          "$author": "GOOGLE",
          "$contact": "Jean-Francois Roy @jfroy",
          "$specialuse": "devtools",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_194_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_194\"",
                "$name": "VK_GOOGLE_EXTENSION_194_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_194",
          "$number": 194,
          "$author": "GOOGLE",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_195_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_195\"",
                "$name": "VK_GOOGLE_EXTENSION_195_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_195",
          "$number": 195,
          "$author": "GOOGLE",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_196_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_196\"",
                "$name": "VK_GOOGLE_EXTENSION_196_EXTENSION_NAME"
              },
              {
                "$bitpos": 1,
                "$extends": "VkPipelineCacheCreateFlagBits",
                "$name": "VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_196",
          "$number": 196,
          "$author": "GOOGLE",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_driver_properties\"",
                "$name": "VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES"
              },
              {
                "$name": "VK_MAX_DRIVER_NAME_SIZE_KHR"
              },
              {
                "$name": "VK_MAX_DRIVER_INFO_SIZE_KHR"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_AMD_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_AMD_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR",
                "$alias": "VK_DRIVER_ID_AMD_OPEN_SOURCE"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_MESA_RADV_KHR",
                "$alias": "VK_DRIVER_ID_MESA_RADV"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_NVIDIA_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR",
                "$alias": "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR",
                "$alias": "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_IMAGINATION_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_QUALCOMM_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_ARM_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_ARM_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR",
                "$alias": "VK_DRIVER_ID_GOOGLE_SWIFTSHADER"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_GGP_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_GGP_PROPRIETARY"
              },
              {
                "$extends": "VkDriverId",
                "$name": "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR",
                "$alias": "VK_DRIVER_ID_BROADCOM_PROPRIETARY"
              }
            ],
            "type": [
              {
                "$name": "VkDriverIdKHR"
              },
              {
                "$name": "VkConformanceVersionKHR"
              },
              {
                "$name": "VkPhysicalDeviceDriverPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_driver_properties",
          "$number": 197,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_float_controls\"",
                "$name": "VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES"
              },
              {
                "$extends": "VkShaderFloatControlsIndependence",
                "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR",
                "$alias": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY"
              },
              {
                "$extends": "VkShaderFloatControlsIndependence",
                "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR",
                "$alias": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL"
              },
              {
                "$extends": "VkShaderFloatControlsIndependence",
                "$name": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR",
                "$alias": "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFloatControlsPropertiesKHR"
              },
              {
                "$name": "VkShaderFloatControlsIndependenceKHR"
              }
            ]
          },
          "$name": "VK_KHR_shader_float_controls",
          "$number": 198,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Alexander Galazin @alegal-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_shader_subgroup_partitioned\"",
                "$name": "VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME"
              },
              {
                "$bitpos": 8,
                "$extends": "VkSubgroupFeatureFlagBits",
                "$name": "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV"
              }
            ]
          },
          "$name": "VK_NV_shader_subgroup_partitioned",
          "$number": 199,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_depth_stencil_resolve\"",
                "$name": "VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE"
              },
              {
                "$extends": "VkResolveModeFlagBits",
                "$name": "VK_RESOLVE_MODE_NONE_KHR",
                "$alias": "VK_RESOLVE_MODE_NONE"
              },
              {
                "$extends": "VkResolveModeFlagBits",
                "$name": "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR",
                "$alias": "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT"
              },
              {
                "$extends": "VkResolveModeFlagBits",
                "$name": "VK_RESOLVE_MODE_AVERAGE_BIT_KHR",
                "$alias": "VK_RESOLVE_MODE_AVERAGE_BIT"
              },
              {
                "$extends": "VkResolveModeFlagBits",
                "$name": "VK_RESOLVE_MODE_MIN_BIT_KHR",
                "$alias": "VK_RESOLVE_MODE_MIN_BIT"
              },
              {
                "$extends": "VkResolveModeFlagBits",
                "$name": "VK_RESOLVE_MODE_MAX_BIT_KHR",
                "$alias": "VK_RESOLVE_MODE_MAX_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkSubpassDescriptionDepthStencilResolveKHR"
              },
              {
                "$name": "VkPhysicalDeviceDepthStencilResolvePropertiesKHR"
              },
              {
                "$name": "VkResolveModeFlagBitsKHR"
              },
              {
                "$name": "VkResolveModeFlagsKHR"
              }
            ]
          },
          "$name": "VK_KHR_depth_stencil_resolve",
          "$number": 200,
          "$type": "device",
          "$requires": "VK_KHR_create_renderpass2",
          "$author": "KHR",
          "$contact": "Jan-Harald Fredriksen @janharald",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_swapchain_mutable_format\"",
                "$name": "VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME"
              },
              {
                "$bitpos": 2,
                "$extends": "VkSwapchainCreateFlagBitsKHR",
                "$name": "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR"
              }
            ]
          },
          "$name": "VK_KHR_swapchain_mutable_format",
          "$number": 201,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_swapchain,VK_KHR_maintenance2,VK_KHR_image_format_list",
          "$contact": "Daniel Rakos @drakos-arm",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_compute_shader_derivatives\"",
                "$name": "VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV"
            }
          },
          "$name": "VK_NV_compute_shader_derivatives",
          "$number": 202,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_MESH_SHADER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_mesh_shader\"",
                "$name": "VK_NV_MESH_SHADER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_TASK_BIT_NV",
                "$alias": "VK_SHADER_STAGE_TASK_BIT_EXT"
              },
              {
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_MESH_BIT_NV",
                "$alias": "VK_SHADER_STAGE_MESH_BIT_EXT"
              },
              {
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
                "$alias": "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT"
              },
              {
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",
                "$alias": "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdDrawMeshTasksNV"
              },
              {
                "$name": "vkCmdDrawMeshTasksIndirectNV"
              },
              {
                "$name": "vkCmdDrawMeshTasksIndirectCountNV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMeshShaderFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceMeshShaderPropertiesNV"
              },
              {
                "$name": "VkDrawMeshTasksIndirectCommandNV"
              }
            ]
          },
          "$name": "VK_NV_mesh_shader",
          "$number": 203,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Christoph Kubisch @pixeljetstream",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_fragment_shader_barycentric\"",
                "$name": "VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV"
            }
          },
          "$name": "VK_NV_fragment_shader_barycentric",
          "$number": 204,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan",
          "$promotedto": "VK_KHR_fragment_shader_barycentric"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_shader_image_footprint\"",
                "$name": "VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderImageFootprintFeaturesNV"
            }
          },
          "$name": "VK_NV_shader_image_footprint",
          "$number": 205,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_scissor_exclusive\"",
                "$name": "VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineViewportExclusiveScissorStateCreateInfoNV"
              },
              {
                "$name": "VkPhysicalDeviceExclusiveScissorFeaturesNV"
              }
            ],
            "command": {
              "$name": "vkCmdSetExclusiveScissorNV"
            }
          },
          "$name": "VK_NV_scissor_exclusive",
          "$number": 206,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_device_diagnostic_checkpoints\"",
                "$name": "VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkQueueFamilyCheckpointPropertiesNV"
              },
              {
                "$name": "VkCheckpointDataNV"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetCheckpointNV"
              },
              {
                "$name": "vkGetQueueCheckpointDataNV"
              }
            ]
          },
          "$name": "VK_NV_device_diagnostic_checkpoints",
          "$type": "device",
          "$number": 207,
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NVIDIA",
          "$contact": "Nuno Subtil @nsubtil",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_timeline_semaphore\"",
                "$name": "VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO"
              },
              {
                "$extends": "VkSemaphoreType",
                "$name": "VK_SEMAPHORE_TYPE_BINARY_KHR",
                "$alias": "VK_SEMAPHORE_TYPE_BINARY"
              },
              {
                "$extends": "VkSemaphoreType",
                "$name": "VK_SEMAPHORE_TYPE_TIMELINE_KHR",
                "$alias": "VK_SEMAPHORE_TYPE_TIMELINE"
              },
              {
                "$extends": "VkSemaphoreWaitFlagBits",
                "$name": "VK_SEMAPHORE_WAIT_ANY_BIT_KHR",
                "$alias": "VK_SEMAPHORE_WAIT_ANY_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkSemaphoreTypeKHR"
              },
              {
                "$name": "VkPhysicalDeviceTimelineSemaphoreFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceTimelineSemaphorePropertiesKHR"
              },
              {
                "$name": "VkSemaphoreTypeCreateInfoKHR"
              },
              {
                "$name": "VkTimelineSemaphoreSubmitInfoKHR"
              },
              {
                "$name": "VkSemaphoreWaitFlagBitsKHR"
              },
              {
                "$name": "VkSemaphoreWaitFlagsKHR"
              },
              {
                "$name": "VkSemaphoreWaitInfoKHR"
              },
              {
                "$name": "VkSemaphoreSignalInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetSemaphoreCounterValueKHR"
              },
              {
                "$name": "vkWaitSemaphoresKHR"
              },
              {
                "$name": "vkSignalSemaphoreKHR"
              }
            ]
          },
          "$name": "VK_KHR_timeline_semaphore",
          "$number": 208,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_209_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_209\"",
                "$name": "VK_KHR_EXTENSION_209_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_209",
          "$number": 209,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Ian Elliott @ianelliott",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_shader_integer_functions2\"",
                "$name": "VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"
            }
          },
          "$name": "VK_INTEL_shader_integer_functions2",
          "$number": 210,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "INTEL",
          "$contact": "Ian Romanick @ianromanick",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_performance_query\"",
                "$name": "VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL",
                "$alias": "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL"
              }
            ],
            "type": [
              {
                "$name": "VkPerformanceConfigurationTypeINTEL"
              },
              {
                "$name": "VkQueryPoolSamplingModeINTEL"
              },
              {
                "$name": "VkPerformanceOverrideTypeINTEL"
              },
              {
                "$name": "VkPerformanceParameterTypeINTEL"
              },
              {
                "$name": "VkPerformanceValueTypeINTEL"
              },
              {
                "$name": "VkPerformanceValueDataINTEL"
              },
              {
                "$name": "VkPerformanceValueINTEL"
              },
              {
                "$name": "VkInitializePerformanceApiInfoINTEL"
              },
              {
                "$name": "VkQueryPoolCreateInfoINTEL"
              },
              {
                "$name": "VkQueryPoolPerformanceQueryCreateInfoINTEL"
              },
              {
                "$name": "VkPerformanceMarkerInfoINTEL"
              },
              {
                "$name": "VkPerformanceStreamMarkerInfoINTEL"
              },
              {
                "$name": "VkPerformanceOverrideInfoINTEL"
              },
              {
                "$name": "VkPerformanceConfigurationAcquireInfoINTEL"
              },
              {
                "$name": "VkPerformanceConfigurationINTEL"
              }
            ],
            "command": [
              {
                "$name": "vkInitializePerformanceApiINTEL"
              },
              {
                "$name": "vkUninitializePerformanceApiINTEL"
              },
              {
                "$name": "vkCmdSetPerformanceMarkerINTEL"
              },
              {
                "$name": "vkCmdSetPerformanceStreamMarkerINTEL"
              },
              {
                "$name": "vkCmdSetPerformanceOverrideINTEL"
              },
              {
                "$name": "vkAcquirePerformanceConfigurationINTEL"
              },
              {
                "$name": "vkReleasePerformanceConfigurationINTEL"
              },
              {
                "$name": "vkQueueSetPerformanceConfigurationINTEL"
              },
              {
                "$name": "vkGetPerformanceParameterINTEL"
              }
            ]
          },
          "$name": "VK_INTEL_performance_query",
          "$number": 211,
          "$type": "device",
          "$author": "INTEL",
          "$contact": "Lionel Landwerlin @llandwerlin",
          "$specialuse": "devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_vulkan_memory_model\"",
                "$name": "VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR"
            }
          },
          "$name": "VK_KHR_vulkan_memory_model",
          "$number": 212,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_PCI_BUS_INFO_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pci_bus_info\"",
                "$name": "VK_EXT_PCI_BUS_INFO_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePCIBusInfoPropertiesEXT"
            }
          },
          "$name": "VK_EXT_pci_bus_info",
          "$number": 213,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_display_native_hdr\"",
                "$name": "VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"
              },
              {
                "$offset": 0,
                "$extends": "VkColorSpaceKHR",
                "$name": "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD"
              }
            ],
            "type": [
              {
                "$name": "VkDisplayNativeHdrSurfaceCapabilitiesAMD"
              },
              {
                "$name": "VkSwapchainDisplayNativeHdrCreateInfoAMD"
              }
            ],
            "command": {
              "$name": "vkSetLocalDimmingAMD"
            }
          },
          "$name": "VK_AMD_display_native_hdr",
          "$number": 214,
          "$type": "device",
          "$author": "AMD",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_get_surface_capabilities2,VK_KHR_swapchain",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_imagepipe_surface\"",
                "$name": "VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"
              }
            ],
            "type": [
              {
                "$name": "VkImagePipeSurfaceCreateFlagsFUCHSIA"
              },
              {
                "$name": "VkImagePipeSurfaceCreateInfoFUCHSIA"
              }
            ],
            "command": {
              "$name": "vkCreateImagePipeSurfaceFUCHSIA"
            }
          },
          "$name": "VK_FUCHSIA_imagepipe_surface",
          "$number": 215,
          "$type": "instance",
          "$author": "FUCHSIA",
          "$requires": "VK_KHR_surface",
          "$platform": "fuchsia",
          "$contact": "Craig Stout @cdotstout",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_terminate_invocation\"",
                "$name": "VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR"
            }
          },
          "$name": "VK_KHR_shader_terminate_invocation",
          "$number": 216,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_217_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_217\"",
                "$name": "VK_GOOGLE_EXTENSION_217_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_217",
          "$number": 217,
          "$author": "GOOGLE",
          "$contact": "Jesse Hall @critsec",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_METAL_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_metal_surface\"",
                "$name": "VK_EXT_METAL_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkMetalSurfaceCreateFlagsEXT"
              },
              {
                "$name": "VkMetalSurfaceCreateInfoEXT"
              },
              {
                "$name": "CAMetalLayer"
              }
            ],
            "command": {
              "$name": "vkCreateMetalSurfaceEXT"
            }
          },
          "$name": "VK_EXT_metal_surface",
          "$number": 218,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "metal",
          "$supported": "vulkan",
          "$author": "EXT",
          "$contact": "Dzmitry Malyshau @kvark"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 2,
                  "$name": "VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_fragment_density_map\"",
                  "$name": "VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"
                },
                {
                  "$bitpos": 14,
                  "$extends": "VkImageCreateFlagBits",
                  "$name": "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT"
                },
                {
                  "$bitpos": 24,
                  "$extends": "VkAccessFlagBits",
                  "$name": "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT"
                },
                {
                  "$bitpos": 24,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT"
                },
                {
                  "$bitpos": 9,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT"
                },
                {
                  "$bitpos": 0,
                  "$extends": "VkImageViewCreateFlagBits",
                  "$name": "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT"
                },
                {
                  "$bitpos": 23,
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT"
                },
                {
                  "$bitpos": 0,
                  "$extends": "VkSamplerCreateFlagBits",
                  "$name": "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT"
                },
                {
                  "$bitpos": 1,
                  "$extends": "VkSamplerCreateFlagBits",
                  "$name": "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT"
                }
              ],
              "type": [
                {
                  "$name": "VkPhysicalDeviceFragmentDensityMapFeaturesEXT"
                },
                {
                  "$name": "VkPhysicalDeviceFragmentDensityMapPropertiesEXT"
                },
                {
                  "$name": "VkRenderPassFragmentDensityMapCreateInfoEXT"
                }
              ]
            },
            {
              "enum": {
                "$bitpos": 24,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_EXT_fragment_density_map",
          "$number": 219,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Matthew Netsch @mnetsch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_220_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_220\"",
                "$name": "VK_EXT_EXTENSION_220_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_220",
          "$number": 220,
          "$author": "EXT",
          "$contact": "Dzmitry Malyshau @kvark",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_221_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_221\"",
                "$name": "VK_KHR_EXTENSION_221_EXTENSION_NAME"
              },
              {
                "$bitpos": 0,
                "$extends": "VkRenderPassCreateFlagBits",
                "$name": "VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR"
              }
            ]
          },
          "$name": "VK_KHR_extension_221",
          "$number": 221,
          "$author": "KHR",
          "$contact": "Tobias Hector @tobski",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_scalar_block_layout\"",
                "$name": "VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT"
            }
          },
          "$name": "VK_EXT_scalar_block_layout",
          "$number": 222,
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$type": "device",
          "$author": "EXT",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_223_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_223\"",
                "$name": "VK_EXT_EXTENSION_223_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_223",
          "$number": 223,
          "$author": "EXT",
          "$contact": "Tobias Hector @tobski",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_hlsl_functionality1\"",
                "$name": "VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME"
              },
              {
                "$alias": "VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION",
                "$name": "VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION",
                "$comment": "Backwards-compatible alias containing a typo"
              },
              {
                "$alias": "VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME",
                "$name": "VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME",
                "$comment": "Backwards-compatible alias containing a typo"
              }
            ]
          },
          "$name": "VK_GOOGLE_hlsl_functionality1",
          "$number": 224,
          "$type": "device",
          "$author": "GOOGLE",
          "$contact": "Hai Nguyen @chaoticbob",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GOOGLE_DECORATE_STRING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_decorate_string\"",
                "$name": "VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_decorate_string",
          "$number": 225,
          "$type": "device",
          "$author": "GOOGLE",
          "$contact": "Hai Nguyen @chaoticbob",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_subgroup_size_control\"",
                "$name": "VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES"
              },
              {
                "$extends": "VkPipelineShaderStageCreateFlagBits",
                "$name": "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT",
                "$alias": "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT"
              },
              {
                "$extends": "VkPipelineShaderStageCreateFlagBits",
                "$name": "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT",
                "$alias": "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT"
              },
              {
                "$name": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_subgroup_size_control",
          "$number": 226,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "EXT",
          "$contact": "Neil Henning @sheredom",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 2,
                  "$name": "VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_fragment_shading_rate\"",
                  "$name": "VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME"
                },
                {
                  "$offset": 3,
                  "$extends": "VkImageLayout",
                  "$extnumber": 165,
                  "$name": "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkDynamicState",
                  "$name": "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR"
                },
                {
                  "$bitpos": 23,
                  "$extends": "VkAccessFlagBits",
                  "$name": "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"
                },
                {
                  "$bitpos": 8,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                },
                {
                  "$bitpos": 22,
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                },
                {
                  "$bitpos": 30,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                }
              ],
              "type": [
                {
                  "$name": "VkFragmentShadingRateCombinerOpKHR"
                },
                {
                  "$name": "VkFragmentShadingRateAttachmentInfoKHR"
                },
                {
                  "$name": "VkPipelineFragmentShadingRateStateCreateInfoKHR"
                },
                {
                  "$name": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR"
                },
                {
                  "$name": "VkPhysicalDeviceFragmentShadingRatePropertiesKHR"
                },
                {
                  "$name": "VkPhysicalDeviceFragmentShadingRateKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkGetPhysicalDeviceFragmentShadingRatesKHR"
                },
                {
                  "$name": "vkCmdSetFragmentShadingRateKHR"
                }
              ]
            },
            {
              "enum": {
                "$bitpos": 30,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_KHR_fragment_shading_rate",
          "$number": 227,
          "$type": "device",
          "$requires": "VK_KHR_create_renderpass2,VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_core_properties2\"",
                "$name": "VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderCoreProperties2AMD"
              },
              {
                "$name": "VkShaderCorePropertiesFlagBitsAMD"
              },
              {
                "$name": "VkShaderCorePropertiesFlagsAMD"
              }
            ]
          },
          "$name": "VK_AMD_shader_core_properties2",
          "$number": 228,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Matthaeus G. Chajdas @anteru",
          "$supported": "vulkan",
          "$requires": "VK_AMD_shader_core_properties"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_229_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_229\"",
                "$name": "VK_AMD_EXTENSION_229_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_229",
          "$number": 229,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_device_coherent_memory\"",
                "$name": "VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME"
              },
              {
                "$bitpos": 6,
                "$extends": "VkMemoryPropertyFlagBits",
                "$name": "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD"
              },
              {
                "$bitpos": 7,
                "$extends": "VkMemoryPropertyFlagBits",
                "$name": "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceCoherentMemoryFeaturesAMD"
            }
          },
          "$name": "VK_AMD_device_coherent_memory",
          "$number": 230,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_231_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_231\"",
                "$name": "VK_AMD_EXTENSION_231_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_231",
          "$number": 231,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_232_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_232\"",
                "$name": "VK_AMD_EXTENSION_232_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_232",
          "$number": 232,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_233_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_233\"",
                "$name": "VK_AMD_EXTENSION_233_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_233",
          "$number": 233,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_234_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_234\"",
                "$name": "VK_AMD_EXTENSION_234_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_234",
          "$number": 234,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_image_atomic_int64\"",
                "$name": "VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"
            }
          },
          "$name": "VK_EXT_shader_image_atomic_int64",
          "$number": 235,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_236_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_236\"",
                "$name": "VK_AMD_EXTENSION_236_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_236",
          "$number": 236,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SPIRV_1_4_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_spirv_1_4\"",
                "$name": "VK_KHR_SPIRV_1_4_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_spirv_1_4",
          "$number": 237,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_shader_float_controls",
          "$author": "KHR",
          "$contact": "Jesse Hall @critsec",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_MEMORY_BUDGET_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_memory_budget\"",
                "$name": "VK_EXT_MEMORY_BUDGET_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceMemoryBudgetPropertiesEXT"
            }
          },
          "$name": "VK_EXT_memory_budget",
          "$number": 238,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_MEMORY_PRIORITY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_memory_priority\"",
                "$name": "VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMemoryPriorityFeaturesEXT"
              },
              {
                "$name": "VkMemoryPriorityAllocateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_memory_priority",
          "$number": 239,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_surface_protected_capabilities\"",
                "$name": "VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"
              }
            ],
            "type": {
              "$name": "VkSurfaceProtectedCapabilitiesKHR"
            }
          },
          "$name": "VK_KHR_surface_protected_capabilities",
          "$number": 240,
          "$type": "instance",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_get_surface_capabilities2",
          "$author": "KHR",
          "$contact": "Sandeep Shinde @sashinde",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_dedicated_allocation_image_aliasing\"",
                "$name": "VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"
            }
          },
          "$name": "VK_NV_dedicated_allocation_image_aliasing",
          "$number": 241,
          "$type": "device",
          "$requires": "VK_KHR_dedicated_allocation",
          "$author": "NVIDIA",
          "$contact": "Nuno Subtil @nsubtil",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_separate_depth_stencil_layouts\"",
                "$name": "VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR",
                "$alias": "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR",
                "$alias": "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL"
              },
              {
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",
                "$alias": "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR"
              },
              {
                "$name": "VkAttachmentReferenceStencilLayoutKHR"
              },
              {
                "$name": "VkAttachmentDescriptionStencilLayoutKHR"
              }
            ]
          },
          "$name": "VK_KHR_separate_depth_stencil_layouts",
          "$number": 242,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_create_renderpass2",
          "$author": "KHR",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_INTEL_EXTENSION_243_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_extension_243\"",
                "$name": "VK_INTEL_EXTENSION_243_EXTENSION_NAME"
              },
              {
                "$bitpos": 46,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_RESERVED_46_BIT_EXT"
              }
            ]
          },
          "$name": "VK_INTEL_extension_243",
          "$number": 243,
          "$author": "INTEL",
          "$contact": "Slawek Grajewski @sgrajewski",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_MESA_EXTENSION_244_SPEC_VERSION"
              },
              {
                "$value": "\"VK_MESA_extension_244\"",
                "$name": "VK_MESA_EXTENSION_244_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_MESA_extension_244",
          "$number": 244,
          "$author": "MESA",
          "$contact": "Andres Rodriguez @lostgoat",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_buffer_device_address\"",
                "$name": "VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"
              },
              {
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT",
                "$alias": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"
              },
              {
                "$extends": "VkBufferCreateFlagBits",
                "$name": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT",
                "$alias": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT",
                "$alias": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceBufferAddressFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"
              },
              {
                "$name": "VkBufferDeviceAddressInfoEXT"
              },
              {
                "$name": "VkBufferDeviceAddressCreateInfoEXT"
              }
            ],
            "command": {
              "$name": "vkGetBufferDeviceAddressEXT"
            }
          },
          "$name": "VK_EXT_buffer_device_address",
          "$number": 245,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$deprecatedby": "VK_KHR_buffer_device_address",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_EXT_TOOLING_INFO_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_tooling_info\"",
                  "$name": "VK_EXT_TOOLING_INFO_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT",
                  "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES"
                }
              ],
              "type": [
                {
                  "$name": "VkToolPurposeFlagBitsEXT"
                },
                {
                  "$name": "VkToolPurposeFlagsEXT"
                },
                {
                  "$name": "VkPhysicalDeviceToolPropertiesEXT"
                }
              ],
              "command": {
                "$name": "vkGetPhysicalDeviceToolPropertiesEXT"
              }
            },
            {
              "enum": {
                "$bitpos": 5,
                "$extends": "VkToolPurposeFlagBits",
                "$name": "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT"
              },
              "$extension": "VK_EXT_debug_report"
            },
            {
              "enum": {
                "$bitpos": 6,
                "$extends": "VkToolPurposeFlagBits",
                "$name": "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT"
              },
              "$extension": "VK_EXT_debug_marker"
            },
            {
              "enum": [
                {
                  "$bitpos": 5,
                  "$extends": "VkToolPurposeFlagBits",
                  "$name": "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT"
                },
                {
                  "$bitpos": 6,
                  "$extends": "VkToolPurposeFlagBits",
                  "$name": "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT"
                }
              ],
              "$extension": "VK_EXT_debug_utils"
            }
          ],
          "$name": "VK_EXT_tooling_info",
          "$number": 246,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_separate_stencil_usage\"",
                "$name": "VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO"
              }
            ],
            "type": {
              "$name": "VkImageStencilUsageCreateInfoEXT"
            }
          },
          "$name": "VK_EXT_separate_stencil_usage",
          "$number": 247,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Daniel Rakos @drakos-amd",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 5,
                "$name": "VK_EXT_VALIDATION_FEATURES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_validation_features\"",
                "$name": "VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkValidationFeaturesEXT"
              },
              {
                "$name": "VkValidationFeatureEnableEXT"
              },
              {
                "$name": "VkValidationFeatureDisableEXT"
              }
            ]
          },
          "$name": "VK_EXT_validation_features",
          "$number": 248,
          "$type": "instance",
          "$author": "LUNARG",
          "$contact": "Karl Schultz @karl-lunarg",
          "$specialuse": "debugging",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PRESENT_WAIT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_present_wait\"",
                "$name": "VK_KHR_PRESENT_WAIT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR"
              }
            ],
            "command": {
              "$name": "vkWaitForPresentKHR"
            },
            "type": {
              "$name": "VkPhysicalDevicePresentWaitFeaturesKHR"
            }
          },
          "$name": "VK_KHR_present_wait",
          "$number": 249,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_KHR_present_id",
          "$author": "KHR",
          "$contact": "Keith Packard @keithp",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_cooperative_matrix\"",
                "$name": "VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkCooperativeMatrixPropertiesNV"
              },
              {
                "$name": "VkScopeNV"
              },
              {
                "$name": "VkComponentTypeNV"
              },
              {
                "$name": "VkPhysicalDeviceCooperativeMatrixFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceCooperativeMatrixPropertiesNV"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"
            }
          },
          "$name": "VK_NV_cooperative_matrix",
          "$number": 250,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_coverage_reduction_mode\"",
                "$name": "VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceCoverageReductionModeFeaturesNV"
              },
              {
                "$name": "VkPipelineCoverageReductionStateCreateInfoNV"
              },
              {
                "$name": "VkPipelineCoverageReductionStateCreateFlagsNV"
              },
              {
                "$name": "VkCoverageReductionModeNV"
              },
              {
                "$name": "VkFramebufferMixedSamplesCombinationNV"
              }
            ],
            "command": {
              "$name": "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"
            }
          },
          "$name": "VK_NV_coverage_reduction_mode",
          "$number": 251,
          "$requires": "VK_NV_framebuffer_mixed_samples",
          "$type": "device",
          "$author": "NV",
          "$contact": "Kedarnath Thangudu @kthangudu",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_fragment_shader_interlock\"",
                "$name": "VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"
            }
          },
          "$name": "VK_EXT_fragment_shader_interlock",
          "$number": 252,
          "$author": "EXT",
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_ycbcr_image_arrays\"",
                "$name": "VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"
            }
          },
          "$name": "VK_EXT_ycbcr_image_arrays",
          "$number": 253,
          "$type": "device",
          "$requires": "VK_KHR_sampler_ycbcr_conversion",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_uniform_buffer_standard_layout\"",
                "$name": "VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR"
            }
          },
          "$name": "VK_KHR_uniform_buffer_standard_layout",
          "$number": 254,
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$type": "device",
          "$author": "KHR",
          "$contact": "Graeme Leese @gnl21",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PROVOKING_VERTEX_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_provoking_vertex\"",
                "$name": "VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceProvokingVertexFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceProvokingVertexPropertiesEXT"
              },
              {
                "$name": "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"
              },
              {
                "$name": "VkProvokingVertexModeEXT"
              }
            ]
          },
          "$name": "VK_EXT_provoking_vertex",
          "$number": 255,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Jesse Hall @jessehall",
          "$specialuse": "glemulation",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 4,
                  "$name": "VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_full_screen_exclusive\"",
                  "$name": "VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkResult",
                  "$dir": "-",
                  "$name": "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
                }
              ],
              "type": [
                {
                  "$name": "VkFullScreenExclusiveEXT"
                },
                {
                  "$name": "VkSurfaceFullScreenExclusiveInfoEXT"
                },
                {
                  "$name": "VkSurfaceCapabilitiesFullScreenExclusiveEXT"
                }
              ],
              "command": [
                {
                  "$name": "vkGetPhysicalDeviceSurfacePresentModes2EXT"
                },
                {
                  "$name": "vkAcquireFullScreenExclusiveModeEXT"
                },
                {
                  "$name": "vkReleaseFullScreenExclusiveModeEXT"
                }
              ]
            },
            {
              "enum": {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"
              },
              "type": {
                "$name": "VkSurfaceFullScreenExclusiveWin32InfoEXT"
              },
              "$extension": "VK_KHR_win32_surface"
            },
            {
              "command": {
                "$name": "vkGetDeviceGroupSurfacePresentModes2EXT"
              },
              "$extension": "VK_KHR_device_group"
            },
            {
              "command": {
                "$name": "vkGetDeviceGroupSurfacePresentModes2EXT"
              },
              "$feature": "VK_VERSION_1_1"
            }
          ],
          "$name": "VK_EXT_full_screen_exclusive",
          "$number": 256,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_surface,VK_KHR_get_surface_capabilities2,VK_KHR_swapchain",
          "$platform": "win32",
          "$contact": "James Jones @cubanismo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_HEADLESS_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_headless_surface\"",
                "$name": "VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkHeadlessSurfaceCreateFlagsEXT"
              },
              {
                "$name": "VkHeadlessSurfaceCreateInfoEXT"
              }
            ],
            "command": {
              "$name": "vkCreateHeadlessSurfaceEXT"
            }
          },
          "$name": "VK_EXT_headless_surface",
          "$number": 257,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$author": "EXT",
          "$contact": "Lisa Wu @chengtianww",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_buffer_device_address\"",
                "$name": "VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO"
              },
              {
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR",
                "$alias": "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT"
              },
              {
                "$extends": "VkBufferCreateFlagBits",
                "$name": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
                "$alias": "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
              },
              {
                "$extends": "VkMemoryAllocateFlagBits",
                "$name": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR",
                "$alias": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT"
              },
              {
                "$extends": "VkMemoryAllocateFlagBits",
                "$name": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
                "$alias": "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR",
                "$alias": "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceBufferDeviceAddressFeaturesKHR"
              },
              {
                "$name": "VkBufferDeviceAddressInfoKHR"
              },
              {
                "$name": "VkBufferOpaqueCaptureAddressCreateInfoKHR"
              },
              {
                "$name": "VkMemoryOpaqueCaptureAddressAllocateInfoKHR"
              },
              {
                "$name": "VkDeviceMemoryOpaqueCaptureAddressInfoKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetBufferDeviceAddressKHR"
              },
              {
                "$name": "vkGetBufferOpaqueCaptureAddressKHR"
              },
              {
                "$name": "vkGetDeviceMemoryOpaqueCaptureAddressKHR"
              }
            ]
          },
          "$name": "VK_KHR_buffer_device_address",
          "$number": 258,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_259_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_259\"",
                "$name": "VK_EXT_EXTENSION_259_EXTENSION_NAME"
              },
              {
                "$bitpos": 9,
                "$extends": "VkQueueFlagBits",
                "$name": "VK_QUEUE_RESERVED_9_BIT_EXT"
              },
              {
                "$bitpos": 44,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_RESERVED_44_BIT_EXT"
              },
              {
                "$bitpos": 45,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_RESERVED_45_BIT_EXT"
              },
              {
                "$bitpos": 19,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_RESERVED_19_BIT_EXT"
              }
            ]
          },
          "$name": "VK_EXT_extension_259",
          "$number": 259,
          "$author": "EXT",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_LINE_RASTERIZATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_line_rasterization\"",
                "$name": "VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceLineRasterizationFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceLineRasterizationPropertiesEXT"
              },
              {
                "$name": "VkPipelineRasterizationLineStateCreateInfoEXT"
              },
              {
                "$name": "VkLineRasterizationModeEXT"
              }
            ],
            "command": {
              "$name": "vkCmdSetLineStippleEXT"
            }
          },
          "$name": "VK_EXT_line_rasterization",
          "$number": 260,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$specialuse": "cadsupport",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_atomic_float\"",
                "$name": "VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"
            }
          },
          "$name": "VK_EXT_shader_atomic_float",
          "$number": 261,
          "$type": "device",
          "$author": "NV",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_HOST_QUERY_RESET_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_host_query_reset\"",
                "$name": "VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceHostQueryResetFeaturesEXT"
            },
            "command": {
              "$name": "vkResetQueryPoolEXT"
            }
          },
          "$name": "VK_EXT_host_query_reset",
          "$number": 262,
          "$author": "EXT",
          "$contact": "Bas Nieuwenhuizen @BNieuwenhuizen",
          "$supported": "vulkan",
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$promotedto": "VK_VERSION_1_2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_263_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_263\"",
                "$name": "VK_GGP_EXTENSION_263_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_263",
          "$number": 263,
          "$author": "GGP",
          "$contact": "Jean-Francois Roy @jfroy",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_BRCM_EXTENSION_264_SPEC_VERSION"
              },
              {
                "$value": "\"VK_BRCM_extension_264\"",
                "$name": "VK_BRCM_EXTENSION_264_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_BRCM_extension_264",
          "$number": 264,
          "$author": "BRCM",
          "$contact": "Graeme Leese @gnl21",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_BRCM_EXTENSION_265_SPEC_VERSION"
              },
              {
                "$value": "\"VK_BRCM_extension_265\"",
                "$name": "VK_BRCM_EXTENSION_265_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_BRCM_extension_265",
          "$number": 265,
          "$author": "BRCM",
          "$contact": "Graeme Leese @gnl21",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_index_type_uint8\"",
                "$name": "VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkIndexType",
                "$name": "VK_INDEX_TYPE_UINT8_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceIndexTypeUint8FeaturesEXT"
            }
          },
          "$name": "VK_EXT_index_type_uint8",
          "$number": 266,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_267_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_267\"",
                "$name": "VK_EXT_EXTENSION_267_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_267",
          "$number": 267,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extended_dynamic_state\"",
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_CULL_MODE_EXT",
                "$alias": "VK_DYNAMIC_STATE_CULL_MODE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_FRONT_FACE_EXT",
                "$alias": "VK_DYNAMIC_STATE_FRONT_FACE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT",
                "$alias": "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT",
                "$alias": "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT",
                "$alias": "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT",
                "$alias": "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT",
                "$alias": "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_STENCIL_OP_EXT",
                "$alias": "VK_DYNAMIC_STATE_STENCIL_OP"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT",
              "$comment": "Not promoted to 1.3"
            },
            "command": [
              {
                "$name": "vkCmdSetCullModeEXT"
              },
              {
                "$name": "vkCmdSetFrontFaceEXT"
              },
              {
                "$name": "vkCmdSetPrimitiveTopologyEXT"
              },
              {
                "$name": "vkCmdSetViewportWithCountEXT"
              },
              {
                "$name": "vkCmdSetScissorWithCountEXT"
              },
              {
                "$name": "vkCmdBindVertexBuffers2EXT"
              },
              {
                "$name": "vkCmdSetDepthTestEnableEXT"
              },
              {
                "$name": "vkCmdSetDepthWriteEnableEXT"
              },
              {
                "$name": "vkCmdSetDepthCompareOpEXT"
              },
              {
                "$name": "vkCmdSetDepthBoundsTestEnableEXT"
              },
              {
                "$name": "vkCmdSetStencilTestEnableEXT"
              },
              {
                "$name": "vkCmdSetStencilOpEXT"
              }
            ]
          },
          "$name": "VK_EXT_extended_dynamic_state",
          "$number": 268,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 4,
                "$name": "VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_deferred_host_operations\"",
                "$name": "VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR"
              },
              {
                "$extends": "VkResult",
                "$offset": 0,
                "$name": "VK_THREAD_IDLE_KHR"
              },
              {
                "$extends": "VkResult",
                "$offset": 1,
                "$name": "VK_THREAD_DONE_KHR"
              },
              {
                "$extends": "VkResult",
                "$offset": 2,
                "$name": "VK_OPERATION_DEFERRED_KHR"
              },
              {
                "$extends": "VkResult",
                "$offset": 3,
                "$name": "VK_OPERATION_NOT_DEFERRED_KHR"
              }
            ],
            "type": {
              "$name": "VkDeferredOperationKHR"
            },
            "command": [
              {
                "$name": "vkCreateDeferredOperationKHR"
              },
              {
                "$name": "vkDestroyDeferredOperationKHR"
              },
              {
                "$name": "vkGetDeferredOperationMaxConcurrencyKHR"
              },
              {
                "$name": "vkGetDeferredOperationResultKHR"
              },
              {
                "$name": "vkDeferredOperationJoinKHR"
              }
            ]
          },
          "$name": "VK_KHR_deferred_host_operations",
          "$number": 269,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Josh Barczak @jbarczak",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_pipeline_executable_properties\"",
                "$name": "VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"
              },
              {
                "$bitpos": 6,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR"
              },
              {
                "$bitpos": 7,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"
              },
              {
                "$name": "VkPipelineInfoKHR"
              },
              {
                "$name": "VkPipelineExecutablePropertiesKHR"
              },
              {
                "$name": "VkPipelineExecutableInfoKHR"
              },
              {
                "$name": "VkPipelineExecutableStatisticFormatKHR"
              },
              {
                "$name": "VkPipelineExecutableStatisticValueKHR"
              },
              {
                "$name": "VkPipelineExecutableStatisticKHR"
              },
              {
                "$name": "VkPipelineExecutableInternalRepresentationKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetPipelineExecutablePropertiesKHR"
              },
              {
                "$name": "vkGetPipelineExecutableStatisticsKHR"
              },
              {
                "$name": "vkGetPipelineExecutableInternalRepresentationsKHR"
              }
            ]
          },
          "$name": "VK_KHR_pipeline_executable_properties",
          "$number": 270,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Jason Ekstrand @jekstrand",
          "$specialuse": "devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_INTEL_EXTENSION_271_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_extension_271\"",
                "$name": "VK_INTEL_EXTENSION_271_EXTENSION_NAME"
              },
              {
                "$bitpos": 22,
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_RESERVED_22_BIT_EXT"
              }
            ]
          },
          "$name": "VK_INTEL_extension_271",
          "$number": 271,
          "$type": "device",
          "$author": "INTEL",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_INTEL_EXTENSION_272_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_extension_272\"",
                "$name": "VK_INTEL_EXTENSION_272_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_INTEL_extension_272",
          "$number": 272,
          "$type": "device",
          "$author": "INTEL",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_INTEL_EXTENSION_273_SPEC_VERSION"
              },
              {
                "$value": "\"VK_INTEL_extension_273\"",
                "$name": "VK_INTEL_EXTENSION_273_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_INTEL_extension_273",
          "$number": 273,
          "$type": "device",
          "$author": "INTEL",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_atomic_float2\"",
                "$name": "VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"
            }
          },
          "$name": "VK_EXT_shader_atomic_float2",
          "$number": 274,
          "$type": "device",
          "$requires": "VK_EXT_shader_atomic_float",
          "$author": "EXT",
          "$contact": "Jason Ekstrand @jekstrand",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_275_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_275\"",
                "$name": "VK_KHR_EXTENSION_275_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_275",
          "$number": 275,
          "$type": "instance",
          "$author": "KHR",
          "$contact": "Lionel Landwerlin @llandwerlin",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_276_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_276\"",
                "$name": "VK_KHR_EXTENSION_276_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_276",
          "$number": 276,
          "$type": "device",
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_demote_to_helper_invocation\"",
                "$name": "VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT"
            }
          },
          "$name": "VK_EXT_shader_demote_to_helper_invocation",
          "$number": 277,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "comment": {
              "#text": "This extension requires buffer_device_address functionality.\n                    VK_EXT_buffer_device_address is also acceptable, but since it is deprecated the KHR version is preferred."
            },
            "enum": [
              {
                "$value": 3,
                "$name": "VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_device_generated_commands\"",
                "$name": "VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV"
              },
              {
                "$bitpos": 18,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV"
              },
              {
                "$bitpos": 17,
                "$extends": "VkPipelineStageFlagBits",
                "$name": "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV"
              },
              {
                "$bitpos": 17,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV"
              },
              {
                "$bitpos": 18,
                "$extends": "VkAccessFlagBits",
                "$name": "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"
              },
              {
                "$name": "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"
              },
              {
                "$name": "VkGraphicsShaderGroupCreateInfoNV"
              },
              {
                "$name": "VkGraphicsPipelineShaderGroupsCreateInfoNV"
              },
              {
                "$name": "VkBindShaderGroupIndirectCommandNV"
              },
              {
                "$name": "VkBindIndexBufferIndirectCommandNV"
              },
              {
                "$name": "VkBindVertexBufferIndirectCommandNV"
              },
              {
                "$name": "VkSetStateFlagsIndirectCommandNV"
              },
              {
                "$name": "VkIndirectStateFlagBitsNV"
              },
              {
                "$name": "VkIndirectStateFlagsNV"
              },
              {
                "$name": "VkIndirectCommandsLayoutNV"
              },
              {
                "$name": "VkIndirectCommandsTokenTypeNV"
              },
              {
                "$name": "VkIndirectCommandsLayoutUsageFlagBitsNV"
              },
              {
                "$name": "VkIndirectCommandsLayoutUsageFlagsNV"
              },
              {
                "$name": "VkIndirectCommandsStreamNV"
              },
              {
                "$name": "VkIndirectCommandsLayoutTokenNV"
              },
              {
                "$name": "VkIndirectCommandsLayoutCreateInfoNV"
              },
              {
                "$name": "VkGeneratedCommandsInfoNV"
              },
              {
                "$name": "VkGeneratedCommandsMemoryRequirementsInfoNV"
              }
            ],
            "command": [
              {
                "$name": "vkGetGeneratedCommandsMemoryRequirementsNV"
              },
              {
                "$name": "vkCmdPreprocessGeneratedCommandsNV"
              },
              {
                "$name": "vkCmdExecuteGeneratedCommandsNV"
              },
              {
                "$name": "vkCmdBindPipelineShaderGroupNV"
              },
              {
                "$name": "vkCreateIndirectCommandsLayoutNV"
              },
              {
                "$name": "vkDestroyIndirectCommandsLayoutNV"
              }
            ]
          },
          "$name": "VK_NV_device_generated_commands",
          "$number": 278,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_buffer_device_address",
          "$author": "NV",
          "$contact": "Christoph Kubisch @pixeljetstream",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_inherited_viewport_scissor\"",
                "$name": "VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceInheritedViewportScissorFeaturesNV"
              },
              {
                "$name": "VkCommandBufferInheritanceViewportScissorInfoNV"
              }
            ]
          },
          "$name": "VK_NV_inherited_viewport_scissor",
          "$number": 279,
          "$type": "device",
          "$author": "NV",
          "$contact": "David Zhao Akeley @akeley98",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_280_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_280\"",
                "$name": "VK_KHR_EXTENSION_280_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_280",
          "$number": 280,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_integer_dot_product\"",
                "$name": "VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_shader_integer_dot_product",
          "$number": 281,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_texel_buffer_alignment\"",
                "$name": "VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$name": "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_texel_buffer_alignment",
          "$number": 282,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_render_pass_transform\"",
                "$name": "VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM"
              },
              {
                "$bitpos": 1,
                "$extends": "VkRenderPassCreateFlagBits",
                "$name": "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM"
              }
            ],
            "type": [
              {
                "$name": "VkRenderPassTransformBeginInfoQCOM"
              },
              {
                "$name": "VkCommandBufferInheritanceRenderPassTransformInfoQCOM"
              }
            ]
          },
          "$name": "VK_QCOM_render_pass_transform",
          "$number": 283,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_KHR_surface",
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_284_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_284\"",
                "$name": "VK_EXT_EXTENSION_284_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_284",
          "$number": 284,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Samuel Pitoiset @hakzsam",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_device_memory_report\"",
                "$name": "VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"
              },
              {
                "$name": "VkDeviceDeviceMemoryReportCreateInfoEXT"
              },
              {
                "$name": "VkDeviceMemoryReportCallbackDataEXT"
              },
              {
                "$name": "VkDeviceMemoryReportFlagsEXT"
              },
              {
                "$name": "VkDeviceMemoryReportEventTypeEXT"
              },
              {
                "$name": "PFN_vkDeviceMemoryReportCallbackEXT"
              }
            ]
          },
          "$name": "VK_EXT_device_memory_report",
          "$number": 285,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Yiwei Zhang @zhangyiwei",
          "$specialuse": "devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_acquire_drm_display\"",
                "$name": "VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME"
              }
            ],
            "command": [
              {
                "$name": "vkAcquireDrmDisplayEXT"
              },
              {
                "$name": "vkGetDrmDisplayEXT"
              }
            ]
          },
          "$name": "VK_EXT_acquire_drm_display",
          "$number": 286,
          "$type": "instance",
          "$requires": "VK_EXT_direct_mode_display",
          "$author": "EXT",
          "$contact": "Drew DeVault sir@cmpwn.com",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_ROBUSTNESS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_robustness2\"",
                "$name": "VK_EXT_ROBUSTNESS_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceRobustness2FeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceRobustness2PropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_robustness2",
          "$number": 287,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Liam Middlebrook @liam-middlebrook",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 12,
                "$name": "VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_custom_border_color\"",
                "$name": "VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkBorderColor",
                "$name": "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkBorderColor",
                "$name": "VK_BORDER_COLOR_INT_CUSTOM_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkSamplerCustomBorderColorCreateInfoEXT"
              },
              {
                "$name": "VkPhysicalDeviceCustomBorderColorPropertiesEXT"
              },
              {
                "$name": "VkPhysicalDeviceCustomBorderColorFeaturesEXT"
              }
            ]
          },
          "$name": "VK_EXT_custom_border_color",
          "$number": 288,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Liam Middlebrook @liam-middlebrook",
          "$specialuse": "glemulation,d3demulation",
          "$supported": "vulkan"
        },
        {
          "require": {
            "comment": {
              "#text": "These enums are present only to inform downstream\n                    consumers like KTX2. There is no actual Vulkan extension\n                    corresponding to the enums."
            },
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_289_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_289\"",
                "$name": "VK_EXT_EXTENSION_289_EXTENSION_NAME"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 0,
                "$name": "VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 1,
                "$name": "VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 2,
                "$name": "VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 3,
                "$name": "VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 4,
                "$name": "VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 5,
                "$name": "VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 6,
                "$name": "VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 7,
                "$name": "VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 8,
                "$name": "VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 9,
                "$name": "VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 10,
                "$name": "VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 11,
                "$name": "VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 12,
                "$name": "VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 13,
                "$name": "VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 14,
                "$name": "VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 15,
                "$name": "VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 16,
                "$name": "VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 17,
                "$name": "VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 18,
                "$name": "VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 19,
                "$name": "VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 20,
                "$name": "VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 21,
                "$name": "VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 22,
                "$name": "VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 23,
                "$name": "VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 24,
                "$name": "VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 25,
                "$name": "VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 26,
                "$name": "VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 27,
                "$name": "VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 28,
                "$name": "VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT"
              },
              {
                "$extends": "VkFormat",
                "$extnumber": 289,
                "$offset": 29,
                "$name": "VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT"
              }
            ]
          },
          "$name": "VK_EXT_extension_289",
          "$number": 289,
          "$author": "EXT",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_GOOGLE_USER_TYPE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_user_type\"",
                "$name": "VK_GOOGLE_USER_TYPE_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_user_type",
          "$number": 290,
          "$type": "device",
          "$author": "GOOGLE",
          "$contact": "Kaye Mason @chaleur",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_pipeline_library\"",
                "$name": "VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME"
              },
              {
                "$bitpos": 11,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR"
              }
            ],
            "type": {
              "$name": "VkPipelineLibraryCreateInfoKHR"
            }
          },
          "$name": "VK_KHR_pipeline_library",
          "$number": 291,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Christoph Kubisch @pixeljetstream",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_292_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_292\"",
                "$name": "VK_NV_EXTENSION_292_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_292",
          "$number": 292,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_PRESENT_BARRIER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_present_barrier\"",
                "$name": "VK_NV_PRESENT_BARRIER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePresentBarrierFeaturesNV"
              },
              {
                "$name": "VkSurfaceCapabilitiesPresentBarrierNV"
              },
              {
                "$name": "VkSwapchainPresentBarrierCreateInfoNV"
              }
            ]
          },
          "$name": "VK_NV_present_barrier",
          "$number": 293,
          "$type": "device",
          "$author": "NV",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_surface,VK_KHR_get_surface_capabilities2,VK_KHR_swapchain",
          "$contact": "Liya Li @liyli",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_non_semantic_info\"",
                "$name": "VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_shader_non_semantic_info",
          "$number": 294,
          "$type": "device",
          "$author": "KHR",
          "$contact": "Baldur Karlsson @baldurk",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PRESENT_ID_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_present_id\"",
                "$name": "VK_KHR_PRESENT_ID_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PRESENT_ID_KHR"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPresentIdKHR"
              },
              {
                "$name": "VkPhysicalDevicePresentIdFeaturesKHR"
              }
            ]
          },
          "$name": "VK_KHR_present_id",
          "$number": 295,
          "$type": "device",
          "$requires": "VK_KHR_swapchain",
          "$author": "KHR",
          "$contact": "Keith Packard @keithp",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PRIVATE_DATA_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_private_data\"",
                "$name": "VK_EXT_PRIVATE_DATA_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO"
              },
              {
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT",
                "$alias": "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePrivateDataFeaturesEXT"
              },
              {
                "$name": "VkDevicePrivateDataCreateInfoEXT"
              },
              {
                "$name": "VkPrivateDataSlotCreateInfoEXT"
              },
              {
                "$name": "VkPrivateDataSlotEXT"
              },
              {
                "$name": "VkPrivateDataSlotCreateFlagsEXT",
                "$comment": "Will add VkPrivateDataSlotCreateFlagBits when bits are defined in the future"
              }
            ],
            "command": [
              {
                "$name": "vkCreatePrivateDataSlotEXT"
              },
              {
                "$name": "vkDestroyPrivateDataSlotEXT"
              },
              {
                "$name": "vkSetPrivateDataEXT"
              },
              {
                "$name": "vkGetPrivateDataEXT"
              }
            ]
          },
          "$name": "VK_EXT_private_data",
          "$number": 296,
          "$type": "device",
          "$author": "NV",
          "$contact": "Matthew Rusch @mattruschnv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_297_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_297\"",
                "$name": "VK_KHR_EXTENSION_297_EXTENSION_NAME"
              },
              {
                "$bitpos": 3,
                "$extends": "VkPipelineShaderStageCreateFlagBits",
                "$name": "VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR"
              }
            ]
          },
          "$name": "VK_KHR_extension_297",
          "$number": 297,
          "$author": "KHR",
          "$contact": "Corentin Wallez @Kangz",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 3,
                "$name": "VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pipeline_creation_cache_control\"",
                "$name": "VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES"
              },
              {
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT",
                "$alias": "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT"
              },
              {
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT",
                "$alias": "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_PIPELINE_COMPILE_REQUIRED_EXT",
                "$alias": "VK_PIPELINE_COMPILE_REQUIRED"
              },
              {
                "$extends": "VkResult",
                "$name": "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT",
                "$alias": "VK_PIPELINE_COMPILE_REQUIRED"
              },
              {
                "$extends": "VkPipelineCacheCreateFlagBits",
                "$name": "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT",
                "$alias": "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT"
              },
              {
                "$name": "VkPipelineCacheCreateFlagBits",
                "$comment": "This is a temporary workaround for processors not recognizing that VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT above also requires this type"
              }
            ]
          },
          "$name": "VK_EXT_pipeline_creation_cache_control",
          "$number": 298,
          "$type": "device",
          "$author": "AMD",
          "$contact": "Gregory Grebe @grgrebe_amd",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_299_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_299\"",
                "$name": "VK_KHR_EXTENSION_299_EXTENSION_NAME"
              },
              {
                "$bitpos": 2,
                "$extends": "VkMemoryHeapFlagBits",
                "$name": "VK_MEMORY_HEAP_RESERVED_2_BIT_KHR"
              },
              {
                "$extends": "VkPipelineCacheCreateFlagBits",
                "$name": "VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_KHR",
                "$alias": "VK_PIPELINE_CACHE_CREATE_RESERVED_1_BIT_EXT"
              },
              {
                "$bitpos": 2,
                "$extends": "VkPipelineCacheCreateFlagBits",
                "$name": "VK_PIPELINE_CACHE_CREATE_RESERVED_2_BIT_KHR"
              }
            ]
          },
          "$name": "VK_KHR_extension_299",
          "$number": 299,
          "$author": "KHR",
          "$contact": "Mark Bellamy @mark.bellamy_arm",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 7,
                  "$name": "VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_video_encode_queue\"",
                  "$name": "VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME"
                },
                {
                  "$bitpos": 27,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 37,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 38,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 6,
                  "$extends": "VkQueueFlagBits",
                  "$name": "VK_QUEUE_VIDEO_ENCODE_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 1,
                  "$extends": "VkVideoCodingControlFlagBitsKHR",
                  "$name": "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 2,
                  "$extends": "VkVideoCodingControlFlagBitsKHR",
                  "$name": "VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_LAYER_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 15,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 16,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 13,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 14,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 15,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 27,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 28,
                  "$extends": "VkFormatFeatureFlagBits",
                  "$name": "VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 0,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 1,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 2,
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$offset": 0,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_VIDEO_ENCODE_BITSTREAM_BUFFER_RANGE_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                }
              ],
              "type": [
                {
                  "$name": "VkVideoEncodeFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeInfoKHR"
                },
                {
                  "$name": "VkVideoEncodeCapabilityFlagBitsKHR"
                },
                {
                  "$name": "VkVideoEncodeCapabilityFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeCapabilitiesKHR"
                },
                {
                  "$name": "VkVideoEncodeUsageFlagBitsKHR"
                },
                {
                  "$name": "VkVideoEncodeUsageFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeContentFlagBitsKHR"
                },
                {
                  "$name": "VkVideoEncodeContentFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeTuningModeKHR"
                },
                {
                  "$name": "VkVideoEncodeUsageInfoKHR"
                },
                {
                  "$name": "VkVideoEncodeRateControlFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeRateControlModeFlagBitsKHR"
                },
                {
                  "$name": "VkVideoEncodeRateControlModeFlagsKHR"
                },
                {
                  "$name": "VkVideoEncodeRateControlInfoKHR"
                },
                {
                  "$name": "VkVideoEncodeRateControlLayerInfoKHR"
                }
              ],
              "command": {
                "$name": "vkCmdEncodeVideoKHR"
              }
            },
            {
              "enum": [
                {
                  "$bitpos": 27,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                },
                {
                  "$bitpos": 28,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR",
                  "$protect": "VK_ENABLE_BETA_EXTENSIONS"
                }
              ],
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_KHR_video_encode_queue",
          "$number": 300,
          "$type": "device",
          "$requires": "VK_KHR_video_queue,VK_KHR_synchronization2",
          "$author": "KHR",
          "$contact": "Ahmed Abdelkhalek @aabdelkh",
          "$provisional": true,
          "$platform": "provisional",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_device_diagnostics_config\"",
                "$name": "VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDiagnosticsConfigFeaturesNV"
              },
              {
                "$name": "VkDeviceDiagnosticsConfigCreateInfoNV"
              },
              {
                "$name": "VkDeviceDiagnosticsConfigFlagsNV"
              },
              {
                "$name": "VkDeviceDiagnosticsConfigFlagBitsNV"
              }
            ]
          },
          "$name": "VK_NV_device_diagnostics_config",
          "$number": 301,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Kedarnath Thangudu @kthangudu",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_render_pass_store_ops\"",
                "$name": "VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME"
              },
              {
                "$extends": "VkAttachmentStoreOp",
                "$name": "VK_ATTACHMENT_STORE_OP_NONE_QCOM",
                "$alias": "VK_ATTACHMENT_STORE_OP_NONE"
              }
            ]
          },
          "$name": "VK_QCOM_render_pass_store_ops",
          "$number": 302,
          "$type": "device",
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_303_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_303\"",
                "$name": "VK_QCOM_EXTENSION_303_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_303",
          "$number": 303,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_304_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_304\"",
                "$name": "VK_QCOM_EXTENSION_304_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_304",
          "$number": 304,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_305_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_305\"",
                "$name": "VK_QCOM_EXTENSION_305_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_305",
          "$number": 305,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_306_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_306\"",
                "$name": "VK_QCOM_EXTENSION_306_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_306",
          "$number": 306,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_307_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_307\"",
                "$name": "VK_QCOM_EXTENSION_307_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_307",
          "$number": 307,
          "$author": "QCOM",
          "$contact": "Bill Licea-Kane @wwlk",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_308_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_308\"",
                "$name": "VK_NV_EXTENSION_308_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_308",
          "$number": 308,
          "$type": "device",
          "$author": "NV",
          "$contact": "Tristan Lorach @tlorach",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_309_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_309\"",
                "$name": "VK_KHR_EXTENSION_309_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_309",
          "$number": 309,
          "$author": "KHR",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_310_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_310\"",
                "$name": "VK_QCOM_EXTENSION_310_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RESERVED_QCOM"
              }
            ]
          },
          "$name": "VK_QCOM_extension_310",
          "$number": 310,
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_311_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_311\"",
                "$name": "VK_NV_EXTENSION_311_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_311",
          "$number": 311,
          "$author": "NV",
          "$contact": "Charles Hansen @cshansen",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_METAL_OBJECTS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_metal_objects\"",
                "$name": "VK_EXT_METAL_OBJECTS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT"
              },
              {
                "$offset": 11,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkExportMetalObjectTypeFlagBitsEXT"
              },
              {
                "$name": "VkExportMetalObjectTypeFlagsEXT"
              },
              {
                "$name": "VkExportMetalObjectCreateInfoEXT"
              },
              {
                "$name": "VkExportMetalObjectsInfoEXT"
              },
              {
                "$name": "VkExportMetalDeviceInfoEXT"
              },
              {
                "$name": "VkExportMetalCommandQueueInfoEXT"
              },
              {
                "$name": "VkExportMetalBufferInfoEXT"
              },
              {
                "$name": "VkImportMetalBufferInfoEXT"
              },
              {
                "$name": "VkExportMetalTextureInfoEXT"
              },
              {
                "$name": "VkImportMetalTextureInfoEXT"
              },
              {
                "$name": "VkExportMetalIOSurfaceInfoEXT"
              },
              {
                "$name": "VkImportMetalIOSurfaceInfoEXT"
              },
              {
                "$name": "VkExportMetalSharedEventInfoEXT"
              },
              {
                "$name": "VkImportMetalSharedEventInfoEXT"
              },
              {
                "$name": "MTLDevice_id"
              },
              {
                "$name": "MTLCommandQueue_id"
              },
              {
                "$name": "MTLBuffer_id"
              },
              {
                "$name": "MTLTexture_id"
              },
              {
                "$name": "MTLSharedEvent_id"
              },
              {
                "$name": "IOSurfaceRef"
              }
            ],
            "command": {
              "$name": "vkExportMetalObjectsEXT"
            }
          },
          "$name": "VK_EXT_metal_objects",
          "$number": 312,
          "$type": "device",
          "$platform": "metal",
          "$supported": "vulkan",
          "$author": "EXT",
          "$contact": "Bill Hollings @billhollings"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_313_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_313\"",
                "$name": "VK_EXT_EXTENSION_313_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_313",
          "$number": 313,
          "$author": "MVK",
          "$contact": "Bill Hollings @billhollings",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_314_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_314\"",
                "$name": "VK_AMD_EXTENSION_314_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_314",
          "$number": 314,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_synchronization2\"",
                  "$name": "VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_DEPENDENCY_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_SUBMIT_INFO_2"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO"
                },
                {
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR",
                  "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES"
                },
                {
                  "$extends": "VkEventCreateFlagBits",
                  "$name": "VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR",
                  "$alias": "VK_EVENT_CREATE_DEVICE_ONLY_BIT"
                },
                {
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR",
                  "$alias": "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"
                },
                {
                  "$extends": "VkImageLayout",
                  "$name": "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR",
                  "$alias": "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"
                },
                {
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_NONE_KHR",
                  "$alias": "VK_PIPELINE_STAGE_NONE"
                },
                {
                  "$extends": "VkAccessFlagBits",
                  "$name": "VK_ACCESS_NONE_KHR",
                  "$alias": "VK_ACCESS_NONE"
                }
              ],
              "type": [
                {
                  "$name": "VkFlags64"
                },
                {
                  "$name": "VkPipelineStageFlags2KHR"
                },
                {
                  "$name": "VkPipelineStageFlagBits2KHR"
                },
                {
                  "$name": "VkAccessFlags2KHR"
                },
                {
                  "$name": "VkAccessFlagBits2KHR"
                },
                {
                  "$name": "VkMemoryBarrier2KHR"
                },
                {
                  "$name": "VkBufferMemoryBarrier2KHR"
                },
                {
                  "$name": "VkImageMemoryBarrier2KHR"
                },
                {
                  "$name": "VkDependencyInfoKHR"
                },
                {
                  "$name": "VkSubmitInfo2KHR"
                },
                {
                  "$name": "VkSemaphoreSubmitInfoKHR"
                },
                {
                  "$name": "VkCommandBufferSubmitInfoKHR"
                },
                {
                  "$name": "VkSubmitFlagBitsKHR"
                },
                {
                  "$name": "VkSubmitFlagsKHR"
                },
                {
                  "$name": "VkPhysicalDeviceSynchronization2FeaturesKHR"
                }
              ],
              "command": [
                {
                  "$name": "vkCmdSetEvent2KHR"
                },
                {
                  "$name": "vkCmdResetEvent2KHR"
                },
                {
                  "$name": "vkCmdWaitEvents2KHR"
                },
                {
                  "$name": "vkCmdPipelineBarrier2KHR"
                },
                {
                  "$name": "vkCmdWriteTimestamp2KHR"
                },
                {
                  "$name": "vkQueueSubmit2KHR"
                }
              ]
            },
            {
              "enum": [
                {
                  "$bitpos": 24,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT"
                },
                {
                  "$bitpos": 25,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"
                },
                {
                  "$bitpos": 26,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT"
                },
                {
                  "$bitpos": 27,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT"
                }
              ],
              "$extension": "VK_EXT_transform_feedback"
            },
            {
              "enum": [
                {
                  "$bitpos": 18,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT",
                  "$comment": "A pipeline stage for conditional rendering predicate fetch"
                },
                {
                  "$bitpos": 20,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT",
                  "$comment": "read access flag for reading conditional rendering predicate"
                }
              ],
              "$extension": "VK_EXT_conditional_rendering"
            },
            {
              "enum": [
                {
                  "$bitpos": 17,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV"
                },
                {
                  "$bitpos": 17,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV"
                },
                {
                  "$bitpos": 18,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV"
                }
              ],
              "$extension": "VK_NV_device_generated_commands"
            },
            {
              "enum": [
                {
                  "$bitpos": 22,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                },
                {
                  "$bitpos": 23,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"
                }
              ],
              "$extension": "VK_KHR_fragment_shading_rate"
            },
            {
              "enum": [
                {
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV",
                  "$alias": "VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR"
                },
                {
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV",
                  "$alias": "VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"
                }
              ],
              "$extension": "VK_NV_shading_rate_image"
            },
            {
              "enum": [
                {
                  "$bitpos": 25,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"
                },
                {
                  "$bitpos": 21,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR"
                },
                {
                  "$bitpos": 22,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"
                }
              ],
              "$extension": "VK_KHR_acceleration_structure"
            },
            {
              "enum": {
                "$bitpos": 21,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR"
              },
              "$extension": "VK_KHR_ray_tracing_pipeline"
            },
            {
              "enum": [
                {
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV",
                  "$alias": "VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR"
                },
                {
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
                  "$alias": "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"
                },
                {
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV",
                  "$alias": "VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR"
                },
                {
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
                  "$alias": "VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"
                }
              ],
              "$extension": "VK_NV_ray_tracing"
            },
            {
              "enum": [
                {
                  "$bitpos": 23,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT"
                },
                {
                  "$bitpos": 24,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT"
                }
              ],
              "$extension": "VK_EXT_fragment_density_map"
            },
            {
              "enum": {
                "$bitpos": 19,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT"
              },
              "$extension": "VK_EXT_blend_operation_advanced"
            },
            {
              "enum": [
                {
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV",
                  "$alias": "VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT"
                },
                {
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV",
                  "$alias": "VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT"
                }
              ],
              "$extension": "VK_NV_mesh_shader"
            },
            {
              "command": {
                "$name": "vkCmdWriteBufferMarker2AMD"
              },
              "$extension": "VK_AMD_buffer_marker"
            },
            {
              "type": [
                {
                  "$name": "VkQueueFamilyCheckpointProperties2NV"
                },
                {
                  "$name": "VkCheckpointData2NV"
                }
              ],
              "command": {
                "$name": "vkGetQueueCheckpointData2NV"
              },
              "enum": [
                {
                  "$offset": 8,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV"
                },
                {
                  "$offset": 9,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV"
                }
              ],
              "$extension": "VK_NV_device_diagnostic_checkpoints"
            },
            {
              "enum": [
                {
                  "$bitpos": 19,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT"
                },
                {
                  "$bitpos": 20,
                  "$extends": "VkPipelineStageFlagBits2",
                  "$name": "VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT"
                }
              ],
              "$extension": "VK_EXT_mesh_shader"
            }
          ],
          "$name": "VK_KHR_synchronization2",
          "$number": 315,
          "$type": "device",
          "$author": "KHR",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_316_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_316\"",
                "$name": "VK_AMD_EXTENSION_316_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_316",
          "$number": 316,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_descriptor_buffer\"",
                  "$name": "VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT"
                },
                {
                  "$offset": 3,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT"
                },
                {
                  "$offset": 4,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT"
                },
                {
                  "$offset": 5,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
                },
                {
                  "$offset": 6,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
                },
                {
                  "$offset": 7,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
                },
                {
                  "$offset": 8,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
                },
                {
                  "$offset": 10,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT"
                },
                {
                  "$offset": 11,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT"
                },
                {
                  "$offset": 12,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT"
                },
                {
                  "$bitpos": 4,
                  "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                  "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT"
                },
                {
                  "$bitpos": 5,
                  "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                  "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT"
                },
                {
                  "$bitpos": 21,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT"
                },
                {
                  "$bitpos": 22,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT"
                },
                {
                  "$bitpos": 26,
                  "$extends": "VkBufferUsageFlagBits",
                  "$name": "VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT"
                },
                {
                  "$bitpos": 5,
                  "$extends": "VkBufferCreateFlagBits",
                  "$name": "VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
                },
                {
                  "$bitpos": 16,
                  "$extends": "VkImageCreateFlagBits",
                  "$name": "VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
                },
                {
                  "$bitpos": 2,
                  "$extends": "VkImageViewCreateFlagBits",
                  "$name": "VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
                },
                {
                  "$bitpos": 3,
                  "$extends": "VkSamplerCreateFlagBits",
                  "$name": "VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
                },
                {
                  "$bitpos": 3,
                  "$extends": "VkAccelerationStructureCreateFlagBitsKHR",
                  "$name": "VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
                },
                {
                  "$bitpos": 41,
                  "$extends": "VkAccessFlagBits2",
                  "$name": "VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT"
                },
                {
                  "$bitpos": 29,
                  "$extends": "VkPipelineCreateFlagBits",
                  "$name": "VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT"
                }
              ],
              "type": [
                {
                  "$name": "VkPhysicalDeviceDescriptorBufferPropertiesEXT"
                },
                {
                  "$name": "VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"
                },
                {
                  "$name": "VkPhysicalDeviceDescriptorBufferFeaturesEXT"
                },
                {
                  "$name": "VkDescriptorAddressInfoEXT"
                },
                {
                  "$name": "VkDescriptorBufferBindingInfoEXT"
                },
                {
                  "$name": "VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"
                },
                {
                  "$name": "VkDescriptorDataEXT"
                },
                {
                  "$name": "VkDescriptorGetInfoEXT"
                },
                {
                  "$name": "VkBufferCaptureDescriptorDataInfoEXT"
                },
                {
                  "$name": "VkImageCaptureDescriptorDataInfoEXT"
                },
                {
                  "$name": "VkImageViewCaptureDescriptorDataInfoEXT"
                },
                {
                  "$name": "VkSamplerCaptureDescriptorDataInfoEXT"
                },
                {
                  "$name": "VkOpaqueCaptureDescriptorDataCreateInfoEXT"
                }
              ],
              "command": [
                {
                  "$name": "vkGetDescriptorSetLayoutSizeEXT"
                },
                {
                  "$name": "vkGetDescriptorSetLayoutBindingOffsetEXT"
                },
                {
                  "$name": "vkGetDescriptorEXT"
                },
                {
                  "$name": "vkCmdBindDescriptorBuffersEXT"
                },
                {
                  "$name": "vkCmdSetDescriptorBufferOffsetsEXT"
                },
                {
                  "$name": "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"
                },
                {
                  "$name": "vkGetBufferOpaqueCaptureDescriptorDataEXT"
                },
                {
                  "$name": "vkGetImageOpaqueCaptureDescriptorDataEXT"
                },
                {
                  "$name": "vkGetImageViewOpaqueCaptureDescriptorDataEXT"
                },
                {
                  "$name": "vkGetSamplerOpaqueCaptureDescriptorDataEXT"
                }
              ]
            },
            {
              "enum": {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT"
              },
              "type": {
                "$name": "VkAccelerationStructureCaptureDescriptorDataInfoEXT"
              },
              "command": {
                "$name": "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"
              },
              "$extension": "VK_KHR_acceleration_structure,VK_NV_ray_tracing"
            }
          ],
          "$name": "VK_EXT_descriptor_buffer",
          "$number": 317,
          "$type": "device",
          "$author": "EXT",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_buffer_device_address,VK_KHR_synchronization2,VK_EXT_descriptor_indexing",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_318_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_318\"",
                "$name": "VK_AMD_EXTENSION_318_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_318",
          "$number": 318,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_319_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_319\"",
                "$name": "VK_AMD_EXTENSION_319_EXTENSION_NAME"
              },
              {
                "$bitpos": 3,
                "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_RESERVED_3_BIT_AMD"
              },
              {
                "$bitpos": 0,
                "$extends": "VkPipelineLayoutCreateFlagBits",
                "$name": "VK_PIPELINE_LAYOUT_CREATE_RESERVED_0_BIT_AMD"
              }
            ]
          },
          "$name": "VK_AMD_extension_319",
          "$number": 319,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_320_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_320\"",
                "$name": "VK_AMD_EXTENSION_320_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_320",
          "$number": 320,
          "$author": "AMD",
          "$contact": "Martin Dinkov @mdinkov",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_graphics_pipeline_library\"",
                "$name": "VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT"
              },
              {
                "$bitpos": 23,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT"
              },
              {
                "$bitpos": 10,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkPipelineLayoutCreateFlagBits",
                "$name": "VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"
              },
              {
                "$name": "VkGraphicsPipelineLibraryCreateInfoEXT"
              },
              {
                "$name": "VkGraphicsPipelineLibraryFlagBitsEXT"
              },
              {
                "$name": "VkGraphicsPipelineLibraryFlagsEXT"
              },
              {
                "$name": "VkPipelineLayoutCreateFlagBits"
              }
            ]
          },
          "$name": "VK_EXT_graphics_pipeline_library",
          "$number": 321,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_pipeline_library",
          "$author": "AMD",
          "$contact": "Tobias Hector @tobski",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_shader_early_and_late_fragment_tests\"",
                "$name": "VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"
            }
          },
          "$name": "VK_AMD_shader_early_and_late_fragment_tests",
          "$number": 322,
          "$author": "EXT",
          "$contact": "Tobias Hector @tobski",
          "$type": "device",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_fragment_shader_barycentric\"",
                "$name": "VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 204,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"
              }
            ]
          },
          "$name": "VK_KHR_fragment_shader_barycentric",
          "$number": 323,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Stu Smith",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_shader_subgroup_uniform_control_flow\"",
                "$name": "VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"
            }
          },
          "$name": "VK_KHR_shader_subgroup_uniform_control_flow",
          "$number": 324,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "KHR",
          "$contact": "Alan Baker @alan-baker",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_325_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_325\"",
                "$name": "VK_KHR_EXTENSION_325_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_325",
          "$number": 325,
          "$author": "KHR",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_zero_initialize_workgroup_memory\"",
                "$name": "VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR"
            }
          },
          "$name": "VK_KHR_zero_initialize_workgroup_memory",
          "$number": 326,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Alan Baker @alan-baker",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_fragment_shading_rate_enums\"",
                "$name": "VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"
              },
              {
                "$name": "VkPipelineFragmentShadingRateEnumStateCreateInfoNV"
              },
              {
                "$name": "VkFragmentShadingRateNV"
              },
              {
                "$name": "VkFragmentShadingRateTypeNV"
              }
            ],
            "command": {
              "$name": "vkCmdSetFragmentShadingRateEnumNV"
            }
          },
          "$name": "VK_NV_fragment_shading_rate_enums",
          "$number": 327,
          "$type": "device",
          "$requires": "VK_KHR_fragment_shading_rate",
          "$author": "NV",
          "$contact": "Pat Brown @nvpbrown",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_ray_tracing_motion_blur\"",
                "$name": "VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV"
              },
              {
                "$bitpos": 5,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV"
              },
              {
                "$bitpos": 2,
                "$extends": "VkAccelerationStructureCreateFlagBitsKHR",
                "$name": "VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV"
              },
              {
                "$bitpos": 20,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV"
              }
            ],
            "type": [
              {
                "$name": "VkAccelerationStructureGeometryMotionTrianglesDataNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInfoNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInstanceNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInstanceDataNV"
              },
              {
                "$name": "VkAccelerationStructureMatrixMotionInstanceNV"
              },
              {
                "$name": "VkAccelerationStructureSRTMotionInstanceNV"
              },
              {
                "$name": "VkSRTDataNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInstanceTypeNV"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInfoFlagsNV"
              },
              {
                "$name": "VkAccelerationStructureMotionInstanceFlagsNV"
              }
            ]
          },
          "$name": "VK_NV_ray_tracing_motion_blur",
          "$number": 328,
          "$type": "device",
          "$requires": "VK_KHR_ray_tracing_pipeline",
          "$author": "NV",
          "$contact": "Eric Werness",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_EXT_MESH_SHADER_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_mesh_shader\"",
                  "$name": "VK_EXT_MESH_SHADER_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT"
                },
                {
                  "$bitpos": 6,
                  "$extends": "VkShaderStageFlagBits",
                  "$name": "VK_SHADER_STAGE_TASK_BIT_EXT"
                },
                {
                  "$bitpos": 7,
                  "$extends": "VkShaderStageFlagBits",
                  "$name": "VK_SHADER_STAGE_MESH_BIT_EXT"
                },
                {
                  "$bitpos": 19,
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT"
                },
                {
                  "$bitpos": 20,
                  "$extends": "VkPipelineStageFlagBits",
                  "$name": "VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT"
                },
                {
                  "$offset": 0,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT"
                },
                {
                  "$bitpos": 11,
                  "$extends": "VkQueryPipelineStatisticFlagBits",
                  "$name": "VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT"
                },
                {
                  "$bitpos": 12,
                  "$extends": "VkQueryPipelineStatisticFlagBits",
                  "$name": "VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT"
                }
              ],
              "command": [
                {
                  "$name": "vkCmdDrawMeshTasksEXT"
                },
                {
                  "$name": "vkCmdDrawMeshTasksIndirectEXT"
                },
                {
                  "$name": "vkCmdDrawMeshTasksIndirectCountEXT"
                }
              ],
              "type": [
                {
                  "$name": "VkPhysicalDeviceMeshShaderFeaturesEXT"
                },
                {
                  "$name": "VkPhysicalDeviceMeshShaderPropertiesEXT"
                },
                {
                  "$name": "VkDrawMeshTasksIndirectCommandEXT"
                }
              ]
            },
            {
              "enum": {
                "$offset": 0,
                "$extends": "VkIndirectCommandsTokenTypeNV",
                "$name": "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV"
              },
              "$extension": "VK_NV_device_generated_commands"
            }
          ],
          "$name": "VK_EXT_mesh_shader",
          "$number": 329,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_spirv_1_4",
          "$author": "EXT",
          "$sortorder": 1,
          "$contact": "Christoph Kubisch @pixeljetstream",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_330_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_330\"",
                "$name": "VK_NV_EXTENSION_330_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_330",
          "$number": 330,
          "$author": "NV",
          "$contact": "Liam Middlebrook @liam-middlebrook",
          "$supported": "disabled"
        },
        {
          "require": {
            "comment": {
              "#text": "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT and\n                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT\n                    were not promoted to Vulkan 1.3."
            },
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_ycbcr_2plane_444_formats\"",
                "$name": "VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT",
                "$alias": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT",
                "$alias": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT",
                "$alias": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT",
                "$alias": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"
            }
          },
          "$name": "VK_EXT_ycbcr_2plane_444_formats",
          "$number": 331,
          "$type": "device",
          "$requires": "VK_KHR_sampler_ycbcr_conversion",
          "$author": "EXT",
          "$contact": "Tony Zlatinski @tzlatinski",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_332_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_332\"",
                "$name": "VK_NV_EXTENSION_332_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_332",
          "$number": 332,
          "$author": "NV",
          "$contact": "Tony Zlatinski @tzlatinski",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_fragment_density_map2\"",
                "$name": "VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkImageViewCreateFlagBits",
                "$name": "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_fragment_density_map2",
          "$number": 333,
          "$type": "device",
          "$requires": "VK_EXT_fragment_density_map",
          "$author": "EXT",
          "$contact": "Matthew Netsch @mnetsch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_rotated_copy_commands\"",
                "$name": "VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM"
              }
            ],
            "type": {
              "$name": "VkCopyCommandTransformInfoQCOM"
            }
          },
          "$name": "VK_QCOM_rotated_copy_commands",
          "$number": 334,
          "$type": "device",
          "$requires": "VK_KHR_swapchain,VK_KHR_copy_commands2",
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_335_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_335\"",
                "$name": "VK_KHR_EXTENSION_335_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_335",
          "$number": 335,
          "$author": "KHR",
          "$contact": "Mark Bellamy @mark.bellamy_arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_image_robustness\"",
                "$name": "VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceImageRobustnessFeaturesEXT"
            }
          },
          "$name": "VK_EXT_image_robustness",
          "$number": 336,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Graeme Leese @gnl21",
          "$supported": "vulkan",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_workgroup_memory_explicit_layout\"",
                "$name": "VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"
            }
          },
          "$name": "VK_KHR_workgroup_memory_explicit_layout",
          "$number": 337,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "KHR",
          "$contact": "Caio Marcelo de Oliveira Filho @cmarcelo",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_COPY_COMMANDS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_copy_commands2\"",
                "$name": "VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_COPY_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_COPY_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_BLIT_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR",
                "$alias": "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2"
              }
            ],
            "type": [
              {
                "$name": "VkCopyBufferInfo2KHR"
              },
              {
                "$name": "VkCopyImageInfo2KHR"
              },
              {
                "$name": "VkCopyBufferToImageInfo2KHR"
              },
              {
                "$name": "VkCopyImageToBufferInfo2KHR"
              },
              {
                "$name": "VkBlitImageInfo2KHR"
              },
              {
                "$name": "VkResolveImageInfo2KHR"
              },
              {
                "$name": "VkBufferCopy2KHR"
              },
              {
                "$name": "VkImageCopy2KHR"
              },
              {
                "$name": "VkImageBlit2KHR"
              },
              {
                "$name": "VkBufferImageCopy2KHR"
              },
              {
                "$name": "VkImageResolve2KHR"
              }
            ],
            "command": [
              {
                "$name": "vkCmdCopyBuffer2KHR"
              },
              {
                "$name": "vkCmdCopyImage2KHR"
              },
              {
                "$name": "vkCmdCopyBufferToImage2KHR"
              },
              {
                "$name": "vkCmdCopyImageToBuffer2KHR"
              },
              {
                "$name": "vkCmdBlitImage2KHR"
              },
              {
                "$name": "vkCmdResolveImage2KHR"
              }
            ]
          },
          "$name": "VK_KHR_copy_commands2",
          "$number": 338,
          "$author": "KHR",
          "$type": "device",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_image_compression_control\"",
                "$name": "VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT"
              },
              {
                "$offset": 0,
                "$dir": "-",
                "$extends": "VkResult",
                "$name": "VK_ERROR_COMPRESSION_EXHAUSTED_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceImageCompressionControlFeaturesEXT"
              },
              {
                "$name": "VkImageCompressionControlEXT"
              },
              {
                "$name": "VkSubresourceLayout2EXT"
              },
              {
                "$name": "VkImageSubresource2EXT"
              },
              {
                "$name": "VkImageCompressionPropertiesEXT"
              },
              {
                "$name": "VkImageCompressionFlagBitsEXT"
              },
              {
                "$name": "VkImageCompressionFlagsEXT"
              },
              {
                "$name": "VkImageCompressionFixedRateFlagBitsEXT"
              },
              {
                "$name": "VkImageCompressionFixedRateFlagsEXT"
              }
            ],
            "command": {
              "$name": "vkGetImageSubresourceLayout2EXT"
            }
          },
          "$name": "VK_EXT_image_compression_control",
          "$number": 339,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_attachment_feedback_loop_layout\"",
                "$name": "VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkImageLayout",
                "$name": "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT"
              },
              {
                "$bitpos": 19,
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"
              },
              {
                "$bitpos": 25,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"
              },
              {
                "$bitpos": 26,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT"
              },
              {
                "$bitpos": 3,
                "$extends": "VkDependencyFlagBits",
                "$name": "VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT",
                "$comment": "Dependency may be a feedback loop"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"
            }
          },
          "$name": "VK_EXT_attachment_feedback_loop_layout",
          "$number": 340,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton",
          "$supported": "vulkan"
        },
        {
          "require": {
            "comment": {
              "#text": "VkPhysicalDevice4444FormatsFeaturesEXT and\n                    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT\n                    were not promoted to Vulkan 1.3."
            },
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_4444_FORMATS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_4444_formats\"",
                "$name": "VK_EXT_4444_FORMATS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT",
                "$alias": "VK_FORMAT_A4R4G4B4_UNORM_PACK16"
              },
              {
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT",
                "$alias": "VK_FORMAT_A4B4G4R4_UNORM_PACK16"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevice4444FormatsFeaturesEXT"
            }
          },
          "$name": "VK_EXT_4444_formats",
          "$number": 341,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEVICE_FAULT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_device_fault\"",
                "$name": "VK_EXT_DEVICE_FAULT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFaultFeaturesEXT"
              },
              {
                "$name": "VkDeviceFaultCountsEXT"
              },
              {
                "$name": "VkDeviceFaultInfoEXT"
              },
              {
                "$name": "VkDeviceFaultAddressInfoEXT"
              },
              {
                "$name": "VkDeviceFaultAddressTypeEXT"
              },
              {
                "$name": "VkDeviceFaultVendorInfoEXT"
              },
              {
                "$name": "VkDeviceFaultVendorBinaryHeaderVersionEXT"
              },
              {
                "$name": "VkDeviceFaultVendorBinaryHeaderVersionOneEXT"
              }
            ],
            "command": {
              "$name": "vkGetDeviceFaultInfoEXT"
            }
          },
          "$name": "VK_EXT_device_fault",
          "$number": 342,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_rasterization_order_attachment_access\"",
                "$name": "VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"
              },
              {
                "$extends": "VkPipelineColorBlendStateCreateFlagBits",
                "$name": "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM",
                "$alias": "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT"
              },
              {
                "$extends": "VkPipelineDepthStencilStateCreateFlagBits",
                "$name": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM",
                "$alias": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"
              },
              {
                "$extends": "VkPipelineDepthStencilStateCreateFlagBits",
                "$name": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM",
                "$alias": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"
              },
              {
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM",
                "$alias": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT"
              },
              {
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM",
                "$alias": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"
              },
              {
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM",
                "$alias": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM"
            }
          },
          "$name": "VK_ARM_rasterization_order_attachment_access",
          "$number": 343,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan",
          "$promotedto": "VK_EXT_rasterization_order_attachment_access"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_344_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_344\"",
                "$name": "VK_ARM_EXTENSION_344_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_344",
          "$number": 344,
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_rgba10x6_formats\"",
                "$name": "VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"
            }
          },
          "$name": "VK_EXT_rgba10x6_formats",
          "$number": 345,
          "$type": "device",
          "$requires": "VK_KHR_sampler_ycbcr_conversion",
          "$author": "EXT",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_acquire_winrt_display\"",
                "$name": "VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME"
              }
            ],
            "command": [
              {
                "$name": "vkAcquireWinrtDisplayNV"
              },
              {
                "$name": "vkGetWinrtDisplayNV"
              }
            ]
          },
          "$name": "VK_NV_acquire_winrt_display",
          "$number": 346,
          "$type": "device",
          "$requires": "VK_EXT_direct_mode_display",
          "$author": "NV",
          "$contact": "Jeff Juliano @jjuliano",
          "$platform": "win32",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_directfb_surface\"",
                "$name": "VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkDirectFBSurfaceCreateFlagsEXT"
              },
              {
                "$name": "VkDirectFBSurfaceCreateInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCreateDirectFBSurfaceEXT"
              },
              {
                "$name": "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"
              }
            ]
          },
          "$name": "VK_EXT_directfb_surface",
          "$number": 347,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "directfb",
          "$supported": "vulkan",
          "$author": "EXT",
          "$contact": "Nicolas Caramelli @caramelli"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_350_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_350\"",
                "$name": "VK_KHR_EXTENSION_350_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_350",
          "$number": 350,
          "$author": "KHR",
          "$contact": "Mark Bellamy @mark.bellamy_arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_351_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_351\"",
                "$name": "VK_NV_EXTENSION_351_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_351",
          "$number": 351,
          "$author": "NV",
          "$contact": "Liam Middlebrook @liam-middlebrook",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_VALVE_mutable_descriptor_type\"",
                "$name": "VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE",
                "$alias": "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"
              },
              {
                "$extends": "VkDescriptorType",
                "$name": "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE",
                "$alias": "VK_DESCRIPTOR_TYPE_MUTABLE_EXT"
              },
              {
                "$extends": "VkDescriptorPoolCreateFlagBits",
                "$name": "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE",
                "$alias": "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT"
              },
              {
                "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE",
                "$alias": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE"
              },
              {
                "$name": "VkMutableDescriptorTypeListVALVE"
              },
              {
                "$name": "VkMutableDescriptorTypeCreateInfoVALVE"
              }
            ]
          },
          "$name": "VK_VALVE_mutable_descriptor_type",
          "$number": 352,
          "$type": "device",
          "$supported": "vulkan",
          "$author": "VALVE",
          "$contact": "Joshua Ashton @Joshua-Ashton,Hans-Kristian Arntzen @HansKristian-Work",
          "$specialuse": "d3demulation",
          "$requires": "VK_KHR_maintenance3",
          "$promotedto": "VK_EXT_mutable_descriptor_type"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_vertex_input_dynamic_state\"",
                "$name": "VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"
              },
              {
                "$name": "VkVertexInputBindingDescription2EXT"
              },
              {
                "$name": "VkVertexInputAttributeDescription2EXT"
              }
            ],
            "command": {
              "$name": "vkCmdSetVertexInputEXT"
            }
          },
          "$name": "VK_EXT_vertex_input_dynamic_state",
          "$number": 353,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_physical_device_drm\"",
                "$name": "VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceDrmPropertiesEXT"
            }
          },
          "$name": "VK_EXT_physical_device_drm",
          "$number": 354,
          "$author": "EXT",
          "$type": "device",
          "$contact": "Simon Ser @emersion",
          "$supported": "vulkan",
          "$requires": "VK_KHR_get_physical_device_properties2"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_device_address_binding_report\"",
                "$name": "VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT"
              },
              {
                "$bitpos": 3,
                "$extends": "VkDebugUtilsMessageTypeFlagBitsEXT",
                "$name": "VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceAddressBindingReportFeaturesEXT"
              },
              {
                "$name": "VkDeviceAddressBindingCallbackDataEXT"
              },
              {
                "$name": "VkDeviceAddressBindingFlagsEXT"
              },
              {
                "$name": "VkDeviceAddressBindingFlagBitsEXT"
              },
              {
                "$name": "VkDeviceAddressBindingTypeEXT"
              }
            ]
          },
          "$name": "VK_EXT_device_address_binding_report",
          "$number": 355,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_EXT_debug_utils",
          "$author": "EXT",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$specialuse": "debugging,devtools",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_depth_clip_control\"",
                "$name": "VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDepthClipControlFeaturesEXT"
              },
              {
                "$name": "VkPipelineViewportDepthClipControlCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_depth_clip_control",
          "$number": 356,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_primitive_topology_list_restart\"",
                "$name": "VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"
            }
          },
          "$name": "VK_EXT_primitive_topology_list_restart",
          "$number": 357,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_358_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_358\"",
                "$name": "VK_KHR_EXTENSION_358_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_358",
          "$number": 358,
          "$author": "KHR",
          "$contact": "Jeff Bolz @jeffbolznv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_359_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_359\"",
                "$name": "VK_EXT_EXTENSION_359_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_359",
          "$number": 359,
          "$author": "EXT",
          "$contact": "Bill Hollings @billhollings",
          "$supported": "disabled",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_360_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_360\"",
                "$name": "VK_EXT_EXTENSION_360_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_360",
          "$number": 360,
          "$author": "EXT",
          "$contact": "Bill Hollings @billhollings",
          "$supported": "disabled",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_format_feature_flags2\"",
                "$name": "VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR",
                "$alias": "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3"
              }
            ],
            "type": [
              {
                "$name": "VkFormatFeatureFlags2KHR"
              },
              {
                "$name": "VkFormatFeatureFlagBits2KHR"
              },
              {
                "$name": "VkFormatProperties3KHR"
              }
            ]
          },
          "$name": "VK_KHR_format_feature_flags2",
          "$number": 361,
          "$author": "KHR",
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$contact": "Lionel Landwerlin @llandwerlin",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_362_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_362\"",
                "$name": "VK_EXT_EXTENSION_362_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_362",
          "$number": 362,
          "$author": "EXT",
          "$contact": "Lionel Duc @nvlduc",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_363_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_363\"",
                "$name": "VK_EXT_EXTENSION_363_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_363",
          "$number": 363,
          "$author": "EXT",
          "$contact": "Kaye Mason @chaleur",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_FUCHSIA_EXTENSION_364_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_extension_364\"",
                "$name": "VK_FUCHSIA_EXTENSION_364_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_FUCHSIA_extension_364",
          "$number": 364,
          "$author": "FUCHSIA",
          "$contact": "Craig Stout @cdotstout",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_FUCHSIA_EXTERNAL_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_external_memory\"",
                "$name": "VK_FUCHSIA_EXTERNAL_MEMORY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
              },
              {
                "$bitpos": 11,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA"
              }
            ],
            "type": [
              {
                "$name": "VkImportMemoryZirconHandleInfoFUCHSIA"
              },
              {
                "$name": "VkMemoryZirconHandlePropertiesFUCHSIA"
              },
              {
                "$name": "VkMemoryGetZirconHandleInfoFUCHSIA"
              }
            ],
            "command": [
              {
                "$name": "vkGetMemoryZirconHandleFUCHSIA"
              },
              {
                "$name": "vkGetMemoryZirconHandlePropertiesFUCHSIA"
              }
            ]
          },
          "$name": "VK_FUCHSIA_external_memory",
          "$number": 365,
          "$type": "device",
          "$requires": "VK_KHR_external_memory_capabilities,VK_KHR_external_memory",
          "$author": "FUCHSIA",
          "$contact": "John Rosasco @rosasco",
          "$platform": "fuchsia",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_FUCHSIA_EXTERNAL_SEMAPHORE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_external_semaphore\"",
                "$name": "VK_FUCHSIA_EXTERNAL_SEMAPHORE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA"
              },
              {
                "$bitpos": 7,
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA"
              }
            ],
            "type": [
              {
                "$name": "VkImportSemaphoreZirconHandleInfoFUCHSIA"
              },
              {
                "$name": "VkSemaphoreGetZirconHandleInfoFUCHSIA"
              }
            ],
            "command": [
              {
                "$name": "vkImportSemaphoreZirconHandleFUCHSIA"
              },
              {
                "$name": "vkGetSemaphoreZirconHandleFUCHSIA"
              }
            ]
          },
          "$name": "VK_FUCHSIA_external_semaphore",
          "$number": 366,
          "$type": "device",
          "$requires": "VK_KHR_external_semaphore_capabilities,VK_KHR_external_semaphore",
          "$author": "FUCHSIA",
          "$contact": "John Rosasco @rosasco",
          "$platform": "fuchsia",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_FUCHSIA_BUFFER_COLLECTION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_buffer_collection\"",
                "$name": "VK_FUCHSIA_BUFFER_COLLECTION_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA",
                "$comment": "VkBufferCollectionFUCHSIA"
              },
              {
                "$offset": 0,
                "$extends": "VkDebugReportObjectTypeEXT",
                "$name": "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA"
              }
            ],
            "type": [
              {
                "$name": "VkBufferCollectionFUCHSIA"
              },
              {
                "$name": "VkBufferCollectionCreateInfoFUCHSIA"
              },
              {
                "$name": "VkImportMemoryBufferCollectionFUCHSIA"
              },
              {
                "$name": "VkBufferCollectionImageCreateInfoFUCHSIA"
              },
              {
                "$name": "VkBufferConstraintsInfoFUCHSIA"
              },
              {
                "$name": "VkBufferCollectionBufferCreateInfoFUCHSIA"
              },
              {
                "$name": "VkBufferCollectionPropertiesFUCHSIA"
              },
              {
                "$name": "VkImageFormatConstraintsFlagsFUCHSIA",
                "$comment": "Will add VkImageFormatConstraintsFlagBitsFUCHSIA when bits are defined in the future"
              },
              {
                "$name": "VkSysmemColorSpaceFUCHSIA"
              },
              {
                "$name": "VkImageConstraintsInfoFlagBitsFUCHSIA"
              },
              {
                "$name": "VkImageConstraintsInfoFlagsFUCHSIA"
              },
              {
                "$name": "VkImageConstraintsInfoFUCHSIA"
              },
              {
                "$name": "VkImageFormatConstraintsInfoFUCHSIA"
              },
              {
                "$name": "VkBufferCollectionConstraintsInfoFUCHSIA"
              }
            ],
            "command": [
              {
                "$name": "vkCreateBufferCollectionFUCHSIA"
              },
              {
                "$name": "vkSetBufferCollectionImageConstraintsFUCHSIA"
              },
              {
                "$name": "vkSetBufferCollectionBufferConstraintsFUCHSIA"
              },
              {
                "$name": "vkDestroyBufferCollectionFUCHSIA"
              },
              {
                "$name": "vkGetBufferCollectionPropertiesFUCHSIA"
              }
            ]
          },
          "$name": "VK_FUCHSIA_buffer_collection",
          "$number": 367,
          "$type": "device",
          "$requires": "VK_FUCHSIA_external_memory,VK_KHR_sampler_ycbcr_conversion",
          "$author": "FUCHSIA",
          "$contact": "John Rosasco @rosasco",
          "$supported": "vulkan",
          "$platform": "fuchsia"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_FUCHSIA_EXTENSION_368_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FUCHSIA_extension_368\"",
                "$name": "VK_FUCHSIA_EXTENSION_368_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_FUCHSIA_extension_368",
          "$number": 368,
          "$author": "FUCHSIA",
          "$contact": "Craig Stout @cdotstout",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_369_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_369\"",
                "$name": "VK_QCOM_EXTENSION_369_EXTENSION_NAME"
              },
              {
                "$bitpos": 4,
                "$extends": "VkDescriptorBindingFlagBits",
                "$name": "VK_DESCRIPTOR_BINDING_RESERVED_4_BIT_QCOM"
              }
            ]
          },
          "$name": "VK_QCOM_extension_369",
          "$number": 369,
          "$author": "QCOM",
          "$contact": "Matthew Netsch @mnetsch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_HUAWEI_subpass_shading\"",
                "$name": "VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI"
              },
              {
                "$offset": 3,
                "$extends": "VkPipelineBindPoint",
                "$extnumber": 370,
                "$name": "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI"
              },
              {
                "$bitpos": 39,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI"
              },
              {
                "$bitpos": 14,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI"
              }
            ],
            "type": [
              {
                "$name": "VkSubpassShadingPipelineCreateInfoHUAWEI"
              },
              {
                "$name": "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"
              },
              {
                "$name": "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"
              }
            ],
            "command": [
              {
                "$name": "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"
              },
              {
                "$name": "vkCmdSubpassShadingHUAWEI"
              }
            ]
          },
          "$name": "VK_HUAWEI_subpass_shading",
          "$number": 370,
          "$type": "device",
          "$author": "HUAWEI",
          "$contact": "Pan Gao @PanGao-h",
          "$requires": "VK_KHR_create_renderpass2,VK_KHR_synchronization2",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_HUAWEI_invocation_mask\"",
                "$name": "VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI"
              },
              {
                "$bitpos": 39,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI"
              },
              {
                "$bitpos": 18,
                "$extends": "VkImageUsageFlagBits",
                "$name": "VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI"
              },
              {
                "$bitpos": 40,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"
            },
            "command": {
              "$name": "vkCmdBindInvocationMaskHUAWEI"
            }
          },
          "$name": "VK_HUAWEI_invocation_mask",
          "$number": 371,
          "$type": "device",
          "$requires": "VK_KHR_ray_tracing_pipeline,VK_KHR_synchronization2",
          "$author": "Huawei",
          "$contact": "Pan Gao @PanGao-h",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_external_memory_rdma\"",
                "$name": "VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV"
              },
              {
                "$bitpos": 8,
                "$extends": "VkMemoryPropertyFlagBits",
                "$name": "VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV"
              },
              {
                "$bitpos": 12,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV"
              }
            ],
            "type": [
              {
                "$name": "VkRemoteAddressNV"
              },
              {
                "$name": "VkMemoryGetRemoteAddressInfoNV"
              },
              {
                "$name": "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"
              }
            ],
            "command": {
              "$name": "vkGetMemoryRemoteAddressNV"
            }
          },
          "$name": "VK_NV_external_memory_rdma",
          "$number": 372,
          "$type": "device",
          "$requires": "VK_KHR_external_memory",
          "$author": "NV",
          "$contact": "Carsten Rohde @crohde",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pipeline_properties\"",
                "$name": "VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT",
                "$alias": "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"
              }
            ],
            "type": [
              {
                "$name": "VkPipelineInfoEXT"
              },
              {
                "$name": "VkPipelinePropertiesIdentifierEXT"
              },
              {
                "$name": "VkPhysicalDevicePipelinePropertiesFeaturesEXT"
              }
            ],
            "command": {
              "$name": "vkGetPipelinePropertiesEXT"
            }
          },
          "$name": "VK_EXT_pipeline_properties",
          "$number": 373,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Mukund Keshava @mkeshavanv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_374_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_374\"",
                "$name": "VK_NV_EXTENSION_374_EXTENSION_NAME"
              },
              {
                "$bitpos": 4,
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_4_BIT_NV"
              },
              {
                "$bitpos": 5,
                "$extends": "VkExternalFenceHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_FENCE_HANDLE_TYPE_RESERVED_5_BIT_NV"
              },
              {
                "$bitpos": 5,
                "$extends": "VkExternalSemaphoreHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_RESERVED_5_BIT_NV"
              }
            ]
          },
          "$name": "VK_NV_extension_374",
          "$number": 374,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_375_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_375\"",
                "$name": "VK_NV_EXTENSION_375_EXTENSION_NAME"
              },
              {
                "$bitpos": 13,
                "$extends": "VkExternalMemoryHandleTypeFlagBits",
                "$name": "VK_EXTERNAL_MEMORY_HANDLE_TYPE_RESERVED_13_BIT_NV"
              }
            ]
          },
          "$name": "VK_NV_extension_375",
          "$number": 375,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_376_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_376\"",
                "$name": "VK_EXT_EXTENSION_376_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_376",
          "$number": 376,
          "$author": "EXT",
          "$contact": "Melih Yasin Yalcin @yalcinmelihyasin",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_multisampled_render_to_single_sampled\"",
                "$name": "VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT"
              },
              {
                "$bitpos": 18,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"
              },
              {
                "$name": "VkSubpassResolvePerformanceQueryEXT"
              },
              {
                "$name": "VkMultisampledRenderToSingleSampledInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_multisampled_render_to_single_sampled",
          "$number": 377,
          "$type": "device",
          "$requires": "VK_KHR_create_renderpass2,VK_KHR_depth_stencil_resolve",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extended_dynamic_state2\"",
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE"
              },
              {
                "$offset": 3,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_LOGIC_OP_EXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT",
                "$alias": "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT",
              "$comment": "Not promoted to 1.3"
            },
            "command": [
              {
                "$name": "vkCmdSetPatchControlPointsEXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$name": "vkCmdSetRasterizerDiscardEnableEXT"
              },
              {
                "$name": "vkCmdSetDepthBiasEnableEXT"
              },
              {
                "$name": "vkCmdSetLogicOpEXT",
                "$comment": "Not promoted to 1.3"
              },
              {
                "$name": "vkCmdSetPrimitiveRestartEnableEXT"
              }
            ]
          },
          "$name": "VK_EXT_extended_dynamic_state2",
          "$number": 378,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_QNX_SCREEN_SURFACE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QNX_screen_surface\"",
                "$name": "VK_QNX_SCREEN_SURFACE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX"
              }
            ],
            "type": [
              {
                "$name": "VkScreenSurfaceCreateFlagsQNX"
              },
              {
                "$name": "VkScreenSurfaceCreateInfoQNX"
              }
            ],
            "command": [
              {
                "$name": "vkCreateScreenSurfaceQNX"
              },
              {
                "$name": "vkGetPhysicalDeviceScreenPresentationSupportQNX"
              }
            ]
          },
          "$name": "VK_QNX_screen_surface",
          "$number": 379,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$platform": "screen",
          "$author": "QNX",
          "$contact": "Mike Gorchak @mgorchak-blackberry",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_380_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_380\"",
                "$name": "VK_KHR_EXTENSION_380_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_380",
          "$number": 380,
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_381_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_381\"",
                "$name": "VK_KHR_EXTENSION_381_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_381",
          "$number": 381,
          "$author": "KHR",
          "$contact": "James Jones @cubanismo",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_color_write_enable\"",
                "$name": "VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceColorWriteEnableFeaturesEXT"
              },
              {
                "$name": "VkPipelineColorWriteCreateInfoEXT"
              }
            ],
            "command": {
              "$name": "vkCmdSetColorWriteEnableEXT"
            }
          },
          "$name": "VK_EXT_color_write_enable",
          "$number": 382,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Sharif Elcott @selcott",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_primitives_generated_query\"",
                "$name": "VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"
            }
          },
          "$name": "VK_EXT_primitives_generated_query",
          "$number": 383,
          "$type": "device",
          "$requires": "VK_EXT_transform_feedback",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_384_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_384\"",
                "$name": "VK_EXT_EXTENSION_384_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_384",
          "$number": 384,
          "$type": "instance",
          "$author": "EXT",
          "$contact": "Chia-I Wu @olvaffe1",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_MESA_EXTENSION_385_SPEC_VERSION"
              },
              {
                "$value": "\"VK_MESA_extension_385\"",
                "$name": "VK_MESA_EXTENSION_385_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_MESA_extension_385",
          "$number": 385,
          "$type": "instance",
          "$author": "MESA",
          "$contact": "Chia-I Wu @olvaffe1",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_386_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_386\"",
                "$name": "VK_GOOGLE_EXTENSION_386_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_386",
          "$number": 386,
          "$author": "GOOGLE",
          "$contact": "Chia-I Wu @olvaffe1",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_KHR_ray_tracing_maintenance1\"",
                  "$name": "VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR"
                },
                {
                  "$offset": 0,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR"
                },
                {
                  "$offset": 1,
                  "$extends": "VkQueryType",
                  "$name": "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR"
                }
              ],
              "type": {
                "$name": "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"
              }
            },
            {
              "enum": {
                "$bitpos": 28,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR"
              },
              "$extension": "VK_KHR_synchronization2"
            },
            {
              "enum": {
                "$bitpos": 40,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR"
              },
              "$extension": "VK_KHR_synchronization2+VK_KHR_ray_tracing_pipeline"
            },
            {
              "type": {
                "$name": "VkTraceRaysIndirectCommand2KHR"
              },
              "command": {
                "$name": "vkCmdTraceRaysIndirect2KHR"
              },
              "$extension": "VK_KHR_ray_tracing_pipeline"
            }
          ],
          "$name": "VK_KHR_ray_tracing_maintenance1",
          "$number": 387,
          "$type": "device",
          "$requiresCore": 1.1,
          "$requires": "VK_KHR_acceleration_structure",
          "$author": "KHR",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_388_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_388\"",
                "$name": "VK_EXT_EXTENSION_388_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_388",
          "$number": 388,
          "$author": "EXT",
          "$contact": "Alan Baker @alan-baker",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_global_priority_query\"",
                "$name": "VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT"
              },
              {
                "$extends": "VkStructureType",
                "$alias": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR",
                "$name": "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT"
              },
              {
                "$name": "VK_MAX_GLOBAL_PRIORITY_SIZE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT"
              },
              {
                "$name": "VkQueueFamilyGlobalPriorityPropertiesEXT"
              }
            ]
          },
          "$name": "VK_EXT_global_priority_query",
          "$number": 389,
          "$type": "device",
          "$requires": "VK_EXT_global_priority,VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Yiwei Zhang @zhangyiwei",
          "$supported": "vulkan",
          "$promotedto": "VK_KHR_global_priority"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_390_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_390\"",
                "$name": "VK_EXT_EXTENSION_390_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_390",
          "$number": 390,
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_391_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_391\"",
                "$name": "VK_EXT_EXTENSION_391_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_391",
          "$number": 391,
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_image_view_min_lod\"",
                "$name": "VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceImageViewMinLodFeaturesEXT"
              },
              {
                "$name": "VkImageViewMinLodCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_image_view_min_lod",
          "$number": 392,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_MULTI_DRAW_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_multi_draw\"",
                "$name": "VK_EXT_MULTI_DRAW_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMultiDrawFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceMultiDrawPropertiesEXT"
              },
              {
                "$name": "VkMultiDrawInfoEXT"
              },
              {
                "$name": "VkMultiDrawIndexedInfoEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdDrawMultiEXT"
              },
              {
                "$name": "vkCmdDrawMultiIndexedEXT"
              }
            ]
          },
          "$name": "VK_EXT_multi_draw",
          "$number": 393,
          "$author": "EXT",
          "$contact": "Mike Blumenkrantz @zmike",
          "$type": "device",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_image_2d_view_of_3d\"",
                "$name": "VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT"
              },
              {
                "$extends": "VkImageCreateFlagBits",
                "$bitpos": 17,
                "$name": "VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT",
                "$comment": "Image is created with a layout where individual slices are capable of being used as 2D images"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"
            }
          },
          "$name": "VK_EXT_image_2d_view_of_3d",
          "$number": 394,
          "$requires": "VK_KHR_maintenance1,VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Mike Blumenkrantz @zmike",
          "$specialuse": "glemulation",
          "$type": "device",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_portability_enumeration\"",
                "$name": "VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME"
              },
              {
                "$bitpos": 0,
                "$extends": "VkInstanceCreateFlagBits",
                "$name": "VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR"
              }
            ]
          },
          "$name": "VK_KHR_portability_enumeration",
          "$number": 395,
          "$author": "KHR",
          "$contact": "Charles Giessen @charles-lunarg",
          "$type": "instance",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_396_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_396\"",
                "$name": "VK_KHR_EXTENSION_396_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_396",
          "$number": 396,
          "$author": "EXT",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_OPACITY_MICROMAP_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_opacity_micromap\"",
                "$name": "VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT"
              },
              {
                "$offset": 6,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT"
              },
              {
                "$offset": 7,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT"
              },
              {
                "$offset": 8,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT"
              },
              {
                "$offset": 9,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT"
              },
              {
                "$bitpos": 30,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT"
              },
              {
                "$bitpos": 44,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_MICROMAP_READ_BIT_EXT"
              },
              {
                "$bitpos": 45,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkQueryType",
                "$name": "VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_MICROMAP_EXT"
              },
              {
                "$bitpos": 23,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT"
              },
              {
                "$bitpos": 24,
                "$extends": "VkBufferUsageFlagBits",
                "$name": "VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT"
              },
              {
                "$bitpos": 24,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT"
              },
              {
                "$bitpos": 4,
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT"
              },
              {
                "$bitpos": 5,
                "$extends": "VkGeometryInstanceFlagBitsKHR",
                "$name": "VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT"
              },
              {
                "$bitpos": 6,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT"
              },
              {
                "$bitpos": 7,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT"
              },
              {
                "$bitpos": 8,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkMicromapTypeEXT"
              },
              {
                "$name": "VkMicromapBuildInfoEXT"
              },
              {
                "$name": "VkMicromapUsageEXT"
              },
              {
                "$name": "VkMicromapCreateInfoEXT"
              },
              {
                "$name": "VkMicromapEXT"
              },
              {
                "$name": "VkBuildMicromapFlagBitsEXT"
              },
              {
                "$name": "VkBuildMicromapFlagsEXT"
              },
              {
                "$name": "VkCopyMicromapModeEXT"
              },
              {
                "$name": "VkPhysicalDeviceOpacityMicromapFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceOpacityMicromapPropertiesEXT"
              },
              {
                "$name": "VkMicromapVersionInfoEXT"
              },
              {
                "$name": "VkCopyMicromapToMemoryInfoEXT"
              },
              {
                "$name": "VkCopyMemoryToMicromapInfoEXT"
              },
              {
                "$name": "VkCopyMicromapInfoEXT"
              },
              {
                "$name": "VkMicromapCreateFlagBitsEXT"
              },
              {
                "$name": "VkMicromapCreateFlagsEXT"
              },
              {
                "$name": "VkBuildMicromapModeEXT"
              },
              {
                "$name": "VkMicromapBuildSizesInfoEXT"
              },
              {
                "$name": "VkOpacityMicromapFormatEXT"
              },
              {
                "$name": "VkAccelerationStructureTrianglesOpacityMicromapEXT"
              },
              {
                "$name": "VkMicromapTriangleEXT"
              },
              {
                "$name": "VkOpacityMicromapSpecialIndexEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCreateMicromapEXT"
              },
              {
                "$name": "vkDestroyMicromapEXT"
              },
              {
                "$name": "vkCmdBuildMicromapsEXT"
              },
              {
                "$name": "vkBuildMicromapsEXT"
              },
              {
                "$name": "vkCopyMicromapEXT"
              },
              {
                "$name": "vkCopyMicromapToMemoryEXT"
              },
              {
                "$name": "vkCopyMemoryToMicromapEXT"
              },
              {
                "$name": "vkWriteMicromapsPropertiesEXT"
              },
              {
                "$name": "vkCmdCopyMicromapEXT"
              },
              {
                "$name": "vkCmdCopyMicromapToMemoryEXT"
              },
              {
                "$name": "vkCmdCopyMemoryToMicromapEXT"
              },
              {
                "$name": "vkCmdWriteMicromapsPropertiesEXT"
              },
              {
                "$name": "vkGetDeviceMicromapCompatibilityEXT"
              },
              {
                "$name": "vkGetMicromapBuildSizesEXT"
              }
            ]
          },
          "$name": "VK_EXT_opacity_micromap",
          "$number": 397,
          "$type": "device",
          "$requires": "VK_KHR_acceleration_structure,VK_KHR_synchronization2",
          "$author": "EXT",
          "$contact": "Christoph Kubisch @pixeljetstream, Eric Werness",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_398_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_398\"",
                "$name": "VK_NV_EXTENSION_398_EXTENSION_NAME"
              },
              {
                "$bitpos": 28,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_RESERVED_BIT_28_NV"
              },
              {
                "$bitpos": 9,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_9_NV"
              },
              {
                "$bitpos": 10,
                "$extends": "VkBuildAccelerationStructureFlagBitsKHR",
                "$name": "VK_BUILD_ACCELERATION_STRUCTURE_RESERVED_BIT_10_NV"
              }
            ]
          },
          "$name": "VK_NV_extension_398",
          "$number": 398,
          "$author": "NV",
          "$contact": "Christoph Kubisch @pixeljetstream, Eric Werness @ewerness-nv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_JUICE_EXTENSION_399_SPEC_VERSION"
              },
              {
                "$value": "\"VK_JUICE_extension_399\"",
                "$name": "VK_JUICE_EXTENSION_399_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_JUICE_extension_399",
          "$number": 399,
          "$author": "JUICE",
          "$contact": "Dean Beeler @canadacow",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_JUICE_EXTENSION_400_SPEC_VERSION"
              },
              {
                "$value": "\"VK_JUICE_extension_400\"",
                "$name": "VK_JUICE_EXTENSION_400_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_JUICE_extension_400",
          "$number": 400,
          "$author": "JUICE",
          "$contact": "David McCloskey @damcclos",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_load_store_op_none\"",
                "$name": "VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkAttachmentLoadOp",
                "$name": "VK_ATTACHMENT_LOAD_OP_NONE_EXT"
              },
              {
                "$extends": "VkAttachmentStoreOp",
                "$name": "VK_ATTACHMENT_STORE_OP_NONE_EXT",
                "$alias": "VK_ATTACHMENT_STORE_OP_NONE"
              }
            ]
          },
          "$name": "VK_EXT_load_store_op_none",
          "$number": 401,
          "$author": "EXT",
          "$type": "device",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_FB_EXTENSION_402_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FB_extension_402\"",
                "$name": "VK_FB_EXTENSION_402_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_FB_extension_402",
          "$number": 402,
          "$author": "FB",
          "$contact": "Artem Bolgar @artyom17",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_FB_EXTENSION_403_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FB_extension_403\"",
                "$name": "VK_FB_EXTENSION_403_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_FB_extension_403",
          "$number": 403,
          "$author": "FB",
          "$contact": "Artem Bolgar @artyom17",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_FB_EXTENSION_404_SPEC_VERSION"
              },
              {
                "$value": "\"VK_FB_extension_404\"",
                "$name": "VK_FB_EXTENSION_404_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_FB_extension_404",
          "$number": 404,
          "$author": "FB",
          "$contact": "Artem Bolgar @artyom17",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_HUAWEI_EXTENSION_405_SPEC_VERSION"
              },
              {
                "$value": "\"VK_HUAWEI_extension_405\"",
                "$name": "VK_HUAWEI_EXTENSION_405_EXTENSION_NAME"
              },
              {
                "$bitpos": 41,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_RESEVED_41_BIT_HUAWEI"
              },
              {
                "$bitpos": 19,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_RESERVED_19_BIT_HUAWEI"
              }
            ]
          },
          "$name": "VK_HUAWEI_extension_405",
          "$number": 405,
          "$author": "HUAWEI",
          "$contact": "Hueilong Wang @wyvernathuawei",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_HUAWEI_EXTENSION_406_SPEC_VERSION"
              },
              {
                "$value": "\"VK_HUAWEI_extension_406\"",
                "$name": "VK_HUAWEI_EXTENSION_406_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_HUAWEI_extension_406",
          "$number": 406,
          "$author": "HUAWEI",
          "$contact": "Hueilong Wang @wyvernathuawei",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_407_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_407\"",
                "$name": "VK_GGP_EXTENSION_407_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_407",
          "$number": 407,
          "$author": "GGP",
          "$contact": "J.D. Rouan @jdrouan",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_408_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_408\"",
                "$name": "VK_GGP_EXTENSION_408_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_408",
          "$number": 408,
          "$author": "GGP",
          "$contact": "J.D. Rouan @jdrouan",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_409_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_409\"",
                "$name": "VK_GGP_EXTENSION_409_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_409",
          "$number": 409,
          "$author": "GGP",
          "$contact": "J.D. Rouan @jdrouan",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_410_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_410\"",
                "$name": "VK_GGP_EXTENSION_410_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_410",
          "$number": 410,
          "$author": "GGP",
          "$contact": "J.D. Rouan @jdrouan",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GGP_EXTENSION_411_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GGP_extension_411\"",
                "$name": "VK_GGP_EXTENSION_411_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GGP_extension_411",
          "$number": 411,
          "$author": "GGP",
          "$contact": "J.D. Rouan @jdrouan",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_border_color_swizzle\"",
                "$name": "VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"
              },
              {
                "$name": "VkSamplerBorderColorComponentMappingCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_border_color_swizzle",
          "$number": 412,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$requires": "VK_EXT_custom_border_color",
          "$specialuse": "glemulation,d3demulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pageable_device_local_memory\"",
                "$name": "VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"
            },
            "command": {
              "$name": "vkSetDeviceMemoryPriorityEXT"
            }
          },
          "$name": "VK_EXT_pageable_device_local_memory",
          "$number": 413,
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$type": "device",
          "$requires": "VK_EXT_memory_priority",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_KHR_MAINTENANCE_4_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_maintenance4\"",
                "$name": "VK_KHR_MAINTENANCE_4_EXTENSION_NAME"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR",
                "$alias": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS"
              },
              {
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR",
                "$alias": "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS"
              },
              {
                "$extends": "VkImageAspectFlagBits",
                "$name": "VK_IMAGE_ASPECT_NONE_KHR",
                "$alias": "VK_IMAGE_ASPECT_NONE"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMaintenance4FeaturesKHR"
              },
              {
                "$name": "VkPhysicalDeviceMaintenance4PropertiesKHR"
              },
              {
                "$name": "VkDeviceBufferMemoryRequirementsKHR"
              },
              {
                "$name": "VkDeviceImageMemoryRequirementsKHR"
              }
            ],
            "command": [
              {
                "$name": "vkGetDeviceBufferMemoryRequirementsKHR"
              },
              {
                "$name": "vkGetDeviceImageMemoryRequirementsKHR"
              },
              {
                "$name": "vkGetDeviceImageSparseMemoryRequirementsKHR"
              }
            ]
          },
          "$name": "VK_KHR_maintenance4",
          "$number": 414,
          "$type": "device",
          "$requiresCore": 1.1,
          "$author": "KHR",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan",
          "$promotedto": "VK_VERSION_1_3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_HUAWEI_EXTENSION_415_SPEC_VERSION"
              },
              {
                "$value": "\"VK_HUAWEI_extension_415\"",
                "$name": "VK_HUAWEI_EXTENSION_415_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_HUAWEI_extension_415",
          "$number": 415,
          "$author": "HUAWEI",
          "$contact": "Hueilong Wang @wyvernathuawei",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_416_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_416\"",
                "$name": "VK_ARM_EXTENSION_416_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_416",
          "$number": 416,
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_417_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_417\"",
                "$name": "VK_KHR_EXTENSION_417_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_417",
          "$number": 417,
          "$author": "KHR",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_418_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_418\"",
                "$name": "VK_ARM_EXTENSION_418_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_418",
          "$number": 418,
          "$author": "ARM",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_419_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_419\"",
                "$name": "VK_EXT_EXTENSION_419_EXTENSION_NAME"
              },
              {
                "$bitpos": 3,
                "$extends": "VkImageViewCreateFlagBits",
                "$name": "VK_IMAGE_VIEW_CREATE_RESERVED_3_BIT_EXT"
              }
            ]
          },
          "$name": "VK_EXT_extension_419",
          "$number": 419,
          "$author": "EXT",
          "$contact": "Mike Blumenkrantz @zmike",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_420_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_420\"",
                "$name": "VK_EXT_EXTENSION_420_EXTENSION_NAME"
              },
              {
                "$bitpos": 4,
                "$extends": "VkSwapchainCreateFlagBitsKHR",
                "$name": "VK_SWAPCHAIN_CREATE_RESERVED_4_BIT_EXT"
              }
            ]
          },
          "$name": "VK_EXT_extension_420",
          "$number": 420,
          "$author": "EXT",
          "$contact": "Mike Blumenkrantz @zmike",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_VALVE_descriptor_set_host_mapping\"",
                "$name": "VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"
              },
              {
                "$name": "VkDescriptorSetBindingReferenceVALVE"
              },
              {
                "$name": "VkDescriptorSetLayoutHostMappingInfoVALVE"
              }
            ],
            "command": [
              {
                "$name": "vkGetDescriptorSetLayoutHostMappingInfoVALVE"
              },
              {
                "$name": "vkGetDescriptorSetHostMappingVALVE"
              }
            ]
          },
          "$name": "VK_VALVE_descriptor_set_host_mapping",
          "$number": 421,
          "$type": "device",
          "$author": "VALVE",
          "$contact": "Hans-Kristian Arntzen @HansKristian-Work",
          "$specialuse": "d3demulation",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_depth_clamp_zero_one\"",
                "$name": "VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT"
            }
          },
          "$name": "VK_EXT_depth_clamp_zero_one",
          "$number": 422,
          "$author": "EXT",
          "$type": "device",
          "$contact": "Graeme Leese @gnl21",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_non_seamless_cube_map\"",
                "$name": "VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME"
              },
              {
                "$bitpos": 2,
                "$extends": "VkSamplerCreateFlagBits",
                "$name": "VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"
            }
          },
          "$name": "VK_EXT_non_seamless_cube_map",
          "$number": 423,
          "$author": "EXT",
          "$type": "device",
          "$contact": "Georg Lehmann @DadSchoorse",
          "$specialuse": "d3demulation,glemulation",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_424_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_424\"",
                "$name": "VK_ARM_EXTENSION_424_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_424",
          "$number": 424,
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_425_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_425\"",
                "$name": "VK_ARM_EXTENSION_425_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_425",
          "$number": 425,
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_fragment_density_map_offset\"",
                "$name": "VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM"
              },
              {
                "$bitpos": 15,
                "$extends": "VkImageCreateFlagBits",
                "$name": "VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"
              },
              {
                "$name": "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM"
              },
              {
                "$name": "VkSubpassFragmentDensityMapOffsetEndInfoQCOM"
              }
            ]
          },
          "$name": "VK_QCOM_fragment_density_map_offset",
          "$number": 426,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_EXT_fragment_density_map",
          "$author": "QCOM",
          "$contact": "Matthew Netsch @mnetsch",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_copy_memory_indirect\"",
                "$name": "VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkCopyMemoryIndirectCommandNV"
              },
              {
                "$name": "VkCopyMemoryToImageIndirectCommandNV"
              },
              {
                "$name": "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"
              }
            ],
            "command": [
              {
                "$name": "vkCmdCopyMemoryIndirectNV"
              },
              {
                "$name": "vkCmdCopyMemoryToImageIndirectNV"
              }
            ]
          },
          "$name": "VK_NV_copy_memory_indirect",
          "$number": 427,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_buffer_device_address",
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_memory_decompression\"",
                "$name": "VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkMemoryDecompressionMethodFlagBitsNV"
              },
              {
                "$name": "VkMemoryDecompressionMethodFlagsNV"
              },
              {
                "$name": "VkDecompressMemoryRegionNV"
              },
              {
                "$name": "VkPhysicalDeviceMemoryDecompressionFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceMemoryDecompressionPropertiesNV"
              }
            ],
            "command": [
              {
                "$name": "vkCmdDecompressMemoryNV"
              },
              {
                "$name": "vkCmdDecompressMemoryIndirectCountNV"
              }
            ]
          },
          "$name": "VK_NV_memory_decompression",
          "$number": 428,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_buffer_device_address",
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_429_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_429\"",
                "$name": "VK_NV_EXTENSION_429_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_429",
          "$number": 429,
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_430_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_430\"",
                "$name": "VK_NV_EXTENSION_430_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_430",
          "$number": 430,
          "$author": "NV",
          "$contact": "Vikram Kushwaha @vkushwaha-nv",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_NV_linear_color_attachment\"",
                  "$name": "VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV"
                }
              ],
              "type": {
                "$name": "VkPhysicalDeviceLinearColorAttachmentFeaturesNV"
              }
            },
            {
              "enum": {
                "$bitpos": 38,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV",
                "$comment": "Format support linear image as render target, it cannot be mixed with non linear attachment"
              },
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_NV_linear_color_attachment",
          "$number": 431,
          "$type": "device",
          "$author": "NVIDIA",
          "$contact": "sourav parmar @souravpNV",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_432_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_432\"",
                "$name": "VK_NV_EXTENSION_432_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_432",
          "$number": 432,
          "$author": "NV",
          "$contact": "Sourav Parmar @souravpNV",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_433_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_433\"",
                "$name": "VK_NV_EXTENSION_433_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_433",
          "$number": 433,
          "$author": "NV",
          "$contact": "Sourav Parmar @souravpNV",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_surfaceless_query\"",
                "$name": "VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_surfaceless_query",
          "$number": 434,
          "$type": "instance",
          "$requires": "VK_KHR_surface",
          "$author": "GOOGLE",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$specialuse": "glemulation",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_KHR_EXTENSION_435_SPEC_VERSION"
              },
              {
                "$value": "\"VK_KHR_extension_435\"",
                "$name": "VK_KHR_EXTENSION_435_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_KHR_extension_435",
          "$number": 435,
          "$author": "KHR",
          "$contact": "Alan Baker @alan-baker",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_436_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_436\"",
                "$name": "VK_NV_EXTENSION_436_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_436",
          "$number": 436,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_437_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_437\"",
                "$name": "VK_EXT_EXTENSION_437_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_437",
          "$number": 437,
          "$author": "EXT",
          "$contact": "Jonathan Weinstein @Jonathan-Weinstein",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_image_compression_control_swapchain\"",
                "$name": "VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"
            }
          },
          "$name": "VK_EXT_image_compression_control_swapchain",
          "$number": 438,
          "$type": "device",
          "$requires": "VK_EXT_image_compression_control",
          "$author": "EXT",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_SEC_EXTENSION_439_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_extension_439\"",
                "$name": "VK_SEC_EXTENSION_439_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_SEC_extension_439",
          "$number": 439,
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_440_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_440\"",
                "$name": "VK_QCOM_EXTENSION_440_EXTENSION_NAME"
              },
              {
                "$bitpos": 7,
                "$extends": "VkQueueFlagBits",
                "$name": "VK_QUEUE_RESERVED_7_BIT_QCOM"
              },
              {
                "$bitpos": 1,
                "$extends": "VkDeviceQueueCreateFlagBits",
                "$name": "VK_DEVICE_QUEUE_CREATE_RESERVED_1_BIT_QCOM"
              }
            ]
          },
          "$name": "VK_QCOM_extension_440",
          "$number": 440,
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "disabled"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_QCOM_image_processing\"",
                  "$name": "VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM"
                },
                {
                  "$offset": 1,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM"
                },
                {
                  "$offset": 2,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM"
                },
                {
                  "$bitpos": 4,
                  "$extends": "VkSamplerCreateFlagBits",
                  "$name": "VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM"
                },
                {
                  "$bitpos": 20,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM"
                },
                {
                  "$bitpos": 21,
                  "$extends": "VkImageUsageFlagBits",
                  "$name": "VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM"
                },
                {
                  "$offset": 0,
                  "$extends": "VkDescriptorType",
                  "$name": "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM"
                },
                {
                  "$offset": 1,
                  "$extends": "VkDescriptorType",
                  "$name": "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM"
                }
              ],
              "type": [
                {
                  "$name": "VkImageViewSampleWeightCreateInfoQCOM"
                },
                {
                  "$name": "VkPhysicalDeviceImageProcessingFeaturesQCOM"
                },
                {
                  "$name": "VkPhysicalDeviceImageProcessingPropertiesQCOM"
                }
              ]
            },
            {
              "enum": [
                {
                  "$bitpos": 34,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM"
                },
                {
                  "$bitpos": 35,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM"
                },
                {
                  "$bitpos": 36,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM"
                },
                {
                  "$bitpos": 37,
                  "$extends": "VkFormatFeatureFlagBits2",
                  "$name": "VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM"
                }
              ],
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "VK_QCOM_image_processing",
          "$number": 441,
          "$type": "device",
          "$requires": "VK_KHR_format_feature_flags2",
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_442_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_442\"",
                "$name": "VK_COREAVI_EXTENSION_442_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_442",
          "$number": 442,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_443_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_443\"",
                "$name": "VK_COREAVI_EXTENSION_443_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_443",
          "$number": 443,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_444_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_444\"",
                "$name": "VK_COREAVI_EXTENSION_444_EXTENSION_NAME"
              },
              {
                "$extends": "VkCommandPoolResetFlagBits",
                "$bitpos": 1,
                "$name": "VK_COMMAND_POOL_RESET_RESERVED_1_BIT_COREAVI"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_444",
          "$number": 444,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_445_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_445\"",
                "$name": "VK_COREAVI_EXTENSION_445_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_445",
          "$number": 445,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_446_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_446\"",
                "$name": "VK_COREAVI_EXTENSION_446_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_446",
          "$number": 446,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_COREAVI_EXTENSION_447_SPEC_VERSION"
              },
              {
                "$value": "\"VK_COREAVI_extension_447\"",
                "$name": "VK_COREAVI_EXTENSION_447_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_COREAVI_extension_447",
          "$number": 447,
          "$author": "COREAVI",
          "$contact": "Aidan Fabius @afabius",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_SEC_EXTENSION_448_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_extension_448\"",
                "$name": "VK_SEC_EXTENSION_448_EXTENSION_NAME"
              },
              {
                "$bitpos": 3,
                "$extends": "VkSwapchainCreateFlagBitsKHR",
                "$name": "VK_SWAPCHAIN_CREATE_RESERVED_3_BIT_SEC"
              }
            ]
          },
          "$name": "VK_SEC_extension_448",
          "$number": 448,
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_SEC_EXTENSION_449_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_extension_449\"",
                "$name": "VK_SEC_EXTENSION_449_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_SEC_extension_449",
          "$number": 449,
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_SEC_EXTENSION_450_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_extension_450\"",
                "$name": "VK_SEC_EXTENSION_450_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_SEC_extension_450",
          "$number": 450,
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_SEC_EXTENSION_451_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_extension_451\"",
                "$name": "VK_SEC_EXTENSION_451_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_SEC_extension_451",
          "$number": 451,
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_452_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_452\"",
                "$name": "VK_NV_EXTENSION_452_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_452",
          "$number": 452,
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ARM_EXTENSION_453_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_extension_453\"",
                "$name": "VK_ARM_EXTENSION_453_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ARM_extension_453",
          "$number": 453,
          "$author": "Arm",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_454_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_454\"",
                "$name": "VK_GOOGLE_EXTENSION_454_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_454",
          "$number": 454,
          "$author": "GOOGLE",
          "$contact": "Chad Versace @chadversary",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_GOOGLE_EXTENSION_455_SPEC_VERSION"
              },
              {
                "$value": "\"VK_GOOGLE_extension_455\"",
                "$name": "VK_GOOGLE_EXTENSION_455_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_GOOGLE_extension_455",
          "$number": 455,
          "$author": "GOOGLE",
          "$contact": "Chad Versace @chadversary",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extended_dynamic_state3\"",
                "$name": "VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT"
              },
              {
                "$offset": 4,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_POLYGON_MODE_EXT"
              },
              {
                "$offset": 5,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT"
              },
              {
                "$offset": 6,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_SAMPLE_MASK_EXT"
              },
              {
                "$offset": 7,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT"
              },
              {
                "$offset": 8,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT"
              },
              {
                "$offset": 9,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT"
              },
              {
                "$offset": 10,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT"
              },
              {
                "$offset": 11,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT"
              },
              {
                "$offset": 12,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT"
              },
              {
                "$offset": 13,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT"
              },
              {
                "$offset": 14,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT"
              },
              {
                "$offset": 15,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT"
              },
              {
                "$offset": 16,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT"
              },
              {
                "$offset": 17,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT"
              },
              {
                "$offset": 18,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT"
              },
              {
                "$offset": 19,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT"
              },
              {
                "$offset": 20,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT"
              },
              {
                "$offset": 21,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT"
              },
              {
                "$offset": 22,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT"
              },
              {
                "$offset": 23,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV"
              },
              {
                "$offset": 24,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV"
              },
              {
                "$offset": 25,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV"
              },
              {
                "$offset": 26,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV"
              },
              {
                "$offset": 27,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV"
              },
              {
                "$offset": 28,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV"
              },
              {
                "$offset": 29,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV"
              },
              {
                "$offset": 30,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV"
              },
              {
                "$offset": 31,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV"
              },
              {
                "$offset": 32,
                "$extends": "VkDynamicState",
                "$name": "VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"
              },
              {
                "$name": "VkColorBlendEquationEXT"
              },
              {
                "$name": "VkColorBlendAdvancedEXT"
              }
            ],
            "command": [
              {
                "$name": "vkCmdSetTessellationDomainOriginEXT"
              },
              {
                "$name": "vkCmdSetDepthClampEnableEXT"
              },
              {
                "$name": "vkCmdSetPolygonModeEXT"
              },
              {
                "$name": "vkCmdSetRasterizationSamplesEXT"
              },
              {
                "$name": "vkCmdSetSampleMaskEXT"
              },
              {
                "$name": "vkCmdSetAlphaToCoverageEnableEXT"
              },
              {
                "$name": "vkCmdSetAlphaToOneEnableEXT"
              },
              {
                "$name": "vkCmdSetLogicOpEnableEXT"
              },
              {
                "$name": "vkCmdSetColorBlendEnableEXT"
              },
              {
                "$name": "vkCmdSetColorBlendEquationEXT"
              },
              {
                "$name": "vkCmdSetColorWriteMaskEXT"
              },
              {
                "$name": "vkCmdSetRasterizationStreamEXT"
              },
              {
                "$name": "vkCmdSetConservativeRasterizationModeEXT"
              },
              {
                "$name": "vkCmdSetExtraPrimitiveOverestimationSizeEXT"
              },
              {
                "$name": "vkCmdSetDepthClipEnableEXT"
              },
              {
                "$name": "vkCmdSetSampleLocationsEnableEXT"
              },
              {
                "$name": "vkCmdSetColorBlendAdvancedEXT"
              },
              {
                "$name": "vkCmdSetProvokingVertexModeEXT"
              },
              {
                "$name": "vkCmdSetLineRasterizationModeEXT"
              },
              {
                "$name": "vkCmdSetLineStippleEnableEXT"
              },
              {
                "$name": "vkCmdSetDepthClipNegativeOneToOneEXT"
              },
              {
                "$name": "vkCmdSetViewportWScalingEnableNV"
              },
              {
                "$name": "vkCmdSetViewportSwizzleNV"
              },
              {
                "$name": "vkCmdSetCoverageToColorEnableNV"
              },
              {
                "$name": "vkCmdSetCoverageToColorLocationNV"
              },
              {
                "$name": "vkCmdSetCoverageModulationModeNV"
              },
              {
                "$name": "vkCmdSetCoverageModulationTableEnableNV"
              },
              {
                "$name": "vkCmdSetCoverageModulationTableNV"
              },
              {
                "$name": "vkCmdSetShadingRateImageEnableNV"
              },
              {
                "$name": "vkCmdSetRepresentativeFragmentTestEnableNV"
              },
              {
                "$name": "vkCmdSetCoverageReductionModeNV"
              }
            ]
          },
          "$name": "VK_EXT_extended_dynamic_state3",
          "$number": 456,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_457_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_457\"",
                "$name": "VK_EXT_EXTENSION_457_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_457",
          "$number": 457,
          "$author": "RASTERGRID",
          "$contact": "Daniel Rakos @aqnuep1",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_458_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_458\"",
                "$name": "VK_EXT_EXTENSION_458_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_458",
          "$number": 458,
          "$author": "RASTERGRID",
          "$contact": "Daniel Rakos @aqnuep1",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_subpass_merge_feedback\"",
                "$name": "VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"
              },
              {
                "$name": "VkRenderPassCreationControlEXT"
              },
              {
                "$name": "VkRenderPassCreationFeedbackInfoEXT"
              },
              {
                "$name": "VkRenderPassCreationFeedbackCreateInfoEXT"
              },
              {
                "$name": "VkRenderPassSubpassFeedbackInfoEXT"
              },
              {
                "$name": "VkRenderPassSubpassFeedbackCreateInfoEXT"
              },
              {
                "$name": "VkSubpassMergeStatusEXT"
              }
            ]
          },
          "$name": "VK_EXT_subpass_merge_feedback",
          "$number": 459,
          "$type": "device",
          "$author": "EXT",
          "$contact": "Ting Wei @catweiting",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_460_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_460\"",
                "$name": "VK_EXT_EXTENSION_460_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_460",
          "$number": 460,
          "$author": "EXT",
          "$contact": "Charles Giessen @charles-lunarg",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_461_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_461\"",
                "$name": "VK_EXT_EXTENSION_461_EXTENSION_NAME"
              },
              {
                "$bitpos": 39,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_RESERVED_39_BIT_EXT"
              }
            ]
          },
          "$name": "VK_EXT_extension_461",
          "$number": 461,
          "$author": "EXT",
          "$contact": "Kevin Petit @kevinpetit",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_462_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_462\"",
                "$name": "VK_EXT_EXTENSION_462_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_462",
          "$number": 462,
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton,Liam Middlebrook @liam-middlebrook",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_shader_module_identifier\"",
                "$name": "VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT"
              },
              {
                "$name": "VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"
              },
              {
                "$name": "VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"
              },
              {
                "$name": "VkPipelineShaderStageModuleIdentifierCreateInfoEXT"
              },
              {
                "$name": "VkShaderModuleIdentifierEXT"
              }
            ],
            "command": [
              {
                "$name": "vkGetShaderModuleIdentifierEXT"
              },
              {
                "$name": "vkGetShaderModuleCreateInfoIdentifierEXT"
              }
            ]
          },
          "$name": "VK_EXT_shader_module_identifier",
          "$number": 463,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2,VK_EXT_pipeline_creation_cache_control",
          "$author": "EXT",
          "$contact": "Hans-Kristian Arntzen @HansKristian-Work",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_rasterization_order_attachment_access\"",
                "$name": "VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 343,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT"
              },
              {
                "$bitpos": 0,
                "$extends": "VkPipelineColorBlendStateCreateFlagBits",
                "$name": "VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 0,
                "$extends": "VkPipelineDepthStencilStateCreateFlagBits",
                "$name": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 1,
                "$extends": "VkPipelineDepthStencilStateCreateFlagBits",
                "$name": "VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 4,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 5,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 6,
                "$extends": "VkSubpassDescriptionFlagBits",
                "$name": "VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"
              },
              {
                "$name": "VkPipelineColorBlendStateCreateFlagBits"
              },
              {
                "$name": "VkPipelineDepthStencilStateCreateFlagBits"
              }
            ]
          },
          "$name": "VK_EXT_rasterization_order_attachment_access",
          "$number": 464,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "ARM",
          "$contact": "Jan-Harald Fredriksen @janharaldfredriksen-arm",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_OPTICAL_FLOW_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_optical_flow\"",
                "$name": "VK_NV_OPTICAL_FLOW_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV"
              },
              {
                "$offset": 3,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV"
              },
              {
                "$offset": 4,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV"
              },
              {
                "$offset": 5,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV"
              },
              {
                "$offset": 10,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkFormat",
                "$name": "VK_FORMAT_R16G16_S10_5_NV"
              },
              {
                "$offset": 0,
                "$extends": "VkObjectType",
                "$name": "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV"
              },
              {
                "$bitpos": 8,
                "$extends": "VkQueueFlagBits",
                "$name": "VK_QUEUE_OPTICAL_FLOW_BIT_NV"
              },
              {
                "$bitpos": 29,
                "$extends": "VkPipelineStageFlagBits2",
                "$name": "VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV"
              },
              {
                "$bitpos": 42,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV"
              },
              {
                "$bitpos": 43,
                "$extends": "VkAccessFlagBits2",
                "$name": "VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV"
              },
              {
                "$bitpos": 40,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV"
              },
              {
                "$bitpos": 41,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV"
              },
              {
                "$bitpos": 42,
                "$extends": "VkFormatFeatureFlagBits2",
                "$name": "VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV"
              }
            ],
            "comment": [
              {
                "#text": "NV internal use only"
              },
              {
                "#text": "NV internal use only"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceOpticalFlowFeaturesNV"
              },
              {
                "$name": "VkPhysicalDeviceOpticalFlowPropertiesNV"
              },
              {
                "$name": "VkOpticalFlowUsageFlagBitsNV"
              },
              {
                "$name": "VkOpticalFlowUsageFlagsNV"
              },
              {
                "$name": "VkOpticalFlowImageFormatInfoNV"
              },
              {
                "$name": "VkOpticalFlowImageFormatPropertiesNV"
              },
              {
                "$name": "VkOpticalFlowGridSizeFlagBitsNV"
              },
              {
                "$name": "VkOpticalFlowGridSizeFlagsNV"
              },
              {
                "$name": "VkOpticalFlowPerformanceLevelNV"
              },
              {
                "$name": "VkOpticalFlowSessionBindingPointNV"
              },
              {
                "$name": "VkOpticalFlowSessionCreateFlagBitsNV"
              },
              {
                "$name": "VkOpticalFlowSessionCreateFlagsNV"
              },
              {
                "$name": "VkOpticalFlowExecuteFlagBitsNV"
              },
              {
                "$name": "VkOpticalFlowExecuteFlagsNV"
              },
              {
                "$name": "VkOpticalFlowSessionNV"
              },
              {
                "$name": "VkOpticalFlowSessionCreateInfoNV"
              },
              {
                "$name": "VkOpticalFlowSessionCreatePrivateDataInfoNV"
              },
              {
                "$name": "VkOpticalFlowExecuteInfoNV"
              }
            ],
            "command": [
              {
                "$name": "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"
              },
              {
                "$name": "vkCreateOpticalFlowSessionNV"
              },
              {
                "$name": "vkDestroyOpticalFlowSessionNV"
              },
              {
                "$name": "vkBindOpticalFlowSessionImageNV"
              },
              {
                "$name": "vkCmdOpticalFlowExecuteNV"
              }
            ]
          },
          "$name": "VK_NV_optical_flow",
          "$number": 465,
          "$requires": "VK_KHR_get_physical_device_properties2,VK_KHR_format_feature_flags2,VK_KHR_synchronization2",
          "$type": "device",
          "$author": "NV",
          "$contact": "Carsten Rohde @crohde",
          "$supported": "vulkan"
        },
        {
          "require": [
            {
              "enum": [
                {
                  "$value": 1,
                  "$name": "VK_EXT_LEGACY_DITHERING_SPEC_VERSION"
                },
                {
                  "$value": "\"VK_EXT_legacy_dithering\"",
                  "$name": "VK_EXT_LEGACY_DITHERING_EXTENSION_NAME"
                },
                {
                  "$offset": 0,
                  "$extends": "VkStructureType",
                  "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT"
                },
                {
                  "$bitpos": 7,
                  "$extends": "VkSubpassDescriptionFlagBits",
                  "$name": "VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT"
                }
              ],
              "type": {
                "$name": "VkPhysicalDeviceLegacyDitheringFeaturesEXT"
              }
            },
            {
              "enum": {
                "$bitpos": 3,
                "$extends": "VkRenderingFlagBits",
                "$name": "VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT"
              },
              "$feature": "VK_VERSION_1_3"
            },
            {
              "enum": {
                "$bitpos": 3,
                "$extends": "VkRenderingFlagBits",
                "$name": "VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT"
              },
              "$extension": "VK_KHR_dynamic_rendering"
            }
          ],
          "$name": "VK_EXT_legacy_dithering",
          "$number": 466,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan",
          "$specialuse": "glemulation"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_pipeline_protected_access\"",
                "$name": "VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT"
              },
              {
                "$bitpos": 27,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT"
              },
              {
                "$bitpos": 30,
                "$extends": "VkPipelineCreateFlagBits",
                "$name": "VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT"
              }
            ],
            "type": {
              "$name": "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT"
            }
          },
          "$name": "VK_EXT_pipeline_protected_access",
          "$number": 467,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_468_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_468\"",
                "$name": "VK_EXT_EXTENSION_468_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_468",
          "$number": 468,
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_ANDROID_EXTENSION_469_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ANDROID_extension_469\"",
                "$name": "VK_ANDROID_EXTENSION_469_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_ANDROID_extension_469",
          "$number": 469,
          "$type": "device",
          "$platform": "android",
          "$author": "ANDROID",
          "$contact": "Chris Forbes @chrisforbes",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_470_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_470\"",
                "$name": "VK_AMD_EXTENSION_470_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_470",
          "$number": 470,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_471_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_471\"",
                "$name": "VK_AMD_EXTENSION_471_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_471",
          "$number": 471,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_472_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_472\"",
                "$name": "VK_AMD_EXTENSION_472_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_472",
          "$number": 472,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_473_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_473\"",
                "$name": "VK_AMD_EXTENSION_473_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_473",
          "$number": 473,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_474_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_474\"",
                "$name": "VK_AMD_EXTENSION_474_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_474",
          "$number": 474,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_475_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_475\"",
                "$name": "VK_AMD_EXTENSION_475_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_475",
          "$number": 475,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_476_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_476\"",
                "$name": "VK_AMD_EXTENSION_476_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_476",
          "$number": 476,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_477_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_477\"",
                "$name": "VK_AMD_EXTENSION_477_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_477",
          "$number": 477,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_478_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_478\"",
                "$name": "VK_AMD_EXTENSION_478_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_478",
          "$number": 478,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_AMD_EXTENSION_479_SPEC_VERSION"
              },
              {
                "$value": "\"VK_AMD_extension_479\"",
                "$name": "VK_AMD_EXTENSION_479_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_AMD_extension_479",
          "$number": 479,
          "$author": "AMD",
          "$contact": "Stu Smith",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_480_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_480\"",
                "$name": "VK_EXT_EXTENSION_480_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_480",
          "$number": 480,
          "$author": "EXT",
          "$contact": "Daniel Stone",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_481_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_481\"",
                "$name": "VK_EXT_EXTENSION_481_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_481",
          "$number": 481,
          "$author": "EXT",
          "$contact": "Daniel Stone",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_482_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_482\"",
                "$name": "VK_EXT_EXTENSION_482_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_482",
          "$number": 482,
          "$author": "KHR",
          "$contact": "Eric Werness",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_483_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_483\"",
                "$name": "VK_EXT_EXTENSION_483_EXTENSION_NAME"
              },
              {
                "$bitpos": 15,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_EXT_483_RESERVE_15"
              },
              {
                "$bitpos": 16,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_EXT_483_RESERVE_16"
              },
              {
                "$bitpos": 17,
                "$extends": "VkShaderStageFlagBits",
                "$name": "VK_SHADER_STAGE_EXT_483_RESERVE_17"
              }
            ]
          },
          "$name": "VK_EXT_extension_483",
          "$number": 483,
          "$author": "EXT",
          "$contact": "Piers Daniell",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_484_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_484\"",
                "$name": "VK_EXT_EXTENSION_484_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_484",
          "$number": 484,
          "$author": "KHR",
          "$contact": "Chris Glover @cdglove",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_QCOM_TILE_PROPERTIES_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_tile_properties\"",
                "$name": "VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM"
              }
            ],
            "command": [
              {
                "$name": "vkGetFramebufferTilePropertiesQCOM"
              },
              {
                "$name": "vkGetDynamicRenderingTilePropertiesQCOM"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceTilePropertiesFeaturesQCOM"
              },
              {
                "$name": "VkTilePropertiesQCOM"
              },
              {
                "$name": "VkRenderingInfoKHR"
              }
            ]
          },
          "$name": "VK_QCOM_tile_properties",
          "$number": 485,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_SEC_AMIGO_PROFILING_SPEC_VERSION"
              },
              {
                "$value": "\"VK_SEC_amigo_profiling\"",
                "$name": "VK_SEC_AMIGO_PROFILING_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceAmigoProfilingFeaturesSEC"
              },
              {
                "$name": "VkAmigoProfilingSubmitInfoSEC"
              }
            ]
          },
          "$name": "VK_SEC_amigo_profiling",
          "$number": 486,
          "$type": "device",
          "$requires": "VK_KHR_get_physical_device_properties2",
          "$author": "SEC",
          "$contact": "Ralph Potter gitlab:@r_potter",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_487_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_487\"",
                "$name": "VK_EXT_EXTENSION_487_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_487",
          "$number": 487,
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_488_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_488\"",
                "$name": "VK_EXT_EXTENSION_488_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_488",
          "$number": 488,
          "$author": "EXT",
          "$contact": "Shahbaz Youssefi @syoussefi",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_QCOM_EXTENSION_489_SPEC_VERSION"
              },
              {
                "$value": "\"VK_QCOM_extension_489\"",
                "$name": "VK_QCOM_EXTENSION_489_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_QCOM_extension_489",
          "$number": 489,
          "$author": "QCOM",
          "$contact": "Jeff Leger @jackohound",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_490_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_490\"",
                "$name": "VK_NV_EXTENSION_490_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_490",
          "$number": 490,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_ray_tracing_invocation_reorder\"",
                "$name": "VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV"
              }
            ],
            "type": [
              {
                "$name": "VkRayTracingInvocationReorderModeNV"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"
              },
              {
                "$name": "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"
              }
            ]
          },
          "$name": "VK_NV_ray_tracing_invocation_reorder",
          "$number": 491,
          "$type": "device",
          "$requires": "VK_KHR_ray_tracing_pipeline",
          "$author": "NV",
          "$contact": "Eric Werness @ewerness-nv",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_492_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_492\"",
                "$name": "VK_NV_EXTENSION_492_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_492",
          "$number": 492,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_493_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_493\"",
                "$name": "VK_NV_EXTENSION_493_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_493",
          "$number": 493,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_494_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_494\"",
                "$name": "VK_NV_EXTENSION_494_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_494",
          "$number": 494,
          "$author": "NV",
          "$contact": "Daniel Koch @dgkoch",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 1,
                "$name": "VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_mutable_descriptor_type\"",
                "$name": "VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$extnumber": 352,
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT"
              },
              {
                "$offset": 2,
                "$extends": "VkStructureType",
                "$extnumber": 352,
                "$name": "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT"
              },
              {
                "$offset": 0,
                "$extends": "VkDescriptorType",
                "$extnumber": 352,
                "$name": "VK_DESCRIPTOR_TYPE_MUTABLE_EXT"
              },
              {
                "$bitpos": 2,
                "$extends": "VkDescriptorPoolCreateFlagBits",
                "$name": "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT"
              },
              {
                "$bitpos": 2,
                "$extends": "VkDescriptorSetLayoutCreateFlagBits",
                "$name": "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"
              },
              {
                "$name": "VkMutableDescriptorTypeListEXT"
              },
              {
                "$name": "VkMutableDescriptorTypeCreateInfoEXT"
              }
            ]
          },
          "$name": "VK_EXT_mutable_descriptor_type",
          "$number": 495,
          "$type": "device",
          "$supported": "vulkan",
          "$author": "EXT",
          "$contact": "Joshua Ashton @Joshua-Ashton,Hans-Kristian Arntzen @HansKristian-Work",
          "$specialuse": "d3demulation",
          "$requires": "VK_KHR_maintenance3"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_496_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_496\"",
                "$name": "VK_EXT_EXTENSION_496_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_496",
          "$number": 496,
          "$author": "EXT",
          "$contact": "Mike Blumenkrantz @zmike",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_497_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_497\"",
                "$name": "VK_EXT_EXTENSION_497_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_497",
          "$number": 497,
          "$author": "EXT",
          "$contact": "Christophe Riccio @christophe",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 2,
                "$name": "VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION"
              },
              {
                "$value": "\"VK_ARM_shader_core_builtins\"",
                "$name": "VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME"
              },
              {
                "$offset": 0,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM"
              },
              {
                "$offset": 1,
                "$extends": "VkStructureType",
                "$name": "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM"
              }
            ],
            "type": [
              {
                "$name": "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"
              },
              {
                "$name": "VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"
              }
            ]
          },
          "$name": "VK_ARM_shader_core_builtins",
          "$number": 498,
          "$author": "ARM",
          "$contact": "Kevin Petit @kevinpetit",
          "$type": "device",
          "$supported": "vulkan"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_499_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_499\"",
                "$name": "VK_EXT_EXTENSION_499_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_499",
          "$number": 499,
          "$author": "EXT",
          "$contact": "Hans-Kristian Arntzen @HansKristian-Work",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_500_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_500\"",
                "$name": "VK_EXT_EXTENSION_500_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_500",
          "$number": 500,
          "$author": "EXT",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_501_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_501\"",
                "$name": "VK_EXT_EXTENSION_501_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_501",
          "$number": 501,
          "$author": "SEC",
          "$contact": "Chris Hambacher @chambacher",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_502_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_502\"",
                "$name": "VK_EXT_EXTENSION_502_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_502",
          "$number": 502,
          "$author": "HUAWEI",
          "$contact": "Pan Gao @PanGao-h",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_EXT_EXTENSION_503_SPEC_VERSION"
              },
              {
                "$value": "\"VK_EXT_extension_503\"",
                "$name": "VK_EXT_EXTENSION_503_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_EXT_extension_503",
          "$number": 503,
          "$author": "HUAWEI",
          "$contact": "Pan Gao @PanGao-h",
          "$type": "device",
          "$supported": "disabled"
        },
        {
          "require": {
            "enum": [
              {
                "$value": 0,
                "$name": "VK_NV_EXTENSION_504_SPEC_VERSION"
              },
              {
                "$value": "\"VK_NV_extension_504\"",
                "$name": "VK_NV_EXTENSION_504_EXTENSION_NAME"
              }
            ]
          },
          "$name": "VK_NV_extension_504",
          "$number": 504,
          "$author": "NV",
          "$contact": "Piers Daniell @pdaniell-nv",
          "$type": "instance",
          "$supported": "disabled"
        }
      ],
      "$comment": "Vulkan extension interface definitions"
    },
    "formats": {
      "format": [
        {
          "component": [
            {
              "$name": "R",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 4,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R4G4_UNORM_PACK8",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1,
          "$packed": 8
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 4,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R4G4B4A4_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 4,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B4G4R4A4_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 6,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 5,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R5G6B5_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 6,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 5,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B5G6R5_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 1,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R5G5B5A1_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 1,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B5G5R5A1_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 1,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 5,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 5,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_A1R5G5B5_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "UNORM"
          },
          "spirvimageformat": {
            "$name": "R8"
          },
          "$name": "VK_FORMAT_R8_UNORM",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "SNORM"
          },
          "spirvimageformat": {
            "$name": "R8Snorm"
          },
          "$name": "VK_FORMAT_R8_SNORM",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "USCALED"
          },
          "$name": "VK_FORMAT_R8_USCALED",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "SSCALED"
          },
          "$name": "VK_FORMAT_R8_SSCALED",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "UINT"
          },
          "spirvimageformat": {
            "$name": "R8ui"
          },
          "$name": "VK_FORMAT_R8_UINT",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "SINT"
          },
          "spirvimageformat": {
            "$name": "R8i"
          },
          "$name": "VK_FORMAT_R8_SINT",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 8,
            "$numericFormat": "SRGB"
          },
          "$name": "VK_FORMAT_R8_SRGB",
          "$class": "8-bit",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg8"
          },
          "$name": "VK_FORMAT_R8G8_UNORM",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg8Snorm"
          },
          "$name": "VK_FORMAT_R8G8_SNORM",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8_USCALED",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8_SSCALED",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg8ui"
          },
          "$name": "VK_FORMAT_R8G8_UINT",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg8i"
          },
          "$name": "VK_FORMAT_R8G8_SINT",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_R8G8_SRGB",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_UNORM",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_SNORM",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_USCALED",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_SSCALED",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_UINT",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_SINT",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8_SRGB",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_UNORM",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_SNORM",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_USCALED",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_SSCALED",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_UINT",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_SINT",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8_SRGB",
          "$class": "24-bit",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba8"
          },
          "$name": "VK_FORMAT_R8G8B8A8_UNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba8Snorm"
          },
          "$name": "VK_FORMAT_R8G8B8A8_SNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8A8_USCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8A8_SSCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba8ui"
          },
          "$name": "VK_FORMAT_R8G8B8A8_UINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba8i"
          },
          "$name": "VK_FORMAT_R8G8B8A8_SINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_R8G8B8A8_SRGB",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_UNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_SNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_USCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_SSCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_UINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_SINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8A8_SRGB",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_UNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_SNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_USCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_UINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SINT"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_SINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "SRGB"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_A8B8G8R8_SRGB_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_UNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_SNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_USCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "UINT"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_UINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SINT"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_A2R10G10B10_SINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgb10A2"
          },
          "$name": "VK_FORMAT_A2B10G10R10_UNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_A2B10G10R10_SNORM_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_A2B10G10R10_USCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UINT"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgb10a2ui"
          },
          "$name": "VK_FORMAT_A2B10G10R10_UINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 2,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "SINT"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_A2B10G10R10_SINT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "UNORM"
          },
          "spirvimageformat": {
            "$name": "R16"
          },
          "$name": "VK_FORMAT_R16_UNORM",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "SNORM"
          },
          "spirvimageformat": {
            "$name": "R16Snorm"
          },
          "$name": "VK_FORMAT_R16_SNORM",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "USCALED"
          },
          "$name": "VK_FORMAT_R16_USCALED",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "SSCALED"
          },
          "$name": "VK_FORMAT_R16_SSCALED",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "UINT"
          },
          "spirvimageformat": {
            "$name": "R16ui"
          },
          "$name": "VK_FORMAT_R16_UINT",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "SINT"
          },
          "spirvimageformat": {
            "$name": "R16i"
          },
          "$name": "VK_FORMAT_R16_SINT",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 16,
            "$numericFormat": "SFLOAT"
          },
          "spirvimageformat": {
            "$name": "R16f"
          },
          "$name": "VK_FORMAT_R16_SFLOAT",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg16"
          },
          "$name": "VK_FORMAT_R16G16_UNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg16Snorm"
          },
          "$name": "VK_FORMAT_R16G16_SNORM",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16_USCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16_SSCALED",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg16ui"
          },
          "$name": "VK_FORMAT_R16G16_UINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg16i"
          },
          "$name": "VK_FORMAT_R16G16_SINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg16f"
          },
          "$name": "VK_FORMAT_R16G16_SFLOAT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_UNORM",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_SNORM",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_USCALED",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_SSCALED",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_UINT",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_SINT",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16_SFLOAT",
          "$class": "48-bit",
          "$blockSize": 6,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "UNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba16"
          },
          "$name": "VK_FORMAT_R16G16B16A16_UNORM",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "SNORM"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba16Snorm"
          },
          "$name": "VK_FORMAT_R16G16B16A16_SNORM",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "USCALED"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "USCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16A16_USCALED",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "SSCALED"
            }
          ],
          "$name": "VK_FORMAT_R16G16B16A16_SSCALED",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UINT"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba16ui"
          },
          "$name": "VK_FORMAT_R16G16B16A16_UINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba16i"
          },
          "$name": "VK_FORMAT_R16G16B16A16_SINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": 16,
              "$numericFormat": "SFLOAT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba16f"
          },
          "$name": "VK_FORMAT_R16G16B16A16_SFLOAT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 32,
            "$numericFormat": "UINT"
          },
          "spirvimageformat": {
            "$name": "R32ui"
          },
          "$name": "VK_FORMAT_R32_UINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 32,
            "$numericFormat": "SINT"
          },
          "spirvimageformat": {
            "$name": "R32i"
          },
          "$name": "VK_FORMAT_R32_SINT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 32,
            "$numericFormat": "SFLOAT"
          },
          "spirvimageformat": {
            "$name": "R32f"
          },
          "$name": "VK_FORMAT_R32_SFLOAT",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg32ui"
          },
          "$name": "VK_FORMAT_R32G32_UINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg32i"
          },
          "$name": "VK_FORMAT_R32G32_SINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rg32f"
          },
          "$name": "VK_FORMAT_R32G32_SFLOAT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R32G32B32_UINT",
          "$class": "96-bit",
          "$blockSize": 12,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R32G32B32_SINT",
          "$class": "96-bit",
          "$blockSize": 12,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_R32G32B32_SFLOAT",
          "$class": "96-bit",
          "$blockSize": 12,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "UINT"
            },
            {
              "$name": "A",
              "$bits": 32,
              "$numericFormat": "UINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba32ui"
          },
          "$name": "VK_FORMAT_R32G32B32A32_UINT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "SINT"
            },
            {
              "$name": "A",
              "$bits": 32,
              "$numericFormat": "SINT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba32i"
          },
          "$name": "VK_FORMAT_R32G32B32A32_SINT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            }
          ],
          "spirvimageformat": {
            "$name": "Rgba32f"
          },
          "$name": "VK_FORMAT_R32G32B32A32_SFLOAT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 64,
            "$numericFormat": "UINT"
          },
          "spirvimageformat": {
            "$name": "R64ui"
          },
          "$name": "VK_FORMAT_R64_UINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 64,
            "$numericFormat": "SINT"
          },
          "spirvimageformat": {
            "$name": "R64i"
          },
          "$name": "VK_FORMAT_R64_SINT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "R",
            "$bits": 64,
            "$numericFormat": "SFLOAT"
          },
          "$name": "VK_FORMAT_R64_SFLOAT",
          "$class": "64-bit",
          "$blockSize": 8,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64_UINT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64_SINT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_R64G64_SFLOAT",
          "$class": "128-bit",
          "$blockSize": 16,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64_UINT",
          "$class": "192-bit",
          "$blockSize": 24,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64_SINT",
          "$class": "192-bit",
          "$blockSize": 24,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64_SFLOAT",
          "$class": "192-bit",
          "$blockSize": 24,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "UINT"
            },
            {
              "$name": "A",
              "$bits": 64,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64A64_UINT",
          "$class": "256-bit",
          "$blockSize": 32,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SINT"
            },
            {
              "$name": "A",
              "$bits": 64,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64A64_SINT",
          "$class": "256-bit",
          "$blockSize": 32,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": 64,
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_R64G64B64A64_SFLOAT",
          "$class": "256-bit",
          "$blockSize": 32,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "G",
              "$bits": 11,
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UFLOAT"
            }
          ],
          "spirvimageformat": {
            "$name": "R11fG11fB10f"
          },
          "$name": "VK_FORMAT_B10G11R11_UFLOAT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 9,
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "G",
              "$bits": 9,
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "R",
              "$bits": 9,
              "$numericFormat": "UFLOAT"
            }
          ],
          "$name": "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": {
            "$name": "D",
            "$bits": 16,
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_D16_UNORM",
          "$class": "D16",
          "$blockSize": 2,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "D",
            "$bits": 24,
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_X8_D24_UNORM_PACK32",
          "$class": "D24",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 32
        },
        {
          "component": {
            "$name": "D",
            "$bits": 32,
            "$numericFormat": "SFLOAT"
          },
          "$name": "VK_FORMAT_D32_SFLOAT",
          "$class": "D32",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": {
            "$name": "S",
            "$bits": 8,
            "$numericFormat": "UINT"
          },
          "$name": "VK_FORMAT_S8_UINT",
          "$class": "S8",
          "$blockSize": 1,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "D",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "S",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_D16_UNORM_S8_UINT",
          "$class": "D16S8",
          "$blockSize": 3,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "D",
              "$bits": 24,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "S",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_D24_UNORM_S8_UINT",
          "$class": "D24S8",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "D",
              "$bits": 32,
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "S",
              "$bits": 8,
              "$numericFormat": "UINT"
            }
          ],
          "$name": "VK_FORMAT_D32_SFLOAT_S8_UINT",
          "$class": "D32S8",
          "$blockSize": 5,
          "$texelsPerBlock": 1
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC1_RGB_UNORM_BLOCK",
          "$class": "BC1_RGB",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC1_RGB_SRGB_BLOCK",
          "$class": "BC1_RGB",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
          "$class": "BC1_RGBA",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
          "$class": "BC1_RGBA",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC2_UNORM_BLOCK",
          "$class": "BC2",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC2_SRGB_BLOCK",
          "$class": "BC2",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC3_UNORM_BLOCK",
          "$class": "BC3",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC3_SRGB_BLOCK",
          "$class": "BC3",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": {
            "$name": "R",
            "$bits": "compressed",
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_BC4_UNORM_BLOCK",
          "$class": "BC4",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": {
            "$name": "R",
            "$bits": "compressed",
            "$numericFormat": "SRGB"
          },
          "$name": "VK_FORMAT_BC4_SNORM_BLOCK",
          "$class": "BC4",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC5_UNORM_BLOCK",
          "$class": "BC5",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC5_SNORM_BLOCK",
          "$class": "BC5",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UFLOAT"
            }
          ],
          "$name": "VK_FORMAT_BC6H_UFLOAT_BLOCK",
          "$class": "BC6H",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_BC6H_SFLOAT_BLOCK",
          "$class": "BC6H",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_BC7_UNORM_BLOCK",
          "$class": "BC7",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_BC7_SRGB_BLOCK",
          "$class": "BC7",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "BC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
          "$class": "ETC2_RGB",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
          "$class": "ETC2_RGB",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
          "$class": "ETC2_RGBA",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
          "$class": "ETC2_RGBA",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
          "$class": "ETC2_EAC_RGBA",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
          "$class": "ETC2_EAC_RGBA",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ETC2"
        },
        {
          "component": {
            "$name": "R",
            "$bits": 11,
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_EAC_R11_UNORM_BLOCK",
          "$class": "EAC_R",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "EAC"
        },
        {
          "component": {
            "$name": "R",
            "$bits": 11,
            "$numericFormat": "SNORM"
          },
          "$name": "VK_FORMAT_EAC_R11_SNORM_BLOCK",
          "$class": "EAC_R",
          "$blockSize": 8,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "EAC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 11,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 11,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
          "$class": "EAC_RG",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "EAC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 11,
              "$numericFormat": "SNORM"
            },
            {
              "$name": "G",
              "$bits": 11,
              "$numericFormat": "SNORM"
            }
          ],
          "$name": "VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
          "$class": "EAC_RG",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "EAC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
          "$class": "ASTC_4x4",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
          "$class": "ASTC_4x4",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
          "$class": "ASTC_5x4",
          "$blockSize": 16,
          "$texelsPerBlock": 20,
          "$blockExtent": "5,4,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
          "$class": "ASTC_5x4",
          "$blockSize": 16,
          "$texelsPerBlock": 20,
          "$blockExtent": "5,4,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
          "$class": "ASTC_5x5",
          "$blockSize": 16,
          "$texelsPerBlock": 25,
          "$blockExtent": "5,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
          "$class": "ASTC_5x5",
          "$blockSize": 16,
          "$texelsPerBlock": 25,
          "$blockExtent": "5,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
          "$class": "ASTC_6x5",
          "$blockSize": 16,
          "$texelsPerBlock": 30,
          "$blockExtent": "6,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
          "$class": "ASTC_6x5",
          "$blockSize": 16,
          "$texelsPerBlock": 30,
          "$blockExtent": "6,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
          "$class": "ASTC_6x6",
          "$blockSize": 16,
          "$texelsPerBlock": 36,
          "$blockExtent": "6,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
          "$class": "ASTC_6x6",
          "$blockSize": 16,
          "$texelsPerBlock": 36,
          "$blockExtent": "6,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
          "$class": "ASTC_8x5",
          "$blockSize": 16,
          "$texelsPerBlock": 40,
          "$blockExtent": "8,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
          "$class": "ASTC_8x5",
          "$blockSize": 16,
          "$texelsPerBlock": 40,
          "$blockExtent": "8,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
          "$class": "ASTC_8x6",
          "$blockSize": 16,
          "$texelsPerBlock": 48,
          "$blockExtent": "8,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
          "$class": "ASTC_8x6",
          "$blockSize": 16,
          "$texelsPerBlock": 48,
          "$blockExtent": "8,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
          "$class": "ASTC_8x8",
          "$blockSize": 16,
          "$texelsPerBlock": 64,
          "$blockExtent": "8,8,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
          "$class": "ASTC_8x8",
          "$blockSize": 16,
          "$texelsPerBlock": 64,
          "$blockExtent": "8,8,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
          "$class": "ASTC_10x5",
          "$blockSize": 16,
          "$texelsPerBlock": 50,
          "$blockExtent": "10,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
          "$class": "ASTC_10x5",
          "$blockSize": 16,
          "$texelsPerBlock": 50,
          "$blockExtent": "10,5,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
          "$class": "ASTC_10x6",
          "$blockSize": 16,
          "$texelsPerBlock": 60,
          "$blockExtent": "10,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
          "$class": "ASTC_10x6",
          "$blockSize": 16,
          "$texelsPerBlock": 60,
          "$blockExtent": "10,6,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
          "$class": "ASTC_10x8",
          "$blockSize": 16,
          "$texelsPerBlock": 80,
          "$blockExtent": "10,8,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
          "$class": "ASTC_10x8",
          "$blockSize": 16,
          "$texelsPerBlock": 80,
          "$blockExtent": "10,8,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
          "$class": "ASTC_10x10",
          "$blockSize": 16,
          "$texelsPerBlock": 100,
          "$blockExtent": "10,10,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
          "$class": "ASTC_10x10",
          "$blockSize": 16,
          "$texelsPerBlock": 100,
          "$blockExtent": "10,10,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
          "$class": "ASTC_12x10",
          "$blockSize": 16,
          "$texelsPerBlock": 120,
          "$blockExtent": "12,10,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
          "$class": "ASTC_12x10",
          "$blockSize": 16,
          "$texelsPerBlock": 120,
          "$blockExtent": "12,10,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
          "$class": "ASTC_12x12",
          "$blockSize": 16,
          "$texelsPerBlock": 144,
          "$blockExtent": "12,12,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
          "$class": "ASTC_12x12",
          "$blockSize": 16,
          "$texelsPerBlock": 144,
          "$blockExtent": "12,12,1",
          "$compressed": "ASTC LDR"
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8B8G8R8_422_UNORM",
          "$class": "32-bit G8B8G8R8",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B8G8R8G8_422_UNORM",
          "$class": "32-bit B8G8R8G8",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
          "$class": "8-bit 3-plane 420",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R8G8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
          "$class": "8-bit 2-plane 420",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
          "$class": "8-bit 3-plane 422",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8G8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
          "$class": "8-bit 2-plane 422",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
          "$class": "8-bit 3-plane 444",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 444
        },
        {
          "component": {
            "$name": "R",
            "$bits": 10,
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_R10X6_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
          "$class": "64-bit R10G10B10A10",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
          "$class": "64-bit G10B10G10R10",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
          "$class": "64-bit B10G10R10G10",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
          "$class": "10-bit 3-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
          "$class": "10-bit 2-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
          "$class": "10-bit 3-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
          "$class": "10-bit 2-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
          "$class": "10-bit 3-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": {
            "$name": "R",
            "$bits": 12,
            "$numericFormat": "UNORM"
          },
          "$name": "VK_FORMAT_R12X4_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": 12,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
          "$class": "64-bit R12G12B12A12",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
          "$class": "64-bit G12B12G12R12",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
          "$class": "64-bit B12G12R12G12",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
          "$class": "12-bit 3-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
          "$class": "12-bit 2-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
          "$class": "12-bit 3-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
          "$class": "12-bit 2-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 2,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
          "$class": "12-bit 3-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16B16G16R16_422_UNORM",
          "$class": "64-bit G16B16G16R16",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_B16G16R16G16_422_UNORM",
          "$class": "64-bit B16G16R16G16",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "2,1,1",
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
          "$class": "16-bit 3-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 2,
              "$compatible": "VK_FORMAT_R16G16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
          "$class": "16-bit 2-plane 420",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 420
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
          "$class": "16-bit 3-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 2,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16G16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
          "$class": "16-bit 2-plane 422",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 422
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 2
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 2,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
          "$class": "16-bit 3-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
          "$class": "PVRTC1_2BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "8,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
          "$class": "PVRTC1_4BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "4,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
          "$class": "PVRTC2_2BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "8,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
          "$class": "PVRTC2_4BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "4,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
          "$class": "PVRTC1_2BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "8,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
          "$class": "PVRTC1_4BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "4,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
          "$class": "PVRTC2_2BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "8,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SRGB"
            }
          ],
          "$name": "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
          "$class": "PVRTC2_4BPP",
          "$blockSize": 8,
          "$texelsPerBlock": 1,
          "$blockExtent": "4,4,1",
          "$compressed": "PVRTC"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK",
          "$class": "ASTC_4x4",
          "$blockSize": 16,
          "$texelsPerBlock": 16,
          "$blockExtent": "4,4,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK",
          "$class": "ASTC_5x4",
          "$blockSize": 16,
          "$texelsPerBlock": 20,
          "$blockExtent": "5,4,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK",
          "$class": "ASTC_5x5",
          "$blockSize": 16,
          "$texelsPerBlock": 25,
          "$blockExtent": "5,5,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK",
          "$class": "ASTC_6x5",
          "$blockSize": 16,
          "$texelsPerBlock": 30,
          "$blockExtent": "6,5,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK",
          "$class": "ASTC_6x6",
          "$blockSize": 16,
          "$texelsPerBlock": 36,
          "$blockExtent": "6,6,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK",
          "$class": "ASTC_8x5",
          "$blockSize": 16,
          "$texelsPerBlock": 40,
          "$blockExtent": "8,5,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK",
          "$class": "ASTC_8x6",
          "$blockSize": 16,
          "$texelsPerBlock": 48,
          "$blockExtent": "8,6,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK",
          "$class": "ASTC_8x8",
          "$blockSize": 16,
          "$texelsPerBlock": 64,
          "$blockExtent": "8,8,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK",
          "$class": "ASTC_10x5",
          "$blockSize": 16,
          "$texelsPerBlock": 50,
          "$blockExtent": "10,5,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK",
          "$class": "ASTC_10x6",
          "$blockSize": 16,
          "$texelsPerBlock": 60,
          "$blockExtent": "10,6,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK",
          "$class": "ASTC_10x8",
          "$blockSize": 16,
          "$texelsPerBlock": 80,
          "$blockExtent": "10,8,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK",
          "$class": "ASTC_10x10",
          "$blockSize": 16,
          "$texelsPerBlock": 100,
          "$blockExtent": "10,10,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK",
          "$class": "ASTC_12x10",
          "$blockSize": 16,
          "$texelsPerBlock": 120,
          "$blockExtent": "12,10,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "G",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "B",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            },
            {
              "$name": "A",
              "$bits": "compressed",
              "$numericFormat": "SFLOAT"
            }
          ],
          "$name": "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK",
          "$class": "ASTC_12x12",
          "$blockSize": 16,
          "$texelsPerBlock": 144,
          "$blockExtent": "12,12,1",
          "$compressed": "ASTC HDR"
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 8,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R8G8_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM",
          "$class": "8-bit 2-plane 444",
          "$blockSize": 3,
          "$texelsPerBlock": 1,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 10,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16",
          "$class": "10-bit 2-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 12,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4_UNORM_PACK16"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"
            }
          ],
          "$name": "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16",
          "$class": "12-bit 2-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$packed": 16,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 0
            },
            {
              "$name": "B",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            },
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "UNORM",
              "$planeIndex": 1
            }
          ],
          "plane": [
            {
              "$index": 0,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16_UNORM"
            },
            {
              "$index": 1,
              "$widthDivisor": 1,
              "$heightDivisor": 1,
              "$compatible": "VK_FORMAT_R16G16_UNORM"
            }
          ],
          "$name": "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM",
          "$class": "16-bit 2-plane 444",
          "$blockSize": 6,
          "$texelsPerBlock": 1,
          "$chroma": 444
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 4,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_A4R4G4B4_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "A",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "B",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "G",
              "$bits": 4,
              "$numericFormat": "UNORM"
            },
            {
              "$name": "R",
              "$bits": 4,
              "$numericFormat": "UNORM"
            }
          ],
          "$name": "VK_FORMAT_A4B4G4R4_UNORM_PACK16",
          "$class": "16-bit",
          "$blockSize": 2,
          "$texelsPerBlock": 1,
          "$packed": 16
        },
        {
          "component": [
            {
              "$name": "R",
              "$bits": 16,
              "$numericFormat": "SINT"
            },
            {
              "$name": "G",
              "$bits": 16,
              "$numericFormat": "SINT"
            }
          ],
          "$name": "VK_FORMAT_R16G16_S10_5_NV",
          "$class": "32-bit",
          "$blockSize": 4,
          "$texelsPerBlock": 1
        }
      ]
    },
    "spirvextensions": {
      "spirvextension": [
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_variable_pointers"
            }
          ],
          "$name": "SPV_KHR_variable_pointers"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_explicit_vertex_parameter"
          },
          "$name": "SPV_AMD_shader_explicit_vertex_parameter"
        },
        {
          "enable": {
            "$extension": "VK_AMD_gcn_shader"
          },
          "$name": "SPV_AMD_gcn_shader"
        },
        {
          "enable": {
            "$extension": "VK_AMD_gpu_shader_half_float"
          },
          "$name": "SPV_AMD_gpu_shader_half_float"
        },
        {
          "enable": {
            "$extension": "VK_AMD_gpu_shader_int16"
          },
          "$name": "SPV_AMD_gpu_shader_int16"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_ballot"
          },
          "$name": "SPV_AMD_shader_ballot"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_fragment_mask"
          },
          "$name": "SPV_AMD_shader_fragment_mask"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_image_load_store_lod"
          },
          "$name": "SPV_AMD_shader_image_load_store_lod"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_trinary_minmax"
          },
          "$name": "SPV_AMD_shader_trinary_minmax"
        },
        {
          "enable": {
            "$extension": "VK_AMD_texture_gather_bias_lod"
          },
          "$name": "SPV_AMD_texture_gather_bias_lod"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_early_and_late_fragment_tests"
          },
          "$name": "SPV_AMD_shader_early_and_late_fragment_tests"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_shader_draw_parameters"
            }
          ],
          "$name": "SPV_KHR_shader_draw_parameters"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_KHR_8bit_storage"
            }
          ],
          "$name": "SPV_KHR_8bit_storage"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_16bit_storage"
            }
          ],
          "$name": "SPV_KHR_16bit_storage"
        },
        {
          "enable": {
            "$extension": "VK_KHR_shader_clock"
          },
          "$name": "SPV_KHR_shader_clock"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_KHR_shader_float_controls"
            }
          ],
          "$name": "SPV_KHR_float_controls"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_storage_buffer_storage_class"
            }
          ],
          "$name": "SPV_KHR_storage_buffer_storage_class"
        },
        {
          "enable": {
            "$extension": "VK_EXT_post_depth_coverage"
          },
          "$name": "SPV_KHR_post_depth_coverage"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_stencil_export"
          },
          "$name": "SPV_EXT_shader_stencil_export"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_subgroup_ballot"
          },
          "$name": "SPV_KHR_shader_ballot"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_subgroup_vote"
          },
          "$name": "SPV_KHR_subgroup_vote"
        },
        {
          "enable": {
            "$extension": "VK_NV_sample_mask_override_coverage"
          },
          "$name": "SPV_NV_sample_mask_override_coverage"
        },
        {
          "enable": {
            "$extension": "VK_NV_geometry_shader_passthrough"
          },
          "$name": "SPV_NV_geometry_shader_passthrough"
        },
        {
          "enable": {
            "$extension": "VK_NV_mesh_shader"
          },
          "$name": "SPV_NV_mesh_shader"
        },
        {
          "enable": {
            "$extension": "VK_NV_viewport_array2"
          },
          "$name": "SPV_NV_viewport_array2"
        },
        {
          "enable": {
            "$extension": "VK_NV_shader_subgroup_partitioned"
          },
          "$name": "SPV_NV_shader_subgroup_partitioned"
        },
        {
          "enable": {
            "$extension": "VK_NV_ray_tracing_invocation_reorder"
          },
          "$name": "SPV_NV_shader_invocation_reorder"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_EXT_shader_viewport_index_layer"
            }
          ],
          "$name": "SPV_EXT_shader_viewport_index_layer"
        },
        {
          "enable": {
            "$extension": "VK_NVX_multiview_per_view_attributes"
          },
          "$name": "SPV_NVX_multiview_per_view_attributes"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_EXT_descriptor_indexing"
            }
          ],
          "$name": "SPV_EXT_descriptor_indexing"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_KHR_vulkan_memory_model"
            }
          ],
          "$name": "SPV_KHR_vulkan_memory_model"
        },
        {
          "enable": {
            "$extension": "VK_NV_compute_shader_derivatives"
          },
          "$name": "SPV_NV_compute_shader_derivatives"
        },
        {
          "enable": {
            "$extension": "VK_NV_fragment_shader_barycentric"
          },
          "$name": "SPV_NV_fragment_shader_barycentric"
        },
        {
          "enable": {
            "$extension": "VK_NV_shader_image_footprint"
          },
          "$name": "SPV_NV_shader_image_footprint"
        },
        {
          "enable": {
            "$extension": "VK_NV_shading_rate_image"
          },
          "$name": "SPV_NV_shading_rate"
        },
        {
          "enable": {
            "$extension": "VK_NV_ray_tracing"
          },
          "$name": "SPV_NV_ray_tracing"
        },
        {
          "enable": {
            "$extension": "VK_KHR_ray_tracing_pipeline"
          },
          "$name": "SPV_KHR_ray_tracing"
        },
        {
          "enable": {
            "$extension": "VK_KHR_ray_query"
          },
          "$name": "SPV_KHR_ray_query"
        },
        {
          "enable": {
            "$extension": "VK_KHR_ray_tracing_maintenance1"
          },
          "$name": "SPV_KHR_ray_cull_mask"
        },
        {
          "enable": {
            "$extension": "VK_GOOGLE_hlsl_functionality1"
          },
          "$name": "SPV_GOOGLE_hlsl_functionality1"
        },
        {
          "enable": {
            "$extension": "VK_GOOGLE_user_type"
          },
          "$name": "SPV_GOOGLE_user_type"
        },
        {
          "enable": {
            "$extension": "VK_GOOGLE_decorate_string"
          },
          "$name": "SPV_GOOGLE_decorate_string"
        },
        {
          "enable": {
            "$extension": "VK_EXT_fragment_density_map"
          },
          "$name": "SPV_EXT_fragment_invocation_density"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_KHR_buffer_device_address"
            }
          ],
          "$name": "SPV_KHR_physical_storage_buffer"
        },
        {
          "enable": {
            "$extension": "VK_EXT_buffer_device_address"
          },
          "$name": "SPV_EXT_physical_storage_buffer"
        },
        {
          "enable": {
            "$extension": "VK_NV_cooperative_matrix"
          },
          "$name": "SPV_NV_cooperative_matrix"
        },
        {
          "enable": {
            "$extension": "VK_NV_shader_sm_builtins"
          },
          "$name": "SPV_NV_shader_sm_builtins"
        },
        {
          "enable": {
            "$extension": "VK_EXT_fragment_shader_interlock"
          },
          "$name": "SPV_EXT_fragment_shader_interlock"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_EXT_shader_demote_to_helper_invocation"
            }
          ],
          "$name": "SPV_EXT_demote_to_helper_invocation"
        },
        {
          "enable": {
            "$extension": "VK_KHR_fragment_shading_rate"
          },
          "$name": "SPV_KHR_fragment_shading_rate"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_shader_non_semantic_info"
            }
          ],
          "$name": "SPV_KHR_non_semantic_info"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_image_atomic_int64"
          },
          "$name": "SPV_EXT_shader_image_int64"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_shader_terminate_invocation"
            }
          ],
          "$name": "SPV_KHR_terminate_invocation"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_multiview"
            }
          ],
          "$name": "SPV_KHR_multiview"
        },
        {
          "enable": {
            "$extension": "VK_KHR_workgroup_memory_explicit_layout"
          },
          "$name": "SPV_KHR_workgroup_memory_explicit_layout"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_atomic_float"
          },
          "$name": "SPV_EXT_shader_atomic_float_add"
        },
        {
          "enable": {
            "$extension": "VK_KHR_fragment_shader_barycentric"
          },
          "$name": "SPV_KHR_fragment_shader_barycentric"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_shader_subgroup_uniform_control_flow"
            }
          ],
          "$name": "SPV_KHR_subgroup_uniform_control_flow"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_atomic_float2"
          },
          "$name": "SPV_EXT_shader_atomic_float_min_max"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_atomic_float2"
          },
          "$name": "SPV_EXT_shader_atomic_float16_add"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_shader_integer_dot_product"
            }
          ],
          "$name": "SPV_KHR_integer_dot_product"
        },
        {
          "enable": {
            "$extension": "VK_INTEL_shader_integer_functions2"
          },
          "$name": "SPV_INTEL_shader_integer_functions"
        },
        {
          "enable": [
            {
              "$version": "VK_API_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_device_group"
            }
          ],
          "$name": "SPV_KHR_device_group"
        },
        {
          "enable": {
            "$extension": "VK_QCOM_image_processing"
          },
          "$name": "SPV_QCOM_image_processing"
        },
        {
          "enable": {
            "$extension": "VK_EXT_mesh_shader"
          },
          "$name": "SPV_EXT_mesh_shader"
        }
      ],
      "$comment": "SPIR-V Extensions allowed in Vulkan and what is required to use it"
    },
    "spirvcapabilities": {
      "spirvcapability": [
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "Matrix"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "Shader"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "InputAttachment"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "Sampled1D"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "Image1D"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "SampledBuffer"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "ImageBuffer"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "ImageQuery"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "DerivativeControl"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "geometryShader",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "Geometry"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "tessellationShader",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "Tessellation"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderFloat64",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "Float64"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderInt64",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "Int64"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan12Features",
              "$feature": "shaderBufferInt64Atomics",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_atomic_int64"
            },
            {
              "$struct": "VkPhysicalDeviceVulkan12Features",
              "$feature": "shaderSharedInt64Atomics",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_atomic_int64"
            },
            {
              "$struct": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
              "$feature": "shaderImageInt64Atomics",
              "$requires": "VK_EXT_shader_image_atomic_int64"
            }
          ],
          "$name": "Int64Atomics"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderBufferFloat16AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderSharedFloat16AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float2"
            }
          ],
          "$name": "AtomicFloat16AddEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
              "$feature": "shaderBufferFloat32AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
              "$feature": "shaderSharedFloat32AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
              "$feature": "shaderImageFloat32AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float"
            }
          ],
          "$name": "AtomicFloat32AddEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
              "$feature": "shaderBufferFloat64AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
              "$feature": "shaderSharedFloat64AtomicAdd",
              "$requires": "VK_EXT_shader_atomic_float"
            }
          ],
          "$name": "AtomicFloat64AddEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderBufferFloat16AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderSharedFloat16AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            }
          ],
          "$name": "AtomicFloat16MinMaxEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderBufferFloat32AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderSharedFloat32AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderImageFloat32AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            }
          ],
          "$name": "AtomicFloat32MinMaxEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderBufferFloat64AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
              "$feature": "shaderSharedFloat64AtomicMinMax",
              "$requires": "VK_EXT_shader_atomic_float2"
            }
          ],
          "$name": "AtomicFloat64MinMaxEXT"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
            "$feature": "shaderImageInt64Atomics",
            "$requires": "VK_EXT_shader_image_atomic_int64"
          },
          "$name": "Int64ImageEXT"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderInt16",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "Int16"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderTessellationAndGeometryPointSize",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "TessellationPointSize"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderTessellationAndGeometryPointSize",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "GeometryPointSize"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderImageGatherExtended",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "ImageGatherExtended"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderStorageImageMultisample",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "StorageImageMultisample"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderUniformBufferArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "UniformBufferArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderSampledImageArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "SampledImageArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderStorageBufferArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "StorageBufferArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderStorageImageArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "StorageImageArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderClipDistance",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "ClipDistance"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderCullDistance",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "CullDistance"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "imageCubeArray",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "ImageCubeArray"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "sampleRateShading",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "SampleRateShading"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderResourceResidency",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "SparseResidency"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderResourceMinLod",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "MinLod"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "imageCubeArray",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "SampledCubeArray"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "shaderStorageImageMultisample",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "ImageMSArray"
        },
        {
          "enable": {
            "$version": "VK_VERSION_1_0"
          },
          "$name": "StorageImageExtendedFormats"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "sampleRateShading",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "InterpolationFunction"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceFeatures",
              "$feature": "shaderStorageImageReadWithoutFormat",
              "$requires": "VK_VERSION_1_0"
            },
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "StorageImageReadWithoutFormat"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceFeatures",
              "$feature": "shaderStorageImageWriteWithoutFormat",
              "$requires": "VK_VERSION_1_0"
            },
            {
              "$version": "VK_API_VERSION_1_3"
            },
            {
              "$extension": "VK_KHR_format_feature_flags2"
            }
          ],
          "$name": "StorageImageWriteWithoutFormat"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFeatures",
            "$feature": "multiViewport",
            "$requires": "VK_VERSION_1_0"
          },
          "$name": "MultiViewport"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "shaderDrawParameters",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDeviceShaderDrawParametersFeatures",
              "$feature": "shaderDrawParameters",
              "$requires": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_shader_draw_parameters"
            }
          ],
          "$name": "DrawParameters"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "multiview",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDeviceMultiviewFeatures",
              "$feature": "multiview",
              "$requires": "VK_KHR_multiview"
            }
          ],
          "$name": "MultiView"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_1"
            },
            {
              "$extension": "VK_KHR_device_group"
            }
          ],
          "$name": "DeviceGroup"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "variablePointersStorageBuffer",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDeviceVariablePointersFeatures",
              "$feature": "variablePointersStorageBuffer",
              "$requires": "VK_KHR_variable_pointers"
            }
          ],
          "$name": "VariablePointersStorageBuffer"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "variablePointers",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDeviceVariablePointersFeatures",
              "$feature": "variablePointers",
              "$requires": "VK_KHR_variable_pointers"
            }
          ],
          "$name": "VariablePointers"
        },
        {
          "enable": {
            "$extension": "VK_KHR_shader_clock"
          },
          "$name": "ShaderClockKHR"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_stencil_export"
          },
          "$name": "StencilExportEXT"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_subgroup_ballot"
          },
          "$name": "SubgroupBallotKHR"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_subgroup_vote"
          },
          "$name": "SubgroupVoteKHR"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_image_load_store_lod"
          },
          "$name": "ImageReadWriteLodAMD"
        },
        {
          "enable": {
            "$extension": "VK_AMD_texture_gather_bias_lod"
          },
          "$name": "ImageGatherBiasLodAMD"
        },
        {
          "enable": {
            "$extension": "VK_AMD_shader_fragment_mask"
          },
          "$name": "FragmentMaskAMD"
        },
        {
          "enable": {
            "$extension": "VK_NV_sample_mask_override_coverage"
          },
          "$name": "SampleMaskOverrideCoverageNV"
        },
        {
          "enable": {
            "$extension": "VK_NV_geometry_shader_passthrough"
          },
          "$name": "GeometryShaderPassthroughNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderOutputViewportIndex",
            "$requires": "VK_VERSION_1_2"
          },
          "$name": "ShaderViewportIndex"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderOutputLayer",
            "$requires": "VK_VERSION_1_2"
          },
          "$name": "ShaderLayer"
        },
        {
          "enable": {
            "$extension": "VK_EXT_shader_viewport_index_layer"
          },
          "$name": "ShaderViewportIndexLayerEXT"
        },
        {
          "enable": {
            "$extension": "VK_NV_viewport_array2"
          },
          "$name": "ShaderViewportIndexLayerNV"
        },
        {
          "enable": {
            "$extension": "VK_NV_viewport_array2"
          },
          "$name": "ShaderViewportMaskNV"
        },
        {
          "enable": {
            "$extension": "VK_NVX_multiview_per_view_attributes"
          },
          "$name": "PerViewAttributesNV"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "storageBuffer16BitAccess",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDevice16BitStorageFeatures",
              "$feature": "storageBuffer16BitAccess",
              "$requires": "VK_KHR_16bit_storage"
            }
          ],
          "$name": "StorageBuffer16BitAccess"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "uniformAndStorageBuffer16BitAccess",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDevice16BitStorageFeatures",
              "$feature": "uniformAndStorageBuffer16BitAccess",
              "$requires": "VK_KHR_16bit_storage"
            }
          ],
          "$name": "UniformAndStorageBuffer16BitAccess"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "storagePushConstant16",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDevice16BitStorageFeatures",
              "$feature": "storagePushConstant16",
              "$requires": "VK_KHR_16bit_storage"
            }
          ],
          "$name": "StoragePushConstant16"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan11Features",
              "$feature": "storageInputOutput16",
              "$requires": "VK_VERSION_1_2"
            },
            {
              "$struct": "VkPhysicalDevice16BitStorageFeatures",
              "$feature": "storageInputOutput16",
              "$requires": "VK_KHR_16bit_storage"
            }
          ],
          "$name": "StorageInputOutput16"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_BASIC_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniform"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_VOTE_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformVote"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformArithmetic"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_BALLOT_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformBallot"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_SHUFFLE_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformShuffle"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformShuffleRelative"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_CLUSTERED_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformClustered"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_QUAD_BIT",
            "$requires": "VK_VERSION_1_1"
          },
          "$name": "GroupNonUniformQuad"
        },
        {
          "enable": {
            "$property": "VkPhysicalDeviceVulkan11Properties",
            "$member": "subgroupSupportedOperations",
            "$value": "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV",
            "$requires": "VK_NV_shader_subgroup_partitioned"
          },
          "$name": "GroupNonUniformPartitionedNV"
        },
        {
          "enable": {
            "$extension": "VK_EXT_post_depth_coverage"
          },
          "$name": "SampleMaskPostDepthCoverage"
        },
        {
          "enable": [
            {
              "$version": "VK_VERSION_1_2"
            },
            {
              "$extension": "VK_EXT_descriptor_indexing"
            }
          ],
          "$name": "ShaderNonUniform"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "runtimeDescriptorArray",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "RuntimeDescriptorArray"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderInputAttachmentArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "InputAttachmentArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderUniformTexelBufferArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "UniformTexelBufferArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderStorageTexelBufferArrayDynamicIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "StorageTexelBufferArrayDynamicIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderUniformBufferArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "UniformBufferArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderSampledImageArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "SampledImageArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderStorageBufferArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "StorageBufferArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderStorageImageArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "StorageImageArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderInputAttachmentArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "InputAttachmentArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderUniformTexelBufferArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "UniformTexelBufferArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderStorageTexelBufferArrayNonUniformIndexing",
            "$requires": "VK_VERSION_1_2,VK_EXT_descriptor_indexing"
          },
          "$name": "StorageTexelBufferArrayNonUniformIndexing"
        },
        {
          "enable": {
            "$extension": "VK_EXT_conservative_rasterization"
          },
          "$name": "FragmentFullyCoveredEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan12Features",
              "$feature": "shaderFloat16",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float16_int8"
            },
            {
              "$extension": "VK_AMD_gpu_shader_half_float"
            }
          ],
          "$name": "Float16"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "shaderInt8",
            "$requires": "VK_VERSION_1_2,VK_KHR_shader_float16_int8"
          },
          "$name": "Int8"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "storageBuffer8BitAccess",
            "$requires": "VK_VERSION_1_2,VK_KHR_8bit_storage"
          },
          "$name": "StorageBuffer8BitAccess"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "uniformAndStorageBuffer8BitAccess",
            "$requires": "VK_VERSION_1_2,VK_KHR_8bit_storage"
          },
          "$name": "UniformAndStorageBuffer8BitAccess"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "storagePushConstant8",
            "$requires": "VK_VERSION_1_2,VK_KHR_8bit_storage"
          },
          "$name": "StoragePushConstant8"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "vulkanMemoryModel",
            "$requires": "VK_VERSION_1_2,VK_KHR_vulkan_memory_model"
          },
          "$name": "VulkanMemoryModel"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceVulkan12Features",
            "$feature": "vulkanMemoryModelDeviceScope",
            "$requires": "VK_VERSION_1_2,VK_KHR_vulkan_memory_model"
          },
          "$name": "VulkanMemoryModelDeviceScope"
        },
        {
          "enable": [
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormPreserveFloat16",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormPreserveFloat32",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormPreserveFloat64",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            }
          ],
          "$name": "DenormPreserve"
        },
        {
          "enable": [
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormFlushToZeroFloat16",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormFlushToZeroFloat32",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderDenormFlushToZeroFloat64",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            }
          ],
          "$name": "DenormFlushToZero"
        },
        {
          "enable": [
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderSignedZeroInfNanPreserveFloat16",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderSignedZeroInfNanPreserveFloat32",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderSignedZeroInfNanPreserveFloat64",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            }
          ],
          "$name": "SignedZeroInfNanPreserve"
        },
        {
          "enable": [
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTEFloat16",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTEFloat32",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTEFloat64",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            }
          ],
          "$name": "RoundingModeRTE"
        },
        {
          "enable": [
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTZFloat16",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTZFloat32",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            },
            {
              "$property": "VkPhysicalDeviceVulkan12Properties",
              "$member": "shaderRoundingModeRTZFloat64",
              "$value": "VK_TRUE",
              "$requires": "VK_VERSION_1_2,VK_KHR_shader_float_controls"
            }
          ],
          "$name": "RoundingModeRTZ"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
            "$feature": "computeDerivativeGroupQuads",
            "$requires": "VK_NV_compute_shader_derivatives"
          },
          "$name": "ComputeDerivativeGroupQuadsNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
            "$feature": "computeDerivativeGroupLinear",
            "$requires": "VK_NV_compute_shader_derivatives"
          },
          "$name": "ComputeDerivativeGroupLinearNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV",
            "$feature": "fragmentShaderBarycentric",
            "$requires": "VK_NV_fragment_shader_barycentric"
          },
          "$name": "FragmentBarycentricNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShaderImageFootprintFeaturesNV",
            "$feature": "imageFootprint",
            "$requires": "VK_NV_shader_image_footprint"
          },
          "$name": "ImageFootprintNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShadingRateImageFeaturesNV",
            "$feature": "shadingRateImage",
            "$requires": "VK_NV_shading_rate_image"
          },
          "$name": "ShadingRateNV"
        },
        {
          "enable": {
            "$extension": "VK_NV_mesh_shader"
          },
          "$name": "MeshShadingNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
            "$feature": "rayTracingPipeline",
            "$requires": "VK_KHR_ray_tracing_pipeline"
          },
          "$name": "RayTracingKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceRayQueryFeaturesKHR",
            "$feature": "rayQuery",
            "$requires": "VK_KHR_ray_query"
          },
          "$name": "RayQueryKHR"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
              "$feature": "rayTraversalPrimitiveCulling",
              "$requires": "VK_KHR_ray_tracing_pipeline"
            },
            {
              "$struct": "VkPhysicalDeviceRayQueryFeaturesKHR",
              "$feature": "rayQuery",
              "$requires": "VK_KHR_ray_query"
            }
          ],
          "$name": "RayTraversalPrimitiveCullingKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR",
            "$feature": "rayTracingMaintenance1",
            "$requires": "VK_KHR_ray_tracing_maintenance1"
          },
          "$name": "RayCullMaskKHR"
        },
        {
          "enable": {
            "$extension": "VK_NV_ray_tracing"
          },
          "$name": "RayTracingNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV",
            "$feature": "rayTracingMotionBlur",
            "$requires": "VK_NV_ray_tracing_motion_blur"
          },
          "$name": "RayTracingMotionBlurNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceTransformFeedbackFeaturesEXT",
            "$feature": "transformFeedback",
            "$requires": "VK_EXT_transform_feedback"
          },
          "$name": "TransformFeedback"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceTransformFeedbackFeaturesEXT",
            "$feature": "geometryStreams",
            "$requires": "VK_EXT_transform_feedback"
          },
          "$name": "GeometryStreams"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFragmentDensityMapFeaturesEXT",
            "$feature": "fragmentDensityMap",
            "$requires": "VK_EXT_fragment_density_map"
          },
          "$name": "FragmentDensityEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan12Features",
              "$feature": "bufferDeviceAddress",
              "$requires": "VK_VERSION_1_2,VK_KHR_buffer_device_address"
            },
            {
              "$struct": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
              "$feature": "bufferDeviceAddress",
              "$requires": "VK_EXT_buffer_device_address",
              "$alias": "bufferDeviceAddressEXT"
            }
          ],
          "$name": "PhysicalStorageBufferAddresses"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceCooperativeMatrixFeaturesNV",
            "$feature": "cooperativeMatrix",
            "$requires": "VK_NV_cooperative_matrix"
          },
          "$name": "CooperativeMatrixNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL",
            "$feature": "shaderIntegerFunctions2",
            "$requires": "VK_INTEL_shader_integer_functions2"
          },
          "$name": "IntegerFunctions2INTEL"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV",
            "$feature": "shaderSMBuiltins",
            "$requires": "VK_NV_shader_sm_builtins"
          },
          "$name": "ShaderSMBuiltinsNV"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
            "$feature": "fragmentShaderSampleInterlock",
            "$requires": "VK_EXT_fragment_shader_interlock"
          },
          "$name": "FragmentShaderSampleInterlockEXT"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
            "$feature": "fragmentShaderPixelInterlock",
            "$requires": "VK_EXT_fragment_shader_interlock"
          },
          "$name": "FragmentShaderPixelInterlockEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
              "$feature": "fragmentShaderShadingRateInterlock",
              "$requires": "VK_EXT_fragment_shader_interlock"
            },
            {
              "$struct": "VkPhysicalDeviceShadingRateImageFeaturesNV",
              "$feature": "shadingRateImage",
              "$requires": "VK_NV_shading_rate_image"
            }
          ],
          "$name": "FragmentShaderShadingRateInterlockEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan13Features",
              "$feature": "shaderDemoteToHelperInvocation",
              "$requires": "VK_VERSION_1_3,VK_EXT_shader_demote_to_helper_invocation"
            },
            {
              "$struct": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT",
              "$feature": "shaderDemoteToHelperInvocation",
              "$requires": "VK_EXT_shader_demote_to_helper_invocation"
            }
          ],
          "$name": "DemoteToHelperInvocationEXT"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
              "$feature": "pipelineFragmentShadingRate",
              "$requires": "VK_KHR_fragment_shading_rate"
            },
            {
              "$struct": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
              "$feature": "primitiveFragmentShadingRate",
              "$requires": "VK_KHR_fragment_shading_rate"
            },
            {
              "$struct": "VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
              "$feature": "attachmentFragmentShadingRate",
              "$requires": "VK_KHR_fragment_shading_rate"
            }
          ],
          "$name": "FragmentShadingRateKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
            "$feature": "workgroupMemoryExplicitLayout",
            "$requires": "VK_KHR_workgroup_memory_explicit_layout"
          },
          "$name": "WorkgroupMemoryExplicitLayoutKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
            "$feature": "workgroupMemoryExplicitLayout8BitAccess",
            "$requires": "VK_KHR_workgroup_memory_explicit_layout"
          },
          "$name": "WorkgroupMemoryExplicitLayout8BitAccessKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
            "$feature": "workgroupMemoryExplicitLayout16BitAccess",
            "$requires": "VK_KHR_workgroup_memory_explicit_layout"
          },
          "$name": "WorkgroupMemoryExplicitLayout16BitAccessKHR"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan13Features",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"
            },
            {
              "$struct": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_KHR_shader_integer_dot_product"
            }
          ],
          "$name": "DotProductInputAllKHR"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan13Features",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"
            },
            {
              "$struct": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_KHR_shader_integer_dot_product"
            }
          ],
          "$name": "DotProductInput4x8BitKHR"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan13Features",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"
            },
            {
              "$struct": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_KHR_shader_integer_dot_product"
            }
          ],
          "$name": "DotProductInput4x8BitPackedKHR"
        },
        {
          "enable": [
            {
              "$struct": "VkPhysicalDeviceVulkan13Features",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_VERSION_1_3,VK_KHR_shader_integer_dot_product"
            },
            {
              "$struct": "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR",
              "$feature": "shaderIntegerDotProduct",
              "$requires": "VK_KHR_shader_integer_dot_product"
            }
          ],
          "$name": "DotProductKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR",
            "$feature": "fragmentShaderBarycentric",
            "$requires": "VK_KHR_fragment_shader_barycentric"
          },
          "$name": "FragmentBarycentricKHR"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceImageProcessingFeaturesQCOM",
            "$feature": "textureSampleWeighted",
            "$requires": "VK_QCOM_image_processing"
          },
          "$name": "TextureSampleWeightedQCOM"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceImageProcessingFeaturesQCOM",
            "$feature": "textureBoxFilter",
            "$requires": "VK_QCOM_image_processing"
          },
          "$name": "TextureBoxFilterQCOM"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceImageProcessingFeaturesQCOM",
            "$feature": "textureBlockMatch",
            "$requires": "VK_QCOM_image_processing"
          },
          "$name": "TextureBlockMatchQCOM"
        },
        {
          "enable": {
            "$extension": "VK_EXT_mesh_shader"
          },
          "$name": "MeshShadingEXT"
        },
        {
          "enable": {
            "$extension": "VK_EXT_opacity_micromap"
          },
          "$name": "RayTracingOpacityMicromapEXT"
        },
        {
          "enable": {
            "$struct": "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM",
            "$feature": "shaderCoreBuiltins",
            "$requires": "VK_ARM_shader_core_builtins"
          },
          "$name": "CoreBuiltinsARM"
        },
        {
          "enable": {
            "$extension": "VK_NV_ray_tracing_invocation_reorder"
          },
          "$name": "ShaderInvocationReorderNV"
        }
      ],
      "$comment": "SPIR-V Capabilities allowed in Vulkan and what is required to use it"
    }
  }
}
